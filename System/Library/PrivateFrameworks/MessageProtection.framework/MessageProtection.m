uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 8u);
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x20BD3C3B4](a1, v6, a5);
}

CFStringRef OUTLINED_FUNCTION_2_0(CFTypeRef *a1)
{
  return CFCopyDescription(*a1);
}

void OUTLINED_FUNCTION_2_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x20BD3C3FC]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_store_extra_inhabitant_index_2Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v10;

  result = a5(0);
  v10 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for SymmetricRatchet();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t __swift_store_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v11 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a3)
  {
    v13 = v11;
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v15 = a1;
  }
  else
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(a6);
    v15 = a1 + *(int *)(a4 + 20);
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  }
  return v14(v15, a2, a2, v13);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x20BD3C408](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_BYTE *specialized Data._Representation.init(_:)(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t specialized Data.InlineData.init(_:)(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t specialized Data.InlineSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t __swift_get_extra_inhabitant_index_1Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10)
    return 0;
  else
    return v11;
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;

  v7 = a4(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, a2, v7);
  v10 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  return (v10 + 1);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = type metadata accessor for SymmetricRatchet();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  else
    return 0;
}

uint64_t __swift_get_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v9 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    v11 = v9;
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    v13 = a1;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = a1 + *(int *)(a3 + 20);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
  }
  return v12(v13, a2, v11);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void specialized static Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_20BABE054()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_20BABE088 + *((int *)qword_20BB156A0 + (v0 >> 62))))();
}

uint64_t sub_20BABE098@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  closure #1 in static Data.== infix(_:_:)(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_20BABE364(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x20BABE548);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t outlined destroy of ContiguousBytes?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL SecMPSignAndProtectMessage(const __CFData *a1, uint64_t a2, uint64_t a3, CFDataRef theData, CFErrorRef *a5)
{
  uint64_t v7;
  uint64_t v8;
  const __CFData *v9;
  _BOOL8 v10;
  CFAllocatorRef *v11;
  const __CFAllocator *v12;
  const __CFData *Mutable;
  __CFData *v14;
  CFIndex v15;
  const UInt8 *BytePtr;
  CFIndex v17;
  UInt8 *MutableBytePtr;
  uint64_t v19;
  int v20;
  CFIndex v21;
  CFIndex v22;
  const UInt8 *v23;
  const __CFAllocator *v24;
  CFDataRef v25;
  CFIndex v26;
  const UInt8 *v27;
  const __CFData *v28;
  CFIndex v29;
  CFIndex v30;
  const UInt8 *v31;
  CFIndex v32;
  UInt8 *v33;
  uint64_t v34;
  int inserted;
  const __CFData *v36;
  const UInt8 *v37;
  CFDataRef v38;
  NSObject *v39;
  CFErrorRef v40;
  const char *v41;
  NSObject *v42;
  uint32_t v43;
  const __CFString *v44;
  int v46;
  CFIndex length;
  __CFData *v48;
  CFDataRef cf;
  const __CFData *v50;
  uint64_t v51;
  uint64_t v52;
  UInt8 bytes;
  uint8_t buf[4];
  __CFData *v55;
  __int16 v56;
  CFErrorRef v57;
  uint64_t v58;

  v7 = a3;
  v8 = a2;
  v9 = a1;
  v10 = 0;
  v58 = *MEMORY[0x24BDAC8D0];
  v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
  if (!a1 || !a2 || !a3 || !theData)
    goto LABEL_38;
  length = CFDataGetLength(theData);
  v12 = *v11;
  Mutable = CFDataCreateMutable(*v11, 0);
  v14 = CFDataCreateMutable(v12, 0);
  bytes = 2;
  CFDataAppendBytes(v14, &bytes, 1);
  v51 = v8;
  SecMPFIAppendCanonicalPublicHash(v8, v14);
  v52 = v7;
  SecMPPIAppendCanonicalHash(v7, v14);
  v15 = CFDataGetLength(v9);
  BytePtr = CFDataGetBytePtr(v9);
  v17 = CFDataGetLength(Mutable);
  v50 = v9;
  if ((unint64_t)(v15 - 0x7FFFFFFF) < 0xFFFFFFFF80000002)
    goto LABEL_44;
  if (!BytePtr || (CFDataIncreaseLength(Mutable, v15 + 16), (MutableBytePtr = CFDataGetMutableBytePtr(Mutable)) == 0))
  {
    v46 = -909;
    goto LABEL_47;
  }
  v19 = (uint64_t)&MutableBytePtr[v17];
  if (SecRandomCopyBytes((SecRandomRef)*MEMORY[0x24BDE94B8], 0x10uLL, &MutableBytePtr[v17])
    || !CFDataGetBytePtr(v14)
    || CFDataGetLength(v14) < 1)
  {
LABEL_44:
    v46 = -50;
LABEL_47:
    CFDataSetLength(Mutable, v17);
    SecMPCreateError(0, v46, CFSTR("Failed to Encrypt message"), 0, a5);
    v38 = 0;
    v36 = 0;
    cf = 0;
    v10 = 0;
    v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
    goto LABEL_18;
  }
  v20 = SecMPComputeIntegrityTag(v9, v14, v19);
  if (v20)
  {
    v46 = v20;
    goto LABEL_47;
  }
  v48 = v14;
  ccaes_ctr_crypt_mode();
  ccctr_one_shot();
  v21 = SecMPPIEncryptionSpace(v52, 1);
  v22 = CFDataGetLength(Mutable);
  if (v22 < v21)
    v21 = v22;
  v23 = CFDataGetBytePtr(Mutable);
  v24 = (const __CFAllocator *)*MEMORY[0x24BDBD258];
  v25 = CFDataCreateWithBytesNoCopy(v12, v23, v21, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v26 = CFDataGetLength(Mutable) - v21;
  v27 = CFDataGetBytePtr(Mutable);
  v28 = CFDataCreateWithBytesNoCopy(v12, &v27[v21], v26, v24);
  CFDataAppendBytes(theData, &bytes, 1);
  v29 = CFDataGetLength(theData);
  CFDataIncreaseLength(theData, 2);
  v30 = CFDataGetLength(theData);
  cf = v25;
  if (SecMPPIAppendPKIEncryptedData(v52, (uint64_t)v25, theData))
  {
    v31 = CFDataGetBytePtr(v28);
    v32 = CFDataGetLength(v28);
    CFDataAppendBytes(theData, v31, v32);
    v33 = &CFDataGetMutableBytePtr(theData)[v29];
    v34 = CFDataGetLength(theData) - v30;
    inserted = insertSize(v34, v33, a5);
    v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
    v36 = v28;
    if (inserted)
    {
      v38 = 0;
      v10 = 0;
    }
    else
    {
      v37 = CFDataGetBytePtr(theData);
      v38 = CFDataCreate(v12, &v37[v30], v34);
      v10 = SecMPFIAppendSignature(v51, (uint64_t)v38, theData, a5);
    }
  }
  else
  {
    v38 = 0;
    v10 = 0;
    v11 = (CFAllocatorRef *)MEMORY[0x24BDBD240];
    v36 = v28;
  }
  v14 = v48;
LABEL_18:
  v9 = v50;
  if (a5 && *a5)
  {
    MessageProtectionLog();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      v40 = *a5;
      *(_DWORD *)buf = 138412546;
      v55 = v14;
      v56 = 2112;
      v57 = v40;
      v41 = "Message Encryption: sender/receiver hash: %@ status: %@";
      v42 = v39;
      v43 = 22;
LABEL_24:
      _os_log_impl(&dword_20BABB000, v42, OS_LOG_TYPE_INFO, v41, buf, v43);
    }
  }
  else
  {
    MessageProtectionLog();
    v39 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      v55 = v14;
      v41 = "Message Encryption: sender/receiver hash: %@ status: success";
      v42 = v39;
      v43 = 12;
      goto LABEL_24;
    }
  }

  if (v14)
    CFRelease(v14);
  if (Mutable)
    CFRelease(Mutable);
  if (cf)
    CFRelease(cf);
  if (v36)
    CFRelease(v36);
  if (v38)
    CFRelease(v38);
  v7 = v52;
  if (!v10)
    CFDataSetLength(theData, length);
  v8 = v51;
LABEL_38:
  if (a5)
  {
    if (!v10 && !*a5)
    {
      v44 = CFStringCreateWithFormat(*v11, 0, CFSTR("Parameter error, all pointers must be valid. sourceMessage = %p, sender = %p, receiver = %p, protected message = %p."), v9, v8, v7, theData);
      SecMPCreateError(0, -7, v44, 0, a5);
      if (v44)
        CFRelease(v44);
    }
  }
  return v10;
}

CFDataRef SecMPCopyProtectedMsgHash(const __CFData *a1, uint64_t a2, uint64_t *a3)
{
  CFIndex Length;
  unint64_t v7;
  uint64_t v8;
  CFDataRef v9;
  CFIndex v10;
  const __CFAllocator *v11;
  const UInt8 *BytePtr;
  const __CFData *v13;
  const UInt8 *v14;
  CC_LONG v15;
  unsigned __int8 md[32];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  Length = CFDataGetLength(a1);
  if (Length)
  {
    v7 = Length;
    v8 = objc_msgSend(*(id *)(a2 + 48), "encryptionSize");
    v9 = 0;
    if ((v8 & 0x8000000000000000) == 0)
    {
      v10 = v8;
      if (v7 >= v8 + 3)
      {
        v11 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
        BytePtr = CFDataGetBytePtr(a1);
        v13 = CFDataCreateWithBytesNoCopy(v11, BytePtr + 3, v10, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
        v14 = CFDataGetBytePtr(v13);
        v15 = CFDataGetLength(v13);
        CC_SHA256(v14, v15, md);
        v9 = CFDataCreate(v11, md, 32);
        if (v13)
          CFRelease(v13);
      }
    }
  }
  else
  {
    MPLogAndAssignCFError(1, a3, CFSTR("SecMPVerifyMessageContents: Missing incoming data."));
    return 0;
  }
  return v9;
}

uint64_t SecMPComputeIntegrityTag(const __CFData *a1, const __CFData *a2, uint64_t a3)
{
  CFIndex Length;
  const UInt8 *BytePtr;
  CFIndex v8;
  const UInt8 *v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  Length = CFDataGetLength(a1);
  BytePtr = CFDataGetBytePtr(a1);
  v8 = CFDataGetLength(a2);
  v9 = CFDataGetBytePtr(a2);
  v10 = *(_QWORD *)ccsha256_di();
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8]();
  result = 4294966387;
  if (a3 && BytePtr && Length >= 1)
  {
    cchmac_init();
    cchmac_update();
    if (v9)
    {
      if ((v8 & 0x8000000000000000) == 0)
        cchmac_update();
    }
    cchmac_final();
    *(_DWORD *)(a3 + 11) = *(_DWORD *)v11;
    *(_BYTE *)(a3 + 15) = v11[4];
    cc_clear();
    cc_clear();
    return 0;
  }
  return result;
}

SecKeyRef SecMWCreateEphemeralDeviceIdentity(const __CFAllocator *a1, CFErrorRef *a2)
{
  CFNumberRef v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  CFDictionaryRef v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  __CFDictionary *MutableForCFTypesWith;
  SecKeyRef RandomKey;
  int valuePtr;

  valuePtr = 256;
  v4 = CFNumberCreate(a1, kCFNumberIntType, &valuePtr);
  v12 = CFDictionaryCreateForCFTypes(a1, v5, v6, v7, v8, v9, v10, v11, *MEMORY[0x24BDE9018], *MEMORY[0x24BDBD268]);
  MutableForCFTypesWith = CFDictionaryCreateMutableForCFTypesWith(a1, v13, v14, v15, v16, v17, v18, v19, (void *)*MEMORY[0x24BDE9050], *MEMORY[0x24BDE9060]);
  RandomKey = SecKeyCreateRandomKey(MutableForCFTypesWith, a2);
  if (MutableForCFTypesWith)
    CFRelease(MutableForCFTypesWith);
  if (v12)
    CFRelease(v12);
  if (v4)
    CFRelease(v4);
  return RandomKey;
}

CFDataRef SecMWCreateSessionSalt(const __CFAllocator *a1, CFErrorRef *a2)
{
  CFErrorRef v4;
  CFDataRef result;
  UInt8 bytes[16];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (!SecRandomCopyBytes((SecRandomRef)*MEMORY[0x24BDE94B8], 0x10uLL, bytes))
    return CFDataCreate(a1, bytes, 16);
  if (!a2)
    return 0;
  v4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], CFSTR("SecRandomCopyBytes"), -1, 0);
  result = 0;
  *a2 = v4;
  return result;
}

CFDataRef SecMWCreateSessionSeed(const __CFAllocator *a1, CFErrorRef *a2)
{
  CFErrorRef v4;
  CFDataRef result;
  UInt8 bytes[32];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (!SecRandomCopyBytes((SecRandomRef)*MEMORY[0x24BDE94B8], 0x20uLL, bytes))
    return CFDataCreate(a1, bytes, 32);
  if (!a2)
    return 0;
  v4 = CFErrorCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], CFSTR("SecRandomCopyBytes"), -1, 0);
  result = 0;
  *a2 = v4;
  return result;
}

CFDictionaryRef CFDictionaryCreateForCFTypes(CFAllocatorRef allocator, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v15;
  const void *v16;
  const void **v17;
  const void *v18;
  const void *v19;
  const void *v20;
  CFDictionaryRef Copy;
  uint64_t *v23;
  const void **v24;

  v23 = &a10;
  v11 = 0;
  if (a9)
  {
    do
    {
      v11 += 2;
      v12 = v23;
      v23 += 2;
    }
    while (v12[1]);
  }
  v13 = v11 >> 1;
  v24 = (const void **)&a9;
  Mutable = CFDictionaryCreateMutable(allocator, v11 >> 1, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
    return 0;
  v15 = Mutable;
  if (v11)
  {
    v16 = (const void *)*MEMORY[0x24BDBD430];
    do
    {
      v17 = v24;
      v18 = *v24;
      v24 += 2;
      v19 = v17[1];
      if (v19)
        v20 = v19;
      else
        v20 = v16;
      CFDictionarySetValue(v15, v18, v20);
      --v13;
    }
    while (v13);
  }
  Copy = CFDictionaryCreateCopy(allocator, v15);
  CFRelease(v15);
  return Copy;
}

__CFDictionary *CFDictionaryCreateMutableForCFTypesWith(const __CFAllocator *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *key, uint64_t a10)
{
  __CFDictionary *Mutable;
  const void *v11;
  const void **v12;
  const void **v14;

  Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v14 = (const void **)&a10;
  v11 = key;
  if (key)
  {
    do
    {
      CFDictionarySetValue(Mutable, v11, *v14);
      v12 = v14 + 1;
      v14 += 2;
      v11 = *v12;
    }
    while (*v12);
  }
  return Mutable;
}

uint64_t NoError()
{
  return objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", CFSTR("com.apple.messageprotection"), 0, MEMORY[0x24BDBD1B8]);
}

id MessageProtectionLog()
{
  if (MessageProtectionLog_onceToken != -1)
    dispatch_once(&MessageProtectionLog_onceToken, &__block_literal_global);
  return (id)MessageProtectionLog_log;
}

void MPLogAndAssignCFError(uint64_t a1, uint64_t *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = v5;
  if (a2)
  {
    v7 = (void *)MEMORY[0x24BDD1540];
    v10 = *MEMORY[0x24BDD0FC8];
    v11[0] = v5;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "errorWithDomain:code:userInfo:", CFSTR("com.apple.messageprotection"), a1, v8);
    *a2 = objc_claimAutoreleasedReturnValue();

    MessageProtectionLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      MPLogAndAssignCFError_cold_2();
  }
  else
  {
    MessageProtectionLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      MPLogAndAssignCFError_cold_1();
  }

}

void MPLogAndAssignError(uint64_t a1, _QWORD *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v5 = a3;
  v6 = v5;
  if (a2)
  {
    v7 = (void *)MEMORY[0x24BDD1540];
    v10 = *MEMORY[0x24BDD0FC8];
    v11[0] = v5;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v11, &v10, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "errorWithDomain:code:userInfo:", CFSTR("com.apple.messageprotection"), a1, v8);
    *a2 = (id)objc_claimAutoreleasedReturnValue();

    MessageProtectionLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      MPLogAndAssignCFError_cold_2();
  }
  else
  {
    MessageProtectionLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      MPLogAndAssignError_cold_1();
  }

}

uint64_t SecMPCreateError(int a1, CFIndex a2, const __CFString *a3, __CFError *cf, CFErrorRef *a5)
{
  const __CFAllocator *v9;
  __CFString *MutableCopy;
  const __CFString *v11;
  CFIndex v12;
  void *v13;
  CFErrorDomain *v14;
  void *userInfoValues[2];
  void *userInfoKeys[3];

  userInfoKeys[2] = *(void **)MEMORY[0x24BDAC8D0];
  if (a5 && !*a5)
  {
    v9 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, a3);
    if (cf)
    {
      v11 = CFErrorCopyDescription(cf);
      CFStringAppend(MutableCopy, CFSTR(" \\ "));
      CFStringAppend(MutableCopy, v11);
      CFRelease(v11);
      v12 = 2;
    }
    else
    {
      v12 = 1;
    }
    v13 = (void *)*MEMORY[0x24BDBD3B0];
    userInfoKeys[0] = *(void **)MEMORY[0x24BDBD378];
    userInfoKeys[1] = v13;
    v14 = (CFErrorDomain *)&sLocalErrorDomain;
    userInfoValues[0] = MutableCopy;
    userInfoValues[1] = cf;
    if (a1)
      v14 = (CFErrorDomain *)MEMORY[0x24BDBD388];
    *a5 = CFErrorCreateWithUserInfoKeysAndValues(v9, *v14, a2, (const void *const *)userInfoKeys, (const void *const *)userInfoValues, v12);
    CFRelease(MutableCopy);
  }
  if (cf)
    CFRelease(cf);
  return 0;
}

void sub_20BAC1100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20BAC1414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t SecMPPIEncryptionSpace(uint64_t a1, int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = objc_msgSend(*(id *)(a1 + 32), "encryptionSize");
  v4 = -44;
  if (!a2)
    v4 = -43;
  v5 = v3 + v4;
  if (v3 >= 0x2A)
    return v5;
  else
    return 0;
}

uint64_t SecMPPIRecreateSignature(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  MEMORY[0x20BD3BE74]();
  v6 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  MEMORY[0x24BDAC7A8](v6);
  ccder_decode_sequence_tl();
  mp_decode_forced_uint();
  mp_decode_forced_uint();
  v7 = *a3 + *a4;
  ccder_encode_integer();
  ccder_encode_integer();
  result = ccder_encode_constructed_tl();
  *a3 = result;
  *a4 = (v7 - result) & ~((v7 - result) >> 63);
  return result;
}

uint64_t mp_decode_forced_uint()
{
  uint64_t result;
  uint64_t v1;

  result = ccder_decode_tl();
  if (result)
  {
    v1 = result;
    if ((ccn_read_uint() & 0x80000000) != 0)
      return 0;
    else
      return v1;
  }
  return result;
}

uint64_t SecMPVerifyAndExposeMessage(const __CFData *a1, uint64_t a2, uint64_t a3, const __CFData *a4, CFErrorRef *a5)
{
  const UInt8 *BytePtr;
  CFIndex v11;
  CFIndex v12;
  const __CFAllocator *v13;
  __CFData *Mutable;
  unint64_t v15;
  __CFString *v16;
  __CFString *v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const UInt8 *v22;
  uint64_t v23;
  __CFData *v24;
  id *v25;
  uint64_t v26;
  uint64_t v27;
  CFIndex v28;
  uint64_t v29;
  const UInt8 *v30;
  const __CFData *v31;
  CFIndex v32;
  const UInt8 *v33;
  const __CFData *v34;
  const UInt8 *v35;
  CFDataRef v36;
  CFIndex v37;
  const __CFData *ReferenceFromRange;
  __CFData *v39;
  CFIndex v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  _BOOL4 v44;
  NSObject *v45;
  NSObject *v46;
  __CFString *v47;
  const UInt8 *v48;
  unsigned __int8 *v49;
  CFIndex v50;
  CFIndex v51;
  const __CFAllocator *bytesDeallocator;
  const UInt8 *bytesDeallocatora;
  unint64_t v54;
  CFIndex v55;
  CFIndex v56;
  CFIndex v57;
  id *cf;
  CFIndex length;
  const UInt8 *v60;
  unsigned __int16 v61;
  unint64_t v62;
  uint8_t buf[4];
  __CFData *v64;
  __int16 v65;
  NSObject *v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          if (CFDataGetLength(a1))
          {
            BytePtr = CFDataGetBytePtr(a1);
            v11 = CFDataGetLength(a4);
            v12 = v11;
            if (*BytePtr != 2)
            {
              SecMPCreateError(0, -8, CFSTR("Unknown format of message to verify and expose"), 0, a5);
LABEL_67:
              CFDataSetLength(a4, v12);
              return 0;
            }
            v57 = v11;
            v56 = CFDataGetLength(a4);
            v13 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
            Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
            v15 = CFDataGetLength(a1);
            if (v15 <= 3)
            {
              v16 = CFSTR("SecMPVerifyMessageContents: Incoming length is too short.");
LABEL_34:
              MPLogAndAssignCFError(1, (uint64_t *)a5, v16);
              cf = 0;
              goto LABEL_35;
            }
            v19 = v15;
            v62 = v15;
            v61 = 0;
            v20 = objc_msgSend(*(id *)(a3 + 48), "encryptionSize");
            if (v20 < 0)
            {
              v16 = CFSTR("SecMPVerifyMessageContents: Inconsistent encryptionSize.");
              goto LABEL_34;
            }
            v21 = v20;
            v22 = CFDataGetBytePtr(a1);
            v60 = v22;
            CFDataAppendBytes(Mutable, v22, 1);
            v23 = SecMPPublicIdentityCopyFromPrivate(0, a3);
            if (!v23)
            {
              v16 = CFSTR("SecMPVerifyMessageContents: Unable to get public identity from private of the receiver.");
              goto LABEL_34;
            }
            v54 = v21;
            v24 = Mutable;
            v25 = (id *)v23;
            SecMPPIAppendCanonicalHash(a2, v24);
            cf = v25;
            v26 = (uint64_t)v25;
            Mutable = v24;
            SecMPPIAppendCanonicalHash(v26, v24);
            v60 = v22 + 1;
            v62 = v19 - 1;
            if (readSize((uint64_t *)&v60, (uint64_t *)&v62, &v61, a5))
            {
LABEL_35:
              v39 = 0;
              ReferenceFromRange = 0;
              v36 = 0;
              v34 = 0;
              v31 = 0;
              goto LABEL_36;
            }
            v27 = v54;
            if (v54 > v61 || v62 < (unint64_t)v61 + 60)
            {
              v47 = CFSTR("SecMPVerifyMessageContents: Insufficient size remaining.");
            }
            else
            {
              v28 = v62 - v61;
              v29 = v19 - v28;
              if (v29 >= 0)
              {
                v30 = CFDataGetBytePtr(a1);
                bytesDeallocator = (const __CFAllocator *)*MEMORY[0x24BDBD258];
                v31 = CFDataCreateWithBytesNoCopy(v13, &v30[v29], v28, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
                v32 = v61;
                v33 = CFDataGetBytePtr(a1);
                v51 = v32;
                v34 = CFDataCreateWithBytesNoCopy(v13, v33 + 3, v32, bytesDeallocator);
                v35 = CFDataGetBytePtr(v34);
                v36 = CFDataCreateWithBytesNoCopy(v13, v35, v54, bytesDeallocator);
                length = SecMPFIEncryptionSpace(a3);
                if (length < 0)
                {
                  MPLogAndAssignCFError(1, (uint64_t *)a5, CFSTR("SecMPVerifyMessageContents: Insufficient public key encryption space."));
                }
                else
                {
                  bytesDeallocatora = CFDataGetBytePtr(v34);
                  v50 = CFDataGetLength(v34);
                  v49 = (unsigned __int8 *)CFDataGetBytePtr(v31);
                  v37 = CFDataGetLength(v31);
                  if (SecMPPIVerifySignature(a2, (uint64_t)bytesDeallocatora, v50, v49, v37, (uint64_t *)a5))
                  {
                    v55 = v51 - v54;
                    ReferenceFromRange = CFDataCreateReferenceFromRange(v13, v34, v27, v51 - v27);
                    v39 = CFDataCreateMutable(v13, 0);
                    if (SecMPFIDecrypt(a3, (uint64_t)v36, v39, &length, a5))
                    {
                      if (v55 < 1)
                        goto LABEL_46;
                      v40 = length;
                      v41 = objc_msgSend(cf[4], "encryptionSize");
                      v42 = v41 - 44;
                      if (v41 < 0x2A)
                        v42 = 0;
                      if (v40 == v42)
                        v43 = 1;
                      else
LABEL_46:
                        v43 = 0;
                      CFDataSetLength(v39, length);
                      v48 = CFDataGetBytePtr(ReferenceFromRange);
                      CFDataAppendBytes(v39, v48, v55);
                      v44 = SecMPDecryptUsingCTREmbeddedKey(v39, Mutable, a4, v43, a5) == 0;
                      if (!a5)
                        goto LABEL_48;
LABEL_37:
                      if (*a5)
                      {
                        v45 = CFCopyDescription(*a5);
                        MessageProtectionLog();
                        v46 = objc_claimAutoreleasedReturnValue();
                        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 138412546;
                          v64 = Mutable;
                          v65 = 2112;
                          v66 = v45;
                          _os_log_impl(&dword_20BABB000, v46, OS_LOG_TYPE_DEFAULT, "Message Decryption: sender/receiver hash: %@ status: %@", buf, 0x16u);
                        }

LABEL_50:
                        if (Mutable)
                          CFRelease(Mutable);
                        if (v31)
                          CFRelease(v31);
                        if (v34)
                          CFRelease(v34);
                        if (v36)
                          CFRelease(v36);
                        if (v39)
                          CFRelease(v39);
                        if (ReferenceFromRange)
                          CFRelease(ReferenceFromRange);
                        if (cf)
                          CFRelease(cf);
                        if (v44)
                          return 1;
                        CFDataSetLength(a4, v56);
                        v12 = v57;
                        goto LABEL_67;
                      }
LABEL_48:
                      MessageProtectionLog();
                      v45 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 138412290;
                        v64 = Mutable;
                        _os_log_impl(&dword_20BABB000, v45, OS_LOG_TYPE_DEFAULT, "Message Decryption: sender/receiver hash: %@ status: success", buf, 0xCu);
                      }
                      goto LABEL_50;
                    }
LABEL_36:
                    v44 = 0;
                    if (!a5)
                      goto LABEL_48;
                    goto LABEL_37;
                  }
                }
                v39 = 0;
                ReferenceFromRange = 0;
                goto LABEL_36;
              }
              v47 = CFSTR("SecMPVerifyMessageContents: Insufficient size remaining for the signature.");
            }
            MPLogAndAssignCFError(1, (uint64_t *)a5, v47);
            goto LABEL_35;
          }
          v17 = CFSTR("SecMPVerifyAndExposeMessage: Missing incoming data.");
        }
        else
        {
          v17 = CFSTR("SecMPVerifyAndExposeMessage: Missing exposedMessageContents DataRef.");
        }
      }
      else
      {
        v17 = CFSTR("SecMPVerifyAndExposeMessage: Missing receiver.");
      }
    }
    else
    {
      v17 = CFSTR("SecMPVerifyAndExposeMessage: Missing sender.");
    }
  }
  else
  {
    v17 = CFSTR("SecMPVerifyAndExposeMessage: Missing incoming message.");
  }
  MPLogAndAssignCFError(1, (uint64_t *)a5, v17);
  return 0;
}

CFDataRef CFDataCreateReferenceFromRange(const __CFAllocator *a1, CFDataRef theData, uint64_t a3, CFIndex a4)
{
  const UInt8 *v6;

  v6 = &CFDataGetBytePtr(theData)[a3];
  return CFDataCreateWithBytesNoCopy(a1, v6, a4, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
}

uint64_t SecMPDecryptUsingCTREmbeddedKey(const __CFData *a1, const __CFData *a2, const __CFData *a3, int a4, CFErrorRef *a5)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  CFIndex v12;
  uint64_t v13;

  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a3);
  v12 = CFDataGetLength(a1);
  v13 = 4294966387;
  if (v12 < 17 || !BytePtr)
    goto LABEL_10;
  CFDataIncreaseLength(a3, v12 - 16);
  CFDataGetMutableBytePtr(a3);
  ccaes_ctr_crypt_mode();
  ccctr_one_shot();
  if (a4
    && (!CFDataGetBytePtr(a2)
     || CFDataGetLength(a2) < 1
     || SecMPVerifyIntegrityTag(a3, a2, (uint64_t)BytePtr)))
  {
    v13 = 4294967246;
LABEL_10:
    CFDataSetLength(a3, Length);
    SecMPCreateError(0, (int)v13, CFSTR("Failed to Decrypt message"), 0, a5);
    return v13;
  }
  return 0;
}

uint64_t SecMPVerifyIntegrityTag(const __CFData *a1, const __CFData *a2, uint64_t a3)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  const UInt8 *v8;
  uint64_t v9;

  CFDataGetLength(a1);
  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a2);
  v8 = CFDataGetBytePtr(a2);
  ccsha256_di();
  MEMORY[0x24BDAC7A8]();
  MEMORY[0x24BDAC7A8]();
  v9 = 4294966387;
  if (a3 && BytePtr)
  {
    cchmac_init();
    cchmac_update();
    if (v8 && (Length & 0x8000000000000000) == 0)
      cchmac_update();
    cchmac_final();
    if (cc_cmp_safe())
      v9 = 4294942003;
    else
      v9 = 0;
    cc_clear();
    cc_clear();
  }
  return v9;
}

void SecMPLogError(__CFError *a1)
{
  const __CFDictionary *v2;
  CFIndex Code;
  const __CFString *Domain;
  const __CFString *Value;
  char v6[1024];
  char buffer[1024];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v2 = CFErrorCopyUserInfo(a1);
    Code = CFErrorGetCode(a1);
    Domain = CFErrorGetDomain(a1);
    Value = (const __CFString *)CFDictionaryGetValue(v2, (const void *)*MEMORY[0x24BDBD378]);
    if (CFDictionaryGetValue(v2, (const void *)*MEMORY[0x24BDBD3B0]))
      SecMPLogError();
    CFStringGetCString(Domain, buffer, 1024, 0x8000100u);
    CFStringGetCString(Value, v6, 1024, 0x8000100u);
    syslog(3, "MessageProtection: %s (%ld) -- %s", buffer, Code, v6);
    if (v2)
      CFRelease(v2);
  }
}

uint64_t insertSize(uint64_t a1, _WORD *a2, CFErrorRef *a3)
{
  unsigned int v3;
  uint64_t result;

  if (a1 > 65534)
  {
    SecMPCreateError(0, -7, CFSTR("Message to be encrypted larger than 64K"), 0, a3);
    return 4294967246;
  }
  else
  {
    v3 = a1;
    result = 0;
    *a2 = bswap32(v3) >> 16;
  }
  return result;
}

uint64_t appendSize(uint64_t a1, CFMutableDataRef theData, CFErrorRef *a3)
{
  UInt8 bytes[2];

  if (a1 > 65534)
  {
    SecMPCreateError(0, -7, CFSTR("Size larger than 64K"), 0, a3);
    return 4294967246;
  }
  else
  {
    *(_WORD *)bytes = bswap32(a1) >> 16;
    CFDataAppendBytes(theData, bytes, 2);
    return 0;
  }
}

uint64_t appendOneByteSize(uint64_t a1, CFMutableDataRef theData, CFErrorRef *a3)
{
  UInt8 bytes;

  if (a1 > 254)
  {
    SecMPCreateError(0, -7, CFSTR("Size larger than 255"), 0, a3);
    return 4294967246;
  }
  else
  {
    bytes = a1;
    CFDataAppendBytes(theData, &bytes, 1);
    return 0;
  }
}

uint64_t readSize(uint64_t *a1, uint64_t *a2, _WORD *a3, CFErrorRef *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 && a2 && a3 && (v4 = *a2 - 2, (unint64_t)*a2 >= 2))
  {
    v5 = 0;
    v6 = *a1 + 2;
    *a3 = bswap32(*(unsigned __int16 *)*a1) >> 16;
    *a2 = v4;
    *a1 = v6;
  }
  else
  {
    SecMPCreateError(0, -7, CFSTR("Failed to read size"), 0, a4);
    return 4294967246;
  }
  return v5;
}

uint64_t appendSizeAndData(const __CFData *a1, __CFData *a2, CFErrorRef *a3)
{
  CFIndex Length;
  const UInt8 *BytePtr;
  CFIndex v8;

  Length = CFDataGetLength(a1);
  if (appendSize(Length, a2, a3))
    return 4294942005;
  BytePtr = CFDataGetBytePtr(a1);
  v8 = CFDataGetLength(a1);
  CFDataAppendBytes(a2, BytePtr, v8);
  return 0;
}

uint64_t appendPublicOctetsAndSize(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  SecKeyCopyPublicBytes();
  SecMPCreateError(1, -11, CFSTR("Failed to export public key"), 0, a3);
  return 4294941021;
}

void appendLongLong(__CFData *a1, unint64_t a2)
{
  _QWORD v2[2];

  v2[1] = *MEMORY[0x24BDAC8D0];
  v2[0] = bswap64(a2);
  CFDataAppendBytes(a1, (const UInt8 *)v2, 8);
}

uint64_t readLongLong(unint64_t **a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = 4294967246;
  if (a1 && a2 && a3)
  {
    v5 = *a2 - 8;
    if ((unint64_t)*a2 >= 8)
    {
      result = 0;
      v6 = (uint64_t)(*a1 + 1);
      *a3 = bswap64(**a1);
      *a1 = (unint64_t *)v6;
      *a2 = v5;
    }
  }
  return result;
}

uint64_t SecMPFICreatePrivateAndPublicKeyReadPersistentRef(_QWORD *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, CFErrorRef *a5)
{
  id v10;
  void *v11;
  id v12;
  void *v13;
  const __CFDictionary *v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeID v18;
  CFTypeID TypeID;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 v24;
  CFTypeRef result;
  void *values[3];
  void *keys[4];

  keys[3] = *(void **)MEMORY[0x24BDAC8D0];
  v24 = 0;
  if (readSize(a2, a3, &v24, a5) || *a3 < (unint64_t)v24)
  {
    v12 = 0;
    goto LABEL_24;
  }
  v10 = objc_alloc(MEMORY[0x24BDBCE50]);
  v11 = (void *)objc_msgSend(v10, "initWithBytes:length:", *a2, v24);
  v12 = v11;
  if (!v11)
  {
LABEL_24:
    v16 = 4294967246;
    goto LABEL_22;
  }
  v13 = (void *)*MEMORY[0x24BDE9558];
  keys[0] = *(void **)MEMORY[0x24BDE9220];
  keys[1] = v13;
  keys[2] = *(void **)MEMORY[0x24BDE94D8];
  values[0] = *(void **)MEMORY[0x24BDE9248];
  values[1] = v11;
  values[2] = *(void **)MEMORY[0x24BDBD270];
  v14 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  result = 0;
  v15 = SecItemCopyMatching(v14, &result);
  if ((_DWORD)v15)
  {
    v16 = v15;
    goto LABEL_6;
  }
  v16 = 4294941996;
  if (!result)
  {
LABEL_6:
    v17 = 0;
    if (!v14)
      goto LABEL_8;
    goto LABEL_7;
  }
  v18 = CFGetTypeID(result);
  TypeID = SecKeyGetTypeID();
  v20 = v18 == TypeID;
  if (v18 == TypeID)
    v17 = result;
  else
    v17 = 0;
  if (v20)
    v16 = 0;
  else
    v16 = 4294941996;
  if (!v14)
    goto LABEL_8;
LABEL_7:
  CFRelease(v14);
LABEL_8:
  if ((_DWORD)v16)
  {
    SecMPCreateError(0, (int)v16, CFSTR("Keychain lookup failed"), 0, a5);
  }
  else
  {
    *a4 = v17;
    v21 = v24;
    *a2 += v24;
    *a3 -= v21;
    if (readSize(a2, a3, &v24, a5) || (v22 = v24, *a3 < (unint64_t)v24))
    {
      v16 = 0;
    }
    else
    {
      *a3 -= v24;
      *a2 += v22;
      v12 = objc_retainAutorelease(v12);
      v16 = 0;
      *a1 = v12;
    }
  }
LABEL_22:

  return v16;
}

uint64_t SecMPComputePaddingForTransport(unint64_t a1, int a2, CFErrorRef *a3)
{
  unint64_t Multiple;
  const __CFString *v6;
  CFIndex v7;
  BOOL v8;
  uint64_t result;

  if ((a1 & 0x8000000000000000) != 0)
  {
    v6 = CFSTR("Invalid input size");
    v7 = -7;
LABEL_12:
    SecMPCreateError(0, v7, v6, 0, a3);
    return -1;
  }
  if (a2 == 1)
  {
    Multiple = 64;
  }
  else
  {
    if (a2 != 2)
    {
      v6 = CFSTR("Invalid message type");
      v7 = -20;
      goto LABEL_12;
    }
    Multiple = 196;
  }
  if (Multiple < a1)
    Multiple = nextMultiple(a1, 0x10uLL);
  v8 = Multiple >= a1;
  result = Multiple - a1;
  if (!v8)
  {
    v6 = CFSTR("Invalid handling");
    v7 = -6;
    goto LABEL_12;
  }
  return result;
}

unint64_t nextMultiple(uint64_t a1, unint64_t a2)
{
  NSObject *v3;

  if (__CFADD__(a2, a1))
  {
    MessageProtectionLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      nextMultiple_cold_1(a1, a2, v3);

    __assert_rtn("nextMultiple", "SecMessageLengthHiding.m", 52, "0");
  }
  return (a1 + a2 - 1) / a2 * a2;
}

uint64_t SecMPComputePaddingForStorage(unint64_t a1, int a2, CFErrorRef *a3)
{
  int v4;
  unint64_t v6;
  unint64_t Multiple;
  unint64_t v8;
  const __CFString *v9;
  CFIndex v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;

  if ((a1 & 0x8000000000000000) != 0)
  {
    v9 = CFSTR("Invalid input size");
    v10 = -7;
LABEL_16:
    SecMPCreateError(0, v10, v9, 0, a3);
    return -1;
  }
  v4 = a2 - 1;
  if ((a2 - 1) >= 3)
  {
    v9 = CFSTR("Invalid message type");
    v10 = -20;
    goto LABEL_16;
  }
  v6 = qword_20BB402D8[v4];
  Multiple = v6;
  if (v6 < a1)
  {
    Multiple = qword_20BB402F0[v4];
    if (Multiple < a1)
    {
      v8 = qword_20BB40308[v4];
      if (v8 >= a1)
      {
        v11 = 2 * v6;
        if (2 * v6 <= a1)
          v11 = a1;
        v12 = 1 << -(char)__clz(v11);
        if ((v11 & (v11 - 1)) != 0)
          Multiple = v12;
        else
          Multiple = v11;
      }
      else
      {
        Multiple = nextMultiple(a1, v8);
      }
    }
  }
  v13 = Multiple >= a1;
  result = Multiple - a1;
  if (!v13)
  {
    v9 = CFSTR("Invalid handling");
    v10 = -6;
    goto LABEL_16;
  }
  return result;
}

uint64_t SecMPPublicIdentityCopyFromPrivate(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(*(id *)(a2 + 48), "publicIdentity");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "asRef");

  return v3;
}

uint64_t SecMPPublicIdentityCreateFromBytes(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  id v11;

  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", *a2, *a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0;
  +[SecMessageLegacyPublicIdentity identityWithIdentityData:error:](SecMessageLegacyPublicIdentity, "identityWithIdentityData:error:", v5, &v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v11;
  if (v6)
  {
    v8 = objc_msgSend(v6, "asRef");
  }
  else
  {
    MessageProtectionLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      SecMPPublicIdentityCreateFromBytes_cold_1(v7, v9);

    v8 = 0;
    if (a4)
      *a4 = v7;
  }

  return v8;
}

uint64_t SecMPPublicIdentityCreateFromData(int a1, CFDataRef theData, _QWORD *a3)
{
  const UInt8 *BytePtr;
  CFIndex Length;

  if (!theData)
    return 0;
  Length = CFDataGetLength(theData);
  BytePtr = CFDataGetBytePtr(theData);
  return SecMPPublicIdentityCreateFromBytes((uint64_t)BytePtr, &BytePtr, &Length, a3);
}

BOOL SecMPPIEqualToBytes(uint64_t a1, const UInt8 *a2, CFIndex a3)
{
  const __CFAllocator *v4;
  CFDataRef v5;
  __CFData *Mutable;
  BOOL v7;
  _BOOL8 v9;

  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v5 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, a3, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  Mutable = CFDataCreateMutable(v4, 0);
  SecMPPIAppendSerialization(a1, Mutable);
  if (v5)
    v7 = Mutable == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v9 = CFEqual(v5, Mutable) != 0;
    goto LABEL_10;
  }
  v9 = v5 == Mutable;
  if (v5)
  {
LABEL_10:
    CFRelease(v5);
    if (!Mutable)
      return v9;
    goto LABEL_8;
  }
  if (Mutable)
LABEL_8:
    CFRelease(Mutable);
  return v9;
}

BOOL SecMPPIAppendSerialization(uint64_t a1, __CFData *a2)
{
  const __CFData *v3;
  const UInt8 *BytePtr;
  CFIndex Length;

  objc_msgSend(*(id *)(a1 + 32), "identityData");
  v3 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  BytePtr = CFDataGetBytePtr(v3);
  Length = CFDataGetLength(v3);
  CFDataAppendBytes(a2, BytePtr, Length);

  return v3 != 0;
}

uint64_t SecMPPIEqual(uint64_t a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFData *Mutable;
  __CFData *v6;
  BOOL v7;
  _BOOL8 v8;

  if (a1 == a2)
    return 1;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  v6 = CFDataCreateMutable(v4, 0);
  SecMPPIAppendSerialization(a1, Mutable);
  SecMPPIAppendSerialization(a2, v6);
  if (Mutable)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    v8 = Mutable == v6;
    if (!Mutable)
    {
      if (!v6)
        return v8;
      goto LABEL_12;
    }
  }
  else
  {
    v8 = CFEqual(Mutable, v6) != 0;
  }
  CFRelease(Mutable);
  if (v6)
LABEL_12:
    CFRelease(v6);
  return v8;
}

BOOL SecMPPIAppendCanonicalPublicKey(uint64_t a1, __CFData *a2)
{
  const __CFData *v3;
  const UInt8 *BytePtr;
  CFIndex Length;

  objc_msgSend(*(id *)(a1 + 32), "identityData");
  v3 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  BytePtr = CFDataGetBytePtr(v3);
  Length = CFDataGetLength(v3);
  CFDataAppendBytes(a2, BytePtr, Length);

  return v3 != 0;
}

uint64_t SecMPPIVerifySignature(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  char v19;
  void *v21;
  uint64_t v22;

  if (a5)
  {
    v8 = *a4;
    if (a5 - 1 == v8)
    {
      v12 = (uint64_t)(a4 + 1);
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", a4 + 1, *a4);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", a2, a3);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(*(id *)(a1 + 32), "verifySignature:ofData:", v13, v14) & 1) != 0)
      {
        v15 = 1;
      }
      else
      {
        v22 = a5 + 2;
        v16 = malloc_type_malloc(a5 + 2, 0x9B80EB76uLL);
        if (v16)
        {
          v17 = v16;
          v21 = v16;
          SecMPPIRecreateSignature(v12, v8, (uint64_t *)&v21, &v22);
          if (v21)
          {
            objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", v21, v22);
            v18 = objc_claimAutoreleasedReturnValue();

            v19 = objc_msgSend(*(id *)(a1 + 32), "verifySignature:ofData:", v18, v14);
            free(v17);
            if ((v19 & 1) != 0)
            {
              v15 = 1;
            }
            else
            {
              MPLogAndAssignCFError(1, a6, CFSTR("SecMPPIVerifySignature: Failed to verify signature (primary and replacement signature)."));
              v15 = 0;
            }
            v13 = (void *)v18;
            goto LABEL_15;
          }
          MPLogAndAssignCFError(1, a6, CFSTR("SecMPPIVerifySignature: Failed to decode DER of replacement signature."));
          free(v17);
        }
        else
        {
          MPLogAndAssignCFError(1, a6, CFSTR("SecMPPIVerifySignature: Failed to allocate memory for replacement signature."));
        }
        v15 = 0;
      }
LABEL_15:

      return v15;
    }
  }
  MPLogAndAssignCFError(1, a6, CFSTR("SecMPPIVerifySignature: Incorrect signature size or start."));
  return 0;
}

BOOL SecMPPIAppendPKIEncryptedData(uint64_t a1, uint64_t a2, __CFData *a3)
{
  const __CFData *v4;
  const __CFData *v5;
  const UInt8 *BytePtr;
  CFIndex Length;
  NSObject *v8;

  objc_msgSend(*(id *)(a1 + 32), "encryptData:", a2);
  v4 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    BytePtr = CFDataGetBytePtr(v4);
    Length = CFDataGetLength(v5);
    CFDataAppendBytes(a3, BytePtr, Length);
  }
  else
  {
    MessageProtectionLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      SecMPPIAppendPKIEncryptedData_cold_1(v8);

  }
  return v5 != 0;
}

uint64_t SecMPFullIdentityGetTypeID()
{
  _QWORD block[5];

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __SecMPFullIdentityGetTypeID_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = &SecMPFullIdentityGetTypeID_sSecMPFullIdentityGetTypeIDSingleton;
  if (SecMPFullIdentityGetTypeID_sSecMPFullIdentityGetTypeIDOnce != -1)
    dispatch_once(&SecMPFullIdentityGetTypeID_sSecMPFullIdentityGetTypeIDOnce, block);
  return SecMPFullIdentityGetTypeID_sSecMPFullIdentityGetTypeIDSingleton;
}

void SecMPFullIdentityDestroy(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

CFStringRef SecMPFullIdentityCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("<SecMPFullIdentity: %p>"), a1);
}

uint64_t SecMPPublicIdentityGetTypeID()
{
  _QWORD block[5];

  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = __SecMPPublicIdentityGetTypeID_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = &SecMPPublicIdentityGetTypeID_sSecMPPublicIdentityGetTypeIDSingleton;
  if (SecMPPublicIdentityGetTypeID_sSecMPPublicIdentityGetTypeIDOnce != -1)
    dispatch_once(&SecMPPublicIdentityGetTypeID_sSecMPPublicIdentityGetTypeIDOnce, block);
  return SecMPPublicIdentityGetTypeID_sSecMPPublicIdentityGetTypeIDSingleton;
}

void SecMPPublicIdentityDestroy(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

CFStringRef SecMPPublicIdentityCopyDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, CFSTR("<SecMPPublicIdentity: %p>"), a1);
}

uint64_t SecMPFICopyProtClass()
{
  return *MEMORY[0x24BDE8FA0];
}

uint64_t SecMPFullIdentityCreate()
{
  void *v0;
  uint64_t v1;

  +[SecMessageLegacyFullIdentity identity](SecMessageLegacyFullIdentity, "identity");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "asRef");

  return v1;
}

uint64_t SecMPFullIdentityCreateWithAccessProtClass()
{
  void *v0;
  uint64_t v1;

  +[SecMessageLegacyFullIdentity identity](SecMessageLegacyFullIdentity, "identity");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "asRef");

  return v1;
}

uint64_t SecMPFullIdentityCreateWithProtClass()
{
  void *v0;
  uint64_t v1;

  +[SecMessageLegacyFullIdentity identity](SecMessageLegacyFullIdentity, "identity");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "asRef");

  return v1;
}

uint64_t SecMPFullIdentityCreateFromData(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  id v9;

  v9 = 0;
  +[SecMessageLegacyFullIdentity identityWithDataRepresentation:error:](SecMessageLegacyFullIdentity, "identityWithDataRepresentation:error:", a2, &v9);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v9;
  if (v5)
  {
    MessageProtectionLog();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      SecMPFullIdentityCreateFromData_cold_1(v5);

    *a3 = v5;
  }
  v7 = objc_msgSend(v4, "asRef");

  return v7;
}

uint64_t SecMPFIPurgeFromKeychain()
{
  return 1;
}

uint64_t SecMPFIPurgeAllFromKeychain()
{
  return 1;
}

uint64_t SecMPFIAppendSerialization(uint64_t a1, __CFData *a2, CFErrorRef *a3)
{
  BOOL v4;
  uint64_t v5;
  void *v7;
  const __CFData *v8;
  id v9;
  void *v10;
  const UInt8 *BytePtr;
  CFIndex Length;
  id v14;

  if (a1)
    v4 = a2 == 0;
  else
    v4 = 1;
  v5 = !v4;
  if (v4)
  {
    SecMPCreateError(0, -7, CFSTR("NULL parameter passed"), 0, a3);
  }
  else
  {
    v7 = *(void **)(a1 + 48);
    v14 = 0;
    objc_msgSend(v7, "dataRepresentationWithError:", &v14);
    v8 = (const __CFData *)objc_claimAutoreleasedReturnValue();
    v9 = v14;
    v10 = v9;
    if (a3 && v9)
      *a3 = (CFErrorRef)v9;
    BytePtr = CFDataGetBytePtr(v8);
    Length = CFDataGetLength(v8);
    CFDataAppendBytes(a2, BytePtr, Length);

  }
  return v5;
}

unint64_t SecMPFIEncryptionSpace(uint64_t a1)
{
  unint64_t v1;

  v1 = objc_msgSend(*(id *)(a1 + 48), "encryptionSize");
  if (v1 >= 0x2A)
    return v1 - 42;
  else
    return 0;
}

BOOL SecMPFIDecrypt(uint64_t a1, uint64_t a2, __CFData *a3, _QWORD *a4, _QWORD *a5)
{
  void *v8;
  const __CFData *v9;
  id v10;
  void *v11;
  const UInt8 *BytePtr;
  CFIndex Length;
  id v15;

  v8 = *(void **)(a1 + 48);
  v15 = 0;
  objc_msgSend(v8, "decryptMessage:error:", a2, &v15);
  v9 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  v10 = v15;
  v11 = v10;
  if (v9)
  {
    BytePtr = CFDataGetBytePtr(v9);
    Length = CFDataGetLength(v9);
    CFDataAppendBytes(a3, BytePtr, Length);
    *a4 = -[__CFData length](v9, "length");
  }
  else
  {
    *a5 = v10;
  }

  return v9 != 0;
}

uint64_t SecMPFullIdentityCreateWithAccess()
{
  void *v0;
  uint64_t v1;

  +[SecMessageLegacyFullIdentity identity](SecMessageLegacyFullIdentity, "identity");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "asRef");

  return v1;
}

uint64_t SecMPFIUpdateProtClass()
{
  return 1;
}

BOOL SecMPFIAppendSignature(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  char v12;
  id v13;

  v6 = *(void **)(a1 + 48);
  v13 = 0;
  objc_msgSend(v6, "signData:error:", a2, &v13);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v13;
  if (v7)
  {
    v9 = a3;
    v12 = objc_msgSend(v7, "length");
    objc_msgSend(v9, "appendBytes:length:", &v12, 1);
    objc_msgSend(v9, "appendData:", v7);

  }
  else
  {
    MessageProtectionLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      SecMPFIAppendSignature_cold_1(v8);

    if (a4)
      *a4 = v8;
  }

  return v7 != 0;
}

void SecMPFIAppendPublicHash(uint64_t a1, __CFData *a2)
{
  const __CFData *v3;
  const UInt8 *BytePtr;
  CFIndex Length;
  id v6;

  objc_msgSend(*(id *)(a1 + 48), "publicIdentity");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "publicIDHash");
  v3 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  BytePtr = CFDataGetBytePtr(v3);
  Length = CFDataGetLength(v3);
  CFDataAppendBytes(a2, BytePtr, Length);

}

void SecMPFIAppendCanonicalPublicHash(uint64_t a1, __CFData *a2)
{
  const __CFData *v3;
  const UInt8 *BytePtr;
  CFIndex Length;
  id v6;

  objc_msgSend(*(id *)(a1 + 48), "publicIdentity");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "publicIDCanonicalHash");
  v3 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  BytePtr = CFDataGetBytePtr(v3);
  Length = CFDataGetLength(v3);
  CFDataAppendBytes(a2, BytePtr, Length);

}

void SecMPPIAppendCanonicalHash(uint64_t a1, __CFData *a2)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  const __CFData *theData;

  objc_msgSend(*(id *)(a1 + 32), "publicIDCanonicalHash");
  theData = (const __CFData *)objc_claimAutoreleasedReturnValue();
  BytePtr = CFDataGetBytePtr(theData);
  Length = CFDataGetLength(theData);
  CFDataAppendBytes(a2, BytePtr, Length);

}

uint64_t SecMPFullIdentityCreateFromRefs(uint64_t a1, uint64_t a2)
{
  SecMessageLegacyFullIdentity *v2;
  const __CFData *v3;
  const __CFData *v4;
  const __CFData *v5;
  uint64_t v6;
  void *v7;
  const void *v8;

  v2 = -[SecMessageLegacyFullIdentity initWithEncryptionSecKey:signingSecKey:]([SecMessageLegacyFullIdentity alloc], "initWithEncryptionSecKey:signingSecKey:", a2, a1);
  objc_msgSend(CFSTR("Testmessage"), "dataUsingEncoding:", 4);
  v3 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEC8], "data");
  v4 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCEC8], "data");
  v5 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  v6 = -[SecMessageLegacyFullIdentity asRef](v2, "asRef");
  -[SecMessageLegacyFullIdentity publicIdentity](v2, "publicIdentity");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (const void *)objc_msgSend(v7, "asRef");

  if (!SecMPSignAndProtectMessage(v3, v6, (uint64_t)v8, v4, 0))
    SecMPFullIdentityCreateFromRefs_cold_3();
  if ((SecMPVerifyAndExposeMessage(v4, (uint64_t)v8, v6, v5, 0) & 1) == 0)
    SecMPFullIdentityCreateFromRefs_cold_2();
  if ((-[__CFData isEqualToData:](v5, "isEqualToData:", v3) & 1) == 0)
    SecMPFullIdentityCreateFromRefs_cold_1();
  CFRelease(v8);

  return v6;
}

void sub_20BAC96F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_20BACA394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  char a69;
  uint64_t v69;

  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a69, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Block_object_dispose(&STACK[0x270], 8);
  _Block_object_dispose((const void *)(v69 - 224), 8);
  _Block_object_dispose((const void *)(v69 - 160), 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void sub_20BACB73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SecProtectStream(__CFReadStream *a1, __CFWriteStream *a2, CFMutableDataRef theData)
{
  CFIndex Length;
  UInt8 *v7;
  uint64_t result;

  CFDataAppendBytes(theData, (const UInt8 *)&kProtectedFileHeader, 1);
  Length = CFDataGetLength(theData);
  CFDataIncreaseLength(theData, 32);
  v7 = &CFDataGetMutableBytePtr(theData)[Length];
  result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x24BDE94B8], 0x20uLL, v7);
  if (!(_DWORD)result)
    return AES256CTRIV0TransformStream(a1, a2, (uint64_t)v7);
  return result;
}

uint64_t AES256CTRIV0TransformStream(__CFReadStream *a1, __CFWriteStream *a2, uint64_t a3)
{
  UInt8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  const UInt8 *v12;
  CFIndex v13;
  BOOL v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  v6 = (UInt8 *)malloc_type_malloc(0x4000uLL, 0x2EF06FD9uLL);
  v7 = ccaes_ctr_crypt_mode();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v17 - v9;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, void *))(v8 + 24))(v8, (char *)v17 - v9, 32, a3, &kIVZero);
  v11 = CFReadStreamRead(a1, v6, 0x4000);
  if (v11 < 1)
  {
LABEL_7:
    if (v11)
      v15 = 4294967246;
    else
      v15 = 0;
    if (v6)
LABEL_11:
      free(v6);
  }
  else
  {
LABEL_2:
    (*(void (**)(char *, uint64_t, UInt8 *, UInt8 *))(v7 + 40))(v10, v11, v6, v6);
    v12 = v6;
    while (1)
    {
      v13 = CFWriteStreamWrite(a2, v12, v11);
      if (v13 < 1)
        break;
      v12 += v13;
      v14 = v11 <= v13;
      v11 -= v13;
      if (v14)
      {
        v11 = CFReadStreamRead(a1, v6, 0x4000);
        if (v11 > 0)
          goto LABEL_2;
        goto LABEL_7;
      }
    }
    v15 = 4294967246;
    if (v6)
      goto LABEL_11;
  }
  return v15;
}

uint64_t SecExposeStream(__CFReadStream *a1, __CFWriteStream *a2, CFDataRef theData)
{
  const UInt8 *BytePtr;

  BytePtr = CFDataGetBytePtr(theData);
  if ((unint64_t)CFDataGetLength(theData) < 0x21 || *BytePtr)
    return 4294967246;
  else
    return AES256CTRIV0TransformStream(a1, a2, (uint64_t)(BytePtr + 1));
}

uint64_t MPSecondaryEncryptionDisabled()
{
  if ((get_value(CFSTR("SecondaryRegistrationDisabled")) & 1) != 0)
    return 1;
  else
    return get_value(CFSTR("SecondaryEncryptionDisabled"));
}

uint64_t MPSecondaryRegistrationDisabled()
{
  return get_value(CFSTR("SecondaryRegistrationDisabled"));
}

uint64_t get_value(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v1 = (objc_class *)MEMORY[0x24BDBCF50];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithSuiteName:", CFSTR("com.apple.ids"));
  v4 = objc_msgSend(v3, "BOOLForKey:", v2);

  return v4;
}

void MPSetSecondaryEncryptionDisabled(uint64_t a1)
{
  set_value(CFSTR("SecondaryEncryptionDisabled"), a1);
}

void set_value(void *a1, uint64_t a2)
{
  objc_class *v3;
  id v4;
  id v5;

  v3 = (objc_class *)MEMORY[0x24BDBCF50];
  v4 = a1;
  v5 = (id)objc_msgSend([v3 alloc], "initWithSuiteName:", CFSTR("com.apple.ids"));
  objc_msgSend(v5, "setBool:forKey:", a2, v4);

}

void MPSetSecondaryRegistrationDisabled(uint64_t a1)
{
  set_value(CFSTR("SecondaryRegistrationDisabled"), a1);
}

void sub_20BACDB84(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t SecMPFullIdentityObjCCreateOTRSessionWithFlags(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  const void *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;

  v3 = a2;
  objc_msgSend(a1, "signingKey");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "secKeyRef");

  objc_msgSend(v3, "signingKey");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "secKeyRef");
  v6 = (const void *)SecOTRFullIdentityCreateFromSecKeyRef();
  v7 = SecOTRPublicIdentityCreateFromSecKeyRef();
  v8 = (const void *)v7;
  if (v6)
    v9 = v7 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = SecOTRSessionCreateFromIDAndFlags();
    CFRelease(v6);
LABEL_6:
    CFRelease(v8);
    return v10;
  }
  if (v6)
    CFRelease(v6);
  v10 = 0;
  result = 0;
  if (v8)
    goto LABEL_6;
  return result;
}

uint64_t SecMPFullIdentityCreateOTRSessionWithFlags(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  const void *v5;
  void *v6;
  void *v7;
  const void *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 48), "signingKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "secKeyRef");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (const void *)SecOTRFullIdentityCreateFromSecKeyRef();

  objc_msgSend(*(id *)(a2 + 32), "signingKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "secKeyRef");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (const void *)SecOTRPublicIdentityCreateFromSecKeyRef();

  if (v5)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = SecOTRSessionCreateFromIDAndFlags();
    CFRelease(v5);
LABEL_6:
    CFRelease(v8);
    return v10;
  }
  if (v5)
    CFRelease(v5);
  v10 = 0;
  result = 0;
  if (v8)
    goto LABEL_6;
  return result;
}

uint64_t SecMPFullIdentityCreateOTRSessionWith(uint64_t a1, uint64_t a2)
{
  return SecMPFullIdentityCreateOTRSessionWithFlags(a1, a2);
}

void sub_20BACFD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  objc_sync_exit(v9);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_20BAD0644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_20BAD0EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_6(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 40);
}

void OUTLINED_FUNCTION_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

void sub_20BAD1CA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL NGMPBLegacyKeyReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadData();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NGMPBDevicePreKeyReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  NGMPBP256Key *v19;
  uint64_t result;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v19 = objc_alloc_init(NGMPBP256Key);
          objc_storeStrong((id *)(a1 + 16), v19);
          if (PBReaderPlaceMark() && (NGMPBP256KeyReadFrom((uint64_t)v19, a2) & 1) != 0)
          {
            PBReaderRecallMark();

            continue;
          }

          return 0;
        case 2u:
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v16) = 1;
            v23 = 0;
          }
          *(_QWORD *)(a1 + 8) = v23;
          continue;
        case 3u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 24;
          goto LABEL_30;
        case 4u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 32;
          goto LABEL_30;
        case 5u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 40;
LABEL_30:
          v26 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        case 6u:
          v27 = 0;
          v28 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + 52) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        v32 = v31 + 1;
        if (v31 == -1 || v32 > *(_QWORD *)(a2 + *v4))
          break;
        v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
        *(_QWORD *)(a2 + v30) = v32;
        v29 |= (unint64_t)(v33 & 0x7F) << v27;
        if ((v33 & 0x80) == 0)
          goto LABEL_39;
        v27 += 7;
        v15 = v28++ >= 9;
        if (v15)
        {
          LODWORD(v29) = 0;
          goto LABEL_41;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v29) = 0;
LABEL_41:
      *(_DWORD *)(a1 + 48) = v29;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NGMPBFullDeviceIdentityReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NGMPBP256Key *v17;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(NGMPBP256Key);
        objc_storeStrong(a1 + 2, v17);
        if (!PBReaderPlaceMark() || (NGMPBP256KeyReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(NGMPBDevicePreKey);
    objc_msgSend(a1, "addPrekeys:", v17);
    if (!PBReaderPlaceMark() || (NGMPBDevicePreKeyReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL NGMPBOuterMessageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_25;
        case 2u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_25;
        case 3u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_25;
        case 4u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
          goto LABEL_25;
        default:
          if ((v10 >> 3) == 99)
          {
            PBReaderReadData();
            v17 = objc_claimAutoreleasedReturnValue();
            v18 = 24;
LABEL_25:
            v19 = *(void **)(a1 + v18);
            *(_QWORD *)(a1 + v18) = v17;

          }
          else if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
            return 0;
          }
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NGMPBPublicDeviceIdentityReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 16) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NGMPBPublicDevicePrekeyReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  void *v25;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *v5;
            v17 = *(unsigned __int8 *)(a2 + v16);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        if (*(_BYTE *)(a2 + v16))
          v10 = 0;
LABEL_14:
        if (v17)
          v18 = 1;
        else
          v18 = (v10 & 7) == 4;
        if (!v18)
        {
          switch((v10 >> 3))
          {
            case 1u:
              PBReaderReadData();
              v19 = objc_claimAutoreleasedReturnValue();
              v20 = 16;
              goto LABEL_27;
            case 2u:
              PBReaderReadData();
              v19 = objc_claimAutoreleasedReturnValue();
              v20 = 24;
              goto LABEL_27;
            case 3u:
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v23 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v22);
                *(_QWORD *)(a2 + v21) = v22 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + v16) = 1;
                v23 = 0;
              }
              *(_QWORD *)(a1 + 8) = v23;
              goto LABEL_30;
            case 4u:
              PBReaderReadData();
              v19 = objc_claimAutoreleasedReturnValue();
              v20 = 32;
LABEL_27:
              v25 = *(void **)(a1 + v20);
              *(_QWORD *)(a1 + v20) = v19;

              goto LABEL_30;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_30:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NGMPBP256KeyReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 16;
      }
      else
      {
        if ((_DWORD)v17 != 3)
        {
          if ((_DWORD)v17 == 2)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_36:
            *(_DWORD *)(a1 + 24) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadData();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 8;
      }
      v26 = *(void **)(a1 + v25);
      *(_QWORD *)(a1 + v25) = v24;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NGMPBInnerMessageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x24BE7AF60];
  v4 = (int *)MEMORY[0x24BE7AF50];
  v5 = (int *)MEMORY[0x24BE7AF48];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF60]) < *(_QWORD *)(a2 + (int)*MEMORY[0x24BE7AF50]))
  {
    v7 = (int *)MEMORY[0x24BE7AF30];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        PBReaderReadData();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 32;
LABEL_33:
        v26 = *(void **)(a1 + v25);
        *(_QWORD *)(a1 + v25) = v24;

        goto LABEL_40;
      }
      if ((_DWORD)v17 != 2)
        goto LABEL_34;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      *(_BYTE *)(a1 + 40) |= 1u;
      while (1)
      {
        v21 = *v3;
        v22 = *(_QWORD *)(a2 + v21);
        if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
          break;
        v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
        *(_QWORD *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0)
          goto LABEL_37;
        v18 += 7;
        v14 = v19++ >= 9;
        if (v14)
        {
          LODWORD(v20) = 0;
          goto LABEL_39;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v20) = 0;
LABEL_39:
      *(_DWORD *)(a1 + 8) = v20;
LABEL_40:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    if ((_DWORD)v17 == 3)
    {
      PBReaderReadData();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = 24;
    }
    else
    {
      if ((_DWORD)v17 != 99)
      {
LABEL_34:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_40;
      }
      PBReaderReadData();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = 16;
    }
    goto LABEL_33;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(uint64_t a1)
{
  id v2;
  void *v3;

  if (a1)
  {
    MEMORY[0x24BDAC7A8](a1);
    return SymmetricKey.withUnsafeBytes<A>(_:)();
  }
  else
  {
    v2 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v3 = (void *)MEMORY[0x20BD3B538](0xD000000000000018, 0x800000020BB473E0);
    objc_msgSend(v2, sel_initWithDomain_code_userInfo_, v3, 0, 0);

    return swift_willThrow();
  }
}

void closure #1 in closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void sub_20BAD7180()
{
  uint64_t v0;
  _DWORD *v1;
  int v2;

  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(v0);
  *v1 = v2;
}

uint64_t variable initialization expression of SymmetricRatchet.messageKeys()
{
  return MEMORY[0x24BEE4B00];
}

uint64_t variable initialization expression of AES.IV.blockSize()
{
  return 16;
}

uint64_t variable initialization expression of TetraRatchetState.rootKey@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of TetraRatchetState.rootKey((uint64_t (*)(_QWORD))MEMORY[0x24BDC63E0], a1);
}

uint64_t variable initialization expression of TetraRatchetState.kemAmortizationCounter()
{
  return 0;
}

uint64_t variable initialization expression of TetraRatchetState.lastRekeyingDate@<X0>(uint64_t a1@<X8>)
{
  return variable initialization expression of TetraRatchetState.rootKey((uint64_t (*)(_QWORD))MEMORY[0x24BDCE900], a1);
}

uint64_t variable initialization expression of TetraRatchetState.rootKey@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

void type metadata accessor for SecKeyRef(uint64_t a1)
{
  type metadata accessor for SecKeyRef(a1, &lazy cache variable for type metadata for SecKeyRef);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef(uint64_t a1)
{
  MEMORY[0x20BD3C414](&protocol conformance descriptor for CFStringRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  MEMORY[0x20BD3C414](&protocol conformance descriptor for CFStringRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  MEMORY[0x20BD3C414](&protocol conformance descriptor for CFStringRef, a2);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSFileProtectionType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x20BD3C414](&protocol conformance descriptor for CFStringRef, a3);
  return static _CFObject.== infix(_:_:)();
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t a1)
{
  __asm { BR              X13 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

{
  __asm { BR              X12 }
}

void *sub_20BAD75B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  void *result;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v30 = v25;
  LOWORD(v31) = v24;
  BYTE2(v31) = BYTE2(v24);
  HIBYTE(v31) = BYTE3(v24);
  v32 = BYTE4(v24);
  v33 = BYTE5(v24);
  v34 = BYTE6(v24);
  result = memset(&v30, v27, BYTE6(v24));
  v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *v26 = v30;
  v26[1] = v29;
  return result;
}

_QWORD *specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, _QWORD *, char *))
{
  uint64_t v3;
  _QWORD *result;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  result = (_QWORD *)__DataStorage._bytes.getter();
  v8 = result;
  if (result)
  {
    result = (_QWORD *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v8 = (_QWORD *)((char *)v8 + a1 - (_QWORD)result);
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_15;
  }
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  v13 = (char *)v8 + v12;
  if (v8)
    v14 = v13;
  else
    v14 = 0;
  result = a3(&v15, v8, v14);
  if (!v3)
    return (_QWORD *)v15;
  return result;
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  size_t v12;

  Data.InlineSlice.ensureUniqueReference()();
  v4 = *a1;
  v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = __DataStorage._offset.getter();
  v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = v5 - v4;
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  memset((void *)(v7 + v9), a2, v12);
}

void specialized static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X9 }
}

void sub_20BAD78D8()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 - 128) = specialized Data.init(count:)(BYTE6(v0));
  *(_QWORD *)(v2 - 120) = v3;
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(v2 - 128);
  *(_OWORD *)(v2 - 112) = *(_OWORD *)(v2 - 128);
  v4 = ccaes_ctr_crypt_mode();
  MEMORY[0x24BDAC7A8](v4);
  __asm { BR              X10 }
}

void sub_20BAD7974(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;

  *(_QWORD *)(v3 - 128) = v1;
  *(_WORD *)(v3 - 120) = v2;
  *(_BYTE *)(v3 - 118) = BYTE2(v2);
  *(_BYTE *)(v3 - 117) = BYTE3(v2);
  *(_BYTE *)(v3 - 116) = BYTE4(v2);
  *(_BYTE *)(v3 - 115) = BYTE5(v2);
  MEMORY[0x24BDAC7A8](a1);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v4 = *(_DWORD *)(v3 - 132);
  if (v4)
  {
    v5 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, (uint64_t (*)(uint64_t))MEMORY[0x24BDC61A8], MEMORY[0x24BDC61C0]);
    swift_allocError();
    *v6 = v4;
    (*(void (**)(_DWORD *, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v6, *MEMORY[0x24BDC6188], v5);
    swift_willThrow();
    outlined consume of Data._Representation(*(_QWORD *)(v3 - 112), *(_QWORD *)(v3 - 104));
  }
  else
  {
    specialized Data.init<A>(_:)(*(_QWORD *)(v3 - 112), *(_QWORD *)(v3 - 104));
  }
}

uint64_t partial apply for closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(uint64_t a1)
{
  return closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(a1);
}

void partial apply for closure #1 in closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(uint64_t a1, uint64_t a2)
{
  partial apply for closure #1 in closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(a1, a2);
}

{
  uint64_t v2;

  closure #1 in closure #1 in static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result)
    goto LABEL_7;
  result = __DataStorage._offset.getter();
  if (__OFSUB__(a1, result))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a6)
    return ccctr_one_shot();
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_20BAD7DFC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;

  LOWORD(v6) = a1;
  BYTE2(v6) = BYTE2(a1);
  HIBYTE(v6) = BYTE3(a1);
  v7 = BYTE4(a1);
  v8 = BYTE5(a1);
  v9 = BYTE6(a1);
  if (!v3)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (!v2)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x20BAD80B4);
  }
  result = ccctr_one_shot();
  *v1 = v4;
  v1[1] = v6 | ((unint64_t)v7 << 32) | ((unint64_t)v8 << 40) | ((unint64_t)v9 << 48);
  return result;
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
  type metadata accessor for SecKeyRef(a1, &lazy cache variable for type metadata for CFErrorRef);
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for SecKeyRef(a1, &lazy cache variable for type metadata for CFStringRef);
}

void type metadata accessor for SecKeyRef(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x20BD3C414](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t one-time initialization function for TetraLogger()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, TetraLogger);
  __swift_project_value_buffer(v0, (uint64_t)TetraLogger);
  return Logger.init(subsystem:category:)();
}

dispatch_semaphore_t one-time initialization function for conversationLock()
{
  dispatch_semaphore_t result;

  result = dispatch_semaphore_create(1);
  conversationLock = (uint64_t)result;
  return result;
}

NSObject *closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *result;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  _BYTE *v19;
  _BYTE *v20;
  os_log_type_t v21;
  NSObject *v22;
  os_log_type_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42[2];

  v40 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraSessionStates?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TetraSessionStates();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.debug.getter();
  result = MessageProtectionLog();
  if (!result)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v15 = result;
  os_log(_:dso:log:_:_:)();

  if (one-time initialization token for conversationLock != -1)
    swift_once();
  v16 = (id)conversationLock;
  OS_dispatch_semaphore.wait()();

  static os_log_type_t.debug.getter();
  result = MessageProtectionLog();
  if (!result)
    goto LABEL_20;
  v17 = result;
  os_log(_:dso:log:_:_:)();

  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  TetraDBManager.getSessionForNGMIdentity(conversationID:)(v40, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v9, &demangling cache variable for type metadata for TetraSessionStates?);
    lazy protocol witness table accessor for type TetraCommitmentError and conformance TetraCommitmentError();
    v18 = (void *)swift_allocError();
    *v19 = 0;
    swift_willThrow();
    goto LABEL_12;
  }
  outlined init with take of TetraRatchetState((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
  if ((TetraSessionStates.discardMessageKeyOnSessionStates(ephemeralECDHPublicKey:messageIndex:)(a4, a5) & 1) == 0)
  {
    lazy protocol witness table accessor for type TetraCommitmentError and conformance TetraCommitmentError();
    v18 = (void *)swift_allocError();
    *v20 = 1;
    swift_willThrow();
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
LABEL_12:
    v21 = static os_log_type_t.error.getter();
    result = MessageProtectionLog();
    if (result)
    {
      v22 = result;
      v23 = v21;
      if (os_log_type_enabled(result, v21))
      {
        v24 = v40;
        v25 = v18;
        v26 = v24;
        v27 = v18;
        v28 = swift_slowAlloc();
        v29 = swift_slowAlloc();
        v42[0] = v29;
        *(_DWORD *)v28 = 136315394;
        v30 = objc_msgSend(v26, sel_base64EncodedStringWithOptions_, 0);
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v33 = v32;

        v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v28 + 12) = 2080;
        swift_getErrorValue();
        v34 = Error.localizedDescription.getter();
        v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_20BABB000, v22, v23, "Failed to commit updated session state for %s because of error: %s.", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x20BD3C498](v29, -1, -1);
        MEMORY[0x20BD3C498](v28, -1, -1);
      }

      static os_log_type_t.debug.getter();
      result = MessageProtectionLog();
      if (result)
      {
        v36 = result;
        os_log(_:dso:log:_:_:)();

        v37 = (id)conversationLock;
        OS_dispatch_semaphore.signal()();

        return 0;
      }
      goto LABEL_22;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v40, (uint64_t)v13);
  static os_log_type_t.debug.getter();
  result = MessageProtectionLog();
  if (result)
  {
    v38 = result;
    os_log(_:dso:log:_:_:)();

    v39 = (id)conversationLock;
    OS_dispatch_semaphore.signal()();

    outlined destroy of TetraRatchetOuterMessage((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
    return 1;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t closure #1 in static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(char a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  if ((a1 & 1) != 0)
  {
    v12 = a2;
    outlined copy of Data._Representation(a2, a3);
    outlined copy of Data._Representation(a4, a5);
    specialized Data.append<A>(contentsOf:)(a4, a5);
    v9 = a4;
    v10 = a5;
  }
  else
  {
    v12 = a4;
    outlined copy of Data._Representation(a2, a3);
    outlined copy of Data._Representation(a4, a5);
    specialized Data.append<A>(contentsOf:)(a2, a3);
    v9 = a2;
    v10 = a3;
  }
  outlined consume of Data._Representation(v9, v10);
  return v12;
}

Class static TetraAPI.seal(message:authenticatedData:guid:sendingURI:sendingPushToken:receivingURI:receivingPushToken:receiverRegistration:encryptedAttributes:resetState:signedBy:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, void *a9, uint64_t (*a10)(uint64_t), unint64_t a11, void *a12, char *a13, uint64_t a14, char a15, void *a16)
{
  return specialized static TetraAPI.seal(message:authenticatedData:guid:sendingURI:sendingPushToken:receivingURI:receivingPushToken:receiverRegistration:encryptedAttributes:resetState:signedBy:)(a1, a2, a3, a4, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

NSObject *static TetraAPI.open(message:authenticatedData:guid:sendingURI:sendingPushToken:receivingURI:receivingPushToken:signedBy:tetraVersion:ourPrekeys:ourSigningPublicKeyCompactRepresentation:decryptionBlock:)(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, void *a9, uint64_t a10, unint64_t a11, void *a12, void *a13, int a14, uint64_t a15, uint64_t a16, NSObject *a17, uint64_t a18)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  NSObject *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  Class isa;
  uint64_t v72;
  objc_class *v73;
  NSObject *v74;
  os_log_type_t v75;
  _BOOL4 v76;
  uint8_t *v77;
  void *v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  NSObject *result;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  id v87;
  NSObject *v88;
  NSObject *v89;
  unint64_t v90;
  _BYTE *v91;
  unint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int (*v97)(uint64_t, uint64_t, uint64_t);
  int *v98;
  uint64_t *v99;
  char *v100;
  void *v101;
  _BYTE *v102;
  int *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  NSObject *v117;
  char *v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  _BYTE *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v134;
  uint64_t v135;
  int *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  void *v145;
  void *v146;
  void *v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  id v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  objc_class *v162;
  objc_class *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  void (*v179)(void);
  int *v180;
  int *v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  void (*v185)(void);
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  int v191;
  NSObject *v192;
  unint64_t v193;
  unint64_t v194;
  int *v195;
  unint64_t v196;
  _DWORD *v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int *v201;
  unint64_t v202;
  _OWORD *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  int64_t v207;
  id v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  NSObject *v215;
  id v216;
  os_log_type_t v217;
  NSObject *v218;
  unint64_t v219;
  uint8_t *v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  objc_class *v230;
  objc_class *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char v237;
  id v238;
  id v239;
  void *v240;
  id v241;
  NSObject *v242;
  id v243;
  id v244;
  id v245;
  id v246;
  os_log_type_t v247;
  NSObject *v248;
  unint64_t v249;
  id v250;
  id v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  unint64_t v256;
  NSObject *v257;
  id v258;
  id v259;
  uint64_t v260;
  uint64_t v261;
  int *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int *v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  NSObject *v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  NSObject *v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  int *v291;
  uint64_t v292;
  unint64_t v293;
  _DWORD *v294;
  id v295;
  unint64_t v296;
  uint64_t v297;
  uint64_t v298;
  unint64_t v299;
  NSObject *v300;
  uint64_t v301;
  uint64_t v302;
  objc_class *v303;
  char v304;
  id v305[2];
  uint64_t v306;

  v292 = a5;
  v293 = a6;
  v298 = a3;
  v299 = a4;
  v296 = a1;
  v297 = a2;
  v20 = type metadata accessor for TetraRatchetState(0);
  MEMORY[0x24BDAC7A8](v20);
  v266 = (uint64_t)&v260 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v267 = type metadata accessor for P256.Signing.PublicKey();
  v271 = *(_QWORD *)(v267 - 8);
  MEMORY[0x24BDAC7A8](v267);
  v270 = (char *)&v260 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v265 = type metadata accessor for TetraSessionState();
  v261 = *(_QWORD *)(v265 - 8);
  v23 = MEMORY[0x24BDAC7A8](v265);
  v262 = (int *)((char *)&v260 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v23);
  v268 = (int *)((char *)&v260 - v25);
  v278 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v282 = *(_QWORD *)(v278 - 8);
  MEMORY[0x24BDAC7A8](v278);
  v273 = v26;
  v274 = (char *)&v260 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v300 = ((char *)&v260 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v28);
  v269 = (char *)&v260 - v30;
  v289 = type metadata accessor for TetraSessionStates();
  v288 = *(_QWORD *)(v289 - 8);
  v31 = MEMORY[0x24BDAC7A8](v289);
  v277 = (char *)&v260 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v276 = (uint64_t)&v260 - v34;
  MEMORY[0x24BDAC7A8](v33);
  v290 = (char *)&v260 - v35;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraSessionStates?);
  v37 = MEMORY[0x24BDAC7A8](v36);
  v281 = (char *)&v260 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x24BDAC7A8](v37);
  v263 = (char *)&v260 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v264 = (uint64_t)&v260 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v287 = ((char *)&v260 - v44);
  MEMORY[0x24BDAC7A8](v43);
  v294 = (_DWORD *)((char *)&v260 - v45);
  v291 = (int *)type metadata accessor for TetraRatchetOuterMessage();
  v46 = MEMORY[0x24BDAC7A8](v291);
  v285 = (char *)&v260 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = MEMORY[0x24BDAC7A8](v46);
  v280 = (uint64_t)&v260 - v49;
  v50 = MEMORY[0x24BDAC7A8](v48);
  v279 = (uint64_t)&v260 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v286 = (uint64_t)&v260 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v284 = (uint64_t)&v260 - v55;
  MEMORY[0x24BDAC7A8](v54);
  v302 = (uint64_t)&v260 - v56;
  v295 = a13;
  v57 = objc_msgSend(a13, sel_compactRepresentation);
  v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v60 = v59;

  v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v63 = v62;
  specialized static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(a7, a8, a9, v58, v60, a10, a11, a12, v61, v62);
  v65 = v64;
  v67 = v66;
  outlined consume of Data._Representation(v61, v63);
  outlined consume of Data._Representation(v58, v60);
  v301 = v67;
  v68 = ((uint64_t (*)(_QWORD))v65)(0);
  v70 = v69;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v68, v70);
  LOBYTE(a7) = static os_log_type_t.info.getter();
  v72 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log);
  v73 = isa;
  v74 = static OS_os_log.default.getter();
  v75 = a7;
  v76 = os_log_type_enabled(v74, (os_log_type_t)a7);
  v283 = v65;
  v272 = v72;
  if (v76)
  {
    v77 = (uint8_t *)swift_slowAlloc();
    v78 = (void *)swift_slowAlloc();
    v305[0] = v78;
    *(_DWORD *)v77 = 136315138;
    v79 = -[objc_class base64EncodedStringWithOptions:](v73, sel_base64EncodedStringWithOptions_, 0);
    v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v82 = v81;

    v306 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v82, (uint64_t *)v305);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20BABB000, v74, v75, "Decrypting for conversationID: %s", v77, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD3C498](v78, -1, -1);
    MEMORY[0x20BD3C498](v77, -1, -1);
  }
  else
  {

  }
  static os_log_type_t.debug.getter();
  result = MessageProtectionLog();
  v84 = v302;
  v85 = (uint64_t)v300;
  if (!result)
    goto LABEL_81;
  v86 = result;
  os_log(_:dso:log:_:_:)();

  if (one-time initialization token for conversationLock != -1)
    swift_once();
  v303 = v73;
  v87 = (id)conversationLock;
  OS_dispatch_semaphore.wait()();

  static os_log_type_t.debug.getter();
  result = MessageProtectionLog();
  if (!result)
    goto LABEL_82;
  v88 = result;
  v89 = a17;
  os_log(_:dso:log:_:_:)();

  v91 = (_BYTE *)v296;
  v90 = v297;
  outlined copy of Data._Representation(v296, v297);
  v93 = v298;
  v92 = v299;
  outlined copy of Data._Representation(v298, v299);
  v94 = v295;
  TetraRatchetOuterMessage.init(serializedData:authenticatedData:signedBy:)(v91, v90, v93, v92, v94, v84);
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v95 = (uint64_t)v294;
  TetraDBManager.getSessionForNGMIdentity(conversationID:)(v303, (uint64_t)v294);
  LODWORD(v299) = a14;
  v96 = (uint64_t)v287;
  outlined init with copy of TetraSessionStates?(v95, (uint64_t)v287, &demangling cache variable for type metadata for TetraSessionStates?);
  v97 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v288 + 48);
  if (v97(v96, 1, v289) == 1)
  {
    outlined destroy of TetraSessionStates?(v96, &demangling cache variable for type metadata for TetraSessionStates?);
    v98 = v291;
    goto LABEL_12;
  }
  v296 = (unint64_t)v97;
  outlined init with take of TetraRatchetState(v96, (uint64_t)v290, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
  LOBYTE(v306) = 0;
  v103 = v291;
  v104 = *(_QWORD *)(v84 + v291[9] + 8);
  v105 = v284;
  outlined init with copy of TetraRatchetOuterMessage(v84, v284, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  if (v104 >> 60 == 15)
  {
    outlined destroy of TetraRatchetOuterMessage(v105, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    v106 = v286;
LABEL_19:
    outlined init with copy of TetraRatchetOuterMessage(v84, v106, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraRatchetOuterMessage(v106, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
LABEL_20:
    v298 = a18;
    v113 = (uint64_t *)(v84 + v291[10]);
    v114 = v84;
    v115 = *v113;
    v116 = v113[1];
    outlined copy of Data?(*v113, v116);
    v117 = TetraSessionStates.openMessage(_:prekeysHash:sessionDST:theirTetraVersion:didRatchet:)(v114, v115, v116, v283, v301, v299, &v306);
    v124 = v123;
    v126 = v125;
    v128 = v127;
    v300 = v117;
    outlined consume of Data?(v115, v116);
    v129 = (id)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    if (v128 >> 60 != 15)
    {
      v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v132 = v131;
      outlined copy of Data._Representation(v126, v128);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v305[0] = v129;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v126, v128, v130, v132, isUniquelyReferenced_nonNull_native);
      v129 = v305[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v134 = v302;
    specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v303, (uint64_t)v290);
    v299 = v124;
    static os_log_type_t.debug.getter();
    result = MessageProtectionLog();
    if (!result)
      goto LABEL_87;
    v153 = result;
    os_log(_:dso:log:_:_:)();

    v154 = (id)conversationLock;
    OS_dispatch_semaphore.signal()();

    v297 = specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v129);
    swift_bridgeObjectRelease();
    v155 = v134 + v291[7];
    v296 = *(unsigned int *)(v134 + 24);
    v156 = v282;
    v157 = v274;
    v158 = v278;
    (*(void (**)(char *, uint64_t, uint64_t))(v282 + 16))(v274, v155, v278);
    v159 = (*(unsigned __int8 *)(v156 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80);
    v160 = (v273 + v159 + 7) & 0xFFFFFFFFFFFFFFF8;
    v161 = swift_allocObject();
    v162 = v303;
    *(_QWORD *)(v161 + 16) = v275;
    *(_QWORD *)(v161 + 24) = v162;
    (*(void (**)(unint64_t, char *, uint64_t))(v156 + 32))(v161 + v159, v157, v158);
    *(_QWORD *)(v161 + v160) = v296;
    v163 = v162;
    v164 = v299;
    v165 = (uint64_t)v300;
    ((void (*)(NSObject *, unint64_t, uint64_t, _QWORD, uint64_t (*)(), uint64_t))a17)(v300, v299, v297, 0, partial apply for closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:), v161);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Data._Representation(v165, v164);
    outlined consume of Data?(v126, v128);

    outlined destroy of TetraRatchetOuterMessage((uint64_t)v290, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
    v166 = v302;
LABEL_40:
    outlined destroy of TetraRatchetOuterMessage(v166, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraSessionStates?((uint64_t)v294, &demangling cache variable for type metadata for TetraSessionStates?);
    return swift_release();
  }
  v109 = (uint64_t *)(v105 + v103[10]);
  v110 = *v109;
  v111 = v109[1];
  outlined copy of Data?(*v109, v111);
  outlined destroy of TetraRatchetOuterMessage(v105, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  v112 = v282;
  v106 = v286;
  if (v111 >> 60 == 15)
    goto LABEL_19;
  outlined consume of Data?(v110, v111);
  outlined init with copy of TetraRatchetOuterMessage(v84, v106, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  v135 = v106;
  v136 = v291;
  v137 = *(_QWORD *)(v135 + v291[9] + 8);
  v138 = v279;
  outlined init with copy of TetraRatchetOuterMessage(v135, v279, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  if (v137 >> 60 == 15)
  {
    outlined destroy of TetraRatchetOuterMessage(v138, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    v85 = (uint64_t)v300;
LABEL_36:
    v151 = v286;
    v152 = v280;
    outlined init with copy of TetraRatchetOuterMessage(v286, v280, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraRatchetOuterMessage(v152, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraRatchetOuterMessage(v151, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    goto LABEL_37;
  }
  v148 = (uint64_t *)(v138 + v136[10]);
  v149 = *v148;
  v150 = v148[1];
  outlined copy of Data?(*v148, v150);
  outlined destroy of TetraRatchetOuterMessage(v138, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  v85 = (uint64_t)v300;
  if (v150 >> 60 == 15)
    goto LABEL_36;
  outlined consume of Data?(v149, v150);
  v167 = v280;
  outlined init with copy of TetraRatchetOuterMessage(v286, v280, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  outlined init with copy of TetraRatchetOuterMessage((uint64_t)v290, v276, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
  v168 = v269;
  v169 = v278;
  (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v269, v167 + v291[7], v278);
  result = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v168, 0, 1, v169);
  v170 = v167 + v291[10];
  v171 = *(_QWORD *)(v170 + 8);
  if (v171 >> 60 == 15)
  {
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v172 = *(_QWORD *)v170;
  outlined copy of Data._Representation(*(_QWORD *)v170, *(_QWORD *)(v170 + 8));
  v173 = (uint64_t)v168;
  v174 = (uint64_t)v168;
  v175 = v276;
  LODWORD(v298) = TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:)(v173, v172, v171);
  outlined consume of Data?(v172, v171);
  outlined destroy of TetraSessionStates?(v174, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  outlined destroy of TetraRatchetOuterMessage(v175, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
  outlined destroy of TetraRatchetOuterMessage(v280, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  outlined destroy of TetraRatchetOuterMessage(v286, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  if ((v298 & 1) != 0)
    goto LABEL_20;
LABEL_37:
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v290, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
  v95 = (uint64_t)v294;
  v98 = v291;
  v97 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v296;
LABEL_12:
  v99 = (uint64_t *)(v84 + v98[10]);
  v100 = v285;
  if ((unint64_t)v99[1] >> 60 == 15)
  {
    lazy protocol witness table accessor for type TetraAKE and conformance TetraAKE();
    v101 = (void *)swift_allocError();
    *v102 = 0;
    swift_willThrow();
    outlined destroy of TetraRatchetOuterMessage(v84, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraSessionStates?(v95, &demangling cache variable for type metadata for TetraSessionStates?);
LABEL_68:
    v305[0] = v101;
    v238 = v101;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast() && v306 == 3)
    {
      v239 = objc_allocWithZone(MEMORY[0x24BDD1540]);
      v240 = (void *)MEMORY[0x20BD3B538](0xD00000000000001BLL, 0x800000020BB47400);
      v241 = objc_msgSend(v239, sel_initWithDomain_code_userInfo_, v240, 5, 0);

      static os_log_type_t.debug.getter();
      result = MessageProtectionLog();
      if (result)
      {
        v242 = result;
        os_log(_:dso:log:_:_:)();

        v243 = (id)conversationLock;
        OS_dispatch_semaphore.signal()();

        v244 = v241;
        ((void (*)(_QWORD, unint64_t, _QWORD, id, _QWORD, _QWORD))v89)(0, 0xF000000000000000, 0, v241, 0, 0);

        v245 = v305[0];
LABEL_77:

        return swift_release();
      }
      goto LABEL_85;
    }

    v246 = v101;
    v247 = static os_log_type_t.error.getter();
    result = MessageProtectionLog();
    if (result)
    {
      v248 = result;
      if (os_log_type_enabled(result, v247))
      {
        v249 = v293;
        swift_bridgeObjectRetain();
        v250 = v101;
        swift_bridgeObjectRetain();
        v251 = v101;
        v252 = swift_slowAlloc();
        v300 = v89;
        v253 = v252;
        v254 = (void *)swift_slowAlloc();
        v305[0] = v254;
        *(_DWORD *)v253 = 136315394;
        swift_bridgeObjectRetain();
        v306 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v292, v249, (uint64_t *)v305);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v253 + 12) = 2080;
        swift_getErrorValue();
        v255 = Error.localizedDescription.getter();
        v306 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v255, v256, (uint64_t *)v305);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_20BABB000, v248, v247, "Tetra failed decrypting %s with error: %s", (uint8_t *)v253, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x20BD3C498](v254, -1, -1);
        v89 = v300;
        MEMORY[0x20BD3C498](v253, -1, -1);
      }

      static os_log_type_t.debug.getter();
      result = MessageProtectionLog();
      if (result)
      {
        v257 = result;
        os_log(_:dso:log:_:_:)();

        v258 = (id)conversationLock;
        OS_dispatch_semaphore.signal()();

        v259 = v101;
        ((void (*)(_QWORD, unint64_t, _QWORD, void *, _QWORD, _QWORD))v89)(0, 0xF000000000000000, 0, v101, 0, 0);

        v245 = v101;
        goto LABEL_77;
      }
      goto LABEL_84;
    }
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  v295 = (id)v99[1];
  v297 = *v99;
  v107 = *(_QWORD *)(v84 + v98[9] + 8);
  outlined init with copy of TetraRatchetOuterMessage(v84, (uint64_t)v285, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  if (v107 >> 60 == 15)
  {
    v108 = (unint64_t)v295;
    outlined copy of Data._Representation(v297, (unint64_t)v295);
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v100, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
LABEL_22:
    lazy protocol witness table accessor for type TetraAKE and conformance TetraAKE();
    v101 = (void *)swift_allocError();
    *v122 = 1;
    swift_willThrow();
    outlined consume of Data?(v297, v108);
    outlined destroy of TetraRatchetOuterMessage(v84, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraSessionStates?((uint64_t)v294, &demangling cache variable for type metadata for TetraSessionStates?);
    goto LABEL_68;
  }
  v118 = &v100[v98[10]];
  v300 = a17;
  v120 = *(char **)v118;
  v119 = *((_QWORD *)v118 + 1);
  v108 = (unint64_t)v295;
  outlined copy of Data?(v297, (unint64_t)v295);
  v290 = v120;
  v121 = (uint64_t)v120;
  v89 = v300;
  outlined copy of Data?(v121, v119);
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v100, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  if (v119 >> 60 == 15)
    goto LABEL_22;
  v296 = (unint64_t)v97;
  v298 = a18;
  outlined consume of Data?((uint64_t)v290, v119);
  v139 = v297;
  outlined copy of Data?(v297, v108);
  v140 = swift_bridgeObjectRetain();
  v141 = specialized _ArrayProtocol.filter(_:)(v140);
  outlined consume of Data?(v139, v108);
  result = swift_bridgeObjectRelease();
  if (!(v141 >> 62))
  {
    v142 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v142)
    {
      if (v142 == 1)
        goto LABEL_31;
      goto LABEL_65;
    }
LABEL_66:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
    v101 = (void *)swift_allocError();
    v237 = 4;
    goto LABEL_67;
  }
  swift_bridgeObjectRetain();
  v234 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v234)
    goto LABEL_66;
  swift_bridgeObjectRetain();
  v235 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v235 != 1)
  {
LABEL_65:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
    v101 = (void *)swift_allocError();
    v237 = 5;
LABEL_67:
    *v236 = v237;
    swift_willThrow();
    outlined consume of Data?(v139, (unint64_t)v295);
    outlined destroy of TetraRatchetOuterMessage(v84, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraSessionStates?((uint64_t)v294, &demangling cache variable for type metadata for TetraSessionStates?);
    goto LABEL_68;
  }
LABEL_31:
  if ((v141 & 0xC000000000000001) != 0)
  {
    v290 = (char *)MEMORY[0x20BD3B790](0, v141);
    v143 = v271;
    goto LABEL_34;
  }
  v143 = v271;
  if (!*(_QWORD *)((v141 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  v290 = (char *)*(id *)(v141 + 32);
LABEL_34:
  swift_bridgeObjectRelease();
  v144 = objc_msgSend(v94, sel_compactRepresentation);
  v145 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v147 = v146;

  v305[0] = v145;
  v305[1] = v147;
  P256.Signing.PublicKey.init<A>(compactRepresentation:)();
  v176 = v282;
  v177 = *(char **)(v282 + 16);
  v284 = v84 + v291[7];
  v178 = v278;
  v285 = v177;
  ((void (*)(uint64_t))v177)(v85);
  v179 = *(void (**)(void))(v176 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v179)(v85, 0, 1, v178);
  v180 = (int *)v265;
  v181 = v268;
  v291 = (int *)((char *)v268 + *(int *)(v265 + 28));
  v179();
  v182 = (_QWORD *)((char *)v181 + v180[8]);
  v183 = v297;
  v184 = (unint64_t)v295;
  *v182 = v297;
  v182[1] = v184;
  v185 = *(void (**)(void))(v143 + 16);
  v287 = ((char *)v181 + v180[6]);
  v186 = v183;
  v187 = v267;
  v185();
  v286 = v180[9];
  *((_BYTE *)v181 + v286) = 1;
  outlined copy of Data?(v186, v184);
  v188 = v290;
  v189 = v266;
  v290 = v188;
  TetraRatchetState.init(asReceiverWithFullPrekey:)(v188, v266);
  v190 = v290;
  (*(void (**)(char *, uint64_t))(v271 + 8))(v270, v187);
  outlined init with take of TetraRatchetState(v189, (uint64_t)v181 + v180[5], type metadata accessor for TetraRatchetState);
  if (v299 >= 0xD)
    v191 = 13;
  else
    v191 = v299;
  *v181 = v191;
  outlined assign with take of P256.KeyAgreement.PublicKey?(v85, (uint64_t)v291);
  v304 = 0;
  *v181 = v191;
  *((_BYTE *)v181 + v286) = 1;
  v192 = TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(v302, v283, v301, &v304);
  v194 = v193;
  v287 = v192;
  v291 = v195;
  v299 = v196;
  v197 = v294;
  v198 = v264;
  outlined init with copy of TetraSessionStates?((uint64_t)v294, v264, &demangling cache variable for type metadata for TetraSessionStates?);
  v199 = v289;
  v200 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v296)(v198, 1, v289);
  outlined destroy of TetraSessionStates?(v198, &demangling cache variable for type metadata for TetraSessionStates?);
  if (v200 == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v197, &demangling cache variable for type metadata for TetraSessionStates?);
    outlined init with copy of TetraRatchetOuterMessage((uint64_t)v181, (uint64_t)v197, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    *((_BYTE *)v197 + *(int *)(v199 + 20)) = 0;
    *(_QWORD *)((char *)v197 + *(int *)(v199 + 24)) = MEMORY[0x24BEE4AF8];
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v288 + 56))(v197, 0, 1, v199);
  }
  else
  {
    v201 = v262;
    outlined init with copy of TetraRatchetOuterMessage((uint64_t)v181, (uint64_t)v262, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    result = ((uint64_t (*)(_DWORD *, uint64_t, uint64_t))v296)(v197, 1, v199);
    if ((_DWORD)result == 1)
    {
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
    if ((specialized static TetraSessionState.== infix(_:_:)(v197, v201) & 1) != 0)
    {
      outlined assign with copy of TetraSessionState((uint64_t)v201, (uint64_t)v197);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
      v202 = (*(unsigned __int8 *)(v261 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v261 + 80);
      v203 = (_OWORD *)swift_allocObject();
      v203[1] = xmmword_20BB404E0;
      outlined init with copy of TetraRatchetOuterMessage((uint64_t)v197, (uint64_t)v203 + v202, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      v204 = (char *)v197 + *(int *)(v289 + 24);
      v205 = *(_QWORD *)v204;
      v305[0] = v203;
      specialized Array.append<A>(contentsOf:)(v205);
      *(id *)v204 = v305[0];
      v206 = outlined assign with copy of TetraSessionState((uint64_t)v201, (uint64_t)v197);
      MEMORY[0x24BDAC7A8](v206);
      result = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(unint64_t))partial apply for closure #1 in TetraSessionStates.makeDefault(_:));
      v207 = *(_QWORD *)(*(_QWORD *)v204 + 16);
      if (v207 < (uint64_t)result)
      {
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
      specialized Array.replaceSubrange<A>(_:with:)((uint64_t)result, v207);
      v201 = v262;
    }
    TetraSessionStates.cleanupPreviousSessionStates()();
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v201, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  }
  v208 = (id)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v209 = (uint64_t)v263;
  if (v194 >> 60 != 15)
  {
    v210 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v212 = v211;
    v213 = v299;
    outlined copy of Data._Representation(v299, v194);
    v214 = swift_isUniquelyReferenced_nonNull_native();
    v305[0] = v208;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v213, v194, v210, v212, v214);
    v208 = v305[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined init with copy of TetraSessionStates?((uint64_t)v294, v209, &demangling cache variable for type metadata for TetraSessionStates?);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v296)(v209, 1, v289);
  if ((_DWORD)result == 1)
    goto LABEL_89;
  specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v303, v209);
  v296 = v194;
  outlined destroy of TetraRatchetOuterMessage(v209, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
  static os_log_type_t.debug.getter();
  result = MessageProtectionLog();
  if (!result)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v215 = result;
  os_log(_:dso:log:_:_:)();

  v216 = (id)conversationLock;
  OS_dispatch_semaphore.signal()();

  v217 = static os_log_type_t.info.getter();
  result = MessageProtectionLog();
  if (result)
  {
    v218 = result;
    if (os_log_type_enabled(result, v217))
    {
      v219 = v293;
      swift_bridgeObjectRetain_n();
      v220 = (uint8_t *)swift_slowAlloc();
      v221 = (void *)swift_slowAlloc();
      v305[0] = v221;
      *(_DWORD *)v220 = 136315138;
      swift_bridgeObjectRetain();
      v306 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v292, v219, (uint64_t *)v305);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_20BABB000, v218, v217, "Successfully decrypted %s", v220, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x20BD3C498](v221, -1, -1);
      MEMORY[0x20BD3C498](v220, -1, -1);
    }

    v222 = specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v208);
    swift_bridgeObjectRelease();
    v223 = v302;
    v293 = *(unsigned int *)(v302 + 24);
    v224 = v274;
    v225 = v278;
    ((void (*)(char *, uint64_t, uint64_t))v285)(v274, v284, v278);
    v226 = v282;
    v227 = (*(unsigned __int8 *)(v282 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v282 + 80);
    v228 = (v273 + v227 + 7) & 0xFFFFFFFFFFFFFFF8;
    v229 = swift_allocObject();
    v230 = v303;
    *(_QWORD *)(v229 + 16) = v275;
    *(_QWORD *)(v229 + 24) = v230;
    (*(void (**)(unint64_t, char *, uint64_t))(v226 + 32))(v229 + v227, v224, v225);
    *(_QWORD *)(v229 + v228) = v293;
    v231 = v230;
    v232 = (uint64_t)v287;
    v233 = (unint64_t)v291;
    ((void (*)(NSObject *, int *, uint64_t, _QWORD, uint64_t (*)(), uint64_t))v300)(v287, v291, v222, 0, partial apply for closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:), v229);
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Data._Representation(v232, v233);
    outlined consume of Data?(v299, v296);

    outlined consume of Data?(v297, (unint64_t)v295);
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v268, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    v166 = v223;
    goto LABEL_40;
  }
LABEL_92:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Swift.AnyObject>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Swift.AnyObject>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of TetraSessionStates?(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of TetraSessionStates?(v6, (uint64_t)&v13, &demangling cache variable for type metadata for (CFStringRef, Any));
    v7 = v13;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v7, v8);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (uint64_t *)(v2[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of TetraSessionStates?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  _OWORD v36[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v27 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v26)
        goto LABEL_37;
      v14 = *(_QWORD *)(v27 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v26)
          goto LABEL_37;
        v14 = *(_QWORD *)(v27 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v26)
            goto LABEL_37;
          v14 = *(_QWORD *)(v27 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v18 = v17[1];
    *(_QWORD *)&v36[0] = *v17;
    *((_QWORD *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    v32 = v28;
    v33 = v29;
    v34 = v30;
    outlined init with take of Any(&v31, v35);
    v28 = v32;
    v29 = v33;
    v30 = v34;
    outlined init with take of Any(v35, v36);
    outlined init with take of Any(v36, &v32);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v19 = -1 << *(_BYTE *)(v2 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(_QWORD *)(v10 + 32) = v30;
    result = (uint64_t)outlined init with take of Any(&v32, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : Swift.AnyObject].Iterator._Variant();
    return v2;
  }
  v14 = *(_QWORD *)(v27 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v31 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v30)
      goto LABEL_37;
    v14 = *(_QWORD *)(v31 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v30)
        goto LABEL_37;
      v14 = *(_QWORD *)(v31 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v30)
          goto LABEL_37;
        v14 = *(_QWORD *)(v31 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v30)
            goto LABEL_37;
          v14 = *(_QWORD *)(v31 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = 16 * v12;
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = v18[1];
    v20 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v17);
    v21 = *v20;
    v22 = v20[1];
    *(_QWORD *)&v40[0] = *v18;
    *((_QWORD *)&v40[0] + 1) = v19;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v21, v22);
    swift_dynamicCast();
    swift_dynamicCast();
    v36 = v32;
    v37 = v33;
    v38 = v34;
    outlined init with take of Any(&v35, v39);
    v32 = v36;
    v33 = v37;
    v34 = v38;
    outlined init with take of Any(v39, v40);
    outlined init with take of Any(v40, &v36);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v23 = -1 << *(_BYTE *)(v2 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v6 + 8 * (v24 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v6 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v6 + 8 * v25);
      }
      while (v29 == -1);
      v9 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v32;
    *(_OWORD *)(v10 + 16) = v33;
    *(_QWORD *)(v10 + 32) = v34;
    result = (uint64_t)outlined init with take of Any(&v36, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v30)
  {
LABEL_37:
    swift_release();
    outlined consume of [String : Swift.AnyObject].Iterator._Variant();
    return v2;
  }
  v14 = *(_QWORD *)(v31 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v30)
      goto LABEL_37;
    v14 = *(_QWORD *)(v31 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a2) = v3(a2);
  swift_release();
  return a2 & 1;
}

id TetraAPI.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id TetraAPI.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraAPI();
  return objc_msgSendSuper2(&v2, sel_init);
}

id TetraAPI.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraAPI();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for TetraSessionState();
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Data.Iterator();
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

uint64_t sub_20BADC2A4()
{
  uint64_t v0;
  uint64_t v1;
  char **v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;

  v7 = *v2;
  v8 = *((_QWORD *)*v2 + 2);
  v9 = v8 + BYTE6(v3);
  if (__OFADD__(v8, BYTE6(v3)))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *v2 = v7;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v11 = *((_QWORD *)v7 + 3) >> 1, v11 < v9))
  {
    if (v8 <= v9)
      v12 = v8 + BYTE6(v3);
    else
      v12 = v8;
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v12, 1, v7);
    *v2 = v7;
    v11 = *((_QWORD *)v7 + 3) >> 1;
  }
  v13 = v11 - *((_QWORD *)v7 + 2);
  outlined copy of Data._Representation(v4, v3);
  v14 = Data._copyContents(initializing:)();
  outlined consume of Data._Representation(v4, v3);
  outlined consume of Data._Representation(v4, v3);
  if (v14 < BYTE6(v3))
    goto LABEL_15;
  if (v14 >= 1)
  {
    v15 = *((_QWORD *)v7 + 2);
    v16 = __OFADD__(v15, v14);
    v17 = v15 + v14;
    if (v16)
    {
      __break(1u);
      JUMPOUT(0x20BADC49CLL);
    }
    *((_QWORD *)v7 + 2) = v17;
  }
  if (v14 == v13)
  {
LABEL_16:
    v19 = *((_QWORD *)v7 + 2);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDD78], MEMORY[0x24BDCDD80]);
    dispatch thunk of IteratorProtocol.next()();
    if ((*(_BYTE *)(v6 - 81) & 1) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v0);
    while (1)
    {
      v20 = *((_QWORD *)v7 + 3);
      v21 = v20 >> 1;
      if ((uint64_t)(v20 >> 1) >= v19 + 1)
        break;
      v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v19 + 1, 1, v7);
      *v2 = v7;
      v22 = *(_BYTE *)(v6 - 81);
      v21 = *((_QWORD *)v7 + 3) >> 1;
      if ((v22 & 1) == 0)
        goto LABEL_21;
LABEL_18:
      *((_QWORD *)v7 + 2) = v19;
      if ((v22 & 1) != 0)
        return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v0);
    }
    v22 = 0;
    do
    {
LABEL_21:
      if (v19 >= v21)
        break;
      v7[v19++ + 32] = *(_BYTE *)(v6 - 82);
      dispatch thunk of IteratorProtocol.next()();
      v22 = *(_BYTE *)(v6 - 81);
    }
    while ((v22 & 1) == 0);
    goto LABEL_18;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v0);
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  _CFObject.hash(into:)();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int16 a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x20BD3B94C](*(_QWORD *)(v1 + 40), a1, 2);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for CFStringRef(0);
    v6 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    v7 = v6;
    v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = static _CFObject.== infix(_:_:)();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x20BD3B754](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSObject);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v3 = v2;
  v5 = type metadata accessor for SymmetricKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, SymmetricKey>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = result;
  if (*(_QWORD *)(v9 + 16))
  {
    v36 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v39 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v38 = (unint64_t)(v14 + 63) >> 6;
    v17 = result + 64;
    v37 = a2;
    v18 = 16;
    if ((a2 & 1) != 0)
      v18 = 32;
    v40 = v18;
    while (1)
    {
      if (v16)
      {
        v20 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v21 = v20 | (v12 << 6);
      }
      else
      {
        v22 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v22 >= v38)
          goto LABEL_33;
        v23 = v39[v22];
        ++v12;
        if (!v23)
        {
          v12 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_33;
          v23 = v39[v12];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_33:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v36;
                goto LABEL_40;
              }
              v34 = 1 << *(_BYTE *)(v9 + 32);
              if (v34 >= 64)
                bzero(v39, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v34;
              v3 = v36;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v12 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v12 >= v38)
                  goto LABEL_33;
                v23 = v39[v12];
                ++v24;
                if (v23)
                  goto LABEL_23;
              }
            }
            v12 = v24;
          }
        }
LABEL_23:
        v16 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v12 << 6);
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v21);
      v26 = *(_QWORD *)(v6 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + v40))(v8, *(_QWORD *)(v9 + 56) + v26 * v21, v5);
      result = static Hasher._hash(seed:_:)();
      v27 = -1 << *(_BYTE *)(v11 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v19) = v25;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 56) + v26 * v19, v8, v5);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v3 = v2;
  v5 = type metadata accessor for SymmetricKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt16, SymmetricKey>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = result;
  if (*(_QWORD *)(v9 + 16))
  {
    v36 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v39 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v38 = (unint64_t)(v14 + 63) >> 6;
    v17 = result + 64;
    v37 = a2;
    v18 = 16;
    if ((a2 & 1) != 0)
      v18 = 32;
    v40 = v18;
    while (1)
    {
      if (v16)
      {
        v20 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v21 = v20 | (v12 << 6);
      }
      else
      {
        v22 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v22 >= v38)
          goto LABEL_33;
        v23 = v39[v22];
        ++v12;
        if (!v23)
        {
          v12 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_33;
          v23 = v39[v12];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_33:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v36;
                goto LABEL_40;
              }
              v34 = 1 << *(_BYTE *)(v9 + 32);
              if (v34 >= 64)
                bzero(v39, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v34;
              v3 = v36;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v12 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v12 >= v38)
                  goto LABEL_33;
                v23 = v39[v12];
                ++v24;
                if (v23)
                  goto LABEL_23;
              }
            }
            v12 = v24;
          }
        }
LABEL_23:
        v16 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v12 << 6);
      }
      v25 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 48) + 2 * v21);
      v26 = *(_QWORD *)(v6 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + v40))(v8, *(_QWORD *)(v9 + 56) + v26 * v21, v5);
      result = MEMORY[0x20BD3B94C](*(_QWORD *)(v11 + 40), v25, 2);
      v27 = -1 << *(_BYTE *)(v11 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_WORD *)(*(_QWORD *)(v11 + 48) + 2 * v19) = v25;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 56) + v26 * v19, v8, v5);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v11;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v6 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35)
          goto LABEL_33;
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35)
            goto LABEL_33;
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v14 >= v35)
                  goto LABEL_33;
                v24 = v36[v14];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = 16 * v22;
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7] + 16 * v14;
      result = outlined consume of Data._Representation(*(_QWORD *)v21, *(_QWORD *)(v21 + 8));
      *(_QWORD *)v21 = a1;
      *(_QWORD *)(v21 + 8) = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, __int16 a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = type metadata accessor for SymmetricKey();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, a1, v18);
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, __int16 a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_WORD *)(a4[6] + 2 * a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for SymmetricKey();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a3, v8);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(unint64_t))
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = v1;
  v5 = type metadata accessor for TetraSessionState();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v34 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v33 = (uint64_t)&v30 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v35 = (uint64_t)&v30 - v11;
  v12 = *v1;
  v13 = *(_QWORD *)(*v1 + 16);
  if (!v13)
    return 0;
  v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = *(_QWORD *)(v10 + 72);
  swift_bridgeObjectRetain();
  v16 = 0;
  v31 = v14;
  while (1)
  {
    v17 = a1(v12 + v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((v17 & 1) != 0)
      break;
    ++v16;
    v14 += v15;
    if (v13 == v16)
    {
      swift_bridgeObjectRelease();
      return *(_QWORD *)(v12 + 16);
    }
  }
  result = swift_bridgeObjectRelease();
  if (!__OFADD__(v16, 1))
  {
    v19 = *(_QWORD *)(v12 + 16);
    if (v16 + 1 == v19)
      return v16;
    v20 = v15 + v14;
    v21 = v16 + 1;
    v30 = v1;
    v32 = v15;
    while (v21 < v19)
    {
      v22 = v3;
      v36 = v20;
      v23 = v35;
      outlined init with copy of TetraRatchetOuterMessage(v12 + v20, v35, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      v24 = a1(v23);
      result = outlined destroy of TetraRatchetOuterMessage(v23, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      if ((v24 & 1) != 0)
      {
        v3 = v22;
        v25 = v32;
      }
      else
      {
        v3 = v22;
        v25 = v32;
        if (v21 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0)
            goto LABEL_32;
          v26 = *v3;
          v27 = *(_QWORD *)(*v3 + 16);
          if (v16 >= v27)
            goto LABEL_33;
          result = outlined init with copy of TetraRatchetOuterMessage(v26 + v31 + v16 * v32, v33, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
          if (v21 >= v27)
            goto LABEL_34;
          outlined init with copy of TetraRatchetOuterMessage(v26 + v36, v34, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
          result = swift_isUniquelyReferenced_nonNull_native();
          v3 = v30;
          *v30 = v26;
          if ((result & 1) == 0)
          {
            result = specialized _ArrayBuffer._consumeAndCreateNew()(v26);
            v26 = result;
            *v3 = result;
          }
          if (v16 >= *(_QWORD *)(v26 + 16))
            goto LABEL_35;
          result = outlined assign with take of TetraSessionState(v34, v26 + v31 + v16 * v25);
          if (v21 >= *(_QWORD *)(*v3 + 16))
            goto LABEL_36;
          result = outlined assign with take of TetraSessionState(v33, *v3 + v36);
        }
        if (__OFADD__(v16++, 1))
          goto LABEL_31;
      }
      v29 = v21 + 1;
      if (__OFADD__(v21, 1))
        goto LABEL_30;
      v12 = *v3;
      v19 = *(_QWORD *)(*v3 + 16);
      ++v21;
      v20 = v36 + v25;
      if (v29 == v19)
        return v16;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = *(_QWORD *)(type metadata accessor for TetraSessionState() - 8);
  v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v14 * a1;
  v16 = v13 + v14 * a1;
  result = swift_arrayDestroy();
  if (!v7)
    goto LABEL_25;
  v18 = *(_QWORD *)(v4 + 16);
  v19 = v18 - a2;
  if (__OFSUB__(v18, a2))
    goto LABEL_31;
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront();
    }
    v21 = *(_QWORD *)(v4 + 16);
    v22 = __OFADD__(v21, v8);
    v23 = v21 - v7;
    if (!v22)
    {
      *(_QWORD *)(v4 + 16) = v23;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, void *a8, uint64_t a9, unint64_t a10)
{
  os_log_type_t v17;
  NSObject *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Swift::String v32;
  id v33;
  uint64_t v34;
  os_log_type_t type;
  unint64_t v36;
  NSObject *log;
  uint64_t v39;

  v17 = static os_log_type_t.info.getter();
  v18 = MessageProtectionLog();
  if (v18)
  {
    log = v18;
    if (os_log_type_enabled(v18, v17))
    {
      swift_bridgeObjectRetain();
      type = v17;
      v19 = a3;
      outlined copy of Data._Representation(a4, a5);
      swift_bridgeObjectRetain();
      v20 = a8;
      outlined copy of Data._Representation(a9, a10);
      swift_bridgeObjectRetain();
      v36 = a5;
      v21 = v19;
      outlined copy of Data._Representation(a4, v36);
      swift_bridgeObjectRetain();
      v33 = v20;
      outlined copy of Data._Representation(a9, a10);
      v22 = swift_slowAlloc();
      v34 = swift_slowAlloc();
      v39 = v34;
      *(_DWORD *)v22 = 136316418;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2080;
      v23 = objc_msgSend(v21, sel_base64EncodedStringWithOptions_, 0);
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v26 = v25;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a5 = v36;
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 22) = 2080;
      v27 = Data.base64EncodedString(options:)(0);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27._countAndFlagsBits, (unint64_t)v27._object, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(a4, v36);
      outlined consume of Data._Representation(a4, v36);
      *(_WORD *)(v22 + 32) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, a7, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 42) = 2080;
      v28 = objc_msgSend(v33, sel_base64EncodedStringWithOptions_, 0);
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v31 = v30;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 52) = 2080;
      v32 = Data.base64EncodedString(options:)(0);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32._countAndFlagsBits, (unint64_t)v32._object, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(a9, a10);
      outlined consume of Data._Representation(a9, a10);
      _os_log_impl(&dword_20BABB000, log, type, "Computing ConversationID with sendingURI:%s, sendingPushToken:%s, sendingPublicKey:%s receivingURI: %s receivingPushToken: %s receivingPublicKey:%s", (uint8_t *)v22, 0x3Eu);
      swift_arrayDestroy();
      MEMORY[0x20BD3C498](v34, -1, -1);
      MEMORY[0x20BD3C498](v22, -1, -1);

    }
    else
    {

    }
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x20BADED34);
}

uint64_t specialized static TetraAPI.markForStateReset(ourURI:ourPushToken:theirURI:theirPushToken:theirRegistration:signedByOur:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, void *a6, char *a7, void *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  NSData v36;
  uint64_t v37;
  os_log_type_t v38;
  objc_class *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _QWORD *v43;
  objc_class *v44;
  uint64_t result;
  _DWORD *v46;
  uint64_t v47;
  char *v48;
  int *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  os_log_type_t v57;
  objc_class *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  _QWORD *v62;
  objc_class *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  int *v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  uint64_t v74;

  v72 = a5;
  v73 = a6;
  v71 = a4;
  v13 = type metadata accessor for TetraSessionState();
  v65 = *(_QWORD *)(v13 - 8);
  v66 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v68 = (int *)((char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraSessionStates?);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for TetraSessionStates();
  v18 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v69 = (_DWORD *)((char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = objc_msgSend(a8, sel_publicKey);
  v21 = objc_msgSend(v20, sel_compactRepresentation);

  v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = v23;

  v67 = a7;
  v25 = objc_msgSend(*(id *)&a7[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signingPublicKey], sel_compactRepresentation);
  v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v28 = v27;

  specialized static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(a1, a2, a3, v22, v24, v71, v72, v73, v26, v28);
  v30 = v29;
  v32 = v31;
  outlined consume of Data._Representation(v26, v28);
  outlined consume of Data._Representation(v22, v24);
  v33 = v30(1);
  v35 = v34;
  v36.super.isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v33, v35);
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  TetraDBManager.getSessionForNGMIdentity(conversationID:)(v36.super.isa, (uint64_t)v17);
  v37 = v70;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v70) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v17, &demangling cache variable for type metadata for TetraSessionStates?);
    v38 = static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log);
    v39 = v36.super.isa;
    v40 = static OS_os_log.default.getter();
    v41 = v38;
    if (os_log_type_enabled(v40, v38))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v42 = 138412290;
      v74 = (uint64_t)v39;
      v44 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v43 = v39;

      _os_log_impl(&dword_20BABB000, v40, v41, "We failed to reset the session state for the provided session: %@.", v42, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x20BD3C498](v43, -1, -1);
      MEMORY[0x20BD3C498](v42, -1, -1);
      swift_release();

    }
    else
    {
      swift_release();

    }
    return 0;
  }
  else
  {
    v46 = v69;
    outlined init with take of TetraRatchetState((uint64_t)v17, (uint64_t)v69, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
    v47 = *(int *)(v37 + 20);
    if ((*((_BYTE *)v46 + v47) & 1) != 0 || (*((_BYTE *)v46 + *(int *)(v66 + 36)) & 1) != 0)
    {
      v48 = (char *)v67;
      v49 = v68;
      TetraSessionState.init(remoteTetraRegistration:sessionDST:)(v48, v30, v32, v68);
      if ((specialized static TetraSessionState.== infix(_:_:)(v46, v49) & 1) != 0)
      {
        outlined assign with copy of TetraSessionState((uint64_t)v49, (uint64_t)v46);
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
        v50 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
        v51 = v37;
        v52 = swift_allocObject();
        *(_OWORD *)(v52 + 16) = xmmword_20BB404E0;
        outlined init with copy of TetraRatchetOuterMessage((uint64_t)v46, v52 + v50, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
        v53 = (uint64_t *)((char *)v46 + *(int *)(v51 + 24));
        v54 = *v53;
        v74 = v52;
        specialized Array.append<A>(contentsOf:)(v54);
        *v53 = v74;
        v55 = outlined assign with copy of TetraSessionState((uint64_t)v49, (uint64_t)v46);
        MEMORY[0x24BDAC7A8](v55);
        result = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(unint64_t))closure #1 in TetraSessionStates.makeDefault(_:)partial apply);
        v56 = *(_QWORD *)(*v53 + 16);
        if (v56 < result)
        {
          __break(1u);
          return result;
        }
        specialized Array.replaceSubrange<A>(_:with:)(result, v56);
      }
      TetraSessionStates.cleanupPreviousSessionStates()();
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      *((_BYTE *)v46 + v47) = 0;
    }
    specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v36.super.isa, (uint64_t)v46);
    v57 = static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log);
    v58 = v36.super.isa;
    v59 = static OS_os_log.default.getter();
    v60 = v57;
    if (os_log_type_enabled(v59, v57))
    {
      v61 = (uint8_t *)swift_slowAlloc();
      v62 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v61 = 138412290;
      v74 = (uint64_t)v58;
      v63 = v58;
      v46 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v62 = v58;

      _os_log_impl(&dword_20BABB000, v59, v60, "Persisted the request to reset the following session: %@.", v61, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x20BD3C498](v62, -1, -1);
      MEMORY[0x20BD3C498](v61, -1, -1);
    }
    else
    {

      v59 = v58;
    }

    outlined destroy of TetraRatchetOuterMessage((uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
    swift_release();
    return 1;
  }
}

Class specialized static TetraAPI.seal(message:authenticatedData:guid:sendingURI:sendingPushToken:receivingURI:receivingPushToken:receiverRegistration:encryptedAttributes:resetState:signedBy:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void *a7, uint64_t (*a8)(uint64_t), unint64_t a9, void *a10, char *a11, uint64_t a12, char a13, void *a14)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t (*v48)(uint64_t);
  uint64_t (*v49)(uint64_t);
  void *v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  Class isa;
  os_log_type_t v56;
  objc_class *v57;
  NSObject *v58;
  os_log_type_t v59;
  void *v60;
  objc_class *v61;
  uint8_t *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  Class result;
  unint64_t v72;
  Class v73;
  id v74;
  Class v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  int *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unsigned int v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  _DWORD *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  int *v91;
  uint64_t (*v92)(uint64_t);
  uint64_t v93;
  objc_class *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  int64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  Class v108;
  Class v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  Class v113;
  id v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  unint64_t v118;
  Class v119;
  id v120;
  unint64_t v121;
  uint64_t (*v122)(uint64_t);
  _QWORD v123[2];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  int *v132;
  _DWORD *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t (*v137)(uint64_t);
  char *v138;
  unint64_t v139;
  void *v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;

  v136 = a7;
  v137 = a8;
  v130 = a3;
  v131 = a4;
  v140 = a14;
  v145 = a11;
  v18 = type metadata accessor for TetraRatchetOuterMessage();
  v19 = MEMORY[0x24BDAC7A8](v18);
  v126 = (uint64_t)v123 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v127 = (uint64_t)v123 - v21;
  v129 = type metadata accessor for TetraSessionState();
  v125 = *(_QWORD *)(v129 - 8);
  v22 = MEMORY[0x24BDAC7A8](v129);
  v132 = (int *)((char *)v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v22);
  v128 = (int *)((char *)v123 - v24);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraSessionStates?);
  MEMORY[0x24BDAC7A8](v25);
  v138 = (char *)v123 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for TetraSessionStates();
  v134 = *(_QWORD *)(v139 - 8);
  v27 = MEMORY[0x24BDAC7A8](v139);
  v124 = (uint64_t)v123 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v133 = (_DWORD *)((char *)v123 - v29);
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v32 = v31;
  v33 = *(_QWORD *)(a12 + 16);
  v141 = a2;
  v144 = a1;
  if (v33)
  {
    v34 = v30;
    outlined copy of Data._Representation(a1, a2);
    v35 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v32);
    if ((v36 & 1) != 0)
    {
      v37 = (uint64_t *)(*(_QWORD *)(a12 + 56) + 16 * v35);
      v38 = *v37;
      v142 = v37[1];
      v143 = v38;
      outlined copy of Data._Representation(v38, v142);
      goto LABEL_6;
    }
  }
  else
  {
    outlined copy of Data._Representation(a1, a2);
  }
  v142 = 0xF000000000000000;
  v143 = 0;
LABEL_6:
  swift_bridgeObjectRelease();
  v39 = objc_msgSend(v140, sel_publicKey);
  v40 = objc_msgSend(v39, sel_compactRepresentation);

  v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v43 = v42;

  v44 = objc_msgSend(*(id *)&v145[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signingPublicKey], sel_compactRepresentation);
  v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v47 = v46;

  specialized static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(a5, a6, v136, v41, v43, (uint64_t)v137, a9, a10, v45, v47);
  v49 = v48;
  v51 = v50;
  outlined consume of Data._Representation(v45, v47);
  outlined consume of Data._Representation(v41, v43);
  v137 = v49;
  v52 = v49(1);
  v54 = v53;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v52, v54);
  v56 = static os_log_type_t.info.getter();
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log);
  v57 = isa;
  v58 = static OS_os_log.default.getter();
  v59 = v56;
  if (os_log_type_enabled(v58, v56))
  {
    v60 = v51;
    v61 = v57;
    v62 = (uint8_t *)swift_slowAlloc();
    v63 = swift_slowAlloc();
    v147 = v63;
    *(_DWORD *)v62 = 136315138;
    v136 = v60;
    v123[1] = v62 + 4;
    v64 = -[objc_class base64EncodedStringWithOptions:](v57, sel_base64EncodedStringWithOptions_, 0);
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v67 = v66;

    v68 = v65;
    v57 = v61;
    v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v67, &v147);
    v51 = v136;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20BABB000, v58, v59, "Encrypting for conversationID: %s", v62, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x20BD3C498](v63, -1, -1);
    MEMORY[0x20BD3C498](v62, -1, -1);
  }
  else
  {

  }
  v69 = (uint64_t)v138;
  v70 = v139;
  static os_log_type_t.debug.getter();
  result = (Class)MessageProtectionLog();
  v72 = v141;
  if (!result)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v73 = result;
  os_log(_:dso:log:_:_:)();

  if (one-time initialization token for conversationLock != -1)
    swift_once();
  v74 = (id)conversationLock;
  OS_dispatch_semaphore.wait()();

  static os_log_type_t.debug.getter();
  result = (Class)MessageProtectionLog();
  if (!result)
    goto LABEL_43;
  v75 = result;
  v76 = MEMORY[0x24BEE4AF8];
  os_log(_:dso:log:_:_:)();

  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v77 = v135;
  TetraDBManager.getSessionForNGMIdentity(conversationID:)(v57, v69);
  if (v77)
  {
    static os_log_type_t.debug.getter();
    result = (Class)MessageProtectionLog();
    if (result)
    {
      v108 = result;
      os_log(_:dso:log:_:_:)();

      v109 = (Class)(id)conversationLock;
      OS_dispatch_semaphore.signal()();

      swift_willThrow();
      swift_release();

      outlined consume of Data._Representation(v144, v72);
      outlined consume of Data?(v143, v142);
      return v109;
    }
    goto LABEL_44;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v134 + 48))(v69, 1, v70) != 1)
  {
    v87 = v133;
    outlined init with take of TetraRatchetState(v69, (uint64_t)v133, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
    v88 = *(int *)(v70 + 20);
    v89 = v145;
    if ((*((_BYTE *)v87 + v88) & 1) == 0 && (*((_BYTE *)v87 + *(int *)(v129 + 36)) != 1 || (a13 & 1) == 0))
    {
      v92 = v137;
LABEL_32:
      TetraRegistration.computeKeysHash()();
      v103 = v102;
      v104 = v89;
      v106 = v105;
      v122 = v92;
      v107 = v127;
      TetraSessionStates.sealMessage(message:authenticatedData:prekeyHash:remoteRegistration:sessionDST:)(v144, v72, v143, v142, v130, v131, v102, v105, v127, v104, v122, (uint64_t)v51);
      outlined consume of Data._Representation(v103, v106);
      v110 = TetraRatchetOuterMessage.serializedData(signedBy:)(v140);
      v112 = v111;
      outlined destroy of TetraRatchetOuterMessage(v107, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
      specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v57, (uint64_t)v133);
      static os_log_type_t.debug.getter();
      result = (Class)MessageProtectionLog();
      if (result)
      {
        v113 = result;
        os_log(_:dso:log:_:_:)();

        v114 = (id)conversationLock;
        OS_dispatch_semaphore.signal()();

        v109 = Data._bridgeToObjectiveC()().super.isa;
        outlined consume of Data._Representation(v110, v112);
        outlined consume of Data._Representation(v144, v72);
        outlined consume of Data?(v143, v142);

        outlined destroy of TetraRatchetOuterMessage((uint64_t)v133, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
LABEL_40:
        swift_release();
        return v109;
      }
      goto LABEL_45;
    }
    v90 = v145;
    v91 = v128;
    TetraSessionState.init(remoteTetraRegistration:sessionDST:)(v90, v137, (uint64_t)v51, v128);
    if ((specialized static TetraSessionState.== infix(_:_:)(v87, v91) & 1) != 0)
    {
      outlined assign with copy of TetraSessionState((uint64_t)v91, (uint64_t)v87);
LABEL_31:
      v92 = v137;
      TetraSessionStates.cleanupPreviousSessionStates()();
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      *((_BYTE *)v87 + v88) = 0;
      goto LABEL_32;
    }
    v136 = v51;
    v94 = v57;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
    v95 = (uint64_t)v87;
    v96 = (*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80);
    v97 = swift_allocObject();
    *(_OWORD *)(v97 + 16) = xmmword_20BB404E0;
    outlined init with copy of TetraRatchetOuterMessage(v95, v97 + v96, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    v98 = (uint64_t *)(v95 + *(int *)(v70 + 24));
    v99 = *v98;
    v147 = v97;
    specialized Array.append<A>(contentsOf:)(v99);
    *v98 = v147;
    v100 = outlined assign with copy of TetraSessionState((uint64_t)v91, v95);
    MEMORY[0x24BDAC7A8](v100);
    result = (Class)specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(unint64_t))closure #1 in TetraSessionStates.makeDefault(_:)partial apply);
    v101 = *(_QWORD *)(*v98 + 16);
    if (v101 >= (uint64_t)result)
    {
      specialized Array.replaceSubrange<A>(_:with:)((uint64_t)result, v101);
      v57 = v94;
      v51 = v136;
      v87 = v133;
      v89 = v145;
      goto LABEL_31;
    }
    __break(1u);
    goto LABEL_42;
  }
  outlined destroy of TetraSessionStates?(v69, &demangling cache variable for type metadata for TetraSessionStates?);
  v78 = v145;
  v79 = v132;
  TetraSessionState.init(remoteTetraRegistration:sessionDST:)(v78, v137, (uint64_t)v51, v132);
  v145 = (char *)v57;
  v136 = v51;
  TetraRegistration.computeKeysHash()();
  v82 = v80;
  v83 = *(_DWORD *)&v78[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion];
  if (v83 >= 0xD)
    v83 = 13;
  *v79 = v83;
  v84 = *((_BYTE *)v79 + *(int *)(v129 + 36));
  v139 = v81;
  if ((v84 & 1) != 0)
  {
    v85 = 0;
    v86 = 0xF000000000000000;
  }
  else
  {
    v86 = v81;
    outlined copy of Data._Representation(v80, v81);
    v85 = v82;
  }
  v93 = v126;
  TetraRatchetState.sealMessage(message:authenticatedData:prekeyHash:)(v144, v141, v143, v142, v130, v131, v85, v86, v126);
  outlined consume of Data?(v85, v86);
  outlined consume of Data._Representation(v82, v139);
  v115 = TetraRatchetOuterMessage.serializedData(signedBy:)(v140);
  v140 = v116;
  outlined destroy of TetraRatchetOuterMessage(v93, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  v117 = v124;
  outlined init with copy of TetraRatchetOuterMessage((uint64_t)v132, v124, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  *(_BYTE *)(v117 + *(int *)(v70 + 20)) = 0;
  *(_QWORD *)(v117 + *(int *)(v70 + 24)) = v76;
  specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v145, v117);
  v118 = v141;
  outlined destroy of TetraRatchetOuterMessage(v117, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
  static os_log_type_t.debug.getter();
  result = (Class)MessageProtectionLog();
  if (result)
  {
    v119 = result;
    os_log(_:dso:log:_:_:)();

    v120 = (id)conversationLock;
    OS_dispatch_semaphore.signal()();

    v121 = (unint64_t)v140;
    v109 = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v144, v118);
    outlined consume of Data?(v143, v142);
    outlined consume of Data._Representation(v115, v121);

    outlined destroy of TetraRatchetOuterMessage((uint64_t)v132, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    goto LABEL_40;
  }
LABEL_46:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraAKE and conformance TetraAKE()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraAKE and conformance TetraAKE;
  if (!lazy protocol witness table cache variable for type TetraAKE and conformance TetraAKE)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraAKE, &type metadata for TetraAKE);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraAKE and conformance TetraAKE);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraAKE and conformance TetraAKE;
  if (!lazy protocol witness table cache variable for type TetraAKE and conformance TetraAKE)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraAKE, &type metadata for TetraAKE);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraAKE and conformance TetraAKE);
  }
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v21 < v2)
    goto LABEL_31;
LABEL_4:
  v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v9 = *v3;
    goto LABEL_15;
  }
  if (*v3 >> 62)
    goto LABEL_34;
  v7 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 - v6;
  if (__OFADD__(v7, v5))
    goto LABEL_36;
LABEL_8:
  v9 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v9;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v7 = 1;
  }
  if (v9 >> 62)
    goto LABEL_37;
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v8)
    v12 = v8;
  swift_bridgeObjectRetain();
  *v3 = MEMORY[0x20BD3B79C](v7, v12, 1, v9);
  swift_bridgeObjectRelease();
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = v11 + 32;
  v14 = (char *)(v11 + 32 + 8 * v4);
  type metadata accessor for ReceivingKeyTetraRatchet(0);
  swift_arrayDestroy();
  if (!v5)
    return specialized Array._endMutation()();
  if (!(*v3 >> 62))
  {
    v15 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v16 = v22 - v2;
  if (__OFSUB__(v22, v2))
    goto LABEL_40;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v13 + 8 * v2);
    if (v4 != v2 || v14 >= &v17[8 * v16])
      memmove(v14, v17, 8 * v16);
    if (!(*v3 >> 62))
    {
      v18 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      v19 = v18 + v5;
      if (!__OFADD__(v18, v5))
      {
LABEL_27:
        *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v19;
        return specialized Array._endMutation()();
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v19 = v23 + v5;
    if (!__OFADD__(v23, v5))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v16;

  v16 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_17;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v4 = (id)MEMORY[0x20BD3B790](v3, a1);
LABEL_9:
        v5 = v4;
        v6 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_16;
        v7 = objc_msgSend(v4, sel_tetraRegistration);
        if (!v7)
          goto LABEL_4;
        v8 = v7;
        TetraRegistration.computeKeysHash()();
        v10 = v9;
        v12 = v11;
        specialized static Data.== infix(_:_:)(v9, v11);
        v14 = v13;
        outlined consume of Data._Representation(v10, v12);

        if ((v14 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
LABEL_4:

        }
        ++v3;
        if (v6 == v2)
          return v16;
      }
      if (v3 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_16:
      __break(1u);
LABEL_17:
      v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x24BEE4AF8];
}

unint64_t lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraGeneralError and conformance TetraGeneralError;
  if (!lazy protocol witness table cache variable for type TetraGeneralError and conformance TetraGeneralError)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraGeneralError, &type metadata for TetraGeneralError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraGeneralError and conformance TetraGeneralError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraGeneralError and conformance TetraGeneralError;
  if (!lazy protocol witness table cache variable for type TetraGeneralError and conformance TetraGeneralError)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraGeneralError, &type metadata for TetraGeneralError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraGeneralError and conformance TetraGeneralError);
  }
  return result;
}

uint64_t outlined destroy of TetraSessionStates?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined assign with take of P256.KeyAgreement.PublicKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TetraRatchetOuterMessage(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined assign with copy of TetraSessionState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraSessionState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in TetraSessionStates.makeDefault(_:)(_DWORD *a1)
{
  uint64_t v1;

  return closure #1 in TetraSessionStates.makeDefault(_:)(a1, *(int **)(v1 + 16)) & 1;
}

uint64_t outlined init with take of TetraRatchetState(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of TetraRatchetOuterMessage(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for TetraAPI()
{
  return objc_opt_self();
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t type metadata accessor for OS_os_log(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

NSObject *specialized static TetraAPI.open(message:authenticatedData:guid:sendingURI:sendingPushToken:receivingURI:receivingPushToken:signedBy:tetraVersion:ourPrekeys:ourSigningPublicKeyCompactRepresentation:decryptionBlock:)(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, void *a9, uint64_t a10, unint64_t a11, void *a12, void *a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  NSObject *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  Class isa;
  os_log_type_t v72;
  uint64_t v73;
  objc_class *v74;
  NSObject *v75;
  _BOOL4 v76;
  uint8_t *v77;
  void *v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  NSObject *result;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  id v87;
  NSObject *v88;
  uint64_t v89;
  _BYTE *v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  NSObject *v96;
  id v97;
  id v98;
  void *v99;
  id v100;
  NSObject *v101;
  id v102;
  id v103;
  void *v104;
  id v105;
  id v106;
  os_log_type_t v107;
  NSObject *v108;
  id v109;
  unint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  NSObject *v118;
  id v119;
  id v120;
  void *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t, uint64_t, uint64_t);
  int v127;
  uint64_t v128;
  unint64_t v129;
  void *v130;
  _BYTE *v131;
  uint64_t v132;
  int *v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  void *v137;
  unint64_t v138;
  int *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  NSObject *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v166;
  uint64_t v167;
  int *v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  void *v178;
  id v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  NSObject *v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  NSObject *v197;
  unint64_t v198;
  Class v199;
  Class v200;
  void *v201;
  uint64_t (*v202)();
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  int *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned __int8 v214;
  uint64_t v215;
  char *v216;
  void (*v217)(void);
  int *v218;
  int *v219;
  _QWORD *v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  void (*v224)(void);
  uint64_t v225;
  char *v226;
  uint64_t v227;
  int v228;
  NSObject *v229;
  int *v230;
  int *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  _DWORD *v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  unsigned int (*v241)(uint64_t, uint64_t, uint64_t);
  int *v242;
  unint64_t v243;
  _OWORD *v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  int64_t v248;
  unint64_t v249;
  void *v250;
  uint64_t v251;
  int64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  BOOL v258;
  NSObject *v259;
  id v260;
  os_log_type_t v261;
  NSObject *v262;
  unint64_t v263;
  uint8_t *v264;
  void *v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  NSObject *v273;
  NSObject *v274;
  uint64_t v275;
  unint64_t v276;
  Class v277;
  Class v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  char v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  int *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int *v294;
  uint64_t v295;
  char *v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  char *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  char *v307;
  uint64_t v308;
  NSObject *v309;
  char *v310;
  uint64_t v311;
  NSObject *v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  int *v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  id v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  unint64_t v324;
  _DWORD *v325;
  uint64_t v326;
  NSObject *v327;
  id aBlock;
  uint64_t v329;
  uint64_t (*v330)(uint64_t, uint64_t);
  void *v331;
  uint64_t (*v332)();
  uint64_t v333;
  char v334;
  uint64_t v335;
  uint64_t v336;

  v318 = a6;
  v317 = a5;
  v323 = a3;
  v324 = a4;
  v321 = a1;
  v322 = a2;
  v20 = type metadata accessor for TetraRatchetState(0);
  MEMORY[0x24BDAC7A8](v20);
  v292 = (uint64_t)&v284 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v293 = type metadata accessor for P256.Signing.PublicKey();
  v291 = *(_QWORD *)(v293 - 8);
  MEMORY[0x24BDAC7A8](v293);
  v297 = (char *)&v284 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v290 = type metadata accessor for TetraSessionState();
  v286 = *(_QWORD *)(v290 - 8);
  v23 = MEMORY[0x24BDAC7A8](v290);
  v287 = (int *)((char *)&v284 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v23);
  v294 = (int *)((char *)&v284 - v25);
  v306 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v303 = *(_QWORD *)(v306 - 8);
  MEMORY[0x24BDAC7A8](v306);
  v299 = v26;
  v300 = (char *)&v284 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v302 = (char *)&v284 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v296 = (char *)&v284 - v30;
  v314 = type metadata accessor for TetraSessionStates();
  v313 = *(_QWORD *)(v314 - 8);
  v31 = MEMORY[0x24BDAC7A8](v314);
  v301 = (char *)&v284 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v295 = (uint64_t)&v284 - v34;
  MEMORY[0x24BDAC7A8](v33);
  v315 = (char *)&v284 - v35;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraSessionStates?);
  v37 = MEMORY[0x24BDAC7A8](v36);
  v288 = (char *)&v284 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x24BDAC7A8](v37);
  v289 = (uint64_t)&v284 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v307 = (char *)&v284 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v312 = ((char *)&v284 - v44);
  MEMORY[0x24BDAC7A8](v43);
  v325 = (_DWORD *)((char *)&v284 - v45);
  v316 = (int *)type metadata accessor for TetraRatchetOuterMessage();
  v46 = MEMORY[0x24BDAC7A8](v316);
  v308 = (uint64_t)&v284 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = MEMORY[0x24BDAC7A8](v46);
  v305 = (uint64_t)&v284 - v49;
  v50 = MEMORY[0x24BDAC7A8](v48);
  v304 = (uint64_t)&v284 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v311 = (uint64_t)&v284 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v310 = (char *)&v284 - v55;
  MEMORY[0x24BDAC7A8](v54);
  v326 = (uint64_t)&v284 - v56;
  v320 = a13;
  v57 = objc_msgSend(a13, sel_compactRepresentation);
  v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v60 = v59;

  v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v63 = v62;
  specialized static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(a7, a8, a9, v58, v60, a10, a11, a12, v61, v62);
  v65 = v64;
  v67 = v66;
  outlined consume of Data._Representation(v61, v63);
  outlined consume of Data._Representation(v58, v60);
  v68 = ((uint64_t (*)(_QWORD))v65)(0);
  v70 = v69;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v68, v70);
  v72 = static os_log_type_t.info.getter();
  v73 = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for OS_os_log);
  v74 = isa;
  v75 = static OS_os_log.default.getter();
  v76 = os_log_type_enabled(v75, v72);
  v319 = v67;
  v327 = v74;
  v309 = v65;
  v298 = v73;
  if (v76)
  {
    v77 = (uint8_t *)swift_slowAlloc();
    v78 = (void *)swift_slowAlloc();
    aBlock = v78;
    *(_DWORD *)v77 = 136315138;
    v79 = -[objc_class base64EncodedStringWithOptions:](v74, sel_base64EncodedStringWithOptions_, 0);
    v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v82 = v81;

    v335 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v82, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20BABB000, v75, v72, "Decrypting for conversationID: %s", v77, 0xCu);
    swift_arrayDestroy();
    v67 = v319;
    MEMORY[0x20BD3C498](v78, -1, -1);
    MEMORY[0x20BD3C498](v77, -1, -1);
  }
  else
  {

  }
  static os_log_type_t.debug.getter();
  result = MessageProtectionLog();
  v84 = (uint64_t)v325;
  v85 = v326;
  if (!result)
    goto LABEL_84;
  v86 = result;
  os_log(_:dso:log:_:_:)();

  if (one-time initialization token for conversationLock != -1)
    swift_once();
  v87 = (id)conversationLock;
  OS_dispatch_semaphore.wait()();

  static os_log_type_t.debug.getter();
  result = MessageProtectionLog();
  if (!result)
    goto LABEL_85;
  v88 = result;
  v89 = a18;
  os_log(_:dso:log:_:_:)();

  v90 = (_BYTE *)v321;
  v91 = v322;
  outlined copy of Data._Representation(v321, v322);
  v93 = v323;
  v92 = v324;
  outlined copy of Data._Representation(v323, v324);
  v94 = v320;
  TetraRatchetOuterMessage.init(serializedData:authenticatedData:signedBy:)(v90, v91, v93, v92, v94, v85);
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v95 = v84;
  TetraDBManager.getSessionForNGMIdentity(conversationID:)(v327, v84);
  v122 = a14;
  v123 = a17;
  v124 = v84;
  v125 = (uint64_t)v312;
  outlined init with copy of TetraSessionStates?(v124, (uint64_t)v312, &demangling cache variable for type metadata for TetraSessionStates?);
  v126 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v313 + 48);
  v127 = v126(v125, 1, v314);
  if (v127 == 1)
  {
    outlined destroy of TetraSessionStates?(v125, &demangling cache variable for type metadata for TetraSessionStates?);
    goto LABEL_24;
  }
  LODWORD(v324) = a14;
  v323 = a17;
  outlined init with take of TetraRatchetState(v125, (uint64_t)v315, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
  LOBYTE(v335) = 0;
  v133 = v316;
  v134 = *(_QWORD *)(v85 + v316[9] + 8);
  v135 = v310;
  outlined init with copy of TetraRatchetOuterMessage(v85, (uint64_t)v310, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  if (v134 >> 60 == 15)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v135, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    v136 = v67;
LABEL_31:
    v146 = v311;
    outlined init with copy of TetraRatchetOuterMessage(v85, v311, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraRatchetOuterMessage(v146, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
LABEL_32:
    v285 = v89;
    v147 = (uint64_t *)(v85 + v316[10]);
    v148 = v85;
    v149 = *v147;
    v150 = v147[1];
    outlined copy of Data?(*v147, v150);
    v155 = TetraSessionStates.openMessage(_:prekeysHash:sessionDST:theirTetraVersion:didRatchet:)(v148, v149, v150, v309, v136, v324, &v335);
    v157 = v156;
    v159 = v158;
    v324 = v160;
    outlined consume of Data?(v149, v150);
    v161 = (id)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    if (v159 >> 60 != 15)
    {
      v162 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v164 = v163;
      outlined copy of Data._Representation(v157, v159);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      aBlock = v161;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v157, v159, v162, v164, isUniquelyReferenced_nonNull_native);
      v161 = aBlock;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v166 = v326;
    specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v327, (uint64_t)v315);
    static os_log_type_t.debug.getter();
    result = MessageProtectionLog();
    if (!result)
      goto LABEL_90;
    v188 = result;
    os_log(_:dso:log:_:_:)();

    v189 = (id)conversationLock;
    OS_dispatch_semaphore.signal()();

    v322 = specialized _dictionaryUpCast<A, B, C, D>(_:)((uint64_t)v161);
    swift_bridgeObjectRelease();
    v190 = v166 + v316[7];
    v321 = *(unsigned int *)(v166 + 24);
    v191 = v303;
    v192 = v300;
    v193 = v306;
    (*(void (**)(char *, uint64_t, uint64_t))(v303 + 16))(v300, v190, v306);
    v194 = (*(unsigned __int8 *)(v191 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80);
    v195 = (v299 + v194 + 7) & 0xFFFFFFFFFFFFFFF8;
    v196 = swift_allocObject();
    v197 = v327;
    *(_QWORD *)(v196 + 16) = v323;
    *(_QWORD *)(v196 + 24) = v197;
    (*(void (**)(unint64_t, char *, uint64_t))(v191 + 32))(v196 + v194, v192, v193);
    *(_QWORD *)(v196 + v195) = v321;
    v327 = v197;
    v198 = v324;
    v199 = Data._bridgeToObjectiveC()().super.isa;
    v200 = Dictionary._bridgeToObjectiveC()().super.isa;
    v332 = partial apply for closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:);
    v333 = v196;
    aBlock = (id)MEMORY[0x24BDAC760];
    v329 = 1107296256;
    v330 = thunk for @escaping @callee_guaranteed (@unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
    v331 = &block_descriptor_16;
    v201 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    (*(void (**)(uint64_t, Class, Class, _QWORD, void *))(v285 + 16))(v285, v199, v200, 0, v201);
    _Block_release(v201);
    swift_bridgeObjectRelease();
    swift_release();

    outlined consume of Data._Representation((uint64_t)v155, v198);
    outlined consume of Data?(v157, v159);

    v202 = type metadata accessor for TetraSessionStates;
    v203 = &v336;
LABEL_53:
    outlined destroy of TetraRatchetOuterMessage(*(v203 - 32), (uint64_t (*)(_QWORD))v202);
    outlined destroy of TetraRatchetOuterMessage(v326, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraSessionStates?((uint64_t)v325, &demangling cache variable for type metadata for TetraSessionStates?);
    return swift_release();
  }
  v143 = (uint64_t *)&v135[v133[10]];
  v144 = *v143;
  v145 = v143[1];
  outlined copy of Data?(*v143, v145);
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v135, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  v136 = v67;
  if (v145 >> 60 == 15)
    goto LABEL_31;
  v321 = (unint64_t)v126;
  outlined consume of Data?(v144, v145);
  v167 = v311;
  outlined init with copy of TetraRatchetOuterMessage(v85, v311, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  v168 = v316;
  v169 = *(_QWORD *)(v167 + v316[9] + 8);
  v170 = v304;
  outlined init with copy of TetraRatchetOuterMessage(v167, v304, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  if (v169 >> 60 == 15)
  {
    outlined destroy of TetraRatchetOuterMessage(v170, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
LABEL_49:
    v186 = v311;
    v187 = v305;
    outlined init with copy of TetraRatchetOuterMessage(v311, v305, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraRatchetOuterMessage(v187, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraRatchetOuterMessage(v186, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v321;
    goto LABEL_50;
  }
  v183 = (uint64_t *)(v170 + v168[10]);
  v184 = *v183;
  v185 = v183[1];
  outlined copy of Data?(*v183, v185);
  outlined destroy of TetraRatchetOuterMessage(v170, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  if (v185 >> 60 == 15)
    goto LABEL_49;
  v285 = a18;
  outlined consume of Data?(v184, v185);
  v204 = v305;
  outlined init with copy of TetraRatchetOuterMessage(v311, v305, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  v205 = v295;
  outlined init with copy of TetraRatchetOuterMessage((uint64_t)v315, v295, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
  v206 = v316;
  v207 = v303;
  v208 = (uint64_t)v296;
  v209 = v306;
  (*(void (**)(char *, uint64_t, uint64_t))(v303 + 16))(v296, v204 + v316[7], v306);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v207 + 56))(v208, 0, 1, v209);
  v210 = v204 + v206[10];
  v211 = *(_QWORD *)(v210 + 8);
  v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v321;
  if (v211 >> 60 == 15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v212 = *(_QWORD *)v210;
  outlined copy of Data._Representation(*(_QWORD *)v210, *(_QWORD *)(v210 + 8));
  v213 = v205;
  v214 = TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:)(v208, v212, v211);
  outlined consume of Data?(v212, v211);
  outlined destroy of TetraSessionStates?(v208, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  outlined destroy of TetraRatchetOuterMessage(v213, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
  outlined destroy of TetraRatchetOuterMessage(v305, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  outlined destroy of TetraRatchetOuterMessage(v311, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  v89 = v285;
  v85 = v326;
  if ((v214 & 1) != 0)
    goto LABEL_32;
LABEL_50:
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v315, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
  v123 = v323;
  v122 = v324;
LABEL_24:
  v128 = v85 + v316[10];
  v129 = *(_QWORD *)(v128 + 8);
  if (v129 >> 60 == 15)
  {
    lazy protocol witness table accessor for type TetraAKE and conformance TetraAKE();
    v130 = (void *)swift_allocError();
    *v131 = 0;
    swift_willThrow();
    outlined destroy of TetraRatchetOuterMessage(v85, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    v132 = v95;
LABEL_35:
    outlined destroy of TetraSessionStates?(v132, &demangling cache variable for type metadata for TetraSessionStates?);
LABEL_11:
    v96 = v327;
    aBlock = v130;
    v97 = v130;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast() && v335 == 3)
    {
      v98 = objc_allocWithZone(MEMORY[0x24BDD1540]);
      v99 = (void *)MEMORY[0x20BD3B538](0xD00000000000001BLL, 0x800000020BB47400);
      v100 = objc_msgSend(v98, sel_initWithDomain_code_userInfo_, v99, 5, 0);

      static os_log_type_t.debug.getter();
      result = MessageProtectionLog();
      if (result)
      {
        v101 = result;
        os_log(_:dso:log:_:_:)();

        v102 = (id)conversationLock;
        OS_dispatch_semaphore.signal()();

        v103 = v100;
        v104 = (void *)_convertErrorToNSError(_:)();
        (*(void (**)(uint64_t, _QWORD, _QWORD, void *, _QWORD))(v89 + 16))(v89, 0, 0, v104, 0);

        v105 = aBlock;
LABEL_20:

        return swift_release();
      }
      goto LABEL_88;
    }

    v106 = v130;
    v107 = static os_log_type_t.error.getter();
    result = MessageProtectionLog();
    if (result)
    {
      v108 = result;
      if (os_log_type_enabled(result, v107))
      {
        v109 = v130;
        v110 = v318;
        swift_bridgeObjectRetain();
        v111 = v130;
        swift_bridgeObjectRetain();
        v112 = swift_slowAlloc();
        v285 = v89;
        v113 = v112;
        v114 = (void *)swift_slowAlloc();
        aBlock = v114;
        *(_DWORD *)v113 = 136315394;
        swift_bridgeObjectRetain();
        v335 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v317, v110, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v113 + 12) = 2080;
        swift_getErrorValue();
        v115 = Error.localizedDescription.getter();
        v335 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_20BABB000, v108, v107, "Tetra failed decrypting %s with error: %s", (uint8_t *)v113, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x20BD3C498](v114, -1, -1);
        v117 = v113;
        v89 = v285;
        MEMORY[0x20BD3C498](v117, -1, -1);
      }

      static os_log_type_t.debug.getter();
      result = MessageProtectionLog();
      if (result)
      {
        v118 = result;
        os_log(_:dso:log:_:_:)();

        v119 = (id)conversationLock;
        OS_dispatch_semaphore.signal()();

        v120 = v130;
        v121 = (void *)_convertErrorToNSError(_:)();
        (*(void (**)(uint64_t, _QWORD, _QWORD, void *, _QWORD))(v89 + 16))(v89, 0, 0, v121, 0);

        v105 = v130;
        goto LABEL_20;
      }
      goto LABEL_87;
    }
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  LODWORD(v324) = v122;
  v321 = (unint64_t)v126;
  v322 = v129;
  v137 = *(void **)v128;
  v138 = *(_QWORD *)(v85 + v316[9] + 8);
  v139 = v316;
  v140 = v85;
  v141 = v308;
  outlined init with copy of TetraRatchetOuterMessage(v140, v308, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  if (v138 >> 60 == 15)
  {
    v142 = v322;
    outlined copy of Data._Representation((uint64_t)v137, v322);
    outlined destroy of TetraRatchetOuterMessage(v141, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
LABEL_34:
    lazy protocol witness table accessor for type TetraAKE and conformance TetraAKE();
    v130 = (void *)swift_allocError();
    *v154 = 1;
    swift_willThrow();
    outlined consume of Data?((uint64_t)v137, v142);
    outlined destroy of TetraRatchetOuterMessage(v326, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    v132 = (uint64_t)v325;
    goto LABEL_35;
  }
  v323 = v123;
  v151 = (uint64_t *)(v141 + v139[10]);
  v152 = *v151;
  v153 = v151[1];
  v142 = v322;
  outlined copy of Data?((uint64_t)v137, v322);
  outlined copy of Data?(v152, v153);
  outlined destroy of TetraRatchetOuterMessage(v141, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  if (v153 >> 60 == 15)
    goto LABEL_34;
  v285 = v89;
  outlined consume of Data?(v152, v153);
  outlined copy of Data?((uint64_t)v137, v142);
  v171 = swift_bridgeObjectRetain();
  v172 = specialized _ArrayProtocol.filter(_:)(v171);
  v320 = v137;
  outlined consume of Data?((uint64_t)v137, v142);
  result = swift_bridgeObjectRelease();
  v173 = (uint64_t)v325;
  if (!(v172 >> 62))
  {
    v174 = *(_QWORD *)((v172 & 0xFFFFFFFFFFFFF8) + 0x10);
    v175 = v306;
    v176 = (uint64_t)v302;
    if (v174)
    {
      if (v174 == 1)
        goto LABEL_44;
      goto LABEL_79;
    }
LABEL_80:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
    v130 = (void *)swift_allocError();
    v283 = 4;
    goto LABEL_81;
  }
  swift_bridgeObjectRetain();
  v280 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v175 = v306;
  v176 = (uint64_t)v302;
  if (!v280)
    goto LABEL_80;
  swift_bridgeObjectRetain();
  v281 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (v281 != 1)
  {
LABEL_79:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
    v130 = (void *)swift_allocError();
    v283 = 5;
LABEL_81:
    *v282 = v283;
    swift_willThrow();
    outlined consume of Data?((uint64_t)v320, v322);
    outlined destroy of TetraRatchetOuterMessage(v326, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    outlined destroy of TetraSessionStates?(v173, &demangling cache variable for type metadata for TetraSessionStates?);
    v89 = v285;
    goto LABEL_11;
  }
LABEL_44:
  if ((v172 & 0xC000000000000001) != 0)
  {
    v177 = (id)MEMORY[0x20BD3B790](0, v172);
    goto LABEL_47;
  }
  if (!*(_QWORD *)((v172 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  v177 = *(id *)(v172 + 32);
LABEL_47:
  v178 = v177;
  swift_bridgeObjectRelease();
  v179 = objc_msgSend(v94, sel_compactRepresentation);
  v180 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v182 = v181;

  aBlock = v180;
  v329 = v182;
  P256.Signing.PublicKey.init<A>(compactRepresentation:)();
  v215 = v303;
  v216 = *(char **)(v303 + 16);
  v308 = v326 + v316[7];
  v310 = v216;
  ((void (*)(uint64_t))v216)(v176);
  v217 = *(void (**)(void))(v215 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v217)(v176, 0, 1, v175);
  v218 = (int *)v290;
  v219 = v294;
  v316 = (int *)((char *)v294 + *(int *)(v290 + 28));
  v217();
  v220 = (_QWORD *)((char *)v219 + v218[8]);
  v221 = (uint64_t)v320;
  v222 = v322;
  *v220 = v320;
  v220[1] = v222;
  v223 = v291;
  v224 = *(void (**)(void))(v291 + 16);
  v312 = ((char *)v219 + v218[6]);
  v225 = v293;
  v224();
  v311 = v218[9];
  *((_BYTE *)v219 + v311) = 1;
  outlined copy of Data?(v221, v222);
  v226 = v178;
  v227 = v292;
  v315 = v226;
  TetraRatchetState.init(asReceiverWithFullPrekey:)(v226, v292);
  (*(void (**)(char *, uint64_t))(v223 + 8))(v297, v225);
  outlined init with take of TetraRatchetState(v227, (uint64_t)v219 + v218[5], type metadata accessor for TetraRatchetState);
  if (v324 >= 0xD)
    v228 = 13;
  else
    v228 = v324;
  *v219 = v228;
  outlined assign with take of P256.KeyAgreement.PublicKey?(v176, (uint64_t)v316);
  v334 = 0;
  *v219 = v228;
  *((_BYTE *)v219 + v311) = 1;
  v229 = TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(v326, v309, v319, &v334);
  v231 = v230;
  v233 = v232;
  v235 = v234;
  v236 = (uint64_t)v219;
  v312 = v229;
  v237 = v325;
  v238 = v289;
  outlined init with copy of TetraSessionStates?((uint64_t)v325, v289, &demangling cache variable for type metadata for TetraSessionStates?);
  v239 = v314;
  v240 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v321)(v238, 1, v314);
  outlined destroy of TetraSessionStates?(v238, &demangling cache variable for type metadata for TetraSessionStates?);
  v324 = v233;
  v316 = v231;
  if (v240 == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v237, &demangling cache variable for type metadata for TetraSessionStates?);
    outlined init with copy of TetraRatchetOuterMessage(v236, (uint64_t)v237, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    *((_BYTE *)v237 + *(int *)(v239 + 20)) = 0;
    *(_QWORD *)((char *)v237 + *(int *)(v239 + 24)) = MEMORY[0x24BEE4AF8];
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v313 + 56))(v237, 0, 1, v239);
    v241 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v321;
  }
  else
  {
    v242 = v287;
    outlined init with copy of TetraRatchetOuterMessage(v236, (uint64_t)v287, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    result = ((uint64_t (*)(_DWORD *, uint64_t, uint64_t))v321)(v237, 1, v239);
    if ((_DWORD)result == 1)
    {
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
    if ((specialized static TetraSessionState.== infix(_:_:)(v237, v242) & 1) != 0)
    {
      outlined assign with copy of TetraSessionState((uint64_t)v242, (uint64_t)v237);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
      v243 = (*(unsigned __int8 *)(v286 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v286 + 80);
      v244 = (_OWORD *)swift_allocObject();
      v244[1] = xmmword_20BB404E0;
      outlined init with copy of TetraRatchetOuterMessage((uint64_t)v237, (uint64_t)v244 + v243, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      v245 = (uint64_t *)((char *)v237 + *(int *)(v314 + 24));
      v246 = *v245;
      aBlock = v244;
      specialized Array.append<A>(contentsOf:)(v246);
      *v245 = (uint64_t)aBlock;
      v247 = outlined assign with copy of TetraSessionState((uint64_t)v242, (uint64_t)v237);
      MEMORY[0x24BDAC7A8](v247);
      result = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(unint64_t))closure #1 in TetraSessionStates.makeDefault(_:)partial apply);
      v248 = *(_QWORD *)(*v245 + 16);
      if (v248 < (uint64_t)result)
      {
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
      specialized Array.replaceSubrange<A>(_:with:)((uint64_t)result, v248);
      v237 = v325;
      v242 = v287;
    }
    TetraSessionStates.cleanupPreviousSessionStates()();
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v242, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    v241 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v321;
  }
  v249 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v250 = (void *)v249;
  v251 = (uint64_t)v288;
  if (v235 >> 60 == 15)
  {
    v252 = v249;
  }
  else
  {
    v253 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v255 = v254;
    v256 = v324;
    outlined copy of Data._Representation(v324, v235);
    v257 = swift_isUniquelyReferenced_nonNull_native();
    aBlock = v250;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v256, v235, v253, v255, v257);
    v252 = (int64_t)aBlock;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  outlined init with copy of TetraSessionStates?((uint64_t)v237, v251, &demangling cache variable for type metadata for TetraSessionStates?);
  v258 = v241(v251, 1, v314) == 1;
  result = v327;
  if (v258)
    goto LABEL_92;
  specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(v327, v251);
  v321 = v235;
  outlined destroy of TetraRatchetOuterMessage(v251, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
  static os_log_type_t.debug.getter();
  result = MessageProtectionLog();
  if (!result)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  v259 = result;
  os_log(_:dso:log:_:_:)();

  v260 = (id)conversationLock;
  OS_dispatch_semaphore.signal()();

  v261 = static os_log_type_t.info.getter();
  result = MessageProtectionLog();
  if (result)
  {
    v262 = result;
    if (os_log_type_enabled(result, v261))
    {
      v263 = v318;
      swift_bridgeObjectRetain_n();
      v264 = (uint8_t *)swift_slowAlloc();
      v265 = (void *)swift_slowAlloc();
      aBlock = v265;
      *(_DWORD *)v264 = 136315138;
      swift_bridgeObjectRetain();
      v335 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v317, v263, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_20BABB000, v262, v261, "Successfully decrypted %s", v264, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x20BD3C498](v265, -1, -1);
      MEMORY[0x20BD3C498](v264, -1, -1);
    }

    specialized _dictionaryUpCast<A, B, C, D>(_:)(v252);
    swift_bridgeObjectRelease();
    v266 = *(unsigned int *)(v326 + 24);
    v267 = v300;
    v268 = v306;
    ((void (*)(char *, uint64_t, uint64_t))v310)(v300, v308, v306);
    v269 = v303;
    v270 = (*(unsigned __int8 *)(v303 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v303 + 80);
    v271 = (v299 + v270 + 7) & 0xFFFFFFFFFFFFFFF8;
    v272 = swift_allocObject();
    v273 = v327;
    *(_QWORD *)(v272 + 16) = v323;
    *(_QWORD *)(v272 + 24) = v273;
    (*(void (**)(unint64_t, char *, uint64_t))(v269 + 32))(v272 + v270, v267, v268);
    *(_QWORD *)(v272 + v271) = v266;
    v274 = v273;
    v275 = (uint64_t)v312;
    v276 = (unint64_t)v316;
    v277 = Data._bridgeToObjectiveC()().super.isa;
    v278 = Dictionary._bridgeToObjectiveC()().super.isa;
    v332 = partial apply for closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:);
    v333 = v272;
    aBlock = (id)MEMORY[0x24BDAC760];
    v329 = 1107296256;
    v330 = thunk for @escaping @callee_guaranteed (@unowned AutoreleasingUnsafeMutablePointer<NSError?>?) -> (@unowned Bool);
    v331 = &block_descriptor;
    v279 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    (*(void (**)(uint64_t, Class, Class, _QWORD, void *))(v285 + 16))(v285, v277, v278, 0, v279);
    _Block_release(v279);
    swift_bridgeObjectRelease();
    swift_release();

    outlined consume of Data._Representation(v275, v276);
    outlined consume of Data?(v324, v321);

    outlined consume of Data?((uint64_t)v320, v322);
    v202 = type metadata accessor for TetraSessionState;
    v203 = &v326;
    goto LABEL_53;
  }
LABEL_95:
  __break(1u);
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

NSObject *partial apply for closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for P256.KeyAgreement.PublicKey() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return closure #1 in static TetraAPI.commitStateAfterSuccessfulDecryptionOfMessage(conversationID:ephemeralECDHPublicKey:messageIndex:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t outlined assign with take of TetraSessionState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraSessionState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TetraCommitmentError and conformance TetraCommitmentError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraCommitmentError and conformance TetraCommitmentError;
  if (!lazy protocol witness table cache variable for type TetraCommitmentError and conformance TetraCommitmentError)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraCommitmentError, &type metadata for TetraCommitmentError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraCommitmentError and conformance TetraCommitmentError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraCommitmentError and conformance TetraCommitmentError;
  if (!lazy protocol witness table cache variable for type TetraCommitmentError and conformance TetraCommitmentError)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraCommitmentError, &type metadata for TetraCommitmentError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraCommitmentError and conformance TetraCommitmentError);
  }
  return result;
}

uint64_t outlined init with copy of TetraSessionStates?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_20BAE2FB8()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(char a1)
{
  uint64_t v1;

  return closure #1 in static TetraAPI.conversationInfo(sendingURI:sendingPushToken:senderPublicKeyCompactRepresentation:receivingURI:receivingPushToken:receivingPublicKeyCompactRepresentation:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t closure #1 in TetraSessionStates.makeDefault(_:)partial apply(_DWORD *a1)
{
  return partial apply for closure #1 in TetraSessionStates.makeDefault(_:)(a1) & 1;
}

id Kyber1024ObjC.__deallocating_deinit(uint64_t a1)
{
  return Kyber1024ObjC.__deallocating_deinit(a1, type metadata accessor for Kyber1024ObjC);
}

uint64_t type metadata accessor for Kyber1024ObjC()
{
  return objc_opt_self();
}

id Kyber1024ObjCPublicKey.init(publicKeyBytes:)(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  uint64_t v10;
  objc_class *v11;
  objc_super v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for Kyber1024.PublicKey();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1;
  v9 = a1;
  v14 = specialized Data.init<A>(_:)(v9);
  v15 = v10;
  Kyber1024.PublicKey.init<A>(dataRepresentation:)();
  if (v2)
  {

    type metadata accessor for Kyber1024ObjCPublicKey(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v8 + OBJC_IVAR____TtC17MessageProtection22Kyber1024ObjCPublicKey_pubKey, v7, v4);

    v11 = (objc_class *)type metadata accessor for Kyber1024ObjCPublicKey(0);
    v13.receiver = v8;
    v13.super_class = v11;
    v8 = objc_msgSendSuper2(&v13, sel_init);

  }
  return v8;
}

id Kyber1024ObjCPublicKey.__deallocating_deinit()
{
  return Kyber1024ObjC.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for Kyber1024ObjCPublicKey);
}

id Kyber1024ObjC.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t ObjC metadata update function for Kyber1024ObjCPublicKey()
{
  return type metadata accessor for Kyber1024ObjCPublicKey(0);
}

uint64_t type metadata accessor for Kyber1024ObjCPublicKey(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for Kyber1024ObjCPublicKey);
}

uint64_t type metadata completion function for Kyber1024ObjCPublicKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for Kyber1024ObjCPublicKey(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6C68]);
}

uint64_t Kyber1024ObjCPrivateKey.init(sepKeyBytes:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  objc_class *v14;
  id v15;
  objc_super v17;

  v5 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TetraKEM1024Key(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined copy of Data._Representation(a1, a2);
  SecureEnclave.Kyber1024.PrivateKey.init(dataRepresentation:)(a1, a2, (uint64_t)v8);
  if (!v2)
  {
    v12 = type metadata accessor for Kyber1024.PrivateKey();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
    v13 = (uint64_t)&v11[*(int *)(v9 + 20)];
    outlined init with take of TetraRatchetState((uint64_t)v8, v13, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
    v14 = (objc_class *)type metadata accessor for Kyber1024ObjCPrivateKey(0);
    v15 = objc_allocWithZone(v14);
    outlined init with copy of TetraKEM1024Key((uint64_t)v11, (uint64_t)v15 + OBJC_IVAR____TtC17MessageProtection23Kyber1024ObjCPrivateKey_privKey);
    v17.receiver = v15;
    v17.super_class = v14;
    v5 = (uint64_t)objc_msgSendSuper2(&v17, sel_init);
    outlined destroy of TetraKEM1024Key((uint64_t)v11);
  }
  outlined consume of Data._Representation(a1, a2);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t Kyber1024ObjCPrivateKey.init(apKeyBytes:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  objc_class *v14;
  id v15;
  objc_super v17;
  uint64_t v18;
  unint64_t v19;

  v5 = type metadata accessor for Kyber1024.PrivateKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TetraKEM1024Key(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1;
  v19 = a2;
  outlined copy of Data._Representation(a1, a2);
  Kyber1024.PrivateKey.init<A>(bytes:)();
  if (!v2)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v8, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v5);
    v12 = &v11[*(int *)(v9 + 20)];
    v13 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    v14 = (objc_class *)type metadata accessor for Kyber1024ObjCPrivateKey(0);
    v15 = objc_allocWithZone(v14);
    outlined init with copy of TetraKEM1024Key((uint64_t)v11, (uint64_t)v15 + OBJC_IVAR____TtC17MessageProtection23Kyber1024ObjCPrivateKey_privKey);
    v17.receiver = v15;
    v17.super_class = v14;
    v5 = (uint64_t)objc_msgSendSuper2(&v17, sel_init);
    outlined destroy of TetraKEM1024Key((uint64_t)v11);
  }
  outlined consume of Data._Representation(a1, a2);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v5;
}

uint64_t @objc Kyber1024ObjCPrivateKey.init(sepKeyBytes:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = a3;
  v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  return a5(v7, v9);
}

id Kyber1024ObjCPrivateKey.__deallocating_deinit()
{
  return Kyber1024ObjC.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for Kyber1024ObjCPrivateKey);
}

uint64_t ObjC metadata update function for Kyber1024ObjCPrivateKey()
{
  return type metadata accessor for Kyber1024ObjCPrivateKey(0);
}

uint64_t type metadata accessor for Kyber1024ObjCPrivateKey(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for Kyber1024ObjCPrivateKey);
}

uint64_t type metadata accessor for Kyber1024ObjCPublicKey(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for Kyber1024ObjCPrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for Kyber1024ObjCPublicKey(a1, a2, a3, type metadata accessor for TetraKEM1024Key);
}

uint64_t type metadata completion function for Kyber1024ObjCPublicKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t outlined init with copy of TetraKEM1024Key(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraKEM1024Key(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TetraKEM1024Key(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TetraKEM1024Key(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata completion function for StructWrapper()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TetraDBErrors(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TetraDBErrors()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TetraDBErrors()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TetraDBErrors()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void @objc StructWrapper.init()()
{
  specialized StructWrapper.init()();
}

id StructWrapper.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for StructWrapper(0, *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50), a3, a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t @objc StructWrapper.__ivar_destroyer(char *a1)
{
  return (*(uint64_t (**)(char *))(*(_QWORD *)(*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0x50)
                                                       - 8)
                                           + 8))(&a1[*(_QWORD *)((*MEMORY[0x24BEE4EA0] & *(_QWORD *)a1) + 0x58)]);
}

uint64_t type metadata accessor for StructWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StructWrapper);
}

id one-time initialization function for sharedInstance()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TetraDBManager()), sel_init);
  static TetraDBManager.sharedInstance = (uint64_t)result;
  return result;
}

char *TetraDBManager.().init()()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  char *v4;
  void *v5;
  char *v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v0[OBJC_IVAR____TtC17MessageProtection14TetraDBManager__persistentContainer] = 0;
  v1 = OBJC_IVAR____TtC17MessageProtection14TetraDBManager_cache;
  v2 = objc_allocWithZone(MEMORY[0x24BDBCE40]);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, sel_init);
  *(_QWORD *)&v3[OBJC_IVAR____TtC17MessageProtection14TetraDBManager____lazy_storage___persistentContainer] = 0;

  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for TetraDBManager();
  v4 = (char *)objc_msgSendSuper2(&v9, sel_init);
  v5 = *(void **)&v4[OBJC_IVAR____TtC17MessageProtection14TetraDBManager_cache];
  v6 = v4;
  objc_msgSend(v5, sel_setCountLimit_, 3);
  v7 = v5;
  objc_msgSend(v7, sel_setDelegate_, v6);

  return v6;
}

id TetraDBManager.persistentContainer.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC17MessageProtection14TetraDBManager____lazy_storage___persistentContainer;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC17MessageProtection14TetraDBManager____lazy_storage___persistentContainer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC17MessageProtection14TetraDBManager____lazy_storage___persistentContainer);
  }
  else
  {
    v4 = (void *)specialized closure #1 in TetraDBManager.persistentContainer.getter();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void closure #1 in closure #1 in TetraDBManager.persistentContainer.getter(int a1, id a2)
{
  id v2;
  id v3;
  Swift::String v4;
  id v5;

  if (!a2)
  {
    static os_log_type_t.info.getter();
    v2 = MessageProtectionLog();
    if (v2)
    {
      v5 = v2;
      os_log(_:dso:log:_:_:)();

      return;
    }
    __break(1u);
  }
  v3 = a2;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  swift_getErrorValue();
  v4._countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSPersistentStoreDescription, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, void *);
  id v6;
  id v7;

  v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, a3);
  swift_release();

}

void TetraDBManager.getSessionForNGMIdentity(conversationID:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  char *v16;
  Swift::Bool v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  os_log_type_t v42;
  NSObject *v43;
  NSObject *v44;
  uint8_t *v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD aBlock[6];
  id v60;

  v58 = a2;
  v5 = type metadata accessor for TetraSessionStates();
  v57 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v55 = (uint64_t)&v53 - v9;
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBB6A0]), sel_initWithConcurrencyType_, 1);
  v11 = TetraDBManager.persistentContainer.getter();
  v12 = objc_msgSend(v11, sel_persistentStoreCoordinator);

  objc_msgSend(v10, sel_setPersistentStoreCoordinator_, v12);
  objc_msgSend(v10, sel_setMergePolicy_, *MEMORY[0x24BDBB478]);
  objc_msgSend(v10, sel_setShouldPerformSecureOperation_, 1);
  v13 = *(void **)(v2 + OBJC_IVAR____TtC17MessageProtection14TetraDBManager_cache);
  v14 = objc_msgSend(v13, sel_objectForKey_, a1);
  if (v14)
  {
    v15 = v14;
    v16 = (char *)v14 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v14) + 0x58);
    swift_beginAccess();
    v17 = TetraSessionStates.hasSessionWithCompatibleVersion()();
    swift_endAccess();
    if (v17)
    {

      v18 = (uint64_t)v16;
      v19 = v58;
      outlined init with copy of TetraSessionStates(v18, v58);

      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v19, 0, 1, v5);
      return;
    }
    objc_msgSend(v13, sel_removeObjectForKey_, a1);

  }
  v56 = v5;
  v20 = objc_allocWithZone(MEMORY[0x24BDBB678]);
  v21 = (void *)MEMORY[0x20BD3B538](0xD000000000000016, 0x800000020BB47C00);
  v22 = objc_msgSend(v20, sel_initWithEntityName_, v21);

  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSPredicate);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_20BB404E0;
  v24 = objc_msgSend(a1, sel_base64EncodedStringWithOptions_, 0);
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = v26;

  *(_QWORD *)(v23 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v23 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v23 + 32) = v25;
  *(_QWORD *)(v23 + 40) = v27;
  v28 = (void *)NSPredicate.init(format:_:)();
  objc_msgSend(v22, sel_setPredicate_, v28);

  v29 = objc_msgSend(v22, sel_setFetchLimit_, 1);
  v60 = 0;
  MEMORY[0x24BDAC7A8](v29);
  *(&v53 - 4) = (uint64_t)v10;
  *(&v53 - 3) = (uint64_t)v22;
  *(&v53 - 2) = (uint64_t)&v60;
  NSManagedObjectContext.performAndWait<A>(_:)();
  if (v3)
  {

    return;
  }
  v30 = v60;
  if (!v60)
  {

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v58, 1, 1, v56);
    return;
  }
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  v31 = v30;
  v32 = PropertyListDecoder.init()();
  v54 = v31;
  v33 = objc_msgSend(v31, sel_serializedSession);
  v34 = v56;
  if (v33)
  {
    v35 = v33;
    v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v38 = v37;

    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraSessionStates and conformance TetraSessionStates, (uint64_t (*)(uint64_t))type metadata accessor for TetraSessionStates, (uint64_t)&protocol conformance descriptor for TetraSessionStates);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v36, v38);
    v39 = v55;
    outlined init with take of TetraSessionStates((uint64_t)v8, v55);
    if (TetraSessionStates.hasSessionWithCompatibleVersion()())
    {
      v40 = v54;

      swift_release();
      v41 = v58;
      outlined init with take of TetraSessionStates(v39, v58);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v57 + 56))(v41, 0, 1, v34);

      return;
    }
    v42 = static os_log_type_t.error.getter();
    v43 = MessageProtectionLog();
    if (!v43)
      goto LABEL_20;
    v44 = v43;
    v53 = v32;
    if (os_log_type_enabled(v43, v42))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v45 = 67109120;
      LODWORD(aBlock[0]) = 13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20BABB000, v44, v42, "Deleting session states due to not having a valid session version (expected: %u.", v45, 8u);
      MEMORY[0x20BD3C498](v45, -1, -1);
    }

    v46 = swift_allocObject();
    v47 = v54;
    *(_QWORD *)(v46 + 16) = v10;
    *(_QWORD *)(v46 + 24) = v47;
    v48 = swift_allocObject();
    *(_QWORD *)(v48 + 16) = partial apply for closure #3 in TetraDBManager.getSessionForNGMIdentity(conversationID:);
    *(_QWORD *)(v48 + 24) = v46;
    aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
    aBlock[5] = v48;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_17;
    v49 = _Block_copy(aBlock);
    v50 = v47;
    v51 = v10;
    swift_retain();
    swift_release();
    objc_msgSend(v51, sel_performBlockAndWait_, v49);
    swift_release();

    _Block_release(v49);
    outlined destroy of TetraSessionStates(v39);
    LOBYTE(v49) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v49 & 1) == 0)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v58, 1, 1, v56);
      v52 = v60;
      swift_release();

      return;
    }
    __break(1u);
  }
  __break(1u);
LABEL_20:
  __break(1u);
}

void closure #1 in TetraDBManager.getSessionForNGMIdentity(conversationID:)(uint64_t a1, uint64_t a2, void **a3)
{
  void *v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;

  type metadata accessor for TetraSessionSerialized();
  v5 = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {

    v6 = 2;
LABEL_6:
    lazy protocol witness table accessor for type TetraDBErrors and conformance TetraDBErrors();
    swift_allocError();
    *v11 = v6;
    swift_willThrow();
    return;
  }
  v7 = v5;
  v8 = v5 >> 62;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v10 = v9 == 1;
    if (v9 > 1)
      goto LABEL_5;
  }
  else
  {
    v9 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v10 = v9 == 1;
    if (v9 > 1)
    {
LABEL_5:
      swift_bridgeObjectRelease();
      v6 = 3;
      goto LABEL_6;
    }
  }
  if (!v10)
  {
    if (!v9)
    {
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_23;
  }
  if (v8)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v12)
  {
    if ((v7 & 0xC000000000000001) != 0)
    {
      v13 = (id)MEMORY[0x20BD3B790](0, v7);
      goto LABEL_19;
    }
    if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v13 = *(id *)(v7 + 32);
LABEL_19:
      v14 = v13;
      swift_bridgeObjectRelease();
      v15 = *a3;
      *a3 = v14;

      return;
    }
    __break(1u);
  }
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_23:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

NSObject *closure #2 in TetraDBManager.getSessionForNGMIdentity(conversationID:)(void *a1, void *a2, uint64_t a3)
{
  os_log_type_t v6;
  NSObject *result;
  NSObject *v8;
  os_log_type_t v9;
  id v10;
  id v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;

  v6 = static os_log_type_t.error.getter();
  result = MessageProtectionLog();
  if (result)
  {
    v8 = result;
    v9 = v6;
    if (os_log_type_enabled(result, v6))
    {
      v10 = a1;
      v11 = a1;
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v12 = 138412290;
      v14 = a1;
      v15 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v13 = v15;

      _os_log_impl(&dword_20BABB000, v8, v9, "Failed to decode the Tetra session: %@. Deleting the saved session state.", v12, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x20BD3C498](v13, -1, -1);
      MEMORY[0x20BD3C498](v12, -1, -1);
    }

    return objc_msgSend(a2, sel_deleteObject_, a3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id TetraDBManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraDBManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TetraDBManager()
{
  return objc_opt_self();
}

uint64_t specialized static TetraDBManager.isBATS()()
{
  id v0;
  id v1;
  uint64_t v2;
  char v3;
  unint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v0 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v1 = objc_msgSend(v0, sel_environment);

  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(_QWORD *)(v2 + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(1398030658, 0xE400000000000000), (v3 & 1) != 0)
    && *(_QWORD *)(v2 + 16)
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(4478800, 0xE300000000000000), (v5 & 1) != 0))
  {
    v6 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v4);
    v8 = *v6;
    v7 = v6[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (v8 == 0xD000000000000032 && v7 == 0x800000020BB47B90)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      return v10 & 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

id specialized static TetraDBManager.persistentStoreDescription()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  uint64_t v5;
  NSString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  char v19;
  Swift::String v20;
  Swift::Bool v21;
  NSString *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  id v32;
  NSURL *v33;
  void *v34;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v0 = type metadata accessor for URL();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB40570;
  v6 = NSHomeDirectory();
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  *(_QWORD *)(v5 + 48) = 0xD000000000000019;
  *(_QWORD *)(v5 + 56) = 0x800000020BB47B50;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v4, sel_pathWithComponents_, isa);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v15 = (void *)objc_opt_self();
  v16 = objc_msgSend(v15, sel_processInfo);
  v17 = objc_msgSend(v16, sel_environment);

  v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(_QWORD *)(v18 + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x800000020BB47B70), (v19 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    if ((specialized static TetraDBManager.isBATS()() & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x747365746378;
  v20._object = (void *)0xE600000000000000;
  v21 = String.hasSuffix(_:)(v20);
  swift_bridgeObjectRelease();
  if (v21 || (specialized static TetraDBManager.isBATS()() & 1) != 0)
  {
LABEL_5:
    swift_bridgeObjectRelease();
    v22 = NSTemporaryDirectory();
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v23;

  }
LABEL_6:
  v42 = 0x424461727465542FLL;
  v43 = 0xE90000000000002DLL;
  v24 = objc_msgSend(v15, sel_processInfo);
  v25 = objc_msgSend(v24, sel_processName);

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28 = v27;

  v29._countAndFlagsBits = v26;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 6448174;
  v30._object = (void *)0xE300000000000000;
  String.append(_:)(v30);
  v40 = v12;
  v41 = v14;
  swift_bridgeObjectRetain();
  v40 = String.init<A>(_:)();
  v41 = v31;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  v32 = objc_allocWithZone(MEMORY[0x24BDBB740]);
  URL._bridgeToObjectiveC()(v33);
  v35 = v34;
  v36 = objc_msgSend(v32, sel_initWithURL_, v34);

  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v38 = (void *)MEMORY[0x20BD3B538](v37);
  swift_bridgeObjectRelease();
  objc_msgSend(v36, sel_setOption_forKey_, v38, *MEMORY[0x24BDBB4F8]);

  objc_msgSend(v36, sel_setShouldAddStoreAsynchronously_, 0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v36;
}

uint64_t specialized closure #1 in TetraDBManager.persistentContainer.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  void (*v15)(char *, char *, uint64_t);
  id v16;
  NSURL *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  Class isa;
  void *v29;
  uint64_t result;
  Swift::String v31;
  unint64_t aBlock;
  unint64_t v33;
  void (*v34)(uint64_t, void *, void *);
  void *v35;
  void (*v36)(int, id);
  uint64_t v37;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&aBlock - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&aBlock - v8;
  v10 = (void *)MEMORY[0x20BD3B538](0xD00000000000001BLL, 0x800000020BB47A10);
  v11 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v10);

  if (!v11)
  {
    __break(1u);
    goto LABEL_7;
  }
  v12 = (void *)MEMORY[0x20BD3B538](0x42446172746554, 0xE700000000000000);
  v13 = (void *)MEMORY[0x20BD3B538](1684893549, 0xE400000000000000);
  v14 = objc_msgSend(v11, sel_URLForResource_withExtension_, v12, v13);

  if (!v14)
  {
LABEL_7:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    goto LABEL_8;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v15 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v15(v2, v7, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v2, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
LABEL_8:
    outlined destroy of URL?((uint64_t)v2);
    goto LABEL_10;
  }
  v15(v9, v2, v3);
  v16 = objc_allocWithZone(MEMORY[0x24BDBB6B0]);
  URL._bridgeToObjectiveC()(v17);
  v19 = v18;
  v20 = objc_msgSend(v16, sel_initWithContentsOfURL_, v18);

  if (v20)
  {
    v21 = specialized static TetraDBManager.persistentStoreDescription()();
    v22 = objc_allocWithZone(MEMORY[0x24BDBB700]);
    v23 = v20;
    v24 = (void *)MEMORY[0x20BD3B538](0x42446172746554, 0xE700000000000000);
    v25 = objc_msgSend(v22, sel_initWithName_managedObjectModel_, v24, v23);

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_20BB40580;
    *(_QWORD *)(v26 + 32) = v21;
    aBlock = v26;
    specialized Array._endMutation()();
    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSPersistentStoreDescription);
    v27 = v21;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v25, sel_setPersistentStoreDescriptions_, isa);

    v36 = closure #1 in closure #1 in TetraDBManager.persistentContainer.getter;
    v37 = 0;
    aBlock = MEMORY[0x24BDAC760];
    v33 = 1107296256;
    v34 = thunk for @escaping @callee_guaranteed (@guaranteed NSPersistentStoreDescription, @guaranteed Error?) -> ();
    v35 = &block_descriptor_0;
    v29 = _Block_copy(&aBlock);
    objc_msgSend(v25, sel_loadPersistentStoresWithCompletionHandler_, v29);
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return (uint64_t)v25;
  }
  aBlock = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  aBlock = 0xD000000000000022;
  v33 = 0x800000020BB47A80;
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
  v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
LABEL_10:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void specialized TetraDBManager.saveTetraSession(conversationID:sessionStates:needsSync:)(void *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  objc_class *v10;
  _QWORD *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  NSObject *v23;
  os_log_type_t v24;
  id v25;
  id v26;
  uint8_t *v27;
  _QWORD *v28;
  id v29;
  void *v30;
  _BYTE *v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  Class isa;
  id v36;
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  objc_super v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for TetraSessionStates();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v2 + OBJC_IVAR____TtC17MessageProtection14TetraDBManager_cache);
  outlined init with copy of TetraSessionStates(a2, (uint64_t)v8);
  v10 = (objc_class *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructWrapper<TetraSessionStates>);
  v11 = objc_allocWithZone(v10);
  outlined init with copy of TetraSessionStates((uint64_t)v8, (uint64_t)v11 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v11) + 0x58));
  v41.receiver = v11;
  v41.super_class = v10;
  v12 = objc_msgSendSuper2(&v41, sel_init);
  outlined destroy of TetraSessionStates((uint64_t)v8);
  objc_msgSend(v9, sel_setObject_forKey_, v12, a1);

  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBB6A0]), sel_initWithConcurrencyType_, 1);
  v14 = TetraDBManager.persistentContainer.getter();
  v15 = objc_msgSend(v14, sel_persistentStoreCoordinator);

  objc_msgSend(v13, sel_setPersistentStoreCoordinator_, v15);
  objc_msgSend(v13, sel_setMergePolicy_, *MEMORY[0x24BDBB478]);
  objc_msgSend(v13, sel_setShouldPerformSecureOperation_, 1);
  type metadata accessor for TetraSessionSerialized();
  v16 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithContext_, v13);
  v17 = objc_msgSend(a1, sel_base64EncodedStringWithOptions_, 0);
  if (!v17)
  {
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = (id)MEMORY[0x20BD3B538](v18);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v16, sel_setRemoteIdentifier_, v17);

  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraSessionStates and conformance TetraSessionStates, (uint64_t (*)(uint64_t))type metadata accessor for TetraSessionStates, (uint64_t)&protocol conformance descriptor for TetraSessionStates);
  v19 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (!v3)
  {
    v33 = v19;
    v34 = v20;
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v33, v34);
    objc_msgSend(v16, sel_setSerializedSession_, isa);
    swift_release();

    v40 = 0;
    if ((objc_msgSend(v13, sel_save_, &v40) & 1) != 0)
    {
      v36 = v40;

      return;
    }
    v37 = v40;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v32 = v16;
    v16 = v13;
    goto LABEL_11;
  }
  swift_release();
  v21 = static os_log_type_t.error.getter();
  v22 = MessageProtectionLog();
  if (v22)
  {
    v23 = v22;
    v24 = v21;
    if (os_log_type_enabled(v22, v21))
    {
      v25 = v3;
      v26 = v3;
      v39 = v16;
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v27 = 138412290;
      v29 = v3;
      v30 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v40 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v28 = v30;
      v16 = v39;

      _os_log_impl(&dword_20BABB000, v23, v24, "Failed to encode the session: %@", v27, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x20BD3C498](v28, -1, -1);
      MEMORY[0x20BD3C498](v27, -1, -1);
    }

    lazy protocol witness table accessor for type TetraDBErrors and conformance TetraDBErrors();
    swift_allocError();
    *v31 = 0;
    swift_willThrow();

    v32 = v13;
LABEL_11:

    return;
  }
  __break(1u);
}

void specialized StructWrapper.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void specialized TetraDBManager.cache(_:willEvictObject:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  os_log_type_t v6;
  NSObject *v7;
  NSObject *v8;
  uint8_t *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21[4];
  uint64_t v22;
  _BYTE v23[32];

  v2 = type metadata accessor for P256.Signing.PublicKey();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static os_log_type_t.info.getter();
  v7 = MessageProtectionLog();
  if (v7)
  {
    v8 = v7;
    outlined init with copy of Any(a1, (uint64_t)v23);
    if (os_log_type_enabled(v8, v6))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v22 = v19;
      *(_DWORD *)v9 = 136315138;
      v18[0] = v9 + 4;
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v21);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StructWrapper<TetraSessionStates>);
      v18[1] = MEMORY[0x24BEE4AD8] + 8;
      swift_dynamicCast();
      v10 = v20;
      v11 = (char *)v20 + *(_QWORD *)((*MEMORY[0x24BEE4EA0] & *v20) + 0x58);
      swift_beginAccess();
      v12 = type metadata accessor for TetraSessionState();
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, &v11[*(int *)(v12 + 24)], v2);
      v13 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      v15 = v14;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v16 = Data.base64EncodedString(options:)(0);
      outlined consume of Data._Representation(v13, v15);

      v21[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16._countAndFlagsBits, (unint64_t)v16._object, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
      _os_log_impl(&dword_20BABB000, v8, v6, "TetraCache: Removing object %s from cache.", v9, 0xCu);
      v17 = v19;
      swift_arrayDestroy();
      MEMORY[0x20BD3C498](v17, -1, -1);
      MEMORY[0x20BD3C498](v9, -1, -1);

    }
    else
    {

      __swift_destroy_boxed_opaque_existential_0((uint64_t)v23);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t outlined init with copy of TetraSessionStates(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraSessionStates();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TetraSessionStates(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TetraSessionStates();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type TetraDBErrors and conformance TetraDBErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraDBErrors and conformance TetraDBErrors;
  if (!lazy protocol witness table cache variable for type TetraDBErrors and conformance TetraDBErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraDBErrors, &type metadata for TetraDBErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraDBErrors and conformance TetraDBErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraDBErrors and conformance TetraDBErrors;
  if (!lazy protocol witness table cache variable for type TetraDBErrors and conformance TetraDBErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraDBErrors, &type metadata for TetraDBErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraDBErrors and conformance TetraDBErrors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x20BD3C414](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void partial apply for closure #1 in TetraDBManager.getSessionForNGMIdentity(conversationID:)()
{
  uint64_t v0;

  closure #1 in TetraDBManager.getSessionForNGMIdentity(conversationID:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void ***)(v0 + 32));
}

uint64_t sub_20BAE6090()
{
  id *v0;

  return swift_deallocObject();
}

NSObject *partial apply for closure #2 in TetraDBManager.getSessionForNGMIdentity(conversationID:)()
{
  uint64_t v0;

  return closure #2 in TetraDBManager.getSessionForNGMIdentity(conversationID:)(*(void **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_20BAE60D0()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of TetraSessionStates(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraSessionStates();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_20BAE6124()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #3 in TetraDBManager.getSessionForNGMIdentity(conversationID:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_deleteObject_, *(_QWORD *)(v0 + 24));
}

uint64_t sub_20BAE6160()
{
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for TetraDBErrors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TetraDBErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_20BAE624C + 4 * byte_20BB40595[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_20BAE6280 + 4 * byte_20BB40590[v4]))();
}

uint64_t sub_20BAE6280(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BAE6288(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BAE6290);
  return result;
}

uint64_t sub_20BAE629C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BAE62A4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_20BAE62A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BAE62B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for TetraDBErrors(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for TetraDBErrors(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TetraDBErrors()
{
  return &type metadata for TetraDBErrors;
}

uint64_t one-time initialization function for GLT_SEED_EXTRACTION_LABEL()
{
  uint64_t result;
  uint64_t v1;

  result = specialized Data.init<A>(_:)(0xD000000000000017, 0x800000020BB47EE0);
  GLT_SEED_EXTRACTION_LABEL = result;
  unk_25472E170 = v1;
  return result;
}

id GLTDiversifiedKey.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void GLTDiversifiedKey.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id GLTDiversifiedKey.__deallocating_deinit()
{
  return GLTDiversifiedKey.__deallocating_deinit(type metadata accessor for GLTDiversifiedKey);
}

uint64_t type metadata accessor for GLTDiversifiedKey()
{
  return objc_opt_self();
}

void static GLTKeyDiversificationSwift.diversify(publicKey:trackingPreventionSalt:docId:)(__SecKey *a1, unint64_t a2, unint64_t a3, uint64_t a4, const __CFData *a5)
{
  specialized static GLTKeyDiversificationSwift.diversify(publicKey:trackingPreventionSalt:docId:)(a1, a2, a3, a4, a5);
}

uint64_t static GLTKeyDiversificationSwift.diversify(privateKey:docId:trackingPreventionSalt:)(__SecKey *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized static GLTKeyDiversificationSwift.diversify(privateKey:docId:trackingPreventionSalt:)(a1, a2, a3, a4, a5);
}

id GLTKeyDiversificationSwift.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GLTKeyDiversificationSwift();
  return objc_msgSendSuper2(&v2, sel_init);
}

id GLTKeyDiversificationSwift.__deallocating_deinit()
{
  return GLTDiversifiedKey.__deallocating_deinit(type metadata accessor for GLTKeyDiversificationSwift);
}

id GLTDiversifiedKey.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t sub_20BAE6798@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t bytes, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;
  size_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;

  v22 = v19;
  LOWORD(v23) = a1;
  BYTE2(v23) = BYTE2(a1);
  HIBYTE(v23) = BYTE3(a1);
  v24 = BYTE4(a1);
  v25 = BYTE5(a1);
  v26 = BYTE6(a1);
  result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x24BDE94B8], v18, &v22);
  v21 = v23 | ((unint64_t)v24 << 32) | ((unint64_t)v25 << 40) | ((unint64_t)v26 << 48);
  *v17 = v22;
  v17[1] = v21;
  return result;
}

void specialized static GLTKeyDiversificationSwift.validateKeyType(_:isPublicKey:)(__SecKey *a1)
{
  CFDictionaryRef v1;
  CFDictionaryRef v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = SecKeyCopyAttributes(a1);
  if (v1)
  {
    v2 = v1;
    v4 = 0;
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  }
  lazy protocol witness table accessor for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError();
  swift_allocError();
  *v3 = 2;
  swift_willThrow();
}

void specialized static GLTKeyDiversificationSwift.diversify(publicKey:trackingPreventionSalt:docId:)(__SecKey *a1, unint64_t a2, unint64_t a3, uint64_t a4, const __CFData *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  CFDataRef v17;
  CFDataRef v18;
  CFDataRef v19;
  unint64_t v20;
  char *v21;
  CFErrorRef v22;
  CFErrorRef *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t inited;
  void **v39;
  void *v40;
  void *v41;
  void **v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  const __CFDictionary *v52;
  CFDataRef v53;
  SecKeyRef v54;
  uint64_t v55;
  unint64_t v56;
  Class v57;
  objc_class *v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CFDataRef v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  CFDataRef isa;
  objc_super v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  CFErrorRef error[2];

  isa = a5;
  error[1] = *(CFErrorRef *)MEMORY[0x24BDAC8D0];
  v10 = type metadata accessor for P256.Signing.PublicKey();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v62 - v15;
  error[0] = 0;
  specialized static GLTKeyDiversificationSwift.validateKeyType(_:isPublicKey:)(a1);
  if (!v5)
  {
    v66 = a2;
    v17 = isa;
    v67 = a4;
    v68 = v14;
    v65 = v11;
    v18 = SecKeyCopyExternalRepresentation(a1, error);
    if (v18)
    {
      v19 = v18;
      v73 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v74 = v20;
      v21 = v16;
      P256.Signing.PublicKey.init<A>(x963Representation:)();
      v64 = v19;
      v63 = v10;
      if (a3 >> 60 == 15)
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        v24 = __DataStorage.init(length:)();
        v73 = 0x2000000000;
        v74 = v24;
        specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)((int *)&v73, 0);
        v74 |= 0x4000000000000000uLL;
        specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)&v73);
        if (v25)
          __break(1u);
        v26 = v73;
        v27 = v74;
        v28 = v66;
      }
      else
      {
        v28 = v66;
        v73 = v66;
        v74 = a3;
        v27 = a3;
        v26 = v66;
      }
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v26, v27);
      outlined copy of Data?(v28, a3);
      v29 = specialized Data.init<A>(_:)(v67, (unint64_t)v17);
      v31 = v30;
      v71 = v26;
      v72 = v27;
      outlined copy of Data._Representation(v26, v27);
      specialized Data.append<A>(contentsOf:)(v29, v31);
      outlined consume of Data._Representation(v29, v31);
      v67 = v26;
      v66 = v27;
      outlined consume of Data._Representation(v26, v27);
      v32 = v71;
      v33 = v72;
      if (one-time initialization token for GLT_SEED_EXTRACTION_LABEL != -1)
        swift_once();
      P256.Signing.PublicKey.keyFromDiversification(with:seedExtractionLabel:)();
      v34 = outlined consume of Data._Representation(v32, v33);
      v35 = MEMORY[0x20BD3B3B8](v34);
      v37 = v36;
      isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v35, v37);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
      inited = swift_initStackObject();
      v39 = (void **)MEMORY[0x24BDE9050];
      *(_OWORD *)(inited + 16) = xmmword_20BB406C0;
      v40 = *v39;
      *(_QWORD *)(inited + 32) = *v39;
      v41 = (void *)*MEMORY[0x24BDE9060];
      type metadata accessor for CFStringRef(0);
      v42 = (void **)MEMORY[0x24BDE9028];
      *(_QWORD *)(inited + 40) = v41;
      v43 = *v42;
      *(_QWORD *)(inited + 64) = v44;
      *(_QWORD *)(inited + 72) = v43;
      v45 = (void *)*MEMORY[0x24BDE9038];
      *(_QWORD *)(inited + 80) = *MEMORY[0x24BDE9038];
      v46 = (void *)*MEMORY[0x24BDE9048];
      *(_QWORD *)(inited + 104) = v44;
      *(_QWORD *)(inited + 112) = v46;
      *(_QWORD *)(inited + 144) = MEMORY[0x24BEE1768];
      *(_QWORD *)(inited + 120) = 256;
      v47 = v40;
      v48 = v41;
      v49 = v43;
      v50 = v45;
      v51 = v46;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
      v52 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v53 = isa;
      v54 = SecKeyCreateWithData(isa, v52, error);

      if (v54)
      {
        v55 = v67;
        v56 = v66;
        outlined copy of Data._Representation(v67, v66);
        v57 = Data._bridgeToObjectiveC()().super.isa;
        outlined consume of Data._Representation(v55, v56);
        v58 = (objc_class *)type metadata accessor for GLTDiversifiedKey();
        v59 = (char *)objc_allocWithZone(v58);
        *(_QWORD *)&v59[OBJC_IVAR____TtC17MessageProtection17GLTDiversifiedKey_diversifiedKey] = v54;
        *(_QWORD *)&v59[OBJC_IVAR____TtC17MessageProtection17GLTDiversifiedKey_trackingPreventionSalt] = v57;
        v70.receiver = v59;
        v70.super_class = v58;
        -[__SecKey init](&v70, sel_init);

        v60 = *(void (**)(char *, uint64_t))(v65 + 8);
        v61 = v63;
        v60(v68, v63);
        outlined consume of Data._Representation(v73, v74);
        v60(v21, v61);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      v22 = error[0];
      lazy protocol witness table accessor for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError();
      swift_allocError();
      *v23 = v22;
      swift_willThrow();
    }
  }
}

uint64_t specialized static GLTKeyDiversificationSwift.diversify(privateKey:docId:trackingPreventionSalt:)(__SecKey *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  CFErrorRef v14;
  CFErrorRef *v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFErrorRef error[3];

  v17 = a5;
  error[1] = *(CFErrorRef *)MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for P256.Signing.PrivateKey();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  error[0] = 0;
  specialized static GLTKeyDiversificationSwift.validateKeyType(_:isPublicKey:)(a1);
  if (!v5)
  {
    v16[4] = v11;
    v16[3] = v8;
    if (SecKeyCopyExternalRepresentation(a1, error))
    {
      v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v19 = v13;
      P256.Signing.PrivateKey.init<A>(x963Representation:)();
      __asm { BR              X10 }
    }
    v14 = error[0];
    lazy protocol witness table accessor for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError();
    swift_allocError();
    *v15 = v14;
    swift_willThrow();
  }
  return a3;
}

uint64_t type metadata accessor for GLTKeyDiversificationSwift()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError;
  if (!lazy protocol witness table cache variable for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for GLTKeyDiversificationError, &type metadata for GLTKeyDiversificationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GLTKeyDiversificationError and conformance GLTKeyDiversificationError);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CFStringRef(255);
    result = MEMORY[0x20BD3C414](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GLTKeyDiversificationError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = v4 + 1;
  v6 = v4 - 3;
  if (v5 >= 5)
    return v6;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GLTKeyDiversificationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 4;
  }
  return result;
}

uint64_t getEnumTag for GLTKeyDiversificationError(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *destructiveInjectEnumTag for GLTKeyDiversificationError(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    a2 -= 0x7FFFFFFF;
    goto LABEL_5;
  }
  if (a2)
LABEL_5:
    *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for GLTKeyDiversificationError()
{
  return &type metadata for GLTKeyDiversificationError;
}

uint64_t MPPB_SKPaddedStatus.paddedData()()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for MPPB_SKPaddedStatus(0);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, type metadata accessor for MPPB_SKPaddedStatus, (uint64_t)&protocol conformance descriptor for MPPB_SKPaddedStatus);
  result = Message.serializedData(partial:)();
  if (!v0)
    __asm { BR              X10 }
  return result;
}

id closure #1 in SymmetricKey.toZeroizingNSData()@<X0>(id result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (result)
  {
    result = objc_msgSend((id)objc_opt_self(), sel__newZeroingDataWithBytes_length_, result, a2 - (_QWORD)result);
    if (result)
    {
      *a3 = result;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SymmetricRatchet.init(data:step:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  void *v27;
  _BYTE *v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD, _QWORD, _QWORD);
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  uint64_t v77;
  _BOOL8 v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  char v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  _QWORD v88[2];
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;

  v91 = a2;
  v92 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v94 = (char *)v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v98 = (char *)v88 - v9;
  v101 = type metadata accessor for SymmetricKey();
  v99 = *(_QWORD *)(v101 - 8);
  v10 = MEMORY[0x24BDAC7A8](v101);
  v93 = (char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v90 = (uint64_t)v88 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  MEMORY[0x24BDAC7A8](v13);
  v97 = (_QWORD *)((char *)v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v100 = type metadata accessor for MPPB_KeyAndIndex(0);
  v95 = *(_QWORD *)(v100 - 8);
  MEMORY[0x24BDAC7A8](v100);
  v89 = (char *)v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v16);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_RatchetState?);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for MPPB_RatchetState(0);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for SymmetricRatchet();
  v25 = (char *)*(int *)(v24 + 20);
  v106 = a4;
  *(_QWORD *)&v25[a4] = MEMORY[0x24BEE4B00];
  v26 = v91;
  v105 = 0;
  v103 = 0u;
  v104 = 0u;
  outlined copy of Data._Representation(a1, v91);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, type metadata accessor for MPPB_RatchetState, (uint64_t)&protocol conformance descriptor for MPPB_RatchetState);
  v27 = v102;
  Message.init(serializedData:extensions:partial:options:)();
  if (v27)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    outlined destroy of TetraSessionStates?((uint64_t)v19, &demangling cache variable for type metadata for MPPB_RatchetState?);
    lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
    swift_allocError();
    *v28 = 2;
    swift_willThrow();
    outlined consume of Data._Representation(a1, v26);
    __swift_destroy_boxed_opaque_existential_0(v92);
    return swift_bridgeObjectRelease();
  }
  v31 = (uint64_t)v89;
  v30 = v90;
  v88[1] = 0;
  v102 = v25;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v20);
  outlined init with take of TetraRatchetState((uint64_t)v19, (uint64_t)v23, type metadata accessor for MPPB_RatchetState);
  v32 = v106;
  outlined init with copy of SymmetricRatchetStep(v92, v106 + *(int *)(v24 + 24));
  v33 = (void (*)(_QWORD, _QWORD, _QWORD))v97;
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)&v23[*(int *)(v20 + 24)], (uint64_t)v97);
  v34 = v100;
  v35 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v95 + 48))(v33, 1, v100);
  v36 = (uint64_t)v23;
  if (v35 == 1)
  {
    UnknownStorage.init()();
    *(_OWORD *)(v31 + *(int *)(v34 + 20)) = xmmword_20BB407A0;
    v37 = v31 + *(int *)(v34 + 24);
    *(_QWORD *)v37 = 0;
    *(_BYTE *)(v37 + 8) = 1;
    v38 = v31;
    outlined destroy of TetraSessionStates?((uint64_t)v97, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  }
  else
  {
    v38 = v31;
    outlined init with take of TetraRatchetState((uint64_t)v97, v31, type metadata accessor for MPPB_KeyAndIndex);
  }
  v39 = v99;
  v40 = v93;
  v41 = (uint64_t *)(v38 + *(int *)(v34 + 20));
  v42 = *v41;
  v43 = v41[1];
  if (v43 >> 60 == 15)
    v44 = 0;
  else
    v44 = *v41;
  v45 = 0xC000000000000000;
  if (v43 >> 60 != 15)
    v45 = v43;
  *(_QWORD *)&v103 = v44;
  *((_QWORD *)&v103 + 1) = v45;
  outlined copy of Data?(v42, v43);
  SymmetricKey.init<A>(data:)();
  v46 = v38 + *(int *)(v34 + 24);
  if (*(_BYTE *)(v46 + 8))
    v47 = 0;
  else
    v47 = *(_QWORD *)v46;
  outlined destroy of TetraRatchetOuterMessage(v38, type metadata accessor for MPPB_KeyAndIndex);
  v97 = *(_QWORD **)(v39 + 32);
  ((void (*)(uint64_t, uint64_t, uint64_t))v97)(v32, v30, v101);
  *(_QWORD *)(v32
            + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                     + 48)) = v47;
  v48 = *(_QWORD *)v36;
  v49 = *(_QWORD *)(*(_QWORD *)v36 + 16);
  v89 = *(char **)v36;
  v90 = v36;
  if (!v49)
  {
    swift_bridgeObjectRetain();
LABEL_44:
    outlined consume of Data._Representation(a1, v91);
    __swift_destroy_boxed_opaque_existential_0(v92);
    swift_bridgeObjectRelease();
    return outlined destroy of TetraRatchetOuterMessage(v90, type metadata accessor for MPPB_RatchetState);
  }
  v50 = v48 + ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80));
  v95 = *(_QWORD *)(v95 + 72);
  swift_bridgeObjectRetain();
  v51 = (uint64_t)v98;
  v52 = v101;
  v96 = a1;
  while (1)
  {
    v106 = v49;
    v55 = *(int *)(v34 + 20);
    v56 = v50 + *(int *)(v34 + 24);
    if (*(_BYTE *)(v56 + 8))
      v57 = 0;
    else
      v57 = *(_QWORD *)v56;
    v58 = *(_QWORD *)(v50 + v55);
    v59 = *(_QWORD *)(v50 + v55 + 8);
    if (v59 >> 60 == 15)
      v60 = 0;
    else
      v60 = *(_QWORD *)(v50 + v55);
    v61 = 0xC000000000000000;
    if (v59 >> 60 != 15)
      v61 = v59;
    *(_QWORD *)&v103 = v60;
    *((_QWORD *)&v103 + 1) = v61;
    outlined copy of Data?(v58, v59);
    SymmetricKey.init<A>(data:)();
    v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56);
    v62(v51, 0, 1, v52);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v51, 1, v52) == 1)
    {
      outlined destroy of TetraSessionStates?(v51, &demangling cache variable for type metadata for SymmetricKey?);
      v63 = v102;
      v64 = specialized __RawDictionaryStorage.find<A>(_:)(v57);
      v65 = v32;
      if ((v66 & 1) != 0)
      {
        v67 = v64;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v69 = *(_QWORD *)&v63[v65];
        *(_QWORD *)&v103 = v69;
        *(_QWORD *)&v63[v65] = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v69 = v103;
        }
        v70 = v99;
        v54 = (uint64_t)v94;
        v52 = v101;
        ((void (*)(char *, unint64_t, uint64_t))v97)(v94, *(_QWORD *)(v69 + 56) + *(_QWORD *)(v99 + 72) * v67, v101);
        specialized _NativeDictionary._delete(at:)(v67, v69);
        *(_QWORD *)&v63[v65] = v69;
        v39 = v70;
        swift_bridgeObjectRelease();
        v53 = 0;
        v32 = v65;
        v40 = v93;
      }
      else
      {
        v53 = 1;
        v54 = (uint64_t)v94;
        v52 = v101;
      }
      v62(v54, v53, 1, v52);
      outlined destroy of TetraSessionStates?(v54, &demangling cache variable for type metadata for SymmetricKey?);
      a1 = v96;
      goto LABEL_18;
    }
    ((void (*)(char *, uint64_t, uint64_t))v97)(v40, v51, v52);
    v71 = v102;
    v72 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v103 = *(_QWORD *)&v71[v32];
    v73 = v103;
    v74 = v32;
    *(_QWORD *)&v71[v32] = 0x8000000000000000;
    v76 = specialized __RawDictionaryStorage.find<A>(_:)(v57);
    v77 = *(_QWORD *)(v73 + 16);
    v78 = (v75 & 1) == 0;
    v79 = v77 + v78;
    if (__OFADD__(v77, v78))
      break;
    v80 = v75;
    if (*(_QWORD *)(v73 + 24) >= v79)
    {
      if ((v72 & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v79, v72);
      v81 = specialized __RawDictionaryStorage.find<A>(_:)(v57);
      if ((v80 & 1) != (v82 & 1))
        goto LABEL_47;
      v76 = v81;
    }
    a1 = v96;
    v83 = (_QWORD *)v103;
    if ((v80 & 1) != 0)
    {
      v84 = *(_QWORD *)(v103 + 56) + *(_QWORD *)(v99 + 72) * v76;
      v39 = v99;
      v52 = v101;
      (*(void (**)(unint64_t, char *, uint64_t))(v99 + 40))(v84, v40, v101);
    }
    else
    {
      *(_QWORD *)(v103 + 8 * (v76 >> 6) + 64) |= 1 << v76;
      *(_QWORD *)(v83[6] + 8 * v76) = v57;
      ((void (*)(unint64_t, char *, uint64_t))v97)(v83[7] + *(_QWORD *)(v99 + 72) * v76, v40, v101);
      v85 = v83[2];
      v86 = __OFADD__(v85, 1);
      v87 = v85 + 1;
      if (v86)
        goto LABEL_46;
      v83[2] = v87;
      v52 = v101;
      v39 = v99;
    }
    v32 = v74;
    *(_QWORD *)&v102[v74] = v103;
    swift_bridgeObjectRelease();
LABEL_18:
    v51 = (uint64_t)v98;
    v34 = v100;
    v50 += v95;
    v49 = v106 - 1;
    if (v106 == 1)
      goto LABEL_44;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t SymmetricRatchet.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void (*v39)(void);
  uint64_t v40;
  uint64_t v41;
  void *v42;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v34 - v6;
  v8 = type metadata accessor for MPPB_KeyAndIndex(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v41 = (uint64_t)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MPPB_RatchetState(0);
  v40 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t *)((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  UnknownStorage.init()();
  v14 = (uint64_t)v13 + *(int *)(v11 + 24);
  v37 = v13;
  v38 = v14;
  v39 = *(void (**)(void))(v9 + 56);
  v39();
  type metadata accessor for SymmetricRatchet();
  v15 = swift_bridgeObjectRetain();
  v16 = specialized Sequence.compactMap<A>(_:)(v15);
  swift_bridgeObjectRelease();
  *v13 = v16;
  v17 = *(int *)(v2 + 48);
  v18 = type metadata accessor for SymmetricKey();
  v36 = *(_QWORD *)(v18 - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v19(v7, v1, v18);
  v20 = *(_QWORD *)(v1 + v17);
  v35 = v7;
  *(_QWORD *)&v7[v17] = v20;
  v19(v5, (uint64_t)v7, v18);
  *(_QWORD *)&v5[*(int *)(v2 + 48)] = v20;
  v21 = v41;
  UnknownStorage.init()();
  v22 = v8;
  v23 = v21 + *(int *)(v8 + 20);
  *(_OWORD *)v23 = xmmword_20BB407A0;
  v24 = v21 + *(int *)(v22 + 24);
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 1;
  type metadata accessor for NSData();
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v25 = v42;
  v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v28 = v27;

  *(_QWORD *)v23 = v26;
  *(_QWORD *)(v23 + 8) = v28;
  outlined destroy of TetraSessionStates?((uint64_t)v5, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)v24 = v20;
  v29 = v36;
  v30 = (uint64_t)v37;
  *(_BYTE *)(v24 + 8) = 0;
  (*(void (**)(char *, uint64_t))(v29 + 8))(v35, v18);
  v31 = v38;
  outlined destroy of TetraSessionStates?(v38, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined init with take of TetraRatchetState(v41, v31, type metadata accessor for MPPB_KeyAndIndex);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v39)(v31, 0, 1, v22);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, type metadata accessor for MPPB_RatchetState, (uint64_t)&protocol conformance descriptor for MPPB_RatchetState);
  v32 = Message.serializedData(partial:)();
  outlined destroy of TetraRatchetOuterMessage(v30, type metadata accessor for MPPB_RatchetState);
  return v32;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(uint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int64_t v62;
  __int128 v63;
  char *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  char *v78;
  void *v79;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for MPPB_KeyAndIndex(0);
  v69 = *(_QWORD *)(v67 - 8);
  v7 = MEMORY[0x24BDAC7A8](v67);
  v59 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v58 = (uint64_t)&v57 - v9;
  v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: SymmetricKey));
  v10 = MEMORY[0x24BDAC7A8](v77);
  v66 = (uint64_t *)((char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = MEMORY[0x24BDAC7A8](v10);
  v65 = (uint64_t *)((char *)&v57 - v13);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v76 = (uint64_t *)((char *)&v57 - v15);
  MEMORY[0x24BDAC7A8](v14);
  v64 = (char *)&v57 - v16;
  v17 = *(_QWORD *)(a1 + 64);
  v61 = a1 + 64;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v62 = (unint64_t)(v18 + 63) >> 6;
  v68 = a1;
  result = swift_bridgeObjectRetain();
  v22 = 0;
  v60 = MEMORY[0x24BEE4AF8];
  v63 = xmmword_20BB407A0;
  v78 = v6;
  if (!v20)
    goto LABEL_7;
LABEL_4:
  v70 = (v20 - 1) & v20;
  v71 = v22;
  for (i = __clz(__rbit64(v20)) | (v22 << 6); ; i = __clz(__rbit64(v50)) + (v49 << 6))
  {
    v24 = *(_QWORD *)(v68 + 56);
    v25 = *(_QWORD *)(*(_QWORD *)(v68 + 48) + 8 * i);
    v26 = type metadata accessor for SymmetricKey();
    v75 = *(_QWORD *)(v26 - 8);
    v27 = v24 + *(_QWORD *)(v75 + 72) * i;
    v28 = v77;
    v29 = v64;
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
    v30(&v64[*(int *)(v77 + 48)], v27, v26);
    v31 = (void (*)(uint64_t, char *, uint64_t))v30;
    v74 = v30;
    *v29 = v25;
    v32 = (uint64_t)v29;
    v33 = v76;
    outlined init with take of (key: UInt64, value: SymmetricKey)(v32, (uint64_t)v76);
    v73 = *v33;
    v34 = *(int *)(v28 + 48);
    v35 = (uint64_t)v65;
    v36 = (char *)v65 + v34;
    *v65 = v73;
    v31(v35 + v34, (char *)v33 + v34, v26);
    UnknownStorage.init()();
    v37 = v67;
    v38 = &v6[*(int *)(v67 + 20)];
    *(_OWORD *)v38 = v63;
    v39 = &v78[*(int *)(v37 + 24)];
    *(_QWORD *)v39 = 0;
    v39[8] = 1;
    type metadata accessor for NSData();
    SymmetricKey.withUnsafeBytes<A>(_:)();
    v72 = v2;
    v40 = v79;
    v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v43 = v42;

    *(_QWORD *)v38 = v41;
    *((_QWORD *)v38 + 1) = v43;
    v44 = (char *)v66 + *(int *)(v77 + 48);
    v46 = v73;
    v45 = (void (*)(char *, char *, uint64_t))v74;
    *v66 = v73;
    v45(v44, v36, v26);
    outlined destroy of TetraSessionStates?(v35, &demangling cache variable for type metadata for (key: UInt64, value: SymmetricKey));
    (*(void (**)(char *, uint64_t))(v75 + 8))(v44, v26);
    *(_QWORD *)v39 = v46;
    v39[8] = 0;
    v6 = v78;
    v47 = v69;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v78, 0, 1, v37);
    outlined destroy of TetraSessionStates?((uint64_t)v76, &demangling cache variable for type metadata for (key: UInt64, value: SymmetricKey));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v6, 1, v37) == 1)
    {
      result = outlined destroy of TetraSessionStates?((uint64_t)v6, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      v22 = v71;
      v2 = v72;
      v20 = v70;
      if (v70)
        goto LABEL_4;
    }
    else
    {
      v52 = v58;
      outlined init with take of TetraRatchetState((uint64_t)v6, v58, type metadata accessor for MPPB_KeyAndIndex);
      outlined init with take of TetraRatchetState(v52, v59, type metadata accessor for MPPB_KeyAndIndex);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v60 + 16) + 1, 1, v60);
      v22 = v71;
      v2 = v72;
      v20 = v70;
      v54 = *(_QWORD *)(v60 + 16);
      v53 = *(_QWORD *)(v60 + 24);
      if (v54 >= v53 >> 1)
        v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1, v60);
      v55 = v59;
      v56 = v60;
      *(_QWORD *)(v60 + 16) = v54 + 1;
      result = outlined init with take of TetraRatchetState(v55, v56+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ *(_QWORD *)(v69 + 72) * v54, type metadata accessor for MPPB_KeyAndIndex);
      if (v20)
        goto LABEL_4;
    }
LABEL_7:
    v48 = __OFADD__(v22, 1);
    v49 = v22 + 1;
    if (v48)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v49 >= v62)
      goto LABEL_30;
    v50 = *(_QWORD *)(v61 + 8 * v49);
    if (!v50)
      break;
LABEL_19:
    v70 = (v50 - 1) & v50;
    v71 = v49;
  }
  v51 = v49 + 1;
  if (v49 + 1 >= v62)
    goto LABEL_30;
  v50 = *(_QWORD *)(v61 + 8 * v51);
  if (v50)
    goto LABEL_18;
  v51 = v49 + 2;
  if (v49 + 2 >= v62)
    goto LABEL_30;
  v50 = *(_QWORD *)(v61 + 8 * v51);
  if (v50)
    goto LABEL_18;
  v51 = v49 + 3;
  if (v49 + 3 >= v62)
    goto LABEL_30;
  v50 = *(_QWORD *)(v61 + 8 * v51);
  if (v50)
    goto LABEL_18;
  v51 = v49 + 4;
  if (v49 + 4 >= v62)
  {
LABEL_30:
    swift_release();
    return v60;
  }
  v50 = *(_QWORD *)(v61 + 8 * v51);
  if (v50)
  {
LABEL_18:
    v49 = v51;
    goto LABEL_19;
  }
  while (1)
  {
    v49 = v51 + 1;
    if (__OFADD__(v51, 1))
      break;
    if (v49 >= v62)
      goto LABEL_30;
    v50 = *(_QWORD *)(v61 + 8 * v49);
    ++v51;
    if (v50)
      goto LABEL_19;
  }
LABEL_32:
  __break(1u);
  return result;
}

unint64_t type metadata accessor for NSData()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSData;
  if (!lazy cache variable for type metadata for NSData)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSData);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StatusKitErrors and conformance StatusKitErrors;
  if (!lazy protocol witness table cache variable for type StatusKitErrors and conformance StatusKitErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for StatusKitErrors, &type metadata for StatusKitErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StatusKitErrors and conformance StatusKitErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StatusKitErrors and conformance StatusKitErrors;
  if (!lazy protocol witness table cache variable for type StatusKitErrors and conformance StatusKitErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for StatusKitErrors, &type metadata for StatusKitErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StatusKitErrors and conformance StatusKitErrors);
  }
  return result;
}

uint64_t sub_20BAE8E2C@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t bytes, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;
  size_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;

  v22 = v19;
  LOWORD(v23) = a1;
  BYTE2(v23) = BYTE2(a1);
  HIBYTE(v23) = BYTE3(a1);
  v24 = BYTE4(a1);
  v25 = BYTE5(a1);
  v26 = BYTE6(a1);
  result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x24BDE94B8], v18, &v22);
  v21 = v23 | ((unint64_t)v24 << 32) | ((unint64_t)v25 << 40) | ((unint64_t)v26 << 48);
  *v17 = v22;
  v17[1] = v21;
  return result;
}

uint64_t specialized Data.init(count:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors;
  if (!lazy protocol witness table cache variable for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SymmetricRatchetErrors, &type metadata for SymmetricRatchetErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors;
  if (!lazy protocol witness table cache variable for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SymmetricRatchetErrors, &type metadata for SymmetricRatchetErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors);
  }
  return result;
}

uint64_t outlined init with copy of SymmetricRatchetStep(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of MPPB_KeyAndIndex?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of (key: UInt64, value: SymmetricKey)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt64, value: SymmetricKey));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for MPPB_RatchetState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for MPPB_KeyAndIndex(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      v19 = *(int *)(v16 + 20);
      v20 = &v14[v19];
      v21 = &v15[v19];
      v22 = *((_QWORD *)v21 + 1);
      if (v22 >> 60 == 15)
      {
        *(_OWORD *)v20 = *(_OWORD *)v21;
      }
      else
      {
        v23 = *(_QWORD *)v21;
        outlined copy of Data._Representation(*(_QWORD *)v21, *((_QWORD *)v21 + 1));
        *(_QWORD *)v20 = v23;
        *((_QWORD *)v20 + 1) = v22;
      }
      v24 = *(int *)(v16 + 24);
      v25 = &v14[v24];
      v26 = &v15[v24];
      *(_QWORD *)v25 = *(_QWORD *)v26;
      v25[8] = v26[8];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return v7;
}

uint64_t type metadata accessor for MPPB_KeyAndIndex(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for MPPB_KeyAndIndex);
}

uint64_t destroy for MPPB_RatchetState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v10;
  unint64_t v11;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = type metadata accessor for MPPB_KeyAndIndex(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  if (!(_DWORD)result)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t))v6)(v7, v5);
    v10 = (uint64_t *)(v7 + *(int *)(v8 + 20));
    v11 = v10[1];
    if (v11 >> 60 != 15)
      return outlined consume of Data._Representation(*v10, v11);
  }
  return result;
}

_QWORD *initializeWithCopy for MPPB_RatchetState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for MPPB_KeyAndIndex(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    v17 = *(int *)(v14 + 20);
    v18 = &v12[v17];
    v19 = &v13[v17];
    v20 = *((_QWORD *)v19 + 1);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    else
    {
      v21 = *(_QWORD *)v19;
      outlined copy of Data._Representation(*(_QWORD *)v19, *((_QWORD *)v19 + 1));
      *(_QWORD *)v18 = v21;
      *((_QWORD *)v18 + 1) = v20;
    }
    v22 = *(int *)(v14 + 24);
    v23 = &v12[v22];
    v24 = &v13[v22];
    *(_QWORD *)v23 = *(_QWORD *)v24;
    v23[8] = v24[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithCopy for MPPB_RatchetState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for MPPB_KeyAndIndex(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (v18)
    {
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v13);
      goto LABEL_7;
    }
    v11(v13, v14, v9);
    v24 = *(int *)(v15 + 20);
    v25 = (uint64_t *)&v13[v24];
    v26 = (uint64_t *)&v14[v24];
    v27 = *(_QWORD *)&v14[v24 + 8];
    if (*(_QWORD *)&v13[v24 + 8] >> 60 == 15)
    {
      if (v27 >> 60 != 15)
      {
        v28 = *v26;
        outlined copy of Data._Representation(v28, v27);
        *v25 = v28;
        v25[1] = v27;
LABEL_17:
        v37 = *(int *)(v15 + 24);
        v38 = &v13[v37];
        v39 = &v14[v37];
        v40 = *(_QWORD *)v39;
        v38[8] = v39[8];
        *(_QWORD *)v38 = v40;
        return a1;
      }
    }
    else
    {
      if (v27 >> 60 != 15)
      {
        v34 = *v26;
        outlined copy of Data._Representation(v34, v27);
        v35 = *v25;
        v36 = v25[1];
        *v25 = v34;
        v25[1] = v27;
        outlined consume of Data._Representation(v35, v36);
        goto LABEL_17;
      }
      outlined destroy of Data((uint64_t)v25);
    }
    *(_OWORD *)v25 = *(_OWORD *)v26;
    goto LABEL_17;
  }
  if (v18)
  {
LABEL_7:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v14, v9);
  v19 = *(int *)(v15 + 20);
  v20 = &v13[v19];
  v21 = &v14[v19];
  v22 = *((_QWORD *)v21 + 1);
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
  }
  else
  {
    v29 = *(_QWORD *)v21;
    outlined copy of Data._Representation(*(_QWORD *)v21, *((_QWORD *)v21 + 1));
    *(_QWORD *)v20 = v29;
    *((_QWORD *)v20 + 1) = v22;
  }
  v30 = *(int *)(v15 + 24);
  v31 = &v13[v30];
  v32 = &v14[v30];
  v33 = *(_QWORD *)v32;
  v31[8] = v32[8];
  *(_QWORD *)v31 = v33;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

uint64_t outlined destroy of MPPB_KeyAndIndex(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MPPB_KeyAndIndex(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *initializeWithTake for MPPB_RatchetState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for MPPB_KeyAndIndex(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    *(_OWORD *)&v12[*(int *)(v14 + 20)] = *(_OWORD *)&v13[*(int *)(v14 + 20)];
    v17 = *(int *)(v14 + 24);
    v18 = &v12[v17];
    v19 = &v13[v17];
    v18[8] = v19[8];
    *(_QWORD *)v18 = *(_QWORD *)v19;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *assignWithTake for MPPB_RatchetState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for MPPB_KeyAndIndex(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v8) = v17(v13, 1, v15);
  v18 = v17(v14, 1, v15);
  if (!(_DWORD)v8)
  {
    if (v18)
    {
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v13);
      goto LABEL_6;
    }
    v11(v13, v14, v9);
    v24 = *(int *)(v15 + 20);
    v25 = (uint64_t *)&v13[v24];
    v26 = (uint64_t *)&v14[v24];
    v27 = *(_QWORD *)&v13[v24 + 8];
    if (v27 >> 60 != 15)
    {
      v28 = v26[1];
      if (v28 >> 60 != 15)
      {
        v29 = *v25;
        *v25 = *v26;
        v25[1] = v28;
        outlined consume of Data._Representation(v29, v27);
        goto LABEL_13;
      }
      outlined destroy of Data((uint64_t)v25);
    }
    *(_OWORD *)v25 = *(_OWORD *)v26;
LABEL_13:
    v30 = *(int *)(v15 + 24);
    v31 = &v13[v30];
    v32 = &v14[v30];
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v31[8] = v32[8];
    return a1;
  }
  if (v18)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v14, v9);
  *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
  v19 = *(int *)(v15 + 24);
  v20 = &v13[v19];
  v21 = &v14[v19];
  v20[8] = v21[8];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for MPPB_RatchetState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BAE9BE4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MPPB_RatchetState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_20BAE9C94(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for MPPB_RatchetState(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for MPPB_RatchetState);
}

void type metadata completion function for MPPB_RatchetState()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MPPB_KeyAndIndex?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for MPPB_KeyAndIndex?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for MPPB_KeyAndIndex?)
  {
    type metadata accessor for MPPB_KeyAndIndex(255);
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MPPB_KeyAndIndex?);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for MPPB_KeyAndIndex(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      outlined copy of Data._Representation(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = *(int *)(a3 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_QWORD *)v15 = *(_QWORD *)v16;
    v15[8] = v16[8];
  }
  return a1;
}

uint64_t destroy for MPPB_KeyAndIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;

  v4 = type metadata accessor for UnknownStorage();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    return outlined consume of Data._Representation(*v6, v7);
  return result;
}

uint64_t initializeWithCopy for MPPB_KeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  return a1;
}

uint64_t assignWithCopy for MPPB_KeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      v12 = *v9;
      outlined copy of Data._Representation(v12, v10);
      v13 = *v8;
      v14 = v8[1];
      *v8 = v12;
      v8[1] = v10;
      outlined consume of Data._Representation(v13, v14);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v11 = *v9;
  outlined copy of Data._Representation(v11, v10);
  *v8 = v11;
  v8[1] = v10;
LABEL_8:
  v15 = *(int *)(a3 + 24);
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  *(_BYTE *)(v16 + 8) = *((_BYTE *)v17 + 8);
  *(_QWORD *)v16 = v18;
  return a1;
}

uint64_t initializeWithTake for MPPB_KeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  return a1;
}

uint64_t assignWithTake for MPPB_KeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      v12 = *v8;
      *v8 = *v9;
      v8[1] = v11;
      outlined consume of Data._Representation(v12, v10);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
LABEL_6:
  v13 = *(int *)(a3 + 24);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MPPB_KeyAndIndex()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for MPPB_KeyAndIndex()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for MPPB_KeyAndIndex()
{
  return type metadata completion function for MPPB_KeyAndIndex();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MPPB_SKPaddedStatus._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MPPB_SKPaddedStatus._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB40570;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "payload";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "padding";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MPPB_KeyAndIndex._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MPPB_KeyAndIndex._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB40570;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "key";
  *(_QWORD *)(v7 + 8) = 3;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "index";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MPPB_RatchetState._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MPPB_RatchetState._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB40570;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "chainKey";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "messageKeys";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MPPB_SKIncomingRatchet._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MPPB_SKIncomingRatchet._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB406C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ratchetState";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "messageKeys";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "publicSigningKey";
  *(_QWORD *)(v12 + 8) = 16;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MPPB_SKOutgoingRatchet._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MPPB_SKOutgoingRatchet._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB407B0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "ratchetState";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "privateSigningKey";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "currentMessageKey";
  *((_QWORD *)v13 + 1) = 17;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "subscriptionKey";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static MPPB_LiteRatchet._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static MPPB_LiteRatchet._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB406C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ratchetState";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "senderKeyID";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "conversationDST";
  *(_QWORD *)(v12 + 8) = 15;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_KyberSecurityLevel._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_KyberSecurityLevel._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB40570;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "securityLevel768";
  *(_QWORD *)(v7 + 8) = 16;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "securityLevel1024";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_PrivateKeyBackingStore._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_PrivateKeyBackingStore._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB40570;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "AP";
  *(_QWORD *)(v7 + 8) = 2;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "SEP";
  *((_QWORD *)v11 + 1) = 3;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_KyberPrivateKey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_KyberPrivateKey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB406C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "keyData";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "securityLevel";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "backingStore";
  *(_QWORD *)(v12 + 8) = 12;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_TetraPublicPrekey._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_TetraPublicPrekey._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB40570;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "pqPrekey";
  *(_QWORD *)(v7 + 8) = 8;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "pqPrekeySignature";
  *((_QWORD *)v11 + 1) = 17;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_TetraInitiationMessage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_TetraInitiationMessage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB40570;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "registeredKeyBundle";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "TetraMessage";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_TetraMessage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_TetraMessage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_20BB43400;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "messageVersion";
  *(_QWORD *)(v6 + 8) = 14;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = type metadata accessor for _NameMap.NameDescription();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "ciphertext";
  *(_QWORD *)(v10 + 8) = 10;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "signature";
  *((_QWORD *)v12 + 1) = 9;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "ecdhPublicKey";
  *((_QWORD *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "kemPublicKey";
  *((_QWORD *)v16 + 1) = 12;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "kemEncap";
  *((_QWORD *)v18 + 1) = 8;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "messageIndex";
  *((_QWORD *)v20 + 1) = 12;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "usedRegisteredKeys";
  *((_QWORD *)v22 + 1) = 18;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "messageKeyIndicator";
  *(_QWORD *)(v23 + 8) = 19;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_TetraInnerMessage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_TetraInnerMessage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB40570;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "plaintext";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "ktGossipData";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static TetraPB_PaddyKeyDistributionMessage._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static TetraPB_PaddyKeyDistributionMessage._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription));
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20BB406C0;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ciphertext";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "messageIndex";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "ecdhPublicKeyPrefix";
  *(_QWORD *)(v12 + 8) = 19;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t MPPB_SKPaddedStatus.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2 || result == 1)
    {
      type metadata accessor for MPPB_SKPaddedStatus(0);
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t MPPB_SKPaddedStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for MPPB_SKPaddedStatus);
  if (!v4)
  {
    closure #2 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for MPPB_SKPaddedStatus);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

double protocol witness for Message.init() in conformance MPPB_SKPaddedStatus@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v5;

  UnknownStorage.init()();
  result = 0.0;
  v5 = *(int *)(a1 + 24);
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_20BB407A0;
  *(_OWORD *)(a2 + v5) = xmmword_20BB407A0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MPPB_SKPaddedStatus()
{
  return 0xD000000000000013;
}

BOOL protocol witness for Message.isInitialized.getter in conformance MPPB_SKPaddedStatus(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 20) + 8) >> 60 != 15;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance MPPB_SKPaddedStatus())()
{
  return destructiveProjectEnumData for TetraDBErrors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MPPB_SKPaddedStatus()
{
  return MPPB_SKPaddedStatus.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MPPB_SKPaddedStatus.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MPPB_SKPaddedStatus()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, type metadata accessor for MPPB_SKPaddedStatus, (uint64_t)&protocol conformance descriptor for MPPB_SKPaddedStatus);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MPPB_SKPaddedStatus._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPPB_SKPaddedStatus()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, type metadata accessor for MPPB_SKPaddedStatus, (uint64_t)&protocol conformance descriptor for MPPB_SKPaddedStatus);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MPPB_SKPaddedStatus()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, type metadata accessor for MPPB_SKPaddedStatus, (uint64_t)&protocol conformance descriptor for MPPB_SKPaddedStatus);
  return Message.hash(into:)();
}

uint64_t MPPB_KeyAndIndex.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for MPPB_KeyAndIndex(0);
      dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
    }
    else if (result == 1)
    {
      type metadata accessor for MPPB_KeyAndIndex(0);
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t MPPB_KeyAndIndex.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for MPPB_KeyAndIndex);
  if (!v4)
  {
    closure #2 in MPPB_KeyAndIndex.traverse<A>(visitor:)(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  result = a5(0);
  v7 = a1 + *(int *)(result + 20);
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    v9 = *(_QWORD *)v7;
    outlined copy of Data._Representation(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v9, v8);
  }
  return result;
}

uint64_t closure #2 in MPPB_KeyAndIndex.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for MPPB_KeyAndIndex(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 8) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)();
  return result;
}

double protocol witness for Message.init() in conformance MPPB_KeyAndIndex@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = 0.0;
  v5 = *(int *)(a1 + 24);
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_20BB407A0;
  v6 = a2 + v5;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MPPB_KeyAndIndex()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.isInitialized.getter in conformance MPPB_KeyAndIndex(uint64_t a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + *(int *)(a1 + 20) + 8) >> 60 == 15)
    return 0;
  else
    return (*(unsigned __int8 *)(v1 + *(int *)(a1 + 24) + 8) ^ 1) & 1;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MPPB_KeyAndIndex()
{
  return MPPB_KeyAndIndex.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MPPB_KeyAndIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MPPB_KeyAndIndex.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MPPB_KeyAndIndex()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_KeyAndIndex@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MPPB_KeyAndIndex._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for _NameMap();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPPB_KeyAndIndex()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MPPB_KeyAndIndex()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
  return Message.hash(into:)();
}

uint64_t MPPB_RatchetState.isInitialized.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  char v13;
  char v14;
  uint64_t v16;

  v1 = type metadata accessor for MPPB_KeyAndIndex(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v16 - v9;
  v11 = (uint64_t)v0 + *(int *)(type metadata accessor for MPPB_RatchetState(0) + 24);
  outlined init with copy of MPPB_KeyAndIndex?(v11, (uint64_t)v10);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 48);
  LODWORD(v2) = v12(v10, 1, v1);
  outlined destroy of TetraSessionStates?((uint64_t)v10, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  if ((_DWORD)v2 != 1)
  {
    outlined init with copy of MPPB_KeyAndIndex?(v11, (uint64_t)v8);
    if (v12(v8, 1, v1) == 1)
    {
      outlined destroy of TetraSessionStates?((uint64_t)v8, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
LABEL_8:
      specialized _arrayForceCast<A, B>(_:)(*v0);
      v14 = static Internal.areAllInitialized(_:)();
      swift_bridgeObjectRelease();
      return v14 & 1;
    }
    outlined init with take of MPPB_KeyAndIndex((uint64_t)v8, (uint64_t)v4);
    if (*(_QWORD *)&v4[*(int *)(v1 + 20) + 8] >> 60 == 15)
    {
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v4);
    }
    else
    {
      v13 = v4[*(int *)(v1 + 24) + 8];
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v4);
      if ((v13 & 1) == 0)
        goto LABEL_8;
    }
  }
  v14 = 0;
  return v14 & 1;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *boxed_opaque_existential_1;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for MPPB_KeyAndIndex(0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v17 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v7 = v17;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      outlined init with copy of MPPB_KeyAndIndex(v8, (uint64_t)v5);
      v17 = v7;
      v11 = *(_QWORD *)(v7 + 16);
      v10 = *(_QWORD *)(v7 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        v7 = v17;
      }
      v15 = v2;
      v16 = lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v14);
      outlined init with copy of MPPB_KeyAndIndex((uint64_t)v5, (uint64_t)boxed_opaque_existential_1);
      *(_QWORD *)(v7 + 16) = v11 + 1;
      outlined init with take of Message(&v14, v7 + 40 * v11 + 32);
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v5);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t MPPB_RatchetState.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for MPPB_KeyAndIndex(0);
        lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        closure #1 in MPPB_RatchetState.decodeMessage<A>(decoder:)();
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #1 in MPPB_RatchetState.decodeMessage<A>(decoder:)()
{
  type metadata accessor for MPPB_RatchetState(0);
  type metadata accessor for MPPB_KeyAndIndex(0);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t MPPB_RatchetState.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in MPPB_RatchetState.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    if (*(_QWORD *)(*(_QWORD *)v0 + 16))
    {
      type metadata accessor for MPPB_KeyAndIndex(0);
      lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    type metadata accessor for MPPB_RatchetState(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in MPPB_RatchetState.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MPPB_KeyAndIndex(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MPPB_RatchetState(0);
  outlined init with copy of MPPB_KeyAndIndex?(a1 + *(int *)(v9 + 24), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of TetraSessionStates?((uint64_t)v4, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined init with take of MPPB_KeyAndIndex((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of MPPB_KeyAndIndex((uint64_t)v8);
}

uint64_t protocol witness for Message.init() in conformance MPPB_RatchetState@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for MPPB_KeyAndIndex(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MPPB_RatchetState()
{
  return 0xD000000000000011;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance MPPB_RatchetState())()
{
  return destructiveProjectEnumData for TetraDBErrors;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MPPB_RatchetState()
{
  return MPPB_RatchetState.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MPPB_RatchetState()
{
  return MPPB_RatchetState.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MPPB_RatchetState()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, type metadata accessor for MPPB_RatchetState, (uint64_t)&protocol conformance descriptor for MPPB_RatchetState);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_RatchetState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MPPB_RatchetState._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPPB_RatchetState()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, type metadata accessor for MPPB_RatchetState, (uint64_t)&protocol conformance descriptor for MPPB_RatchetState);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MPPB_RatchetState()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, type metadata accessor for MPPB_RatchetState, (uint64_t)&protocol conformance descriptor for MPPB_RatchetState);
  return Message.hash(into:)();
}

uint64_t MPPB_SKIncomingRatchet.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        type metadata accessor for MPPB_KeyAndIndex(0);
        lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        break;
      }
LABEL_11:
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for MPPB_SKIncomingRatchet(0);
    dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    goto LABEL_11;
  }
  return result;
}

uint64_t MPPB_SKIncomingRatchet.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #2 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for MPPB_SKIncomingRatchet);
  if (!v4)
  {
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      type metadata accessor for MPPB_KeyAndIndex(0);
      lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    }
    closure #2 in MPPB_SKIncomingRatchet.traverse<A>(visitor:)(v3);
    type metadata accessor for MPPB_SKIncomingRatchet(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  result = a5(0);
  v7 = a1 + *(int *)(result + 24);
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    v9 = *(_QWORD *)v7;
    outlined copy of Data._Representation(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v9, v8);
  }
  return result;
}

uint64_t closure #2 in MPPB_SKIncomingRatchet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for MPPB_SKIncomingRatchet(0);
  v3 = a1 + *(int *)(result + 28);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

double protocol witness for Message.init() in conformance MPPB_SKIncomingRatchet@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double result;
  uint64_t v5;

  *a2 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  result = 0.0;
  v5 = *(int *)(a1 + 28);
  *(_OWORD *)((char *)a2 + *(int *)(a1 + 24)) = xmmword_20BB407A0;
  *(_OWORD *)((char *)a2 + v5) = xmmword_20BB407A0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MPPB_SKIncomingRatchet()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.isInitialized.getter in conformance MPPB_SKIncomingRatchet(uint64_t a1)
{
  uint64_t *v1;
  char v3;

  if (*(unint64_t *)((char *)v1 + *(int *)(a1 + 24) + 8) >> 60 == 15
    || *(unint64_t *)((char *)v1 + *(int *)(a1 + 28) + 8) >> 60 == 15)
  {
    return 0;
  }
  specialized _arrayForceCast<A, B>(_:)(*v1);
  v3 = static Internal.areAllInitialized(_:)();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance MPPB_RatchetState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance MPPB_RatchetState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MPPB_SKIncomingRatchet()
{
  return MPPB_SKIncomingRatchet.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MPPB_SKIncomingRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MPPB_SKIncomingRatchet.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MPPB_SKIncomingRatchet()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, type metadata accessor for MPPB_SKIncomingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKIncomingRatchet);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKIncomingRatchet@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MPPB_SKIncomingRatchet._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPPB_SKIncomingRatchet()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, type metadata accessor for MPPB_SKIncomingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKIncomingRatchet);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MPPB_SKIncomingRatchet()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, type metadata accessor for MPPB_SKIncomingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKIncomingRatchet);
  return Message.hash(into:)();
}

uint64_t MPPB_SKOutgoingRatchet.isInitialized.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int *v20;
  int *v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v1 = type metadata accessor for MPPB_KeyAndIndex(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v34 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v34 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v34 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v34 - v18;
  v20 = (int *)type metadata accessor for MPPB_SKOutgoingRatchet(0);
  if (*(_QWORD *)(v0 + v20[5] + 8) >> 60 == 15)
    return 0;
  v21 = v20;
  if (*(_QWORD *)(v0 + v20[6] + 8) >> 60 == 15)
    return 0;
  v35 = v11;
  v36 = v5;
  v22 = v0 + v20[7];
  outlined init with copy of MPPB_KeyAndIndex?(v22, (uint64_t)v19);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48);
  v37 = v1;
  v24 = v23(v19, 1, v1);
  outlined destroy of TetraSessionStates?((uint64_t)v19, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  if (v24 == 1)
    return 0;
  v25 = v0 + v21[8];
  outlined init with copy of MPPB_KeyAndIndex?(v25, (uint64_t)v17);
  v26 = v37;
  v27 = v23(v17, 1, v37);
  outlined destroy of TetraSessionStates?((uint64_t)v17, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  if (v27 == 1)
    return 0;
  v29 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v23;
  outlined init with copy of MPPB_KeyAndIndex?(v22, (uint64_t)v14);
  if (v23(v14, 1, v26) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v14, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    v30 = (uint64_t)v35;
    v31 = (uint64_t)v36;
  }
  else
  {
    outlined init with take of MPPB_KeyAndIndex((uint64_t)v14, (uint64_t)v7);
    v30 = (uint64_t)v35;
    v31 = (uint64_t)v36;
    if (*(_QWORD *)&v7[*(int *)(v26 + 20) + 8] >> 60 == 15)
    {
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v7);
      return 0;
    }
    v32 = v7[*(int *)(v26 + 24) + 8];
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v7);
    if ((v32 & 1) != 0)
      return 0;
  }
  outlined init with copy of MPPB_KeyAndIndex?(v25, v30);
  if (v29(v30, 1, v26) != 1)
  {
    outlined init with take of MPPB_KeyAndIndex(v30, v31);
    if (*(_QWORD *)(v31 + *(int *)(v26 + 20) + 8) >> 60 == 15)
    {
      outlined destroy of MPPB_KeyAndIndex(v31);
    }
    else
    {
      v33 = *(_BYTE *)(v31 + *(int *)(v26 + 24) + 8);
      outlined destroy of MPPB_KeyAndIndex(v31);
      if ((v33 & 1) == 0)
        return 1;
    }
    return 0;
  }
  outlined destroy of TetraSessionStates?(v30, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  return 1;
}

uint64_t MPPB_SKOutgoingRatchet.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for MPPB_SKOutgoingRatchet(0);
          v4 = v3;
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          goto LABEL_5;
        case 3:
          v4 = v3;
          closure #3 in MPPB_SKOutgoingRatchet.decodeMessage<A>(decoder:)();
          goto LABEL_5;
        case 4:
          v4 = v3;
          closure #4 in MPPB_SKOutgoingRatchet.decodeMessage<A>(decoder:)();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t closure #3 in MPPB_SKOutgoingRatchet.decodeMessage<A>(decoder:)()
{
  type metadata accessor for MPPB_SKOutgoingRatchet(0);
  type metadata accessor for MPPB_KeyAndIndex(0);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t closure #4 in MPPB_SKOutgoingRatchet.decodeMessage<A>(decoder:)()
{
  type metadata accessor for MPPB_SKOutgoingRatchet(0);
  type metadata accessor for MPPB_KeyAndIndex(0);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t MPPB_SKOutgoingRatchet.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for MPPB_SKOutgoingRatchet);
  if (!v4)
  {
    closure #2 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for MPPB_SKOutgoingRatchet);
    closure #3 in MPPB_SKOutgoingRatchet.traverse<A>(visitor:)(v3);
    closure #4 in MPPB_SKOutgoingRatchet.traverse<A>(visitor:)(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #3 in MPPB_SKOutgoingRatchet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MPPB_KeyAndIndex(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MPPB_SKOutgoingRatchet(0);
  outlined init with copy of MPPB_KeyAndIndex?(a1 + *(int *)(v9 + 28), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of TetraSessionStates?((uint64_t)v4, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined init with take of MPPB_KeyAndIndex((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of MPPB_KeyAndIndex((uint64_t)v8);
}

uint64_t closure #4 in MPPB_SKOutgoingRatchet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v11[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MPPB_KeyAndIndex(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MPPB_SKOutgoingRatchet(0);
  outlined init with copy of MPPB_KeyAndIndex?(a1 + *(int *)(v9 + 32), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    return outlined destroy of TetraSessionStates?((uint64_t)v4, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined init with take of MPPB_KeyAndIndex((uint64_t)v4, (uint64_t)v8);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return outlined destroy of MPPB_KeyAndIndex((uint64_t)v8);
}

uint64_t protocol witness for Message.init() in conformance MPPB_SKOutgoingRatchet@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  UnknownStorage.init()();
  v4 = a1[6];
  *(_OWORD *)(a2 + a1[5]) = xmmword_20BB407A0;
  *(_OWORD *)(a2 + v4) = xmmword_20BB407A0;
  v5 = a2 + a1[7];
  v6 = type metadata accessor for MPPB_KeyAndIndex(0);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v8(v5, 1, 1, v6);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v8)(a2 + a1[8], 1, 1, v6);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MPPB_SKOutgoingRatchet()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance MPPB_SKPaddedStatus@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance MPPB_SKPaddedStatus(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MPPB_SKOutgoingRatchet()
{
  return MPPB_SKOutgoingRatchet.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MPPB_SKOutgoingRatchet.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MPPB_SKOutgoingRatchet()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, type metadata accessor for MPPB_SKOutgoingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKOutgoingRatchet);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKOutgoingRatchet@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static MPPB_SKOutgoingRatchet._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPPB_SKOutgoingRatchet()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, type metadata accessor for MPPB_SKOutgoingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKOutgoingRatchet);
  return Message.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MPPB_SKPaddedStatus()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MPPB_SKOutgoingRatchet()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, type metadata accessor for MPPB_SKOutgoingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKOutgoingRatchet);
  return Message.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MPPB_SKPaddedStatus()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t base witness table accessor for Equatable in MPPB_SKOutgoingRatchet()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, type metadata accessor for MPPB_SKOutgoingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKOutgoingRatchet);
}

uint64_t type metadata accessor for MPPB_SKOutgoingRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for MPPB_SKOutgoingRatchet);
}

uint64_t base witness table accessor for Message in MPPB_SKOutgoingRatchet()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, type metadata accessor for MPPB_SKOutgoingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKOutgoingRatchet);
}

uint64_t base witness table accessor for Hashable in MPPB_SKOutgoingRatchet()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, type metadata accessor for MPPB_SKOutgoingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKOutgoingRatchet);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MPPB_SKOutgoingRatchet()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, type metadata accessor for MPPB_SKOutgoingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKOutgoingRatchet);
}

uint64_t base witness table accessor for Equatable in MPPB_SKIncomingRatchet()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, type metadata accessor for MPPB_SKIncomingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKIncomingRatchet);
}

uint64_t type metadata accessor for MPPB_SKIncomingRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for MPPB_SKIncomingRatchet);
}

uint64_t base witness table accessor for Message in MPPB_SKIncomingRatchet()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, type metadata accessor for MPPB_SKIncomingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKIncomingRatchet);
}

uint64_t base witness table accessor for Hashable in MPPB_SKIncomingRatchet()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, type metadata accessor for MPPB_SKIncomingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKIncomingRatchet);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MPPB_SKIncomingRatchet()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, type metadata accessor for MPPB_SKIncomingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKIncomingRatchet);
}

uint64_t base witness table accessor for Equatable in MPPB_RatchetState()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, type metadata accessor for MPPB_RatchetState, (uint64_t)&protocol conformance descriptor for MPPB_RatchetState);
}

uint64_t base witness table accessor for Message in MPPB_RatchetState()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, type metadata accessor for MPPB_RatchetState, (uint64_t)&protocol conformance descriptor for MPPB_RatchetState);
}

uint64_t base witness table accessor for Hashable in MPPB_RatchetState()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, type metadata accessor for MPPB_RatchetState, (uint64_t)&protocol conformance descriptor for MPPB_RatchetState);
}

uint64_t base witness table accessor for Equatable in MPPB_KeyAndIndex()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
}

uint64_t base witness table accessor for Message in MPPB_KeyAndIndex()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
}

uint64_t base witness table accessor for Hashable in MPPB_KeyAndIndex()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MPPB_KeyAndIndex()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_KeyAndIndex and conformance MPPB_KeyAndIndex, type metadata accessor for MPPB_KeyAndIndex, (uint64_t)&protocol conformance descriptor for MPPB_KeyAndIndex);
}

uint64_t base witness table accessor for Equatable in MPPB_SKPaddedStatus()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, type metadata accessor for MPPB_SKPaddedStatus, (uint64_t)&protocol conformance descriptor for MPPB_SKPaddedStatus);
}

uint64_t type metadata accessor for MPPB_SKPaddedStatus(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for MPPB_SKPaddedStatus);
}

uint64_t base witness table accessor for Message in MPPB_SKPaddedStatus()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, type metadata accessor for MPPB_SKPaddedStatus, (uint64_t)&protocol conformance descriptor for MPPB_SKPaddedStatus);
}

uint64_t base witness table accessor for Hashable in MPPB_SKPaddedStatus()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, type metadata accessor for MPPB_SKPaddedStatus, (uint64_t)&protocol conformance descriptor for MPPB_SKPaddedStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MPPB_SKPaddedStatus()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, type metadata accessor for MPPB_SKPaddedStatus, (uint64_t)&protocol conformance descriptor for MPPB_SKPaddedStatus);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MPPB_RatchetState()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_RatchetState and conformance MPPB_RatchetState, type metadata accessor for MPPB_RatchetState, (uint64_t)&protocol conformance descriptor for MPPB_RatchetState);
}

uint64_t outlined init with take of MPPB_KeyAndIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MPPB_KeyAndIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  char *v23;
  int v24;
  char v25;
  BOOL v27;
  _QWORD v29[6];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for MPPB_KeyAndIndex(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)v29 - v9;
  v32 = a1;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
  {
LABEL_25:
    v25 = 0;
    return v25 & 1;
  }
  if (v11 && v32 != a2)
  {
    v29[4] = 0;
    v29[5] = a2;
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v30 = *(_QWORD *)(v8 + 72);
    v31 = v4;
    v13 = v11 - 1;
    while (1)
    {
      outlined init with copy of MPPB_KeyAndIndex(v32 + v12, (uint64_t)v10);
      outlined init with copy of MPPB_KeyAndIndex(a2 + v12, (uint64_t)v7);
      v14 = *(int *)(v4 + 20);
      v16 = *(_QWORD *)&v10[v14];
      v15 = *(_QWORD *)&v10[v14 + 8];
      v17 = (uint64_t *)&v7[v14];
      v18 = *v17;
      v19 = v17[1];
      if (v15 >> 60 != 15)
        break;
      if (v19 >> 60 != 15)
        goto LABEL_23;
      v4 = v31;
      v20 = *(int *)(v31 + 24);
      v21 = &v10[v20];
      v22 = v10[v20 + 8];
      v23 = &v7[v20];
      v24 = v7[v20 + 8];
      if ((v22 & 1) != 0)
      {
        if (!v24)
          goto LABEL_24;
      }
      else
      {
        if (*(_QWORD *)v21 != *(_QWORD *)v23)
          LOBYTE(v24) = 1;
        if ((v24 & 1) != 0)
          goto LABEL_24;
      }
      type metadata accessor for UnknownStorage();
      lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v7);
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v10);
      v27 = v13-- != 0;
      if ((v25 & 1) != 0)
      {
        v12 += v30;
        if (v27)
          continue;
      }
      return v25 & 1;
    }
    if (v19 >> 60 != 15)
      __asm { BR              X8 }
LABEL_23:
    outlined copy of Data?(v16, v15);
    outlined copy of Data?(v18, v19);
    outlined consume of Data?(v16, v15);
    outlined consume of Data?(v18, v19);
LABEL_24:
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v7);
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v10);
    goto LABEL_25;
  }
  v25 = 1;
  return v25 & 1;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<MPPB_KeyAndIndex>, type metadata accessor for MPPB_KeyAndIndex);
  *v3 = result;
  return result;
}

uint64_t outlined init with copy of MPPB_KeyAndIndex(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MPPB_KeyAndIndex(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Message(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Message>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Message);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static MPPB_SKOutgoingRatchet.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v4 = type metadata accessor for UnknownStorage();
  v77 = *(_QWORD *)(v4 - 8);
  v78 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v76 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v75 = (char *)&v75 - v7;
  v86 = type metadata accessor for MPPB_KeyAndIndex(0);
  v8 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  v80 = (uint64_t)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MPPB_KeyAndIndex?, MPPB_KeyAndIndex?));
  v10 = MEMORY[0x24BDAC7A8](v85);
  v83 = (uint64_t)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v84 = (uint64_t)&v75 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v79 = (uint64_t)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v81 = (uint64_t)&v75 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v82 = (uint64_t)&v75 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v75 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v75 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v75 - v26;
  v28 = (int *)type metadata accessor for MPPB_SKOutgoingRatchet(0);
  v29 = v28[5];
  v87 = a1;
  v88 = a2;
  v30 = *(_QWORD *)(a1 + v29);
  v31 = *(_QWORD *)(a1 + v29 + 8);
  v32 = (uint64_t *)(a2 + v29);
  v34 = *v32;
  v33 = v32[1];
  if (v31 >> 60 == 15)
  {
    if (v33 >> 60 == 15)
      goto LABEL_7;
LABEL_5:
    outlined copy of Data?(v30, v31);
    outlined copy of Data?(v34, v33);
    outlined consume of Data?(v30, v31);
    v35 = v34;
    v36 = v33;
LABEL_12:
    outlined consume of Data?(v35, v36);
    goto LABEL_13;
  }
  if (v33 >> 60 == 15)
    goto LABEL_5;
  outlined copy of Data?(v30, v31);
  outlined copy of Data?(v34, v33);
  specialized static Data.== infix(_:_:)(v30, v31);
  v38 = v37;
  outlined consume of Data?(v34, v33);
  outlined consume of Data?(v30, v31);
  if ((v38 & 1) == 0)
    goto LABEL_13;
LABEL_7:
  v39 = v28[6];
  v40 = v87 + v39;
  v41 = *(_QWORD *)(v87 + v39);
  v42 = *(_QWORD *)(v87 + v39 + 8);
  v43 = (uint64_t *)(v88 + v39);
  v44 = *v43;
  v45 = v43[1];
  if (v42 >> 60 == 15)
  {
    if (v45 >> 60 == 15)
      goto LABEL_16;
    goto LABEL_11;
  }
  if (v45 >> 60 == 15)
  {
LABEL_11:
    outlined copy of Data?(*(_QWORD *)v40, *(_QWORD *)(v40 + 8));
    outlined copy of Data?(v44, v45);
    outlined consume of Data?(v41, v42);
    v35 = v44;
    v36 = v45;
    goto LABEL_12;
  }
  outlined copy of Data?(*(_QWORD *)v40, *(_QWORD *)(v40 + 8));
  outlined copy of Data?(v44, v45);
  specialized static Data.== infix(_:_:)(v41, v42);
  v49 = v48;
  outlined consume of Data?(v44, v45);
  outlined consume of Data?(v41, v42);
  if ((v49 & 1) == 0)
    goto LABEL_13;
LABEL_16:
  outlined init with copy of MPPB_KeyAndIndex?(v87 + v28[7], (uint64_t)v27);
  outlined init with copy of MPPB_KeyAndIndex?(v88 + v28[7], (uint64_t)v25);
  v50 = v84;
  v51 = v85;
  v52 = v84 + *(int *)(v85 + 48);
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)v27, v84);
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)v25, v52);
  v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  v54 = v86;
  if (v53(v50, 1, v86) != 1)
  {
    outlined init with copy of MPPB_KeyAndIndex?(v50, (uint64_t)v22);
    if (v53(v52, 1, v54) != 1)
    {
      v56 = v52;
      v57 = v50;
      v58 = v80;
      outlined init with take of MPPB_KeyAndIndex(v56, v80);
      v59 = specialized static MPPB_KeyAndIndex.== infix(_:_:)((uint64_t)v22, v58);
      outlined destroy of MPPB_KeyAndIndex(v58);
      outlined destroy of TetraSessionStates?((uint64_t)v25, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      outlined destroy of TetraSessionStates?((uint64_t)v27, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v22);
      outlined destroy of TetraSessionStates?(v57, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      if ((v59 & 1) == 0)
        goto LABEL_13;
      goto LABEL_23;
    }
    outlined destroy of TetraSessionStates?((uint64_t)v25, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of TetraSessionStates?((uint64_t)v27, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v22);
LABEL_21:
    v55 = v50;
LABEL_29:
    outlined destroy of TetraSessionStates?(v55, &demangling cache variable for type metadata for (MPPB_KeyAndIndex?, MPPB_KeyAndIndex?));
    goto LABEL_13;
  }
  outlined destroy of TetraSessionStates?((uint64_t)v25, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined destroy of TetraSessionStates?((uint64_t)v27, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  if (v53(v52, 1, v54) != 1)
    goto LABEL_21;
  outlined destroy of TetraSessionStates?(v50, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
LABEL_23:
  v60 = v82;
  outlined init with copy of MPPB_KeyAndIndex?(v87 + v28[8], v82);
  v61 = v88 + v28[8];
  v62 = v81;
  outlined init with copy of MPPB_KeyAndIndex?(v61, v81);
  v63 = v83;
  v64 = v83 + *(int *)(v51 + 48);
  outlined init with copy of MPPB_KeyAndIndex?(v60, v83);
  outlined init with copy of MPPB_KeyAndIndex?(v62, v64);
  if (v53(v63, 1, v54) == 1)
  {
    outlined destroy of TetraSessionStates?(v62, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of TetraSessionStates?(v60, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    if (v53(v64, 1, v54) == 1)
    {
      outlined destroy of TetraSessionStates?(v63, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
LABEL_31:
      v70 = v77;
      v69 = v78;
      v71 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
      v72 = v75;
      v71(v75, v87, v78);
      v73 = v76;
      v71(v76, v88, v69);
      lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      v74 = *(void (**)(char *, uint64_t))(v70 + 8);
      v74(v73, v69);
      v74(v72, v69);
      return v46 & 1;
    }
    goto LABEL_28;
  }
  v65 = v79;
  outlined init with copy of MPPB_KeyAndIndex?(v63, v79);
  if (v53(v64, 1, v54) == 1)
  {
    outlined destroy of TetraSessionStates?(v62, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of TetraSessionStates?(v60, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of MPPB_KeyAndIndex(v65);
LABEL_28:
    v55 = v63;
    goto LABEL_29;
  }
  v66 = v64;
  v67 = v80;
  outlined init with take of MPPB_KeyAndIndex(v66, v80);
  v68 = specialized static MPPB_KeyAndIndex.== infix(_:_:)(v65, v67);
  outlined destroy of MPPB_KeyAndIndex(v67);
  outlined destroy of TetraSessionStates?(v62, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined destroy of TetraSessionStates?(v60, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined destroy of MPPB_KeyAndIndex(v65);
  outlined destroy of TetraSessionStates?(v63, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  if ((v68 & 1) != 0)
    goto LABEL_31;
LABEL_13:
  v46 = 0;
  return v46 & 1;
}

uint64_t specialized static MPPB_SKIncomingRatchet.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  char v21;
  char v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  char *v27;
  char v28;
  void (*v29)(char *, uint64_t);
  char *v31;
  uint64_t v32;

  v4 = type metadata accessor for UnknownStorage();
  v32 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v31 - v8;
  v10 = (int *)type metadata accessor for MPPB_SKIncomingRatchet(0);
  v11 = v10[6];
  v12 = *(uint64_t *)((char *)a1 + v11);
  v13 = *(uint64_t *)((char *)a1 + v11 + 8);
  v14 = (uint64_t *)((char *)a2 + v11);
  v15 = *v14;
  v16 = v14[1];
  v31 = v7;
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 != 15)
      goto LABEL_5;
  }
  else
  {
    if (v16 >> 60 == 15)
      goto LABEL_5;
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    specialized static Data.== infix(_:_:)(v12, v13);
    v18 = v17;
    outlined consume of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    if ((v18 & 1) == 0)
      goto LABEL_14;
  }
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0)
    goto LABEL_14;
  v19 = v10[7];
  v12 = *(uint64_t *)((char *)a1 + v19);
  v13 = *(uint64_t *)((char *)a1 + v19 + 8);
  v20 = (uint64_t *)((char *)a2 + v19);
  v15 = *v20;
  v16 = v20[1];
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 == 15)
      goto LABEL_13;
    goto LABEL_5;
  }
  if (v16 >> 60 == 15)
  {
LABEL_5:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v15, v16);
LABEL_14:
    v28 = 0;
    return v28 & 1;
  }
  outlined copy of Data?(v12, v13);
  outlined copy of Data?(v15, v16);
  specialized static Data.== infix(_:_:)(v12, v13);
  v22 = v21;
  outlined consume of Data?(v15, v16);
  outlined consume of Data?(v12, v13);
  if ((v22 & 1) == 0)
    goto LABEL_14;
LABEL_13:
  v23 = (char *)a1 + v10[5];
  v24 = v32;
  v25 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
  v25(v9, v23, v4);
  v26 = (char *)a2 + v10[5];
  v27 = v31;
  v25(v31, v26, v4);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  v29 = *(void (**)(char *, uint64_t))(v24 + 8);
  v29(v27, v4);
  v29(v9, v4);
  return v28 & 1;
}

uint64_t specialized static MPPB_SKPaddedStatus.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v28;
  char v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;

  v4 = type metadata accessor for UnknownStorage();
  v35 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v34 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v34 - v7;
  v9 = type metadata accessor for MPPB_SKPaddedStatus(0);
  v10 = *(int *)(v9 + 20);
  v11 = *(_QWORD *)(a1 + v10);
  v12 = *(_QWORD *)(a1 + v10 + 8);
  v13 = (uint64_t *)(a2 + v10);
  v14 = *v13;
  v15 = v13[1];
  if (v12 >> 60 != 15)
  {
    if (v15 >> 60 != 15)
    {
      outlined copy of Data?(v11, v12);
      outlined copy of Data?(v14, v15);
      specialized static Data.== infix(_:_:)(v11, v12);
      v19 = v18;
      outlined consume of Data?(v14, v15);
      outlined consume of Data?(v11, v12);
      if ((v19 & 1) == 0)
        goto LABEL_13;
      goto LABEL_7;
    }
LABEL_5:
    outlined copy of Data?(v11, v12);
    outlined copy of Data?(v14, v15);
    outlined consume of Data?(v11, v12);
    v16 = v14;
    v17 = v15;
LABEL_12:
    outlined consume of Data?(v16, v17);
    goto LABEL_13;
  }
  if (v15 >> 60 != 15)
    goto LABEL_5;
LABEL_7:
  v20 = *(int *)(v9 + 24);
  v21 = *(_QWORD *)(a1 + v20);
  v22 = *(_QWORD *)(a1 + v20 + 8);
  v23 = (uint64_t *)(a2 + v20);
  v24 = *v23;
  v25 = v23[1];
  if (v22 >> 60 == 15)
  {
    if (v25 >> 60 == 15)
      goto LABEL_16;
    goto LABEL_11;
  }
  if (v25 >> 60 == 15)
  {
LABEL_11:
    outlined copy of Data?(v21, v22);
    outlined copy of Data?(v24, v25);
    outlined consume of Data?(v21, v22);
    v16 = v24;
    v17 = v25;
    goto LABEL_12;
  }
  outlined copy of Data?(v21, v22);
  outlined copy of Data?(v24, v25);
  specialized static Data.== infix(_:_:)(v21, v22);
  v29 = v28;
  outlined consume of Data?(v24, v25);
  outlined consume of Data?(v21, v22);
  if ((v29 & 1) != 0)
  {
LABEL_16:
    v30 = v35;
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
    v31(v8, a1, v4);
    v32 = v34;
    v31(v34, a2, v4);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v26 = dispatch thunk of static Equatable.== infix(_:_:)();
    v33 = *(void (**)(char *, uint64_t))(v30 + 8);
    v33(v32, v4);
    v33(v8, v4);
    return v26 & 1;
  }
LABEL_13:
  v26 = 0;
  return v26 & 1;
}

uint64_t specialized static MPPB_RatchetState.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  uint64_t v35;
  char *v36;
  char v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;

  v41 = type metadata accessor for UnknownStorage();
  v44 = *(_QWORD *)(v41 - 8);
  v4 = MEMORY[0x24BDAC7A8](v41);
  v43 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v42 = (char *)&v40 - v6;
  v7 = type metadata accessor for MPPB_KeyAndIndex(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v45 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (MPPB_KeyAndIndex?, MPPB_KeyAndIndex?));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v40 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v40 - v20;
  v22 = type metadata accessor for MPPB_RatchetState(0);
  v23 = *(int *)(v22 + 24);
  v46 = a1;
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)a1 + v23, (uint64_t)v21);
  v24 = *(int *)(v22 + 24);
  v47 = a2;
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)a2 + v24, (uint64_t)v19);
  v25 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)v21, (uint64_t)v12);
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)v19, v25);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (v26((uint64_t)v12, 1, v7) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v19, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of TetraSessionStates?((uint64_t)v21, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    if (v26(v25, 1, v7) == 1)
    {
      outlined destroy of TetraSessionStates?((uint64_t)v12, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of MPPB_KeyAndIndex?((uint64_t)v12, (uint64_t)v16);
  if (v26(v25, 1, v7) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v19, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of TetraSessionStates?((uint64_t)v21, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v16);
LABEL_6:
    outlined destroy of TetraSessionStates?((uint64_t)v12, &demangling cache variable for type metadata for (MPPB_KeyAndIndex?, MPPB_KeyAndIndex?));
LABEL_10:
    v37 = 0;
    return v37 & 1;
  }
  v27 = v45;
  outlined init with take of MPPB_KeyAndIndex(v25, v45);
  v28 = specialized static MPPB_KeyAndIndex.== infix(_:_:)((uint64_t)v16, v27);
  outlined destroy of MPPB_KeyAndIndex(v27);
  outlined destroy of TetraSessionStates?((uint64_t)v19, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined destroy of TetraSessionStates?((uint64_t)v21, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined destroy of MPPB_KeyAndIndex((uint64_t)v16);
  outlined destroy of TetraSessionStates?((uint64_t)v12, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  if ((v28 & 1) == 0)
    goto LABEL_10;
LABEL_8:
  v29 = v46;
  v30 = v47;
  if ((specialized static Array<A>.== infix(_:_:)(*v46, *v47) & 1) == 0)
    goto LABEL_10;
  v31 = (char *)v29 + *(int *)(v22 + 20);
  v32 = v44;
  v33 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
  v35 = v41;
  v34 = v42;
  v33(v42, v31, v41);
  v36 = v43;
  v33(v43, (char *)v30 + *(int *)(v22 + 20), v35);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  v38 = *(void (**)(char *, uint64_t))(v32 + 8);
  v38(v36, v35);
  v38(v34, v35);
  return v37 & 1;
}

uint64_t specialized static MPPB_KeyAndIndex.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  void (*v26)(_BYTE *, uint64_t, uint64_t);
  void (*v27)(_BYTE *, uint64_t);
  _BYTE v28[4];
  int v29;
  uint64_t v30;

  v4 = type metadata accessor for UnknownStorage();
  v30 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v28[-v8];
  v10 = type metadata accessor for MPPB_KeyAndIndex(0);
  v11 = *(int *)(v10 + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (uint64_t *)(a2 + v11);
  v15 = *v14;
  v16 = v14[1];
  if (v13 >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      outlined copy of Data?(v12, v13);
      outlined copy of Data?(v15, v16);
      specialized static Data.== infix(_:_:)(v12, v13);
      v29 = v19;
      outlined consume of Data?(v15, v16);
      outlined consume of Data?(v12, v13);
      if ((v29 & 1) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
LABEL_5:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v15, v16);
    goto LABEL_6;
  }
  if (v16 >> 60 != 15)
    goto LABEL_5;
LABEL_9:
  v20 = *(int *)(v10 + 24);
  v21 = (_QWORD *)(a1 + v20);
  v22 = *(_BYTE *)(a1 + v20 + 8);
  v23 = (_QWORD *)(a2 + v20);
  v24 = *(unsigned __int8 *)(a2 + v20 + 8);
  if ((v22 & 1) != 0)
  {
    if (v24)
    {
LABEL_15:
      v25 = v30;
      v26 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v30 + 16);
      v26(v9, a1, v4);
      v26(v7, a2, v4);
      lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      v27 = *(void (**)(_BYTE *, uint64_t))(v25 + 8);
      v27(v7, v4);
      v27(v9, v4);
      return v17 & 1;
    }
  }
  else
  {
    if (*v21 != *v23)
      LOBYTE(v24) = 1;
    if ((v24 & 1) == 0)
      goto LABEL_15;
  }
LABEL_6:
  v17 = 0;
  return v17 & 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for MPPB_SKPaddedStatus(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      outlined copy of Data._Representation(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = *(int *)(a3 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *((_QWORD *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
    }
    else
    {
      v18 = *(_QWORD *)v16;
      outlined copy of Data._Representation(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
      *(_QWORD *)v15 = v18;
      *((_QWORD *)v15 + 1) = v17;
    }
  }
  return a1;
}

uint64_t destroy for MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;

  v4 = type metadata accessor for UnknownStorage();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    result = outlined consume of Data._Representation(*v6, v7);
  v8 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    return outlined consume of Data._Representation(*v8, v9);
  return result;
}

uint64_t initializeWithCopy for MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v16 = *v14;
    outlined copy of Data._Representation(*v14, v14[1]);
    *(_QWORD *)v13 = v16;
    *(_QWORD *)(v13 + 8) = v15;
  }
  return a1;
}

uint64_t assignWithCopy for MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      v11 = *v9;
      outlined copy of Data._Representation(v11, v10);
      *v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v12 = *v9;
  outlined copy of Data._Representation(v12, v10);
  v13 = *v8;
  v14 = v8[1];
  *v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  v15 = *(int *)(a3 + 24);
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *(_QWORD *)(a2 + v15 + 8);
  if (*(_QWORD *)(a1 + v15 + 8) >> 60 != 15)
  {
    if (v18 >> 60 != 15)
    {
      v20 = *v17;
      outlined copy of Data._Representation(v20, v18);
      v21 = *v16;
      v22 = v16[1];
      *v16 = v20;
      v16[1] = v18;
      outlined consume of Data._Representation(v21, v22);
      return a1;
    }
    outlined destroy of Data((uint64_t)v16);
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    return a1;
  }
  v19 = *v17;
  outlined copy of Data._Representation(v19, v18);
  *v16 = v19;
  v16[1] = v18;
  return a1;
}

uint64_t initializeWithTake for MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for MPPB_SKPaddedStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)v8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *(_QWORD *)(a1 + v13 + 8);
  if (v16 >> 60 != 15)
  {
    v17 = v15[1];
    if (v17 >> 60 != 15)
    {
      v18 = *v14;
      *v14 = *v15;
      v14[1] = v17;
      outlined consume of Data._Representation(v18, v16);
      return a1;
    }
    outlined destroy of Data((uint64_t)v14);
  }
  *(_OWORD *)v14 = *(_OWORD *)v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for MPPB_SKPaddedStatus()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for MPPB_SKPaddedStatus()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for MPPB_SKPaddedStatus()
{
  return type metadata completion function for MPPB_KeyAndIndex();
}

uint64_t *initializeBufferWithCopyOfBuffer for MPPB_SKIncomingRatchet(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UnknownStorage();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (char *)v7 + v13;
    v15 = (char *)a2 + v13;
    v16 = *((_QWORD *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
    }
    else
    {
      v17 = *(_QWORD *)v15;
      outlined copy of Data._Representation(*(_QWORD *)v15, *((_QWORD *)v15 + 1));
      *(_QWORD *)v14 = v17;
      *((_QWORD *)v14 + 1) = v16;
    }
    v18 = a3[7];
    v19 = (char *)v7 + v18;
    v20 = (char *)a2 + v18;
    v21 = *((_QWORD *)v20 + 1);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
    }
    else
    {
      v22 = *(_QWORD *)v20;
      outlined copy of Data._Representation(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
      *(_QWORD *)v19 = v22;
      *((_QWORD *)v19 + 1) = v21;
    }
  }
  return v7;
}

uint64_t destroy for MPPB_SKIncomingRatchet(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v7 = (uint64_t *)(a1 + a2[6]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    result = outlined consume of Data._Representation(*v7, v8);
  v9 = (uint64_t *)(a1 + a2[7]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    return outlined consume of Data._Representation(*v9, v10);
  return result;
}

_QWORD *initializeWithCopy for MPPB_SKIncomingRatchet(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = *((_QWORD *)v13 + 1);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
  }
  else
  {
    v15 = *(_QWORD *)v13;
    outlined copy of Data._Representation(*(_QWORD *)v13, *((_QWORD *)v13 + 1));
    *(_QWORD *)v12 = v15;
    *((_QWORD *)v12 + 1) = v14;
  }
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = *((_QWORD *)v18 + 1);
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)v17 = *(_OWORD *)v18;
  }
  else
  {
    v20 = *(_QWORD *)v18;
    outlined copy of Data._Representation(*(_QWORD *)v18, *((_QWORD *)v18 + 1));
    *(_QWORD *)v17 = v20;
    *((_QWORD *)v17 + 1) = v19;
  }
  return a1;
}

_QWORD *assignWithCopy for MPPB_SKIncomingRatchet(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = *(_QWORD *)((char *)a2 + v10 + 8);
  if (*(_QWORD *)((char *)a1 + v10 + 8) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      v14 = *v12;
      outlined copy of Data._Representation(v14, v13);
      *v11 = v14;
      v11[1] = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v11);
LABEL_6:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  v15 = *v12;
  outlined copy of Data._Representation(v15, v13);
  v16 = *v11;
  v17 = v11[1];
  *v11 = v15;
  v11[1] = v13;
  outlined consume of Data._Representation(v16, v17);
LABEL_8:
  v18 = a3[7];
  v19 = (_QWORD *)((char *)a1 + v18);
  v20 = (_QWORD *)((char *)a2 + v18);
  v21 = *(_QWORD *)((char *)a2 + v18 + 8);
  if (*(_QWORD *)((char *)a1 + v18 + 8) >> 60 != 15)
  {
    if (v21 >> 60 != 15)
    {
      v23 = *v20;
      outlined copy of Data._Representation(v23, v21);
      v24 = *v19;
      v25 = v19[1];
      *v19 = v23;
      v19[1] = v21;
      outlined consume of Data._Representation(v24, v25);
      return a1;
    }
    outlined destroy of Data((uint64_t)v19);
    goto LABEL_13;
  }
  if (v21 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)v19 = *(_OWORD *)v20;
    return a1;
  }
  v22 = *v20;
  outlined copy of Data._Representation(v22, v21);
  *v19 = v22;
  v19[1] = v21;
  return a1;
}

_QWORD *initializeWithTake for MPPB_SKIncomingRatchet(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  return a1;
}

_QWORD *assignWithTake for MPPB_SKIncomingRatchet(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = a3[6];
  v11 = (uint64_t)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = *(_QWORD *)((char *)a1 + v10 + 8);
  if (v13 >> 60 == 15)
    goto LABEL_4;
  v14 = *((_QWORD *)v12 + 1);
  if (v14 >> 60 == 15)
  {
    outlined destroy of Data(v11);
LABEL_4:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    goto LABEL_6;
  }
  v15 = *(_QWORD *)v11;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_QWORD *)(v11 + 8) = v14;
  outlined consume of Data._Representation(v15, v13);
LABEL_6:
  v16 = a3[7];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  v19 = *(_QWORD *)((char *)a1 + v16 + 8);
  if (v19 >> 60 != 15)
  {
    v20 = v18[1];
    if (v20 >> 60 != 15)
    {
      v21 = *v17;
      *v17 = *v18;
      v17[1] = v20;
      outlined consume of Data._Representation(v21, v19);
      return a1;
    }
    outlined destroy of Data((uint64_t)v17);
  }
  *(_OWORD *)v17 = *(_OWORD *)v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for MPPB_SKIncomingRatchet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BAEF7BC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UnknownStorage();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for MPPB_SKIncomingRatchet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_20BAEF844(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for MPPB_SKIncomingRatchet()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MPPB_SKOutgoingRatchet(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t *, uint64_t *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = *((_QWORD *)v11 + 1);
    if (v12 >> 60 == 15)
    {
      *(_OWORD *)v10 = *(_OWORD *)v11;
    }
    else
    {
      v14 = *(_QWORD *)v11;
      outlined copy of Data._Representation(*(_QWORD *)v11, *((_QWORD *)v11 + 1));
      *(_QWORD *)v10 = v14;
      *((_QWORD *)v10 + 1) = v12;
    }
    v15 = a3[6];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = *((_QWORD *)v17 + 1);
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
    }
    else
    {
      v19 = *(_QWORD *)v17;
      outlined copy of Data._Representation(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
      *(_QWORD *)v16 = v19;
      *((_QWORD *)v16 + 1) = v18;
    }
    v20 = a3[7];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for MPPB_KeyAndIndex(0);
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    if (v25(v22, 1, v23))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v48 = v24;
      v49 = v8;
      v8((uint64_t *)v21, (uint64_t *)v22, v7);
      v27 = *(int *)(v23 + 20);
      v28 = &v21[v27];
      v29 = (uint64_t *)&v22[v27];
      v30 = v29[1];
      if (v30 >> 60 == 15)
      {
        *(_OWORD *)v28 = *(_OWORD *)v29;
      }
      else
      {
        v47 = *v29;
        outlined copy of Data._Representation(*v29, v30);
        *(_QWORD *)v28 = v47;
        *((_QWORD *)v28 + 1) = v30;
      }
      v31 = *(int *)(v23 + 24);
      v32 = &v21[v31];
      v33 = &v22[v31];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      v32[8] = v33[8];
      v24 = v48;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v21, 0, 1, v23);
      v8 = v49;
    }
    v34 = a3[8];
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    if (v25(v36, 1, v23))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v35, (uint64_t *)v36, v7);
      v38 = *(int *)(v23 + 20);
      v39 = &v35[v38];
      v40 = &v36[v38];
      v41 = *((_QWORD *)v40 + 1);
      if (v41 >> 60 == 15)
      {
        *(_OWORD *)v39 = *(_OWORD *)v40;
      }
      else
      {
        v42 = *(_QWORD *)v40;
        outlined copy of Data._Representation(*(_QWORD *)v40, *((_QWORD *)v40 + 1));
        *(_QWORD *)v39 = v42;
        *((_QWORD *)v39 + 1) = v41;
      }
      v43 = *(int *)(v23 + 24);
      v44 = &v35[v43];
      v45 = &v36[v43];
      *(_QWORD *)v44 = *(_QWORD *)v45;
      v44[8] = v45[8];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v35, 0, 1, v23);
    }
  }
  return a1;
}

uint64_t destroy for MPPB_SKOutgoingRatchet(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t *v17;
  unint64_t v18;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (uint64_t *)(a1 + a2[5]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    outlined consume of Data._Representation(*v6, v7);
  v8 = (uint64_t *)(a1 + a2[6]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    outlined consume of Data._Representation(*v8, v9);
  v10 = a1 + a2[7];
  v11 = type metadata accessor for MPPB_KeyAndIndex(0);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48);
  if (!v12(v10, 1, v11))
  {
    v5(v10, v4);
    v13 = (uint64_t *)(v10 + *(int *)(v11 + 20));
    v14 = v13[1];
    if (v14 >> 60 != 15)
      outlined consume of Data._Representation(*v13, v14);
  }
  v15 = a1 + a2[8];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v15, 1, v11);
  if (!(_DWORD)result)
  {
    result = ((uint64_t (*)(uint64_t, uint64_t))v5)(v15, v4);
    v17 = (uint64_t *)(v15 + *(int *)(v11 + 20));
    v18 = v17[1];
    if (v18 >> 60 != 15)
      return outlined consume of Data._Representation(*v17, v18);
  }
  return result;
}

uint64_t initializeWithCopy for MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = (uint64_t *)(a2 + v8);
  v11 = v10[1];
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
  }
  else
  {
    v12 = *v10;
    outlined copy of Data._Representation(*v10, v10[1]);
    *(_QWORD *)v9 = v12;
    *(_QWORD *)(v9 + 8) = v11;
  }
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = (uint64_t *)(a2 + v13);
  v16 = v15[1];
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  else
  {
    v17 = *v15;
    outlined copy of Data._Representation(*v15, v15[1]);
    *(_QWORD *)v14 = v17;
    *(_QWORD *)(v14 + 8) = v16;
  }
  v18 = a3[7];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for MPPB_KeyAndIndex(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v23(v20, 1, v21))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v46 = v22;
    v47 = v7;
    v7((uint64_t)v19, (uint64_t)v20, v6);
    v25 = *(int *)(v21 + 20);
    v26 = &v19[v25];
    v27 = (uint64_t *)&v20[v25];
    v28 = v27[1];
    if (v28 >> 60 == 15)
    {
      *(_OWORD *)v26 = *(_OWORD *)v27;
    }
    else
    {
      v45 = *v27;
      outlined copy of Data._Representation(*v27, v28);
      *(_QWORD *)v26 = v45;
      *((_QWORD *)v26 + 1) = v28;
    }
    v29 = *(int *)(v21 + 24);
    v30 = &v19[v29];
    v31 = &v20[v29];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v30[8] = v31[8];
    v22 = v46;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v19, 0, 1, v21);
    v7 = v47;
  }
  v32 = a3[8];
  v33 = (char *)(a1 + v32);
  v34 = (char *)(a2 + v32);
  if (v23(v34, 1, v21))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v33, (uint64_t)v34, v6);
    v36 = *(int *)(v21 + 20);
    v37 = &v33[v36];
    v38 = &v34[v36];
    v39 = *((_QWORD *)v38 + 1);
    if (v39 >> 60 == 15)
    {
      *(_OWORD *)v37 = *(_OWORD *)v38;
    }
    else
    {
      v40 = *(_QWORD *)v38;
      outlined copy of Data._Representation(*(_QWORD *)v38, *((_QWORD *)v38 + 1));
      *(_QWORD *)v37 = v40;
      *((_QWORD *)v37 + 1) = v39;
    }
    v41 = *(int *)(v21 + 24);
    v42 = &v33[v41];
    v43 = &v34[v41];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v42[8] = v43[8];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v33, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithCopy for MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  void (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;

  v6 = type metadata accessor for UnknownStorage();
  v89 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = *(_QWORD *)(a2 + v8 + 8);
  if (*(_QWORD *)(a1 + v8 + 8) >> 60 == 15)
  {
    if (v11 >> 60 != 15)
    {
      v12 = *v10;
      outlined copy of Data._Representation(v12, v11);
      *v9 = v12;
      v9[1] = v11;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v9);
LABEL_6:
    *(_OWORD *)v9 = *(_OWORD *)v10;
    goto LABEL_8;
  }
  v13 = *v10;
  outlined copy of Data._Representation(v13, v11);
  v14 = *v9;
  v15 = v9[1];
  *v9 = v13;
  v9[1] = v11;
  outlined consume of Data._Representation(v14, v15);
LABEL_8:
  v16 = a3[6];
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v19 = *(_QWORD *)(a2 + v16 + 8);
  if (*(_QWORD *)(a1 + v16 + 8) >> 60 == 15)
  {
    if (v19 >> 60 != 15)
    {
      v20 = *v18;
      outlined copy of Data._Representation(v20, v19);
      *v17 = v20;
      v17[1] = v19;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v19 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v17);
LABEL_13:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    goto LABEL_15;
  }
  v21 = *v18;
  outlined copy of Data._Representation(v21, v19);
  v22 = *v17;
  v23 = v17[1];
  *v17 = v21;
  v17[1] = v19;
  outlined consume of Data._Representation(v22, v23);
LABEL_15:
  v24 = a3[7];
  v25 = (char *)(a1 + v24);
  v26 = (char *)(a2 + v24);
  v27 = type metadata accessor for MPPB_KeyAndIndex(0);
  v88 = *(_QWORD *)(v27 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 48);
  v29 = v28(v25, 1, v27);
  v30 = v28(v26, 1, v27);
  if (!v29)
  {
    if (v30)
    {
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v25);
      goto LABEL_21;
    }
    v86 = v7;
    v7((uint64_t)v25, (uint64_t)v26, v6);
    v36 = *(int *)(v27 + 20);
    v37 = (uint64_t *)&v25[v36];
    v38 = (uint64_t *)&v26[v36];
    v39 = *(_QWORD *)&v26[v36 + 8];
    if (*(_QWORD *)&v25[v36 + 8] >> 60 == 15)
    {
      if (v39 >> 60 != 15)
      {
        v40 = *v38;
        v84 = *v38;
        v41 = *(_QWORD *)&v26[v36 + 8];
        outlined copy of Data._Representation(v40, v39);
        *v37 = v84;
        v37[1] = v41;
LABEL_31:
        v51 = *(int *)(v27 + 24);
        v52 = &v25[v51];
        v53 = &v26[v51];
        v54 = *(_QWORD *)v53;
        v52[8] = v53[8];
        *(_QWORD *)v52 = v54;
        v7 = v86;
        goto LABEL_32;
      }
    }
    else
    {
      if (v39 >> 60 != 15)
      {
        v47 = *v38;
        v85 = *v38;
        v48 = *(_QWORD *)&v26[v36 + 8];
        outlined copy of Data._Representation(v47, v39);
        v49 = *v37;
        v50 = v37[1];
        *v37 = v85;
        v37[1] = v48;
        outlined consume of Data._Representation(v49, v50);
        goto LABEL_31;
      }
      outlined destroy of Data((uint64_t)v37);
    }
    *(_OWORD *)v37 = *(_OWORD *)v38;
    goto LABEL_31;
  }
  if (v30)
  {
LABEL_21:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_32;
  }
  v83 = v6;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v25, v26, v6);
  v31 = *(int *)(v27 + 20);
  v32 = &v25[v31];
  v33 = (uint64_t *)&v26[v31];
  v34 = v33[1];
  if (v34 >> 60 == 15)
  {
    *(_OWORD *)v32 = *(_OWORD *)v33;
  }
  else
  {
    v87 = v7;
    v42 = *v33;
    outlined copy of Data._Representation(*v33, v34);
    *(_QWORD *)v32 = v42;
    *((_QWORD *)v32 + 1) = v34;
    v7 = v87;
  }
  v6 = v83;
  v43 = *(int *)(v27 + 24);
  v44 = &v25[v43];
  v45 = &v26[v43];
  v46 = *(_QWORD *)v45;
  v44[8] = v45[8];
  *(_QWORD *)v44 = v46;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v25, 0, 1, v27);
LABEL_32:
  v55 = a3[8];
  v56 = (char *)(a1 + v55);
  v57 = (char *)(a2 + v55);
  v58 = v28((char *)(a1 + v55), 1, v27);
  v59 = v28(v57, 1, v27);
  if (!v58)
  {
    if (v59)
    {
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v56);
      goto LABEL_38;
    }
    v7((uint64_t)v56, (uint64_t)v57, v6);
    v65 = *(int *)(v27 + 20);
    v66 = (uint64_t *)&v56[v65];
    v67 = (uint64_t *)&v57[v65];
    v68 = *(_QWORD *)&v57[v65 + 8];
    if (*(_QWORD *)&v56[v65 + 8] >> 60 == 15)
    {
      if (v68 >> 60 != 15)
      {
        v69 = *v67;
        outlined copy of Data._Representation(v69, v68);
        *v66 = v69;
        v66[1] = v68;
LABEL_48:
        v78 = *(int *)(v27 + 24);
        v79 = &v56[v78];
        v80 = &v57[v78];
        v81 = *(_QWORD *)v80;
        v79[8] = v80[8];
        *(_QWORD *)v79 = v81;
        return a1;
      }
    }
    else
    {
      if (v68 >> 60 != 15)
      {
        v75 = *v67;
        outlined copy of Data._Representation(v75, v68);
        v76 = *v66;
        v77 = v66[1];
        *v66 = v75;
        v66[1] = v68;
        outlined consume of Data._Representation(v76, v77);
        goto LABEL_48;
      }
      outlined destroy of Data((uint64_t)v66);
    }
    *(_OWORD *)v66 = *(_OWORD *)v67;
    goto LABEL_48;
  }
  if (v59)
  {
LABEL_38:
    v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v56, v57, v6);
  v60 = *(int *)(v27 + 20);
  v61 = &v56[v60];
  v62 = &v57[v60];
  v63 = *((_QWORD *)v62 + 1);
  if (v63 >> 60 == 15)
  {
    *(_OWORD *)v61 = *(_OWORD *)v62;
  }
  else
  {
    v70 = *(_QWORD *)v62;
    outlined copy of Data._Representation(*(_QWORD *)v62, *((_QWORD *)v62 + 1));
    *(_QWORD *)v61 = v70;
    *((_QWORD *)v61 + 1) = v63;
  }
  v71 = *(int *)(v27 + 24);
  v72 = &v56[v71];
  v73 = &v57[v71];
  v74 = *(_QWORD *)v73;
  v72[8] = v73[8];
  *(_QWORD *)v72 = v74;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v56, 0, 1, v27);
  return a1;
}

uint64_t initializeWithTake for MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[7];
  v10 = (char *)(a1 + v9);
  v11 = (char *)(a2 + v9);
  v12 = type metadata accessor for MPPB_KeyAndIndex(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v10, (uint64_t)v11, v6);
    *(_OWORD *)&v10[*(int *)(v12 + 20)] = *(_OWORD *)&v11[*(int *)(v12 + 20)];
    v16 = *(int *)(v12 + 24);
    v17 = &v10[v16];
    v18 = &v11[v16];
    v17[8] = v18[8];
    *(_QWORD *)v17 = *(_QWORD *)v18;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  v19 = a3[8];
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  if (v14(v21, 1, v12))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v20, (uint64_t)v21, v6);
    *(_OWORD *)&v20[*(int *)(v12 + 20)] = *(_OWORD *)&v21[*(int *)(v12 + 20)];
    v23 = *(int *)(v12 + 24);
    v24 = &v20[v23];
    v25 = &v21[v23];
    v24[8] = v25[8];
    *(_QWORD *)v24 = *(_QWORD *)v25;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
  }
  return a1;
}

uint64_t assignWithTake for MPPB_SKOutgoingRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  unint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t *v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;

  v6 = type metadata accessor for UnknownStorage();
  v62 = *(_QWORD *)(v6 - 8);
  v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 40);
  v61(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)v8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_QWORD *)(a1 + v13 + 8);
  if (v16 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    goto LABEL_11;
  }
  v17 = *(_QWORD *)(v15 + 8);
  if (v17 >> 60 == 15)
  {
    outlined destroy of Data(v14);
    goto LABEL_9;
  }
  v18 = *(_QWORD *)v14;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = v17;
  outlined consume of Data._Representation(v18, v16);
LABEL_11:
  v19 = a3[7];
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  v22 = type metadata accessor for MPPB_KeyAndIndex(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v20, v21, v6);
      *(_OWORD *)&v20[*(int *)(v22 + 20)] = *(_OWORD *)&v21[*(int *)(v22 + 20)];
      v27 = *(int *)(v22 + 24);
      v28 = &v20[v27];
      v29 = &v21[v27];
      v28[8] = v29[8];
      *(_QWORD *)v28 = *(_QWORD *)v29;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v26)
  {
    outlined destroy of MPPB_KeyAndIndex((uint64_t)v20);
LABEL_16:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_17;
  }
  v61((uint64_t)v20, (uint64_t)v21, v6);
  v41 = *(int *)(v22 + 20);
  v42 = (uint64_t *)&v20[v41];
  v43 = (uint64_t *)&v21[v41];
  v44 = *(_QWORD *)&v20[v41 + 8];
  if (v44 >> 60 == 15)
  {
    v45 = *(_OWORD *)v43;
  }
  else
  {
    v51 = v43[1];
    if (v51 >> 60 != 15)
    {
      v56 = *v42;
      *v42 = *v43;
      v42[1] = v51;
      outlined consume of Data._Representation(v56, v44);
      goto LABEL_36;
    }
    v60 = v43;
    outlined destroy of Data((uint64_t)v42);
    v45 = *(_OWORD *)v60;
  }
  *(_OWORD *)v42 = v45;
LABEL_36:
  v57 = *(int *)(v22 + 24);
  v58 = &v20[v57];
  v59 = &v21[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v59[8];
LABEL_17:
  v31 = a3[8];
  v32 = (char *)(a1 + v31);
  v33 = (char *)(a2 + v31);
  v34 = v24((char *)(a1 + v31), 1, v22);
  v35 = v24(v33, 1, v22);
  if (!v34)
  {
    if (v35)
    {
      outlined destroy of MPPB_KeyAndIndex((uint64_t)v32);
      goto LABEL_22;
    }
    v61((uint64_t)v32, (uint64_t)v33, v6);
    v46 = *(int *)(v22 + 20);
    v47 = (uint64_t *)&v32[v46];
    v48 = (uint64_t *)&v33[v46];
    v49 = *(_QWORD *)&v32[v46 + 8];
    if (v49 >> 60 != 15)
    {
      v50 = v48[1];
      if (v50 >> 60 != 15)
      {
        v52 = *v47;
        *v47 = *v48;
        v47[1] = v50;
        outlined consume of Data._Representation(v52, v49);
        goto LABEL_34;
      }
      outlined destroy of Data((uint64_t)v47);
    }
    *(_OWORD *)v47 = *(_OWORD *)v48;
LABEL_34:
    v53 = *(int *)(v22 + 24);
    v54 = &v32[v53];
    v55 = &v33[v53];
    *(_QWORD *)v54 = *(_QWORD *)v55;
    v54[8] = v55[8];
    return a1;
  }
  if (v35)
  {
LABEL_22:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v32, v33, v6);
  *(_OWORD *)&v32[*(int *)(v22 + 20)] = *(_OWORD *)&v33[*(int *)(v22 + 20)];
  v36 = *(int *)(v22 + 24);
  v37 = &v32[v36];
  v38 = &v33[v36];
  v37[8] = v38[8];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v32, 0, 1, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for MPPB_SKOutgoingRatchet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BAF0A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 11)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
    v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
    if (v10)
      return 0;
    else
      return v11;
  }
  else
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for MPPB_SKOutgoingRatchet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BAF0B38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 11)
    {
      v13 = (_QWORD *)(a1 + *(int *)(a4 + 20));
      *v13 = 0;
      v13[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for MPPB_SKOutgoingRatchet()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for MPPB_KeyAndIndex?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_DWORD *initializeBufferWithCopyOfBuffer for TetraRatchetOuterMessage(_DWORD *a1, uint64_t *a2, int *a3)
{
  _DWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_DWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    outlined copy of Data._Representation(v7, v8);
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v8;
    v4[6] = *((_DWORD *)a2 + 6);
    v9 = a3[7];
    v10 = (char *)v4 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for P256.KeyAgreement.PublicKey();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[8];
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for Kyber768.PublicKey();
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v20 = a3[9];
    v21 = (char *)v4 + v20;
    v22 = (uint64_t *)((char *)a2 + v20);
    v23 = v22[1];
    if (v23 >> 60 == 15)
    {
      *(_OWORD *)v21 = *(_OWORD *)v22;
    }
    else
    {
      v24 = *v22;
      outlined copy of Data._Representation(*v22, v22[1]);
      *(_QWORD *)v21 = v24;
      *((_QWORD *)v21 + 1) = v23;
    }
    v25 = a3[10];
    v26 = (char *)v4 + v25;
    v27 = (uint64_t *)((char *)a2 + v25);
    v28 = v27[1];
    if (v28 >> 60 == 15)
    {
      *(_OWORD *)v26 = *(_OWORD *)v27;
    }
    else
    {
      v29 = *v27;
      outlined copy of Data._Representation(*v27, v27[1]);
      *(_QWORD *)v26 = v29;
      *((_QWORD *)v26 + 1) = v28;
    }
    v30 = a3[11];
    v31 = (uint64_t *)((char *)v4 + v30);
    v32 = (uint64_t *)((char *)a2 + v30);
    v33 = *v32;
    v34 = v32[1];
    outlined copy of Data._Representation(*v32, v34);
    *v31 = v33;
    v31[1] = v34;
    v35 = a3[12];
    v36 = (uint64_t *)((char *)v4 + v35);
    v37 = (uint64_t *)((char *)a2 + v35);
    v38 = *v37;
    v39 = v37[1];
    outlined copy of Data._Representation(*v37, v39);
    *v36 = v38;
    v36[1] = v39;
  }
  return v4;
}

uint64_t destroy for TetraRatchetOuterMessage(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;

  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + a2[7];
  v5 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[8];
  v7 = type metadata accessor for Kyber768.PublicKey();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v9 = (uint64_t *)(a1 + a2[9]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    outlined consume of Data._Representation(*v9, v10);
  v11 = (uint64_t *)(a1 + a2[10]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    outlined consume of Data._Representation(*v11, v12);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[11]), *(_QWORD *)(a1 + a2[11] + 8));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[12]), *(_QWORD *)(a1 + a2[12] + 8));
}

uint64_t initializeWithCopy for TetraRatchetOuterMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[8];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = type metadata accessor for Kyber768.PublicKey();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = (uint64_t *)(a2 + v18);
  v21 = v20[1];
  if (v21 >> 60 == 15)
  {
    *(_OWORD *)v19 = *(_OWORD *)v20;
  }
  else
  {
    v22 = *v20;
    outlined copy of Data._Representation(*v20, v20[1]);
    *(_QWORD *)v19 = v22;
    *(_QWORD *)(v19 + 8) = v21;
  }
  v23 = a3[10];
  v24 = a1 + v23;
  v25 = (uint64_t *)(a2 + v23);
  v26 = v25[1];
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
  }
  else
  {
    v27 = *v25;
    outlined copy of Data._Representation(*v25, v25[1]);
    *(_QWORD *)v24 = v27;
    *(_QWORD *)(v24 + 8) = v26;
  }
  v28 = a3[11];
  v29 = (uint64_t *)(a1 + v28);
  v30 = (uint64_t *)(a2 + v28);
  v31 = *v30;
  v32 = v30[1];
  outlined copy of Data._Representation(*v30, v32);
  *v29 = v31;
  v29[1] = v32;
  v33 = a3[12];
  v34 = (uint64_t *)(a1 + v33);
  v35 = (uint64_t *)(a2 + v33);
  v36 = *v35;
  v37 = v35[1];
  outlined copy of Data._Representation(*v35, v37);
  *v34 = v36;
  v34[1] = v37;
  return a1;
}

uint64_t assignWithCopy for TetraRatchetOuterMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  outlined consume of Data._Representation(v8, v9);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[8];
  v15 = (void *)(a1 + v14);
  v16 = (void *)(a2 + v14);
  v17 = type metadata accessor for Kyber768.PublicKey();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_7:
  v23 = a3[9];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *(_QWORD *)(a2 + v23 + 8);
  if (*(_QWORD *)(a1 + v23 + 8) >> 60 == 15)
  {
    if (v26 >> 60 != 15)
    {
      v27 = *v25;
      outlined copy of Data._Representation(v27, v26);
      *v24 = v27;
      v24[1] = v26;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v26 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v24);
LABEL_12:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    goto LABEL_14;
  }
  v28 = *v25;
  outlined copy of Data._Representation(v28, v26);
  v29 = *v24;
  v30 = v24[1];
  *v24 = v28;
  v24[1] = v26;
  outlined consume of Data._Representation(v29, v30);
LABEL_14:
  v31 = a3[10];
  v32 = (uint64_t *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v34 = *(_QWORD *)(a2 + v31 + 8);
  if (*(_QWORD *)(a1 + v31 + 8) >> 60 != 15)
  {
    if (v34 >> 60 != 15)
    {
      v36 = *v33;
      outlined copy of Data._Representation(v36, v34);
      v37 = *v32;
      v38 = v32[1];
      *v32 = v36;
      v32[1] = v34;
      outlined consume of Data._Representation(v37, v38);
      goto LABEL_21;
    }
    outlined destroy of Data((uint64_t)v32);
    goto LABEL_19;
  }
  if (v34 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_21;
  }
  v35 = *v33;
  outlined copy of Data._Representation(v35, v34);
  *v32 = v35;
  v32[1] = v34;
LABEL_21:
  v39 = a3[11];
  v40 = (uint64_t *)(a1 + v39);
  v41 = (uint64_t *)(a2 + v39);
  v42 = *v41;
  v43 = v41[1];
  outlined copy of Data._Representation(*v41, v43);
  v44 = *v40;
  v45 = v40[1];
  *v40 = v42;
  v40[1] = v43;
  outlined consume of Data._Representation(v44, v45);
  v46 = a3[12];
  v47 = (uint64_t *)(a1 + v46);
  v48 = (uint64_t *)(a2 + v46);
  v49 = *v48;
  v50 = v48[1];
  outlined copy of Data._Representation(*v48, v50);
  v51 = *v47;
  v52 = v47[1];
  *v47 = v49;
  v47[1] = v50;
  outlined consume of Data._Representation(v51, v52);
  return a1;
}

uint64_t initializeWithTake for TetraRatchetOuterMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[8];
  v11 = (void *)(a1 + v10);
  v12 = (const void *)(a2 + v10);
  v13 = type metadata accessor for Kyber768.PublicKey();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v16 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  v17 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  return a1;
}

uint64_t assignWithTake for TetraRatchetOuterMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v6, v7);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v8 = a3[7];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[8];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for Kyber768.PublicKey();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  v21 = a3[9];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_QWORD *)(a1 + v21 + 8);
  if (v24 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    goto LABEL_12;
  }
  v25 = *(_QWORD *)(v23 + 8);
  if (v25 >> 60 == 15)
  {
    outlined destroy of Data(v22);
    goto LABEL_10;
  }
  v26 = *(_QWORD *)v22;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_QWORD *)(v22 + 8) = v25;
  outlined consume of Data._Representation(v26, v24);
LABEL_12:
  v27 = a3[10];
  v28 = (uint64_t *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v30 = *(_QWORD *)(a1 + v27 + 8);
  if (v30 >> 60 != 15)
  {
    v31 = v29[1];
    if (v31 >> 60 != 15)
    {
      v32 = *v28;
      *v28 = *v29;
      v28[1] = v31;
      outlined consume of Data._Representation(v32, v30);
      goto LABEL_17;
    }
    outlined destroy of Data((uint64_t)v28);
  }
  *(_OWORD *)v28 = *(_OWORD *)v29;
LABEL_17:
  v33 = a3[11];
  v34 = *(_QWORD *)(a1 + v33);
  v35 = *(_QWORD *)(a1 + v33 + 8);
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  outlined consume of Data._Representation(v34, v35);
  v36 = a3[12];
  v37 = *(_QWORD *)(a1 + v36);
  v38 = *(_QWORD *)(a1 + v36 + 8);
  *(_OWORD *)(a1 + v36) = *(_OWORD *)(a2 + v36);
  outlined consume of Data._Representation(v37, v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraRatchetOuterMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BAF1760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for P256.KeyAgreement.PublicKey();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for TetraRatchetOuterMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BAF181C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = type metadata accessor for P256.KeyAgreement.PublicKey();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for TetraRatchetOuterMessage()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TetraRatchetOuterMessage;
  if (!type metadata singleton initialization cache for TetraRatchetOuterMessage)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for TetraRatchetOuterMessage()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for P256.KeyAgreement.PublicKey();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Kyber768.PublicKey?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for Kyber768.PublicKey?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Kyber768.PublicKey?)
  {
    type metadata accessor for Kyber768.PublicKey();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Kyber768.PublicKey?);
  }
}

uint64_t TetraRatchetOuterMessage.serializedData(signedBy:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char **v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68[2];

  v2 = v1;
  v67 = a1;
  v68[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = (int *)type metadata accessor for TetraRatchetOuterMessage();
  MEMORY[0x24BDAC7A8](v3);
  v66 = (uint64_t)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  MEMORY[0x24BDAC7A8](v5);
  v63 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Kyber768.PublicKey();
  v64 = *(_QWORD *)(v7 - 8);
  v65 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v57 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for TetraPB_TetraMessage(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v12 = &v11[v9[5]];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  v13 = &v11[v9[6]];
  *(_OWORD *)v13 = xmmword_20BB407A0;
  v58 = &v11[v9[7]];
  *(_OWORD *)v58 = xmmword_20BB407A0;
  v14 = &v11[v9[8]];
  *(_OWORD *)v14 = xmmword_20BB407A0;
  v56 = &v11[v9[9]];
  *(_OWORD *)v56 = xmmword_20BB407A0;
  v60 = &v11[v9[10]];
  *(_OWORD *)v60 = xmmword_20BB407A0;
  v15 = &v11[v9[11]];
  *(_DWORD *)v15 = 0;
  v15[4] = 1;
  v16 = &v11[v9[12]];
  *(_OWORD *)v16 = xmmword_20BB407A0;
  v17 = &v11[v9[13]];
  *(_OWORD *)v17 = xmmword_20BB407A0;
  v18 = *(_QWORD *)(v1 + 8);
  v19 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)v13 = v18;
  *((_QWORD *)v13 + 1) = v19;
  *(_DWORD *)v15 = *(_DWORD *)(v1 + 24);
  v15[4] = 0;
  outlined copy of Data._Representation(v18, v19);
  v20 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  if (v21 >> 60 == 15)
    __break(1u);
  *(_QWORD *)v14 = v20;
  *((_QWORD *)v14 + 1) = v21;
  *(_DWORD *)v12 = *(_DWORD *)v1;
  v12[4] = 0;
  v22 = (uint64_t *)(v1 + v3[11]);
  v24 = *v22;
  v23 = v22[1];
  v61 = v24;
  v62 = v23;
  *(_QWORD *)v17 = v24;
  *((_QWORD *)v17 + 1) = v23;
  v25 = (uint64_t *)(v1 + v3[10]);
  v26 = *v25;
  v27 = v25[1];
  if (v27 >> 60 != 15)
  {
    *(_QWORD *)v16 = v26;
    *((_QWORD *)v16 + 1) = v27;
  }
  v28 = (char **)(v2 + v3[9]);
  v29 = *v28;
  v30 = (unint64_t)v28[1];
  v31 = (uint64_t)v63;
  v32 = v64;
  if (v30 >> 60 != 15)
  {
    v33 = v60;
    *(_QWORD *)v60 = v29;
    *((_QWORD *)v33 + 1) = v30;
  }
  v60 = v29;
  outlined init with copy of Kyber768.PublicKey?(v2 + v3[8], v31);
  v34 = v65;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v31, 1, v65) == 1)
  {
    outlined copy of Data._Representation(v61, v62);
    outlined copy of Data?(v26, v27);
    outlined copy of Data?((uint64_t)v60, v30);
    outlined destroy of Kyber768.PublicKey?(v31);
  }
  else
  {
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 32);
    v55 = v26;
    v36 = v57;
    v35(v57, v31, v34);
    outlined copy of Data._Representation(v61, v62);
    outlined copy of Data?(v55, v27);
    outlined copy of Data?((uint64_t)v60, v30);
    v37 = Kyber768.PublicKey.dataRepresentation.getter();
    v38 = v56;
    *(_QWORD *)v56 = v37;
    *((_QWORD *)v38 + 1) = v39;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v36, v34);
  }
  v40 = v66;
  outlined init with copy of TetraRatchetOuterMessage(v2, v66);
  v41 = objc_allocWithZone((Class)type metadata accessor for TetraMessageSignerFormatter());
  TetraMessageSignerFormatter.init(message:)(v40);
  v43 = v42;
  v68[0] = 0;
  v44 = objc_msgSend(v67, sel_signDataWithMessageFormatter_error_, v42, v68);

  v45 = v68[0];
  if (!v44)
  {
    v52 = v45;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v11, type metadata accessor for TetraPB_TetraMessage);
    return (uint64_t)v52;
  }
  v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v48 = v47;

  v49 = (uint64_t *)v58;
  outlined consume of Data?(*(_QWORD *)v58, *((_QWORD *)v58 + 1));
  *v49 = v46;
  v49[1] = v48;
  lazy protocol witness table accessor for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage();
  v50 = v59;
  v51 = Message.serializedData(partial:)();
  if (!v50)
  {
    v52 = (void *)v51;
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v11, type metadata accessor for TetraPB_TetraMessage);
    return (uint64_t)v52;
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t TetraRatchetOuterMessage.init(serializedData:authenticatedData:signedBy:)@<X0>(_BYTE *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  _BYTE *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  void (*v38)(void);
  _QWORD *v39;
  unint64_t v40;
  _BYTE *v41;
  id v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  int v63;
  void (*v64)(uint64_t, _BYTE *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int *v72;
  _BYTE *v73;
  _BYTE *v74;
  unint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  Class isa;
  id v97;
  void *v98;
  void *v99;
  unsigned __int8 v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  uint64_t (*v105)(_QWORD);
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  _BYTE v112[12];
  int v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  _BYTE *v140;
  _BYTE *v141;
  _BYTE *v142;
  unint64_t v143;
  id v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  unint64_t v149;

  v144 = a5;
  v149 = a4;
  v145 = a3;
  v138 = a6;
  v137 = type metadata accessor for TetraRatchetOuterMessage();
  MEMORY[0x24BDAC7A8](v137);
  v141 = &v112[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v140 = &v112[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x24BDAC7A8](v10);
  v139 = &v112[-v13];
  MEMORY[0x24BDAC7A8](v12);
  v142 = &v112[-v14];
  v15 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = &v112[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v17);
  v21 = &v112[-v20];
  v22 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v22);
  v23 = (int *)type metadata accessor for TetraPB_TetraMessage(0);
  MEMORY[0x24BDAC7A8](v23);
  v25 = &v112[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v148 = 0;
  v146 = 0u;
  v147 = 0u;
  outlined copy of Data._Representation((uint64_t)a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage();
  v26 = v143;
  Message.init(serializedData:extensions:partial:options:)();
  if (v26)
  {

    outlined consume of Data._Representation(v145, v149);
    return outlined consume of Data._Representation((uint64_t)a1, a2);
  }
  else
  {
    v134 = v19;
    v135 = v15;
    v28 = v142;
    v143 = a2;
    v136 = v16;
    v29 = (uint64_t *)&v25[v23[8]];
    v30 = *v29;
    v31 = v29[1];
    if (v31 >> 60 == 15)
      v32 = 0;
    else
      v32 = *v29;
    v33 = 0xC000000000000000;
    if (v31 >> 60 != 15)
      v33 = v31;
    *(_QWORD *)&v146 = v32;
    *((_QWORD *)&v146 + 1) = v33;
    outlined copy of Data?(v30, v31);
    P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)();
    v34 = v21;
    v35 = type metadata accessor for Kyber768.PublicKey();
    v36 = (uint64_t)v28;
    v37 = v28;
    v38 = *(void (**)(void))(*(_QWORD *)(v35 - 8) + 56);
    ((void (*)(_BYTE *, uint64_t, uint64_t, uint64_t))v38)(v37, 1, 1, v35);
    v39 = &v25[v23[9]];
    v40 = v39[1];
    if (v40 >> 60 == 15)
    {
      v133 = v35;
    }
    else
    {
      *(_QWORD *)&v146 = *v39;
      *((_QWORD *)&v146 + 1) = v40;
      outlined copy of Data._Representation(v146, v40);
      v41 = v139;
      Kyber768.PublicKey.init<A>(dataRepresentation:)();
      outlined destroy of Kyber768.PublicKey?(v36);
      v133 = v35;
      ((void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v38)(v41, 0, 1, v35);
      outlined init with take of Kyber768.PublicKey?((uint64_t)v41, v36);
    }
    v139 = a1;
    v42 = v144;
    v43 = v141;
    v44 = (uint64_t)v134;
    v45 = (uint64_t *)&v25[v23[10]];
    v46 = *v45;
    v47 = v45[1];
    v48 = (uint64_t *)&v25[v23[12]];
    v50 = *v48;
    v49 = v48[1];
    v51 = &v25[v23[5]];
    if ((v51[4] & 1) != 0 || (v52 = *(_DWORD *)v51, (*(_DWORD *)v51 - 32) < 0xFFFFFFED))
    {
      v107 = v46;
      v108 = v49;
      v109 = v50;
      lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
      swift_allocError();
      *v110 = 1;
      outlined copy of Data?(v109, v108);
      outlined copy of Data?(v107, v47);
      swift_willThrow();

      outlined consume of Data._Representation(v145, v149);
      outlined consume of Data._Representation((uint64_t)v139, v143);
      outlined consume of Data?(v107, v47);
      outlined consume of Data?(v109, v108);
      outlined destroy of Kyber768.PublicKey?(v36);
      (*(void (**)(_BYTE *, uint64_t))(v136 + 8))(v34, v135);
      v105 = type metadata accessor for TetraPB_TetraMessage;
      v106 = (uint64_t)v25;
    }
    else
    {
      v53 = 0xF000000000000000;
      if (v49 >> 60 == 15)
        v54 = 0xF000000000000000;
      else
        v54 = v49;
      v126 = v54;
      if (v49 >> 60 == 15)
        v55 = 0;
      else
        v55 = v50;
      v125 = v55;
      v127 = v52;
      if (v47 >> 60 != 15)
        v53 = v47;
      v124 = v53;
      if (v47 >> 60 == 15)
        v56 = 0;
      else
        v56 = v46;
      v123 = v56;
      v57 = (uint64_t *)&v25[v23[6]];
      v58 = *v57;
      v120 = *v57;
      v59 = v57[1];
      v119 = v59;
      if (v59 >> 60 == 15)
        v60 = 0;
      else
        v60 = v58;
      v115 = v60;
      v61 = 0xC000000000000000;
      if (v59 >> 60 != 15)
        v61 = v59;
      v114 = v61;
      v62 = &v25[v23[11]];
      if (v62[4])
        v63 = 0;
      else
        v63 = *(_DWORD *)v62;
      v113 = v63;
      v64 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v136 + 16);
      v130 = v46;
      v129 = v50;
      v65 = (uint64_t)v134;
      v131 = v47;
      v132 = v49;
      v134 = v25;
      v128 = v34;
      v66 = v135;
      v64(v44, v34, v135);
      outlined init with copy of Kyber768.PublicKey?(v36, (uint64_t)v140);
      v67 = (uint64_t *)&v134[v23[13]];
      v68 = *v67;
      v118 = *v67;
      v69 = v67[1];
      v116 = v69;
      if (v69 >> 60 == 15)
        v70 = 0;
      else
        v70 = v68;
      v122 = v70;
      v71 = 0xC000000000000000;
      if (v69 >> 60 != 15)
        v71 = v69;
      v121 = v71;
      v72 = (int *)v137;
      v117 = &v43[*(int *)(v137 + 32)];
      v38();
      v73 = &v43[v72[9]];
      *(_OWORD *)v73 = xmmword_20BB407A0;
      v74 = &v43[v72[10]];
      *(_OWORD *)v74 = xmmword_20BB407A0;
      v75 = v114;
      *((_QWORD *)v43 + 1) = v115;
      *((_QWORD *)v43 + 2) = v75;
      v76 = &v43[v72[12]];
      v77 = v149;
      *v76 = v145;
      v76[1] = v77;
      *((_DWORD *)v43 + 6) = v113;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v136 + 32))(&v43[v72[7]], v65, v66);
      v78 = v130;
      v79 = v131;
      outlined copy of Data?(v130, v131);
      v80 = v129;
      v81 = v132;
      outlined copy of Data?(v129, v132);
      outlined copy of Data?(v80, v81);
      outlined copy of Data?(v78, v79);
      outlined copy of Data?(v120, v119);
      v82 = v145;
      outlined copy of Data._Representation(v145, v149);
      outlined copy of Data?(v118, v116);
      outlined assign with take of Kyber768.PublicKey?((uint64_t)v140, (uint64_t)v117);
      outlined consume of Data?(*(_QWORD *)v73, *((_QWORD *)v73 + 1));
      v83 = v124;
      *(_QWORD *)v73 = v123;
      *((_QWORD *)v73 + 1) = v83;
      outlined consume of Data?(*(_QWORD *)v74, *((_QWORD *)v74 + 1));
      v84 = v126;
      *(_QWORD *)v74 = v125;
      *((_QWORD *)v74 + 1) = v84;
      v85 = v82;
      v86 = v144;
      v87 = v72[11];
      v88 = v141;
      v89 = (uint64_t *)&v141[v87];
      v90 = v121;
      *v89 = v122;
      v89[1] = v90;
      *v88 = v127;
      v91 = v138;
      outlined init with take of TetraRatchetOuterMessage((uint64_t)v88, v138);
      v92 = (uint64_t *)&v134[v23[7]];
      v93 = v92[1];
      if (v93 >> 60 == 15)
        v94 = 0;
      else
        v94 = *v92;
      if (v93 >> 60 == 15)
        v95 = 0xC000000000000000;
      else
        v95 = v92[1];
      outlined copy of Data?(*v92, v93);
      isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v94, v95);
      outlined init with copy of TetraRatchetOuterMessage(v91, (uint64_t)v88);
      v97 = objc_allocWithZone((Class)type metadata accessor for TetraMessageSignerFormatter());
      TetraMessageSignerFormatter.init(message:)((uint64_t)v88);
      v99 = v98;
      v100 = objc_msgSend(v86, sel_verifyTetraMessageSignature_formatter_, isa, v98);

      v101 = v149;
      v102 = v136;
      v103 = v143;
      v104 = v139;
      if ((v100 & 1) != 0)
      {

        outlined consume of Data._Representation(v85, v101);
        outlined consume of Data._Representation((uint64_t)v104, v103);
        outlined consume of Data?(v129, v132);
        outlined consume of Data?(v130, v131);
        outlined destroy of Kyber768.PublicKey?((uint64_t)v142);
        (*(void (**)(_BYTE *, uint64_t))(v102 + 8))(v128, v135);
        v105 = type metadata accessor for TetraPB_TetraMessage;
        v106 = (uint64_t)v134;
      }
      else
      {
        lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
        swift_allocError();
        *v111 = 2;
        swift_willThrow();

        outlined consume of Data._Representation(v85, v101);
        outlined consume of Data._Representation((uint64_t)v104, v103);
        outlined consume of Data?(v130, v131);
        outlined consume of Data?(v129, v132);
        outlined destroy of Kyber768.PublicKey?((uint64_t)v142);
        (*(void (**)(_BYTE *, uint64_t))(v102 + 8))(v128, v135);
        outlined destroy of TetraRatchetOuterMessage((uint64_t)v134, type metadata accessor for TetraPB_TetraMessage);
        v105 = (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage;
        v106 = v91;
      }
    }
    return outlined destroy of TetraRatchetOuterMessage(v106, v105);
  }
}

unint64_t lazy protocol witness table accessor for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage;
  if (!lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage)
  {
    v1 = type metadata accessor for TetraPB_TetraMessage(255);
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraPB_TetraMessage, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage);
  }
  return result;
}

uint64_t outlined destroy of Kyber768.PublicKey?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Kyber768.PublicKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Kyber768.PublicKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of TetraRatchetOuterMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraRatchetOuterMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of TetraRatchetOuterMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraRatchetOuterMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of Kyber768.PublicKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t result;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  unint64_t v22;

  v3 = type metadata accessor for SymmetricKey();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v20 - v8;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v20 - v8, a2, v3);
  v10 = SymmetricKey.bitCount.getter();
  v11 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  result = v11(v9, v3);
  if (v10 == 256)
  {
    v21 = 0xD00000000000001ALL;
    v22 = 0x800000020BB48100;
    v13._countAndFlagsBits = 0x2D5254432D534541;
    v13._object = (void *)0xEE00676E6979654BLL;
    String.append(_:)(v13);
    v14 = specialized Data.init<A>(_:)(v21, v22);
    v16 = v15;
    v21 = v14;
    v22 = v15;
    type metadata accessor for SHA384();
    v20[0] = v11;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B20], MEMORY[0x24BDC6B10]);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC63E0], MEMORY[0x24BDC6398]);
    lazy protocol witness table accessor for type Data and conformance Data();
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    v17 = outlined consume of Data._Representation(v14, v16);
    MEMORY[0x24BDAC7A8](v17);
    v18 = SymmetricKey.withUnsafeBytes<A>(_:)();
    v19 = v21;
    MEMORY[0x24BDAC7A8](v18);
    SymmetricKey.withUnsafeBytes<A>(_:)();
    ((void (*)(char *, uint64_t))v20[0])(v7, v3);
    return v19;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x20BD3C414](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x20BD3C414](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x20BD3C414](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t closure #1 in static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];

  v5 = specialized Collection.prefix(_:)(a3, a1, a2);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
  v17[3] = v12;
  v17[4] = lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>();
  v13 = (_QWORD *)swift_allocObject();
  v17[0] = v13;
  v13[2] = v5;
  v13[3] = v7;
  v13[4] = v9;
  v13[5] = v11;
  __swift_project_boxed_opaque_existential_1(v17, v12);
  Slice<>.withUnsafeBytes<A>(_:)();
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  *a4 = v15;
  a4[1] = v16;
  return result;
}

uint64_t partial apply for closure #1 in static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t closure #2 in static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized BidirectionalCollection.suffix(_:)(a3, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
  lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>();
  return SymmetricKey.init<A>(data:)();
}

uint64_t partial apply for closure #2 in static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
    v2 = MEMORY[0x24BDCFB90];
    result = MEMORY[0x20BD3C414](MEMORY[0x24BDD0790], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t sub_20BAF2E20()
{
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for MessageProtectionFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MessageProtectionFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20BAF2F0C + 4 * byte_20BB41035[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20BAF2F40 + 4 * byte_20BB41030[v4]))();
}

uint64_t sub_20BAF2F40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BAF2F48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BAF2F50);
  return result;
}

uint64_t sub_20BAF2F5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BAF2F64);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20BAF2F68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BAF2F70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageProtectionFeatureFlags()
{
  return &type metadata for MessageProtectionFeatureFlags;
}

unint64_t lazy protocol witness table accessor for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags;
  if (!lazy protocol witness table cache variable for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for MessageProtectionFeatureFlags, &type metadata for MessageProtectionFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags;
  if (!lazy protocol witness table cache variable for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for MessageProtectionFeatureFlags, &type metadata for MessageProtectionFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance MessageProtectionFeatureFlags()
{
  return "MessageProtection";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance MessageProtectionFeatureFlags()
{
  _BYTE *v0;
  const char *v1;

  v1 = "KyberInTheSEPRegisteredKeys";
  if (*v0 != 1)
    v1 = "KyberInTheSEPRatchetingKeys";
  if (*v0)
    return v1;
  else
    return "visionOSSyncs";
}

void **initializeBufferWithCopyOfBuffer for TetraECDHKey(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  char *v12;
  uint64_t v13;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    v12 = v4;
    if (v11(v8, 1, v9))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t destroy for TetraECDHKey(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

void **initializeWithCopy for TetraECDHKey(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  id v11;
  uint64_t v12;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v11 = v4;
  if (v10(v7, 1, v8))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

void **assignWithCopy for TetraECDHKey(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  v8 = v7;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

_QWORD *initializeWithTake for TetraECDHKey(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void **assignWithTake for TetraECDHKey(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraECDHKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BAF3560(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for TetraECDHKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_20BAF35F8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TetraECDHKey()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TetraECDHKey;
  if (!type metadata singleton initialization cache for TetraECDHKey)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for TetraECDHKey()
{
  unint64_t v0;

  type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?)
  {
    type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  }
}

const __CFString *one-time initialization function for AKSTokenID()
{
  const __CFString *result;

  result = (const __CFString *)MEMORY[0x20BD3B538](0xD000000000000015, 0x800000020BB48170);
  AKSTokenID = result;
  return result;
}

const __CFString *one-time initialization function for TokenOID()
{
  const __CFString *result;

  result = (const __CFString *)MEMORY[0x20BD3B538](1684631412, 0xE400000000000000);
  TokenOID = result;
  return result;
}

void TetraECDHSecKey.sharedSecretFromKeyAgreement(with:)(uint64_t a1, __SecKey *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  const __CFData *isa;
  uint64_t inited;
  void **v7;
  void *v8;
  void *v9;
  void **v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  const __CFDictionary *v20;
  SecKeyRef v21;
  const __CFString *v22;
  __SecKey *v23;
  const __CFDictionary *v24;
  CFDataRef v25;
  const __CFData *v26;
  _BYTE *v27;
  _BYTE *v28;

  v2 = MEMORY[0x20BD3B280]();
  v4 = v3;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v2, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  inited = swift_initStackObject();
  v7 = (void **)MEMORY[0x24BDE9050];
  *(_OWORD *)(inited + 16) = xmmword_20BB406C0;
  v8 = *v7;
  *(_QWORD *)(inited + 32) = *v7;
  v9 = (void *)*MEMORY[0x24BDE9060];
  type metadata accessor for CFStringRef(0);
  v10 = (void **)MEMORY[0x24BDE9028];
  *(_QWORD *)(inited + 40) = v9;
  v11 = *v10;
  *(_QWORD *)(inited + 64) = v12;
  *(_QWORD *)(inited + 72) = v11;
  v13 = (void *)*MEMORY[0x24BDE9038];
  *(_QWORD *)(inited + 80) = *MEMORY[0x24BDE9038];
  v14 = (void *)*MEMORY[0x24BDE9048];
  *(_QWORD *)(inited + 104) = v12;
  *(_QWORD *)(inited + 112) = v14;
  *(_QWORD *)(inited + 144) = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 120) = 256;
  v15 = v8;
  v16 = v9;
  v17 = v11;
  v18 = v13;
  v19 = v14;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v20 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v21 = SecKeyCreateWithData(isa, v20, 0);

  if (v21)
  {
    v22 = (const __CFString *)*MEMORY[0x24BDE9280];
    v23 = v21;
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v24 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v25 = SecKeyCopyKeyExchangeResult(a2, v22, v23, v24, 0);

    if (v25)
    {
      v26 = v25;
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      SymmetricKey.init<A>(data:)();
    }
    else
    {
      lazy protocol witness table accessor for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors();
      swift_allocError();
      *v28 = 1;
      swift_willThrow();
    }

  }
  else
  {
    lazy protocol witness table accessor for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors();
    swift_allocError();
    *v27 = 0;
    swift_willThrow();
  }
}

void TetraECDHKey.publicKey.getter()
{
  SecKeyRef *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __SecKey *v9;
  __SecKey *v10;
  CFDataRef v11;
  const __CFData *v12;
  uint64_t v13;
  _QWORD v14[4];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TetraECDHKey();
  outlined init with copy of SecureEnclave.P256.KeyAgreement.PrivateKey?((uint64_t)v0 + *(int *)(v8 + 20), (uint64_t)v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of SecureEnclave.P256.KeyAgreement.PrivateKey?((uint64_t)v3);
    if (*v0)
    {
      v9 = SecKeyCopyPublicKey(*v0);
      if (v9)
      {
        v10 = v9;
        v11 = SecKeyCopyExternalRepresentation(v9, 0);

        if (v11)
        {
          v12 = v11;
          v14[2] = specialized Data.init<A>(_:)(v12);
          v14[3] = v13;
          P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();

          return;
        }
        goto LABEL_10;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_10:
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  SecureEnclave.P256.KeyAgreement.PrivateKey.publicKey.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void TetraECDHKey.sharedSecretFromKeyAgreement(with:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __SecKey **v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = a2;
  v5 = type metadata accessor for SharedSecret();
  MEMORY[0x24BDAC7A8](v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TetraECDHKey();
  outlined init with copy of SecureEnclave.P256.KeyAgreement.PrivateKey?((uint64_t)v2 + *(int *)(v13 + 20), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of SecureEnclave.P256.KeyAgreement.PrivateKey?((uint64_t)v8);
    if (*v2)
      TetraECDHSecKey.sharedSecretFromKeyAgreement(with:)(a1, *v2);
    else
      __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    SecureEnclave.P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
    if (!v3)
    {
      lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SharedSecret and conformance SharedSecret, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6380], MEMORY[0x24BDC6360]);
      SymmetricKey.init<A>(data:)();
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TetraECDHKey.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraECDHKey.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x79654B706573;
  else
    return 0x79654B736B61;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraECDHKey.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TetraECDHKey.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance TetraECDHKey.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance TetraECDHKey.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraECDHKey.CodingKeys()
{
  lazy protocol witness table accessor for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraECDHKey.CodingKeys()
{
  lazy protocol witness table accessor for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TetraECDHKey.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[8];
  uint64_t v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraECDHKey.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11 = *v3;
  v10[7] = 0;
  lazy protocol witness table accessor for type TetraECDHSecKey and conformance TetraECDHSecKey();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for TetraECDHKey();
    v10[6] = 1;
    type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6480], (uint64_t)"9ߗ@DK(@");
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

void TetraECDHKey.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;

  v17 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  MEMORY[0x24BDAC7A8](v4);
  v18 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraECDHKey.CodingKeys>);
  v6 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TetraECDHKey();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  }
  else
  {
    v16 = a1;
    v12 = v6;
    v13 = (uint64_t)v18;
    v21 = 0;
    lazy protocol witness table accessor for type TetraECDHSecKey and conformance TetraECDHSecKey();
    v14 = v19;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *v11 = v22;
    type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    v20 = 1;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6480], (uint64_t)"Uߗ@pK(@");
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v14);
    outlined init with take of SecureEnclave.P256.KeyAgreement.PrivateKey?(v13, (uint64_t)v11 + *(int *)(v9 + 20));
    outlined init with copy of TetraECDHKey((uint64_t)v11, v17);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
    outlined destroy of TetraECDHKey((uint64_t)v11);
  }
}

void protocol witness for Decodable.init(from:) in conformance TetraECDHKey(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  TetraECDHKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraECDHKey(_QWORD *a1)
{
  return TetraECDHKey.encode(to:)(a1);
}

SecKeyRef specialized TetraECDHSecKey.init(aksBlob:)(uint64_t a1, unint64_t a2)
{
  NSData v4;
  uint64_t inited;
  void *v6;
  uint64_t v7;
  id v8;
  __CFString *v9;
  uint64_t v10;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  const __CFDictionary *isa;
  SecKeyRef v15;
  _BYTE *v16;

  v4.super.isa = Data._bridgeToObjectiveC()().super.isa;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Swift.AnyObject)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20BB40570;
  v6 = (void *)*MEMORY[0x24BDE9158];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDE9158];
  v7 = one-time initialization token for AKSTokenID;
  v8 = v6;
  if (v7 != -1)
    swift_once();
  v9 = (__CFString *)AKSTokenID;
  *(_QWORD *)(inited + 40) = AKSTokenID;
  v10 = one-time initialization token for TokenOID;
  v11 = v9;
  if (v10 != -1)
    swift_once();
  v12 = (__CFString *)TokenOID;
  *(_QWORD *)(inited + 48) = TokenOID;
  v13 = v12;
  outlined copy of Data._Representation(a1, a2);
  *(_QWORD *)(inited + 56) = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();

  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15 = SecKeyCreateWithData(v4.super.isa, isa, 0);

  if (!v15)
  {
    lazy protocol witness table accessor for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors();
    swift_allocError();
    *v16 = 3;
    swift_willThrow();
  }
  return v15;
}

unint64_t lazy protocol witness table accessor for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraECDHSecKeyErrors, &type metadata for TetraECDHSecKeyErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraECDHSecKeyErrors, &type metadata for TetraECDHSecKeyErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKeyErrors and conformance TetraECDHSecKeyErrors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraECDHKey.CodingKeys, &unk_24C4BCDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraECDHKey.CodingKeys, &unk_24C4BCDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraECDHKey.CodingKeys, &unk_24C4BCDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraECDHKey.CodingKeys, &unk_24C4BCDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHKey.CodingKeys and conformance TetraECDHKey.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraECDHSecKey and conformance TetraECDHSecKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraECDHSecKey and conformance TetraECDHSecKey;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKey and conformance TetraECDHSecKey)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraECDHSecKey, &type metadata for TetraECDHSecKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKey and conformance TetraECDHSecKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraECDHSecKey and conformance TetraECDHSecKey;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKey and conformance TetraECDHSecKey)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraECDHSecKey, &type metadata for TetraECDHSecKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKey and conformance TetraECDHSecKey);
  }
  return result;
}

uint64_t outlined init with take of SecureEnclave.P256.KeyAgreement.PrivateKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of TetraECDHKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraECDHKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TetraECDHKey(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TetraECDHKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of SecureEnclave.P256.KeyAgreement.PrivateKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SecureEnclave.P256.KeyAgreement.PrivateKey?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraECDHKey.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TetraECDHKey.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20BAF47C4 + 4 * byte_20BB41125[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20BAF47F8 + 4 * byte_20BB41120[v4]))();
}

uint64_t sub_20BAF47F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BAF4800(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BAF4808);
  return result;
}

uint64_t sub_20BAF4814(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BAF481CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20BAF4820(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BAF4828(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for TetraECDHKey.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void *type metadata accessor for TetraECDHKey.CodingKeys()
{
  return &unk_24C4BCDA8;
}

uint64_t storeEnumTagSinglePayload for TetraECDHSecKeyErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_20BAF489C + 4 * byte_20BB4112F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_20BAF48D0 + 4 * byte_20BB4112A[v4]))();
}

uint64_t sub_20BAF48D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BAF48D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BAF48E0);
  return result;
}

uint64_t sub_20BAF48EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BAF48F4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_20BAF48F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BAF4900(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TetraECDHSecKeyErrors()
{
  return &type metadata for TetraECDHSecKeyErrors;
}

ValueMetadata *type metadata accessor for TetraECDHSecKey()
{
  return &type metadata for TetraECDHSecKey;
}

uint64_t specialized TetraECDHKey.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x79654B736B61 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79654B706573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (a2)
      v3 = a3 - a2;
    else
      v3 = 0;
    result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(0, result, v3, a2, a3);
    if ((v4 & 1) != 0)
      v5 = v3;
    else
      v5 = result;
    if ((v5 & 0x8000000000000000) == 0)
      return 0;
  }
  __break(1u);
  return result;
}

void specialized Collection.prefix(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x20BAF4CE4);
}

uint64_t one-time initialization function for ciphersuite()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v14 = type metadata accessor for HPKE.AEAD();
  v0 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for HPKE.KDF();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for HPKE.KEM();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HPKE.Ciphersuite();
  __swift_allocate_value_buffer(v11, static GFTKeyWrapper.ciphersuite);
  __swift_project_value_buffer(v11, (uint64_t)static GFTKeyWrapper.ciphersuite);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BDC6768], v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDC6758], v3);
  (*(void (**)(char *, _QWORD, uint64_t))(v0 + 104))(v2, *MEMORY[0x24BDC6778], v14);
  return HPKE.Ciphersuite.init(kem:kdf:aead:)();
}

id @objc static GFTKeyWrapper.encrypt(_:to:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t (*a6)(uint64_t, unint64_t, id))
{
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;

  v8 = a3;
  v9 = a4;
  v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;

  v13 = (void *)a6(v10, v12, v9);
  outlined consume of Data._Representation(v10, v12);
  return v13;
}

id GFTKeyWrapper.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GFTKeyWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GFTKeyWrapper()
{
  return objc_opt_self();
}

void closure #1 in static GFTLegacyWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_20BAF5224()
{
  _DWORD *v0;
  char **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  result = closure #1 in closure #1 in static GFTLegacyWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)(v1, &v5);
  *v0 = v5;
  return result;
}

uint64_t closure #1 in closure #1 in static GFTLegacyWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)@<X0>(char **a1@<X4>, _DWORD *a2@<X8>)
{
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;

  ccaes_siv_encrypt_mode();
  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v4 + 2), 0, v4);
  *a1 = v4;
  result = ccsiv_one_shot();
  *a2 = result;
  return result;
}

void closure #1 in static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_20BAF5530()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;

  v6 = v1;
  v7 = v2;
  v8 = BYTE2(v2);
  v9 = BYTE3(v2);
  v10 = BYTE4(v2);
  v11 = BYTE5(v2);
  closure #1 in closure #1 in static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)(v3, &v5);
  result = outlined consume of Data._Representation(v1, v2);
  *v0 = v5;
  return result;
}

uint64_t closure #1 in closure #1 in static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)@<X0>(void *a1@<X4>, _QWORD *a2@<X8>)
{
  uint64_t result;

  ccaes_siv_decrypt_mode();
  objc_msgSend(objc_retainAutorelease(a1), sel_mutableBytes);
  result = ccsiv_one_shot();
  *a2 = (int)result;
  return result;
}

id closure #1 in static GondolaWrappingAlgorithm.unwrap(wrappedSeed:using:privateKey:publicKey:)@<X0>(id a1@<X2>, const void *a2@<X0>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  id result;
  id v8;

  result = objc_msgSend(objc_retainAutorelease(a1), sel_mutableBytes);
  if (a2)
  {
    v8 = result;
    result = memcpy(result, a2, a3 - (_QWORD)a2);
    *a4 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MPPB_KeyAndIndex>, type metadata accessor for MPPB_KeyAndIndex);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char **a6)
{
  uint64_t v6;
  uint64_t result;
  unsigned int v11;

  result = __DataStorage._bytes.getter();
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
      goto LABEL_8;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  __DataStorage._length.getter();
  result = closure #1 in closure #1 in static GFTLegacyWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)(a6, &v11);
  if (!v6)
    return v11;
  return result;
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_20BAF5CDC + dword_20BAF5D84[a4 >> 62]))();
}

uint64_t sub_20BAF5CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x20BAF5D7CLL);
  }
  return ((uint64_t (*)(void))((char *)&loc_20BAF5D2C + dword_20BAF5D94[a3]))();
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x20BAF5E04);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_20BAF5DBC + *((int *)qword_20BAF5E08 + (a4 >> 62))))(v5);
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *ObjCClassFromMetadata;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = type metadata accessor for SymmetricKey();
  v12 = *(_QWORD *)(v4 - 8);
  v13 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SHA256();
  v14 = xmmword_20BB40390;
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
  lazy protocol witness table accessor for type Data and conformance Data();
  SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)();
  *(_QWORD *)&v14 = a1;
  *((_QWORD *)&v14 + 1) = a2;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSMutableData);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  outlined copy of Data._Representation(a1, a2);
  v8 = objc_msgSend(ObjCClassFromMetadata, sel__newZeroingDataWithBytes_length_, 0, 0);
  if (!v8)
  {
    __break(1u);
    JUMPOUT(0x20BAF630CLL);
  }
  v9 = (uint64_t)v8;
  v10 = objc_msgSend(v8, sel_increaseLengthBy_, 32);
  MEMORY[0x24BDAC7A8](v10);
  *(&v12 - 2) = (uint64_t)&v14;
  *(&v12 - 1) = v9;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  if (v15)
    __asm { BR              X9 }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v6, v13);
  outlined consume of Data._Representation(v14, *((unint64_t *)&v14 + 1));
  return v9;
}

void specialized static GondolaWrappingAlgorithm.unwrap(wrappedSeed:using:privateKey:publicKey:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(uint64_t);
  unint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD v26[2];
  uint64_t v27;
  id ObjCClassFromMetadata;
  id v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  ObjCClassFromMetadata = a5;
  v29 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x24BDAC7A8](v7);
  v27 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v8 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SymmetricKey();
  v30 = *(_QWORD *)(v11 - 8);
  v31 = v11;
  v12 = MEMORY[0x24BDAC7A8](v11);
  v26[1] = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v32 = (char *)v26 - v14;
  v35 = specialized Data.init<A>(_:)(0xD000000000000010, 0x800000020BB482F0);
  v36 = v15;
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  v16 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v27);
  Data.append(_:)();
  outlined consume of Data._Representation(v16, v18);
  v19 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v21 = v20;
  Data.append(_:)();
  outlined consume of Data._Representation(v19, v21);
  type metadata accessor for SHA256();
  v22 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8];
  v37 = MEMORY[0x24BEE4AF8];
  v24 = v35;
  v23 = v36;
  v33 = v35;
  v34 = v36;
  ObjCClassFromMetadata = (id)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  v27 = lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, v22, MEMORY[0x24BDC6AE8]);
  lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  lazy protocol witness table accessor for type Data and conformance Data();
  SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)();
  outlined consume of Data._Representation(v24, v23);
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSMutableData);
  ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  v25 = objc_msgSend(ObjCClassFromMetadata, sel__newZeroingDataWithBytes_length_, 0, 0);
  if (v25)
  {
    v29 = v25;
    objc_msgSend(v25, sel_increaseLengthBy_, 32);
    outlined copy of Data._Representation(a1, a2);
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x20BAF69DCLL);
}

void specialized static GFTKeyWrapper.unwrapWrappedSeed(_:legacy:using:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[11];
  int v16;
  uint64_t v17;

  v15[10] = a4;
  v16 = a3;
  v17 = *MEMORY[0x24BDAC8D0];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedSecret?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for SharedSecret();
  v15[5] = *(_QWORD *)(v7 - 8);
  v15[6] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v15[4] = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PrivateKey?);
  MEMORY[0x24BDAC7A8](v9);
  v10 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  v11 = *(_QWORD *)(v10 - 8);
  v15[8] = v10;
  v15[9] = v11;
  MEMORY[0x24BDAC7A8](v10);
  v15[7] = (char *)v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  MEMORY[0x24BDAC7A8](v13);
  v14 = type metadata accessor for P256.KeyAgreement.PublicKey();
  MEMORY[0x24BDAC7A8](v14);
  __asm { BR              X9 }
}

_QWORD *sub_20BAF6C00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _BYTE *v23;
  CFDataRef v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  void (*v37)(_QWORD, _QWORD);
  uint64_t v38;
  int v39;
  _BYTE *v40;
  _QWORD *v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  _QWORD *v63;

  if (BYTE6(v8) >= 0x42uLL)
  {
    if (v4)
    {
      if (v4 == 1)
      {
        LODWORD(v12) = HIDWORD(v9) - v9;
        v13 = *(_DWORD *)(v11 - 132);
        if (!__OFSUB__(HIDWORD(v9), (_DWORD)v9))
        {
          v12 = (int)v12;
          goto LABEL_10;
        }
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      v17 = *(_QWORD *)(v9 + 16);
      v16 = *(_QWORD *)(v9 + 24);
      v18 = __OFSUB__(v16, v17);
      v12 = v16 - v17;
      if (v18)
        goto LABEL_45;
    }
    else
    {
      v12 = BYTE6(v8);
    }
    v13 = *(_DWORD *)(v11 - 132);
LABEL_10:
    v18 = __OFSUB__(v12, 65);
    v19 = v12 - 65;
    if (v18)
    {
      __break(1u);
    }
    else
    {
      v20 = (v13 & 1) == 0;
      v21 = 40;
      if (!v20)
        v21 = 48;
      if (v19 % v21)
      {
        lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
        swift_allocError();
        v15 = 2;
        goto LABEL_15;
      }
      *(_QWORD *)(v11 - 208) = v1;
      *(_QWORD *)(v11 - 200) = a1;
      outlined copy of Data._Representation(v9, v8);
      specialized Collection.prefix(_:)(65, v9, v8);
      *(_OWORD *)(v11 - 128) = *(_OWORD *)(v11 - 112);
      P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
      if (v3)
      {

        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v7 + 56))(v6, 1, 1, *(_QWORD *)(v11 - 200));
LABEL_21:
        outlined destroy of TetraSessionStates?(v6, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
        lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
        swift_allocError();
        *v23 = 0;
        goto LABEL_16;
      }
      *(_QWORD *)(v11 - 224) = 0;
      v3 = *(_QWORD **)(v11 - 200);
      (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v7 + 56))(v6, 0, 1, v3);
      *(_QWORD *)(v11 - 216) = v7;
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v7 + 48))(v6, 1, v3) == 1)
        goto LABEL_21;
      (*(void (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)(v11 - 216) + 32))(*(_QWORD *)(v11 - 208), v6, v3);
      *(_QWORD *)(v11 - 128) = 0;
      v24 = SecKeyCopyExternalRepresentation(*(SecKeyRef *)(v11 - 144), (CFErrorRef *)(v11 - 128));
      if (!v24)
      {
        static os_log_type_t.error.getter();
        v28 = MessageProtectionLog();
        if (v28)
        {
          v29 = v28;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          v30 = swift_allocObject();
          *(_OWORD *)(v30 + 16) = xmmword_20BB404E0;
          v31 = *(void **)(v11 - 128);
          if (v31)
          {
            v32 = (_QWORD *)v30;
            v33 = v31;
            *(_QWORD *)(v11 - 112) = v33;
            type metadata accessor for CFErrorRef(0);
            lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
            v3 = (_QWORD *)Error.localizedDescription.getter();
            v35 = v34;

            v32[7] = MEMORY[0x24BEE0D00];
            v32[8] = lazy protocol witness table accessor for type String and conformance String();
            v32[4] = v3;
            v32[5] = v35;
            os_log(_:dso:log:_:_:)();

            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
            swift_allocError();
            *v36 = 3;
            swift_willThrow();
LABEL_28:
            v37 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v11 - 216) + 8);
LABEL_31:
            v37(*(_QWORD *)(v11 - 208), *(_QWORD *)(v11 - 200));
            return v3;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      *(_QWORD *)(v11 - 144) = v24;
      *(_QWORD *)(v11 - 112) = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(v11 - 104) = v25;
      v26 = *(void **)(v11 - 224);
      P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)();
      if (v26)
      {

        (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v11 - 152) + 56))(v5, 1, 1, *(_QWORD *)(v11 - 160));
        v27 = *(_QWORD *)(v11 - 216);
LABEL_30:
        outlined destroy of TetraSessionStates?(v5, &demangling cache variable for type metadata for P256.KeyAgreement.PrivateKey?);
        lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
        swift_allocError();
        *v40 = 3;
        swift_willThrow();

        v37 = *(void (**)(_QWORD, _QWORD))(v27 + 8);
        goto LABEL_31;
      }
      v3 = *(_QWORD **)(v11 - 160);
      v38 = *(_QWORD *)(v11 - 152);
      (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v38 + 56))(v5, 0, 1, v3);
      v39 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(v38 + 48))(v5, 1, v3);
      v27 = *(_QWORD *)(v11 - 216);
      if (v39 == 1)
        goto LABEL_30;
      (*(void (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)(v11 - 152) + 32))(*(_QWORD *)(v11 - 168), v5, v3);
      P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
      *(_QWORD *)(v11 - 224) = 0;
      v41 = *(_QWORD **)(v11 - 184);
      v42 = *(_QWORD *)(v11 - 176);
      v43 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v41[7];
      v43(v2, 0, 1, v42);
      v44 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v41[6];
      if (v44(v2, 1, v42) == 1)
      {
        outlined destroy of TetraSessionStates?(v2, &demangling cache variable for type metadata for SharedSecret?);
        v43(v10, 1, 1, v42);
        v45 = *(_QWORD *)(v11 - 152);
        v3 = *(_QWORD **)(v11 - 216);
LABEL_34:
        outlined destroy of TetraSessionStates?(v10, &demangling cache variable for type metadata for SharedSecret?);
        lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
        swift_allocError();
        *v46 = 4;
        swift_willThrow();

        (*(void (**)(_QWORD, _QWORD))(v45 + 8))(*(_QWORD *)(v11 - 168), *(_QWORD *)(v11 - 160));
        v37 = (void (*)(_QWORD, _QWORD))v3[1];
        goto LABEL_31;
      }
      v47 = v2;
      v48 = (void (*)(uint64_t, uint64_t, uint64_t))v41[4];
      v48(v10, v47, v42);
      v43(v10, 0, 1, v42);
      v49 = v44(v10, 1, v42);
      v45 = *(_QWORD *)(v11 - 152);
      v3 = *(_QWORD **)(v11 - 216);
      if (v49 == 1)
        goto LABEL_34;
      v3 = *(_QWORD **)(v11 - 192);
      v48((uint64_t)v3, v10, v42);
      if ((*(_DWORD *)(v11 - 132) & 1) != 0)
      {
        if (v4)
        {
          if (v4 == 1)
            v50 = v9 >> 32;
          else
            v50 = *(_QWORD *)(v9 + 24);
          outlined copy of Data._Representation(v9, v8);
LABEL_50:
          if (v50 >= 65)
          {
            v52 = Data._Representation.subscript.getter();
            v54 = v53;
            outlined consume of Data._Representation(v9, v8);
            v55 = *(_QWORD *)(v11 - 224);
            v56 = specialized static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)(v52, v54);
            if (v55)
            {
              outlined consume of Data._Representation(v52, v54);

              (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v11 - 184) + 8))(v3, *(_QWORD *)(v11 - 176));
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v11 - 152) + 8))(*(_QWORD *)(v11 - 168), *(_QWORD *)(v11 - 160));
              goto LABEL_28;
            }
            v3 = (_QWORD *)v56;
            outlined consume of Data._Representation(v52, v54);
            v57 = *(_QWORD *)(v11 - 168);
LABEL_60:

            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v11 - 184) + 8))(*(_QWORD *)(v11 - 192), *(_QWORD *)(v11 - 176));
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v11 - 152) + 8))(v57, *(_QWORD *)(v11 - 160));
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v11 - 216) + 8))(*(_QWORD *)(v11 - 208), *(_QWORD *)(v11 - 200));
            return v3;
          }
          goto LABEL_63;
        }
LABEL_46:
        v50 = BYTE6(v8);
        goto LABEL_50;
      }
    }
    if (v4)
    {
      if (v4 == 1)
        v51 = v9 >> 32;
      else
        v51 = *(_QWORD *)(v9 + 24);
      outlined copy of Data._Representation(v9, v8);
    }
    else
    {
      v51 = BYTE6(v8);
    }
    if (v51 >= 65)
    {
      v58 = Data._Representation.subscript.getter();
      v60 = v59;
      outlined consume of Data._Representation(v9, v8);
      v57 = *(_QWORD *)(v11 - 168);
      v61 = *(void **)(v11 - 208);
      v62 = *(_QWORD *)(v11 - 224);
      specialized static GondolaWrappingAlgorithm.unwrap(wrappedSeed:using:privateKey:publicKey:)(v58, v60, v3, v57, v61);
      if (v62)
      {
        outlined consume of Data._Representation(v58, v60);

        (*(void (**)(_QWORD *, _QWORD))(*(_QWORD *)(v11 - 184) + 8))(v3, *(_QWORD *)(v11 - 176));
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v11 - 152) + 8))(v57, *(_QWORD *)(v11 - 160));
        (*(void (**)(void *, _QWORD))(*(_QWORD *)(v11 - 216) + 8))(v61, *(_QWORD *)(v11 - 200));
        return v3;
      }
      v3 = v63;
      outlined consume of Data._Representation(v58, v60);
      goto LABEL_60;
    }
LABEL_64:
    __break(1u);
    JUMPOUT(0x20BAF73F0);
  }
  lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
  swift_allocError();
  v15 = 1;
LABEL_15:
  *v14 = v15;
LABEL_16:
  swift_willThrow();
  return v3;
}

objc_class *specialized static GFTKeyWrapper.encrypt(_:to:)(uint64_t a1, uint64_t a2, __SecKey *a3)
{
  objc_class *v3;
  Class isa;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  CFDataRef v21;
  CFDataRef v22;
  unint64_t v23;
  objc_class *result;
  objc_class *v25;
  __CFError *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  CFErrorRef error[2];

  isa = v3;
  v45 = a1;
  v46 = a2;
  error[1] = *(CFErrorRef *)MEMORY[0x24BDAC8D0];
  v6 = type metadata accessor for HPKE.Ciphersuite();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for HPKE.Sender();
  v47 = *(_QWORD *)(v10 - 8);
  v48 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v49 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v50 = (char *)&v43 - v20;
  error[0] = 0;
  v21 = SecKeyCopyExternalRepresentation(a3, error);
  if (v21)
  {
    v22 = v21;
    v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v55 = v23;
    P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
    if (v3)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
    }
    else
    {
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v50, v14, v15);
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v50, v15);
        if (one-time initialization token for ciphersuite != -1)
          swift_once();
        v32 = __swift_project_value_buffer(v6, (uint64_t)static GFTKeyWrapper.ciphersuite);
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v32, v6);
        v33 = v49;
        HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)();
        v34 = HPKE.Sender.encapsulatedKey.getter();
        v44 = v35;
        v52 = v45;
        v53 = v46;
        v51 = xmmword_20BB40390;
        lazy protocol witness table accessor for type Data and conformance Data();
        v36 = HPKE.Sender.seal<A, B>(_:authenticating:)();
        v38 = v37;
        v39 = v34;
        v43 = v34;
        v54 = v34;
        v40 = v44;
        v55 = v44;
        outlined copy of Data._Representation(v39, v44);
        outlined copy of Data._Representation(v36, v38);
        specialized Data.append<A>(contentsOf:)(v36, v38);
        outlined consume of Data._Representation(v36, v38);
        outlined consume of Data._Representation(v36, v38);
        outlined consume of Data._Representation(v43, v40);
        v41 = v54;
        v42 = v55;
        isa = Data._bridgeToObjectiveC()().super.isa;
        outlined consume of Data._Representation(v41, v42);

        (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v48);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v50, v15);
        return isa;
      }
    }
    outlined destroy of TetraSessionStates?((uint64_t)v14, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
    swift_allocError();
    *v31 = 3;
    swift_willThrow();

    return isa;
  }
  static os_log_type_t.error.getter();
  result = (objc_class *)MessageProtectionLog();
  if (result)
  {
    isa = result;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    result = (objc_class *)swift_allocObject();
    *((_OWORD *)result + 1) = xmmword_20BB404E0;
    if (error[0])
    {
      v25 = result;
      v26 = error[0];
      v54 = (uint64_t)v26;
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v27 = Error.localizedDescription.getter();
      v29 = v28;

      *((_QWORD *)v25 + 7) = MEMORY[0x24BEE0D00];
      *((_QWORD *)v25 + 8) = lazy protocol witness table accessor for type String and conformance String();
      *((_QWORD *)v25 + 4) = v27;
      *((_QWORD *)v25 + 5) = v29;
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
      swift_allocError();
      *v30 = 3;
      swift_willThrow();
      return isa;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void specialized static GFTKeyWrapper.decrypt(_:using:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[10];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for HPKE.Ciphersuite();
  v11[3] = *(_QWORD *)(v4 - 8);
  v11[4] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v11[5] = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for HPKE.Recipient();
  v11[1] = *(_QWORD *)(v6 - 8);
  v11[2] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v11[6] = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PrivateKey?);
  MEMORY[0x24BDAC7A8](v8);
  v12 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  v9 = MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v9);
  v11[8] = (char *)v11 - v10;
  outlined copy of Data._Representation(a1, a2);
  specialized Collection.prefix(_:)(65, a1, a2);
  v13 = v14;
  __asm { BR              X9 }
}

uint64_t sub_20BAF7B10()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __SecKey *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  CFDataRef v14;
  CFDataRef v15;
  uint64_t v16;
  uint64_t isa;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;

  if (BYTE6(v1) < 0x41uLL)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(_QWORD *)(v8 - 168) = v0;
  v9 = v2;
  v10 = v6;
  v11 = Data._Representation.subscript.getter();
  v13 = v12;
  outlined consume of Data._Representation(v3, v1);
  *(_QWORD *)(v8 - 112) = 0;
  v14 = SecKeyCopyExternalRepresentation(v7, (CFErrorRef *)(v8 - 112));
  if (!v14)
  {
    static os_log_type_t.error.getter();
    v20 = MessageProtectionLog();
    if (v20)
    {
      v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = xmmword_20BB404E0;
      v23 = *(void **)(v8 - 112);
      if (v23)
      {
        v24 = (_QWORD *)v22;
        v25 = v23;
        *(_QWORD *)(v8 - 104) = v25;
        type metadata accessor for CFErrorRef(0);
        lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
        isa = Error.localizedDescription.getter();
        v27 = v26;

        v24[7] = MEMORY[0x24BEE0D00];
        v24[8] = lazy protocol witness table accessor for type String and conformance String();
        v24[4] = isa;
        v24[5] = v27;
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
        swift_allocError();
        *v28 = 3;
        swift_willThrow();
        outlined consume of Data._Representation(v5, *(_QWORD *)(v8 - 136));
        outlined consume of Data._Representation(v11, v13);
        return isa;
      }
LABEL_16:
      __break(1u);
      JUMPOUT(0x20BAF7FECLL);
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v15 = v14;
  *(_QWORD *)(v8 - 152) = v13;
  *(_QWORD *)(v8 - 104) = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v8 - 96) = v16;
  P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)();
  isa = (uint64_t)v10;
  v18 = v5;
  if (v10)
  {

    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v9 + 56))(v4, 1, 1, *(_QWORD *)(v8 - 144));
    v19 = v11;
LABEL_9:
    outlined destroy of TetraSessionStates?(v4, &demangling cache variable for type metadata for P256.KeyAgreement.PrivateKey?);
    lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
    swift_allocError();
    *v30 = 3;
    swift_willThrow();
    outlined consume of Data._Representation(v18, *(_QWORD *)(v8 - 136));
    outlined consume of Data._Representation(v19, *(_QWORD *)(v8 - 152));

    return isa;
  }
  v29 = *(_QWORD *)(v8 - 144);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v29);
  v19 = v11;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v4, 1, v29) == 1)
    goto LABEL_9;
  v32 = *(_QWORD *)(v8 - 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v32, v4, v29);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v9 + 16))(*(_QWORD *)(v8 - 168), v32, v29);
  if (one-time initialization token for ciphersuite != -1)
    swift_once();
  v33 = *(_QWORD *)(v8 - 192);
  v34 = __swift_project_value_buffer(v33, (uint64_t)static GFTKeyWrapper.ciphersuite);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 200) + 16))(*(_QWORD *)(v8 - 184), v34, v33);
  v35 = *(_QWORD *)(v8 - 136);
  outlined copy of Data._Representation(v18, v35);
  v36 = *(_QWORD *)(v8 - 176);
  HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)();
  v37 = *(_QWORD *)(v8 - 152);
  *(_QWORD *)(v8 - 104) = v19;
  *(_QWORD *)(v8 - 96) = v37;
  *(_OWORD *)(v8 - 128) = xmmword_20BB40390;
  lazy protocol witness table accessor for type Data and conformance Data();
  v38 = HPKE.Recipient.open<A, B>(_:authenticating:)();
  v39 = v36;
  *(_QWORD *)(v8 - 168) = v19;
  v40 = v38;
  v42 = v41;
  isa = (uint64_t)Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v40, v42);
  outlined consume of Data._Representation(*(_QWORD *)(v8 - 168), *(_QWORD *)(v8 - 152));
  outlined consume of Data._Representation(v18, v35);

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v8 - 216) + 8))(v39, *(_QWORD *)(v8 - 208));
  (*(void (**)(_QWORD, _QWORD))(v9 + 8))(*(_QWORD *)(v8 - 160), *(_QWORD *)(v8 - 144));
  return isa;
}

uint64_t specialized Data.init(capacity:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t specialized static GondolaWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v28 = a2;
  v29 = a3;
  v27 = a1;
  v3 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for SymmetricKey();
  v30 = *(_QWORD *)(v31 - 8);
  v7 = MEMORY[0x24BDAC7A8](v31);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v27 - v10;
  v34 = specialized Data.init<A>(_:)(0xD000000000000010, 0x800000020BB482F0);
  v35 = v12;
  v13 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v15 = v14;
  Data.append(_:)();
  outlined consume of Data._Representation(v13, v15);
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  v16 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  Data.append(_:)();
  outlined consume of Data._Representation(v16, v18);
  type metadata accessor for SHA256();
  v19 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8];
  v36 = MEMORY[0x24BEE4AF8];
  v20 = v34;
  v21 = v35;
  v32 = v34;
  v33 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, v19, MEMORY[0x24BDC6AE8]);
  lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  lazy protocol witness table accessor for type Data and conformance Data();
  SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)();
  outlined consume of Data._Representation(v20, v21);
  v34 = v28;
  v35 = v29;
  outlined copy of Data._Representation(v28, v29);
  SymmetricKey.init<A>(data:)();
  v22 = static AES.KeyWrap.wrap(_:using:)();
  v23 = *(void (**)(char *, uint64_t))(v30 + 8);
  v24 = v9;
  v25 = v31;
  v23(v24, v31);
  v23(v11, v25);
  return v22;
}

Class specialized static GFTKeyWrapper.wrapSeed(_:to:legacy:)(uint64_t a1, unint64_t a2, void *a3, int a4)
{
  objc_class *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  objc_class *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Class isa;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  void *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;

  v76 = a2;
  v75 = a1;
  v96 = *MEMORY[0x24BDAC8D0];
  v71 = type metadata accessor for SymmetricKey();
  v70 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v69 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedSecret?);
  MEMORY[0x24BDAC7A8](v8);
  v80 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SharedSecret();
  v68 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v83 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  MEMORY[0x24BDAC7A8](v12);
  v81 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NSFastEnumerationIterator();
  v64 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v82 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v85 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v63 - v20;
  v66 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  v65 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66);
  v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  P256.KeyAgreement.PrivateKey.init(compactRepresentable:)();
  v24 = (uint64_t)objc_msgSend(a3, sel_count);
  v77 = a4;
  v25 = 48;
  if ((a4 & 1) == 0)
    v25 = 40;
  v26 = v24 * v25;
  if ((unsigned __int128)(v24 * (__int128)v25) >> 64 != (v24 * v25) >> 63)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (__OFADD__(v26, 65))
  {
LABEL_26:
    __break(1u);
    JUMPOUT(0x20BAF8E7CLL);
  }
  v84 = v10;
  v94 = specialized Data.init(capacity:)(v26 + 65);
  v95 = v27;
  v28 = P256.KeyAgreement.PrivateKey.publicKey.getter();
  v29 = MEMORY[0x20BD3B280](v28);
  v74 = v16;
  v30 = v29;
  v31 = v17;
  v33 = v32;
  v34 = *(void (**)(char *, uint64_t))(v82 + 8);
  v73 = v31;
  v79 = v34;
  v34(v21, v31);
  Data.append(_:)();
  v35 = v30;
  v36 = v74;
  outlined consume of Data._Representation(v35, v33);
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (v93)
  {
    v78 = MEMORY[0x24BEE4AD8] + 8;
    v67 = xmmword_20BB40390;
    v72 = v23;
    v37 = v73;
    v38 = v14;
    v39 = v4;
    v40 = v68;
    while (1)
    {
      outlined init with take of Any(&v92, &v87);
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
      swift_dynamicCast();
      v41 = v86;
      v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v44 = v43;

      v90 = v42;
      v91 = v44;
      v45 = (uint64_t)v81;
      P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
      isa = v39;
      if (v39)
      {

        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56))(v45, 1, 1, v37);
LABEL_20:
        outlined destroy of TetraSessionStates?(v45, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
        lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
        swift_allocError();
        *v59 = 3;
        swift_willThrow();
        goto LABEL_22;
      }
      v47 = v82;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v82 + 56))(v45, 0, 1, v37);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v45, 1, v37) == 1)
        goto LABEL_20;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v85, v45, v37);
      v48 = (uint64_t)v80;
      P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
      v49 = v84;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v48, 0, 1, v84);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v48, 1, v49) == 1)
      {
        outlined destroy of TetraSessionStates?(v48, &demangling cache variable for type metadata for SharedSecret?);
        lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
        swift_allocError();
        *v60 = 4;
        swift_willThrow();
        v79(v85, v37);
        goto LABEL_22;
      }
      v50 = (uint64_t)v83;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v83, v48, v49);
      if ((v77 & 1) == 0)
      {
        v54 = specialized static GondolaWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)(v50, v75, v76);
        v88 = MEMORY[0x24BDCDDE8];
        v89 = MEMORY[0x24BDCDDC8];
        *(_QWORD *)&v87 = v54;
        *((_QWORD *)&v87 + 1) = v55;
        v56 = (char *)&loc_20BAF8A28
            + *((int *)qword_20BAF8E90 + (__swift_project_boxed_opaque_existential_1(&v87, MEMORY[0x24BDCDDE8])[1] >> 62));
        __asm { BR              X9 }
      }
      type metadata accessor for SHA256();
      v87 = v67;
      lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
      lazy protocol witness table accessor for type Data and conformance Data();
      v51 = v69;
      SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)();
      v52 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v52 + 16) = 48;
      *(_OWORD *)(v52 + 32) = 0u;
      *(_OWORD *)(v52 + 48) = 0u;
      *(_OWORD *)(v52 + 64) = 0u;
      *(_QWORD *)&v87 = v52;
      MEMORY[0x24BDAC7A8](v52);
      v53 = v76;
      *(&v63 - 4) = v75;
      *(&v63 - 3) = v53;
      *(&v63 - 2) = (uint64_t)&v87;
      SymmetricKey.withUnsafeBytes<A>(_:)();
      if ((_DWORD)v90)
        break;
      v39 = 0;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v51, v71);
      if (*(_QWORD *)(v87 + 16))
        Data._Representation.append(contentsOf:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v83, v84);
      v79(v85, v37);
      v23 = v72;
      NSFastEnumerationIterator.next()();
      if (!v93)
        goto LABEL_18;
    }
    lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors();
    swift_allocError();
    *v62 = 5;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v51, v71);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v83, v84);
    v79(v85, v37);
    v23 = v72;
LABEL_22:
    (*(void (**)(char *, uint64_t))(v64 + 8))(v36, v38);
    outlined consume of Data._Representation(v94, v95);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v23, v66);
  }
  else
  {
    v38 = v14;
LABEL_18:
    (*(void (**)(char *, uint64_t))(v64 + 8))(v36, v38);
    v57 = v94;
    v58 = v95;
    outlined copy of Data._Representation(v94, v95);
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v57, v58);
    outlined consume of Data._Representation(v57, v58);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v23, v66);
  }
  return isa;
}

unint64_t lazy protocol witness table accessor for type KeyWrappingErrors and conformance KeyWrappingErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyWrappingErrors and conformance KeyWrappingErrors;
  if (!lazy protocol witness table cache variable for type KeyWrappingErrors and conformance KeyWrappingErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for KeyWrappingErrors, &type metadata for KeyWrappingErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyWrappingErrors and conformance KeyWrappingErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type KeyWrappingErrors and conformance KeyWrappingErrors;
  if (!lazy protocol witness table cache variable for type KeyWrappingErrors and conformance KeyWrappingErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for KeyWrappingErrors, &type metadata for KeyWrappingErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyWrappingErrors and conformance KeyWrappingErrors);
  }
  return result;
}

void partial apply for closure #1 in static GFTLegacyWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in static GFTLegacyWrappingAlgorithm.wrap(sharedSecret:seed:privateKey:publicKey:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    result = MEMORY[0x20BD3C414](MEMORY[0x24BDCFBD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    result = MEMORY[0x20BD3C414](MEMORY[0x24BDCFBE0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A]);
  }
  return result;
}

void partial apply for closure #1 in static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in static GFTLegacyWrappingAlgorithm.unwrap(wrappedSeed:using:)(a1, a2, *(_QWORD *)(v2 + 16));
}

id partial apply for closure #1 in static GondolaWrappingAlgorithm.unwrap(wrappedSeed:using:privateKey:publicKey:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return closure #1 in static GondolaWrappingAlgorithm.unwrap(wrappedSeed:using:privateKey:publicKey:)(*(id *)(v3 + 16), a1, a2, a3);
}

uint64_t getEnumTagSinglePayload for KeyWrappingErrors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyWrappingErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_20BAF9058 + 4 * byte_20BB413C5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_20BAF908C + 4 * byte_20BB413C0[v4]))();
}

uint64_t sub_20BAF908C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BAF9094(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BAF909CLL);
  return result;
}

uint64_t sub_20BAF90A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BAF90B0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_20BAF90B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BAF90BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyWrappingErrors()
{
  return &type metadata for KeyWrappingErrors;
}

uint64_t *initializeBufferWithCopyOfBuffer for MPPB_LiteRatchet(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      outlined copy of Data._Representation(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = a3[6];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *((_QWORD *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
    }
    else
    {
      v18 = *(_QWORD *)v16;
      outlined copy of Data._Representation(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
      *(_QWORD *)v15 = v18;
      *((_QWORD *)v15 + 1) = v17;
    }
    v19 = a3[7];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = *((_QWORD *)v21 + 1);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
    }
    else
    {
      v23 = *(_QWORD *)v21;
      outlined copy of Data._Representation(*(_QWORD *)v21, *((_QWORD *)v21 + 1));
      *(_QWORD *)v20 = v23;
      *((_QWORD *)v20 + 1) = v22;
    }
  }
  return a1;
}

uint64_t destroy for MPPB_LiteRatchet(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;

  v4 = type metadata accessor for UnknownStorage();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + a2[5]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    result = outlined consume of Data._Representation(*v6, v7);
  v8 = (uint64_t *)(a1 + a2[6]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    result = outlined consume of Data._Representation(*v8, v9);
  v10 = (uint64_t *)(a1 + a2[7]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    return outlined consume of Data._Representation(*v10, v11);
  return result;
}

uint64_t initializeWithCopy for MPPB_LiteRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v16 = *v14;
    outlined copy of Data._Representation(*v14, v14[1]);
    *(_QWORD *)v13 = v16;
    *(_QWORD *)(v13 + 8) = v15;
  }
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v21 = *v19;
    outlined copy of Data._Representation(*v19, v19[1]);
    *(_QWORD *)v18 = v21;
    *(_QWORD *)(v18 + 8) = v20;
  }
  return a1;
}

uint64_t assignWithCopy for MPPB_LiteRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      v11 = *v9;
      outlined copy of Data._Representation(v11, v10);
      *v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v12 = *v9;
  outlined copy of Data._Representation(v12, v10);
  v13 = *v8;
  v14 = v8[1];
  *v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  v15 = a3[6];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *(_QWORD *)(a2 + v15 + 8);
  if (*(_QWORD *)(a1 + v15 + 8) >> 60 == 15)
  {
    if (v18 >> 60 != 15)
    {
      v19 = *v17;
      outlined copy of Data._Representation(v19, v18);
      *v16 = v19;
      v16[1] = v18;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v16);
LABEL_13:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    goto LABEL_15;
  }
  v20 = *v17;
  outlined copy of Data._Representation(v20, v18);
  v21 = *v16;
  v22 = v16[1];
  *v16 = v20;
  v16[1] = v18;
  outlined consume of Data._Representation(v21, v22);
LABEL_15:
  v23 = a3[7];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *(_QWORD *)(a2 + v23 + 8);
  if (*(_QWORD *)(a1 + v23 + 8) >> 60 != 15)
  {
    if (v26 >> 60 != 15)
    {
      v28 = *v25;
      outlined copy of Data._Representation(v28, v26);
      v29 = *v24;
      v30 = v24[1];
      *v24 = v28;
      v24[1] = v26;
      outlined consume of Data._Representation(v29, v30);
      return a1;
    }
    outlined destroy of Data((uint64_t)v24);
    goto LABEL_20;
  }
  if (v26 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    return a1;
  }
  v27 = *v25;
  outlined copy of Data._Representation(v27, v26);
  *v24 = v27;
  v24[1] = v26;
  return a1;
}

uint64_t initializeWithTake for MPPB_LiteRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for MPPB_LiteRatchet(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)v8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_QWORD *)(a1 + v13 + 8);
  if (v16 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    goto LABEL_11;
  }
  v17 = *(_QWORD *)(v15 + 8);
  if (v17 >> 60 == 15)
  {
    outlined destroy of Data(v14);
    goto LABEL_9;
  }
  v18 = *(_QWORD *)v14;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = v17;
  outlined consume of Data._Representation(v18, v16);
LABEL_11:
  v19 = a3[7];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = *(_QWORD *)(a1 + v19 + 8);
  if (v22 >> 60 != 15)
  {
    v23 = v21[1];
    if (v23 >> 60 != 15)
    {
      v24 = *v20;
      *v20 = *v21;
      v20[1] = v23;
      outlined consume of Data._Representation(v24, v22);
      return a1;
    }
    outlined destroy of Data((uint64_t)v20);
  }
  *(_OWORD *)v20 = *(_OWORD *)v21;
  return a1;
}

uint64_t getEnumTagSinglePayload for MPPB_LiteRatchet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BAF97A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10)
    return 0;
  else
    return v11;
}

uint64_t storeEnumTagSinglePayload for MPPB_LiteRatchet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BAF9838(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t type metadata accessor for MPPB_LiteRatchet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MPPB_LiteRatchet;
  if (!type metadata singleton initialization cache for MPPB_LiteRatchet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for MPPB_LiteRatchet()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t MPPB_LiteRatchet.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 3 || result == 2 || result == 1)
    {
      type metadata accessor for MPPB_LiteRatchet();
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    v0 = 0;
  }
  return result;
}

uint64_t MPPB_LiteRatchet.traverse<A>(visitor:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = closure #1 in MPPB_LiteRatchet.traverse<A>(visitor:)(v0);
  if (!v1)
  {
    closure #2 in MPPB_LiteRatchet.traverse<A>(visitor:)(v0);
    closure #3 in MPPB_LiteRatchet.traverse<A>(visitor:)(v0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in MPPB_LiteRatchet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for MPPB_LiteRatchet();
  v3 = a1 + *(int *)(result + 20);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #2 in MPPB_LiteRatchet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for MPPB_LiteRatchet();
  v3 = a1 + *(int *)(result + 24);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #3 in MPPB_LiteRatchet.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for MPPB_LiteRatchet();
  v3 = a1 + *(int *)(result + 28);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

double protocol witness for Message.init() in conformance MPPB_LiteRatchet@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v5;

  UnknownStorage.init()();
  result = 0.0;
  v5 = a1[6];
  *(_OWORD *)(a2 + a1[5]) = xmmword_20BB407A0;
  *(_OWORD *)(a2 + v5) = xmmword_20BB407A0;
  *(_OWORD *)(a2 + a1[7]) = xmmword_20BB407A0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance MPPB_LiteRatchet()
{
  return 0xD000000000000010;
}

BOOL protocol witness for Message.isInitialized.getter in conformance MPPB_LiteRatchet(int *a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + a1[5] + 8) >> 60 != 15
      && *(_QWORD *)(v1 + a1[6] + 8) >> 60 != 15
      && *(_QWORD *)(v1 + a1[7] + 8) >> 60 != 15;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance MPPB_LiteRatchet()
{
  return MPPB_LiteRatchet.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance MPPB_LiteRatchet()
{
  return MPPB_LiteRatchet.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance MPPB_LiteRatchet()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (uint64_t (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet, (uint64_t)&protocol conformance descriptor for MPPB_LiteRatchet);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_LiteRatchet@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for _protobuf_nameMap != -1)
    swift_once();
  v2 = type metadata accessor for _NameMap();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static MPPB_LiteRatchet._protobuf_nameMap);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MPPB_LiteRatchet()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (uint64_t (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet, (uint64_t)&protocol conformance descriptor for MPPB_LiteRatchet);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MPPB_LiteRatchet()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (uint64_t (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet, (uint64_t)&protocol conformance descriptor for MPPB_LiteRatchet);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in MPPB_LiteRatchet()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (uint64_t (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet, (uint64_t)&protocol conformance descriptor for MPPB_LiteRatchet);
}

uint64_t base witness table accessor for Message in MPPB_LiteRatchet()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (uint64_t (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet, (uint64_t)&protocol conformance descriptor for MPPB_LiteRatchet);
}

uint64_t base witness table accessor for Hashable in MPPB_LiteRatchet()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (uint64_t (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet, (uint64_t)&protocol conformance descriptor for MPPB_LiteRatchet);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MPPB_LiteRatchet()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (uint64_t (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet, (uint64_t)&protocol conformance descriptor for MPPB_LiteRatchet);
}

uint64_t specialized static MPPB_LiteRatchet.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;

  v4 = type metadata accessor for UnknownStorage();
  v40 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v39 - v8;
  v10 = (int *)type metadata accessor for MPPB_LiteRatchet();
  v11 = v10[5];
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (uint64_t *)(a2 + v11);
  v15 = *v14;
  v16 = v14[1];
  v39 = v7;
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 != 15)
      goto LABEL_10;
    goto LABEL_6;
  }
  if (v16 >> 60 == 15)
    goto LABEL_10;
  outlined copy of Data?(v12, v13);
  outlined copy of Data?(v15, v16);
  specialized static Data.== infix(_:_:)(v12, v13);
  v18 = v17;
  outlined consume of Data?(v15, v16);
  outlined consume of Data?(v12, v13);
  if ((v18 & 1) != 0)
  {
LABEL_6:
    v19 = v10[6];
    v12 = *(_QWORD *)(a1 + v19);
    v13 = *(_QWORD *)(a1 + v19 + 8);
    v20 = (uint64_t *)(a2 + v19);
    v15 = *v20;
    v16 = v20[1];
    if (v13 >> 60 == 15)
    {
      if (v16 >> 60 == 15)
        goto LABEL_15;
    }
    else if (v16 >> 60 != 15)
    {
      outlined copy of Data?(v12, v13);
      outlined copy of Data?(v15, v16);
      specialized static Data.== infix(_:_:)(v12, v13);
      v26 = v25;
      outlined consume of Data?(v15, v16);
      outlined consume of Data?(v12, v13);
      if ((v26 & 1) == 0)
        goto LABEL_12;
LABEL_15:
      v27 = v10[7];
      v28 = *(_QWORD *)(a1 + v27);
      v29 = *(_QWORD *)(a1 + v27 + 8);
      v30 = (uint64_t *)(a2 + v27);
      v31 = *v30;
      v32 = v30[1];
      if (v29 >> 60 == 15)
      {
        if (v32 >> 60 == 15)
          goto LABEL_21;
      }
      else if (v32 >> 60 != 15)
      {
        outlined copy of Data?(v28, v29);
        outlined copy of Data?(v31, v32);
        specialized static Data.== infix(_:_:)(v28, v29);
        v34 = v33;
        outlined consume of Data?(v31, v32);
        outlined consume of Data?(v28, v29);
        if ((v34 & 1) == 0)
          goto LABEL_12;
LABEL_21:
        v35 = v40;
        v36 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
        v36(v9, a1, v4);
        v37 = v39;
        v36(v39, a2, v4);
        lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v23 = dispatch thunk of static Equatable.== infix(_:_:)();
        v38 = *(void (**)(char *, uint64_t))(v35 + 8);
        v38(v37, v4);
        v38(v9, v4);
        return v23 & 1;
      }
      outlined copy of Data?(v28, v29);
      outlined copy of Data?(v31, v32);
      outlined consume of Data?(v28, v29);
      v21 = v31;
      v22 = v32;
      goto LABEL_11;
    }
LABEL_10:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    v21 = v15;
    v22 = v16;
LABEL_11:
    outlined consume of Data?(v21, v22);
  }
LABEL_12:
  v23 = 0;
  return v23 & 1;
}

void specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_20BAFA48C
     + *((int *)qword_20BAFA6C0 + (__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x24BDCDDE8])[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_20BAFA49C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  outlined copy of Data._Representation(v1, v0);
  closure #1 in Data.init<A>(_:)(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  outlined consume of Data._Representation(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v13);
  return v4;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    outlined destroy of TetraSessionStates?((uint64_t)v14, &demangling cache variable for type metadata for ContiguousBytes?);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = _StringObject.sharedUTF8.getter();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = specialized Data._Representation.init(_:)(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = specialized Data.init(count:)(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v14[0]);
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)();
    __asm { BR              X12 }
  }
  outlined init with take of Message(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  __int128 v16;
  __int128 v17[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrefixSequence<SHA384Digest>);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v3);
  outlined init with copy of PrefixSequence<SHA384Digest>(a1, (uint64_t)&v15[-v6]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (!swift_dynamicCast())
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    outlined destroy of TetraSessionStates?((uint64_t)v17, &demangling cache variable for type metadata for ContiguousBytes?);
    v17[0] = xmmword_20BB40390;
    *(_QWORD *)((char *)&v16 + 7) = 0;
    *(_QWORD *)&v16 = 0;
    outlined init with copy of PrefixSequence<SHA384Digest>(a1, (uint64_t)v5);
    v7 = specialized Sequence._copySequenceContents(initializing:)(&v19, &v16, 0);
    v8 = v19;
    if (v7)
    {
      if (v7 <= 0)
      {
        Data._Representation.replaceSubrange(_:with:count:)();
        goto LABEL_6;
      }
    }
    else
    {
      v10 = *((_QWORD *)&v19 + 1);
      *(_QWORD *)((char *)&v19 + 7) = 0;
      *(_QWORD *)&v19 = 0;
      if (!v20 || (v11 = *(_QWORD *)(v8 + 16), v10 == v11))
      {
LABEL_6:
        swift_bridgeObjectRelease();
        outlined destroy of TetraSessionStates?(a1, &demangling cache variable for type metadata for PrefixSequence<SHA384Digest>);
        return *(_QWORD *)&v17[0];
      }
      if ((v10 & 0x8000000000000000) != 0)
LABEL_26:
        __break(1u);
      if (v10 < *(_QWORD *)(v8 + 16))
      {
        LOBYTE(v12) = 0;
        v13 = v20 - 1;
        v14 = v11 - 1;
        do
        {
          *((_BYTE *)&v19 + v12) = *(_BYTE *)(v8 + v10 + 32);
          v12 = v12 + 1;
          if ((v12 & 0x100) != 0)
            goto LABEL_24;
          if (v12 == 14)
          {
            *(_QWORD *)&v16 = v19;
            DWORD2(v16) = DWORD2(v19);
            WORD6(v16) = WORD6(v19);
            Data._Representation.append(contentsOf:)();
            if (!v13 || v14 == v10)
              goto LABEL_6;
            LOBYTE(v12) = 0;
          }
          else if (v14 == v10 || !v13)
          {
            *(_QWORD *)&v16 = v19;
            DWORD2(v16) = DWORD2(v19);
            WORD6(v16) = WORD6(v19);
            Data._Representation.append(contentsOf:)();
            goto LABEL_6;
          }
          ++v10;
          --v13;
        }
        while (v10 < *(_QWORD *)(v8 + 16));
      }
      __break(1u);
LABEL_24:
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
  outlined init with take of Message(v17, (uint64_t)&v19);
  __swift_project_boxed_opaque_existential_1(&v19, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  outlined destroy of TetraSessionStates?(a1, &demangling cache variable for type metadata for PrefixSequence<SHA384Digest>);
  v17[0] = v16;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v19);
  return *(_QWORD *)&v17[0];
}

{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  v10 = lazy protocol witness table accessor for type [UInt8] and conformance <A> [A]();
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  closure #1 in Data.init<A>(_:)(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v8);
  return v5;
}

uint64_t specialized Data.init<A>(_:)(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v12;
  __int128 v13[2];
  uint64_t v14;
  _QWORD v15[6];

  v15[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v12 = a1;
  type metadata accessor for NSData();
  v2 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (!swift_dynamicCast())
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    outlined destroy of TetraSessionStates?((uint64_t)v13, &demangling cache variable for type metadata for ContiguousBytes?);
    v3 = NSData.startIndex.getter();
    v4 = NSData.endIndex.getter();
    v5 = NSData.startIndex.getter();
    v6 = NSData.endIndex.getter();
    if (v3 < v5 || v6 < v3)
    {
      __break(1u);
    }
    else
    {
      v7 = NSData.startIndex.getter();
      v8 = NSData.endIndex.getter();
      if (v4 >= v7 && v8 >= v4)
      {
        if (!__OFSUB__(v4, v3))
        {
          *(_QWORD *)&v13[0] = specialized Data.init(count:)(v4 - v3);
          *((_QWORD *)&v13[0] + 1) = v9;
          MEMORY[0x24BDAC7A8](*(_QWORD *)&v13[0]);
          specialized Data._Representation.withUnsafeMutableBytes<A>(_:)();
          __asm { BR              X12 }
        }
LABEL_11:
        __break(1u);
        JUMPOUT(0x20BAFB2B0);
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  outlined init with take of Message(v13, (uint64_t)v15);
  __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();

  v13[0] = v12;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
  return *(_QWORD *)&v13[0];
}

void AES.IV.init(IV:)(uint64_t a1, uint64_t a2)
{
  specialized AES.IV.init(IV:)(a1, a2);
}

void static AES.CTR.decrypt(key:ciphertext:IV:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static AES.CTR.decrypt(key:ciphertext:IV:)(a1, a2, a3);
}

{
  specialized static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(a1, a2, a3);
}

void static AES.CTR.encrypt(key:message:IV:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static AES.CTR.decrypt(key:ciphertext:IV:)(a1, a2, a3);
}

void AES.IV.data()(uint64_t a1, unint64_t a2)
{
  outlined copy of Data._Representation(a1, a2);
  specialized Data.init<A>(_:)(a1, a2);
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = String.UTF16View.index(_:offsetBy:)();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x20BD3B598](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)()
{
  __asm { BR              X11 }
}

{
  __asm { BR              X11 }
}

_QWORD *sub_20BAFB434@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_QWORD *sub_20BAFB720@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *closure #1 in Data.init<A>(_:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)specialized Data.InlineData.init(_:)(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)specialized Data.LargeSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)specialized Data.InlineSlice.init(_:)((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySo6NSDataCG_SitTgm5(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

_QWORD *_sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *specialized __DataStorage.withUnsafeMutableBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 *v26;
  __int128 v27;
  uint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v4 = v3;
  v8 = type metadata accessor for SHA384Digest();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6320];
  MEMORY[0x24BDAC7A8](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v8);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA384Digest and conformance SHA384Digest, v9, MEMORY[0x24BDC6330]);
  dispatch thunk of Sequence.makeIterator()();
  v12 = *(_QWORD *)(v4
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrefixSequence<SHA384Digest>)
                           + 36));
  result = outlined destroy of TetraSessionStates?(v4, &demangling cache variable for type metadata for PrefixSequence<SHA384Digest>);
  v14 = v33;
  v15 = v34;
  if (!a2)
    goto LABEL_6;
  if (!a3)
  {
LABEL_7:
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v12;
    return a3;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (!v12 || (--v12, v16 = *(_QWORD *)(v33 + 16), v34 == v16))
    {
LABEL_6:
      a3 = 0;
      goto LABEL_7;
    }
    if (v34 < v16)
    {
      v17 = v34 + 1;
      *a2 = *(_BYTE *)(v33 + 32 + v34);
      if (a3 == 1)
      {
        ++v15;
      }
      else
      {
        v18 = a3 - 2;
        if (a3 - 2 >= v16 + ~v15)
          v18 = v16 + ~v15;
        if (v18 >= v12)
          v18 = v12;
        v19 = v18 + 1;
        if (v19 <= 0x10 || (v20 = v15 + v14, ((unint64_t)&a2[-v15 - v14] & 0xFFFFFFFFFFFFFFF0) == 0x20))
        {
          v21 = 1;
          v22 = a2;
        }
        else
        {
          v23 = v19 & 0xF;
          if ((v19 & 0xF) == 0)
            v23 = 16;
          v24 = v19 - v23;
          v17 += v19 - v23;
          v22 = &a2[v19 - v23];
          v21 = v24 + 1;
          v12 -= v24;
          v25 = a2 + 1;
          v26 = (__int128 *)(v20 + 33);
          do
          {
            v27 = *v26++;
            *v25++ = v27;
            v24 -= 16;
          }
          while (v24);
        }
        v28 = 0;
        v29 = v22 + 1;
        v30 = v12 - 1;
        v31 = v21;
        while (1)
        {
          if (v12 == v28)
          {
            v12 = 0;
            v15 = v17 + v28;
            a3 = v21 + v28;
            goto LABEL_7;
          }
          v32 = v30;
          if (!(v17 - v16 + v28))
            break;
          ++v31;
          v29[v28] = *(_BYTE *)(v17 + v14 + 32 + v28);
          ++v28;
          --v30;
          if (!(v21 - a3 + v28))
          {
            v15 = v17 + v28;
            v12 = v32;
            goto LABEL_7;
          }
        }
        v15 = v16;
        v12 = v30;
        a3 = v31;
      }
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

void specialized Sequence._copySequenceContents(initializing:)(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  void *v3;
  id v7;
  uint64_t v8;
  char v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _BYTE *v21;

  v7 = v3;
  v8 = NSData.startIndex.getter();

  v21 = a2;
  if (!a2 || !a3)
    goto LABEL_5;
  if (a3 < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v8 == NSData.endIndex.getter())
  {
LABEL_5:
    *a1 = v7;
    a1[1] = v8;
    return;
  }
  v9 = NSData.subscript.getter();
  v10 = v7;
  v11 = NSData.startIndex.getter();
  v12 = NSData.endIndex.getter();

  if (v8 >= v11 && v8 < v12)
  {
    *a2 = v9;
    if (a3 == 1)
    {
      ++v8;
      goto LABEL_5;
    }
    v20 = a1;
    v13 = 1;
    while (a3 != v13)
    {
      v14 = v8 + v13;
      if (v8 + v13 == NSData.endIndex.getter())
      {
        v8 += v13;
        goto LABEL_18;
      }
      v15 = NSData.subscript.getter();
      v16 = v10;
      v17 = NSData.startIndex.getter();
      v18 = NSData.endIndex.getter();

      if (v14 < v17 || v14 >= v18)
        goto LABEL_20;
      v19 = v13 + 1;
      v21[v13] = v15;
      v13 = v19;
      if (a3 == v19)
      {
        v8 += v19;
LABEL_18:
        a1 = v20;
        goto LABEL_5;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
}

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Data.LargeSlice.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  type metadata accessor for __DataStorage();
  swift_allocObject();
  result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

void specialized AES.IV.init(IV:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_20BAFC1E8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (BYTE6(v0) != 16)
  {
    v2 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, (uint64_t (*)(uint64_t))MEMORY[0x24BDC61A8], MEMORY[0x24BDC61C0]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, *MEMORY[0x24BDC61A0], v2);
    swift_willThrow();
    outlined consume of Data._Representation(v1, v0);
  }
  return v1;
}

uint64_t destroy for AES.IV(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *initializeBufferWithCopyOfBuffer for AES.IV(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithCopy for AES.IV(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for AES.IV(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AES.IV(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AES.IV(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AES.IV()
{
  return &type metadata for AES.IV;
}

ValueMetadata *type metadata accessor for AES.CTR()
{
  return &type metadata for AES.CTR;
}

_QWORD *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

{
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;

  v9 = **(_QWORD **)(v3 + 16);
  v8[2] = &v9;
  result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySo6NSDataCG_SitTgm5((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:), (uint64_t)v8, a1, a2);
  *a3 = result;
  a3[1] = v6;
  a3[2] = v7;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

uint64_t outlined init with copy of PrefixSequence<SHA384Digest>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrefixSequence<SHA384Digest>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)(_BYTE *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v7 = **(id **)(v3 + 16);
  specialized Sequence._copySequenceContents(initializing:)(v10, a1, a2);
  v8 = v10[1];
  *a3 = v10[0];
  a3[1] = v8;
  a3[2] = v9;
}

uint64_t storeEnumTagSinglePayload for SymmetricRatchetErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_20BAFC698 + 4 * byte_20BB41695[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_20BAFC6CC + 4 * asc_20BB41690[v4]))();
}

uint64_t sub_20BAFC6CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BAFC6D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BAFC6DCLL);
  return result;
}

uint64_t sub_20BAFC6E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BAFC6F0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_20BAFC6F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BAFC6FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SymmetricRatchetErrors()
{
  return &type metadata for SymmetricRatchetErrors;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, __int16 a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SymmetricKey();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of TetraSessionStates?(a1, &demangling cache variable for type metadata for SymmetricKey?);
    v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) != 0)
    {
      v15 = v13;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v17 = *v3;
      v22 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        specialized _NativeDictionary.copy()();
        v17 = v22;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v8, *(_QWORD *)(v17 + 56) + *(_QWORD *)(v10 + 72) * v15, v9);
      specialized _NativeDictionary._delete(at:)(v15, v17);
      *v3 = v17;
      swift_bridgeObjectRelease();
      v18 = 0;
    }
    else
    {
      v18 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v18, 1, v9);
    return outlined destroy of TetraSessionStates?((uint64_t)v8, &demangling cache variable for type metadata for SymmetricKey?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    v19 = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, v19);
    *v3 = v22;
    return swift_bridgeObjectRelease();
  }
}

uint64_t one-time initialization function for statusKeyRatchetPrefix()
{
  uint64_t result;
  uint64_t v1;

  result = specialized Data.init<A>(_:)(0xD000000000000013, 0x800000020BB48670);
  statusKeyRatchetPrefix = result;
  unk_253E6C470 = v1;
  return result;
}

double one-time initialization function for statusKitRatchetStep()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  double result;
  __int128 v6;

  if (one-time initialization token for statusKeyRatchetPrefix != -1)
    swift_once();
  v0 = statusKeyRatchetPrefix;
  v1 = qword_253E6C470;
  outlined copy of Data._Representation(statusKeyRatchetPrefix, qword_253E6C470);
  outlined copy of Data._Representation(v0, v1);
  v2 = specialized Data.init<A>(_:)(0x6567617373654D2DLL, 0xEC0000007379654BLL);
  v4 = v3;
  *(_QWORD *)&v6 = v0;
  *((_QWORD *)&v6 + 1) = v1;
  outlined copy of Data._Representation(v0, v1);
  specialized Data.append<A>(contentsOf:)(v2, v4);
  outlined consume of Data._Representation(v2, v4);
  outlined consume of Data._Representation(v0, v1);
  result = *(double *)&v0;
  statusKitRatchetStep = v0;
  unk_253E6C440 = v1;
  xmmword_253E6C448 = v6;
  qword_253E6C458 = 0;
  byte_253E6C460 = 1;
  return result;
}

id SKRatchet.__deallocating_deinit(uint64_t a1)
{
  return Kyber1024ObjC.__deallocating_deinit(a1, type metadata accessor for SKRatchet);
}

uint64_t type metadata accessor for SKRatchet()
{
  return objc_opt_self();
}

char *SKOutgoingRatchet.init(data:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  objc_class *v89;
  _QWORD v90[2];
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  objc_super v109;
  __int128 v110;
  __int128 v111;
  _UNKNOWN **v112;
  char *v113;

  v3 = v2;
  v6 = type metadata accessor for P256.Signing.PrivateKey();
  v99 = *(_QWORD *)(v6 - 8);
  v100 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v106 = (char *)v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for SymmetricKey();
  v105 = *(_QWORD *)(v108 - 8);
  v8 = MEMORY[0x24BDAC7A8](v108);
  v97 = (char *)v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v102 = (char *)v90 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v98 = (uint64_t)v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v104 = (uint64_t)v90 - v14;
  v107 = type metadata accessor for MPPB_KeyAndIndex(0);
  v103 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 - 8);
  v15 = MEMORY[0x24BDAC7A8](v107);
  v96 = (uint64_t)v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v101 = (uint64_t)v90 - v17;
  v18 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v21);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_SKOutgoingRatchet?);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v90 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for MPPB_SKOutgoingRatchet(0);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)v90 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = 0;
  v110 = 0u;
  v111 = 0u;
  v29 = v3;
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, type metadata accessor for MPPB_SKOutgoingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKOutgoingRatchet);
  v30 = v113;
  Message.init(serializedData:extensions:partial:options:)();
  if (v30)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v24, 1, 1, v25);
    outlined destroy of TetraSessionStates?((uint64_t)v24, &demangling cache variable for type metadata for MPPB_SKOutgoingRatchet?);
    lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
    swift_allocError();
    *v31 = 5;
    swift_willThrow();

    outlined consume of Data._Representation(a1, a2);
    type metadata accessor for SKOutgoingRatchet(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v94 = v20;
    v95 = v29;
    v92 = a1;
    v93 = a2;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v24, 0, 1, v25);
    outlined init with take of TetraRatchetState((uint64_t)v24, (uint64_t)v28, type metadata accessor for MPPB_SKOutgoingRatchet);
    v91 = v25;
    v32 = *(int *)(v25 + 20);
    v113 = v28;
    v33 = (uint64_t *)&v28[v32];
    v34 = v33[1];
    if (v34 >> 60 == 15)
      v35 = 0;
    else
      v35 = *v33;
    if (v34 >> 60 == 15)
      v36 = 0xC000000000000000;
    else
      v36 = v33[1];
    outlined copy of Data?(*v33, v34);
    if (one-time initialization token for statusKitRatchetStep != -1)
      swift_once();
    v37 = statusKitRatchetStep;
    v38 = unk_253E6C440;
    v39 = xmmword_253E6C448;
    v40 = qword_253E6C458;
    v41 = byte_253E6C460;
    *((_QWORD *)&v111 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA256>);
    v112 = &protocol witness table for HKDFRatchet<A>;
    v42 = swift_allocObject();
    *(_QWORD *)&v110 = v42;
    *(_QWORD *)(v42 + 16) = v37;
    *(_QWORD *)(v42 + 24) = v38;
    *(_OWORD *)(v42 + 32) = v39;
    *(_QWORD *)(v42 + 48) = v40;
    *(_BYTE *)(v42 + 56) = v41;
    outlined copy of Data._Representation(v37, v38);
    outlined copy of Data._Representation(v39, *((unint64_t *)&v39 + 1));
    v43 = (uint64_t)v94;
    SymmetricRatchet.init(data:step:)(v35, v36, (uint64_t)&v110, (uint64_t)v94);
    v44 = &v95[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_ratchet];
    outlined init with take of TetraRatchetState(v43, (uint64_t)&v95[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_ratchet], (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
    v45 = v104;
    outlined init with copy of MPPB_KeyAndIndex?((uint64_t)&v113[*(int *)(v91 + 32)], v104);
    v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v103 + 6);
    v47 = v107;
    v48 = v46(v45, 1, v107);
    v90[1] = v44;
    v103 = v46;
    if (v48 == 1)
    {
      v49 = v101;
      UnknownStorage.init()();
      *(_OWORD *)(v49 + *(int *)(v47 + 20)) = xmmword_20BB407A0;
      v50 = v49 + *(int *)(v47 + 24);
      *(_QWORD *)v50 = 0;
      *(_BYTE *)(v50 + 8) = 1;
      v51 = v49;
      outlined destroy of TetraSessionStates?(v45, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    }
    else
    {
      v51 = v101;
      outlined init with take of TetraRatchetState(v45, v101, type metadata accessor for MPPB_KeyAndIndex);
    }
    v52 = v108;
    v53 = v102;
    v54 = (uint64_t *)(v51 + *(int *)(v47 + 20));
    v55 = *v54;
    v56 = v54[1];
    if (v56 >> 60 == 15)
      v57 = 0;
    else
      v57 = *v54;
    if (v56 >> 60 == 15)
      v58 = 0xC000000000000000;
    else
      v58 = v56;
    *(_QWORD *)&v110 = v57;
    *((_QWORD *)&v110 + 1) = v58;
    outlined copy of Data?(v55, v56);
    SymmetricKey.init<A>(data:)();
    v59 = v51 + *(int *)(v47 + 24);
    if (*(_BYTE *)(v59 + 8))
      v60 = 0;
    else
      v60 = *(_QWORD *)v59;
    outlined destroy of TetraRatchetOuterMessage(v51, type metadata accessor for MPPB_KeyAndIndex);
    v61 = v95;
    v62 = &v95[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey];
    v63 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
    v63(&v95[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey], v53, v52);
    v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(_QWORD *)&v62[*(int *)(v64 + 48)] = v60;
    v65 = v91;
    v66 = (uint64_t)v113;
    v67 = (uint64_t *)&v113[*(int *)(v91 + 24)];
    v68 = *v67;
    v69 = v67[1];
    if (v69 >> 60 == 15)
      v70 = 0;
    else
      v70 = *v67;
    if (v69 >> 60 == 15)
      v71 = 0xC000000000000000;
    else
      v71 = v69;
    *(_QWORD *)&v110 = v70;
    *((_QWORD *)&v110 + 1) = v71;
    outlined copy of Data?(v68, v69);
    v72 = v106;
    P256.Signing.PrivateKey.init<A>(rawRepresentation:)();
    v105 = v64;
    (*(void (**)(char *, char *, uint64_t))(v99 + 32))(&v61[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_signingKey], v72, v100);
    v74 = v98;
    outlined init with copy of MPPB_KeyAndIndex?(v66 + *(int *)(v65 + 28), v98);
    v75 = v107;
    v76 = v103(v74, 1, v107);
    v77 = v92;
    v78 = v96;
    if (v76 == 1)
    {
      UnknownStorage.init()();
      *(_OWORD *)(v78 + *(int *)(v75 + 20)) = xmmword_20BB407A0;
      v79 = v78 + *(int *)(v75 + 24);
      *(_QWORD *)v79 = 0;
      *(_BYTE *)(v79 + 8) = 1;
      outlined destroy of TetraSessionStates?(v74, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
    }
    else
    {
      outlined init with take of TetraRatchetState(v74, v96, type metadata accessor for MPPB_KeyAndIndex);
    }
    v80 = v97;
    v81 = (uint64_t *)(v78 + *(int *)(v75 + 20));
    v82 = *v81;
    v83 = v81[1];
    if (v83 >> 60 == 15)
      v84 = 0;
    else
      v84 = *v81;
    v85 = 0xC000000000000000;
    if (v83 >> 60 != 15)
      v85 = v83;
    *(_QWORD *)&v110 = v84;
    *((_QWORD *)&v110 + 1) = v85;
    outlined copy of Data?(v82, v83);
    SymmetricKey.init<A>(data:)();
    v86 = v78 + *(int *)(v75 + 24);
    if (*(_BYTE *)(v86 + 8))
      v87 = 0;
    else
      v87 = *(_QWORD *)v86;
    outlined destroy of TetraRatchetOuterMessage(v78, type metadata accessor for MPPB_KeyAndIndex);
    outlined destroy of TetraRatchetOuterMessage(v66, type metadata accessor for MPPB_SKOutgoingRatchet);
    v88 = &v61[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey];
    v63(&v61[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey], v80, v108);
    *(_QWORD *)&v88[*(int *)(v105 + 48)] = v87;

    v89 = (objc_class *)type metadata accessor for SKOutgoingRatchet(0);
    v109.receiver = v61;
    v109.super_class = v89;
    v20 = (char *)objc_msgSendSuper2(&v109, sel_init);
    outlined consume of Data._Representation(v77, v93);
  }
  return v20;
}

id SKOutgoingRatchet.init()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  objc_class *v44;
  id result;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  objc_super v61;
  _QWORD v62[6];

  v1 = type metadata accessor for P256.Signing.PrivateKey();
  v57 = *(_QWORD *)(v1 - 8);
  v58 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v56 = (char *)&v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  MEMORY[0x24BDAC7A8](v60);
  v53 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x24BDAC7A8](v50);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SymmetricKeySize();
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v54 = (uint64_t)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v55 = (char *)&v49 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v49 = (char *)&v49 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v49 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v49 - v18;
  v59 = v0;
  static SymmetricKeySize.bits256.getter();
  SymmetricKey.init(size:)();
  v51 = v8;
  v52 = v19;
  v20 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v20(v17, v19, v7);
  if (one-time initialization token for statusKitRatchetStep != -1)
    swift_once();
  v21 = statusKitRatchetStep;
  v22 = unk_253E6C440;
  v23 = xmmword_253E6C448;
  v24 = qword_253E6C458;
  v25 = byte_253E6C460;
  v62[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA256>);
  v62[4] = &protocol witness table for HKDFRatchet<A>;
  v26 = swift_allocObject();
  v62[0] = v26;
  *(_QWORD *)(v26 + 16) = v21;
  *(_QWORD *)(v26 + 24) = v22;
  *(_OWORD *)(v26 + 32) = v23;
  *(_QWORD *)(v26 + 48) = v24;
  *(_BYTE *)(v26 + 56) = v25;
  v27 = v50;
  *(_QWORD *)&v5[*(int *)(v50 + 20)] = MEMORY[0x24BEE4B00];
  outlined copy of Data._Representation(v21, v22);
  outlined copy of Data._Representation(v23, *((unint64_t *)&v23 + 1));
  if (SymmetricKey.bitCount.getter() <= 255)
  {
    v46 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, (uint64_t (*)(uint64_t))MEMORY[0x24BDC61A8], MEMORY[0x24BDC61C0]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v47, *MEMORY[0x24BDC6190], v46);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v62);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v17, v7);
    swift_bridgeObjectRelease();
    swift_unexpectedError();
    __break(1u);
  }
  else
  {
    outlined init with copy of SymmetricRatchetStep((uint64_t)v62, (uint64_t)&v5[*(int *)(v27 + 24)]);
    v28 = v49;
    v20(v49, v17, v7);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v62);
    v29 = v51;
    v30 = *(void (**)(char *, uint64_t))(v51 + 8);
    v30(v17, v7);
    v31 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    v31(v5, v28, v7);
    v33 = v59;
    v32 = v60;
    *(_QWORD *)&v5[*(int *)(v60 + 48)] = 0;
    v34 = &v33[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_ratchet];
    outlined init with take of TetraRatchetState((uint64_t)v5, (uint64_t)&v33[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_ratchet], (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
    swift_beginAccess();
    v35 = *(int *)(v32 + 48);
    v36 = v53;
    v20(v53, v34, v7);
    v37 = *(_QWORD *)&v34[v35];
    v38 = &v33[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey];
    v31(&v33[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey], v36, v7);
    *(_QWORD *)&v38[*(int *)(v32 + 48)] = v37;
    v39 = v56;
    P256.Signing.PrivateKey.init(compactRepresentable:)();
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(&v33[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_signingKey], v39, v58);
    swift_beginAccess();
    v40 = *(_QWORD *)&v34[*(int *)(v32 + 48)];
    if (v40 != -1)
    {
      v41 = v54;
      SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(v40, 1, v54);
      v42 = v55;
      v31(v55, (char *)v41, v7);
      swift_endAccess();
      v30(v52, v7);
      v43 = &v33[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey];
      v31(&v33[OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey], v42, v7);
      *(_QWORD *)&v43[*(int *)(v32 + 48)] = v40;

      v44 = (objc_class *)type metadata accessor for SKOutgoingRatchet(0);
      v61.receiver = v33;
      v61.super_class = v44;
      return objc_msgSendSuper2(&v61, sel_init);
    }
  }
  lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
  swift_allocError();
  *v48 = 0;
  swift_willThrow();
  swift_endAccess();

  result = (id)swift_unexpectedError();
  __break(1u);
  return result;
}

id static SKOutgoingRatchet.generate()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

Swift::Bool __swiftcall SKOutgoingRatchet.ratchetForward()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *);
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void (*v46)(uint64_t, char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  char *v53;
  char *v54;
  void (*v55)(char *);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;

  v1 = type metadata accessor for SymmetricKey();
  v2 = *(_QWORD **)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v59 = (uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v5 = MEMORY[0x24BDAC7A8](v4);
  v57 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v58 = (char *)&v51 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v51 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v51 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v51 - v15;
  v17 = v0 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_ratchet;
  swift_beginAccess();
  v18 = *(int *)(v4 + 48);
  v19 = *(_QWORD *)(v17 + v18);
  if (v19 <= 0xFFFE)
  {
    v52 = (void (*)(char *, uint64_t, uint64_t))v2[2];
    v52(v16, v17, v1);
    *(_QWORD *)&v16[v18] = v19;
    v20 = v16;
    v21 = v4;
    v22 = v1;
    v23 = (void (*)(char *))v2[4];
    v53 = v20;
    v23(v14);
    v24 = *(int *)(v21 + 48);
    *(_QWORD *)&v14[v24] = v19;
    v54 = v14;
    v55 = v23;
    ((void (*)(char *, char *, uint64_t))v23)(v11, v14, v22);
    v25 = v11;
    *(_QWORD *)&v11[v24] = v19;
    v56 = v0;
    v26 = v0 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey;
    swift_beginAccess();
    v27 = (void (*)(uint64_t, char *, uint64_t))v2[5];
    v28 = v11;
    v29 = v22;
    v30 = v22;
    v31 = v21;
    v27(v26, v28, v30);
    *(_QWORD *)(v26 + *(int *)(v21 + 48)) = v19;
    swift_endAccess();
    swift_beginAccess();
    v32 = *(_QWORD *)(v17 + *(int *)(v21 + 48));
    if (v32 != -1)
    {
      v33 = v59;
      SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(v32, 1, v59);
      v34 = *(int *)(v21 + 48);
      v35 = v57;
      v36 = v33;
      v37 = v29;
      v38 = v29;
      v39 = v25;
      v40 = (void (*)(char *, char *, uint64_t))v55;
      ((void (*)(char *, uint64_t, uint64_t))v55)(v57, v36, v38);
      swift_endAccess();
      *(_QWORD *)&v35[v34] = v32;
      v41 = *(int *)(v21 + 48);
      v42 = (uint64_t)v58;
      v40(v58, v35, v37);
      v43 = *(_QWORD *)&v35[v41];
      *(_QWORD *)(v42 + v34) = v43;
      v44 = *(int *)(v21 + 48);
      v45 = v53;
      v52(v53, v42, v37);
      *(_QWORD *)&v45[v44] = v43;
      v46 = v27;
      v47 = v54;
      v40(v54, v45, v37);
      v48 = *(int *)(v31 + 48);
      *(_QWORD *)&v47[v48] = v43;
      v40(v39, v47, v37);
      *(_QWORD *)&v39[v48] = v43;
      v49 = v56 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey;
      swift_beginAccess();
      v46(v49, v39, v37);
      *(_QWORD *)(v49 + *(int *)(v31 + 48)) = v43;
      swift_endAccess();
      outlined destroy of TetraSessionStates?(v42, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      return 1;
    }
    swift_endAccess();
  }
  return 0;
}

uint64_t SKOutgoingRatchet.sealMessage(_:authenticating:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t result;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  id v62;
  uint64_t v63;
  Class isa;
  Class v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;

  v73 = a3;
  v74 = a4;
  v84 = a1;
  v85 = a2;
  v68 = type metadata accessor for P256.Signing.ECDSASignature();
  v67 = *(_QWORD *)(v68 - 8);
  MEMORY[0x24BDAC7A8](v68);
  v75 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for P256.Signing.PublicKey();
  v79 = *(_QWORD *)(v6 - 8);
  v80 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v78 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.Nonce?);
  MEMORY[0x24BDAC7A8](v8);
  v82 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AES.GCM.SealedBox();
  v76 = *(_QWORD *)(v10 - 8);
  v77 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v83 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MPPB_SKPaddedStatus(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v16 = MEMORY[0x24BDAC7A8](v15);
  v72 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v66 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v66 - v22;
  v24 = *(int *)(v21 + 48);
  v81 = v4;
  v25 = v4 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey;
  swift_beginAccess();
  v70 = v15;
  v26 = *(int *)(v15 + 48);
  v27 = type metadata accessor for SymmetricKey();
  v28 = *(_QWORD **)(v27 - 8);
  v69 = (void (*)(char *, uint64_t, uint64_t))v28[2];
  v69(v20, v25, v27);
  v29 = *(_QWORD *)(v25 + v26);
  ((void (*)(char *, char *, uint64_t))v28[4])(v23, v20, v27);
  v71 = v24;
  *(_QWORD *)&v23[v24] = v29;
  if (v29 >= 0xFFFF)
  {
    lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
    swift_allocError();
    *v38 = 0;
    swift_willThrow();
    goto LABEL_9;
  }
  v30 = v28;
  v32 = v84;
  v31 = v85;
  outlined copy of Data._Representation(v84, v85);
  UnknownStorage.init()();
  v33 = &v14[*(int *)(v12 + 20)];
  *(_OWORD *)v33 = xmmword_20BB407A0;
  v34 = *(int *)(v12 + 24);
  *(_QWORD *)v33 = v32;
  *((_QWORD *)v33 + 1) = v31;
  *(_OWORD *)&v14[v34] = xmmword_20BB40390;
  v28 = v14;
  v35 = (uint64_t)v90;
  v36 = MPPB_SKPaddedStatus.paddedData()();
  if (v35)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v14, type metadata accessor for MPPB_SKPaddedStatus);
LABEL_9:
    outlined destroy of TetraSessionStates?((uint64_t)v23, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    return (uint64_t)v28;
  }
  v90 = v14;
  v88 = v36;
  v89 = v37;
  v39 = type metadata accessor for AES.GCM.Nonce();
  v40 = (uint64_t)v82;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v82, 1, 1, v39);
  v41 = v78;
  v85 = v81 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_signingKey;
  P256.Signing.PrivateKey.publicKey.getter();
  v42 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v79 + 8))(v41, v80);
  if (v44 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_12;
  }
  v86 = v42;
  v87 = v44;
  v45 = lazy protocol witness table accessor for type Data and conformance Data();
  static AES.GCM.seal<A, B>(_:using:nonce:authenticating:)();
  outlined consume of Data?(v42, v44);
  outlined destroy of TetraSessionStates?(v40, &demangling cache variable for type metadata for AES.GCM.Nonce?);
  outlined consume of Data._Representation(v88, v89);
  v46 = AES.GCM.SealedBox.combined.getter();
  if (v47 >> 60 == 15)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v48 = v46;
  v49 = v47;
  v84 = v45;
  v50 = *(int *)(v70 + 48);
  v51 = v72;
  v69(v72, (uint64_t)v23, v27);
  v52 = *(_QWORD *)&v23[v71];
  *(_QWORD *)&v51[v50] = v52;
  v82 = (char *)v52;
  if (v52 < 0x10000)
  {
    ((void (*)(char *, uint64_t))v30[1])(v51, v27);
    v88 = v48;
    v89 = v49;
    outlined copy of Data?(v48, v49);
    v54 = v73;
    v53 = v74;
    outlined copy of Data._Representation(v73, v74);
    specialized Data.append<A>(contentsOf:)(v54, v53);
    outlined consume of Data._Representation(v54, v53);
    v55 = v88;
    v56 = v89;
    v86 = v88;
    v87 = v89;
    v57 = v75;
    P256.Signing.PrivateKey.signature<A>(for:)();
    outlined consume of Data._Representation(v55, v56);
    v59 = P256.Signing.ECDSASignature.rawRepresentation.getter();
    v61 = v60;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v57, v68);
    v62 = objc_allocWithZone((Class)MPStatusKitMessage);
    v63 = v48;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v65 = Data._bridgeToObjectiveC()().super.isa;
    v28 = objc_msgSend(v62, sel_initWithIndex_encryptedMessage_signature_, (unsigned __int16)v82, isa, v65);
    outlined consume of Data._Representation(v59, v61);
    outlined consume of Data?(v63, v49);

    (*(void (**)(char *, uint64_t))(v76 + 8))(v83, v77);
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v90, type metadata accessor for MPPB_SKPaddedStatus);
    outlined destroy of TetraSessionStates?((uint64_t)v23, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    return (uint64_t)v28;
  }
LABEL_13:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

MPStatusKitSubscriptionKeys __swiftcall SKOutgoingRatchet.currentSubscriptionKeys()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  Class isa;
  Class v30;
  objc_class *v31;
  unsigned __int16 v32;
  NSData *v33;
  NSData *v34;
  objc_class *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  MPStatusKitSubscriptionKeys result;

  v1 = type metadata accessor for P256.Signing.PublicKey();
  v39 = *(_QWORD *)(v1 - 8);
  v40 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v37 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v36 - v8;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v36 - v11;
  v36 = *(int *)(v10 + 48);
  v38 = v0;
  v13 = v0 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey;
  swift_beginAccess();
  v14 = *(int *)(v3 + 48);
  v15 = type metadata accessor for SymmetricKey();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v17(v9, v13, v15);
  v18 = *(_QWORD *)(v13 + v14);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v12, v9, v15);
  *(_QWORD *)&v12[v36] = v18;
  v19 = *(int *)(v3 + 48);
  v17(v6, (uint64_t)v12, v15);
  *(_QWORD *)&v6[v19] = v18;
  if (v18 >= 0x10000)
    goto LABEL_5;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v15);
  type metadata accessor for NSData();
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v20 = v41;
  v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v23 = v22;

  v24 = v37;
  P256.Signing.PrivateKey.publicKey.getter();
  v25 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v40);
  if (v27 >> 60 == 15)
  {
    __break(1u);
LABEL_5:
    v35 = (objc_class *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_6;
  }
  v28 = objc_allocWithZone((Class)MPStatusKitSubscriptionKeys);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v30 = Data._bridgeToObjectiveC()().super.isa;
  v31 = (objc_class *)objc_msgSend(v28, sel_initWithIndex_chainKey_signingKey_, (unsigned __int16)v18, isa, v30);
  outlined consume of Data?(v25, v27);
  outlined consume of Data._Representation(v21, v23);

  outlined destroy of TetraSessionStates?((uint64_t)v12, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v35 = v31;
LABEL_6:
  result._signingKey = v34;
  result._chainKey = v33;
  result.super.isa = v35;
  result._index = v32;
  return result;
}

uint64_t SKOutgoingRatchet.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  void (*v84)(void);
  char *v85;
  void *v86;
  void *v87;

  v1 = v0;
  v2 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x24BDAC7A8](v2);
  v79 = (uint64_t)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v85 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MPPB_KeyAndIndex(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for MPPB_SKOutgoingRatchet(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v76 = &v16[v14[5]];
  v82 = xmmword_20BB407A0;
  *(_OWORD *)v76 = xmmword_20BB407A0;
  v77 = &v16[v14[6]];
  v78 = v14;
  *(_OWORD *)v77 = xmmword_20BB407A0;
  v72 = &v16[v14[7]];
  v75 = v16;
  v17 = *(void (**)(void))(v11 + 56);
  v84 = v17;
  v17();
  v74 = &v16[v14[8]];
  v17();
  v18 = v1 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentMessageKey;
  swift_beginAccess();
  v19 = v4;
  v67 = v4;
  v20 = *(int *)(v4 + 48);
  v70 = v8;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v80 = v7;
  v21(v6, v18, v7);
  v68 = v21;
  v22 = *(_QWORD *)(v18 + v20);
  v73 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v23 = v85;
  v73(v85, v6, v7);
  v21(v6, (uint64_t)v23, v7);
  *(_QWORD *)&v6[*(int *)(v19 + 48)] = v22;
  v24 = v13;
  UnknownStorage.init()();
  v81 = v10;
  v25 = &v13[*(int *)(v10 + 20)];
  *(_OWORD *)v25 = v82;
  v26 = &v24[*(int *)(v10 + 24)];
  v27 = (uint64_t)v24;
  *(_QWORD *)v26 = 0;
  v26[8] = 1;
  v71 = type metadata accessor for NSData();
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v69 = 0;
  v28 = v87;
  v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v31 = v30;

  *(_QWORD *)v25 = v29;
  *((_QWORD *)v25 + 1) = v31;
  outlined destroy of TetraSessionStates?((uint64_t)v6, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)v26 = v22;
  v26[8] = 0;
  v70 = *(_QWORD *)(v70 + 8);
  v32 = v85;
  v33 = v80;
  ((void (*)(char *, uint64_t))v70)(v85, v80);
  v34 = (uint64_t)v72;
  outlined destroy of TetraSessionStates?((uint64_t)v72, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  v35 = v27;
  outlined init with take of TetraRatchetState(v27, v34, type metadata accessor for MPPB_KeyAndIndex);
  v36 = v81;
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v84)(v34, 0, 1, v81);
  v37 = v83 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_currentSubscriptionKey;
  swift_beginAccess();
  v38 = v67;
  v39 = *(int *)(v67 + 48);
  v40 = (void (*)(char *, char *, uint64_t))v68;
  v68(v6, v37, v33);
  v41 = *(_QWORD *)(v37 + v39);
  v73(v32, v6, v33);
  v40(v6, v32, v33);
  *(_QWORD *)&v6[*(int *)(v38 + 48)] = v41;
  UnknownStorage.init()();
  v42 = v35 + *(int *)(v36 + 20);
  *(_OWORD *)v42 = v82;
  v43 = v35 + *(int *)(v36 + 24);
  v44 = v35;
  *(_QWORD *)v43 = 0;
  *(_BYTE *)(v43 + 8) = 1;
  v45 = v69;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v46 = v86;
  v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v49 = v48;

  *(_QWORD *)v42 = v47;
  *(_QWORD *)(v42 + 8) = v49;
  outlined destroy of TetraSessionStates?((uint64_t)v6, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)v43 = v41;
  *(_BYTE *)(v43 + 8) = 0;
  ((void (*)(char *, uint64_t))v70)(v85, v80);
  v50 = (uint64_t)v74;
  outlined destroy of TetraSessionStates?((uint64_t)v74, &demangling cache variable for type metadata for MPPB_KeyAndIndex?);
  outlined init with take of TetraRatchetState(v44, v50, type metadata accessor for MPPB_KeyAndIndex);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v84)(v50, 0, 1, v81);
  v51 = v83 + OBJC_IVAR____TtC17MessageProtection17SKOutgoingRatchet_ratchet;
  swift_beginAccess();
  v52 = v79;
  outlined init with copy of SymmetricRatchet(v51, v79);
  v53 = SymmetricRatchet.serializedData()();
  v55 = v54;
  outlined destroy of TetraRatchetOuterMessage(v52, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
  v56 = (uint64_t *)v76;
  v57 = outlined consume of Data?(*(_QWORD *)v76, *((_QWORD *)v76 + 1));
  *v56 = v53;
  v56[1] = v55;
  v58 = (uint64_t)v75;
  v59 = MEMORY[0x20BD3B310](v57);
  v61 = v60;
  v62 = (uint64_t *)v77;
  outlined consume of Data?(*(_QWORD *)v77, *((_QWORD *)v77 + 1));
  *v62 = v59;
  v62[1] = v61;
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKOutgoingRatchet and conformance MPPB_SKOutgoingRatchet, type metadata accessor for MPPB_SKOutgoingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKOutgoingRatchet);
  v63 = Message.serializedData(partial:)();
  if (v45)
  {
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    v64 = v63;
    outlined destroy of TetraRatchetOuterMessage(v58, type metadata accessor for MPPB_SKOutgoingRatchet);
    return v64;
  }
  return result;
}

void SKOutgoingRatchet.signingKeyIdentifier()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[12];

  v8[11] = *MEMORY[0x24BDAC8D0];
  v0 = type metadata accessor for SHA256();
  v8[1] = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v1 = type metadata accessor for P256.Signing.PublicKey();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SHA256Digest();
  v8[2] = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  P256.Signing.PrivateKey.publicKey.getter();
  P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  v7 = v6;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v7 >> 60 != 15)
  {
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    dispatch thunk of HashFunction.init()();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x20BAFF1B4);
}

id SKOutgoingRatchet.__deallocating_deinit()
{
  return Kyber1024ObjC.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for SKOutgoingRatchet);
}

uint64_t ObjC metadata update function for SKOutgoingRatchet()
{
  return type metadata accessor for SKOutgoingRatchet(0);
}

uint64_t type metadata accessor for SKOutgoingRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for SKOutgoingRatchet);
}

uint64_t type metadata completion function for SKOutgoingRatchet()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;

  result = type metadata accessor for SymmetricRatchet();
  if (v1 <= 0x3F)
  {
    v6 = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for P256.Signing.PrivateKey();
    if (v2 <= 0x3F)
    {
      v7 = *(_QWORD *)(result - 8) + 64;
      result = type metadata accessor for SymmetricKey();
      if (v3 <= 0x3F)
      {
        swift_getTupleTypeLayout2();
        v8 = &v5;
        swift_getTupleTypeLayout2();
        v9 = &v4;
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t SKIncomingRatchet.init(data:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _BYTE *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v71;
  char v72;
  unint64_t v73;
  char isUniquelyReferenced_nonNull_native;
  void (*v75)(char *, uint64_t, uint64_t);
  char v76;
  uint64_t v77;
  _BOOL8 v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  char v82;
  char *v83;
  _QWORD *v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  objc_class *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  char *v102;
  objc_super v103;
  __int128 v104;
  __int128 v105;
  _UNKNOWN **v106;
  char *v107;

  v3 = v2;
  v6 = type metadata accessor for SymmetricKey();
  v99 = *(_QWORD *)(v6 - 8);
  v100 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v102 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v98 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v107 = (char *)&v89 - v11;
  v12 = type metadata accessor for P256.Signing.PublicKey();
  v94 = *(_QWORD *)(v12 - 8);
  v95 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v96 = (uint64_t)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x24BDAC7A8](v14);
  v97 = (uint64_t)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v16);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_SKIncomingRatchet?);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v89 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for MPPB_SKIncomingRatchet(0);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (unint64_t)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = 0;
  v104 = 0u;
  v105 = 0u;
  v24 = v3;
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, type metadata accessor for MPPB_SKIncomingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKIncomingRatchet);
  v25 = a1;
  v26 = a2;
  v27 = v101;
  Message.init(serializedData:extensions:partial:options:)();
  v28 = v27;
  if (v27)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    outlined destroy of TetraSessionStates?((uint64_t)v19, &demangling cache variable for type metadata for MPPB_SKIncomingRatchet?);
    lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
    swift_allocError();
    *v29 = 5;
    swift_willThrow();
    outlined consume of Data._Representation(v25, v26);
LABEL_17:

    type metadata accessor for SKIncomingRatchet(0);
    swift_deallocPartialClassInstance();
    return (uint64_t)v24;
  }
  v91 = v24;
  v92 = v25;
  v93 = v26;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v20);
  outlined init with take of TetraRatchetState((uint64_t)v19, v23, type metadata accessor for MPPB_SKIncomingRatchet);
  v30 = (uint64_t *)(v23 + *(int *)(v20 + 24));
  v31 = *v30;
  v32 = v30[1];
  if (v32 >> 60 == 15)
    v33 = 0;
  else
    v33 = *v30;
  v101 = (_QWORD *)v33;
  v34 = 0xC000000000000000;
  if (v32 >> 60 != 15)
    v34 = v32;
  v90 = v34;
  outlined copy of Data?(v31, v32);
  if (one-time initialization token for statusKitRatchetStep != -1)
LABEL_52:
    swift_once();
  v35 = statusKitRatchetStep;
  v36 = unk_253E6C440;
  v37 = xmmword_253E6C448;
  v38 = qword_253E6C458;
  v39 = byte_253E6C460;
  *((_QWORD *)&v105 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA256>);
  v106 = &protocol witness table for HKDFRatchet<A>;
  v40 = swift_allocObject();
  *(_QWORD *)&v104 = v40;
  *(_QWORD *)(v40 + 16) = v35;
  *(_QWORD *)(v40 + 24) = v36;
  *(_OWORD *)(v40 + 32) = v37;
  *(_QWORD *)(v40 + 48) = v38;
  *(_BYTE *)(v40 + 56) = v39;
  outlined copy of Data._Representation(v35, v36);
  outlined copy of Data._Representation(v37, *((unint64_t *)&v37 + 1));
  v41 = v97;
  SymmetricRatchet.init(data:step:)((uint64_t)v101, v90, (uint64_t)&v104, v97);
  if (v28)
  {
    outlined consume of Data._Representation(v92, v93);
    outlined destroy of TetraRatchetOuterMessage(v23, type metadata accessor for MPPB_SKIncomingRatchet);
    v24 = v91;
    goto LABEL_17;
  }
  v42 = v91;
  outlined init with take of TetraRatchetState(v41, (uint64_t)&v91[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_ratchet], (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
  v43 = (uint64_t *)(v23 + *(int *)(v20 + 28));
  v44 = *v43;
  v45 = v43[1];
  if (v45 >> 60 == 15)
    v46 = 0;
  else
    v46 = *v43;
  v47 = 0xC000000000000000;
  if (v45 >> 60 != 15)
    v47 = v45;
  *(_QWORD *)&v104 = v46;
  *((_QWORD *)&v104 + 1) = v47;
  outlined copy of Data?(v44, v45);
  v48 = v96;
  P256.Signing.PublicKey.init<A>(compactRepresentation:)();
  v49 = v23;
  v50 = v92;
  v51 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 32))(&v42[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_signingPublicKey], v48, v95);
  v96 = v49;
  v53 = *(_QWORD *)v49;
  v54 = *(_QWORD *)(*(_QWORD *)v49 + 16);
  if (!v54)
  {
    v28 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_50:
    outlined destroy of TetraRatchetOuterMessage(v96, type metadata accessor for MPPB_SKIncomingRatchet);
    *(_QWORD *)&v42[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_messageKeys] = v28;

    v88 = (objc_class *)type metadata accessor for SKIncomingRatchet(0);
    v103.receiver = v42;
    v103.super_class = v88;
    v24 = (char *)objc_msgSendSuper2(&v103, sel_init);
    outlined consume of Data._Representation(v50, v51);
    return (uint64_t)v24;
  }
  v95 = 0;
  v55 = type metadata accessor for MPPB_KeyAndIndex(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = v53 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
  v97 = *(_QWORD *)(v56 + 72);
  v94 = v53;
  swift_bridgeObjectRetain();
  v28 = (_QWORD *)MEMORY[0x24BEE4B00];
  v59 = v99;
  v58 = v100;
  v60 = (uint64_t)v98;
  v61 = (uint64_t)v107;
  v101 = (_QWORD *)v55;
  while (1)
  {
    v63 = *(int *)(v55 + 24);
    if ((*(_BYTE *)(v57 + v63 + 8) & 1) != 0)
    {
      LOWORD(v64) = 0;
    }
    else
    {
      v64 = *(_QWORD *)(v57 + v63);
      if (v64 >= 0x10000)
        goto LABEL_54;
    }
    v65 = (uint64_t *)(v57 + *(int *)(v55 + 20));
    v66 = *v65;
    v67 = v65[1];
    if (v67 >> 60 == 15)
      v68 = 0;
    else
      v68 = *v65;
    v69 = 0xC000000000000000;
    if (v67 >> 60 != 15)
      v69 = v67;
    *(_QWORD *)&v104 = v68;
    *((_QWORD *)&v104 + 1) = v69;
    outlined copy of Data?(v66, v67);
    SymmetricKey.init<A>(data:)();
    v70 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56);
    v70(v61, 0, 1, v58);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v61, 1, v58) == 1)
    {
      outlined destroy of TetraSessionStates?(v61, &demangling cache variable for type metadata for SymmetricKey?);
      v71 = specialized __RawDictionaryStorage.find<A>(_:)(v64);
      if ((v72 & 1) != 0)
      {
        v73 = v71;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v104 = v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v28 = (_QWORD *)v104;
        }
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v59 + 32))(v60, v28[7] + *(_QWORD *)(v59 + 72) * v73, v58);
        specialized _NativeDictionary._delete(at:)(v73, (uint64_t)v28);
        swift_bridgeObjectRelease();
        v62 = 0;
      }
      else
      {
        v62 = 1;
      }
      v70(v60, v62, 1, v58);
      outlined destroy of TetraSessionStates?(v60, &demangling cache variable for type metadata for SymmetricKey?);
      goto LABEL_23;
    }
    v75 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 32);
    v75(v102, v61, v58);
    v20 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v104 = v28;
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v64);
    v77 = v28[2];
    v78 = (v76 & 1) == 0;
    v79 = v77 + v78;
    if (__OFADD__(v77, v78))
    {
      __break(1u);
      goto LABEL_52;
    }
    v80 = v76;
    if (v28[3] >= v79)
    {
      v83 = v102;
      if ((v20 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v83 = v102;
      }
      v59 = v99;
      v84 = (_QWORD *)v104;
      if ((v80 & 1) != 0)
        goto LABEL_46;
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v79, v20);
      v81 = specialized __RawDictionaryStorage.find<A>(_:)(v64);
      if ((v80 & 1) != (v82 & 1))
        goto LABEL_55;
      v23 = v81;
      v59 = v99;
      v83 = v102;
      v84 = (_QWORD *)v104;
      if ((v80 & 1) != 0)
      {
LABEL_46:
        v58 = v100;
        (*(void (**)(unint64_t, char *, uint64_t))(v59 + 40))(v84[7] + *(_QWORD *)(v59 + 72) * v23, v83, v100);
        goto LABEL_47;
      }
    }
    v84[(v23 >> 6) + 8] |= 1 << v23;
    *(_WORD *)(v84[6] + 2 * v23) = v64;
    v58 = v100;
    v75((char *)(v84[7] + *(_QWORD *)(v59 + 72) * v23), (uint64_t)v83, v100);
    v85 = v84[2];
    v86 = __OFADD__(v85, 1);
    v87 = v85 + 1;
    if (v86)
      break;
    v84[2] = v87;
LABEL_47:
    v28 = (_QWORD *)v104;
    swift_bridgeObjectRelease();
    v60 = (uint64_t)v98;
LABEL_23:
    v61 = (uint64_t)v107;
    v57 += v97;
    --v54;
    v55 = (uint64_t)v101;
    if (!v54)
    {
      swift_bridgeObjectRelease();
      v42 = v91;
      v50 = v92;
      v51 = v93;
      goto LABEL_50;
    }
  }
  __break(1u);
LABEL_54:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_55:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

char *SKIncomingRatchet.init(key:index:signingKey:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  void *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  objc_class *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  objc_super v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _UNKNOWN **v64;
  unint64_t v65;

  v65 = a5;
  v59 = a4;
  v49 = a3;
  v8 = type metadata accessor for P256.Signing.PublicKey();
  v46 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v50 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x24BDAC7A8](v10);
  v55 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SymmetricKey();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v48 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v46 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v46 - v19;
  v61 = a1;
  v62 = a2;
  v58 = v5;
  v53 = a1;
  v54 = a2;
  outlined copy of Data._Representation(a1, a2);
  SymmetricKey.init<A>(data:)();
  v56 = v13;
  v57 = v12;
  v21 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v52 = v20;
  v21(v18, v20, v12);
  if (one-time initialization token for statusKitRatchetStep != -1)
    swift_once();
  v22 = statusKitRatchetStep;
  v23 = unk_253E6C440;
  v24 = xmmword_253E6C448;
  v25 = qword_253E6C458;
  v26 = byte_253E6C460;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA256>);
  v64 = &protocol witness table for HKDFRatchet<A>;
  v27 = swift_allocObject();
  v61 = v27;
  *(_QWORD *)(v27 + 16) = v22;
  *(_QWORD *)(v27 + 24) = v23;
  *(_OWORD *)(v27 + 32) = v24;
  *(_QWORD *)(v27 + 48) = v25;
  *(_BYTE *)(v27 + 56) = v26;
  v28 = v55;
  *(_QWORD *)&v55[*(int *)(v10 + 20)] = MEMORY[0x24BEE4B00];
  outlined copy of Data._Representation(v22, v23);
  outlined copy of Data._Representation(v24, *((unint64_t *)&v24 + 1));
  if (SymmetricKey.bitCount.getter() > 255)
  {
    outlined init with copy of SymmetricRatchetStep((uint64_t)&v61, (uint64_t)&v28[*(int *)(v10 + 24)]);
    v33 = v48;
    v34 = v57;
    v21(v48, v18, v57);
    v35 = (uint64_t)v28;
    v36 = (unsigned __int16)v49;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v61);
    v37 = v56;
    v38 = *(void (**)(char *, uint64_t))(v56 + 8);
    v38(v18, v34);
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v35, v33, v34);
    *(_QWORD *)(v35
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                       + 48)) = v36;
    v39 = v58;
    v32 = &v58[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_ratchet];
    outlined init with take of TetraRatchetState(v35, (uint64_t)&v58[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_ratchet], (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
    v40 = v59;
    v41 = v65;
    v61 = v59;
    v62 = v65;
    outlined copy of Data._Representation(v59, v65);
    v43 = v50;
    v42 = v51;
    P256.Signing.PublicKey.init<A>(compactRepresentation:)();
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&v39[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_signingPublicKey], v43, v47);
      v38(v52, v34);
      *(_QWORD *)&v39[OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_messageKeys] = MEMORY[0x24BEE4B00];

      v45 = (objc_class *)type metadata accessor for SKIncomingRatchet(0);
      v60.receiver = v39;
      v60.super_class = v45;
      v32 = (char *)objc_msgSendSuper2(&v60, sel_init);
      outlined consume of Data._Representation(v40, v41);
      outlined consume of Data._Representation(v53, v54);
      return v32;
    }
    outlined consume of Data._Representation(v40, v41);
    outlined consume of Data._Representation(v53, v54);
    v38(v52, v34);
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);

  }
  else
  {
    v29 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, (uint64_t (*)(uint64_t))MEMORY[0x24BDC61A8], MEMORY[0x24BDC61C0]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v30, *MEMORY[0x24BDC6190], v29);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v61);
    v31 = v57;
    v32 = *(char **)(v56 + 8);
    ((void (*)(char *, uint64_t))v32)(v18, v57);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v59, v65);
    outlined consume of Data._Representation(v53, v54);

    ((void (*)(char *, uint64_t))v32)(v52, v31);
  }
  type metadata accessor for SKIncomingRatchet(0);
  swift_deallocPartialClassInstance();
  return v32;
}

uint64_t SKIncomingRatchet.openStatus(index:encryptedMessage:authenticating:signature:)(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, _QWORD, _QWORD), unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void (*v43)(_QWORD, _QWORD, _QWORD, _QWORD);
  __int128 v44;
  char v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  char *v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, unint64_t, uint64_t);
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t, uint64_t);
  _BYTE *v69;
  uint64_t v70;
  void *v71;
  __int16 v72;
  id v73;
  uint64_t v74;
  _BYTE *v75;
  void (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  void (*v125)(_QWORD, _QWORD, _QWORD, _QWORD);
  unint64_t v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  char *v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  char v135;

  v129 = a6;
  v126 = a5;
  v124 = a1;
  v125 = a4;
  *(_QWORD *)&v128 = a2;
  *((_QWORD *)&v128 + 1) = a3;
  v8 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v8);
  v115 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MPPB_SKPaddedStatus?);
  MEMORY[0x24BDAC7A8](v10);
  v117 = (char *)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for MPPB_SKPaddedStatus(0);
  v114 = *(_QWORD *)(v116 - 8);
  MEMORY[0x24BDAC7A8](v116);
  v112 = (uint64_t)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v118 = (char *)&v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v113 = (char *)&v106 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v120 = (char *)&v106 - v18;
  v19 = type metadata accessor for SymmetricKey();
  v20 = *(_QWORD **)(v19 - 8);
  v122 = v19;
  v123 = v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v119 = (char *)&v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v121 = (uint64_t)&v106 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v106 - v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.SealedBox?);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for AES.GCM.SealedBox();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v106 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for P256.Signing.ECDSASignature();
  v35 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&v106 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v131 = v129;
  *((_QWORD *)&v131 + 1) = a7;
  outlined copy of Data._Representation(v129, a7);
  v38 = lazy protocol witness table accessor for type Data and conformance Data();
  v39 = v130;
  P256.Signing.ECDSASignature.init<A>(rawRepresentation:)();
  if (v39)
    return (uint64_t)v26;
  v109 = v29;
  v107 = v26;
  v108 = v33;
  v110 = v31;
  v111 = v30;
  v129 = v35;
  v130 = (char *)v34;
  v40 = v127;
  v41 = v127 + OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_signingPublicKey;
  v131 = v128;
  outlined copy of Data._Representation(v128, *((unint64_t *)&v128 + 1));
  v43 = v125;
  v42 = v126;
  outlined copy of Data._Representation((uint64_t)v125, v126);
  specialized Data.append<A>(contentsOf:)((uint64_t)v43, v42);
  outlined consume of Data._Representation((uint64_t)v43, v42);
  v44 = v131;
  v134 = v131;
  v45 = P256.Signing.PublicKey.isValidSignature<A>(_:for:)();
  outlined consume of Data._Representation(v44, *((unint64_t *)&v44 + 1));
  v46 = v37;
  if ((v45 & 1) == 0)
  {
    lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
    v26 = (char *)swift_allocError();
    v50 = 1;
LABEL_7:
    *v49 = v50;
    swift_willThrow();
LABEL_8:
    (*(void (**)(char *, char *))(v129 + 8))(v46, v130);
    return (uint64_t)v26;
  }
  v47 = v128;
  outlined copy of Data._Representation(v128, *((unint64_t *)&v128 + 1));
  v48 = (uint64_t)v109;
  specialized AES.GCM.SealedBox.init<A>(combined:)(v47, *((uint64_t *)&v47 + 1));
  v128 = v41;
  v51 = v110;
  v52 = v111;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v110 + 56))(v48, 0, 1, v111);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v48, 1, v52) == 1)
  {
    outlined destroy of TetraSessionStates?(v48, &demangling cache variable for type metadata for AES.GCM.SealedBox?);
    lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
    v26 = (char *)swift_allocError();
    v50 = 3;
    goto LABEL_7;
  }
  v54 = v108;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v108, v48, v52);
  v55 = v124;
  if (v124 > 0xFFFE)
  {
    lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
    v26 = (char *)swift_allocError();
    *v69 = 0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v54, v52);
    goto LABEL_8;
  }
  v126 = v38;
  v56 = (uint64_t *)(v40 + OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_messageKeys);
  swift_beginAccess();
  v57 = *v56;
  if (!*(_QWORD *)(*v56 + 16) || (v58 = specialized __RawDictionaryStorage.find<A>(_:)(v55), (v59 & 1) == 0))
  {
    v68 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v123[7];
    v67 = (uint64_t)v120;
    v68(v120, 1, 1, v122);
    goto LABEL_17;
  }
  v60 = *(_QWORD *)(v57 + 56);
  v61 = v122;
  v62 = v123;
  v63 = v123[9];
  v64 = (uint64_t)v120;
  v65 = (void (*)(char *, unint64_t, uint64_t))v123[2];
  v65(v120, v60 + v63 * v58, v122);
  v125 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v62[7];
  v125(v64, 0, 1, v61);
  v66 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v62[6];
  v67 = v64;
  if (v66(v64, 1, v61) == 1)
  {
    v52 = v111;
    v51 = v110;
    v54 = v108;
    v55 = v124;
    v68 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v125;
LABEL_17:
    outlined destroy of TetraSessionStates?(v67, &demangling cache variable for type metadata for SymmetricKey?);
    swift_beginAccess();
    v70 = v121;
    v71 = (void *)*((_QWORD *)&v128 + 1);
    SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(v55, 1, v121);
    v72 = v55;
    swift_endAccess();
    if (v71)
    {
      *(_QWORD *)&v131 = v71;
      v73 = v71;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      if (swift_dynamicCast())
      {
        v74 = v129;
        v26 = v130;
        if (v135 == 3)
        {

          lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
          swift_allocError();
          *v102 = 2;
          goto LABEL_33;
        }
        if (v135 == 1)
        {

          lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
          swift_allocError();
          *v75 = 0;
LABEL_33:
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v51 + 8))(v54, v52);
          (*(void (**)(char *, char *))(v74 + 8))(v46, v26);

          return (uint64_t)v26;
        }
      }
      else
      {
        v74 = v129;
        v26 = v130;
      }

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v54, v52);
      (*(void (**)(char *, char *))(v74 + 8))(v46, v26);
      return (uint64_t)v26;
    }
    *((_QWORD *)&v128 + 1) = 0;
    v61 = v122;
    v76 = (void (*)(char *, uint64_t, uint64_t))v123[2];
    v77 = v70;
    v78 = (uint64_t)v118;
    v76(v118, v77, v122);
    v68((char *)v78, 0, 1, v61);
    swift_beginAccess();
    specialized Dictionary.subscript.setter(v78, v72);
    swift_endAccess();
    v79 = v123;
    v80 = v121;
    v81 = v107;
    goto LABEL_28;
  }
  outlined destroy of TetraSessionStates?(v64, &demangling cache variable for type metadata for SymmetricKey?);
  v82 = *v56;
  if (!*(_QWORD *)(*v56 + 16) || (v83 = specialized __RawDictionaryStorage.find<A>(_:)(v124), (v84 & 1) == 0))
  {
LABEL_39:
    result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v125)(v113, 1, 1, v61);
    goto LABEL_40;
  }
  v80 = (uint64_t)v113;
  v76 = (void (*)(char *, uint64_t, uint64_t))v65;
  v65(v113, *(_QWORD *)(v82 + 56) + v83 * v63, v61);
  v125(v80, 0, 1, v61);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v66)(v80, 1, v61);
  v52 = v111;
  v51 = v110;
  v81 = v107;
  v79 = v123;
  if ((_DWORD)result != 1)
  {
LABEL_28:
    ((void (*)(char *, uint64_t, uint64_t))v79[4])(v81, v80, v61);
    v85 = v119;
    v76(v119, (uint64_t)v81, v61);
    v86 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
    if (v87 >> 60 != 15)
    {
      v88 = v86;
      v89 = v87;
      *(_QWORD *)&v131 = v86;
      *((_QWORD *)&v131 + 1) = v87;
      v90 = v108;
      v91 = (void *)*((_QWORD *)&v128 + 1);
      v92 = static AES.GCM.open<A>(_:using:authenticating:)();
      if (!v91)
      {
        v96 = v92;
        v97 = v88;
        v98 = v93;
        outlined consume of Data?(v97, v89);
        v99 = v122;
        *(_QWORD *)&v128 = v123[1];
        ((void (*)(char *, uint64_t))v128)(v85, v122);
        v133 = 0;
        v131 = 0u;
        v132 = 0u;
        outlined copy of Data._Representation(v96, v98);
        BinaryDecodingOptions.init()();
        lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKPaddedStatus and conformance MPPB_SKPaddedStatus, type metadata accessor for MPPB_SKPaddedStatus, (uint64_t)&protocol conformance descriptor for MPPB_SKPaddedStatus);
        v100 = (uint64_t)v117;
        *((_QWORD *)&v128 + 1) = v98;
        v101 = v116;
        Message.init(serializedData:extensions:partial:options:)();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v114 + 56))(v100, 0, 1, v101);
        outlined consume of Data._Representation(v96, *((unint64_t *)&v128 + 1));
        ((void (*)(char *, uint64_t))v128)(v107, v99);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v108, v52);
        (*(void (**)(char *, char *))(v129 + 8))(v46, v130);
        v103 = v112;
        outlined init with take of TetraRatchetState(v100, v112, type metadata accessor for MPPB_SKPaddedStatus);
        v104 = (uint64_t *)(v103 + *(int *)(v101 + 20));
        v105 = v104[1];
        if (v105 >> 60 == 15)
          v26 = 0;
        else
          v26 = (char *)*v104;
        outlined copy of Data?(*v104, v105);
        outlined destroy of TetraRatchetOuterMessage(v103, type metadata accessor for MPPB_SKPaddedStatus);
        return (uint64_t)v26;
      }

      outlined consume of Data?(v88, v89);
      v94 = v122;
      v26 = (char *)v123[1];
      ((void (*)(char *, uint64_t))v26)(v85, v122);
      lazy protocol witness table accessor for type StatusKitErrors and conformance StatusKitErrors();
      swift_allocError();
      *v95 = 4;
      swift_willThrow();
      ((void (*)(char *, uint64_t))v26)(v107, v94);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v90, v52);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_40:
  __break(1u);
  return result;
}

void specialized AES.GCM.SealedBox.init<A>(combined:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_20BB00E58()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (BYTE6(v0) > 0x1BuLL)
  {
    outlined copy of Data._Representation(v1, v0);
    specialized Data.init<A>(_:)(v1, v0);
    AES.GCM.SealedBox.init(combined:)();
  }
  else
  {
    v2 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, (uint64_t (*)(uint64_t))MEMORY[0x24BDC61A8], MEMORY[0x24BDC61C0]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, *MEMORY[0x24BDC61A0], v2);
    swift_willThrow();
  }
  return outlined consume of Data._Representation(v1, v0);
}

uint64_t SKIncomingRatchet.serializedData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _WORD *v33;
  uint64_t v34;
  __int16 v35;
  _WORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t result;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  __int128 v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  _WORD *v86;
  unsigned __int16 *v87;
  char *v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;

  v1 = v0;
  v2 = 0;
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt16, value: SymmetricKey));
  v3 = MEMORY[0x24BDAC7A8](v89);
  v88 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v87 = (unsigned __int16 *)((char *)&v71 - v6);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v86 = (_WORD *)((char *)&v71 - v8);
  MEMORY[0x24BDAC7A8](v7);
  v85 = (char *)&v71 - v9;
  v10 = type metadata accessor for MPPB_KeyAndIndex(0);
  v83 = *(_QWORD *)(v10 - 8);
  v84 = v10;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v82 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v71 - v13;
  v15 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x24BDAC7A8](v15);
  v77 = (uint64_t)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MPPB_SKIncomingRatchet(0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (uint64_t *)((char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = MEMORY[0x24BEE4AF8];
  *v19 = MEMORY[0x24BEE4AF8];
  UnknownStorage.init()();
  v21 = (_QWORD *)((char *)v19 + *(int *)(v17 + 24));
  *(_OWORD *)v21 = xmmword_20BB407A0;
  v22 = (char *)v19 + *(int *)(v17 + 28);
  v81 = xmmword_20BB407A0;
  *(_OWORD *)v22 = xmmword_20BB407A0;
  v23 = (uint64_t *)(v1 + OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_messageKeys);
  swift_beginAccess();
  v24 = *v23;
  v25 = *(_QWORD *)(v24 + 16);
  v76 = v21;
  if (v25)
  {
    v80 = v14;
    v93 = 0;
    v94 = v20;
    v72 = v22;
    v73 = v17;
    v74 = v19;
    v75 = v1;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25, 0);
    v26 = specialized Dictionary.startIndex.getter(v24);
    v28 = v27;
    v30 = v29 & 1;
    v78 = v24 + 64;
    v90 = v25 - 1;
    v79 = v24;
    v31 = (uint64_t)v82;
    while (1)
    {
      v32 = v89;
      v33 = v85;
      v34 = (uint64_t)&v85[*(int *)(v89 + 48)];
      v91 = v28;
      v92 = v26;
      v35 = specialized Dictionary.subscript.getter(v34, v26, v28, v30 & 1, v24);
      *v33 = v35;
      v36 = v86;
      *v86 = v35;
      v37 = (char *)v36 + *(int *)(v32 + 48);
      v38 = type metadata accessor for SymmetricKey();
      v39 = *(_QWORD *)(v38 - 8);
      v40 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
      v40(v37, v34, v38);
      v41 = (uint64_t)v36;
      v42 = v87;
      outlined init with take of (key: UInt16, value: SymmetricKey)(v41, (uint64_t)v87);
      outlined destroy of TetraSessionStates?((uint64_t)v33, &demangling cache variable for type metadata for (key: UInt16, value: SymmetricKey));
      UnknownStorage.init()();
      v43 = v84;
      v44 = v31 + *(int *)(v84 + 20);
      *(_OWORD *)v44 = v81;
      v45 = v31 + *(int *)(v43 + 24);
      *(_QWORD *)v45 = 0;
      *(_BYTE *)(v45 + 8) = 1;
      v46 = *(int *)(v32 + 48);
      v47 = v88;
      v48 = &v88[v46];
      v49 = *v42;
      *(_WORD *)v88 = v49;
      v40(&v47[v46], (uint64_t)v42 + v46, v38);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v48, v38);
      *(_QWORD *)v45 = v49;
      *(_BYTE *)(v45 + 8) = 0;
      type metadata accessor for NSData();
      v2 = v93;
      SymmetricKey.withUnsafeBytes<A>(_:)();
      v50 = v95;
      v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v53 = v52;

      outlined consume of Data?(*(_QWORD *)v44, *(_QWORD *)(v44 + 8));
      *(_QWORD *)v44 = v51;
      *(_QWORD *)(v44 + 8) = v53;
      v54 = (uint64_t)v80;
      outlined init with take of TetraRatchetState(v31, (uint64_t)v80, type metadata accessor for MPPB_KeyAndIndex);
      outlined destroy of TetraSessionStates?((uint64_t)v42, &demangling cache variable for type metadata for (key: UInt16, value: SymmetricKey));
      v20 = v94;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1);
        v20 = v94;
      }
      v56 = *(_QWORD *)(v20 + 16);
      v55 = *(_QWORD *)(v20 + 24);
      v24 = v79;
      if (v56 >= v55 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v55 > 1, v56 + 1, 1);
        v20 = v94;
      }
      *(_QWORD *)(v20 + 16) = v56 + 1;
      outlined init with take of TetraRatchetState(v54, v20+ ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))+ *(_QWORD *)(v83 + 72) * v56, type metadata accessor for MPPB_KeyAndIndex);
      if (v92 < 0 || v92 >= -(-1 << *(_BYTE *)(v24 + 32)))
        break;
      if (((*(_QWORD *)(v78 + (((unint64_t)v92 >> 3) & 0xFFFFFFFFFFFFF8)) >> v92) & 1) == 0)
        goto LABEL_18;
      if (*(_DWORD *)(v24 + 36) != (_DWORD)v91)
        goto LABEL_19;
      v57 = _HashTable.occupiedBucket(after:)();
      if (!v90)
      {
        swift_bridgeObjectRelease();
        v1 = v75;
        v19 = v74;
        v22 = v72;
        goto LABEL_14;
      }
      v26 = v57;
      v93 = v2;
      v30 = 0;
      v28 = *(unsigned int *)(v24 + 36);
      --v90;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  *v19 = v20;
  v58 = v1 + OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_ratchet;
  swift_beginAccess();
  v59 = v77;
  outlined init with copy of SymmetricRatchet(v58, v77);
  v60 = SymmetricRatchet.serializedData()();
  v62 = v61;
  outlined destroy of TetraRatchetOuterMessage(v59, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
  v63 = v76;
  outlined consume of Data?(*v76, v76[1]);
  *v63 = v60;
  v63[1] = v62;
  v64 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  if (v65 >> 60 == 15)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v66 = v64;
  v67 = v65;
  outlined consume of Data?(*(_QWORD *)v22, *((_QWORD *)v22 + 1));
  *(_QWORD *)v22 = v66;
  *((_QWORD *)v22 + 1) = v67;
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_SKIncomingRatchet and conformance MPPB_SKIncomingRatchet, type metadata accessor for MPPB_SKIncomingRatchet, (uint64_t)&protocol conformance descriptor for MPPB_SKIncomingRatchet);
  v68 = Message.serializedData(partial:)();
  if (!v2)
  {
    v69 = v68;
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v19, type metadata accessor for MPPB_SKIncomingRatchet);
    return v69;
  }
LABEL_21:
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

void SKIncomingRatchet.signingKeyIdentifier()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v0 = type metadata accessor for SHA256();
  MEMORY[0x24BDAC7A8](v0);
  v1 = type metadata accessor for SHA256Digest();
  MEMORY[0x24BDAC7A8](v1);
  P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  if (v2 >> 60 != 15)
  {
    v3 = v2;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    dispatch thunk of HashFunction.init()();
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x20BB01ADCLL);
}

Class @objc SKOutgoingRatchet.serializedData()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Class isa;

  v4 = a1;
  v5 = a3();
  v7 = v6;

  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v5, v7);
  return isa;
}

uint64_t SKIncomingRatchet.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  outlined destroy of TetraRatchetOuterMessage(v0 + OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_ratchet, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
  v1 = v0 + OBJC_IVAR____TtC17MessageProtection17SKIncomingRatchet_signingPublicKey;
  v2 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_bridgeObjectRelease();
}

id SKIncomingRatchet.__deallocating_deinit()
{
  return Kyber1024ObjC.__deallocating_deinit(0, (uint64_t (*)(void))type metadata accessor for SKIncomingRatchet);
}

uint64_t ObjC metadata update function for SKIncomingRatchet()
{
  return type metadata accessor for SKIncomingRatchet(0);
}

uint64_t type metadata accessor for SKIncomingRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for SKIncomingRatchet);
}

uint64_t type metadata completion function for SKIncomingRatchet()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for SymmetricRatchet();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for P256.Signing.PublicKey();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t result;

  result = __DataStorage._bytes.getter();
  if (!result || (result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA384();
      lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B20], MEMORY[0x24BDC6B10]);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11)
            goto LABEL_6;
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        v14 = (_QWORD *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1)
          *v14 = *v10;
        v15 = *(_QWORD *)(a2 + 56);
        v16 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for SymmetricKey() - 8) + 72);
        v17 = v16 * v3;
        result = v15 + v16 * v3;
        v18 = v16 * v6;
        v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _WORD *v10;
  unint64_t v11;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_WORD *)(v9 + 2 * v6);
        result = MEMORY[0x20BD3B94C](*(_QWORD *)(a2 + 40), (unsigned __int16)*v10, 2);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11)
            goto LABEL_6;
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        v14 = (_WORD *)(v9 + 2 * v3);
        if (v3 != v6 || v14 >= v10 + 1)
          *v14 = *v10;
        v15 = *(_QWORD *)(a2 + 56);
        v16 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for SymmetricKey() - 8) + 72);
        v17 = v16 * v3;
        result = v15 + v16 * v3;
        v18 = v16 * v6;
        v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          v3 = v6;
          if (v17 == v18)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront();
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for SymmetricKey();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, SymmetricKey>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v19 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 56) + v19, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v18;
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 56) + v19, v4, v1);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    result = (void *)outlined copy of Data._Representation(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int16 v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for SymmetricKey();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt16, SymmetricKey>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = 2 * v16;
    v18 = *(_WORD *)(*(_QWORD *)(v5 + 48) + 2 * v16);
    v19 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 56) + v19, v1);
    *(_WORD *)(*(_QWORD *)(v7 + 48) + v17) = v18;
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 56) + v19, v4, v1);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v6 = result;
    v7 = *(_QWORD *)(a5 + 56);
    v8 = *(unsigned __int16 *)(*(_QWORD *)(a5 + 48) + 2 * a2);
    v9 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v6, v7 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a2, v9);
    return v8;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t outlined init with take of (key: UInt16, value: SymmetricKey)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UInt16, value: SymmetricKey));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of SymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SymmetricRatchet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20BB02908()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for StatusKitErrors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StatusKitErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_20BB02A10 + 4 * byte_20BB41785[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_20BB02A44 + 4 * byte_20BB41780[v4]))();
}

uint64_t sub_20BB02A44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB02A4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BB02A54);
  return result;
}

uint64_t sub_20BB02A60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BB02A68);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_20BB02A6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB02A74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StatusKitErrors()
{
  return &type metadata for StatusKitErrors;
}

id FilesystemUtils.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FilesystemUtils();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FilesystemUtils()
{
  return objc_opt_self();
}

uint64_t SecureEnclave.Kyber768.PrivateKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13[2];
  uint64_t v14;

  v14 = a2;
  v4 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SecureEnclave.Kyber768.PrivateKey.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v11 = v14;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    SecureEnclave.Kyber768.PrivateKey.init(dataRepresentation:)(v13[0], v13[1], (uint64_t)v6);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    outlined init with take of TetraRatchetState((uint64_t)v6, v11, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t SecureEnclave.Kyber768.PrivateKey.encode(to:)(_QWORD *a1)
{
  return SecureEnclave.Kyber768.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<SecureEnclave.Kyber768.PrivateKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys, (uint64_t)&type metadata for SecureEnclave.Kyber768.PrivateKey.CodingKeys, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_20BB02DE0()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = 0x4264657070617277;
  a1[1] = 0xEB00000000626F6CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  return 0x4264657070617277;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

void protocol witness for CodingKey.init(intValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  lazy protocol witness table accessor for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  lazy protocol witness table accessor for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SecureEnclave.Kyber768.PrivateKey@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SecureEnclave.Kyber768.PrivateKey.init(from:)(a1, a2);
}

uint64_t SecureEnclave.Kyber1024.PrivateKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13[2];
  uint64_t v14;

  v14 = a2;
  v4 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SecureEnclave.Kyber1024.PrivateKey.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v11 = v14;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    SecureEnclave.Kyber1024.PrivateKey.init(dataRepresentation:)(v13[0], v13[1], (uint64_t)v6);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    outlined init with take of TetraRatchetState((uint64_t)v6, v11, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t SecureEnclave.Kyber1024.PrivateKey.encode(to:)(_QWORD *a1)
{
  return SecureEnclave.Kyber768.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<SecureEnclave.Kyber1024.PrivateKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys, (uint64_t)&type metadata for SecureEnclave.Kyber1024.PrivateKey.CodingKeys, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
}

uint64_t SecureEnclave.Kyber768.PrivateKey.encode(to:)(_QWORD *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  __int128 v16;

  v15 = a5;
  v7 = v5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = *(_OWORD *)(v7 + *(int *)(v15(0) + 20));
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys()
{
  lazy protocol witness table accessor for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys()
{
  lazy protocol witness table accessor for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SecureEnclave.Kyber1024.PrivateKey@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SecureEnclave.Kyber1024.PrivateKey.init(from:)(a1, a2);
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v18 = a2;
  v17 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys>);
  v7 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v10 = v7;
    v16 = v4;
    v12 = v17;
    v11 = v18;
    lazy protocol witness table accessor for type Data and conformance Data();
    v13 = v19;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    SecureEnclave.P256.KeyAgreement.PrivateKey.init(dataRepresentation:authenticationContext:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v11, v6, v12);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys, &type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys, &type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys, &type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys, &type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys);
  }
  return result;
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(_QWORD *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys, (uint64_t)&type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys, MEMORY[0x24BDC6458]);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys()
{
  lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys()
{
  lazy protocol witness table accessor for type SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys and conformance SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SecureEnclave.P256.KeyAgreement.PrivateKey@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SecureEnclave.P256.KeyAgreement.PrivateKey(_QWORD *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1);
}

uint64_t P256.KeyAgreement.PublicKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v18 = a2;
  v17 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<P256.KeyAgreement.PublicKey.CodingKeys>);
  v7 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v10 = v7;
    v16 = v4;
    v11 = v18;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v19;
    v13 = v20;
    outlined copy of Data._Representation(v19, v20);
    P256.KeyAgreement.PublicKey.init<A>(rawRepresentation:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v21);
    outlined consume of Data._Representation(v12, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v11, v6, v17);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for P256.KeyAgreement.PublicKey.CodingKeys, &type metadata for P256.KeyAgreement.PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for P256.KeyAgreement.PublicKey.CodingKeys, &type metadata for P256.KeyAgreement.PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for P256.KeyAgreement.PublicKey.CodingKeys, &type metadata for P256.KeyAgreement.PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for P256.KeyAgreement.PublicKey.CodingKeys, &type metadata for P256.KeyAgreement.PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys);
  }
  return result;
}

uint64_t P256.KeyAgreement.PublicKey.encode(to:)(_QWORD *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<P256.KeyAgreement.PublicKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys, (uint64_t)&type metadata for P256.KeyAgreement.PublicKey.CodingKeys, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6878]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance P256.KeyAgreement.PublicKey.CodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance P256.KeyAgreement.PublicKey.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance P256.KeyAgreement.PublicKey.CodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance P256.KeyAgreement.PublicKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance P256.KeyAgreement.PublicKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance P256.KeyAgreement.PublicKey.CodingKeys(char *a1@<X8>)
{
  strcpy(a1, "publicKeyBytes");
  a1[15] = -18;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance P256.KeyAgreement.PublicKey.CodingKeys()
{
  return 0x654B63696C627570;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance P256.KeyAgreement.PublicKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance P256.KeyAgreement.PublicKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance P256.KeyAgreement.PublicKey.CodingKeys()
{
  lazy protocol witness table accessor for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance P256.KeyAgreement.PublicKey.CodingKeys()
{
  lazy protocol witness table accessor for type P256.KeyAgreement.PublicKey.CodingKeys and conformance P256.KeyAgreement.PublicKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance P256.KeyAgreement.PublicKey@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.KeyAgreement.PublicKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance P256.KeyAgreement.PublicKey(_QWORD *a1)
{
  return P256.KeyAgreement.PublicKey.encode(to:)(a1);
}

uint64_t P256.Signing.PublicKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v18 = a2;
  v17 = type metadata accessor for P256.Signing.PublicKey();
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<P256.Signing.PublicKey.CodingKeys>);
  v7 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v10 = v7;
    v16 = v4;
    v11 = v18;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v19;
    v13 = v20;
    outlined copy of Data._Representation(v19, v20);
    P256.Signing.PublicKey.init<A>(rawRepresentation:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v21);
    outlined consume of Data._Representation(v12, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v11, v6, v17);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for P256.Signing.PublicKey.CodingKeys, &type metadata for P256.Signing.PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for P256.Signing.PublicKey.CodingKeys, &type metadata for P256.Signing.PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for P256.Signing.PublicKey.CodingKeys, &type metadata for P256.Signing.PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for P256.Signing.PublicKey.CodingKeys, &type metadata for P256.Signing.PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys);
  }
  return result;
}

uint64_t P256.Signing.PublicKey.encode(to:)(_QWORD *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<P256.Signing.PublicKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys, (uint64_t)&type metadata for P256.Signing.PublicKey.CodingKeys, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6A18]);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance P256.Signing.PublicKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance P256.Signing.PublicKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance P256.Signing.PublicKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance P256.Signing.PublicKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance P256.Signing.PublicKey.CodingKeys()
{
  lazy protocol witness table accessor for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance P256.Signing.PublicKey.CodingKeys()
{
  lazy protocol witness table accessor for type P256.Signing.PublicKey.CodingKeys and conformance P256.Signing.PublicKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance P256.Signing.PublicKey@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.Signing.PublicKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance P256.Signing.PublicKey(_QWORD *a1)
{
  return P256.Signing.PublicKey.encode(to:)(a1);
}

uint64_t Kyber768.PrivateKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v18 = a2;
  v17 = type metadata accessor for Kyber768.PrivateKey();
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Kyber768.PrivateKey.CodingKeys>);
  v7 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v10 = v7;
    v16 = v4;
    v11 = v18;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v19;
    v13 = v20;
    outlined copy of Data._Representation(v19, v20);
    Kyber768.PrivateKey.init<A>(bytes:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v21);
    outlined consume of Data._Representation(v12, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v11, v6, v17);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for Kyber768.PrivateKey.CodingKeys, &type metadata for Kyber768.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for Kyber768.PrivateKey.CodingKeys, &type metadata for Kyber768.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for Kyber768.PrivateKey.CodingKeys, &type metadata for Kyber768.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for Kyber768.PrivateKey.CodingKeys, &type metadata for Kyber768.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

uint64_t Kyber768.PrivateKey.encode(to:)(_QWORD *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Kyber768.PrivateKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys, (uint64_t)&type metadata for Kyber768.PrivateKey.CodingKeys, MEMORY[0x24BDC6BC8]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Kyber768.PrivateKey.CodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Kyber768.PrivateKey.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Kyber768.PrivateKey.CodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Kyber768.PrivateKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance Kyber768.PrivateKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Kyber768.PrivateKey.CodingKeys()
{
  return 0x4B65746176697270;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Kyber768.PrivateKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance Kyber768.PrivateKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Kyber768.PrivateKey.CodingKeys()
{
  lazy protocol witness table accessor for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Kyber768.PrivateKey.CodingKeys()
{
  lazy protocol witness table accessor for type Kyber768.PrivateKey.CodingKeys and conformance Kyber768.PrivateKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Kyber768.PrivateKey@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Kyber768.PrivateKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Kyber768.PrivateKey(_QWORD *a1)
{
  return Kyber768.PrivateKey.encode(to:)(a1);
}

uint64_t Kyber1024.PrivateKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v18 = a2;
  v17 = type metadata accessor for Kyber1024.PrivateKey();
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Kyber1024.PrivateKey.CodingKeys>);
  v7 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v10 = v7;
    v16 = v4;
    v11 = v18;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v19;
    v13 = v20;
    outlined copy of Data._Representation(v19, v20);
    Kyber1024.PrivateKey.init<A>(bytes:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v21);
    outlined consume of Data._Representation(v12, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v11, v6, v17);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for Kyber1024.PrivateKey.CodingKeys, &type metadata for Kyber1024.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for Kyber1024.PrivateKey.CodingKeys, &type metadata for Kyber1024.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for Kyber1024.PrivateKey.CodingKeys, &type metadata for Kyber1024.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for Kyber1024.PrivateKey.CodingKeys, &type metadata for Kyber1024.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

uint64_t Kyber1024.PrivateKey.encode(to:)(_QWORD *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Kyber1024.PrivateKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys, (uint64_t)&type metadata for Kyber1024.PrivateKey.CodingKeys, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6C28]);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Kyber1024.PrivateKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance Kyber1024.PrivateKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Kyber1024.PrivateKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance Kyber1024.PrivateKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Kyber1024.PrivateKey.CodingKeys()
{
  lazy protocol witness table accessor for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Kyber1024.PrivateKey.CodingKeys()
{
  lazy protocol witness table accessor for type Kyber1024.PrivateKey.CodingKeys and conformance Kyber1024.PrivateKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Kyber1024.PrivateKey@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Kyber1024.PrivateKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Kyber1024.PrivateKey(_QWORD *a1)
{
  return Kyber1024.PrivateKey.encode(to:)(a1);
}

uint64_t Kyber768.PublicKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v18 = a2;
  v17 = type metadata accessor for Kyber768.PublicKey();
  v4 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Kyber768.PublicKey.CodingKeys>);
  v7 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v10 = v7;
    v16 = v4;
    v11 = v18;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v19;
    v13 = v20;
    outlined copy of Data._Representation(v19, v20);
    Kyber768.PublicKey.init<A>(dataRepresentation:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v21);
    outlined consume of Data._Representation(v12, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v11, v6, v17);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414]("y\u0557@Ԡ", &type metadata for Kyber768.PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for Kyber768.PublicKey.CodingKeys, &type metadata for Kyber768.PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for Kyber768.PublicKey.CodingKeys, &type metadata for Kyber768.PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for Kyber768.PublicKey.CodingKeys, &type metadata for Kyber768.PublicKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys);
  }
  return result;
}

uint64_t Kyber768.PublicKey.encode(to:)(_QWORD *a1)
{
  return SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<Kyber768.PublicKey.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys, (uint64_t)&type metadata for Kyber768.PublicKey.CodingKeys, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6BF8]);
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.encode(to:)(_QWORD *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  unint64_t v19;

  v17 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  v11 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = v17(v11);
  v14 = v13;
  v18 = v12;
  v19 = v13;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined consume of Data._Representation(v12, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Kyber768.PublicKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance Kyber768.PublicKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Kyber768.PublicKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance Kyber768.PublicKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Kyber768.PublicKey.CodingKeys()
{
  lazy protocol witness table accessor for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Kyber768.PublicKey.CodingKeys()
{
  lazy protocol witness table accessor for type Kyber768.PublicKey.CodingKeys and conformance Kyber768.PublicKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Kyber768.PublicKey@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Kyber768.PublicKey.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Kyber768.PublicKey(_QWORD *a1)
{
  return Kyber768.PublicKey.encode(to:)(a1);
}

uint64_t SymmetricKey.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v8;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SymmetricKey.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    SymmetricKey.init<A>(data:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SymmetricKey.CodingKeys, &type metadata for SymmetricKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SymmetricKey.CodingKeys, &type metadata for SymmetricKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SymmetricKey.CodingKeys, &type metadata for SymmetricKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SymmetricKey.CodingKeys, &type metadata for SymmetricKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys);
  }
  return result;
}

uint64_t SymmetricKey.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  void *v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SymmetricKey.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSData);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v6 = (void *)specialized Data.init<A>(_:)(v10[0]);
  v8 = (unint64_t)v7;
  v10[0] = v6;
  v10[1] = v7;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined consume of Data._Representation((uint64_t)v6, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SymmetricKey.CodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SymmetricKey.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SymmetricKey.CodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SymmetricKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance SymmetricKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SymmetricKey.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = 0x736574794279656BLL;
  a1[1] = 0xE800000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SymmetricKey.CodingKeys()
{
  return 0x736574794279656BLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SymmetricKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance SymmetricKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SymmetricKey.CodingKeys()
{
  lazy protocol witness table accessor for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SymmetricKey.CodingKeys()
{
  lazy protocol witness table accessor for type SymmetricKey.CodingKeys and conformance SymmetricKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SymmetricKey(_QWORD *a1)
{
  return SymmetricKey.init(from:)(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SymmetricKey(_QWORD *a1)
{
  return SymmetricKey.encode(to:)(a1);
}

uint64_t getEnumTag for SymmetricKey.CodingKeys()
{
  return 0;
}

ValueMetadata *type metadata accessor for SymmetricKey.CodingKeys()
{
  return &type metadata for SymmetricKey.CodingKeys;
}

ValueMetadata *type metadata accessor for Kyber768.PublicKey.CodingKeys()
{
  return &type metadata for Kyber768.PublicKey.CodingKeys;
}

ValueMetadata *type metadata accessor for Kyber1024.PrivateKey.CodingKeys()
{
  return &type metadata for Kyber1024.PrivateKey.CodingKeys;
}

ValueMetadata *type metadata accessor for Kyber768.PrivateKey.CodingKeys()
{
  return &type metadata for Kyber768.PrivateKey.CodingKeys;
}

ValueMetadata *type metadata accessor for P256.Signing.PublicKey.CodingKeys()
{
  return &type metadata for P256.Signing.PublicKey.CodingKeys;
}

ValueMetadata *type metadata accessor for P256.KeyAgreement.PublicKey.CodingKeys()
{
  return &type metadata for P256.KeyAgreement.PublicKey.CodingKeys;
}

ValueMetadata *type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys()
{
  return &type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey.CodingKeys;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance TetraOutgoingKeyContent.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance TetraOutgoingKeyContent.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>._rawHashValue(seed:)(0, *v0);
}

void protocol witness for Hashable.hash(into:) in conformance TetraOutgoingKeyContent.CodingKeys()
{
  __asm { BR              X10 }
}

uint64_t sub_20BB04D54()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance TetraOutgoingKeyContent.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TetraOutgoingKeyContent.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized TetraOutgoingKeyContent.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance TetraOutgoingKeyContent.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_20BB04E70 + 4 * byte_20BB418DE[*v0]))();
}

void sub_20BB04E70(_QWORD *a1@<X8>)
{
  *a1 = 0x654B3836376D656BLL;
  a1[1] = 0xE900000000000079;
}

void sub_20BB04E90(_QWORD *a1@<X8>)
{
  *a1 = 0x4B343230316D656BLL;
  a1[1] = 0xEA00000000007965;
}

void sub_20BB04EB0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "tetraEcdhKey");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_20BB04ED4(char *a1@<X8>)
{
  strcpy(a1, "tetraKem768Key");
  a1[15] = -18;
}

void sub_20BB04F10(_QWORD *a1@<X8>)
{
  *a1 = 0x7061636E65;
  a1[1] = 0xE500000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraOutgoingKeyContent.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20BB04F58 + 4 * byte_20BB418E5[*v0]))(0x79654B68646365, 0xE700000000000000);
}

uint64_t sub_20BB04F58()
{
  return 0x654B3836376D656BLL;
}

uint64_t sub_20BB04F74()
{
  return 0x4B343230316D656BLL;
}

uint64_t sub_20BB04F90()
{
  return 0x6463456172746574;
}

uint64_t sub_20BB04FB0()
{
  return 0x6D654B6172746574;
}

uint64_t sub_20BB04FE8()
{
  return 0x7061636E65;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraOutgoingKeyContent.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized TetraOutgoingKeyContent.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TetraOutgoingKeyContent.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraOutgoingKeyContent.CodingKeys()
{
  lazy protocol witness table accessor for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraOutgoingKeyContent.CodingKeys()
{
  lazy protocol witness table accessor for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TetraOutgoingKeyContent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  __int128 v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraOutgoingKeyContent.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 3;
  type metadata accessor for TetraECDHKey();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraECDHKey and conformance TetraECDHKey, (uint64_t (*)(uint64_t))type metadata accessor for TetraECDHKey, (uint64_t)&protocol conformance descriptor for TetraECDHKey);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = type metadata accessor for TetraOutgoingKeyContent(0);
    LOBYTE(v12) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    lazy protocol witness table accessor for type TetraKEM768Key? and conformance <A> A?();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    lazy protocol witness table accessor for type TetraKEM1024Key? and conformance <A> A?();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v12 = *(_OWORD *)(v3 + *(int *)(v9 + 28));
    v11[15] = 6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    lazy protocol witness table accessor for type Data? and conformance <A> A?();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TetraOutgoingKeyContent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(void);
  char *v38;
  void (*v39)(void);
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t);
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  void (*v99)(void);
  void (*v100)(void);
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;

  v104 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
  MEMORY[0x24BDAC7A8](v3);
  v107 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TetraKEM1024Key(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v102 = (uint64_t)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for Kyber1024.PrivateKey();
  v111 = *(_QWORD *)(v118 - 8);
  MEMORY[0x24BDAC7A8](v118);
  v106 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v110 = (uint64_t)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v114 = (uint64_t)&v98 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
  MEMORY[0x24BDAC7A8](v13);
  v113 = (char *)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TetraKEM768Key(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v105 = (uint64_t)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for Kyber768.PrivateKey();
  v116 = *(_QWORD *)(v121 - 8);
  MEMORY[0x24BDAC7A8](v121);
  v112 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v115 = (uint64_t)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v122 = (char *)&v98 - v22;
  v123 = type metadata accessor for TetraECDHKey();
  MEMORY[0x24BDAC7A8](v123);
  v120 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v124 = *(_QWORD *)(v126 - 8);
  MEMORY[0x24BDAC7A8](v126);
  v119 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  v26 = MEMORY[0x24BDAC7A8](v25);
  v125 = (char *)&v98 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v128 = (uint64_t)&v98 - v28;
  v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraOutgoingKeyContent.CodingKeys>);
  v29 = *(_QWORD *)(v127 - 8);
  MEMORY[0x24BDAC7A8](v127);
  v31 = (char *)&v98 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for TetraOutgoingKeyContent(0);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v35 = (char *)&v98 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = (uint64_t)&v35[*(int *)(v33 + 20)];
  v108 = v16;
  v37 = *(void (**)(void))(v16 + 56);
  v131 = v36;
  v117 = v15;
  v37();
  v38 = &v35[*(int *)(v32 + 24)];
  v103 = v6;
  v39 = *(void (**)(void))(v6 + 56);
  v130 = (uint64_t)v38;
  v109 = v5;
  v39();
  v129 = &v35[*(int *)(v32 + 28)];
  *(_OWORD *)v129 = xmmword_20BB407A0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys();
  v40 = v132;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v40)
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    v46 = v129;
    v47 = v130;
    outlined destroy of TetraSessionStates?(v131, &demangling cache variable for type metadata for TetraKEM768Key?);
    outlined destroy of TetraSessionStates?(v47, &demangling cache variable for type metadata for TetraKEM1024Key?);
    return outlined consume of Data?(*(_QWORD *)v46, *((_QWORD *)v46 + 1));
  }
  else
  {
    v41 = (uint64_t)v125;
    v100 = v37;
    v99 = v39;
    v132 = v29;
    v42 = v35;
    v101 = a1;
    LOBYTE(v133) = 0;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SecureEnclave.P256.KeyAgreement.PrivateKey and conformance SecureEnclave.P256.KeyAgreement.PrivateKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6480], (uint64_t)"Uߗ@pK(@");
    v43 = v128;
    v44 = v126;
    v45 = v31;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined init with copy of TetraSessionStates?(v43, v41, &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    v49 = v124;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48))(v41, 1, v44) == 1)
    {
      outlined destroy of TetraSessionStates?(v41, &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      LOBYTE(v133) = 3;
      lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraECDHKey and conformance TetraECDHKey, (uint64_t (*)(uint64_t))type metadata accessor for TetraECDHKey, (uint64_t)&protocol conformance descriptor for TetraECDHKey);
      v50 = (uint64_t)v120;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v52 = v130;
      v51 = v131;
      v98 = v45;
      v126 = (uint64_t)v42;
      outlined init with take of TetraRatchetState(v50, (uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for TetraECDHKey);
    }
    else
    {
      v98 = v45;
      v53 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 32);
      v54 = v119;
      v53(v119, v41, v44);
      v55 = (char *)v42 + *(int *)(v123 + 20);
      v53(v55, (uint64_t)v54, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v55, 0, 1, v44);
      v126 = (uint64_t)v42;
      *v42 = 0;
      v52 = v130;
      v51 = v131;
    }
    v56 = v121;
    v57 = (uint64_t)v122;
    LOBYTE(v133) = 1;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6BE0], (uint64_t)&protocol conformance descriptor for Kyber768.PrivateKey);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v58 = v115;
    outlined init with copy of TetraSessionStates?(v57, v115, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
    v59 = v116;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v58, 1, v56) == 1)
    {
      outlined destroy of TetraSessionStates?(v58, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
      LOBYTE(v133) = 4;
      lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraKEM768Key and conformance TetraKEM768Key, type metadata accessor for TetraKEM768Key, (uint64_t)&protocol conformance descriptor for TetraKEM768Key);
      v60 = (uint64_t)v113;
      v61 = v117;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v62 = v118;
      v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v60, 1, v61);
      v72 = v132;
      v73 = v61;
      if (v71 == 1)
      {
        outlined destroy of TetraSessionStates?(v60, &demangling cache variable for type metadata for TetraKEM768Key?);
        outlined destroy of TetraSessionStates?(v51, &demangling cache variable for type metadata for TetraKEM768Key?);
        v74 = 1;
      }
      else
      {
        v75 = v105;
        outlined init with take of TetraRatchetState(v60, v105, type metadata accessor for TetraKEM768Key);
        outlined destroy of TetraSessionStates?(v51, &demangling cache variable for type metadata for TetraKEM768Key?);
        outlined init with take of TetraRatchetState(v75, v51, type metadata accessor for TetraKEM768Key);
        v74 = 0;
      }
      v70 = v126;
      v69 = v72;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v100)(v51, v74, 1, v73);
    }
    else
    {
      v63 = v56;
      v64 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 32);
      v65 = v112;
      v64(v112, v58, v63);
      outlined destroy of TetraSessionStates?(v51, &demangling cache variable for type metadata for TetraKEM768Key?);
      v64((char *)v51, (uint64_t)v65, v63);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v51, 0, 1, v63);
      v66 = v117;
      v67 = v51 + *(int *)(v117 + 20);
      v68 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v67, 1, 1, v68);
      v69 = v132;
      v62 = v118;
      v70 = v126;
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v100)(v51, 0, 1, v66);
    }
    LOBYTE(v133) = 2;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type Kyber1024.PrivateKey and conformance Kyber1024.PrivateKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6C40], (uint64_t)&protocol conformance descriptor for Kyber1024.PrivateKey);
    v76 = v114;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v77 = v76;
    v78 = v110;
    outlined init with copy of TetraSessionStates?(v77, v110, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    v79 = v111;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v78, 1, v62) == 1)
    {
      outlined destroy of TetraSessionStates?(v78, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      LOBYTE(v133) = 5;
      lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraKEM1024Key and conformance TetraKEM1024Key, type metadata accessor for TetraKEM1024Key, (uint64_t)&protocol conformance descriptor for TetraKEM1024Key);
      v80 = (uint64_t)v107;
      v81 = v109;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      v95 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v80, 1, v81) == 1;
      v85 = v81;
      v89 = (uint64_t)v122;
      v96 = v80;
      if (v95)
      {
        outlined destroy of TetraSessionStates?(v80, &demangling cache variable for type metadata for TetraKEM1024Key?);
        outlined destroy of TetraSessionStates?(v52, &demangling cache variable for type metadata for TetraKEM1024Key?);
        v88 = 1;
      }
      else
      {
        v97 = v102;
        outlined init with take of TetraRatchetState(v96, v102, type metadata accessor for TetraKEM1024Key);
        outlined destroy of TetraSessionStates?(v52, &demangling cache variable for type metadata for TetraKEM1024Key?);
        outlined init with take of TetraRatchetState(v97, v52, type metadata accessor for TetraKEM1024Key);
        v88 = 0;
      }
    }
    else
    {
      v82 = v78;
      v83 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 32);
      v84 = v106;
      v83(v106, v82, v62);
      outlined destroy of TetraSessionStates?(v52, &demangling cache variable for type metadata for TetraKEM1024Key?);
      v83((char *)v52, (uint64_t)v84, v62);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v79 + 56))(v52, 0, 1, v62);
      v85 = v109;
      v86 = v52 + *(int *)(v109 + 20);
      v87 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v86, 1, 1, v87);
      v88 = 0;
      v89 = (uint64_t)v122;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v99)(v52, v88, 1, v85);
    v135 = 6;
    lazy protocol witness table accessor for type Data and conformance Data();
    v90 = v127;
    v91 = v98;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined destroy of TetraSessionStates?(v114, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    outlined destroy of TetraSessionStates?(v89, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
    outlined destroy of TetraSessionStates?(v128, &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v91, v90);
    v92 = v133;
    v93 = v134;
    v94 = v129;
    outlined consume of Data?(*(_QWORD *)v129, *((_QWORD *)v129 + 1));
    *(_QWORD *)v94 = v92;
    *((_QWORD *)v94 + 1) = v93;
    outlined init with copy of TetraOutgoingKeyContent(v70, v104);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v101);
    return outlined destroy of TetraRatchetOuterMessage(v70, type metadata accessor for TetraOutgoingKeyContent);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraOutgoingKeyContent@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraOutgoingKeyContent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraOutgoingKeyContent(_QWORD *a1)
{
  return TetraOutgoingKeyContent.encode(to:)(a1);
}

uint64_t TetraECDHSecKey.encode(to:)(_QWORD *a1, __SecKey *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __CFString *v8;
  CFDictionaryRef v9;
  CFDictionaryRef v10;
  uint64_t v11;
  __CFString *v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[4];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraECDHSecKey.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (__CFString *)a1[3];
  __swift_project_boxed_opaque_existential_1(a1, (uint64_t)v8);
  lazy protocol witness table accessor for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9 = SecKeyCopyAttributes(a2);
  if (!v9)
  {
    __break(1u);
LABEL_12:

    goto LABEL_13;
  }
  v10 = v9;
  type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for NSObject);
  lazy protocol witness table accessor for type NSObject and conformance NSObject();
  v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (one-time initialization token for TokenOID != -1)
    swift_once();
  if ((v11 & 0xC000000000000001) != 0)
  {
    v12 = (id)TokenOID;
    v13 = __CocoaDictionary.lookup(_:)();

    result = swift_bridgeObjectRelease();
    if (!v13)
      goto LABEL_14;
LABEL_10:
    v19[3] = v13;
    swift_dynamicCast();
    v17 = v19[1];
    v18 = v19[2];
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return outlined consume of Data._Representation(v17, v18);
  }
  if (*(_QWORD *)(v11 + 16))
  {
    v8 = (id)TokenOID;
    v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
    if ((v16 & 1) != 0)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v15);
      swift_unknownObjectRetain();

      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    goto LABEL_12;
  }
LABEL_13:
  result = swift_bridgeObjectRelease();
LABEL_14:
  __break(1u);
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TetraECDHSecKey.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance TetraECDHSecKey.CodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(v2, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::Int v4;
  uint64_t result;

  v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  result = swift_bridgeObjectRelease();
  *a3 = v4 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TetraECDHSecKey.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = 0x4B65746176697270;
  a1[1] = 0xEF73657479427965;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraECDHSecKey.CodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance TetraECDHSecKey.CodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, BOOL *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v6;
  uint64_t result;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease();
  *a3 = v6 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraECDHSecKey.CodingKeys()
{
  lazy protocol witness table accessor for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraECDHSecKey.CodingKeys()
{
  lazy protocol witness table accessor for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys();
  return CodingKey.debugDescription.getter();
}

SecKeyRef protocol witness for Decodable.init(from:) in conformance TetraECDHSecKey@<X0>(_QWORD *a1@<X0>, SecKeyRef *a2@<X8>)
{
  uint64_t v2;
  SecKeyRef result;

  result = specialized TetraECDHSecKey.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraECDHSecKey(_QWORD *a1)
{
  __SecKey **v1;

  return TetraECDHSecKey.encode(to:)(a1, *v1);
}

unint64_t lazy protocol witness table accessor for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SecureEnclave.Kyber768.PrivateKey.CodingKeys, &type metadata for SecureEnclave.Kyber768.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SecureEnclave.Kyber768.PrivateKey.CodingKeys, &type metadata for SecureEnclave.Kyber768.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SecureEnclave.Kyber768.PrivateKey.CodingKeys, &type metadata for SecureEnclave.Kyber768.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SecureEnclave.Kyber768.PrivateKey.CodingKeys, &type metadata for SecureEnclave.Kyber768.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber768.PrivateKey.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SecureEnclave.Kyber1024.PrivateKey.CodingKeys, &type metadata for SecureEnclave.Kyber1024.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SecureEnclave.Kyber1024.PrivateKey.CodingKeys, &type metadata for SecureEnclave.Kyber1024.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SecureEnclave.Kyber1024.PrivateKey.CodingKeys, &type metadata for SecureEnclave.Kyber1024.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for SecureEnclave.Kyber1024.PrivateKey.CodingKeys, &type metadata for SecureEnclave.Kyber1024.PrivateKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey.CodingKeys and conformance SecureEnclave.Kyber1024.PrivateKey.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraOutgoingKeyContent.CodingKeys, &type metadata for TetraOutgoingKeyContent.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraOutgoingKeyContent.CodingKeys, &type metadata for TetraOutgoingKeyContent.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraOutgoingKeyContent.CodingKeys, &type metadata for TetraOutgoingKeyContent.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraOutgoingKeyContent.CodingKeys, &type metadata for TetraOutgoingKeyContent.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingKeyContent.CodingKeys and conformance TetraOutgoingKeyContent.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of TetraOutgoingKeyContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraOutgoingKeyContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TetraKEM768Key? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type TetraKEM768Key? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TetraKEM768Key? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TetraKEM768Key?);
    v2 = lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraKEM768Key and conformance TetraKEM768Key, type metadata accessor for TetraKEM768Key, (uint64_t)&protocol conformance descriptor for TetraKEM768Key);
    result = MEMORY[0x20BD3C414](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM768Key? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraKEM1024Key? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type TetraKEM1024Key? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TetraKEM1024Key? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for TetraKEM1024Key?);
    v2 = lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraKEM1024Key and conformance TetraKEM1024Key, type metadata accessor for TetraKEM1024Key, (uint64_t)&protocol conformance descriptor for TetraKEM1024Key);
    result = MEMORY[0x20BD3C414](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM1024Key? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type Data? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Data? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    v2 = lazy protocol witness table accessor for type Data and conformance Data();
    result = MEMORY[0x20BD3C414](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data? and conformance <A> A?);
  }
  return result;
}

unint64_t specialized TetraOutgoingKeyContent.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TetraOutgoingKeyContent.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

SecKeyRef specialized TetraECDHSecKey.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  SecKeyRef v8;
  uint64_t v10;
  unint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraECDHSecKey.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v6 = v10;
  v7 = v11;
  v8 = specialized TetraECDHSecKey.init(aksBlob:)(v10, v11);
  outlined consume of Data._Representation(v6, v7);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v8;
}

unint64_t lazy protocol witness table accessor for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraECDHSecKey.CodingKeys, &type metadata for TetraECDHSecKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraECDHSecKey.CodingKeys, &type metadata for TetraECDHSecKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraECDHSecKey.CodingKeys, &type metadata for TetraECDHSecKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraECDHSecKey.CodingKeys, &type metadata for TetraECDHSecKey.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraECDHSecKey.CodingKeys and conformance TetraECDHSecKey.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NSObject and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSObject and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSObject and conformance NSObject)
  {
    v1 = type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for NSObject);
    result = MEMORY[0x20BD3C414](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSObject and conformance NSObject);
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraECDHSecKey.CodingKeys()
{
  return &type metadata for TetraECDHSecKey.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for TetraOutgoingKeyContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_20BB06D20 + 4 * byte_20BB418F1[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_20BB06D54 + 4 * byte_20BB418EC[v4]))();
}

uint64_t sub_20BB06D54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB06D5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BB06D64);
  return result;
}

uint64_t sub_20BB06D70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BB06D78);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_20BB06D7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB06D84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TetraOutgoingKeyContent.CodingKeys()
{
  return &type metadata for TetraOutgoingKeyContent.CodingKeys;
}

ValueMetadata *type metadata accessor for SecureEnclave.Kyber1024.PrivateKey.CodingKeys()
{
  return &type metadata for SecureEnclave.Kyber1024.PrivateKey.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SymmetricKey.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for SymmetricKey.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20BB06E40 + 4 * byte_20BB418F6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20BB06E60 + 4 * byte_20BB418FB[v4]))();
}

_BYTE *sub_20BB06E40(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20BB06E60(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20BB06E68(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20BB06E70(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20BB06E78(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20BB06E80(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SecureEnclave.Kyber768.PrivateKey.CodingKeys()
{
  return &type metadata for SecureEnclave.Kyber768.PrivateKey.CodingKeys;
}

_QWORD *initializeBufferWithCopyOfBuffer for TetraSessionState(_DWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  id v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void (*v49)(char *, _QWORD, uint64_t, uint64_t);
  id v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  void (*v72)(char *, _QWORD, uint64_t, uint64_t);
  id v73;
  uint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  __int128 v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t *v114;
  uint64_t *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  int *v127;
  _QWORD *v128;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for SymmetricKey();
    v11 = *(_QWORD *)(v10 - 8);
    v127 = a3;
    v128 = a2;
    v122 = v11;
    v123 = v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = type metadata accessor for TetraRatchetState(0);
    *(_QWORD *)&v8[*(int *)(v14 + 20)] = *(_QWORD *)&v9[*(int *)(v14 + 20)];
    v124 = v14;
    v125 = v9;
    v15 = *(int *)(v14 + 24);
    v126 = v8;
    v16 = &v8[v15];
    v17 = &v9[v15];
    v18 = *(void **)&v9[v15];
    *(_QWORD *)&v8[v15] = v18;
    v19 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
    v20 = &v16[v19];
    v21 = &v17[v19];
    v22 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    v25 = v18;
    if (v24(v21, 1, v22))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v27 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
    v28 = v27[5];
    v29 = &v16[v28];
    v30 = &v17[v28];
    v31 = type metadata accessor for TetraKEM768Key(0);
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v34 = type metadata accessor for Kyber768.PrivateKey();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v30, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v29, v30, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v29, 0, 1, v34);
      }
      v37 = *(int *)(v31 + 20);
      v38 = &v29[v37];
      v39 = &v30[v37];
      v40 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
      v118 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v39, 1, v40))
      {
        v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        v42 = type metadata accessor for Kyber768.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v38, v39, v42);
        v43 = *(int *)(v40 + 20);
        v114 = (uint64_t *)&v38[v43];
        v116 = v38;
        v44 = (uint64_t *)&v39[v43];
        v120 = v27;
        v46 = *v44;
        v45 = v44[1];
        outlined copy of Data._Representation(*v44, v45);
        *v114 = v46;
        v114[1] = v45;
        v47 = *(int *)(v40 + 24);
        v48 = *(void **)&v39[v47];
        *(_QWORD *)&v116[v47] = v48;
        v27 = v120;
        v49 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56);
        v50 = v48;
        v49(v116, 0, 1, v40);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v51 = v27[6];
    v52 = &v16[v51];
    v53 = &v17[v51];
    v54 = type metadata accessor for TetraKEM1024Key(0);
    v55 = *(_QWORD *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
      memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      v57 = type metadata accessor for Kyber1024.PrivateKey();
      v58 = *(_QWORD *)(v57 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v53, 1, v57))
      {
        v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v52, v53, v57);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v52, 0, 1, v57);
      }
      v60 = *(int *)(v54 + 20);
      v61 = &v52[v60];
      v62 = &v53[v60];
      v63 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
      v119 = *(_QWORD *)(v63 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v62, 1, v63))
      {
        v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
      }
      else
      {
        v65 = type metadata accessor for Kyber1024.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v61, v62, v65);
        v66 = *(int *)(v63 + 20);
        v115 = (uint64_t *)&v61[v66];
        v117 = v61;
        v67 = (uint64_t *)&v62[v66];
        v121 = v27;
        v68 = *v67;
        v69 = v67[1];
        outlined copy of Data._Representation(*v67, v69);
        *v115 = v68;
        v115[1] = v69;
        v70 = *(int *)(v63 + 24);
        v71 = *(void **)&v62[v70];
        *(_QWORD *)&v117[v70] = v71;
        v27 = v121;
        v72 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56);
        v73 = v71;
        v72(v117, 0, 1, v63);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
    }
    v74 = v27[7];
    v75 = &v16[v74];
    v76 = &v17[v74];
    v77 = *((_QWORD *)v76 + 1);
    if (v77 >> 60 == 15)
    {
      *(_OWORD *)v75 = *(_OWORD *)v76;
    }
    else
    {
      v78 = *(_QWORD *)v76;
      outlined copy of Data._Representation(*(_QWORD *)v76, *((_QWORD *)v76 + 1));
      *(_QWORD *)v75 = v78;
      *((_QWORD *)v75 + 1) = v77;
    }
    v79 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
    v80 = &v16[v79];
    v81 = &v17[v79];
    v82 = type metadata accessor for SymmetricRatchet();
    v83 = *(_QWORD *)(v82 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
    {
      v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
      memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v80, v81, v123);
      v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(_QWORD *)&v80[*(int *)(v85 + 48)] = *(_QWORD *)&v81[*(int *)(v85 + 48)];
      *(_QWORD *)&v80[*(int *)(v82 + 20)] = *(_QWORD *)&v81[*(int *)(v82 + 20)];
      v86 = *(int *)(v82 + 24);
      v87 = &v80[v86];
      v88 = &v81[v86];
      v89 = *(_OWORD *)(v88 + 24);
      *(_OWORD *)&v80[v86 + 24] = v89;
      v90 = v89;
      v91 = **(void (***)(char *, char *, uint64_t))(v89 - 8);
      swift_bridgeObjectRetain();
      v91(v87, v88, v90);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
    }
    *(_DWORD *)&v126[*(int *)(v124 + 28)] = *(_DWORD *)&v125[*(int *)(v124 + 28)];
    v92 = *(int *)(v124 + 32);
    v93 = &v126[v92];
    v94 = &v125[v92];
    v95 = type metadata accessor for Date();
    v96 = *(_QWORD *)(v95 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
    {
      v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v93, v94, v95);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
    }
    v98 = v127[6];
    v99 = (char *)v4 + v98;
    v100 = (char *)v128 + v98;
    v101 = type metadata accessor for P256.Signing.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v99, v100, v101);
    v102 = v127[7];
    v103 = (char *)v4 + v102;
    v104 = (char *)v128 + v102;
    v105 = type metadata accessor for P256.KeyAgreement.PublicKey();
    v106 = *(_QWORD *)(v105 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
    {
      v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
      memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v103, v104, v105);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
    }
    v108 = v127[8];
    v109 = (_QWORD *)((char *)v4 + v108);
    v110 = (_QWORD *)((char *)v128 + v108);
    v111 = *v110;
    v112 = v110[1];
    outlined copy of Data._Representation(*v110, v112);
    *v109 = v111;
    v109[1] = v112;
    *((_BYTE *)v4 + v127[9]) = *((_BYTE *)v128 + v127[9]);
  }
  return v4;
}

uint64_t destroy for TetraSessionState(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for SymmetricKey();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v40 = v6;
  v41 = v5;
  v7 = type metadata accessor for TetraRatchetState(0);
  swift_bridgeObjectRelease();
  v8 = (id *)(v4 + *(int *)(v7 + 24));

  v9 = (char *)v8 + *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v10 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v11 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  v12 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v13 = (char *)v8 + v12[5];
  v14 = type metadata accessor for TetraKEM768Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v15 = type metadata accessor for Kyber768.PrivateKey();
    v16 = *(_QWORD *)(v15 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15))
      (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    v17 = &v13[*(int *)(v14 + 20)];
    v18 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18))
    {
      v19 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v17, v19);
      outlined consume of Data._Representation(*(_QWORD *)&v17[*(int *)(v18 + 20)], *(_QWORD *)&v17[*(int *)(v18 + 20) + 8]);

    }
  }
  v20 = (char *)v8 + v12[6];
  v21 = type metadata accessor for TetraKEM1024Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
  {
    v22 = type metadata accessor for Kyber1024.PrivateKey();
    v23 = *(_QWORD *)(v22 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
      (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
    v24 = &v20[*(int *)(v21 + 20)];
    v25 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25))
    {
      v26 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v24, v26);
      outlined consume of Data._Representation(*(_QWORD *)&v24[*(int *)(v25 + 20)], *(_QWORD *)&v24[*(int *)(v25 + 20) + 8]);

    }
  }
  v27 = (uint64_t *)((char *)v8 + v12[7]);
  v28 = v27[1];
  if (v28 >> 60 != 15)
    outlined consume of Data._Representation(*v27, v28);
  v29 = (char *)v8 + *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v30 = type metadata accessor for SymmetricRatchet();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v29, 1, v30))
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v29[*(int *)(v30 + 24)]);
  }
  v31 = v4 + *(int *)(v7 + 32);
  v32 = type metadata accessor for Date();
  v33 = *(_QWORD *)(v32 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  v34 = a1 + a2[6];
  v35 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v34, v35);
  v36 = a1 + a2[7];
  v37 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v38 = *(_QWORD *)(v37 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
}

_DWORD *initializeWithCopy for TetraSessionState(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  void (*v48)(char *, _QWORD, uint64_t, uint64_t);
  id v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  void (*v72)(char *, _QWORD, uint64_t, uint64_t);
  id v73;
  uint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  __int128 v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t *v114;
  uint64_t *v115;
  char *v116;
  char *v117;
  int *v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int *v125;
  _DWORD *v126;
  _DWORD *v127;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SymmetricKey();
  v10 = *(_QWORD *)(v9 - 8);
  v126 = a2;
  v127 = a1;
  v125 = a3;
  v120 = v10;
  v121 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = type metadata accessor for TetraRatchetState(0);
  *(_QWORD *)&v7[*(int *)(v12 + 20)] = *(_QWORD *)&v8[*(int *)(v12 + 20)];
  v122 = v12;
  v123 = v8;
  v13 = *(int *)(v12 + 24);
  v124 = v7;
  v14 = &v7[v13];
  v15 = &v8[v13];
  v16 = *(void **)&v8[v13];
  *(_QWORD *)v14 = v16;
  v17 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v18 = &v14[v17];
  v19 = &v15[v17];
  v20 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  v23 = v16;
  if (v22(v19, 1, v20))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v25 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v26 = v25[5];
  v27 = &v14[v26];
  v28 = &v15[v26];
  v29 = type metadata accessor for TetraKEM768Key(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = type metadata accessor for Kyber768.PrivateKey();
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v28, 1, v32))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v27, v28, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v27, 0, 1, v32);
    }
    v35 = *(int *)(v29 + 20);
    v36 = &v27[v35];
    v37 = &v28[v35];
    v38 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v41 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v36, v37, v41);
      v42 = *(int *)(v38 + 20);
      v114 = (uint64_t *)&v36[v42];
      v116 = v36;
      v43 = (uint64_t *)&v37[v42];
      v118 = v25;
      v44 = *v43;
      v45 = v43[1];
      outlined copy of Data._Representation(*v43, v45);
      *v114 = v44;
      v114[1] = v45;
      v46 = *(int *)(v38 + 24);
      v47 = *(void **)&v37[v46];
      v25 = v118;
      *(_QWORD *)&v116[v46] = v47;
      v48 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56);
      v49 = v47;
      v48(v116, 0, 1, v38);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v50 = v25[6];
  v51 = &v14[v50];
  v52 = &v15[v50];
  v53 = type metadata accessor for TetraKEM1024Key(0);
  v54 = *(_QWORD *)(v53 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v56 = type metadata accessor for Kyber1024.PrivateKey();
    v57 = *(_QWORD *)(v56 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v52, 1, v56))
    {
      v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v51, v52, v56);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v51, 0, 1, v56);
    }
    v59 = *(int *)(v53 + 20);
    v60 = &v51[v59];
    v61 = &v52[v59];
    v62 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    v63 = *(_QWORD *)(v62 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
    {
      v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      v65 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v60, v61, v65);
      v66 = *(int *)(v62 + 20);
      v115 = (uint64_t *)&v60[v66];
      v117 = v60;
      v67 = (uint64_t *)&v61[v66];
      v119 = v25;
      v68 = *v67;
      v69 = v67[1];
      outlined copy of Data._Representation(*v67, v69);
      *v115 = v68;
      v115[1] = v69;
      v70 = *(int *)(v62 + 24);
      v71 = *(void **)&v61[v70];
      v25 = v119;
      *(_QWORD *)&v117[v70] = v71;
      v72 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56);
      v73 = v71;
      v72(v117, 0, 1, v62);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  v74 = v25[7];
  v75 = &v14[v74];
  v76 = &v15[v74];
  v77 = *((_QWORD *)v76 + 1);
  if (v77 >> 60 == 15)
  {
    *(_OWORD *)v75 = *(_OWORD *)v76;
  }
  else
  {
    v78 = *(_QWORD *)v76;
    outlined copy of Data._Representation(*(_QWORD *)v76, *((_QWORD *)v76 + 1));
    *(_QWORD *)v75 = v78;
    *((_QWORD *)v75 + 1) = v77;
  }
  v79 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v80 = &v14[v79];
  v81 = &v15[v79];
  v82 = type metadata accessor for SymmetricRatchet();
  v83 = *(_QWORD *)(v82 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
  {
    v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v120 + 16))(v80, v81, v121);
    v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(_QWORD *)&v80[*(int *)(v85 + 48)] = *(_QWORD *)&v81[*(int *)(v85 + 48)];
    *(_QWORD *)&v80[*(int *)(v82 + 20)] = *(_QWORD *)&v81[*(int *)(v82 + 20)];
    v86 = *(int *)(v82 + 24);
    v87 = &v80[v86];
    v88 = &v81[v86];
    v89 = *(_OWORD *)&v81[v86 + 24];
    *(_OWORD *)&v80[v86 + 24] = v89;
    v90 = v89;
    v91 = **(void (***)(char *, char *, uint64_t))(v89 - 8);
    swift_bridgeObjectRetain();
    v91(v87, v88, v90);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
  }
  *(_DWORD *)&v124[*(int *)(v122 + 28)] = *(_DWORD *)&v123[*(int *)(v122 + 28)];
  v92 = *(int *)(v122 + 32);
  v93 = &v124[v92];
  v94 = &v123[v92];
  v95 = type metadata accessor for Date();
  v96 = *(_QWORD *)(v95 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
  {
    v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v93, v94, v95);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
  }
  v98 = v125[6];
  v99 = (char *)v127 + v98;
  v100 = (char *)v126 + v98;
  v101 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v99, v100, v101);
  v102 = v125[7];
  v103 = (char *)v127 + v102;
  v104 = (char *)v126 + v102;
  v105 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v106 = *(_QWORD *)(v105 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
  {
    v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v103, v104, v105);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
  }
  v108 = v125[8];
  v109 = (uint64_t *)((char *)v127 + v108);
  v110 = (uint64_t *)((char *)v126 + v108);
  v111 = *v110;
  v112 = v110[1];
  outlined copy of Data._Representation(*v110, v112);
  *v109 = v111;
  v109[1] = v112;
  *((_BYTE *)v127 + v125[9]) = *((_BYTE *)v126 + v125[9]);
  return v127;
}

_DWORD *assignWithCopy for TetraSessionState(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void (*v66)(char *, _QWORD, uint64_t, uint64_t);
  id v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(char *, uint64_t, uint64_t);
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(char *, uint64_t, uint64_t);
  int v84;
  int v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  void *v99;
  void (*v100)(char *, _QWORD, uint64_t, uint64_t);
  id v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(char *, uint64_t, uint64_t);
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(char *, uint64_t, uint64_t);
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)(char *, uint64_t, uint64_t);
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t (*v159)(char *, uint64_t, uint64_t);
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  void *v169;
  void (*v170)(char *, _QWORD, uint64_t, uint64_t);
  id v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t (*v176)(char *, uint64_t, uint64_t);
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  void *v186;
  void (*v187)(char *, _QWORD, uint64_t, uint64_t);
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  id v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  void *v210;
  void *v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  int *v218;
  _DWORD *v219;
  _DWORD *v220;
  uint64_t v221;
  char *v222;
  _QWORD *v223;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SymmetricKey();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  v219 = a2;
  v220 = a1;
  v213 = v10;
  v214 = v9;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = type metadata accessor for TetraRatchetState(0);
  *(_QWORD *)&v7[*(int *)(v15 + 20)] = *(_QWORD *)&v8[*(int *)(v15 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = *(int *)(v15 + 24);
  v17 = &v7[v16];
  v18 = &v8[v16];
  v19 = *(void **)&v7[v16];
  v20 = *(void **)&v8[v16];
  *(_QWORD *)v17 = v20;
  v21 = v20;

  v22 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v222 = v18;
  v223 = v17;
  v23 = &v17[v22];
  v24 = &v18[v22];
  v25 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  v217 = v15;
  v218 = a3;
  v215 = v8;
  v216 = v7;
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
LABEL_12:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 24))(v23, v24, v25);
LABEL_13:
  v32 = v222;
  v31 = v223;
  v33 = type metadata accessor for TetraOutgoingKeyContent(0);
  v34 = *(int *)(v33 + 20);
  v35 = (char *)v223 + v34;
  v36 = &v222[v34];
  v37 = type metadata accessor for TetraKEM768Key(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  v221 = v33;
  if (!v40)
  {
    if (v41)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v35, type metadata accessor for TetraKEM768Key);
      goto LABEL_19;
    }
    v47 = type metadata accessor for Kyber768.PrivateKey();
    v48 = *(_QWORD *)(v47 - 8);
    v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
    v50 = v49(v35, 1, v47);
    v51 = v49(v36, 1, v47);
    if (v50)
    {
      if (!v51)
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v35, v36, v47);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v35, 0, 1, v47);
LABEL_79:
        v31 = v223;
        v156 = *(int *)(v37 + 20);
        v35 += v156;
        v36 += v156;
        v157 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        v158 = *(_QWORD *)(v157 - 8);
        v159 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v158 + 48);
        v160 = v159(v35, 1, v157);
        v161 = v159(v36, 1, v157);
        if (v160)
        {
          if (!v161)
          {
            v162 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v162 - 8) + 16))(v35, v36, v162);
            v163 = *(int *)(v157 + 20);
            v164 = (uint64_t *)&v35[v163];
            v165 = (uint64_t *)&v36[v163];
            v166 = *v165;
            v167 = v165[1];
            outlined copy of Data._Representation(*v165, v167);
            *v164 = v166;
            v164[1] = v167;
            v31 = v223;
            v168 = *(int *)(v157 + 24);
            v169 = *(void **)&v36[v168];
            *(_QWORD *)&v35[v168] = v169;
            v170 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56);
            v171 = v169;
            v170(v35, 0, 1, v157);
            goto LABEL_31;
          }
        }
        else
        {
          if (!v161)
          {
            v189 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v189 - 8) + 24))(v35, v36, v189);
            v190 = *(int *)(v157 + 20);
            v191 = (uint64_t *)&v35[v190];
            v192 = (uint64_t *)&v36[v190];
            v193 = *v192;
            v194 = v192[1];
            outlined copy of Data._Representation(*v192, v194);
            v195 = *v191;
            v196 = v191[1];
            *v191 = v193;
            v191[1] = v194;
            v31 = v223;
            outlined consume of Data._Representation(v195, v196);
            v197 = *(int *)(v157 + 24);
            v198 = *(void **)&v36[v197];
            v199 = *(void **)&v35[v197];
            *(_QWORD *)&v35[v197] = v198;
            v200 = v198;

            goto LABEL_31;
          }
          outlined destroy of TetraRatchetOuterMessage((uint64_t)v35, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        v45 = &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?;
LABEL_20:
        v46 = __swift_instantiateConcreteTypeFromMangledName(v45);
        memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        goto LABEL_31;
      }
    }
    else
    {
      if (!v51)
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 24))(v35, v36, v47);
        goto LABEL_79;
      }
      (*(void (**)(char *, uint64_t))(v48 + 8))(v35, v47);
    }
    v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
    goto LABEL_79;
  }
  if (v41)
  {
LABEL_19:
    v45 = &demangling cache variable for type metadata for TetraKEM768Key?;
    goto LABEL_20;
  }
  v42 = type metadata accessor for Kyber768.PrivateKey();
  v43 = *(_QWORD *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v36, 1, v42))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v35, v36, v42);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v35, 0, 1, v42);
  }
  v52 = *(int *)(v37 + 20);
  v53 = &v35[v52];
  v54 = &v36[v52];
  v55 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v56 = *(_QWORD *)(v55 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
  {
    v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    v58 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v53, v54, v58);
    v59 = *(int *)(v55 + 20);
    v60 = (uint64_t *)&v53[v59];
    v61 = (uint64_t *)&v54[v59];
    v63 = *v61;
    v62 = v61[1];
    outlined copy of Data._Representation(*v61, v62);
    *v60 = v63;
    v60[1] = v62;
    v33 = v221;
    v32 = v222;
    v64 = *(int *)(v55 + 24);
    v65 = *(void **)&v54[v64];
    *(_QWORD *)&v53[v64] = v65;
    v66 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56);
    v67 = v65;
    v66(v53, 0, 1, v55);
  }
  v31 = v223;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_31:
  v68 = *(int *)(v33 + 24);
  v69 = (char *)v31 + v68;
  v70 = &v32[v68];
  v71 = type metadata accessor for TetraKEM1024Key(0);
  v72 = *(_QWORD *)(v71 - 8);
  v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 48);
  v74 = v73(v69, 1, v71);
  v75 = v73(v70, 1, v71);
  if (!v74)
  {
    if (v75)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v69, type metadata accessor for TetraKEM1024Key);
      goto LABEL_37;
    }
    v81 = type metadata accessor for Kyber1024.PrivateKey();
    v82 = *(_QWORD *)(v81 - 8);
    v83 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 48);
    v84 = v83(v69, 1, v81);
    v85 = v83(v70, 1, v81);
    if (v84)
    {
      if (!v85)
      {
        (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v69, v70, v81);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v69, 0, 1, v81);
LABEL_85:
        v173 = *(int *)(v71 + 20);
        v69 += v173;
        v70 += v173;
        v174 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        v175 = *(_QWORD *)(v174 - 8);
        v176 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v175 + 48);
        v177 = v176(v69, 1, v174);
        v178 = v176(v70, 1, v174);
        if (v177)
        {
          if (!v178)
          {
            v179 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v179 - 8) + 16))(v69, v70, v179);
            v180 = *(int *)(v174 + 20);
            v181 = (uint64_t *)&v69[v180];
            v182 = (uint64_t *)&v70[v180];
            v183 = *v182;
            v184 = v182[1];
            outlined copy of Data._Representation(*v182, v184);
            *v181 = v183;
            v181[1] = v184;
            v185 = *(int *)(v174 + 24);
            v186 = *(void **)&v70[v185];
            *(_QWORD *)&v69[v185] = v186;
            v187 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v175 + 56);
            v188 = v186;
            v187(v69, 0, 1, v174);
            goto LABEL_47;
          }
        }
        else
        {
          if (!v178)
          {
            v201 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v201 - 8) + 24))(v69, v70, v201);
            v202 = *(int *)(v174 + 20);
            v203 = (uint64_t *)&v69[v202];
            v204 = (uint64_t *)&v70[v202];
            v205 = *v204;
            v206 = v204[1];
            outlined copy of Data._Representation(*v204, v206);
            v207 = *v203;
            v208 = v203[1];
            *v203 = v205;
            v203[1] = v206;
            outlined consume of Data._Representation(v207, v208);
            v209 = *(int *)(v174 + 24);
            v210 = *(void **)&v70[v209];
            v211 = *(void **)&v69[v209];
            *(_QWORD *)&v69[v209] = v210;
            v212 = v210;

            goto LABEL_47;
          }
          outlined destroy of TetraRatchetOuterMessage((uint64_t)v69, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        v79 = &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?;
LABEL_38:
        v80 = __swift_instantiateConcreteTypeFromMangledName(v79);
        memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
        goto LABEL_47;
      }
    }
    else
    {
      if (!v85)
      {
        (*(void (**)(char *, char *, uint64_t))(v82 + 24))(v69, v70, v81);
        goto LABEL_85;
      }
      (*(void (**)(char *, uint64_t))(v82 + 8))(v69, v81);
    }
    v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v172 - 8) + 64));
    goto LABEL_85;
  }
  if (v75)
  {
LABEL_37:
    v79 = &demangling cache variable for type metadata for TetraKEM1024Key?;
    goto LABEL_38;
  }
  v76 = type metadata accessor for Kyber1024.PrivateKey();
  v77 = *(_QWORD *)(v76 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v70, 1, v76))
  {
    v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v69, v70, v76);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v69, 0, 1, v76);
  }
  v86 = *(int *)(v71 + 20);
  v87 = &v69[v86];
  v88 = &v70[v86];
  v89 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v90 = *(_QWORD *)(v89 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
  {
    v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    v92 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(v87, v88, v92);
    v93 = *(int *)(v89 + 20);
    v94 = (uint64_t *)&v87[v93];
    v95 = (uint64_t *)&v88[v93];
    v96 = *v95;
    v97 = v95[1];
    outlined copy of Data._Representation(*v95, v97);
    *v94 = v96;
    v94[1] = v97;
    v32 = v222;
    v98 = *(int *)(v89 + 24);
    v99 = *(void **)&v88[v98];
    *(_QWORD *)&v87[v98] = v99;
    v100 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56);
    v101 = v99;
    v100(v87, 0, 1, v89);
  }
  v31 = v223;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
LABEL_47:
  v102 = *(int *)(v221 + 28);
  v103 = (_QWORD *)((char *)v31 + v102);
  v104 = (uint64_t *)&v32[v102];
  v105 = *(_QWORD *)&v32[v102 + 8];
  if (*(_QWORD *)((char *)v31 + v102 + 8) >> 60 == 15)
  {
    if (v105 >> 60 != 15)
    {
      v106 = *v104;
      outlined copy of Data._Representation(*v104, v105);
      *v103 = v106;
      v103[1] = v105;
      goto LABEL_54;
    }
    goto LABEL_52;
  }
  if (v105 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v103);
LABEL_52:
    *(_OWORD *)v103 = *(_OWORD *)v104;
    goto LABEL_54;
  }
  v107 = *v104;
  outlined copy of Data._Representation(*v104, v105);
  v108 = *v103;
  v109 = v103[1];
  *v103 = v107;
  v103[1] = v105;
  outlined consume of Data._Representation(v108, v109);
LABEL_54:
  v110 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v111 = (char *)v31 + v110;
  v112 = &v32[v110];
  v113 = type metadata accessor for SymmetricRatchet();
  v114 = *(_QWORD *)(v113 - 8);
  v115 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 48);
  v116 = v115(v111, 1, v113);
  v117 = v115(v112, 1, v113);
  if (v116)
  {
    if (!v117)
    {
      (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v111, v112, v214);
      v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(_QWORD *)&v111[*(int *)(v118 + 48)] = *(_QWORD *)&v112[*(int *)(v118 + 48)];
      *(_QWORD *)&v111[*(int *)(v113 + 20)] = *(_QWORD *)&v112[*(int *)(v113 + 20)];
      v119 = *(int *)(v113 + 24);
      v120 = &v111[v119];
      v121 = &v112[v119];
      v122 = *(_QWORD *)&v112[v119 + 24];
      *((_QWORD *)v120 + 3) = v122;
      *((_QWORD *)v120 + 4) = *(_QWORD *)&v112[v119 + 32];
      v123 = **(void (***)(char *, char *, uint64_t))(v122 - 8);
      swift_bridgeObjectRetain();
      v123(v120, v121, v122);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  if (v117)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v111, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
LABEL_59:
    v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    goto LABEL_60;
  }
  (*(void (**)(char *, char *, uint64_t))(v213 + 24))(v111, v112, v214);
  v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)&v111[*(int *)(v154 + 48)] = *(_QWORD *)&v112[*(int *)(v154 + 48)];
  *(_QWORD *)&v111[*(int *)(v113 + 20)] = *(_QWORD *)&v112[*(int *)(v113 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)&v111[*(int *)(v113 + 24)], (uint64_t *)&v112[*(int *)(v113 + 24)]);
LABEL_60:
  *(_DWORD *)&v216[*(int *)(v217 + 28)] = *(_DWORD *)&v215[*(int *)(v217 + 28)];
  v125 = *(int *)(v217 + 32);
  v126 = &v216[v125];
  v127 = &v215[v125];
  v128 = type metadata accessor for Date();
  v129 = *(_QWORD *)(v128 - 8);
  v130 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v129 + 48);
  v131 = v130(v126, 1, v128);
  v132 = v130(v127, 1, v128);
  if (v131)
  {
    if (!v132)
    {
      (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v126, v127, v128);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v126, 0, 1, v128);
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  if (v132)
  {
    (*(void (**)(char *, uint64_t))(v129 + 8))(v126, v128);
LABEL_65:
    v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    goto LABEL_66;
  }
  (*(void (**)(char *, char *, uint64_t))(v129 + 24))(v126, v127, v128);
LABEL_66:
  v134 = v218[6];
  v135 = (char *)v220 + v134;
  v136 = (char *)v219 + v134;
  v137 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 24))(v135, v136, v137);
  v138 = v218[7];
  v139 = (char *)v220 + v138;
  v140 = (char *)v219 + v138;
  v141 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v142 = *(_QWORD *)(v141 - 8);
  v143 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v142 + 48);
  LODWORD(v135) = v143(v139, 1, v141);
  v144 = v143(v140, 1, v141);
  if (!(_DWORD)v135)
  {
    if (!v144)
    {
      (*(void (**)(char *, char *, uint64_t))(v142 + 24))(v139, v140, v141);
      goto LABEL_72;
    }
    (*(void (**)(char *, uint64_t))(v142 + 8))(v139, v141);
    goto LABEL_71;
  }
  if (v144)
  {
LABEL_71:
    v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v139, v140, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
    goto LABEL_72;
  }
  (*(void (**)(char *, char *, uint64_t))(v142 + 16))(v139, v140, v141);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v142 + 56))(v139, 0, 1, v141);
LABEL_72:
  v146 = v218[8];
  v147 = (uint64_t *)((char *)v220 + v146);
  v148 = (uint64_t *)((char *)v219 + v146);
  v149 = *v148;
  v150 = v148[1];
  outlined copy of Data._Representation(*v148, v150);
  v151 = *v147;
  v152 = v147[1];
  *v147 = v149;
  v147[1] = v150;
  outlined consume of Data._Representation(v151, v152);
  *((_BYTE *)v220 + v218[9]) = *((_BYTE *)v219 + v218[9]);
  return v220;
}

_DWORD *initializeWithTake for TetraSessionState(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  int *v87;
  uint64_t v88;
  char *v89;
  int *v90;
  _DWORD *v91;
  _DWORD *v92;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SymmetricKey();
  v10 = *(_QWORD *)(v9 - 8);
  v91 = a2;
  v92 = a1;
  v84 = v10;
  v85 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = type metadata accessor for TetraRatchetState(0);
  *(_QWORD *)&v7[*(int *)(v12 + 20)] = *(_QWORD *)&v8[*(int *)(v12 + 20)];
  v88 = v12;
  v89 = v7;
  v13 = *(int *)(v12 + 24);
  v14 = &v7[v13];
  v15 = &v8[v13];
  *(_QWORD *)&v7[v13] = *(_QWORD *)&v8[v13];
  v16 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v17 = &v14[v16];
  v18 = &v15[v16];
  v19 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v20 = *(_QWORD *)(v19 - 8);
  v90 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v22 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v23 = v22[5];
  v24 = &v14[v23];
  v25 = &v15[v23];
  v26 = type metadata accessor for TetraKEM768Key(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v86 = v22;
    v29 = type metadata accessor for Kyber768.PrivateKey();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v25, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v24, v25, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v24, 0, 1, v29);
    }
    v32 = *(int *)(v26 + 20);
    v33 = &v24[v32];
    v34 = &v25[v32];
    v35 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v38 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v33, v34, v38);
      *(_OWORD *)&v33[*(int *)(v35 + 20)] = *(_OWORD *)&v34[*(int *)(v35 + 20)];
      *(_QWORD *)&v33[*(int *)(v35 + 24)] = *(_QWORD *)&v34[*(int *)(v35 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    v22 = v86;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v39 = v22[6];
  v40 = &v14[v39];
  v41 = &v15[v39];
  v42 = type metadata accessor for TetraKEM1024Key(0);
  v43 = *(_QWORD *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    v87 = v22;
    v45 = type metadata accessor for Kyber1024.PrivateKey();
    v46 = *(_QWORD *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v41, 1, v45))
    {
      v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v40, v41, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v40, 0, 1, v45);
    }
    v48 = *(int *)(v42 + 20);
    v49 = &v40[v48];
    v50 = &v41[v48];
    v51 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    v52 = *(_QWORD *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      v54 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v49, v50, v54);
      *(_OWORD *)&v49[*(int *)(v51 + 20)] = *(_OWORD *)&v50[*(int *)(v51 + 20)];
      *(_QWORD *)&v49[*(int *)(v51 + 24)] = *(_QWORD *)&v50[*(int *)(v51 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
    }
    v22 = v87;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  }
  *(_OWORD *)&v14[v22[7]] = *(_OWORD *)&v15[v22[7]];
  v55 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v56 = &v14[v55];
  v57 = &v15[v55];
  v58 = type metadata accessor for SymmetricRatchet();
  v59 = *(_QWORD *)(v58 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
  {
    v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v56, v57, v85);
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(_QWORD *)&v56[*(int *)(v61 + 48)] = *(_QWORD *)&v57[*(int *)(v61 + 48)];
    *(_QWORD *)&v56[*(int *)(v58 + 20)] = *(_QWORD *)&v57[*(int *)(v58 + 20)];
    v62 = *(int *)(v58 + 24);
    v63 = &v56[v62];
    v64 = &v57[v62];
    v65 = *((_OWORD *)v64 + 1);
    *(_OWORD *)v63 = *(_OWORD *)v64;
    *((_OWORD *)v63 + 1) = v65;
    *((_QWORD *)v63 + 4) = *((_QWORD *)v64 + 4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
  }
  *(_DWORD *)&v89[*(int *)(v88 + 28)] = *(_DWORD *)&v8[*(int *)(v88 + 28)];
  v66 = *(int *)(v88 + 32);
  v67 = &v89[v66];
  v68 = &v8[v66];
  v69 = type metadata accessor for Date();
  v70 = *(_QWORD *)(v69 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
  {
    v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v68, v69);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
  }
  v72 = v90[6];
  v73 = (char *)v92 + v72;
  v74 = (char *)v91 + v72;
  v75 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
  v76 = v90[7];
  v77 = (char *)v92 + v76;
  v78 = (char *)v91 + v76;
  v79 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v80 = *(_QWORD *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  v82 = v90[9];
  *(_OWORD *)((char *)v92 + v90[8]) = *(_OWORD *)((char *)v91 + v90[8]);
  *((_BYTE *)v92 + v82) = *((_BYTE *)v91 + v82);
  return v92;
}

_DWORD *assignWithTake for TetraSessionState(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(char *, uint64_t, uint64_t);
  int v80;
  int v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(char *, uint64_t, uint64_t);
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(char *, uint64_t, uint64_t);
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(char *, uint64_t, uint64_t);
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(char *, uint64_t, uint64_t);
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  int *v166;
  int *v167;
  int *v168;
  int *v169;
  char *v170;
  uint64_t v171;
  int *v172;
  _DWORD *v173;
  _DWORD *v174;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SymmetricKey();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  v173 = a2;
  v174 = a1;
  v172 = a3;
  v164 = v10;
  v165 = v9;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = type metadata accessor for TetraRatchetState(0);
  *(_QWORD *)&v7[*(int *)(v15 + 20)] = *(_QWORD *)&v8[*(int *)(v15 + 20)];
  swift_bridgeObjectRelease();
  v171 = v15;
  v16 = *(int *)(v15 + 24);
  v17 = &v7[v16];
  v18 = &v8[v16];
  v19 = *(void **)&v7[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;

  v20 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v21 = &v17[v20];
  v22 = &v18[v20];
  v23 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v26 = v25(v21, 1, v23);
  v27 = v25(v22, 1, v23);
  v170 = v8;
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v23);
LABEL_12:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v21, v22, v23);
LABEL_13:
  v29 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v30 = v29[5];
  v31 = &v17[v30];
  v32 = &v18[v30];
  v33 = type metadata accessor for TetraKEM768Key(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (v37)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v31, type metadata accessor for TetraKEM768Key);
      goto LABEL_19;
    }
    v167 = v29;
    v42 = type metadata accessor for Kyber768.PrivateKey();
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
    v45 = v44(v31, 1, v42);
    v46 = v44(v32, 1, v42);
    if (v45)
    {
      if (!v46)
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v31, v32, v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v31, 0, 1, v42);
        goto LABEL_33;
      }
    }
    else
    {
      if (!v46)
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 40))(v31, v32, v42);
LABEL_33:
        v55 = *(int *)(v33 + 20);
        v56 = &v31[v55];
        v57 = &v32[v55];
        v58 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        v59 = *(_QWORD *)(v58 - 8);
        v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
        v61 = v60(v56, 1, v58);
        v62 = v60(v57, 1, v58);
        if (v61)
        {
          if (!v62)
          {
            v63 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32))(v56, v57, v63);
            *(_OWORD *)&v56[*(int *)(v58 + 20)] = *(_OWORD *)&v57[*(int *)(v58 + 20)];
            *(_QWORD *)&v56[*(int *)(v58 + 24)] = *(_QWORD *)&v57[*(int *)(v58 + 24)];
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
LABEL_39:
            v29 = v167;
            goto LABEL_40;
          }
        }
        else
        {
          if (!v62)
          {
            v152 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 40))(v56, v57, v152);
            v153 = *(int *)(v58 + 20);
            v154 = *(_QWORD *)&v56[v153];
            v155 = *(_QWORD *)&v56[v153 + 8];
            *(_OWORD *)&v56[v153] = *(_OWORD *)&v57[v153];
            outlined consume of Data._Representation(v154, v155);
            v156 = *(int *)(v58 + 24);
            v157 = *(void **)&v56[v156];
            *(_QWORD *)&v56[v156] = *(_QWORD *)&v57[v156];

            goto LABEL_39;
          }
          outlined destroy of TetraRatchetOuterMessage((uint64_t)v56, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        goto LABEL_39;
      }
      (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v42);
    }
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_33;
  }
  if (v37)
  {
LABEL_19:
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_40;
  }
  v38 = type metadata accessor for Kyber768.PrivateKey();
  v39 = *(_QWORD *)(v38 - 8);
  v166 = v29;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v32, 1, v38))
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v31, v32, v38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v31, 0, 1, v38);
  }
  v47 = *(int *)(v33 + 20);
  v48 = &v31[v47];
  v49 = &v32[v47];
  v50 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v51 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    v53 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v48, v49, v53);
    *(_OWORD *)&v48[*(int *)(v50 + 20)] = *(_OWORD *)&v49[*(int *)(v50 + 20)];
    *(_QWORD *)&v48[*(int *)(v50 + 24)] = *(_QWORD *)&v49[*(int *)(v50 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
  }
  v29 = v166;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_40:
  v65 = v29[6];
  v66 = &v17[v65];
  v67 = &v18[v65];
  v68 = type metadata accessor for TetraKEM1024Key(0);
  v69 = *(_QWORD *)(v68 - 8);
  v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
  v71 = v70(v66, 1, v68);
  v72 = v70(v67, 1, v68);
  if (v71)
  {
    if (!v72)
    {
      v73 = type metadata accessor for Kyber1024.PrivateKey();
      v74 = *(_QWORD *)(v73 - 8);
      v168 = v29;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v67, 1, v73))
      {
        v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v66, v67, v73);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v66, 0, 1, v73);
      }
      v82 = *(int *)(v68 + 20);
      v83 = &v66[v82];
      v84 = &v67[v82];
      v85 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
      v86 = *(_QWORD *)(v85 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
      {
        v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
      }
      else
      {
        v88 = type metadata accessor for Kyber1024.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 32))(v83, v84, v88);
        *(_OWORD *)&v83[*(int *)(v85 + 20)] = *(_OWORD *)&v84[*(int *)(v85 + 20)];
        *(_QWORD *)&v83[*(int *)(v85 + 24)] = *(_QWORD *)&v84[*(int *)(v85 + 24)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v83, 0, 1, v85);
      }
      v29 = v168;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
      goto LABEL_55;
    }
LABEL_46:
    v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
LABEL_55:
    v89 = v170;
    goto LABEL_56;
  }
  if (v72)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v66, type metadata accessor for TetraKEM1024Key);
    goto LABEL_46;
  }
  v169 = v29;
  v77 = type metadata accessor for Kyber1024.PrivateKey();
  v78 = *(_QWORD *)(v77 - 8);
  v79 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 48);
  v80 = v79(v66, 1, v77);
  v81 = v79(v67, 1, v77);
  if (v80)
  {
    if (!v81)
    {
      (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v66, v67, v77);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v66, 0, 1, v77);
      goto LABEL_86;
    }
    goto LABEL_85;
  }
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v78 + 8))(v66, v77);
LABEL_85:
    v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
    goto LABEL_86;
  }
  (*(void (**)(char *, char *, uint64_t))(v78 + 40))(v66, v67, v77);
LABEL_86:
  v142 = *(int *)(v68 + 20);
  v143 = &v66[v142];
  v144 = &v67[v142];
  v145 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v146 = *(_QWORD *)(v145 - 8);
  v147 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v146 + 48);
  v148 = v147(v143, 1, v145);
  v149 = v147(v144, 1, v145);
  if (!v148)
  {
    if (!v149)
    {
      v158 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v158 - 8) + 40))(v143, v144, v158);
      v159 = *(int *)(v145 + 20);
      v160 = *(_QWORD *)&v143[v159];
      v161 = *(_QWORD *)&v143[v159 + 8];
      *(_OWORD *)&v143[v159] = *(_OWORD *)&v144[v159];
      outlined consume of Data._Representation(v160, v161);
      v162 = *(int *)(v145 + 24);
      v163 = *(void **)&v143[v162];
      *(_QWORD *)&v143[v162] = *(_QWORD *)&v144[v162];

      goto LABEL_92;
    }
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v143, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
    goto LABEL_91;
  }
  if (v149)
  {
LABEL_91:
    v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
    goto LABEL_92;
  }
  v150 = type metadata accessor for Kyber1024.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 32))(v143, v144, v150);
  *(_OWORD *)&v143[*(int *)(v145 + 20)] = *(_OWORD *)&v144[*(int *)(v145 + 20)];
  *(_QWORD *)&v143[*(int *)(v145 + 24)] = *(_QWORD *)&v144[*(int *)(v145 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
LABEL_92:
  v29 = v169;
  v89 = v170;
LABEL_56:
  v90 = v29[7];
  v91 = (uint64_t)&v17[v90];
  v92 = &v18[v90];
  v93 = *(_QWORD *)&v17[v90 + 8];
  if (v93 >> 60 == 15)
  {
LABEL_59:
    *(_OWORD *)v91 = *(_OWORD *)v92;
    goto LABEL_61;
  }
  v94 = *((_QWORD *)v92 + 1);
  if (v94 >> 60 == 15)
  {
    outlined destroy of Data(v91);
    goto LABEL_59;
  }
  v95 = *(_QWORD *)v91;
  *(_QWORD *)v91 = *(_QWORD *)v92;
  *(_QWORD *)(v91 + 8) = v94;
  outlined consume of Data._Representation(v95, v93);
LABEL_61:
  v96 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v97 = &v17[v96];
  v98 = &v18[v96];
  v99 = type metadata accessor for SymmetricRatchet();
  v100 = *(_QWORD *)(v99 - 8);
  v101 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v100 + 48);
  v102 = v101(v97, 1, v99);
  v103 = v101(v98, 1, v99);
  if (v102)
  {
    if (!v103)
    {
      (*(void (**)(char *, char *, uint64_t))(v164 + 32))(v97, v98, v165);
      v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(_QWORD *)&v97[*(int *)(v104 + 48)] = *(_QWORD *)&v98[*(int *)(v104 + 48)];
      *(_QWORD *)&v97[*(int *)(v99 + 20)] = *(_QWORD *)&v98[*(int *)(v99 + 20)];
      v105 = *(int *)(v99 + 24);
      v106 = &v97[v105];
      v107 = &v98[v105];
      v108 = *((_OWORD *)v107 + 1);
      *(_OWORD *)v106 = *(_OWORD *)v107;
      *((_OWORD *)v106 + 1) = v108;
      *((_QWORD *)v106 + 4) = *((_QWORD *)v107 + 4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v103)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v97, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
LABEL_66:
    v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(char *, char *, uint64_t))(v164 + 40))(v97, v98, v165);
  v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)&v97[*(int *)(v136 + 48)] = *(_QWORD *)&v98[*(int *)(v136 + 48)];
  *(_QWORD *)&v97[*(int *)(v99 + 20)] = *(_QWORD *)&v98[*(int *)(v99 + 20)];
  swift_bridgeObjectRelease();
  v137 = *(int *)(v99 + 24);
  v138 = (uint64_t)&v97[v137];
  v139 = &v98[v137];
  __swift_destroy_boxed_opaque_existential_0(v138);
  v140 = *((_OWORD *)v139 + 1);
  *(_OWORD *)v138 = *(_OWORD *)v139;
  *(_OWORD *)(v138 + 16) = v140;
  *(_QWORD *)(v138 + 32) = *((_QWORD *)v139 + 4);
LABEL_67:
  *(_DWORD *)&v7[*(int *)(v171 + 28)] = *(_DWORD *)&v89[*(int *)(v171 + 28)];
  v110 = *(int *)(v171 + 32);
  v111 = &v7[v110];
  v112 = &v89[v110];
  v113 = type metadata accessor for Date();
  v114 = *(_QWORD *)(v113 - 8);
  v115 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v114 + 48);
  v116 = v115(v111, 1, v113);
  v117 = v115(v112, 1, v113);
  if (v116)
  {
    if (!v117)
    {
      (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v111, v112, v113);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v117)
  {
    (*(void (**)(char *, uint64_t))(v114 + 8))(v111, v113);
LABEL_72:
    v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v114 + 40))(v111, v112, v113);
LABEL_73:
  v119 = v172[6];
  v120 = (char *)v174 + v119;
  v121 = (char *)v173 + v119;
  v122 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 40))(v120, v121, v122);
  v123 = v172[7];
  v124 = (char *)v174 + v123;
  v125 = (char *)v173 + v123;
  v126 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v127 = *(_QWORD *)(v126 - 8);
  v128 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v127 + 48);
  v129 = v128(v124, 1, v126);
  v130 = v128(v125, 1, v126);
  if (!v129)
  {
    if (!v130)
    {
      (*(void (**)(char *, char *, uint64_t))(v127 + 40))(v124, v125, v126);
      goto LABEL_79;
    }
    (*(void (**)(char *, uint64_t))(v127 + 8))(v124, v126);
    goto LABEL_78;
  }
  if (v130)
  {
LABEL_78:
    v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v124, v125, v126);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v124, 0, 1, v126);
LABEL_79:
  v132 = v172[8];
  v133 = *(_QWORD *)((char *)v174 + v132);
  v134 = *(_QWORD *)((char *)v174 + v132 + 8);
  *(_OWORD *)((char *)v174 + v132) = *(_OWORD *)((char *)v173 + v132);
  outlined consume of Data._Representation(v133, v134);
  *((_BYTE *)v174 + v172[9]) = *((_BYTE *)v173 + v172[9]);
  return v174;
}

uint64_t getEnumTagSinglePayload for TetraSessionState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB0A82C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;

  v6 = type metadata accessor for TetraRatchetState(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for P256.Signing.PublicKey();
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = *(unsigned __int8 *)(a1 + a3[9]);
  if (v13 >= 2)
    return ((v13 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TetraSessionState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB0A914(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = type metadata accessor for TetraRatchetState(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v12 = type metadata accessor for P256.Signing.PublicKey();
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_BYTE *)(a1 + a4[9]) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for TetraSessionState()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TetraSessionState;
  if (!type metadata singleton initialization cache for TetraSessionState)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for TetraSessionState()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for TetraRatchetState(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for P256.Signing.PublicKey();
    if (v1 <= 0x3F)
    {
      type metadata accessor for P256.KeyAgreement.PublicKey?();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for P256.KeyAgreement.PublicKey?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for P256.KeyAgreement.PublicKey?)
  {
    type metadata accessor for P256.KeyAgreement.PublicKey();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  }
}

void TetraSessionState.init(remoteTetraRegistration:sessionDST:)(char *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, int *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v28 = a2;
  v29 = a3;
  v6 = type metadata accessor for TetraRatchetState(0);
  MEMORY[0x24BDAC7A8](v6);
  v27 = (uint64_t)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for P256.Signing.PublicKey();
  v30 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for TetraSessionState();
  v11 = (uint64_t)a4 + v10[7];
  v12 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  TetraRegistration.computeKeysHash()();
  v13 = (char *)a4 + v10[8];
  *(_QWORD *)v13 = v14;
  *((_QWORD *)v13 + 1) = v15;
  v16 = objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signingPublicKey], sel_compactRepresentation);
  v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  v31 = v17;
  v32 = v19;
  v20 = v33;
  P256.Signing.PublicKey.init<A>(compactRepresentation:)();
  if (v20)
  {

    outlined destroy of TetraSessionStates?(v11, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    outlined consume of Data._Representation(*(_QWORD *)v13, *((_QWORD *)v13 + 1));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))((char *)a4 + v10[6], v9, v26);
    *((_BYTE *)a4 + v10[9]) = 0;
    v21 = a1;
    v22 = v27;
    TetraRatchetState.init(asSenderWithRemoteTetraRegistration:sessionDST:)(v21, v28, v29, v27);
    outlined init with take of TetraRatchetState(v22, (uint64_t)a4 + v10[5]);
    v23 = *(_DWORD *)&v21[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion];

    if (v23 >= 0xD)
      v24 = 13;
    else
      v24 = v23;
    *a4 = v24;
  }
}

unint64_t TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t result;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v2 + *(int *)(type metadata accessor for TetraSessionState() + 20);
  v9 = *(_QWORD *)(v8 + *(int *)(type metadata accessor for TetraRatchetState(0) + 20));
  v13[2] = a1;
  swift_bridgeObjectRetain();
  result = (unint64_t)specialized _ArrayProtocol.filter(_:)(partial apply for closure #1 in TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:), v13, v9);
  v11 = result;
  if (!(result >> 62))
  {
    v12 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_3;
LABEL_8:
    swift_bridgeObjectRelease();
    return v12 != 0;
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  v12 = result;
  if (!result)
    goto LABEL_8;
LABEL_3:
  if ((v11 & 0xC000000000000001) != 0)
  {
    MEMORY[0x20BD3B790](0, v11);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_6:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    type metadata accessor for SymmetricRatchet();
    specialized Dictionary.removeValue(forKey:)(a2, (uint64_t)v7);
    outlined destroy of TetraSessionStates?((uint64_t)v7, &demangling cache variable for type metadata for SymmetricKey?);
    swift_endAccess();
    swift_release();
    return v12 != 0;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v15;

  v2 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, *a1 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKey, v2);
  v6 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v8 = v7;
  v9 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v11 = v10;
  specialized static Data.== infix(_:_:)(v6, v8);
  v13 = v12;
  outlined consume of Data._Representation(v9, v11);
  outlined consume of Data._Representation(v6, v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v13 & 1;
}

uint64_t TetraSessionState.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20BB0B048 + 4 * byte_20BB42A90[a1]))(0x566E6F6973736573, 0xEE006E6F69737265);
}

uint64_t sub_20BB0B048()
{
  return 0x5374656863746172;
}

unint64_t sub_20BB0B068()
{
  return 0xD000000000000012;
}

uint64_t TetraSessionState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  __int128 v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraSessionState.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v9 = type metadata accessor for TetraSessionState();
    LOBYTE(v12) = 1;
    type metadata accessor for TetraRatchetState(0);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraRatchetState and conformance TetraRatchetState, type metadata accessor for TetraRatchetState, (uint64_t)&protocol conformance descriptor for TetraRatchetState);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    type metadata accessor for P256.Signing.PublicKey();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type P256.Signing.PublicKey and conformance P256.Signing.PublicKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6A60], (uint64_t)&protocol conformance descriptor for P256.Signing.PublicKey);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    type metadata accessor for P256.KeyAgreement.PublicKey();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey and conformance P256.KeyAgreement.PublicKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC68D0], (uint64_t)&protocol conformance descriptor for P256.KeyAgreement.PublicKey);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v12 = *(_OWORD *)(v3 + *(int *)(v9 + 32));
    v11[15] = 4;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TetraSessionState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  __int128 v40;
  char v41;

  v29 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for P256.Signing.PublicKey();
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v31 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TetraRatchetState(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraSessionState.CodingKeys>);
  v10 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v11 = type metadata accessor for TetraSessionState();
  v37 = MEMORY[0x24BDAC7A8](v11);
  v38 = (_DWORD *)((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (char *)v38 + *(int *)(v37 + 28);
  v14 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v36 = (uint64_t)v13;
  v15(v13, 1, 1, v14);
  v16 = a1[3];
  v35 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys();
  v17 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    v20 = v36;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);
    return outlined destroy of TetraSessionStates?(v20, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  }
  else
  {
    v28 = v14;
    v18 = v31;
    v39 = v10;
    LOBYTE(v40) = 0;
    v19 = KeyedDecodingContainer.decode(_:forKey:)();
    v21 = (uint64_t)v38;
    *v38 = v19;
    LOBYTE(v40) = 1;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraRatchetState and conformance TetraRatchetState, type metadata accessor for TetraRatchetState, (uint64_t)&protocol conformance descriptor for TetraRatchetState);
    v22 = (uint64_t)v9;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v23 = (int *)v37;
    outlined init with take of TetraRatchetState(v22, v21 + *(int *)(v37 + 20));
    LOBYTE(v40) = 2;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type P256.Signing.PublicKey and conformance P256.Signing.PublicKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6A60], (uint64_t)&protocol conformance descriptor for P256.Signing.PublicKey);
    v24 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v25 = v36;
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v21 + v23[6], v18, v24);
    LOBYTE(v40) = 3;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey and conformance P256.KeyAgreement.PublicKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC68D0], (uint64_t)&protocol conformance descriptor for P256.KeyAgreement.PublicKey);
    v26 = (uint64_t)v30;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of P256.KeyAgreement.PublicKey?(v26, v25);
    v41 = 4;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)(v21 + v23[8]) = v40;
    LOBYTE(v40) = 5;
    LOBYTE(v26) = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(_QWORD, uint64_t))(v39 + 8))(0, v32);
    *(_BYTE *)(v21 + v23[9]) = v26 & 1;
    outlined init with copy of TetraSessionState(v21, v29);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);
    return outlined destroy of TetraRatchetOuterMessage(v21, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraSessionState.CodingKeys()
{
  unsigned __int8 *v0;

  return TetraSessionState.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraSessionState.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TetraSessionState.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TetraSessionState.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraSessionState.CodingKeys()
{
  lazy protocol witness table accessor for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraSessionState.CodingKeys()
{
  lazy protocol witness table accessor for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraSessionState@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraSessionState.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraSessionState(_QWORD *a1)
{
  return TetraSessionState.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraSessionState.CodingKeys, &unk_24C4BE3F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraSessionState.CodingKeys, &unk_24C4BE3F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraSessionState.CodingKeys, &unk_24C4BE3F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraSessionState.CodingKeys, &unk_24C4BE3F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionState.CodingKeys and conformance TetraSessionState.CodingKeys);
  }
  return result;
}

uint64_t outlined init with take of TetraRatchetState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraRatchetState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of TetraSessionState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraSessionState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized static TetraSessionState.== infix(_:_:)(_DWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  char v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;

  v4 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v65 = *(_QWORD *)(v4 - 8);
  v66 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v63 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  MEMORY[0x24BDAC7A8](v6);
  v64 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (P256.KeyAgreement.PublicKey?, P256.KeyAgreement.PublicKey?));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for TetraSessionState();
  v11 = MEMORY[0x24BDAC7A8](v67);
  v70 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v69 = (uint64_t)&v61 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v61 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v61 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v61 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v61 - v24;
  v26 = *a1;
  v27 = *a2;
  v68 = a1;
  outlined init with copy of TetraSessionState((uint64_t)a1, (uint64_t)&v61 - v24);
  v28 = (uint64_t)a2;
  outlined init with copy of TetraSessionState((uint64_t)a2, (uint64_t)v23);
  if (v26 != v27)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    v37 = (uint64_t)v68;
    outlined init with copy of TetraSessionState((uint64_t)v68, (uint64_t)v20);
    outlined init with copy of TetraSessionState((uint64_t)a2, (uint64_t)v17);
    goto LABEL_8;
  }
  v61 = v8;
  v62 = v10;
  v29 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v31 = v30;
  v32 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v34 = v33;
  specialized static Data.== infix(_:_:)(v29, v31);
  v36 = v35;
  outlined consume of Data._Representation(v32, v34);
  outlined consume of Data._Representation(v29, v31);
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  v37 = (uint64_t)v68;
  outlined init with copy of TetraSessionState((uint64_t)v68, (uint64_t)v20);
  outlined init with copy of TetraSessionState(v28, (uint64_t)v17);
  if ((v36 & 1) == 0)
  {
LABEL_8:
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    v40 = v69;
    outlined init with copy of TetraSessionState(v37, v69);
    v41 = v70;
    outlined init with copy of TetraSessionState(v28, v70);
    goto LABEL_9;
  }
  specialized static Data.== infix(_:_:)(*(_QWORD *)&v20[*(int *)(v67 + 32)], *(_QWORD *)&v20[*(int *)(v67 + 32) + 8]);
  v39 = v38;
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  v40 = v69;
  outlined init with copy of TetraSessionState(v37, v69);
  v41 = v70;
  outlined init with copy of TetraSessionState(v28, v70);
  if ((v39 & 1) == 0)
  {
LABEL_9:
    outlined destroy of TetraRatchetOuterMessage(v41, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    outlined destroy of TetraRatchetOuterMessage(v40, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
LABEL_10:
    v49 = 0;
    return v49 & 1;
  }
  v42 = *(int *)(v67 + 28);
  v43 = v41 + v42;
  v44 = (uint64_t)v62;
  v45 = (uint64_t)&v62[*(int *)(v61 + 48)];
  outlined init with copy of P256.KeyAgreement.PublicKey?(v40 + v42, (uint64_t)v62);
  outlined init with copy of P256.KeyAgreement.PublicKey?(v43, v45);
  v47 = v65;
  v46 = v66;
  v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
  if (v48(v44, 1, v66) != 1)
  {
    v51 = (uint64_t)v64;
    outlined init with copy of P256.KeyAgreement.PublicKey?(v44, (uint64_t)v64);
    if (v48(v45, 1, v46) != 1)
    {
      v52 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v63, v45, v46);
      v53 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      v55 = v54;
      v56 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      v58 = v57;
      specialized static Data.== infix(_:_:)(v53, v55);
      v49 = v59;
      outlined consume of Data._Representation(v56, v58);
      outlined consume of Data._Representation(v53, v55);
      v60 = *(void (**)(char *, uint64_t))(v47 + 8);
      v60(v52, v46);
      outlined destroy of TetraRatchetOuterMessage(v70, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      outlined destroy of TetraRatchetOuterMessage(v40, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      v60(v64, v46);
      outlined destroy of TetraSessionStates?(v44, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
      return v49 & 1;
    }
    outlined destroy of TetraRatchetOuterMessage(v41, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    outlined destroy of TetraRatchetOuterMessage(v40, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v51, v46);
    goto LABEL_14;
  }
  outlined destroy of TetraRatchetOuterMessage(v41, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  outlined destroy of TetraRatchetOuterMessage(v40, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  if (v48(v45, 1, v46) != 1)
  {
LABEL_14:
    outlined destroy of TetraSessionStates?((uint64_t)v62, &demangling cache variable for type metadata for (P256.KeyAgreement.PublicKey?, P256.KeyAgreement.PublicKey?));
    goto LABEL_10;
  }
  outlined destroy of TetraSessionStates?((uint64_t)v62, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  v49 = 1;
  return v49 & 1;
}

uint64_t outlined init with copy of P256.KeyAgreement.PublicKey?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:)(_QWORD *a1)
{
  return closure #1 in TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:)(a1) & 1;
}

uint64_t getEnumTagSinglePayload for TetraSessionState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TetraSessionState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_20BB0C0AC + 4 * byte_20BB42A9B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_20BB0C0E0 + 4 * byte_20BB42A96[v4]))();
}

uint64_t sub_20BB0C0E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB0C0E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BB0C0F0);
  return result;
}

uint64_t sub_20BB0C0FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BB0C104);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_20BB0C108(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB0C110(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TetraSessionState.CodingKeys()
{
  return &unk_24C4BE3F8;
}

uint64_t specialized TetraSessionState.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x566E6F6973736573 && a2 == 0xEE006E6F69737265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5374656863746172 && a2 == 0xEC00000065746174
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000020BB486C0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000020BB486E0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000020BB48700
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000020BB48720)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t type metadata instantiation function for HKDFRatchet()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for HKDFRatchet(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for HKDFRatchet(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for HKDFRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  outlined copy of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for HKDFRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of Data._Representation(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  outlined consume of Data._Representation(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  outlined copy of Data._Representation(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  outlined consume of Data._Representation(v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  return a1;
}

uint64_t assignWithTake for HKDFRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of Data._Representation(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for HKDFRatchet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for HKDFRatchet(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

uint64_t type metadata accessor for HKDFRatchet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for HKDFRatchet);
}

uint64_t protocol witness for SymmetricRatchetStep.ratchet(_:) in conformance HKDFRatchet<A>(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  _QWORD v45[2];
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;

  v55 = a5;
  v57 = a3;
  v48 = a1;
  v49 = a2;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SymmetricKey, UInt64));
  v7 = MEMORY[0x24BDAC7A8](v54);
  v47 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v46 = (char *)v45 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v56 = (char *)v45 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v59 = (char *)v45 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v45 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)v45 - v22;
  v24 = *v5;
  v25 = v5[2];
  v52 = v5[1];
  v53 = v24;
  v26 = v5[4];
  v50 = v5[3];
  v51 = v26;
  v27 = *(int *)(v21 + 48);
  v28 = type metadata accessor for SymmetricKey();
  v58 = *(_QWORD **)(v28 - 8);
  v29 = (void (*)(char *, uint64_t, uint64_t))v58[2];
  v29(v23, v57, v28);
  v57 = v27;
  *(_QWORD *)&v23[v27] = a4;
  v30 = *(int *)(v14 + 48);
  v29(v20, (uint64_t)v23, v28);
  *(_QWORD *)&v20[v30] = a4;
  result = outlined destroy of (key: SymmetricKey, index: UInt64)((uint64_t)v20);
  if (a4 == -1)
  {
    __break(1u);
  }
  else
  {
    v32 = *(int *)(v14 + 48);
    v29(v17, (uint64_t)v23, v28);
    *(_QWORD *)&v17[v32] = a4;
    v33 = SymmetricKey.bitCount.getter();
    v45[0] = v58[1];
    ((void (*)(char *, uint64_t))v45[0])(v17, v28);
    v45[1] = v33 / 8;
    v60 = v25;
    v61 = v50;
    v34 = *(int *)(v54 + 48);
    v51 = v14;
    v35 = *(_QWORD *)(v55 + 24);
    v54 = v34;
    v55 = v35;
    lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey();
    lazy protocol witness table accessor for type Data and conformance Data();
    v36 = v59;
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    v37 = *(int *)(v51 + 48);
    v29(v17, (uint64_t)v23, v28);
    v38 = v57;
    v39 = *(_QWORD *)&v23[v57];
    *(_QWORD *)&v17[v37] = v39;
    *(_QWORD *)&v36[v54] = v39;
    ((void (*)(char *, uint64_t))v45[0])(v17, v28);
    v60 = v53;
    v61 = v52;
    v40 = v56;
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    v41 = *(_QWORD *)&v23[v38];
    result = outlined destroy of (key: SymmetricKey, index: UInt64)((uint64_t)v23);
    if (v41 != -1)
    {
      v42 = (void (*)(char *, char *, uint64_t))v58[4];
      v43 = v46;
      v42(v46, v59, v28);
      v42(v48, v43, v28);
      v44 = v47;
      v42(v47, v40, v28);
      v42(v49, v44, v28);
      return v39;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of (key: SymmetricKey, index: UInt64)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SymmetricKey and conformance SymmetricKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey;
  if (!lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey)
  {
    v1 = type metadata accessor for SymmetricKey();
    result = MEMORY[0x20BD3C414](MEMORY[0x24BDC6398], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureEnclave.Kyber1024()
{
  return &type metadata for SecureEnclave.Kyber1024;
}

uint64_t *initializeBufferWithCopyOfBuffer for SecureEnclave.Kyber1024.PrivateKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C68]);
}

void destroy for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2)
{
  destroy for SecureEnclave.Kyber1024.PrivateKey(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C68]);
}

uint64_t initializeWithCopy for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C68]);
}

uint64_t assignWithCopy for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C68]);
}

uint64_t initializeWithTake for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C68]);
}

uint64_t assignWithTake for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C68]);
}

uint64_t getEnumTagSinglePayload for SecureEnclave.Kyber1024.PrivateKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB0CB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C68]);
}

uint64_t storeEnumTagSinglePayload for SecureEnclave.Kyber1024.PrivateKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB0CB78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C68]);
}

uint64_t type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for SecureEnclave.Kyber1024.PrivateKey);
}

uint64_t type metadata completion function for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6C68]);
}

ValueMetadata *type metadata accessor for SecureEnclave.Kyber768()
{
  return &type metadata for SecureEnclave.Kyber768;
}

uint64_t *initializeBufferWithCopyOfBuffer for SecureEnclave.Kyber768.PrivateKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C08]);
}

uint64_t *initializeBufferWithCopyOfBuffer for SecureEnclave.Kyber1024.PrivateKey(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v8 = a4(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = *(int *)(a3 + 20);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = *v11;
    v13 = v11[1];
    outlined copy of Data._Representation(*v11, v13);
    *v10 = v12;
    v10[1] = v13;
    v14 = *(int *)(a3 + 24);
    v15 = *(void **)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v15;
    v16 = v15;
  }
  return a1;
}

void destroy for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2)
{
  destroy for SecureEnclave.Kyber1024.PrivateKey(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C08]);
}

void destroy for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));

}

uint64_t initializeWithCopy for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C08]);
}

uint64_t initializeWithCopy for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;

  v7 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = *v10;
  v12 = v10[1];
  outlined copy of Data._Representation(*v10, v12);
  *v9 = v11;
  v9[1] = v12;
  v13 = *(int *)(a3 + 24);
  v14 = *(void **)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v14;
  v15 = v14;
  return a1;
}

uint64_t assignWithCopy for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C08]);
}

uint64_t assignWithCopy for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;

  v7 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(a1, a2, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = *v10;
  v12 = v10[1];
  outlined copy of Data._Representation(*v10, v12);
  v13 = *v9;
  v14 = v9[1];
  *v9 = v11;
  v9[1] = v12;
  outlined consume of Data._Representation(v13, v14);
  v15 = *(int *)(a3 + 24);
  v16 = *(void **)(a2 + v15);
  v17 = *(void **)(a1 + v15);
  *(_QWORD *)(a1 + v15) = v16;
  v18 = v16;

  return a1;
}

uint64_t initializeWithTake for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithTake for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C08]);
}

uint64_t initializeWithTake for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;

  v7 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
  v8 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C08]);
}

uint64_t assignWithTake for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;

  v7 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(a1, a2, v7);
  v8 = *(int *)(a3 + 20);
  v9 = *(_QWORD *)(a1 + v8);
  v10 = *(_QWORD *)(a1 + v8 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  outlined consume of Data._Representation(v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = *(void **)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);

  return a1;
}

uint64_t getEnumTagSinglePayload for SecureEnclave.Kyber768.PrivateKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB0CF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C08]);
}

uint64_t storeEnumTagSinglePayload for SecureEnclave.Kyber768.PrivateKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB0CF28(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C08]);
}

uint64_t type metadata accessor for SecureEnclave.Kyber768.PrivateKey(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for SecureEnclave.Kyber768.PrivateKey);
}

uint64_t type metadata completion function for SecureEnclave.Kyber768.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for SecureEnclave.Kyber1024.PrivateKey(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6C08]);
}

uint64_t type metadata completion function for SecureEnclave.Kyber1024.PrivateKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t SecureEnclave.Kyber1024.PrivateKey.init(dataRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenObject: TKClientTokenObject, dataRepresentation: Data, publicKey: Kyber1024.PublicKey));
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (uint64_t *)((char *)&v33 - v11);
  v40 = (uint64_t)&v33 + *(int *)(v10 + 64) - v11;
  v13 = static SecureEnclave.Kyber768.PrivateKey.tokenObject(with:authenticationContext:parameters:)(v40, a1, a2, 0, 0, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C68], (void (*)(id *, _QWORD, _QWORD))MEMORY[0x24BDC6C60], 127);
  if (v3)
    return outlined consume of Data._Representation(a1, a2);
  v17 = v13;
  v18 = v14;
  v19 = v15;
  outlined consume of Data._Representation(a1, a2);
  *v12 = v17;
  v12[1] = v18;
  v12[2] = v19;
  v20 = *(int *)(v6 + 64);
  v37 = 0;
  v21 = (char *)v9 + v20;
  *v9 = v17;
  v9[1] = v18;
  v9[2] = v19;
  v22 = type metadata accessor for Kyber1024.PublicKey();
  v23 = *(_QWORD **)(v22 - 8);
  v36 = (void (*)(char *, uint64_t, uint64_t))v23[2];
  v36(v21, v40, v22);
  v39 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v24 = (uint64_t *)(v41 + *(int *)(v39 + 20));
  *v24 = v18;
  v24[1] = v19;
  outlined copy of Data._Representation(v18, v19);
  v38 = (void (*)(char *, uint64_t))v23[1];
  v38(v21, v22);
  v25 = (char *)v9 + *(int *)(v6 + 64);
  v26 = *v12;
  v27 = v12[1];
  v34 = v12[2];
  v35 = v26;
  v28 = v40;
  v36(v25, v40, v22);
  v29 = (void (*)(uint64_t, char *, uint64_t))v23[4];
  v29(v41, v25, v22);
  v30 = (char *)v9 + *(int *)(v6 + 64);
  v32 = v34;
  v31 = v35;
  *v9 = v35;
  v9[1] = v27;
  v9[2] = v32;
  v29((uint64_t)v30, (char *)v28, v22);
  outlined consume of Data._Representation(v27, v32);
  *(_QWORD *)(v41 + *(int *)(v39 + 24)) = v31;
  return ((uint64_t (*)(char *, uint64_t))v38)(v30, v22);
}

uint64_t SecureEnclave.Kyber768.PrivateKey.init(dataRepresentation:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v41 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenObject: TKClientTokenObject, dataRepresentation: Data, publicKey: Kyber768.PublicKey));
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (uint64_t *)((char *)&v33 - v11);
  v40 = (uint64_t)&v33 + *(int *)(v10 + 64) - v11;
  v13 = static SecureEnclave.Kyber768.PrivateKey.tokenObject(with:authenticationContext:parameters:)(v40, a1, a2, 0, 0, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C08], (void (*)(id *, _QWORD, _QWORD))MEMORY[0x24BDC6C00], 62);
  if (v3)
    return outlined consume of Data._Representation(a1, a2);
  v17 = v13;
  v18 = v14;
  v19 = v15;
  outlined consume of Data._Representation(a1, a2);
  *v12 = v17;
  v12[1] = v18;
  v12[2] = v19;
  v20 = *(int *)(v6 + 64);
  v37 = 0;
  v21 = (char *)v9 + v20;
  *v9 = v17;
  v9[1] = v18;
  v9[2] = v19;
  v22 = type metadata accessor for Kyber768.PublicKey();
  v23 = *(_QWORD **)(v22 - 8);
  v36 = (void (*)(char *, uint64_t, uint64_t))v23[2];
  v36(v21, v40, v22);
  v39 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v24 = (uint64_t *)(v41 + *(int *)(v39 + 20));
  *v24 = v18;
  v24[1] = v19;
  outlined copy of Data._Representation(v18, v19);
  v38 = (void (*)(char *, uint64_t))v23[1];
  v38(v21, v22);
  v25 = (char *)v9 + *(int *)(v6 + 64);
  v26 = *v12;
  v27 = v12[1];
  v34 = v12[2];
  v35 = v26;
  v28 = v40;
  v36(v25, v40, v22);
  v29 = (void (*)(uint64_t, char *, uint64_t))v23[4];
  v29(v41, v25, v22);
  v30 = (char *)v9 + *(int *)(v6 + 64);
  v32 = v34;
  v31 = v35;
  *v9 = v35;
  v9[1] = v27;
  v9[2] = v32;
  v29((uint64_t)v30, (char *)v28, v22);
  outlined consume of Data._Representation(v27, v32);
  *(_QWORD *)(v41 + *(int *)(v39 + 24)) = v31;
  return ((uint64_t (*)(char *, uint64_t))v38)(v30, v22);
}

uint64_t one-time initialization function for SEPisAvailable()
{
  uint64_t result;

  result = static SecureEnclave.isAvailable.getter();
  static MPStaticProperties.SEPisAvailable = result & 1;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CryptoTokenKitError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CryptoTokenKitError()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CryptoTokenKitError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void one-time initialization function for token()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  v3 = objc_allocWithZone(MEMORY[0x24BDC6C88]);
  v4 = (void *)MEMORY[0x20BD3B538](v0, v2);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithTokenID_, v4);

  static SecureEnclave.token = (uint64_t)v5;
}

uint64_t SecureEnclave.Kyber768.PrivateKey.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenObject: TKClientTokenObject, dataRepresentation: Data, publicKey: Kyber768.PublicKey));
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (uint64_t *)((char *)&v31 - v8);
  v10 = (char *)&v31 + *(int *)(v7 + 64) - v8;
  result = static SecureEnclave.Kyber768.PrivateKey.generateKey(authContext:)((uint64_t)v10, 0, (id)0x300, (void (*)(id *, _QWORD, _QWORD))MEMORY[0x24BDC6C00]);
  if (!v1)
  {
    v14 = v12;
    v15 = v13;
    *v9 = result;
    v9[1] = v12;
    v9[2] = v13;
    v16 = *(int *)(v3 + 64);
    v32 = v10;
    v17 = (char *)v6 + v16;
    *v6 = result;
    v6[1] = v12;
    v6[2] = v13;
    v37 = 0;
    v18 = type metadata accessor for Kyber768.PublicKey();
    v19 = a1;
    v35 = a1;
    v20 = v18;
    v34 = *(_QWORD *)(v18 - 8);
    v36 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v21 = v32;
    v36(v17, v32, v18);
    v39 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    v22 = (uint64_t *)(v19 + *(int *)(v39 + 20));
    *v22 = v14;
    v22[1] = v15;
    outlined copy of Data._Representation(v14, v15);
    v23 = v34;
    v38 = *(void (**)(char *, uint64_t))(v34 + 8);
    v38(v17, v20);
    v24 = (char *)v6 + *(int *)(v3 + 64);
    v25 = *v9;
    v33 = v9[1];
    v26 = v9[2];
    v36(v24, v21, v20);
    v27 = *(void (**)(uint64_t, char *, uint64_t))(v23 + 32);
    v28 = v35;
    v27(v35, v24, v20);
    v29 = (char *)v6 + *(int *)(v3 + 64);
    v30 = v33;
    *v6 = v25;
    v6[1] = v30;
    v6[2] = v26;
    v27((uint64_t)v29, v21, v20);
    outlined consume of Data._Representation(v30, v26);
    *(_QWORD *)(v28 + *(int *)(v39 + 24)) = v25;
    return ((uint64_t (*)(char *, uint64_t))v38)(v29, v20);
  }
  return result;
}

uint64_t static SecureEnclave.Kyber768.PrivateKey.generateKey(authContext:)(uint64_t a1, void *a2)
{
  return static SecureEnclave.Kyber768.PrivateKey.generateKey(authContext:)(a1, a2, (id)0x300, (void (*)(id *, _QWORD, _QWORD))MEMORY[0x24BDC6C00]);
}

uint64_t static SecureEnclave.Kyber768.PrivateKey.tokenObject(with:authenticationContext:parameters:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return static SecureEnclave.Kyber768.PrivateKey.tokenObject(with:authenticationContext:parameters:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C08], (void (*)(id *, _QWORD, _QWORD))MEMORY[0x24BDC6C00], 62);
}

unint64_t lazy protocol witness table accessor for type CryptoTokenKitError and conformance CryptoTokenKitError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CryptoTokenKitError and conformance CryptoTokenKitError;
  if (!lazy protocol witness table cache variable for type CryptoTokenKitError and conformance CryptoTokenKitError)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for CryptoTokenKitError, &type metadata for CryptoTokenKitError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CryptoTokenKitError and conformance CryptoTokenKitError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CryptoTokenKitError and conformance CryptoTokenKitError;
  if (!lazy protocol witness table cache variable for type CryptoTokenKitError and conformance CryptoTokenKitError)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for CryptoTokenKitError, &type metadata for CryptoTokenKitError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CryptoTokenKitError and conformance CryptoTokenKitError);
  }
  return result;
}

void *closure #1 in SecureEnclave.Kyber768.PrivateKey.decapsulate(_:)(void *a1)
{
  return closure #1 in SecureEnclave.Kyber768.PrivateKey.decapsulate(_:)(a1);
}

{
  NSData v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  Class v6;
  id v7;
  id v8;
  void *v9;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2.super.isa = Data._bridgeToObjectiveC()().super.isa;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_20BB404E0;
  if (!*MEMORY[0x24BDE9310])
    __break(1u);
  *(_QWORD *)(v3 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v3 + 40) = v4;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v6 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11[0] = 0;
  v7 = objc_msgSend(a1, sel_decapsulate_algorithms_parameters_error_, v2.super.isa, isa, v6, v11);

  v8 = v11[0];
  if (v7)
  {
    v9 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v9 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v9;
}

uint64_t SecureEnclave.Kyber1024.PrivateKey.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, char *, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tokenObject: TKClientTokenObject, dataRepresentation: Data, publicKey: Kyber1024.PublicKey));
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (uint64_t *)((char *)&v31 - v8);
  v10 = (char *)&v31 + *(int *)(v7 + 64) - v8;
  result = static SecureEnclave.Kyber768.PrivateKey.generateKey(authContext:)((uint64_t)v10, 0, (id)0x400, (void (*)(id *, _QWORD, _QWORD))MEMORY[0x24BDC6C60]);
  if (!v1)
  {
    v14 = v12;
    v15 = v13;
    *v9 = result;
    v9[1] = v12;
    v9[2] = v13;
    v16 = *(int *)(v3 + 64);
    v32 = v10;
    v17 = (char *)v6 + v16;
    *v6 = result;
    v6[1] = v12;
    v6[2] = v13;
    v37 = 0;
    v18 = type metadata accessor for Kyber1024.PublicKey();
    v19 = a1;
    v35 = a1;
    v20 = v18;
    v34 = *(_QWORD *)(v18 - 8);
    v36 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    v21 = v32;
    v36(v17, v32, v18);
    v39 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    v22 = (uint64_t *)(v19 + *(int *)(v39 + 20));
    *v22 = v14;
    v22[1] = v15;
    outlined copy of Data._Representation(v14, v15);
    v23 = v34;
    v38 = *(void (**)(char *, uint64_t))(v34 + 8);
    v38(v17, v20);
    v24 = (char *)v6 + *(int *)(v3 + 64);
    v25 = *v9;
    v33 = v9[1];
    v26 = v9[2];
    v36(v24, v21, v20);
    v27 = *(void (**)(uint64_t, char *, uint64_t))(v23 + 32);
    v28 = v35;
    v27(v35, v24, v20);
    v29 = (char *)v6 + *(int *)(v3 + 64);
    v30 = v33;
    *v6 = v25;
    v6[1] = v30;
    v6[2] = v26;
    v27((uint64_t)v29, v21, v20);
    outlined consume of Data._Representation(v30, v26);
    *(_QWORD *)(v28 + *(int *)(v39 + 24)) = v25;
    return ((uint64_t (*)(char *, uint64_t))v38)(v29, v20);
  }
  return result;
}

uint64_t static SecureEnclave.Kyber1024.PrivateKey.generateKey(authContext:)(uint64_t a1, void *a2)
{
  return static SecureEnclave.Kyber768.PrivateKey.generateKey(authContext:)(a1, a2, (id)0x400, (void (*)(id *, _QWORD, _QWORD))MEMORY[0x24BDC6C60]);
}

uint64_t static SecureEnclave.Kyber768.PrivateKey.generateKey(authContext:)(uint64_t a1, void *a2, id a3, void (*a4)(id *, _QWORD, _QWORD))
{
  id v6;
  unint64_t v7;
  id v8;
  id v9;
  Class isa;
  id v11;
  id v12;
  uint64_t inited;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  Class v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t result;
  id v29;
  uint64_t v30;
  id v32[26];

  v32[24] = *(id *)MEMORY[0x24BDAC8D0];
  if (one-time initialization token for token != -1)
    swift_once();
  v6 = (id)static SecureEnclave.token;
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v7);
  swift_bridgeObjectRelease();
  v32[0] = 0;
  v8 = objc_allocWithZone(MEMORY[0x24BDC6C90]);
  v9 = a2;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v8, sel_initWithToken_LAContext_parameters_error_, v6, v9, isa, v32);

  if (v32[0])
  {
    v12 = v32[0];
    swift_willThrow();

LABEL_9:
    return (uint64_t)a3;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20BB40570;
  v32[0] = *(id *)MEMORY[0x24BDE9048];
  v14 = v32[0];
  type metadata accessor for CFStringRef(0);
  v16 = v15;
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  v17 = v14;
  AnyHashable.init<A>(_:)();
  *(_QWORD *)(inited + 96) = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 72) = a3;
  v32[0] = *(id *)MEMORY[0x24BDE9050];
  v18 = v32[0];
  AnyHashable.init<A>(_:)();
  if (!*MEMORY[0x24BDE9078])
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v19 = (id)*MEMORY[0x24BDE9078];

  *(_QWORD *)(inited + 168) = v16;
  *(_QWORD *)(inited + 144) = v19;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  v20 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v32[0] = 0;
  a3 = objc_msgSend(v11, sel_createObjectWithAttributes_error_, v20, v32);

  if (!a3)
  {
    v29 = v32[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_9;
  }
  v21 = v32[0];
  v22 = objc_msgSend(a3, sel_objectID);
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  v23 = objc_msgSend(a3, sel_publicKey);
  if (!v23)
    goto LABEL_12;
  v24 = v23;
  v25 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = v26;

  v32[0] = v25;
  v32[1] = v27;
  a4(v32, MEMORY[0x24BDCDDE8], MEMORY[0x24BDCDDC8]);
  if (!v30)
    goto LABEL_9;
LABEL_13:
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t static SecureEnclave.Kyber1024.PrivateKey.tokenObject(with:authenticationContext:parameters:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5)
{
  return static SecureEnclave.Kyber768.PrivateKey.tokenObject(with:authenticationContext:parameters:)(a1, a2, a3, a4, a5, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C68], (void (*)(id *, _QWORD, _QWORD))MEMORY[0x24BDC6C60], 127);
}

uint64_t static SecureEnclave.Kyber768.PrivateKey.tokenObject(with:authenticationContext:parameters:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5, uint64_t (*a6)(_QWORD), void (*a7)(id *, _QWORD, _QWORD), uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  unint64_t v17;
  id v18;
  id v19;
  Class isa;
  id v21;
  id v22;
  uint64_t result;
  Class v24;
  id v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  _QWORD v33[3];
  void (*v34)(id *, _QWORD, _QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38[3];

  v33[1] = a8;
  v34 = a7;
  v37 = a1;
  v38[2] = *(id *)MEMORY[0x24BDAC8D0];
  v12 = a6(0);
  v35 = *(_QWORD *)(v12 - 8);
  v36 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v33 - v13;
  if (one-time initialization token for token != -1)
    swift_once();
  v15 = (id)static SecureEnclave.token;
  v16 = (id)static SecureEnclave.token;
  if (a5)
    v17 = a5;
  else
    v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRetain();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v17);
  swift_bridgeObjectRelease();
  v38[0] = 0;
  v18 = objc_allocWithZone(MEMORY[0x24BDC6C90]);
  v19 = a4;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v18, sel_initWithToken_LAContext_parameters_error_, v15, v19, isa, v38);

  if (v38[0])
  {
    v22 = v38[0];
    swift_willThrow();

LABEL_8:
    return (uint64_t)v15;
  }
  v24 = Data._bridgeToObjectiveC()().super.isa;
  v38[0] = 0;
  v15 = objc_msgSend(v21, sel_objectForObjectID_error_, v24, v38);

  if (!v15)
  {
    v32 = v38[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_8;
  }
  v25 = v38[0];
  v26 = objc_msgSend(v15, sel_publicKey);
  if (!v26)
  {
    lazy protocol witness table accessor for type CryptoTokenKitError and conformance CryptoTokenKitError();
    swift_allocError();
    swift_willThrow();

    v21 = v15;
    goto LABEL_8;
  }
  v27 = v26;
  v28 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v30 = v29;

  v38[0] = v28;
  v38[1] = v30;
  outlined copy of Data._Representation((uint64_t)v28, (unint64_t)v30);
  v31 = v33[2];
  v34(v38, MEMORY[0x24BDCDDE8], MEMORY[0x24BDCDDC8]);
  if (!v31)
  {
    outlined consume of Data._Representation((uint64_t)v28, (unint64_t)v30);

    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v37, v14, v36);
    outlined copy of Data._Representation(a2, a3);
    return (uint64_t)v15;
  }
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for CFStringRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CryptoTokenKitError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20BB0E444 + 4 * byte_20BB42D00[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20BB0E464 + 4 * byte_20BB42D05[v4]))();
}

_BYTE *sub_20BB0E444(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20BB0E464(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20BB0E46C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20BB0E474(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20BB0E47C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20BB0E484(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CryptoTokenKitError()
{
  return &type metadata for CryptoTokenKitError;
}

SecAccessControlRef TetraRatchetState.init(asSenderWithRemoteTetraRegistration:sessionDST:)@<X0>(char *a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  void (*v39)(char *, char *, _QWORD *);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, _QWORD *);
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  SecAccessControlRef result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  SecKeyRef v74;
  uint64_t v75;
  SecKeyRef v76;
  uint64_t v77;
  SecKeyRef *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  unint64_t v101;
  void (*v102)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t, _QWORD *);
  void (*v116)(uint64_t, _QWORD *);
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  SecKeyRef *v128;
  char *v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t);
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  _QWORD *v144;

  v143 = a1;
  v130 = a3;
  v131 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x24BDAC7A8](v5);
  v124 = (char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  MEMORY[0x24BDAC7A8](v7);
  v125 = (uint64_t)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v9);
  v123 = (char *)&v109 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
  v11 = MEMORY[0x24BDAC7A8](v134);
  v119 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v126 = (char *)&v109 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  MEMORY[0x24BDAC7A8](v14);
  v132 = (char *)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for TetraECDHKey();
  v16 = MEMORY[0x24BDAC7A8](v127);
  v128 = (SecKeyRef *)((char *)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v16);
  v133 = (char *)&v109 - v18;
  v137 = type metadata accessor for TetraOutgoingKeyContent(0);
  v19 = MEMORY[0x24BDAC7A8](v137);
  v122 = (uint64_t)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v138 = (uint64_t)&v109 - v21;
  v144 = (_QWORD *)type metadata accessor for Kyber1024.PublicKey();
  v22 = *(v144 - 1);
  v23 = MEMORY[0x24BDAC7A8](v144);
  v129 = (char *)&v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v109 - v25;
  v27 = type metadata accessor for KEM.EncapsulationResult();
  v28 = *(_QWORD *)(v27 - 8);
  v135 = v27;
  v136 = v28;
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v109 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for SymmetricKey();
  v120 = *(_QWORD *)(v31 - 8);
  v121 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56);
  v121(a4, 1, 1, v31);
  v32 = type metadata accessor for TetraRatchetState(0);
  *(_DWORD *)(a4 + *(int *)(v32 + 28)) = 0;
  v33 = *(int *)(v32 + 32);
  v141 = a4;
  v34 = a4 + v33;
  v35 = type metadata accessor for Date();
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
  v140 = v34;
  v36(v34, 1, 1, v35);
  v37 = OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey;
  v38 = *(char **)&v143[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey];
  v139 = v22;
  v39 = *(void (**)(char *, char *, _QWORD *))(v22 + 16);
  v39(v26, &v38[OBJC_IVAR____TtC17MessageProtection22Kyber1024ObjCPublicKey_pubKey], v144);
  v40 = v38;
  v41 = v142;
  Kyber1024.PublicKey.encapsulate()();
  v142 = v41;
  if (v41)
  {
    (*(void (**)(char *, _QWORD *))(v139 + 8))(v26, v144);

    v42 = v141;
LABEL_13:
    v75 = v140;
    outlined destroy of TetraSessionStates?(v42, &demangling cache variable for type metadata for SymmetricKey?);
    return (SecAccessControlRef)outlined destroy of TetraSessionStates?(v75, &demangling cache variable for type metadata for Date?);
  }
  v114 = v37;
  v115 = (void (*)(char *, uint64_t, _QWORD *))v39;
  v110 = v36;
  v111 = v35;
  v113 = v32;
  v112 = v31;
  v43 = v143;
  v44 = *(void (**)(char *, _QWORD *))(v139 + 8);
  v44(v26, v144);

  v45 = KEM.EncapsulationResult.encapsulated.getter();
  v47 = v46;
  v48 = v137;
  v49 = v138;
  v50 = v138 + *(int *)(v137 + 20);
  v51 = type metadata accessor for TetraKEM768Key(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v50, 1, 1, v51);
  v52 = v49 + *(int *)(v48 + 24);
  v53 = type metadata accessor for TetraKEM1024Key(0);
  v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56);
  v117 = v52;
  v54(v52, 1, 1, v53);
  v55 = v49 + *(int *)(v48 + 28);
  *(_QWORD *)v55 = v45;
  *(_QWORD *)(v55 + 8) = v47;
  v137 = v45;
  v139 = v47;
  outlined copy of Data._Representation(v45, v47);
  v56 = (uint64_t)v30;
  v57 = v49;
  if (one-time initialization token for SEPisAvailable != -1)
    swift_once();
  v58 = v43;
  v116 = (void (*)(uint64_t, _QWORD *))v44;
  if (static MPStaticProperties.SEPisAvailable != 1)
  {
    v67 = v43;
    v68 = v57;
    v118 = v56;
    v69 = objc_msgSend((id)objc_opt_self(), sel_newCompactPrivateKey);
    v70 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v72 = v71;

    v73 = v142;
    v74 = specialized TetraECDHSecKey.init(aksBlob:)(v70, v72);
    if (v73)
    {
      outlined consume of Data._Representation(v70, v72);
      v66 = v135;
      v65 = v136;
      v56 = v118;
      v58 = v67;
      goto LABEL_12;
    }
    v76 = v74;
    outlined consume of Data._Representation(v70, v72);
    v77 = v127;
    v78 = v128;
    *v128 = v76;
    v79 = (char *)v78 + *(int *)(v77 + 20);
    v80 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v79, 1, 1, v80);
    v64 = (uint64_t)v133;
    v63 = v134;
LABEL_16:
    outlined init with take of TetraRatchetState((uint64_t)v78, v64, (uint64_t (*)(_QWORD))type metadata accessor for TetraECDHKey);
    v82 = v63;
    v83 = v68;
    outlined init with take of TetraRatchetState(v64, v68, (uint64_t (*)(_QWORD))type metadata accessor for TetraECDHKey);
    outlined consume of Data._Representation(v137, v139);
    v84 = (uint64_t)v126;
    v85 = (uint64_t)&v126[*(int *)(v82 + 48)];
    v86 = (uint64_t)&v67[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_ecdhPublicKey];
    v87 = *(_QWORD *)&v67[v114] + OBJC_IVAR____TtC17MessageProtection22Kyber1024ObjCPublicKey_pubKey;
    v88 = (uint64_t)v129;
    v89 = v144;
    v115(v129, v87, v144);
    v90 = v131(1);
    v92 = v91;
    v139 = v85;
    v93 = v86;
    v94 = v118;
    static TetraRatchetState.deriveRootAndChainKeyAsSender(theirECDHPublicKey:theirKyber1024Key:encapResult:ourOutgoingKeys:conversationDST:)(v84, v85, v93, v88, v118, v83, v90, v91);
    v142 = 0;
    outlined consume of Data._Representation(v90, v92);
    v116(v88, v89);
    v95 = v141;
    outlined destroy of TetraSessionStates?(v141, &demangling cache variable for type metadata for SymmetricKey?);
    v96 = v119;
    v97 = &v119[*(int *)(v134 + 48)];
    v118 = v94;
    v98 = v120;
    v99 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 16);
    v100 = v112;
    v99(v119, v84, v112);
    v101 = v139;
    v99(v97, v139, v100);
    v137 = *(_QWORD *)(v98 + 32);
    ((void (*)(uint64_t, char *, uint64_t))v137)(v95, v96, v100);
    v102 = v121;
    v121(v95, 0, 1, v100);
    v144 = *(_QWORD **)(v98 + 8);
    ((void (*)(char *, uint64_t))v144)(v97, v100);
    v103 = (uint64_t)v123;
    Date.init()();
    v110(v103, 0, 1, v111);
    outlined assign with take of SymmetricKey?(v103, v140, &demangling cache variable for type metadata for Date?);
    *(_QWORD *)(v95 + *(int *)(v113 + 20)) = MEMORY[0x24BEE4AF8];
    v104 = &v96[*(int *)(v134 + 48)];
    v99(v96, v84, v100);
    v99(v104, v101, v100);
    v105 = (uint64_t)v124;
    ((void (*)(char *, char *, uint64_t))v137)(v124, v104, v100);
    v102(v105, 0, 1, v100);
    v106 = v138;
    v107 = v122;
    outlined init with copy of TetraRatchetOuterMessage(v138, v122, type metadata accessor for TetraOutgoingKeyContent);
    v108 = v125;
    TetraOutgoingSymmetricRatchet.init(symmetricRatchetHead:outgoingPublicKeys:)(v105, v107, v125);

    outlined destroy of TetraSessionStates?(v84, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
    outlined destroy of TetraRatchetOuterMessage(v106, type metadata accessor for TetraOutgoingKeyContent);
    (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v118, v135);
    ((void (*)(char *, uint64_t))v144)(v96, v100);
    return (SecAccessControlRef)outlined init with take of TetraRatchetState(v108, v95 + *(int *)(v113 + 24), type metadata accessor for TetraOutgoingSymmetricRatchet);
  }
  v59 = v50;
  result = SecAccessControlCreateWithFlags(0, (CFTypeRef)*MEMORY[0x24BDE8F70], 0, 0);
  v61 = v142;
  if (result)
  {
    v62 = (uint64_t)v132;
    SecureEnclave.P256.KeyAgreement.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)();
    v64 = (uint64_t)v133;
    v63 = v134;
    if (v61)
    {
      v66 = v135;
      v65 = v136;
      v50 = v59;
LABEL_12:
      outlined consume of Data._Representation(v137, v139);
      outlined destroy of TetraSessionStates?(v50, &demangling cache variable for type metadata for TetraKEM768Key?);
      outlined destroy of TetraSessionStates?(v117, &demangling cache variable for type metadata for TetraKEM1024Key?);
      outlined consume of Data?(*(_QWORD *)v55, *(_QWORD *)(v55 + 8));

      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v56, v66);
      v42 = v141;
      goto LABEL_13;
    }
    v67 = v58;
    v68 = v57;
    v118 = v56;
    v81 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v62, 0, 1, v81);
    v78 = v128;
    outlined init with take of KEM.EncapsulationResult?(v62, (uint64_t)v128 + *(int *)(v127 + 20), &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    *v78 = 0;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

id TetraRatchetState.init(asReceiverWithFullPrekey:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  SecKeyRef *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  SecKeyRef v48;
  id result;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  void (*v72)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  void (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x24BDAC7A8](v4);
  v81 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  MEMORY[0x24BDAC7A8](v6);
  v82 = (uint64_t)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for TetraOutgoingKeyContent(0);
  v8 = MEMORY[0x24BDAC7A8](v78);
  v79 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v80 = (uint64_t)&v69 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v11);
  v75 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TetraKEM1024Key(0);
  v76 = *(_QWORD *)(v13 - 8);
  v77 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v87 = (uint64_t)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v88 = (uint64_t)&v69 - v16;
  v17 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v83 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TetraECDHKey();
  v21 = MEMORY[0x24BDAC7A8](v20);
  v74 = (uint64_t)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v25 = (SecKeyRef *)((char *)&v69 - v24);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v71 = (uint64_t)&v69 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v91 = (uint64_t *)((char *)&v69 - v28);
  v29 = type metadata accessor for SymmetricKey();
  v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v85 = v29;
  v84(a2, 1, 1);
  v30 = type metadata accessor for TetraRatchetState(0);
  *(_DWORD *)(a2 + *(int *)(v30 + 28)) = 0;
  v86 = v30;
  v31 = *(int *)(v30 + 32);
  v92 = a2;
  v32 = a2 + v31;
  v33 = type metadata accessor for Date();
  v34 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56);
  *(_QWORD *)&v89 = v32;
  v73 = v33;
  v72 = v34;
  ((void (*)(uint64_t, uint64_t, uint64_t))v34)(v32, 1, 1);
  v35 = objc_msgSend(a1, sel_isSEPKey);
  v36 = a1;
  v37 = objc_msgSend(a1, sel_keychainData);
  v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v40 = v39;

  if (v35)
  {
    v41 = v83;
    v42 = v90;
    SecureEnclave.P256.KeyAgreement.PrivateKey.init(dataRepresentation:authenticationContext:)();
    if (!v42)
    {
      v43 = *(int *)(v20 + 20);
      v44 = v91;
      v45 = (char *)v91 + v43;
      (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))((uint64_t)v91 + v43, v41, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v45, 0, 1, v17);
      *v44 = 0;
      goto LABEL_8;
    }
LABEL_6:

    outlined destroy of TetraSessionStates?(v92, &demangling cache variable for type metadata for SymmetricKey?);
    return (id)outlined destroy of TetraSessionStates?(v89, &demangling cache variable for type metadata for Date?);
  }
  v46 = (uint64_t)v25 + *(int *)(v20 + 20);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v46, 1, 1, v17);
  v47 = v90;
  v48 = specialized TetraECDHSecKey.init(aksBlob:)(v38, v40);
  outlined consume of Data._Representation(v38, v40);
  if (v47)
  {
    outlined destroy of TetraSessionStates?(v46, &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    goto LABEL_6;
  }
  *v25 = v48;
  v50 = v71;
  outlined init with take of TetraRatchetState((uint64_t)v25, v71, (uint64_t (*)(_QWORD))type metadata accessor for TetraECDHKey);
  outlined init with take of TetraRatchetState(v50, (uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for TetraECDHKey);
LABEL_8:
  v70 = v36;
  v90 = 0;
  result = objc_msgSend(v36, sel_tetraPrivateKey);
  if (result)
  {
    v51 = result;
    v52 = v88;
    outlined init with copy of TetraRatchetOuterMessage((uint64_t)result + OBJC_IVAR____TtC17MessageProtection23Kyber1024ObjCPrivateKey_privKey, v88, type metadata accessor for TetraKEM1024Key);

    v53 = v92;
    outlined destroy of TetraSessionStates?(v92, &demangling cache variable for type metadata for SymmetricKey?);
    v54 = v53;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v84)(v53, 1, 1, v85);
    v55 = (uint64_t)v75;
    Date.init()();
    v72(v55, 0, 1, v73);
    outlined assign with take of SymmetricKey?(v55, v89, &demangling cache variable for type metadata for Date?);
    *(_QWORD *)(v54 + *(int *)(v86 + 20)) = MEMORY[0x24BEE4AF8];
    v56 = v74;
    outlined init with copy of TetraRatchetOuterMessage((uint64_t)v91, v74, (uint64_t (*)(_QWORD))type metadata accessor for TetraECDHKey);
    outlined init with copy of TetraRatchetOuterMessage(v52, v87, type metadata accessor for TetraKEM1024Key);
    v58 = v78;
    v57 = (uint64_t)v79;
    v59 = (uint64_t)&v79[*(int *)(v78 + 20)];
    v60 = type metadata accessor for TetraKEM768Key(0);
    v61 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56);
    v61(v59, 1, 1, v60);
    v62 = v57 + *(int *)(v58 + 24);
    v63 = v77;
    v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56);
    v64(v62, 1, 1, v77);
    v65 = v57 + *(int *)(v58 + 28);
    v89 = xmmword_20BB407A0;
    *(_OWORD *)v65 = xmmword_20BB407A0;
    outlined init with take of TetraRatchetState(v56, v57, (uint64_t (*)(_QWORD))type metadata accessor for TetraECDHKey);
    outlined destroy of TetraSessionStates?(v59, &demangling cache variable for type metadata for TetraKEM768Key?);
    v61(v59, 1, 1, v60);
    outlined destroy of TetraSessionStates?(v62, &demangling cache variable for type metadata for TetraKEM1024Key?);
    outlined init with take of TetraRatchetState(v87, v62, type metadata accessor for TetraKEM1024Key);
    v64(v62, 0, 1, v63);
    outlined consume of Data?(*(_QWORD *)v65, *(_QWORD *)(v65 + 8));
    *(_OWORD *)v65 = v89;
    v66 = v80;
    outlined init with take of TetraRatchetState(v57, v80, type metadata accessor for TetraOutgoingKeyContent);
    v67 = (uint64_t)v81;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v84)(v81, 1, 1, v85);
    outlined init with copy of TetraRatchetOuterMessage(v66, v57, type metadata accessor for TetraOutgoingKeyContent);
    v68 = v82;
    TetraOutgoingSymmetricRatchet.init(symmetricRatchetHead:outgoingPublicKeys:)(v67, v57, v82);

    outlined destroy of TetraRatchetOuterMessage(v66, type metadata accessor for TetraOutgoingKeyContent);
    outlined destroy of TetraRatchetOuterMessage(v88, type metadata accessor for TetraKEM1024Key);
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v91, (uint64_t (*)(_QWORD))type metadata accessor for TetraECDHKey);
    return (id)outlined init with take of TetraRatchetState(v68, v92 + *(int *)(v86 + 24), type metadata accessor for TetraOutgoingSymmetricRatchet);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TetraRatchetState.sealMessage(message:authenticatedData:prekeyHash:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  _QWORD v76[2];
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v68 = a7;
  v69 = a8;
  v64 = a5;
  v65 = a6;
  v74 = (char *)a3;
  v75 = a4;
  v72 = a1;
  v73 = a2;
  v70 = a9;
  v71 = type metadata accessor for TetraRatchetOuterMessage();
  MEMORY[0x24BDAC7A8](v71);
  v67 = (uint64_t)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for TetraKEM768Key(0);
  v11 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for TetraRatchetState(0);
  v22 = v9;
  v23 = v9 + *(int *)(v21 + 24);
  v24 = v80;
  result = TetraOutgoingSymmetricRatchet.sealMessage(_:)(v72, v73, (uint64_t)v74, v75, v76);
  if (!v24)
  {
    v58 = v13;
    v73 = 0;
    v74 = v20;
    v62 = v18;
    v63 = v16;
    v72 = v17;
    v26 = v64;
    v27 = (int *)v71;
    v28 = v76[0];
    v29 = v76[1];
    v30 = *(int *)(v21 + 28);
    v31 = *(_DWORD *)(v22 + v30);
    if (v31 <= 0x63)
      *(_DWORD *)(v22 + v30) = v31 + 1;
    v59 = v77;
    v60 = v79;
    v61 = v78;
    v80 = v28;
    v75 = v29;
    outlined copy of Data._Representation(v28, v29);
    v32 = v23;
    TetraECDHKey.publicKey.getter();
    v33 = type metadata accessor for TetraOutgoingKeyContent(0);
    v34 = v23 + *(int *)(v33 + 20);
    v35 = v27;
    v36 = v26;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v34, 1, v66))
    {
      v37 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v63, 1, 1, v37);
    }
    else
    {
      v38 = v34;
      v39 = (uint64_t)v58;
      outlined init with copy of TetraRatchetOuterMessage(v38, (uint64_t)v58, type metadata accessor for TetraKEM768Key);
      v40 = (uint64_t)v63;
      TetraKEM768Key.publicKey.getter((uint64_t)v63);
      outlined destroy of TetraRatchetOuterMessage(v39, type metadata accessor for TetraKEM768Key);
      v37 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v40, 0, 1, v37);
    }
    v41 = v67;
    v42 = (uint64_t *)(v32 + *(int *)(v33 + 28));
    v43 = *v42;
    v44 = v42[1];
    v67 += v35[8];
    v45 = v67;
    type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v45, 1, 1, v37);
    v46 = v41 + v35[9];
    *(_OWORD *)v46 = xmmword_20BB407A0;
    v47 = v41 + v35[10];
    *(_OWORD *)v47 = xmmword_20BB407A0;
    v48 = (uint64_t)v74;
    v49 = v75;
    *(_QWORD *)(v41 + 8) = v80;
    *(_QWORD *)(v41 + 16) = v49;
    v50 = (uint64_t *)(v41 + v35[12]);
    v51 = v65;
    *v50 = v36;
    v50[1] = v51;
    *(_DWORD *)(v41 + 24) = v59;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v41 + v35[7], v48, v72);
    outlined copy of Data?(v43, v44);
    v52 = v36;
    v53 = v68;
    v54 = v69;
    outlined copy of Data?(v68, v69);
    outlined copy of Data._Representation(v52, v51);
    outlined assign with take of SymmetricKey?((uint64_t)v63, v67, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    outlined consume of Data?(*(_QWORD *)v46, *(_QWORD *)(v46 + 8));
    *(_QWORD *)v46 = v43;
    *(_QWORD *)(v46 + 8) = v44;
    outlined consume of Data?(*(_QWORD *)v47, *(_QWORD *)(v47 + 8));
    *(_QWORD *)v47 = v53;
    *(_QWORD *)(v47 + 8) = v54;
    v55 = v70;
    v56 = (_QWORD *)(v41 + *(int *)(v71 + 44));
    v57 = v60;
    *v56 = v61;
    v56[1] = v57;
    *(_DWORD *)v41 = 13;
    outlined init with take of TetraRatchetState(v41, v55, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    return outlined consume of Data._Representation(v80, v75);
  }
  return result;
}

NSObject *TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(uint64_t a1, NSObject *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  NSObject *v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *result;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  Swift::String v37;
  int v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  char v51;

  v6 = v5;
  v45 = type metadata accessor for TetraRatchetOuterMessage();
  v11 = MEMORY[0x24BDAC7A8](v45);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v42 - v14;
  v16 = *(_QWORD *)(v4 + *(int *)(type metadata accessor for TetraRatchetState(0) + 20));
  v46[2] = a1;
  swift_bridgeObjectRetain();
  v17 = v16;
  v18 = v6;
  v19 = (unint64_t)specialized _ArrayProtocol.filter(_:)(partial apply for closure #1 in TetraRatchetState.openMessage(_:sessionDST:didRatchet:), v46, v17);
  v20 = v18;
  if (!(v19 >> 62))
  {
    result = *(NSObject **)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (result)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    TetraRatchetState.ratchetedOpen(message:sessionDST:didRatchet:)(a1, a2, a3, a4);
    if (!v18)
      return v41;
    return v20;
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_17;
LABEL_3:
  v43 = v13;
  v44 = v15;
  if ((v19 & 0xC000000000000001) != 0)
  {
    MEMORY[0x20BD3B790](0, v19);
  }
  else
  {
    if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_22;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(a1 + 8);
  v23 = *(_QWORD *)(a1 + 16);
  v24 = *(_DWORD *)(a1 + 24);
  v25 = (uint64_t *)(a1 + *(int *)(v45 + 44));
  v27 = *v25;
  v26 = v25[1];
  swift_beginAccess();
  v28 = TetraIncomingSymmetricRatchet.openMessage(_:messageIndex:messageKeyIndicator:discardMessageKey:)(v22, v23, v24, v27, v26, 0);
  if (!v18)
  {
    v20 = v28;
    swift_endAccess();
    swift_release();
    return v20;
  }
  swift_endAccess();
  v49 = v18;
  v29 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast() || v51 != 3)
  {
LABEL_15:
    swift_release();

    return v20;
  }

  v30 = static os_log_type_t.error.getter();
  result = MessageProtectionLog();
  if (result)
  {
    v20 = result;
    v31 = (uint64_t)v44;
    outlined init with copy of TetraRatchetOuterMessage(a1, (uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    v32 = (uint64_t)v43;
    outlined init with copy of TetraRatchetOuterMessage(a1, (uint64_t)v43, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    if (os_log_type_enabled(v20, v30))
    {
      v33 = swift_slowAlloc();
      v42 = swift_slowAlloc();
      v48 = v42;
      *(_DWORD *)v33 = 136315394;
      v50 = v30;
      v34 = P256.KeyAgreement.PublicKey.compressedRepresentation.getter();
      v36 = v35;
      v37 = Data.base64EncodedString(options:)(0);
      outlined consume of Data._Representation(v34, v36);
      v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37._countAndFlagsBits, (unint64_t)v37._object, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v44, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
      *(_WORD *)(v33 + 12) = 1024;
      v38 = *(_DWORD *)(v32 + 24);
      outlined destroy of TetraRatchetOuterMessage(v32, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
      LODWORD(v47) = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20BABB000, v20, (os_log_type_t)v50, "Out of sync ratchet upon unsealing receiving chain. ECDH: %s Index: %u", (uint8_t *)v33, 0x12u);
      v39 = v42;
      swift_arrayDestroy();
      MEMORY[0x20BD3C498](v39, -1, -1);
      MEMORY[0x20BD3C498](v33, -1, -1);

    }
    else
    {
      outlined destroy of TetraRatchetOuterMessage(v32, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);

      outlined destroy of TetraRatchetOuterMessage(v31, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    }
    lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors();
    swift_allocError();
    *v40 = 3;
    swift_willThrow();
    goto LABEL_15;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t static P256.KeyAgreement.PublicKey.== infix(_:_:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v2 = v1;
  v3 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v5 = v4;
  specialized static Data.== infix(_:_:)(v0, v2);
  v7 = v6;
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v7 & 1;
}

uint64_t P256.KeyAgreement.PublicKey.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v2 = v1;
  Data.hash(into:)();
  return outlined consume of Data._Representation(v0, v2);
}

Swift::Int P256.KeyAgreement.PublicKey.hashValue.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  Hasher.init(_seed:)();
  v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance P256.KeyAgreement.PublicKey()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  Hasher.init(_seed:)();
  v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance P256.KeyAgreement.PublicKey()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v2 = v1;
  Data.hash(into:)();
  return outlined consume of Data._Representation(v0, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance P256.KeyAgreement.PublicKey()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  Hasher.init(_seed:)();
  v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v2 = v1;
  Data.hash(into:)();
  outlined consume of Data._Representation(v0, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance P256.KeyAgreement.PublicKey()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v0 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v2 = v1;
  v3 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v5 = v4;
  specialized static Data.== infix(_:_:)(v0, v2);
  v7 = v6;
  outlined consume of Data._Representation(v3, v5);
  outlined consume of Data._Representation(v0, v2);
  return v7 & 1;
}

SecAccessControlRef TetraOutgoingKeyContent.init(includesKEMKey:encap:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  SecKeyRef *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v23;
  SecAccessControlRef result;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  SecKeyRef v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;

  v44 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for TetraECDHKey();
  v13 = MEMORY[0x24BDAC7A8](v42);
  v15 = (SecKeyRef *)((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v13);
  v43 = (uint64_t)&v38 - v16;
  v17 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v18 = a4 + v17[5];
  v19 = type metadata accessor for TetraKEM768Key(0);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v40 = v19;
  v39(v18, 1, 1);
  v20 = a4 + v17[6];
  v21 = type metadata accessor for TetraKEM1024Key(0);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v45 = v20;
  v22(v20, 1, 1, v21);
  v23 = (uint64_t *)(a4 + v17[7]);
  *v23 = a2;
  v23[1] = a3;
  outlined copy of Data?(a2, a3);
  if (one-time initialization token for SEPisAvailable != -1)
    swift_once();
  if (static MPStaticProperties.SEPisAvailable != 1)
  {
    v41 = v18;
    v38 = v9;
    v26 = objc_msgSend((id)objc_opt_self(), sel_newCompactPrivateKey);
    v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

    v30 = v46;
    v31 = specialized TetraECDHSecKey.init(aksBlob:)(v27, v29);
    outlined consume of Data._Representation(v27, v29);
    if (v30)
    {
      outlined consume of Data?(a2, a3);
      v18 = v41;
      goto LABEL_13;
    }
    *v15 = v31;
    v32 = (char *)v15 + *(int *)(v42 + 20);
    v33 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
    v9 = v38;
LABEL_11:
    v35 = v43;
    outlined init with take of TetraRatchetState((uint64_t)v15, v43, (uint64_t (*)(_QWORD))type metadata accessor for TetraECDHKey);
    outlined init with take of TetraRatchetState(v35, a4, (uint64_t (*)(_QWORD))type metadata accessor for TetraECDHKey);
    if ((v44 & 1) != 0)
    {
      TetraKEM768Key.init()((uint64_t)v9);
      outlined consume of Data?(a2, a3);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v39)(v9, 0, 1, v40);
      return (SecAccessControlRef)outlined assign with take of SymmetricKey?((uint64_t)v9, v41, &demangling cache variable for type metadata for TetraKEM768Key?);
    }
    v36 = a2;
    v37 = a3;
    return (SecAccessControlRef)outlined consume of Data?(v36, v37);
  }
  result = SecAccessControlCreateWithFlags(0, (CFTypeRef)*MEMORY[0x24BDE8F70], 0, 0);
  if (result)
  {
    v25 = v46;
    SecureEnclave.P256.KeyAgreement.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)();
    if (v25)
    {
      outlined consume of Data?(a2, a3);
LABEL_13:
      outlined destroy of TetraSessionStates?(v18, &demangling cache variable for type metadata for TetraKEM768Key?);
      outlined destroy of TetraSessionStates?(v45, &demangling cache variable for type metadata for TetraKEM1024Key?);
      v36 = *v23;
      v37 = v23[1];
      return (SecAccessControlRef)outlined consume of Data?(v36, v37);
    }
    v41 = v18;
    v34 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v12, 0, 1, v34);
    outlined init with take of KEM.EncapsulationResult?((uint64_t)v12, (uint64_t)v15 + *(int *)(v42 + 20), &demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    *v15 = 0;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t TetraOutgoingKeyContent.decapsulate(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a1;
  v35 = a2;
  v33 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v31 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v30 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v30 - v13;
  v15 = type metadata accessor for TetraOutgoingKeyContent(0);
  v16 = *(int *)(v15 + 20);
  v32 = v3;
  v17 = v3 + v16;
  outlined init with copy of TetraSessionStates?(v3 + v16, (uint64_t)v14, &demangling cache variable for type metadata for TetraKEM768Key?);
  v18 = type metadata accessor for TetraKEM768Key(0);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48);
  v20 = v19(v14, 1, v18);
  outlined destroy of TetraSessionStates?((uint64_t)v14, &demangling cache variable for type metadata for TetraKEM768Key?);
  if (v20 == 1)
  {
    v21 = v32 + *(int *)(v15 + 24);
    outlined init with copy of TetraSessionStates?(v21, (uint64_t)v8, &demangling cache variable for type metadata for TetraKEM1024Key?);
    v22 = type metadata accessor for TetraKEM1024Key(0);
    v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
    v24 = v23(v8, 1, v22);
    result = outlined destroy of TetraSessionStates?((uint64_t)v8, &demangling cache variable for type metadata for TetraKEM1024Key?);
    if (v24 == 1)
    {
      __break(1u);
    }
    else
    {
      v26 = v21;
      v27 = v31;
      outlined init with copy of TetraSessionStates?(v26, v31, &demangling cache variable for type metadata for TetraKEM1024Key?);
      result = v23((char *)v27, 1, v22);
      if ((_DWORD)result != 1)
      {
        TetraKEM1024Key.decapsulate(_:)(v33);
        v28 = type metadata accessor for TetraKEM1024Key;
        v29 = v27;
        return outlined destroy of TetraRatchetOuterMessage(v29, v28);
      }
    }
    __break(1u);
  }
  else
  {
    outlined init with copy of TetraSessionStates?(v17, (uint64_t)v12, &demangling cache variable for type metadata for TetraKEM768Key?);
    result = v19(v12, 1, v18);
    if ((_DWORD)result != 1)
    {
      TetraKEM768Key.decapsulate(_:)(v33);
      v28 = type metadata accessor for TetraKEM768Key;
      v29 = (uint64_t)v12;
      return outlined destroy of TetraRatchetOuterMessage(v29, v28);
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ReceivingKeyTetraRatchet.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000018;
  if (*v0 == 1)
    v1 = 0x6E69766965636572;
  if (*v0)
    return v1;
  else
    return 0x6E69766965636572;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ReceivingKeyTetraRatchet.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized ReceivingKeyTetraRatchet.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ReceivingKeyTetraRatchet.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReceivingKeyTetraRatchet.CodingKeys()
{
  lazy protocol witness table accessor for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReceivingKeyTetraRatchet.CodingKeys()
{
  lazy protocol witness table accessor for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ReceivingKeyTetraRatchet.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKey;
  v2 = type metadata accessor for P256.KeyAgreement.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of TetraSessionStates?(v0 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKEMKey, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  outlined destroy of TetraRatchetOuterMessage(v0 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_incomingSymmetricRatchet, type metadata accessor for TetraIncomingSymmetricRatchet);
  return swift_deallocClassInstance();
}

uint64_t ReceivingKeyTetraRatchet.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;

  v24 = type metadata accessor for TetraIncomingSymmetricRatchet(0);
  MEMORY[0x24BDAC7A8](v24);
  v23 = (uint64_t)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  MEMORY[0x24BDAC7A8](v3);
  v25 = (uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReceivingKeyTetraRatchet.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v26 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKey, v5);
  v29 = 0;
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey and conformance P256.KeyAgreement.PublicKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC68D0], (uint64_t)&protocol conformance descriptor for P256.KeyAgreement.PublicKey);
  v14 = v27;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    v27 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v16 = v13;
    v17 = v13 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKEMKey;
    swift_beginAccess();
    v18 = v25;
    outlined init with copy of TetraSessionStates?(v17, v25, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    v28 = 1;
    type metadata accessor for Kyber768.PublicKey();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type Kyber768.PublicKey and conformance Kyber768.PublicKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6C08], (uint64_t)&protocol conformance descriptor for Kyber768.PublicKey);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    outlined destroy of TetraSessionStates?(v18, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    v19 = v16 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_incomingSymmetricRatchet;
    swift_beginAccess();
    v20 = v19;
    v21 = v23;
    outlined init with copy of TetraRatchetOuterMessage(v20, v23, type metadata accessor for TetraIncomingSymmetricRatchet);
    v30 = 2;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet and conformance TetraIncomingSymmetricRatchet, type metadata accessor for TetraIncomingSymmetricRatchet, (uint64_t)&protocol conformance descriptor for TetraIncomingSymmetricRatchet);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined destroy of TetraRatchetOuterMessage(v21, type metadata accessor for TetraIncomingSymmetricRatchet);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v9);
  }
}

uint64_t ReceivingKeyTetraRatchet.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v28 = type metadata accessor for TetraIncomingSymmetricRatchet(0);
  MEMORY[0x24BDAC7A8](v28);
  v27 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  MEMORY[0x24BDAC7A8](v4);
  v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v30 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReceivingKeyTetraRatchet.CodingKeys>);
  v9 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = v1;
  v12 = v1 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKEMKey;
  v13 = type metadata accessor for Kyber768.PublicKey();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v34 = v12;
  v14(v12, 1, 1, v13);
  v15 = a1[3];
  v33 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v15);
  lazy protocol witness table accessor for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys();
  v16 = v11;
  v17 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
    v21 = v32;
    v19 = (uint64_t)v33;
    outlined destroy of TetraSessionStates?(v34, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    type metadata accessor for ReceivingKeyTetraRatchet(0);
    swift_deallocPartialClassInstance();
    v25 = v19;
  }
  else
  {
    v18 = (uint64_t)v29;
    v35 = 0;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey and conformance P256.KeyAgreement.PublicKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC68D0], (uint64_t)&protocol conformance descriptor for P256.KeyAgreement.PublicKey);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = v32;
    v26 = v7;
    v22 = *(void (**)(void))(v7 + 32);
    v36 = v32 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKey;
    v22();
    v35 = 1;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type Kyber768.PublicKey and conformance Kyber768.PublicKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6C08], (uint64_t)&protocol conformance descriptor for Kyber768.PublicKey);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v23 = v34;
    swift_beginAccess();
    outlined assign with take of SymmetricKey?(v18, v23, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    swift_endAccess();
    v35 = 2;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet and conformance TetraIncomingSymmetricRatchet, type metadata accessor for TetraIncomingSymmetricRatchet, (uint64_t)&protocol conformance descriptor for TetraIncomingSymmetricRatchet);
    v24 = (uint64_t)v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v31);
    outlined init with take of TetraRatchetState(v24, v21 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_incomingSymmetricRatchet, type metadata accessor for TetraIncomingSymmetricRatchet);
    v25 = (uint64_t)v33;
  }
  __swift_destroy_boxed_opaque_existential_0(v25);
  return v21;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ReceivingKeyTetraRatchet@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  type metadata accessor for ReceivingKeyTetraRatchet(0);
  v5 = swift_allocObject();
  result = ReceivingKeyTetraRatchet.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ReceivingKeyTetraRatchet(_QWORD *a1)
{
  return ReceivingKeyTetraRatchet.encode(to:)(a1);
}

BOOL static TetraMessageTypes.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void TetraMessageTypes.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

void *static TetraMessageTypes.allCases.getter()
{
  return &outlined read-only object #0 of static TetraMessageTypes.allCases.getter;
}

Swift::Int TetraMessageTypes.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance TetraMessageTypes(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance TetraMessageTypes;
}

uint64_t static TetraRatchetState.deriveRootAndChainKeyAsSender(theirECDHPublicKey:theirKyber1024Key:encapResult:ourOutgoingKeys:conversationDST:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD v41[7];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v45 = a5;
  v53 = a6;
  v43 = a4;
  v41[5] = a2;
  v41[3] = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x24BDAC7A8](v11);
  v41[6] = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for SymmetricKey();
  v41[4] = *(_QWORD *)(v42 - 8);
  v13 = MEMORY[0x24BDAC7A8](v42);
  v41[0] = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v41[2] = (char *)v41 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v41[1] = (char *)v41 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v46 = (uint64_t)v41 - v19;
  v20 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = specialized Data.init<A>(_:)(0x6174536172746554, 0xEB000000002D7472);
  v26 = v25;
  v47 = a7;
  v48 = a8;
  outlined copy of Data._Representation(a7, a8);
  specialized Data.append<A>(contentsOf:)(v24, v26);
  outlined consume of Data._Representation(v24, v26);
  v27 = v47;
  v28 = v48;
  v29 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  if (v30 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_7;
  }
  v31 = v29;
  v32 = v30;
  v49 = v27;
  v50 = v28;
  outlined copy of Data._Representation(v27, v28);
  specialized Data.append<A>(contentsOf:)(v31, v32);
  outlined consume of Data?(v31, v32);
  outlined consume of Data._Representation(v27, v28);
  v33 = v49;
  v34 = v50;
  TetraECDHKey.publicKey.getter();
  v35 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  v37 = v36;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  if (v37 >> 60 == 15)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x20BB11774);
  }
  v51 = v33;
  v52 = v34;
  outlined copy of Data._Representation(v33, v34);
  outlined copy of Data?(v35, v37);
  specialized Data.append<A>(contentsOf:)(v35, v37);
  outlined consume of Data?(v35, v37);
  outlined consume of Data?(v35, v37);
  outlined consume of Data._Representation(v33, v34);
  v38 = v44;
  TetraECDHKey.sharedSecretFromKeyAgreement(with:)(a3, v46);
  if (!v38)
  {
    KEM.EncapsulationResult.encapsulated.getter();
    __asm { BR              X10 }
  }
  return outlined consume of Data._Representation(v51, v52);
}

uint64_t static TetraRatchetState.deriveRootAndChainKey(rootKey:ecdhSS:kemSS:dst:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  NSData v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, char *);
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;

  v59 = a6;
  v60 = a7;
  v54 = a5;
  v65 = a4;
  v62 = a1;
  v63 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x24BDAC7A8](v7);
  v52 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SymmetricKey();
  v49 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v61 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v48 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v64 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v56 = (char *)&v48 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v48 - v20;
  type metadata accessor for NSData();
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v51 = 0;
  v22 = (void *)v68;
  v23 = type metadata accessor for SHA384();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B20], MEMORY[0x24BDC6B10]);
  v24 = lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type NSData and conformance NSData, (uint64_t (*)(uint64_t))type metadata accessor for NSData, MEMORY[0x24BDD0120]);
  v58 = v23;
  v25 = v49;
  v53 = v24;
  static HKDF.extract<A>(inputKeyMaterial:salt:)();

  v57 = v15;
  v26 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v65 = v21;
  v26(v64, v21, v14);
  v27 = lazy protocol witness table accessor for type [TetraMessageTypes] and conformance [A](&lazy protocol witness table cache variable for type HashedAuthenticationCode<SHA384> and conformance HashedAuthenticationCode<A>, &demangling cache variable for type metadata for HashedAuthenticationCode<SHA384>, MEMORY[0x24BDC6538]);
  v28 = v13;
  v29 = (uint64_t)v52;
  v64 = (char *)v14;
  v55 = v27;
  SymmetricKey.init<A>(data:)();
  outlined init with copy of TetraSessionStates?(v54, v29, &demangling cache variable for type metadata for SymmetricKey?);
  v30 = v25;
  v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  v32 = v9;
  if (v31(v29, 1, v9) == 1)
  {
    outlined destroy of TetraSessionStates?(v29, &demangling cache variable for type metadata for SymmetricKey?);
    type metadata accessor for __DataStorage();
    swift_allocObject();
    __DataStorage.init(length:)();
    v33.super.isa = Data._bridgeToObjectiveC()().super.isa;
    swift_release();
  }
  else
  {
    SymmetricKey.withUnsafeBytes<A>(_:)();
    v33.super.isa = (Class)v68;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v9);
  }
  *(NSData *)&v68 = v33;
  v34 = v56;
  static HKDF.extract<A>(inputKeyMaterial:salt:)();

  v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v50 = v32;
  v35(v28, v32);
  v36 = v57;
  v37 = *(void (**)(char *, char *))(v57 + 8);
  v39 = v64;
  v38 = v65;
  v37(v65, v64);
  (*(void (**)(char *, char *, char *))(v36 + 32))(v38, v34, v39);
  if (one-time initialization token for tetraDHRatchetStepKDFString != -1)
    swift_once();
  v40 = tetraDHRatchetStepKDFString;
  v68 = tetraDHRatchetStepKDFString;
  outlined copy of Data._Representation(tetraDHRatchetStepKDFString, *((unint64_t *)&tetraDHRatchetStepKDFString + 1));
  outlined copy of Data._Representation(v40, *((unint64_t *)&v40 + 1));
  v41 = v59;
  v42 = v60;
  outlined copy of Data._Representation(v59, v60);
  specialized Data.append<A>(contentsOf:)(v41, v42);
  outlined consume of Data._Representation(v41, v42);
  outlined consume of Data._Representation(v40, *((unint64_t *)&v40 + 1));
  v43 = v68;
  v66 = v68;
  lazy protocol witness table accessor for type Data and conformance Data();
  v44 = v61;
  v45 = v65;
  v46 = v64;
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  outlined consume of Data._Representation(v43, *((unint64_t *)&v43 + 1));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v66 = v68;
  v67 = v69;
  lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>();
  SymmetricKey.init<A>(data:)();
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v66 = v68;
  v67 = v69;
  SymmetricKey.init<A>(data:)();
  v35(v44, v50);
  return ((uint64_t (*)(char *, char *))v37)(v45, v46);
}

uint64_t static TetraRatchetState.deriveRootAndChainKeyAsSender(rootKey:theirECDHPublicKey:theirKyber768Key:encapResult:ourOutgoingKeys:conversationDST:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  _QWORD v71[3];
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;

  v94 = a7;
  v82 = a6;
  v71[1] = a5;
  v76 = a2;
  v77 = a3;
  v74 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x24BDAC7A8](v11);
  v75 = (char *)v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  MEMORY[0x24BDAC7A8](v13);
  v71[2] = (char *)v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KEM.EncapsulationResult?);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v73 = (uint64_t)v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v78 = (uint64_t)v71 - v18;
  v81 = type metadata accessor for KEM.EncapsulationResult();
  v85 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  v80 = (char *)v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for SymmetricKey();
  v84 = *(_QWORD *)(v79 - 8);
  v20 = MEMORY[0x24BDAC7A8](v79);
  v72 = (char *)v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v83 = (char *)v71 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v87 = (uint64_t)v71 - v24;
  v25 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)v71 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = specialized Data.init<A>(_:)(0x7461526172746554, 0xED00002D74656863);
  v31 = v30;
  v88 = a8;
  v89 = a9;
  outlined copy of Data._Representation(a8, a9);
  specialized Data.append<A>(contentsOf:)(v29, v31);
  outlined consume of Data._Representation(v29, v31);
  v32 = v88;
  v33 = v89;
  v34 = a4;
  v35 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  if (v36 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_13;
  }
  v37 = v35;
  v38 = v36;
  v90 = v32;
  v91 = v33;
  outlined copy of Data._Representation(v32, v33);
  specialized Data.append<A>(contentsOf:)(v37, v38);
  outlined consume of Data?(v37, v38);
  outlined consume of Data._Representation(v32, v33);
  v39 = v90;
  v40 = v91;
  TetraECDHKey.publicKey.getter();
  v41 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  v43 = v42;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  if (v43 >> 60 == 15)
  {
LABEL_13:
    __break(1u);
    JUMPOUT(0x20BB12510);
  }
  v92 = v39;
  v93 = v40;
  outlined copy of Data._Representation(v39, v40);
  outlined copy of Data?(v41, v43);
  specialized Data.append<A>(contentsOf:)(v41, v43);
  outlined consume of Data?(v41, v43);
  outlined consume of Data?(v41, v43);
  outlined consume of Data._Representation(v39, v40);
  v44 = v86;
  v45 = v87;
  TetraECDHKey.sharedSecretFromKeyAgreement(with:)(v34, v87);
  if (!v44)
  {
    v46 = v82;
    v47 = v78;
    outlined init with copy of TetraSessionStates?(v82, v78, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
    v48 = v85;
    v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
    v50 = v81;
    if (v49(v47, 1, v81) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v80, v47, v50);
      KEM.EncapsulationResult.encapsulated.getter();
      __asm { BR              X10 }
    }
    outlined destroy of TetraSessionStates?(v47, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
    I2OSP(value:outputByteCount:)(0, 4);
    v52 = v51;
    v54 = v53;
    specialized Data.append<A>(contentsOf:)(v51, v53);
    outlined consume of Data._Representation(v52, v54);
    I2OSP(value:outputByteCount:)(0, 4);
    v56 = v55;
    v58 = v57;
    specialized Data.append<A>(contentsOf:)(v55, v57);
    outlined consume of Data._Representation(v56, v58);
    v59 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v72, v45, v79);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC63E0], MEMORY[0x24BDC6398]);
    SymmetricKey.init<A>(data:)();
    v61 = v73;
    outlined init with copy of TetraSessionStates?(v46, v73, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
    v62 = v49(v61, 1, v50);
    v63 = (uint64_t)v75;
    if (v62 == 1)
    {
      outlined destroy of TetraSessionStates?(v61, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
      v64 = 1;
    }
    else
    {
      KEM.EncapsulationResult.sharedSecret.getter();
      (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v61, v50);
      v64 = 0;
    }
    v65 = v84;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v63, v64, 1, v59);
    v66 = v92;
    v67 = v93;
    outlined copy of Data._Representation(v92, v93);
    v68 = v83;
    static TetraRatchetState.deriveRootAndChainKey(rootKey:ecdhSS:kemSS:dst:)(v74, v76, v77, v83, v63, v66, v67);
    outlined consume of Data._Representation(v66, v67);
    outlined destroy of TetraSessionStates?(v63, &demangling cache variable for type metadata for SymmetricKey?);
    v69 = *(void (**)(char *, uint64_t))(v65 + 8);
    v69(v68, v59);
    v69((char *)v45, v59);
  }
  return outlined consume of Data._Representation(v92, v93);
}

uint64_t static TetraRatchetState.deriveRootAndChainKeyAsReceiver(rootKey:theirPublicKey:encap:ourReceivingKeys:conversationDST:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5, unint64_t a6, void (*a7)(_QWORD, _QWORD, _QWORD), uint64_t a8, unint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void (*v80)(_QWORD, _QWORD, _QWORD);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  _BYTE *v104;
  void (*v105)(uint64_t, uint64_t);
  _BYTE *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  char *v120;
  char *v121;
  void (*v122)(char *, char *, uint64_t);
  char *v123;
  void (*v124)(uint64_t, char *, uint64_t);
  uint64_t v125;
  char *v126;
  char *v127;
  _QWORD v129[3];
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t, uint64_t, uint64_t);
  char *v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  void (*v168)(_QWORD, _QWORD, _QWORD);

  v168 = a7;
  v155 = a5;
  v156 = a6;
  v161 = a4;
  v145 = a2;
  v143 = a1;
  v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
  v11 = MEMORY[0x24BDAC7A8](v149);
  v144 = (char *)v129 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v141 = (char *)v129 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v142 = (char *)v129 - v15;
  v133 = type metadata accessor for Kyber1024.PublicKey();
  v132 = *(_QWORD *)(v133 - 8);
  MEMORY[0x24BDAC7A8](v133);
  v131 = (char *)v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TetraKEM1024Key(0);
  v151 = *(_QWORD *)(v17 - 8);
  v152 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v134 = (char *)v129 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for Kyber768.PublicKey();
  v129[2] = *(_QWORD *)(v130 - 8);
  MEMORY[0x24BDAC7A8](v130);
  v129[1] = (char *)v129 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TetraKEM768Key(0);
  v153 = *(_QWORD *)(v20 - 8);
  v154 = v20;
  MEMORY[0x24BDAC7A8](v20);
  v135 = (char *)v129 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v138 = (uint64_t)v129 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v129[0] = (char *)v129 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v137 = (uint64_t)v129 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v148 = (uint64_t)v129 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v136 = (char *)v129 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v147 = (uint64_t)v129 - v33;
  v34 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v159 = *(_QWORD *)(v34 - 8);
  v160 = v34;
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)v129 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  v38 = MEMORY[0x24BDAC7A8](v37);
  v146 = (uint64_t)v129 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x24BDAC7A8](v38);
  v150 = (uint64_t)v129 - v41;
  MEMORY[0x24BDAC7A8](v40);
  v43 = (char *)v129 - v42;
  v44 = type metadata accessor for SymmetricKey();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = MEMORY[0x24BDAC7A8](v44);
  v139 = (char *)v129 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = MEMORY[0x24BDAC7A8](v46);
  v140 = (char *)v129 - v49;
  v50 = MEMORY[0x24BDAC7A8](v48);
  v162 = (char *)v129 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v54 = (char *)v129 - v53;
  MEMORY[0x24BDAC7A8](v52);
  v56 = (char *)v129 - v55;
  v166 = a8;
  v167 = a9;
  v58 = v57;
  outlined init with copy of TetraSessionStates?(a3, (uint64_t)v43, &demangling cache variable for type metadata for SymmetricKey?);
  v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v58);
  v157 = v56;
  v163 = v45;
  if (v59 == 1)
  {
    outlined copy of Data._Representation(a8, a9);
    outlined destroy of TetraSessionStates?((uint64_t)v43, &demangling cache variable for type metadata for SymmetricKey?);
    type metadata accessor for __DataStorage();
    swift_allocObject();
    v60 = __DataStorage.init(length:)();
    v164 = 0x2000000000;
    v165 = v60 | 0x4000000000000000;
    SymmetricKey.init<A>(data:)();
    v61 = specialized Data.init<A>(_:)(0x6174536172746554, 0xEB000000002D7472);
    v63 = v62;
    specialized Data.append<A>(contentsOf:)(v61, v62);
    outlined consume of Data._Representation(v61, v63);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v54, v43, v58);
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v56, v54, v58);
    outlined copy of Data._Representation(a8, a9);
    v64 = specialized Data.init<A>(_:)(0x7461526172746554, 0xED00002D74656863);
    v66 = v65;
    specialized Data.append<A>(contentsOf:)(v64, v65);
    outlined consume of Data._Representation(v64, v66);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v54, v58);
  }
  v67 = v58;
  TetraECDHKey.publicKey.getter();
  v68 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  v70 = v69;
  (*(void (**)(char *, uint64_t))(v159 + 8))(v36, v160);
  v72 = (uint64_t)v161;
  v71 = (uint64_t)v162;
  if (v70 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_20;
  }
  v73 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  v75 = v163;
  if (v74 >> 60 == 15)
  {
LABEL_20:
    __break(1u);
    JUMPOUT(0x20BB134E0);
  }
  v76 = v73;
  v77 = v74;
  v164 = v68;
  v165 = v70;
  outlined copy of Data._Representation(v68, v70);
  specialized Data.append<A>(contentsOf:)(v76, v77);
  outlined consume of Data?(v76, v77);
  outlined consume of Data?(v68, v70);
  v78 = v164;
  v79 = v165;
  outlined copy of Data._Representation(v164, v165);
  specialized Data.append<A>(contentsOf:)(v78, v79);
  outlined consume of Data._Representation(v78, v79);
  outlined consume of Data._Representation(v78, v79);
  v80 = v168;
  v81 = v158;
  TetraECDHKey.sharedSecretFromKeyAgreement(with:)(v72, v71);
  if (v81)
  {
    (*(void (**)(char *, uint64_t))(v75 + 8))(v157, v67);
  }
  else
  {
    v82 = type metadata accessor for TetraOutgoingKeyContent(0);
    v83 = (uint64_t)v80 + *(int *)(v82 + 20);
    v84 = v156;
    if (v156 >> 60 == 15)
    {
      v85 = v148;
      outlined init with copy of TetraSessionStates?(v83, v148, &demangling cache variable for type metadata for TetraKEM768Key?);
      v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v85, 1, v154);
      outlined destroy of TetraSessionStates?(v85, &demangling cache variable for type metadata for TetraKEM768Key?);
      if (v86 == 1)
      {
        v87 = (uint64_t)v168 + *(int *)(v82 + 24);
        v88 = v138;
        outlined init with copy of TetraSessionStates?(v87, v138, &demangling cache variable for type metadata for TetraKEM1024Key?);
        v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v88, 1, v152);
        outlined destroy of TetraSessionStates?(v88, &demangling cache variable for type metadata for TetraKEM1024Key?);
        if (v89 == 1)
        {
          v160 = 0;
          I2OSP(value:outputByteCount:)(0, 4);
          v91 = v90;
          v93 = v92;
          specialized Data.append<A>(contentsOf:)(v90, v92);
          outlined consume of Data._Representation(v91, v93);
          I2OSP(value:outputByteCount:)(0, 4);
          v95 = v94;
          v97 = v96;
          specialized Data.append<A>(contentsOf:)(v94, v96);
          outlined consume of Data._Representation(v95, v97);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v150, 1, 1, v67);
          v109 = (uint64_t)v142;
          v162 = &v142[*(int *)(v149 + 48)];
          v110 = (uint64_t)v162;
          v168 = *(void (**)(_QWORD, _QWORD, _QWORD))(v75 + 16);
          v168(v139, v71, v67);
          lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC63E0], MEMORY[0x24BDC6398]);
          v111 = v140;
          SymmetricKey.init<A>(data:)();
          v112 = v166;
          v113 = v167;
          outlined copy of Data._Representation(v166, v167);
          v114 = (uint64_t)v157;
          v115 = v150;
          static TetraRatchetState.deriveRootAndChainKey(rootKey:ecdhSS:kemSS:dst:)(v109, v110, (uint64_t)v157, v111, v150, v112, v113);
          outlined consume of Data._Representation(v112, v113);
          v116 = v71;
          v117 = v163;
          v118 = *(void (**)(char *, uint64_t))(v163 + 8);
          v118(v111, v67);
          outlined destroy of TetraSessionStates?(v115, &demangling cache variable for type metadata for SymmetricKey?);
          v118((char *)v116, v67);
          v118((char *)v114, v67);
          outlined consume of Data._Representation(v166, v167);
          v119 = v149;
          v120 = v141;
          v121 = &v141[*(int *)(v149 + 48)];
          v122 = (void (*)(char *, char *, uint64_t))v168;
          v168(v141, v109, v67);
          v123 = v162;
          v122(v121, v162, v67);
          v124 = *(void (**)(uint64_t, char *, uint64_t))(v117 + 32);
          v124(v143, v120, v67);
          v125 = *(int *)(v119 + 48);
          v126 = v144;
          v127 = &v144[v125];
          v124((uint64_t)v144, (char *)v109, v67);
          v124((uint64_t)v127, v123, v67);
          v124(v145, v127, v67);
          v118(v126, v67);
          return ((uint64_t (*)(char *, uint64_t))v118)(v121, v67);
        }
      }
      lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors();
      swift_allocError();
      *v106 = 1;
      swift_willThrow();
      v105 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      v105(v71, v67);
    }
    else
    {
      v98 = v147;
      outlined init with copy of TetraSessionStates?(v83, v147, &demangling cache variable for type metadata for TetraKEM768Key?);
      v161 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v153 + 48);
      v99 = v161(v98, 1, v154);
      v100 = v84;
      v101 = v99;
      outlined copy of Data._Representation(v155, v100);
      outlined destroy of TetraSessionStates?(v98, &demangling cache variable for type metadata for TetraKEM768Key?);
      if (v101 != 1
        || (v102 = v137,
            outlined init with copy of TetraSessionStates?((uint64_t)v168 + *(int *)(v82 + 24), v137, &demangling cache variable for type metadata for TetraKEM1024Key?), v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v151 + 48))(v102, 1, v152), outlined destroy of TetraSessionStates?(v102, &demangling cache variable for type metadata for TetraKEM1024Key?), v103 != 1))
      {
        v107 = v146;
        v108 = v156;
        TetraOutgoingKeyContent.decapsulate(_:)(v155, v156, v146);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v163 + 56))(v107, 0, 1, v67);
        outlined init with take of KEM.EncapsulationResult?(v107, v150, &demangling cache variable for type metadata for SymmetricKey?);
        __asm { BR              X10 }
      }
      lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors();
      swift_allocError();
      *v104 = 0;
      swift_willThrow();
      outlined consume of Data?(v155, v156);
      v105 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      v105(v71, v67);
    }
    v105((uint64_t)v157, v67);
  }
  return outlined consume of Data._Representation(v166, v167);
}

uint64_t closure #1 in static TetraRatchetState.deriveRootAndChainKey(rootKey:ecdhSS:kemSS:dst:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;

  if (result)
    v3 = a2 - result;
  else
    v3 = 0;
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if (v3 < 0x20)
    {
LABEL_9:
      *a3 = 0;
      a3[1] = v3;
      a3[2] = result;
      a3[3] = a2;
      return result;
    }
    if (result && a2 - result >= 32)
    {
      v3 = 32;
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

unint64_t closure #2 in static TetraRatchetState.deriveRootAndChainKey(rootKey:ecdhSS:kemSS:dst:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unint64_t v4;

  v3 = a2 - result;
  if (!result)
    v3 = 0;
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = v3 - 32;
    if (v3 < 0x20)
      v4 = 0;
    *a3 = v4;
    a3[1] = v3;
    a3[2] = result;
    a3[3] = a2;
  }
  return result;
}

void TetraRatchetState.ratchetedOpen(message:sessionDST:didRatchet:)(uint64_t a1, NSObject *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void (*v58)(_QWORD, _QWORD, _QWORD);
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t, uint64_t);
  void *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD, _QWORD);
  void (**v73)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t);
  void (*v74)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  Class isa;
  unsigned int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  unint64_t v134;
  void *v135;
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  NSObject *v141;
  NSObject *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t (*v150)(uint64_t, uint64_t, uint64_t);
  uint64_t v151;
  uint64_t v152;
  int v153;
  void *object;
  uint64_t countAndFlagsBits;
  _QWORD *v156;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  uint64_t v160;
  os_log_type_t v161;
  NSObject *v162;
  NSObject *v163;
  uint8_t *v164;
  uint8_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  Swift::String v173;
  void *v174;
  uint64_t v175;
  Swift::String v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  Swift::String v180;
  os_log_t v181;
  uint64_t (*v182)(uint64_t, uint64_t, uint64_t);
  _BYTE *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  _QWORD v187[2];
  void (*v188)(_QWORD, _QWORD, _QWORD);
  int *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  int *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  void (**v222)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t);
  uint64_t v223;
  uint64_t v224;
  void *v225;
  char *v226;
  uint64_t v227;
  uint64_t (*v228)(uint64_t, uint64_t, uint64_t);
  NSObject *v229;
  uint64_t v230;
  uint64_t (*v231)(uint64_t, uint64_t, uint64_t);
  id v232;
  char v233;

  v5 = v4;
  v197 = a4;
  v229 = a2;
  v8 = type metadata accessor for TetraRatchetOuterMessage();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v195 = (uint64_t)v187 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v194 = (uint64_t)v187 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v196 = (uint64_t)v187 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x24BDAC7A8](v14);
  v201 = (char *)v187 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  MEMORY[0x24BDAC7A8](v16);
  v200 = (uint64_t)v187 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = type metadata accessor for KEM.EncapsulationResult();
  v219 = *(_QWORD *)(v208 - 8);
  MEMORY[0x24BDAC7A8](v208);
  v202 = (char *)v187 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for TetraOutgoingKeyContent(0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v199 = (uint64_t)v187 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v209 = (uint64_t)v187 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v198 = (char *)v187 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v213 = (uint64_t)v187 - v26;
  v214 = type metadata accessor for Kyber768.PublicKey();
  v224 = *(_QWORD *)(v214 - 8);
  MEMORY[0x24BDAC7A8](v214);
  v207 = (char *)v187 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KEM.EncapsulationResult?);
  v29 = MEMORY[0x24BDAC7A8](v28);
  v203 = (uint64_t)v187 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v206 = (char *)v187 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v218 = (uint64_t)v187 - v33;
  v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  v35 = MEMORY[0x24BDAC7A8](v34);
  v193 = (uint64_t)v187 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x24BDAC7A8](v35);
  v212 = (uint64_t)v187 - v38;
  MEMORY[0x24BDAC7A8](v37);
  v211 = (_QWORD *)((char *)v187 - v39);
  v40 = type metadata accessor for TetraIncomingSymmetricRatchet(0);
  MEMORY[0x24BDAC7A8](v40);
  v210 = (_QWORD *)((char *)v187 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v222 = *(void (***)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t))(v42 - 8);
  v223 = v42;
  MEMORY[0x24BDAC7A8](v42);
  v221 = (char *)v187 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
  v45 = MEMORY[0x24BDAC7A8](v44);
  v205 = (char *)v187 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x24BDAC7A8](v45);
  v215 = (char *)v187 - v48;
  v49 = MEMORY[0x24BDAC7A8](v47);
  v51 = (char *)v187 - v50;
  v52 = (char *)v187 + *(int *)(v49 + 48) - v50;
  v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(a1 + *(int *)(v8 + 28));
  v227 = v49;
  v228 = v53;
  v216 = a1;
  v217 = (int *)v8;
  v54 = (uint64_t *)(a1 + *(int *)(v8 + 36));
  v55 = *v54;
  v56 = v54[1];
  v57 = type metadata accessor for TetraRatchetState(0);
  v58 = (void (*)(_QWORD, _QWORD, _QWORD))(v4 + *(int *)(v57 + 24));
  v204 = a3;
  v59 = ((uint64_t (*)(uint64_t))v229)(1);
  v61 = v60;
  v186 = v60;
  v226 = v51;
  v62 = (uint64_t)v51;
  v63 = v52;
  v64 = (uint64_t)v52;
  v65 = v228;
  v220 = v5;
  v66 = v225;
  static TetraRatchetState.deriveRootAndChainKeyAsReceiver(rootKey:theirPublicKey:encap:ourReceivingKeys:conversationDST:)(v62, v64, v5, v228, v55, v56, v58, v59, v186);
  if (v66)
  {
    outlined consume of Data._Representation(v59, v61);
    return;
  }
  v188 = v58;
  v189 = (int *)v57;
  v225 = 0;
  outlined consume of Data._Representation(v59, v61);
  v222[2](v221, v65, v223);
  v67 = v215;
  v68 = &v215[*(int *)(v227 + 48)];
  v69 = type metadata accessor for SymmetricKey();
  v70 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v69 - 8) + 16);
  v190 = *(_QWORD *)(v69 - 8);
  v71 = v190;
  v70(v67, v226, v69);
  v191 = (uint64_t)v63;
  v70(v68, v63, v69);
  v72 = (void (*)(_QWORD, _QWORD, _QWORD))v210;
  TetraIncomingSymmetricRatchet.init(symmetricRatchetHead:)(v68, (uint64_t)v210);
  v73 = *(void (***)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t))(v71 + 8);
  ((void (*)(char *, uint64_t))v73)(v67, v69);
  v192 = v216 + v217[8];
  v74 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v211;
  outlined init with copy of TetraSessionStates?(v192, (uint64_t)v211, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  type metadata accessor for ReceivingKeyTetraRatchet(0);
  v75 = swift_allocObject();
  v76 = v75 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKEMKey;
  v77 = v214;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v224 + 56))(v75 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKEMKey, 1, 1, v214);
  v222[4]((char *)(v75 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKey), (uint64_t (*)(uint64_t, uint64_t, uint64_t))v221, v223);
  v223 = v75;
  v187[1] = v75 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_incomingSymmetricRatchet;
  outlined init with take of TetraRatchetState((uint64_t)v72, v75 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_incomingSymmetricRatchet, type metadata accessor for TetraIncomingSymmetricRatchet);
  swift_beginAccess();
  outlined assign with take of SymmetricKey?((uint64_t)v74, v76, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  swift_endAccess();
  v78 = v220;
  outlined destroy of TetraSessionStates?(v220, &demangling cache variable for type metadata for SymmetricKey?);
  v79 = (uint64_t)v226;
  v80 = &v67[*(int *)(v227 + 48)];
  v70(v67, v226, v69);
  v221 = (char *)v70;
  v70(v80, (char *)v191, v69);
  v81 = v190;
  v210 = *(_QWORD **)(v190 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v210)(v78, v67, v69);
  v211 = *(_QWORD **)(v81 + 56);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v211)(v78, 0, 1, v69);
  v191 = v69;
  v222 = v73;
  ((void (*)(char *, uint64_t))v73)(v80, v69);
  v82 = v212;
  outlined init with copy of TetraSessionStates?(v192, v212, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  v83 = v224;
  v190 = *(_QWORD *)(v224 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v190)(v82, 1, v77) == 1)
  {
    outlined destroy of TetraSessionStates?(v82, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
    v84 = v218;
    v85 = v208;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v219 + 56))(v218, 1, 1, v208);
    v86 = v213;
  }
  else
  {
    v84 = v79;
    v87 = v207;
    (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v207, v82, v77);
    v88 = (uint64_t)v206;
    v89 = v225;
    Kyber768.PublicKey.encapsulate()();
    v90 = v218;
    v86 = v213;
    if (v89)
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v83 + 8))(v87, v77);
      v91 = &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey);
LABEL_18:
      v107 = v84;
LABEL_19:
      outlined destroy of TetraSessionStates?(v107, v91);
      return;
    }
    v225 = 0;
    (*(void (**)(char *, uint64_t))(v83 + 8))(v87, v77);
    v85 = v208;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v219 + 56))(v88, 0, 1, v208);
    outlined init with take of KEM.EncapsulationResult?(v88, v90, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
    v84 = v90;
  }
  v92 = v189[8];
  v213 = v189[7];
  v93 = *(_DWORD *)(v220 + v213);
  v94 = v220 + v92;
  outlined init with copy of TetraSessionStates?(v220 + v92, v86, &demangling cache variable for type metadata for Date?);
  v95 = type metadata accessor for Date();
  v96 = *(_QWORD *)(v95 - 8);
  isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v86, 1, v95) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v86, v95);
  }
  v212 = v96;
  v98 = objc_msgSend((id)objc_opt_self(), sel_shouldRekeyIfLastRekeyFrom_, isa);

  if (v93 > 0x63)
    v99 = 1;
  else
    v99 = v98;
  v100 = v219;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v219 + 48))(v84, 1, v85))
  {
    v101 = 0;
    v102 = 0xF000000000000000;
  }
  else
  {
    v103 = v202;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v202, v84, v85);
    v101 = KEM.EncapsulationResult.encapsulated.getter();
    v102 = v104;
    (*(void (**)(char *, uint64_t))(v100 + 8))(v103, v85);
  }
  v105 = v209;
  v106 = v225;
  TetraOutgoingKeyContent.init(includesKEMKey:encap:)(v99, v101, v102, v209);
  if (v106)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v226, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
    swift_release();
    v91 = &demangling cache variable for type metadata for KEM.EncapsulationResult?;
    goto LABEL_18;
  }
  LODWORD(v219) = v99;
  v208 = v94;
  v108 = (uint64_t)v205;
  v109 = &v205[*(int *)(v227 + 48)];
  v110 = v203;
  outlined init with copy of TetraSessionStates?(v84, v203, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
  v111 = ((uint64_t (*)(_QWORD))v229)(0);
  v113 = v112;
  static TetraRatchetState.deriveRootAndChainKeyAsSender(rootKey:theirECDHPublicKey:theirKyber768Key:encapResult:ourOutgoingKeys:conversationDST:)(v108, (uint64_t)v109, (uint64_t)v226, (uint64_t)v228, v192, v110, v105, v111, v112);
  v225 = 0;
  outlined destroy of TetraSessionStates?(v110, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
  outlined consume of Data._Representation(v111, v113);
  v114 = v220;
  outlined destroy of TetraSessionStates?(v220, &demangling cache variable for type metadata for SymmetricKey?);
  v115 = v215;
  v116 = &v215[*(int *)(v227 + 48)];
  v117 = v191;
  v118 = v221;
  ((void (*)(char *, uint64_t, uint64_t))v221)(v215, v108, v191);
  v229 = v109;
  ((void (*)(char *, NSObject *, uint64_t))v118)(v116, v109, v117);
  ((void (*)(uint64_t, char *, uint64_t))v210)(v114, v115, v117);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v211)(v114, 0, 1, v117);
  ((void (*)(char *, uint64_t))v222)(v116, v117);
  v119 = v108;
  v120 = v227;
  if ((_DWORD)v219)
  {
    *(_DWORD *)(v114 + v213) = 0;
    v121 = (uint64_t)v198;
    Date.init()();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v212 + 56))(v121, 0, 1, v95);
    outlined assign with take of SymmetricKey?(v121, v208, &demangling cache variable for type metadata for Date?);
  }
  v122 = &v115[*(int *)(v120 + 48)];
  v123 = v191;
  v124 = v221;
  ((void (*)(char *, uint64_t, uint64_t))v221)(v115, v108, v191);
  ((void (*)(char *, NSObject *, uint64_t))v124)(v122, v229, v123);
  v125 = (uint64_t)v201;
  ((void (*)(char *, char *, uint64_t))v210)(v201, v122, v123);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v211)(v125, 0, 1, v123);
  v126 = v105;
  v127 = v199;
  outlined init with copy of TetraRatchetOuterMessage(v126, v199, type metadata accessor for TetraOutgoingKeyContent);
  v128 = v200;
  TetraOutgoingSymmetricRatchet.init(symmetricRatchetHead:outgoingPublicKeys:)(v125, v127, v200);
  ((void (*)(char *, uint64_t))v222)(v115, v123);
  outlined assign with take of TetraOutgoingSymmetricRatchet(v128, (uint64_t)v188);
  v129 = *(_QWORD *)(v216 + 8);
  v130 = *(_QWORD *)(v216 + 16);
  LODWORD(v127) = *(_DWORD *)(v216 + 24);
  v131 = v216;
  v132 = (uint64_t *)(v216 + v217[11]);
  v133 = *v132;
  v134 = v132[1];
  swift_beginAccess();
  v135 = v225;
  TetraIncomingSymmetricRatchet.openMessage(_:messageIndex:messageKeyIndicator:discardMessageKey:)(v129, v130, v127, v133, v134, 0);
  if (!v135)
  {
    v225 = 0;
    swift_endAccess();
    v156 = (_QWORD *)(v220 + v189[5]);
    v157 = swift_retain();
    MEMORY[0x20BD3B5E0](v157);
    if (*(_QWORD *)((*v156 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v156 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v158 = v197;
    if (*v156 >> 62)
    {
      swift_bridgeObjectRetain();
      v184 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v184 < 8)
        goto LABEL_45;
    }
    else if (*(uint64_t *)((*v156 & 0xFFFFFFFFFFFFF8) + 0x10) < 8)
    {
LABEL_45:
      swift_release();
      outlined destroy of TetraSessionStates?(v119, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
      outlined destroy of TetraRatchetOuterMessage(v209, type metadata accessor for TetraOutgoingKeyContent);
      outlined destroy of TetraSessionStates?((uint64_t)v226, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
      *v158 = 1;
      outlined destroy of TetraSessionStates?(v218, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
      return;
    }
    if (*v156 >> 62)
    {
      swift_bridgeObjectRetain();
      v185 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v160 = v185 - 7;
      if (!__OFSUB__(v185, 7))
      {
LABEL_36:
        v161 = static os_log_type_t.info.getter();
        v162 = MessageProtectionLog();
        if (!v162)
          goto LABEL_64;
        v163 = v162;
        if (os_log_type_enabled(v162, v161))
        {
          v164 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v164 = 134217984;
          v232 = (id)v160;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_20BABB000, v163, v161, "Removing first %ld chains.", v164, 0xCu);
          v165 = v164;
          v158 = v197;
          MEMORY[0x20BD3C498](v165, -1, -1);
        }

        v119 = (uint64_t)v205;
        if (!v160)
          goto LABEL_45;
        if ((v160 & 0x8000000000000000) == 0)
        {
          if (!(*v156 >> 62))
          {
            v166 = *(_QWORD *)((*v156 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v166 < 0)
            {
LABEL_44:
              specialized Array.replaceSubrange<A>(_:with:)(0, v160);
              v119 = (uint64_t)v205;
              goto LABEL_45;
            }
            goto LABEL_43;
          }
LABEL_61:
          swift_bridgeObjectRetain();
          v166 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v166 < 0)
            goto LABEL_44;
LABEL_43:
          if (v166 >= v160)
            goto LABEL_44;
          __break(1u);
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
    }
    else
    {
      v159 = *(_QWORD *)((*v156 & 0xFFFFFFFFFFFFF8) + 0x10);
      v160 = v159 - 7;
      if (!__OFSUB__(v159, 7))
        goto LABEL_36;
    }
    __break(1u);
    goto LABEL_60;
  }
  swift_endAccess();
  v232 = v135;
  v136 = v135;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {
    swift_release();
    outlined destroy of TetraSessionStates?(v119, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
    outlined destroy of TetraRatchetOuterMessage(v209, type metadata accessor for TetraOutgoingKeyContent);
    outlined destroy of TetraSessionStates?((uint64_t)v226, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));

    v167 = v218;
    goto LABEL_47;
  }
  v137 = v209;
  v138 = (uint64_t)v226;
  v139 = v218;
  if (v233 != 3)
  {
    swift_release();
    outlined destroy of TetraSessionStates?(v119, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
    outlined destroy of TetraRatchetOuterMessage(v137, type metadata accessor for TetraOutgoingKeyContent);
    outlined destroy of TetraSessionStates?(v138, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));

    v167 = v139;
LABEL_47:
    outlined destroy of TetraSessionStates?(v167, &demangling cache variable for type metadata for KEM.EncapsulationResult?);
    return;
  }

  v140 = static os_log_type_t.error.getter();
  v141 = MessageProtectionLog();
  if (v141)
  {
    v142 = v141;
    v143 = v131;
    v144 = v196;
    outlined init with copy of TetraRatchetOuterMessage(v131, v196, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    v145 = v131;
    v146 = v194;
    outlined init with copy of TetraRatchetOuterMessage(v145, v194, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    v147 = v143;
    v148 = v195;
    outlined init with copy of TetraRatchetOuterMessage(v147, v195, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
    if (os_log_type_enabled(v142, (os_log_type_t)v140))
    {
      v229 = v142;
      LODWORD(v227) = v140;
      v149 = swift_slowAlloc();
      v150 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))swift_slowAlloc();
      v231 = v150;
      *(_DWORD *)v149 = 136315650;
      v151 = v193;
      outlined init with copy of TetraSessionStates?(v144 + v217[8], v193, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
      v152 = v214;
      v153 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v190)(v151, 1, v214);
      v228 = v150;
      if (v153 == 1)
      {
        outlined destroy of TetraSessionStates?(v151, (uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
        object = (void *)0xEA00000000007965;
        countAndFlagsBits = 0x4B206D654B206F4ELL;
      }
      else
      {
        v170 = Kyber768.PublicKey.dataRepresentation.getter();
        v172 = v171;
        (*(void (**)(uint64_t, uint64_t))(v224 + 8))(v151, v152);
        v173 = Data.base64EncodedString(options:)(0);
        countAndFlagsBits = v173._countAndFlagsBits;
        object = v173._object;
        outlined consume of Data._Representation(v170, v172);
      }
      v230 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, (uint64_t *)&v231);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of TetraRatchetOuterMessage(v196, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
      *(_WORD *)(v149 + 12) = 2080;
      if (*(_QWORD *)(v146 + v217[9] + 8) >> 60 == 15)
      {
        v174 = (void *)0xE800000000000000;
        v175 = 0x7061636E45206F4ELL;
      }
      else
      {
        v176 = Data.base64EncodedString(options:)(0);
        v175 = v176._countAndFlagsBits;
        v174 = v176._object;
      }
      v230 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v175, (unint64_t)v174, (uint64_t *)&v231);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of TetraRatchetOuterMessage(v146, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
      *(_WORD *)(v149 + 22) = 2080;
      v177 = P256.KeyAgreement.PublicKey.compressedRepresentation.getter();
      v179 = v178;
      v180 = Data.base64EncodedString(options:)(0);
      outlined consume of Data._Representation(v177, v179);
      v230 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v180._countAndFlagsBits, (unint64_t)v180._object, (uint64_t *)&v231);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of TetraRatchetOuterMessage(v148, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
      v181 = v229;
      _os_log_impl(&dword_20BABB000, v229, (os_log_type_t)v227, "Out of sync ratchet upon ratcheting. KEM Key: %s. Encap: %s ECDH: %s", (uint8_t *)v149, 0x20u);
      v182 = v228;
      swift_arrayDestroy();
      MEMORY[0x20BD3C498](v182, -1, -1);
      MEMORY[0x20BD3C498](v149, -1, -1);

      v168 = v218;
      v137 = v209;
      v169 = (uint64_t)v226;
      v119 = (uint64_t)v205;
    }
    else
    {

      outlined destroy of TetraRatchetOuterMessage(v144, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
      outlined destroy of TetraRatchetOuterMessage(v146, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
      outlined destroy of TetraRatchetOuterMessage(v148, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
      v168 = v218;
      v169 = (uint64_t)v226;
    }
    lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors();
    swift_allocError();
    *v183 = 3;
    swift_willThrow();
    swift_release();
    outlined destroy of TetraSessionStates?(v119, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));
    outlined destroy of TetraRatchetOuterMessage(v137, type metadata accessor for TetraOutgoingKeyContent);
    outlined destroy of TetraSessionStates?(v169, &demangling cache variable for type metadata for (rootKey: SymmetricKey, chainKey: SymmetricKey));

    v91 = &demangling cache variable for type metadata for KEM.EncapsulationResult?;
    v107 = v168;
    goto LABEL_19;
  }
LABEL_65:
  __break(1u);
}

uint64_t closure #1 in TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v15;

  v2 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, *a1 + OBJC_IVAR____TtC17MessageProtection24ReceivingKeyTetraRatchet_receivingKey, v2);
  type metadata accessor for TetraRatchetOuterMessage();
  v6 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v8 = v7;
  v9 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v11 = v10;
  specialized static Data.== infix(_:_:)(v6, v8);
  v13 = v12;
  outlined consume of Data._Representation(v9, v11);
  outlined consume of Data._Representation(v6, v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v13 & 1;
}

uint64_t TetraRatchetState.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20BB14C40 + 4 * byte_20BB42E30[a1]))(0x79654B746F6F72, 0xE700000000000000);
}

uint64_t sub_20BB14C40()
{
  return 0x676E696D6F636E69;
}

uint64_t sub_20BB14C64()
{
  return 0x676E696F6774756FLL;
}

unint64_t sub_20BB14C88()
{
  return 0xD000000000000016;
}

unint64_t sub_20BB14CA8()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraRatchetState.CodingKeys()
{
  unsigned __int8 *v0;

  return TetraRatchetState.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraRatchetState.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TetraRatchetState.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TetraRatchetState.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraRatchetState.CodingKeys()
{
  lazy protocol witness table accessor for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraRatchetState.CodingKeys()
{
  lazy protocol witness table accessor for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t TetraRatchetState.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraRatchetState.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = 0;
  type metadata accessor for SymmetricKey();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC63E0], (uint64_t)&protocol conformance descriptor for SymmetricKey);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    v11 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for TetraRatchetState(0) + 20));
    v10[15] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ReceivingKeyTetraRatchet]);
    lazy protocol witness table accessor for type [ReceivingKeyTetraRatchet] and conformance <A> [A](&lazy protocol witness table cache variable for type [ReceivingKeyTetraRatchet] and conformance <A> [A], &lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet and conformance ReceivingKeyTetraRatchet, (uint64_t)&protocol conformance descriptor for ReceivingKeyTetraRatchet, MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[14] = 2;
    type metadata accessor for TetraOutgoingSymmetricRatchet(0);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet and conformance TetraOutgoingSymmetricRatchet, type metadata accessor for TetraOutgoingSymmetricRatchet, (uint64_t)&protocol conformance descriptor for TetraOutgoingSymmetricRatchet);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[13] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[12] = 4;
    type metadata accessor for Date();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TetraRatchetState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;

  v35 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v3);
  v36 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  MEMORY[0x24BDAC7A8](v37);
  v38 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x24BDAC7A8](v6);
  v39 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraRatchetState.CodingKeys>);
  v8 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TetraRatchetState(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SymmetricKey();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = *(int *)(v11 + 28);
  *(_DWORD *)&v13[v15] = 0;
  v43 = v11;
  v44 = v13;
  v16 = (uint64_t)&v13[*(int *)(v11 + 32)];
  v17 = type metadata accessor for Date();
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v41 = v16;
  v18(v16, 1, 1, v17);
  v19 = a1[3];
  v42 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  lazy protocol witness table accessor for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys();
  v20 = v10;
  v21 = v45;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
  {
    v27 = v41;
    v28 = (uint64_t)v44;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
    outlined destroy of TetraSessionStates?(v28, &demangling cache variable for type metadata for SymmetricKey?);
    return outlined destroy of TetraSessionStates?(v27, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    v34 = v15;
    v45 = v17;
    v22 = (uint64_t)v38;
    v23 = v8;
    v51 = 0;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC63E0], (uint64_t)&protocol conformance descriptor for SymmetricKey);
    v24 = (uint64_t)v39;
    v25 = v40;
    v26 = v20;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v29 = (uint64_t)v44;
    outlined assign with take of SymmetricKey?(v24, (uint64_t)v44, &demangling cache variable for type metadata for SymmetricKey?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ReceivingKeyTetraRatchet]);
    v50 = 1;
    lazy protocol witness table accessor for type [ReceivingKeyTetraRatchet] and conformance <A> [A](&lazy protocol witness table cache variable for type [ReceivingKeyTetraRatchet] and conformance <A> [A], &lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet and conformance ReceivingKeyTetraRatchet, (uint64_t)&protocol conformance descriptor for ReceivingKeyTetraRatchet, MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v30 = v43;
    *(_QWORD *)(v29 + *(int *)(v43 + 20)) = v46;
    v49 = 2;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet and conformance TetraOutgoingSymmetricRatchet, type metadata accessor for TetraOutgoingSymmetricRatchet, (uint64_t)&protocol conformance descriptor for TetraOutgoingSymmetricRatchet);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of TetraRatchetState(v22, v29 + *(int *)(v30 + 24), type metadata accessor for TetraOutgoingSymmetricRatchet);
    v48 = 3;
    *(_DWORD *)(v29 + v34) = KeyedDecodingContainer.decode(_:forKey:)();
    v47 = 4;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    v31 = (uint64_t)v36;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v25);
    outlined assign with take of SymmetricKey?(v31, v41, &demangling cache variable for type metadata for Date?);
    outlined init with copy of TetraRatchetOuterMessage(v29, v35, type metadata accessor for TetraRatchetState);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v42);
    return outlined destroy of TetraRatchetOuterMessage(v29, type metadata accessor for TetraRatchetState);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraRatchetState@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraRatchetState.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraRatchetState(_QWORD *a1)
{
  return TetraRatchetState.encode(to:)(a1);
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UInt32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v5 = a5 - a4;
  if (!a4)
    v5 = 0;
  if (result < 0 || v5 < result)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a3 < 0 || v5 < a3)
    goto LABEL_19;
  v6 = a3 - result;
  if (a2 > 0)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2)
      goto LABEL_14;
    return 0;
  }
  if (v6 <= 0 && v6 > a2)
    return 0;
LABEL_14:
  v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }
  if (result < 0 || v5 < result)
    goto LABEL_21;
  return result;
}

uint64_t specialized Data.InlineData.withUnsafeBytes<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  closure #1 in static Data.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

unint64_t lazy protocol witness table accessor for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraRatchetState.CodingKeys, &unk_24C4BE368);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraRatchetState.CodingKeys, &unk_24C4BE368);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraRatchetState.CodingKeys, &unk_24C4BE368);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraRatchetState.CodingKeys, &unk_24C4BE368);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraRatchetState.CodingKeys and conformance TetraRatchetState.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for TetraRatchetState(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraRatchetState);
}

uint64_t type metadata accessor for ReceivingKeyTetraRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for ReceivingKeyTetraRatchet);
}

uint64_t lazy protocol witness table accessor for type [ReceivingKeyTetraRatchet] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ReceivingKeyTetraRatchet]);
    v10 = lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(a2, type metadata accessor for ReceivingKeyTetraRatchet, a3);
    result = MEMORY[0x20BD3C414](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in P256.KeyAgreement.PublicKey()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type P256.KeyAgreement.PublicKey and conformance P256.KeyAgreement.PublicKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC68D0], (uint64_t)&protocol conformance descriptor for P256.KeyAgreement.PublicKey);
}

unint64_t lazy protocol witness table accessor for type TetraMessageTypes and conformance TetraMessageTypes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraMessageTypes and conformance TetraMessageTypes;
  if (!lazy protocol witness table cache variable for type TetraMessageTypes and conformance TetraMessageTypes)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraMessageTypes, &type metadata for TetraMessageTypes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraMessageTypes and conformance TetraMessageTypes);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in TetraMessageTypes()
{
  return lazy protocol witness table accessor for type [TetraMessageTypes] and conformance [A](&lazy protocol witness table cache variable for type [TetraMessageTypes] and conformance [A], &demangling cache variable for type metadata for [TetraMessageTypes], MEMORY[0x24BEE12E0]);
}

uint64_t ObjC metadata update function for ReceivingKeyTetraRatchet()
{
  return type metadata accessor for ReceivingKeyTetraRatchet(0);
}

void type metadata completion function for ReceivingKeyTetraRatchet()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for P256.KeyAgreement.PublicKey();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Kyber768.PublicKey?(319, (unint64_t *)&lazy cache variable for type metadata for Kyber768.PublicKey?, (void (*)(uint64_t))MEMORY[0x24BDC6C08]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for SymmetricRatchet();
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t storeEnumTagSinglePayload for TetraMessageTypes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20BB15958 + 4 * byte_20BB42E3A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20BB1598C + 4 * byte_20BB42E35[v4]))();
}

uint64_t sub_20BB1598C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB15994(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BB1599CLL);
  return result;
}

uint64_t sub_20BB159A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BB159B0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20BB159B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB159BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TetraMessageTypes()
{
  return &type metadata for TetraMessageTypes;
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraRatchetState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  void *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  id v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  void (*v46)(char *, _QWORD, uint64_t, uint64_t);
  id v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void (*v70)(char *, _QWORD, uint64_t, uint64_t);
  id v71;
  uint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  __int128 v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v97;
  uint64_t *v98;
  char *v99;
  char *v100;
  int *v101;
  int *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SymmetricKey();
    v8 = *(_QWORD *)(v7 - 8);
    v105 = v8;
    v106 = v7;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 24);
    v107 = a3;
    v108 = a2;
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v12 = (char *)a1 + v11;
    v13 = (void **)((char *)a2 + v11);
    v14 = *v13;
    *(uint64_t *)((char *)a1 + v11) = (uint64_t)*v13;
    v15 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
    v16 = &v12[v15];
    v17 = (char *)v13 + v15;
    v18 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain();
    v21 = v14;
    if (v20(v17, 1, v18))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v23 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
    v24 = v23[5];
    v25 = &v12[v24];
    v26 = (char *)v13 + v24;
    v27 = type metadata accessor for TetraKEM768Key(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v103 = v28;
      v30 = type metadata accessor for Kyber768.PrivateKey();
      v31 = *(_QWORD *)(v30 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v26, 1, v30))
      {
        v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v25, v26, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v25, 0, 1, v30);
      }
      v33 = *(int *)(v27 + 20);
      v34 = &v25[v33];
      v35 = &v26[v33];
      v36 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
      v37 = *(_QWORD *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        v39 = type metadata accessor for Kyber768.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v34, v35, v39);
        v40 = *(int *)(v36 + 20);
        v97 = (uint64_t *)&v34[v40];
        v99 = v34;
        v41 = (uint64_t *)&v35[v40];
        v101 = v23;
        v42 = *v41;
        v43 = v41[1];
        outlined copy of Data._Representation(*v41, v43);
        *v97 = v42;
        v97[1] = v43;
        v44 = *(int *)(v36 + 24);
        v45 = *(void **)&v35[v44];
        v23 = v101;
        *(_QWORD *)&v99[v44] = v45;
        v46 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56);
        v47 = v45;
        v46(v99, 0, 1, v36);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v25, 0, 1, v27);
    }
    v48 = v23[6];
    v49 = &v12[v48];
    v50 = (char *)v13 + v48;
    v51 = type metadata accessor for TetraKEM1024Key(0);
    v52 = *(_QWORD *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      v104 = v52;
      v54 = type metadata accessor for Kyber1024.PrivateKey();
      v55 = *(_QWORD *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v50, 1, v54))
      {
        v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v49, v50, v54);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v49, 0, 1, v54);
      }
      v57 = *(int *)(v51 + 20);
      v58 = &v49[v57];
      v59 = &v50[v57];
      v60 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
      v61 = *(_QWORD *)(v60 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
      {
        v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        v63 = type metadata accessor for Kyber1024.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16))(v58, v59, v63);
        v64 = *(int *)(v60 + 20);
        v98 = (uint64_t *)&v58[v64];
        v100 = v58;
        v65 = (uint64_t *)&v59[v64];
        v102 = v23;
        v66 = *v65;
        v67 = v65[1];
        outlined copy of Data._Representation(*v65, v67);
        *v98 = v66;
        v98[1] = v67;
        v68 = *(int *)(v60 + 24);
        v69 = *(void **)&v59[v68];
        v23 = v102;
        *(_QWORD *)&v100[v68] = v69;
        v70 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56);
        v71 = v69;
        v70(v100, 0, 1, v60);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v49, 0, 1, v51);
    }
    v72 = v23[7];
    v73 = &v12[v72];
    v74 = (char *)v13 + v72;
    v75 = *((_QWORD *)v74 + 1);
    if (v75 >> 60 == 15)
    {
      *(_OWORD *)v73 = *(_OWORD *)v74;
    }
    else
    {
      v76 = *(_QWORD *)v74;
      outlined copy of Data._Representation(*(_QWORD *)v74, *((_QWORD *)v74 + 1));
      *(_QWORD *)v73 = v76;
      *((_QWORD *)v73 + 1) = v75;
    }
    v77 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
    v78 = &v12[v77];
    v79 = (char *)v13 + v77;
    v80 = type metadata accessor for SymmetricRatchet();
    v81 = *(_QWORD *)(v80 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
    {
      v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
      memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v78, v79, v106);
      v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(_QWORD *)&v78[*(int *)(v83 + 48)] = *(_QWORD *)&v79[*(int *)(v83 + 48)];
      *(_QWORD *)&v78[*(int *)(v80 + 20)] = *(_QWORD *)&v79[*(int *)(v80 + 20)];
      v84 = *(int *)(v80 + 24);
      v85 = &v78[v84];
      v86 = &v79[v84];
      v87 = *(_OWORD *)(v86 + 24);
      *(_OWORD *)&v78[v84 + 24] = v87;
      v88 = v87;
      v89 = **(void (***)(char *, char *, uint64_t))(v87 - 8);
      swift_bridgeObjectRetain();
      v89(v85, v86, v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
    }
    v90 = *(int *)(v107 + 32);
    *(_DWORD *)((char *)a1 + *(int *)(v107 + 28)) = *(_DWORD *)((char *)v108 + *(int *)(v107 + 28));
    v91 = (char *)a1 + v90;
    v92 = (char *)v108 + v90;
    v93 = type metadata accessor for Date();
    v94 = *(_QWORD *)(v93 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
    {
      v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v91, v92, v93);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
    }
  }
  return a1;
}

uint64_t type metadata accessor for TetraOutgoingKeyContent(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraOutgoingKeyContent);
}

uint64_t destroy for TetraRatchetState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;

  v4 = type metadata accessor for SymmetricKey();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v6 = (id *)(a1 + *(int *)(a2 + 24));

  v7 = (char *)v6 + *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v8 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  v10 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v11 = (char *)v6 + v10[5];
  v12 = type metadata accessor for TetraKEM768Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v13 = type metadata accessor for Kyber768.PrivateKey();
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13))
      (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    v15 = &v11[*(int *)(v12 + 20)];
    v16 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
    {
      v17 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v15, v17);
      outlined consume of Data._Representation(*(_QWORD *)&v15[*(int *)(v16 + 20)], *(_QWORD *)&v15[*(int *)(v16 + 20) + 8]);

    }
  }
  v18 = (char *)v6 + v10[6];
  v19 = type metadata accessor for TetraKEM1024Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
  {
    v20 = type metadata accessor for Kyber1024.PrivateKey();
    v21 = *(_QWORD *)(v20 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 1, v20))
      (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    v22 = &v18[*(int *)(v19 + 20)];
    v23 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23))
    {
      v24 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v22, v24);
      outlined consume of Data._Representation(*(_QWORD *)&v22[*(int *)(v23 + 20)], *(_QWORD *)&v22[*(int *)(v23 + 20) + 8]);

    }
  }
  v25 = (uint64_t *)((char *)v6 + v10[7]);
  v26 = v25[1];
  if (v26 >> 60 != 15)
    outlined consume of Data._Representation(*v25, v26);
  v27 = (char *)v6 + *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v28 = type metadata accessor for SymmetricRatchet();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v27, 1, v28))
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v4);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v27[*(int *)(v28 + 24)]);
  }
  v29 = a1 + *(int *)(a2 + 32);
  v30 = type metadata accessor for Date();
  v31 = *(_QWORD *)(v30 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
  return result;
}

char *initializeWithCopy for TetraRatchetState(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void (*v44)(char *, _QWORD, uint64_t, uint64_t);
  id v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  void (*v68)(char *, _QWORD, uint64_t, uint64_t);
  id v69;
  uint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  __int128 v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  int *v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;

  v6 = type metadata accessor for SymmetricKey();
  v7 = *(_QWORD *)(v6 - 8);
  v101 = v7;
  v102 = v6;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  v105 = a3;
  v106 = a2;
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = (void **)&a2[v9];
  v12 = *v11;
  *(_QWORD *)&a1[v9] = *v11;
  v13 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v14 = &v10[v13];
  v15 = (char *)v11 + v13;
  v16 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  swift_bridgeObjectRetain();
  v19 = v12;
  if (v18(v15, 1, v16))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v21 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v22 = v21[5];
  v23 = &v10[v22];
  v24 = (char *)v11 + v22;
  v25 = type metadata accessor for TetraKEM768Key(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v28 = type metadata accessor for Kyber768.PrivateKey();
    v29 = *(_QWORD *)(v28 - 8);
    v103 = a1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v24, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v23, v24, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v23, 0, 1, v28);
    }
    v31 = *(int *)(v25 + 20);
    v32 = &v23[v31];
    v33 = &v24[v31];
    v34 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v37 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v32, v33, v37);
      v38 = *(int *)(v34 + 20);
      v95 = (uint64_t *)&v32[v38];
      v97 = v32;
      v39 = (uint64_t *)&v33[v38];
      v99 = v21;
      v41 = *v39;
      v40 = v39[1];
      outlined copy of Data._Representation(*v39, v40);
      *v95 = v41;
      v95[1] = v40;
      v42 = *(int *)(v34 + 24);
      v43 = *(void **)&v33[v42];
      v21 = v99;
      *(_QWORD *)&v97[v42] = v43;
      v44 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56);
      v45 = v43;
      v44(v97, 0, 1, v34);
    }
    a1 = v103;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  v46 = v21[6];
  v47 = &v10[v46];
  v48 = (char *)v11 + v46;
  v49 = type metadata accessor for TetraKEM1024Key(0);
  v50 = *(_QWORD *)(v49 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
  {
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
  }
  else
  {
    v52 = type metadata accessor for Kyber1024.PrivateKey();
    v53 = *(_QWORD *)(v52 - 8);
    v104 = a1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v48, 1, v52))
    {
      v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v47, v48, v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v47, 0, 1, v52);
    }
    v55 = *(int *)(v49 + 20);
    v56 = &v47[v55];
    v57 = &v48[v55];
    v58 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    v59 = *(_QWORD *)(v58 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
    {
      v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v61 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v56, v57, v61);
      v62 = *(int *)(v58 + 20);
      v96 = (uint64_t *)&v56[v62];
      v98 = v56;
      v63 = (uint64_t *)&v57[v62];
      v100 = v21;
      v64 = *v63;
      v65 = v63[1];
      outlined copy of Data._Representation(*v63, v65);
      *v96 = v64;
      v96[1] = v65;
      v66 = *(int *)(v58 + 24);
      v67 = *(void **)&v57[v66];
      v21 = v100;
      *(_QWORD *)&v98[v66] = v67;
      v68 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56);
      v69 = v67;
      v68(v98, 0, 1, v58);
    }
    a1 = v104;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
  }
  v70 = v21[7];
  v71 = &v10[v70];
  v72 = (char *)v11 + v70;
  v73 = *((_QWORD *)v72 + 1);
  if (v73 >> 60 == 15)
  {
    *(_OWORD *)v71 = *(_OWORD *)v72;
  }
  else
  {
    v74 = *(_QWORD *)v72;
    outlined copy of Data._Representation(*(_QWORD *)v72, *((_QWORD *)v72 + 1));
    *(_QWORD *)v71 = v74;
    *((_QWORD *)v71 + 1) = v73;
  }
  v75 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v76 = &v10[v75];
  v77 = (char *)v11 + v75;
  v78 = type metadata accessor for SymmetricRatchet();
  v79 = *(_QWORD *)(v78 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
  {
    v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v76, v77, v102);
    v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(_QWORD *)&v76[*(int *)(v81 + 48)] = *(_QWORD *)&v77[*(int *)(v81 + 48)];
    *(_QWORD *)&v76[*(int *)(v78 + 20)] = *(_QWORD *)&v77[*(int *)(v78 + 20)];
    v82 = *(int *)(v78 + 24);
    v83 = &v76[v82];
    v84 = &v77[v82];
    v85 = *(_OWORD *)&v77[v82 + 24];
    *(_OWORD *)&v76[v82 + 24] = v85;
    v86 = v85;
    v87 = **(void (***)(char *, char *, uint64_t))(v85 - 8);
    swift_bridgeObjectRetain();
    v87(v83, v84, v86);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
  }
  v88 = *(int *)(v105 + 32);
  *(_DWORD *)&a1[*(int *)(v105 + 28)] = *(_DWORD *)&v106[*(int *)(v105 + 28)];
  v89 = &a1[v88];
  v90 = &v106[v88];
  v91 = type metadata accessor for Date();
  v92 = *(_QWORD *)(v91 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
  {
    v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v89, v90, v91);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
  }
  return a1;
}

char *assignWithCopy for TetraRatchetState(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  void (*v61)(char *, _QWORD, uint64_t, uint64_t);
  id v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  size_t v76;
  void *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(char *, uint64_t, uint64_t);
  int v82;
  int v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  void *v97;
  void (*v98)(char *, _QWORD, uint64_t, uint64_t);
  id v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(char *, uint64_t, uint64_t);
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  void (*v122)(char *, char *, uint64_t);
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(char *, uint64_t, uint64_t);
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t (*v142)(char *, uint64_t, uint64_t);
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  void *v152;
  void (*v153)(char *, _QWORD, uint64_t, uint64_t);
  id v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t, uint64_t, uint64_t);
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  void *v172;
  void (*v173)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  void *v185;
  void *v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t *v191;
  char *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  void *v198;
  void *v199;
  id v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;

  v6 = type metadata accessor for SymmetricKey();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  v208 = v7;
  v209 = v6;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v210 = a3;
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(void **)&a1[v12];
  v16 = *(void **)&a2[v12];
  *(_QWORD *)v13 = v16;
  v17 = v16;

  v18 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v19 = &v13[v18];
  v20 = &v14[v18];
  v21 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
LABEL_12:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
LABEL_13:
  v27 = type metadata accessor for TetraOutgoingKeyContent(0);
  v28 = *(int *)(v27 + 20);
  v212 = v13;
  v29 = &v13[v28];
  v30 = &v14[v28];
  v31 = type metadata accessor for TetraKEM768Key(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  v211 = v27;
  if (v34)
  {
    if (!v35)
    {
      v36 = type metadata accessor for Kyber768.PrivateKey();
      v37 = *(_QWORD *)(v36 - 8);
      v206 = a1;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v30, 1, v36))
      {
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v29, v30, v36);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v29, 0, 1, v36);
      }
      v47 = *(int *)(v31 + 20);
      v48 = &v29[v47];
      v49 = &v30[v47];
      v50 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
      v51 = *(_QWORD *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
      }
      else
      {
        v53 = type metadata accessor for Kyber768.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v48, v49, v53);
        v54 = *(int *)(v50 + 20);
        v201 = a2;
        v203 = v14;
        v55 = (uint64_t *)&v48[v54];
        v56 = (uint64_t *)&v49[v54];
        v57 = *v56;
        v58 = v56[1];
        outlined copy of Data._Representation(*v56, v58);
        *v55 = v57;
        v55[1] = v58;
        v27 = v211;
        a2 = v201;
        v14 = v203;
        v59 = *(int *)(v50 + 24);
        v60 = *(void **)&v49[v59];
        *(_QWORD *)&v48[v59] = v60;
        v61 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56);
        v62 = v60;
        v61(v48, 0, 1, v50);
      }
      a1 = v206;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_30;
    }
LABEL_19:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
LABEL_30:
    v63 = v212;
    goto LABEL_31;
  }
  if (v35)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v29, type metadata accessor for TetraKEM768Key);
    goto LABEL_19;
  }
  v40 = v14;
  v41 = a1;
  v42 = type metadata accessor for Kyber768.PrivateKey();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
  v45 = v44(v29, 1, v42);
  v46 = v44(v30, 1, v42);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v29, v30, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v29, 0, 1, v42);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v29, v42);
LABEL_72:
    v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v136 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 24))(v29, v30, v42);
LABEL_73:
  a1 = v41;
  v137 = *(int *)(v31 + 20);
  v138 = &v29[v137];
  v139 = &v30[v137];
  v140 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v141 = *(_QWORD *)(v140 - 8);
  v142 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v141 + 48);
  v143 = v142(v138, 1, v140);
  v144 = v142(v139, 1, v140);
  if (!v143)
  {
    if (!v144)
    {
      v176 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v176 - 8) + 24))(v138, v139, v176);
      v177 = *(int *)(v140 + 20);
      v178 = (uint64_t *)&v138[v177];
      v179 = (uint64_t *)&v139[v177];
      v180 = *v179;
      v181 = v179[1];
      outlined copy of Data._Representation(*v179, v181);
      v182 = *v178;
      v183 = v178[1];
      *v178 = v180;
      v178[1] = v181;
      a1 = v41;
      outlined consume of Data._Representation(v182, v183);
      v184 = *(int *)(v140 + 24);
      v185 = *(void **)&v139[v184];
      v186 = *(void **)&v138[v184];
      *(_QWORD *)&v138[v184] = v185;
      v187 = v185;

      goto LABEL_85;
    }
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v138, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
    goto LABEL_84;
  }
  if (v144)
  {
LABEL_84:
    v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
    goto LABEL_85;
  }
  v145 = type metadata accessor for Kyber768.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v138, v139, v145);
  v146 = *(int *)(v140 + 20);
  v147 = (uint64_t *)&v138[v146];
  v148 = (uint64_t *)&v139[v146];
  v149 = *v148;
  v150 = v148[1];
  outlined copy of Data._Representation(*v148, v150);
  *v147 = v149;
  v147[1] = v150;
  a1 = v41;
  v151 = *(int *)(v140 + 24);
  v152 = *(void **)&v139[v151];
  *(_QWORD *)&v138[v151] = v152;
  v153 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56);
  v154 = v152;
  v153(v138, 0, 1, v140);
LABEL_85:
  v14 = v40;
  v27 = v211;
  v63 = v212;
LABEL_31:
  v64 = *(int *)(v27 + 24);
  v65 = (char *)v63 + v64;
  v66 = &v14[v64];
  v67 = type metadata accessor for TetraKEM1024Key(0);
  v68 = *(_QWORD *)(v67 - 8);
  v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 48);
  v70 = v69(v65, 1, v67);
  v71 = v69(v66, 1, v67);
  if (!v70)
  {
    if (v71)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v65, type metadata accessor for TetraKEM1024Key);
      goto LABEL_37;
    }
    v204 = v14;
    v79 = type metadata accessor for Kyber1024.PrivateKey();
    v80 = *(_QWORD *)(v79 - 8);
    v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 48);
    v82 = v81(v65, 1, v79);
    v83 = v81(v66, 1, v79);
    if (v82)
    {
      if (!v83)
      {
        (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v65, v66, v79);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v65, 0, 1, v79);
LABEL_79:
        v14 = v204;
        v156 = *(int *)(v67 + 20);
        v157 = (uint64_t)&v65[v156];
        v158 = &v66[v156];
        v159 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        v160 = *(_QWORD *)(v159 - 8);
        v161 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 48);
        v162 = v161(v157, 1, v159);
        v163 = v161((uint64_t)v158, 1, v159);
        v63 = v212;
        if (v162)
        {
          if (!v163)
          {
            v164 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 16))(v157, v158, v164);
            v165 = *(int *)(v159 + 20);
            v166 = (uint64_t *)(v157 + v165);
            v167 = (uint64_t *)&v158[v165];
            v168 = a2;
            v169 = *v167;
            v170 = v167[1];
            outlined copy of Data._Representation(*v167, v170);
            *v166 = v169;
            v166[1] = v170;
            a2 = v168;
            v14 = v204;
            v171 = *(int *)(v159 + 24);
            v172 = *(void **)&v158[v171];
            *(_QWORD *)(v157 + v171) = v172;
            v173 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v160 + 56);
            v174 = v172;
            v173(v157, 0, 1, v159);
            goto LABEL_39;
          }
        }
        else
        {
          if (!v163)
          {
            v188 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v188 - 8) + 24))(v157, v158, v188);
            v189 = *(int *)(v159 + 20);
            v190 = (uint64_t *)(v157 + v189);
            v191 = (uint64_t *)&v158[v189];
            v192 = a2;
            v193 = *v191;
            v194 = v191[1];
            outlined copy of Data._Representation(*v191, v194);
            v195 = *v190;
            v196 = v190[1];
            *v190 = v193;
            v190[1] = v194;
            a2 = v192;
            v14 = v204;
            outlined consume of Data._Representation(v195, v196);
            v197 = *(int *)(v159 + 24);
            v198 = *(void **)&v158[v197];
            v199 = *(void **)(v157 + v197);
            *(_QWORD *)(v157 + v197) = v198;
            v200 = v198;

            goto LABEL_39;
          }
          outlined destroy of TetraRatchetOuterMessage(v157, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        v76 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?)
                                    - 8)
                        + 64);
        v77 = (void *)v157;
        v78 = v158;
LABEL_38:
        memcpy(v77, v78, v76);
LABEL_39:
        v74 = v211;
        goto LABEL_48;
      }
    }
    else
    {
      if (!v83)
      {
        (*(void (**)(char *, char *, uint64_t))(v80 + 24))(v65, v66, v79);
        goto LABEL_79;
      }
      (*(void (**)(char *, uint64_t))(v80 + 8))(v65, v79);
    }
    v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v155 - 8) + 64));
    goto LABEL_79;
  }
  if (v71)
  {
LABEL_37:
    v76 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?)
                                - 8)
                    + 64);
    v77 = v65;
    v78 = v66;
    goto LABEL_38;
  }
  v72 = type metadata accessor for Kyber1024.PrivateKey();
  v73 = *(_QWORD *)(v72 - 8);
  v74 = v211;
  v207 = a1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v66, 1, v72))
  {
    v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v65, v66, v72);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v65, 0, 1, v72);
  }
  v84 = *(int *)(v67 + 20);
  v85 = &v65[v84];
  v86 = &v66[v84];
  v87 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v88 = *(_QWORD *)(v87 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
  {
    v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
  }
  else
  {
    v90 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v90 - 8) + 16))(v85, v86, v90);
    v91 = *(int *)(v87 + 20);
    v202 = a2;
    v205 = v14;
    v92 = (uint64_t *)&v85[v91];
    v93 = (uint64_t *)&v86[v91];
    v94 = *v93;
    v95 = v93[1];
    outlined copy of Data._Representation(*v93, v95);
    *v92 = v94;
    v92[1] = v95;
    v74 = v211;
    a2 = v202;
    v14 = v205;
    v96 = *(int *)(v87 + 24);
    v97 = *(void **)&v86[v96];
    *(_QWORD *)&v85[v96] = v97;
    v98 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56);
    v99 = v97;
    v98(v85, 0, 1, v87);
  }
  a1 = v207;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
  v63 = v212;
LABEL_48:
  v100 = *(int *)(v74 + 28);
  v101 = (_QWORD *)((char *)v63 + v100);
  v102 = (uint64_t *)&v14[v100];
  v103 = *(_QWORD *)&v14[v100 + 8];
  if (*(_QWORD *)((char *)v63 + v100 + 8) >> 60 == 15)
  {
    if (v103 >> 60 != 15)
    {
      v104 = *v102;
      outlined copy of Data._Representation(*v102, v103);
      *v101 = v104;
      v101[1] = v103;
      goto LABEL_55;
    }
    goto LABEL_53;
  }
  if (v103 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v101);
LABEL_53:
    *(_OWORD *)v101 = *(_OWORD *)v102;
    goto LABEL_55;
  }
  v105 = *v102;
  outlined copy of Data._Representation(*v102, v103);
  v106 = *v101;
  v107 = v101[1];
  *v101 = v105;
  v101[1] = v103;
  outlined consume of Data._Representation(v106, v107);
LABEL_55:
  v108 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v109 = (char *)v63 + v108;
  v110 = &v14[v108];
  v111 = type metadata accessor for SymmetricRatchet();
  v112 = *(_QWORD *)(v111 - 8);
  v113 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
  v114 = v113(v109, 1, v111);
  v115 = v113(v110, 1, v111);
  if (v114)
  {
    if (!v115)
    {
      (*(void (**)(char *, char *, uint64_t))(v208 + 16))(v109, v110, v209);
      v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(_QWORD *)&v109[*(int *)(v116 + 48)] = *(_QWORD *)&v110[*(int *)(v116 + 48)];
      *(_QWORD *)&v109[*(int *)(v111 + 20)] = *(_QWORD *)&v110[*(int *)(v111 + 20)];
      v117 = *(int *)(v111 + 24);
      v118 = &v109[v117];
      v119 = a2;
      v120 = &v110[v117];
      v121 = *(_QWORD *)&v110[v117 + 24];
      *((_QWORD *)v118 + 3) = v121;
      *((_QWORD *)v118 + 4) = *((_QWORD *)v120 + 4);
      v122 = **(void (***)(char *, char *, uint64_t))(v121 - 8);
      swift_bridgeObjectRetain();
      v123 = v120;
      a2 = v119;
      v122(v118, v123, v121);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v115)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v109, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
LABEL_60:
    v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(char *, char *, uint64_t))(v208 + 24))(v109, v110, v209);
  v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)&v109[*(int *)(v135 + 48)] = *(_QWORD *)&v110[*(int *)(v135 + 48)];
  *(_QWORD *)&v109[*(int *)(v111 + 20)] = *(_QWORD *)&v110[*(int *)(v111 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)&v109[*(int *)(v111 + 24)], (uint64_t *)&v110[*(int *)(v111 + 24)]);
LABEL_61:
  *(_DWORD *)&a1[*(int *)(v210 + 28)] = *(_DWORD *)&a2[*(int *)(v210 + 28)];
  v125 = *(int *)(v210 + 32);
  v126 = &a1[v125];
  v127 = &a2[v125];
  v128 = type metadata accessor for Date();
  v129 = *(_QWORD *)(v128 - 8);
  v130 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v129 + 48);
  v131 = v130(v126, 1, v128);
  v132 = v130(v127, 1, v128);
  if (!v131)
  {
    if (!v132)
    {
      (*(void (**)(char *, char *, uint64_t))(v129 + 24))(v126, v127, v128);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v129 + 8))(v126, v128);
    goto LABEL_66;
  }
  if (v132)
  {
LABEL_66:
    v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v126, v127, v128);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v129 + 56))(v126, 0, 1, v128);
  return a1;
}

char *initializeWithTake for TetraRatchetState(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int *v73;
  int *v74;
  int *v75;
  int *v76;

  v6 = type metadata accessor for SymmetricKey();
  v7 = *(_QWORD *)(v6 - 8);
  v69 = v7;
  v70 = v6;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v12 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v13 = &v10[v12];
  v14 = &v11[v12];
  v15 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v19 = v18[5];
  v20 = &v10[v19];
  v21 = &v11[v19];
  v22 = type metadata accessor for TetraKEM768Key(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v71 = a1;
    v73 = v18;
    v25 = type metadata accessor for Kyber768.PrivateKey();
    v26 = *(_QWORD *)(v25 - 8);
    v75 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v21, 1, v25))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v20, v21, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v20, 0, 1, v25);
    }
    v28 = *(int *)(v22 + 20);
    v29 = &v20[v28];
    v30 = &v21[v28];
    v31 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v34 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v29, v30, v34);
      *(_OWORD *)&v29[*(int *)(v31 + 20)] = *(_OWORD *)&v30[*(int *)(v31 + 20)];
      *(_QWORD *)&v29[*(int *)(v31 + 24)] = *(_QWORD *)&v30[*(int *)(v31 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v18 = v73;
    a3 = v75;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    a1 = v71;
  }
  v35 = v18[6];
  v36 = &v10[v35];
  v37 = &v11[v35];
  v38 = type metadata accessor for TetraKEM1024Key(0);
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    v72 = a1;
    v74 = v18;
    v41 = type metadata accessor for Kyber1024.PrivateKey();
    v42 = *(_QWORD *)(v41 - 8);
    v76 = a3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v37, 1, v41))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v36, v37, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v36, 0, 1, v41);
    }
    v44 = *(int *)(v38 + 20);
    v45 = &v36[v44];
    v46 = &v37[v44];
    v47 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      v50 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v45, v46, v50);
      *(_OWORD *)&v45[*(int *)(v47 + 20)] = *(_OWORD *)&v46[*(int *)(v47 + 20)];
      *(_QWORD *)&v45[*(int *)(v47 + 24)] = *(_QWORD *)&v46[*(int *)(v47 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    v18 = v74;
    a3 = v76;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    a1 = v72;
  }
  *(_OWORD *)&v10[v18[7]] = *(_OWORD *)&v11[v18[7]];
  v51 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v52 = &v10[v51];
  v53 = &v11[v51];
  v54 = type metadata accessor for SymmetricRatchet();
  v55 = *(_QWORD *)(v54 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
  {
    v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v52, v53, v70);
    v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(_QWORD *)&v52[*(int *)(v57 + 48)] = *(_QWORD *)&v53[*(int *)(v57 + 48)];
    *(_QWORD *)&v52[*(int *)(v54 + 20)] = *(_QWORD *)&v53[*(int *)(v54 + 20)];
    v58 = *(int *)(v54 + 24);
    v59 = &v52[v58];
    v60 = &v53[v58];
    v61 = *((_OWORD *)v60 + 1);
    *(_OWORD *)v59 = *(_OWORD *)v60;
    *((_OWORD *)v59 + 1) = v61;
    *((_QWORD *)v59 + 4) = *((_QWORD *)v60 + 4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  }
  v62 = a3[8];
  *(_DWORD *)&a1[a3[7]] = *(_DWORD *)&a2[a3[7]];
  v63 = &a1[v62];
  v64 = &a2[v62];
  v65 = type metadata accessor for Date();
  v66 = *(_QWORD *)(v65 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
  {
    v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v63, v64, v65);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
  }
  return a1;
}

char *assignWithTake for TetraRatchetState(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  void *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  int v42;
  int v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t, uint64_t);
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  void *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(char *, uint64_t, uint64_t);
  int v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(char *, uint64_t, uint64_t);
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(char *, uint64_t, uint64_t);
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t);
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(uint64_t, uint64_t, uint64_t);
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  int *v151;

  v6 = type metadata accessor for SymmetricKey();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  v144 = v7;
  v145 = v6;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  swift_bridgeObjectRelease();
  v150 = a3;
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(void **)&a1[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;

  v16 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v17 = &v13[v16];
  v18 = &v14[v16];
  v19 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_12:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_13:
  v151 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v25 = v151[5];
  v26 = &v13[v25];
  v27 = &v14[v25];
  v28 = type metadata accessor for TetraKEM768Key(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (v32)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v26, type metadata accessor for TetraKEM768Key);
      goto LABEL_19;
    }
    v147 = a2;
    v39 = type metadata accessor for Kyber768.PrivateKey();
    v40 = *(_QWORD *)(v39 - 8);
    v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
    v42 = v41(v26, 1, v39);
    v43 = v41(v27, 1, v39);
    if (v42)
    {
      if (!v43)
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v26, v27, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v26, 0, 1, v39);
LABEL_70:
        a2 = v147;
        v113 = *(int *)(v28 + 20);
        v114 = (uint64_t)&v26[v113];
        v115 = &v27[v113];
        v116 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        v117 = *(_QWORD *)(v116 - 8);
        v118 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
        v119 = v118(v114, 1, v116);
        v120 = v118((uint64_t)v115, 1, v116);
        if (v119)
        {
          if (!v120)
          {
            v121 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 32))(v114, v115, v121);
            *(_OWORD *)(v114 + *(int *)(v116 + 20)) = *(_OWORD *)&v115[*(int *)(v116 + 20)];
            *(_QWORD *)(v114 + *(int *)(v116 + 24)) = *(_QWORD *)&v115[*(int *)(v116 + 24)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
            goto LABEL_31;
          }
        }
        else
        {
          if (!v120)
          {
            v132 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v132 - 8) + 40))(v114, v115, v132);
            v133 = *(int *)(v116 + 20);
            v134 = *(_QWORD *)(v114 + v133);
            v135 = *(_QWORD *)(v114 + v133 + 8);
            *(_OWORD *)(v114 + v133) = *(_OWORD *)&v115[v133];
            outlined consume of Data._Representation(v134, v135);
            v136 = *(int *)(v116 + 24);
            v137 = *(void **)(v114 + v136);
            *(_QWORD *)(v114 + v136) = *(_QWORD *)&v115[v136];

            goto LABEL_31;
          }
          outlined destroy of TetraRatchetOuterMessage(v114, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        v36 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?)
                                    - 8)
                        + 64);
        v37 = (void *)v114;
        v38 = v115;
LABEL_20:
        memcpy(v37, v38, v36);
        goto LABEL_31;
      }
    }
    else
    {
      if (!v43)
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 40))(v26, v27, v39);
        goto LABEL_70;
      }
      (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v39);
    }
    v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
    goto LABEL_70;
  }
  if (v32)
  {
LABEL_19:
    v36 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?)
                                - 8)
                    + 64);
    v37 = v26;
    v38 = v27;
    goto LABEL_20;
  }
  v33 = type metadata accessor for Kyber768.PrivateKey();
  v34 = *(_QWORD *)(v33 - 8);
  v146 = a2;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v27, 1, v33))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v26, v27, v33);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v26, 0, 1, v33);
  }
  v44 = *(int *)(v28 + 20);
  v45 = &v26[v44];
  v46 = &v27[v44];
  v47 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    v50 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v45, v46, v50);
    *(_OWORD *)&v45[*(int *)(v47 + 20)] = *(_OWORD *)&v46[*(int *)(v47 + 20)];
    *(_QWORD *)&v45[*(int *)(v47 + 24)] = *(_QWORD *)&v46[*(int *)(v47 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  a2 = v146;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_31:
  v51 = v151[6];
  v52 = &v13[v51];
  v53 = &v14[v51];
  v54 = type metadata accessor for TetraKEM1024Key(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56(v53, 1, v54);
  if (!v57)
  {
    if (v58)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v52, type metadata accessor for TetraKEM1024Key);
      goto LABEL_37;
    }
    v149 = a2;
    v65 = type metadata accessor for Kyber1024.PrivateKey();
    v66 = *(_QWORD *)(v65 - 8);
    v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
    v68 = v67(v52, 1, v65);
    v69 = v67(v53, 1, v65);
    if (v68)
    {
      if (!v69)
      {
        (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v52, v53, v65);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v52, 0, 1, v65);
LABEL_76:
        a2 = v149;
        v123 = *(int *)(v54 + 20);
        v124 = (uint64_t)&v52[v123];
        v125 = &v53[v123];
        v126 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        v127 = *(_QWORD *)(v126 - 8);
        v128 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v127 + 48);
        v129 = v128(v124, 1, v126);
        v130 = v128((uint64_t)v125, 1, v126);
        if (v129)
        {
          if (!v130)
          {
            v131 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v131 - 8) + 32))(v124, v125, v131);
            *(_OWORD *)(v124 + *(int *)(v126 + 20)) = *(_OWORD *)&v125[*(int *)(v126 + 20)];
            *(_QWORD *)(v124 + *(int *)(v126 + 24)) = *(_QWORD *)&v125[*(int *)(v126 + 24)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v127 + 56))(v124, 0, 1, v126);
            goto LABEL_47;
          }
        }
        else
        {
          if (!v130)
          {
            v138 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 40))(v124, v125, v138);
            v139 = *(int *)(v126 + 20);
            v140 = *(_QWORD *)(v124 + v139);
            v141 = *(_QWORD *)(v124 + v139 + 8);
            *(_OWORD *)(v124 + v139) = *(_OWORD *)&v125[v139];
            outlined consume of Data._Representation(v140, v141);
            v142 = *(int *)(v126 + 24);
            v143 = *(void **)(v124 + v142);
            *(_QWORD *)(v124 + v142) = *(_QWORD *)&v125[v142];

            goto LABEL_47;
          }
          outlined destroy of TetraRatchetOuterMessage(v124, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        v62 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?)
                                    - 8)
                        + 64);
        v63 = (void *)v124;
        v64 = v125;
LABEL_38:
        memcpy(v63, v64, v62);
        goto LABEL_47;
      }
    }
    else
    {
      if (!v69)
      {
        (*(void (**)(char *, char *, uint64_t))(v66 + 40))(v52, v53, v65);
        goto LABEL_76;
      }
      (*(void (**)(char *, uint64_t))(v66 + 8))(v52, v65);
    }
    v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
    goto LABEL_76;
  }
  if (v58)
  {
LABEL_37:
    v62 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?)
                                - 8)
                    + 64);
    v63 = v52;
    v64 = v53;
    goto LABEL_38;
  }
  v59 = type metadata accessor for Kyber1024.PrivateKey();
  v60 = *(_QWORD *)(v59 - 8);
  v148 = a2;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v53, 1, v59))
  {
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v52, v53, v59);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v52, 0, 1, v59);
  }
  v70 = *(int *)(v54 + 20);
  v71 = &v52[v70];
  v72 = &v53[v70];
  v73 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v74 = *(_QWORD *)(v73 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
  {
    v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    v76 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 32))(v71, v72, v76);
    *(_OWORD *)&v71[*(int *)(v73 + 20)] = *(_OWORD *)&v72[*(int *)(v73 + 20)];
    *(_QWORD *)&v71[*(int *)(v73 + 24)] = *(_QWORD *)&v72[*(int *)(v73 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
  }
  a2 = v148;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
LABEL_47:
  v77 = v151[7];
  v78 = (uint64_t)&v13[v77];
  v79 = &v14[v77];
  v80 = *(_QWORD *)&v13[v77 + 8];
  if (v80 >> 60 == 15)
  {
LABEL_50:
    *(_OWORD *)v78 = *(_OWORD *)v79;
    goto LABEL_52;
  }
  v81 = *((_QWORD *)v79 + 1);
  if (v81 >> 60 == 15)
  {
    outlined destroy of Data(v78);
    goto LABEL_50;
  }
  v82 = *(_QWORD *)v78;
  *(_QWORD *)v78 = *(_QWORD *)v79;
  *(_QWORD *)(v78 + 8) = v81;
  outlined consume of Data._Representation(v82, v80);
LABEL_52:
  v83 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v84 = &v13[v83];
  v85 = &v14[v83];
  v86 = type metadata accessor for SymmetricRatchet();
  v87 = *(_QWORD *)(v86 - 8);
  v88 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v87 + 48);
  v89 = v88(v84, 1, v86);
  v90 = v88(v85, 1, v86);
  if (v89)
  {
    if (!v90)
    {
      (*(void (**)(char *, char *, uint64_t))(v144 + 32))(v84, v85, v145);
      v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(_QWORD *)&v84[*(int *)(v91 + 48)] = *(_QWORD *)&v85[*(int *)(v91 + 48)];
      *(_QWORD *)&v84[*(int *)(v86 + 20)] = *(_QWORD *)&v85[*(int *)(v86 + 20)];
      v92 = *(int *)(v86 + 24);
      v93 = &v84[v92];
      v94 = &v85[v92];
      v95 = *((_OWORD *)v94 + 1);
      *(_OWORD *)v93 = *(_OWORD *)v94;
      *((_OWORD *)v93 + 1) = v95;
      *((_QWORD *)v93 + 4) = *((_QWORD *)v94 + 4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v90)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v84, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
LABEL_57:
    v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    goto LABEL_58;
  }
  (*(void (**)(char *, char *, uint64_t))(v144 + 40))(v84, v85, v145);
  v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)&v84[*(int *)(v107 + 48)] = *(_QWORD *)&v85[*(int *)(v107 + 48)];
  *(_QWORD *)&v84[*(int *)(v86 + 20)] = *(_QWORD *)&v85[*(int *)(v86 + 20)];
  swift_bridgeObjectRelease();
  v108 = *(int *)(v86 + 24);
  v109 = &v84[v108];
  v110 = &v85[v108];
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v84[v108]);
  v111 = *((_OWORD *)v110 + 1);
  *(_OWORD *)v109 = *(_OWORD *)v110;
  *((_OWORD *)v109 + 1) = v111;
  *((_QWORD *)v109 + 4) = *((_QWORD *)v110 + 4);
LABEL_58:
  v97 = *(int *)(v150 + 32);
  *(_DWORD *)&a1[*(int *)(v150 + 28)] = *(_DWORD *)&a2[*(int *)(v150 + 28)];
  v98 = &a1[v97];
  v99 = &a2[v97];
  v100 = type metadata accessor for Date();
  v101 = *(_QWORD *)(v100 - 8);
  v102 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v101 + 48);
  v103 = v102(v98, 1, v100);
  v104 = v102(v99, 1, v100);
  if (!v103)
  {
    if (!v104)
    {
      (*(void (**)(char *, char *, uint64_t))(v101 + 40))(v98, v99, v100);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v101 + 8))(v98, v100);
    goto LABEL_63;
  }
  if (v104)
  {
LABEL_63:
    v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v98, v99, v100);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraRatchetState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB18A64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v13 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      v8 = v13;
      v15 = a3[6];
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      v14 = *(_QWORD *)(v8 - 8);
      v15 = a3[8];
    }
    v10 = a1 + v15;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[5]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for TetraRatchetState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB18B44(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + a4[5]) = (a2 - 1);
      return result;
    }
    v13 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[6];
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[8];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for TetraRatchetState()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Kyber768.PublicKey?(319, &lazy cache variable for type metadata for SymmetricKey?, (void (*)(uint64_t))MEMORY[0x24BDC63E0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for TetraOutgoingSymmetricRatchet(319);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Kyber768.PublicKey?(319, &lazy cache variable for type metadata for Date?, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void **initializeBufferWithCopyOfBuffer for TetraOutgoingKeyContent(void **a1, void **a2, int *a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  void (*v38)(char *, _QWORD, uint64_t, uint64_t);
  id v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  void (*v62)(char *, _QWORD, uint64_t, uint64_t);
  id v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v70;
  uint64_t *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
    v9 = (char *)v7 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    v14 = v4;
    if (v13(v10, 1, v11))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[5];
    v17 = (char *)v7 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for TetraKEM768Key(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v22 = type metadata accessor for Kyber768.PrivateKey();
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v22))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v17, v18, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v17, 0, 1, v22);
      }
      v25 = *(int *)(v19 + 20);
      v26 = &v17[v25];
      v27 = &v18[v25];
      v28 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        v31 = type metadata accessor for Kyber768.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v26, v27, v31);
        v32 = *(int *)(v28 + 20);
        v70 = (uint64_t *)&v26[v32];
        v72 = v26;
        v33 = (uint64_t *)&v27[v32];
        v74 = v20;
        v34 = *v33;
        v35 = v33[1];
        outlined copy of Data._Representation(*v33, v35);
        *v70 = v34;
        v70[1] = v35;
        v20 = v74;
        v36 = *(int *)(v28 + 24);
        v37 = *(void **)&v27[v36];
        *(_QWORD *)&v72[v36] = v37;
        v38 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
        v39 = v37;
        v38(v72, 0, 1, v28);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v40 = a3[6];
    v41 = (char *)v7 + v40;
    v42 = (char *)a2 + v40;
    v43 = type metadata accessor for TetraKEM1024Key(0);
    v44 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
    {
      v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      v46 = type metadata accessor for Kyber1024.PrivateKey();
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v42, 1, v46))
      {
        v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v41, v42, v46);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v41, 0, 1, v46);
      }
      v49 = *(int *)(v43 + 20);
      v50 = &v41[v49];
      v51 = &v42[v49];
      v52 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
      v53 = *(_QWORD *)(v52 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
      {
        v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        v55 = type metadata accessor for Kyber1024.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v50, v51, v55);
        v56 = *(int *)(v52 + 20);
        v71 = (uint64_t *)&v50[v56];
        v73 = v50;
        v57 = (uint64_t *)&v51[v56];
        v75 = v44;
        v58 = *v57;
        v59 = v57[1];
        outlined copy of Data._Representation(*v57, v59);
        *v71 = v58;
        v71[1] = v59;
        v44 = v75;
        v60 = *(int *)(v52 + 24);
        v61 = *(void **)&v51[v60];
        *(_QWORD *)&v73[v60] = v61;
        v62 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56);
        v63 = v61;
        v62(v73, 0, 1, v52);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
    }
    v64 = a3[7];
    v65 = (char *)v7 + v64;
    v66 = (char *)a2 + v64;
    v67 = *((_QWORD *)v66 + 1);
    if (v67 >> 60 == 15)
    {
      *(_OWORD *)v65 = *(_OWORD *)v66;
    }
    else
    {
      v68 = *(_QWORD *)v66;
      outlined copy of Data._Representation(*(_QWORD *)v66, *((_QWORD *)v66 + 1));
      *(_QWORD *)v65 = v68;
      *((_QWORD *)v65 + 1) = v67;
    }
  }
  return v7;
}

void destroy for TetraOutgoingKeyContent(id *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;

  v4 = (char *)a1 + *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v5 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v7 = (char *)a1 + a2[5];
  v8 = type metadata accessor for TetraKEM768Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
  {
    v9 = type metadata accessor for Kyber768.PrivateKey();
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
      (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    v11 = &v7[*(int *)(v8 + 20)];
    v12 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
    {
      v13 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
      outlined consume of Data._Representation(*(_QWORD *)&v11[*(int *)(v12 + 20)], *(_QWORD *)&v11[*(int *)(v12 + 20) + 8]);

    }
  }
  v14 = (char *)a1 + a2[6];
  v15 = type metadata accessor for TetraKEM1024Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = type metadata accessor for Kyber1024.PrivateKey();
    v17 = *(_QWORD *)(v16 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
      (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
    v18 = &v14[*(int *)(v15 + 20)];
    v19 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
    {
      v20 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v18, v20);
      outlined consume of Data._Representation(*(_QWORD *)&v18[*(int *)(v19 + 20)], *(_QWORD *)&v18[*(int *)(v19 + 20) + 8]);

    }
  }
  v21 = (uint64_t *)((char *)a1 + a2[7]);
  v22 = v21[1];
  if (v22 >> 60 != 15)
    outlined consume of Data._Representation(*v21, v22);
}

void **initializeWithCopy for TetraOutgoingKeyContent(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void (*v37)(char *, _QWORD, uint64_t, uint64_t);
  id v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  void (*v61)(char *, _QWORD, uint64_t, uint64_t);
  id v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  int *v73;
  int *v74;

  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v6;
  if (v12(v9, 1, v10))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[5];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for TetraKEM768Key(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = type metadata accessor for Kyber768.PrivateKey();
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v17, 1, v21))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v16, v17, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v16, 0, 1, v21);
    }
    v24 = *(int *)(v18 + 20);
    v25 = &v16[v24];
    v26 = &v17[v24];
    v27 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v25, v26, v30);
      v31 = *(int *)(v27 + 20);
      v69 = (uint64_t *)&v25[v31];
      v71 = v25;
      v32 = (uint64_t *)&v26[v31];
      v73 = a3;
      v33 = *v32;
      v34 = v32[1];
      outlined copy of Data._Representation(*v32, v34);
      *v69 = v33;
      v69[1] = v34;
      a3 = v73;
      v35 = *(int *)(v27 + 24);
      v36 = *(void **)&v26[v35];
      *(_QWORD *)&v71[v35] = v36;
      v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56);
      v38 = v36;
      v37(v71, 0, 1, v27);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v39 = a3[6];
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = type metadata accessor for TetraKEM1024Key(0);
  v43 = *(_QWORD *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    v45 = type metadata accessor for Kyber1024.PrivateKey();
    v46 = *(_QWORD *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v41, 1, v45))
    {
      v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v40, v41, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v40, 0, 1, v45);
    }
    v48 = *(int *)(v42 + 20);
    v49 = &v40[v48];
    v50 = &v41[v48];
    v51 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    v52 = *(_QWORD *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      v54 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v49, v50, v54);
      v55 = *(int *)(v51 + 20);
      v70 = (uint64_t *)&v49[v55];
      v72 = v49;
      v56 = (uint64_t *)&v50[v55];
      v74 = a3;
      v57 = *v56;
      v58 = v56[1];
      outlined copy of Data._Representation(*v56, v58);
      *v70 = v57;
      v70[1] = v58;
      a3 = v74;
      v59 = *(int *)(v51 + 24);
      v60 = *(void **)&v50[v59];
      *(_QWORD *)&v72[v59] = v60;
      v61 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56);
      v62 = v60;
      v61(v72, 0, 1, v51);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  }
  v63 = a3[7];
  v64 = (char *)a1 + v63;
  v65 = (char *)a2 + v63;
  v66 = *((_QWORD *)v65 + 1);
  if (v66 >> 60 == 15)
  {
    *(_OWORD *)v64 = *(_OWORD *)v65;
  }
  else
  {
    v67 = *(_QWORD *)v65;
    outlined copy of Data._Representation(*(_QWORD *)v65, *((_QWORD *)v65 + 1));
    *(_QWORD *)v64 = v67;
    *((_QWORD *)v64 + 1) = v66;
  }
  return a1;
}

void **assignWithCopy for TetraOutgoingKeyContent(void **a1, void **a2, int *a3)
{
  void **v4;
  void **v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  void (*v52)(char *, _QWORD, uint64_t, uint64_t);
  id v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  size_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  int v71;
  int v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  void (*v87)(char *, _QWORD, uint64_t, uint64_t);
  id v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(uint64_t, uint64_t, uint64_t);
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  void *v114;
  void (*v115)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)(uint64_t, uint64_t, uint64_t);
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  void (*v134)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  void *v145;
  void *v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  void *v157;
  void *v158;
  id v159;
  void **v160;
  void **v161;
  void **v162;
  void **v163;
  int *v164;
  int *v165;
  int *v166;

  v4 = a2;
  v5 = a1;
  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  v8 = v7;

  v9 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v10 = (char *)v5 + v9;
  v11 = (char *)v4 + v9;
  v12 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = a3[5];
  v19 = (char *)v5 + v18;
  v20 = (char *)v4 + v18;
  v21 = type metadata accessor for TetraKEM768Key(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (v25)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v19, type metadata accessor for TetraKEM768Key);
      goto LABEL_13;
    }
    v32 = a3;
    v33 = type metadata accessor for Kyber768.PrivateKey();
    v34 = *(_QWORD *)(v33 - 8);
    v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
    v36 = v35(v19, 1, v33);
    v37 = v35(v20, 1, v33);
    if (v36)
    {
      if (!v37)
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v19, v20, v33);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v19, 0, 1, v33);
LABEL_51:
        a3 = v32;
        v99 = *(int *)(v21 + 20);
        v100 = (uint64_t)&v19[v99];
        v101 = &v20[v99];
        v102 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        v103 = *(_QWORD *)(v102 - 8);
        v104 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48);
        v105 = v104(v100, 1, v102);
        v106 = v104((uint64_t)v101, 1, v102);
        if (v105)
        {
          if (!v106)
          {
            v107 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v107 - 8) + 16))(v100, v101, v107);
            v108 = *(int *)(v102 + 20);
            v109 = (uint64_t *)(v100 + v108);
            v110 = (uint64_t *)&v101[v108];
            v111 = *v110;
            v112 = v110[1];
            outlined copy of Data._Representation(*v110, v112);
            *v109 = v111;
            v109[1] = v112;
            a3 = v32;
            v113 = *(int *)(v102 + 24);
            v114 = *(void **)&v101[v113];
            *(_QWORD *)(v100 + v113) = v114;
            v115 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v103 + 56);
            v116 = v114;
            v115(v100, 0, 1, v102);
            goto LABEL_24;
          }
        }
        else
        {
          if (!v106)
          {
            v136 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 24))(v100, v101, v136);
            v137 = *(int *)(v102 + 20);
            v138 = (uint64_t *)(v100 + v137);
            v139 = (uint64_t *)&v101[v137];
            v140 = *v139;
            v141 = v139[1];
            outlined copy of Data._Representation(*v139, v141);
            v142 = *v138;
            v143 = v138[1];
            *v138 = v140;
            v138[1] = v141;
            a3 = v32;
            outlined consume of Data._Representation(v142, v143);
            v144 = *(int *)(v102 + 24);
            v145 = *(void **)&v101[v144];
            v146 = *(void **)(v100 + v144);
            *(_QWORD *)(v100 + v144) = v145;
            v147 = v145;

            goto LABEL_24;
          }
          outlined destroy of TetraRatchetOuterMessage(v100, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?)
                                    - 8)
                        + 64);
        v30 = (void *)v100;
        v31 = v101;
LABEL_14:
        memcpy(v30, v31, v29);
        goto LABEL_24;
      }
    }
    else
    {
      if (!v37)
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 24))(v19, v20, v33);
        goto LABEL_51;
      }
      (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v33);
    }
    v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    goto LABEL_51;
  }
  if (v25)
  {
LABEL_13:
    v29 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?)
                                - 8)
                    + 64);
    v30 = v19;
    v31 = v20;
    goto LABEL_14;
  }
  v26 = type metadata accessor for Kyber768.PrivateKey();
  v27 = *(_QWORD *)(v26 - 8);
  v164 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v20, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v19, v20, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v19, 0, 1, v26);
  }
  v38 = *(int *)(v21 + 20);
  v39 = &v19[v38];
  v40 = &v20[v38];
  v41 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v44 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v39, v40, v44);
    v45 = *(int *)(v41 + 20);
    v46 = (uint64_t *)&v39[v45];
    v47 = (uint64_t *)&v40[v45];
    v160 = v4;
    v162 = v5;
    v48 = *v47;
    v49 = v47[1];
    outlined copy of Data._Representation(*v47, v49);
    *v46 = v48;
    v46[1] = v49;
    v4 = v160;
    v5 = v162;
    v50 = *(int *)(v41 + 24);
    v51 = *(void **)&v40[v50];
    *(_QWORD *)&v39[v50] = v51;
    v52 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56);
    v53 = v51;
    v52(v39, 0, 1, v41);
  }
  a3 = v164;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_24:
  v54 = a3[6];
  v55 = (char *)v5 + v54;
  v56 = (char *)v4 + v54;
  v57 = type metadata accessor for TetraKEM1024Key(0);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
  v60 = v59(v55, 1, v57);
  v61 = v59(v56, 1, v57);
  if (!v60)
  {
    if (v61)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v55, type metadata accessor for TetraKEM1024Key);
      goto LABEL_30;
    }
    v166 = a3;
    v68 = type metadata accessor for Kyber1024.PrivateKey();
    v69 = *(_QWORD *)(v68 - 8);
    v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
    v71 = v70(v55, 1, v68);
    v72 = v70(v56, 1, v68);
    if (v71)
    {
      if (!v72)
      {
        (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v55, v56, v68);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v55, 0, 1, v68);
LABEL_57:
        a3 = v166;
        v118 = *(int *)(v57 + 20);
        v119 = (uint64_t)&v55[v118];
        v120 = &v56[v118];
        v121 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        v122 = *(_QWORD *)(v121 - 8);
        v123 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
        v124 = v123(v119, 1, v121);
        v125 = v123((uint64_t)v120, 1, v121);
        if (v124)
        {
          if (!v125)
          {
            v126 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 16))(v119, v120, v126);
            v127 = *(int *)(v121 + 20);
            v128 = (uint64_t *)(v119 + v127);
            v129 = (uint64_t *)&v120[v127];
            v130 = *v129;
            v131 = v129[1];
            outlined copy of Data._Representation(*v129, v131);
            *v128 = v130;
            v128[1] = v131;
            a3 = v166;
            v132 = *(int *)(v121 + 24);
            v133 = *(void **)&v120[v132];
            *(_QWORD *)(v119 + v132) = v133;
            v134 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v122 + 56);
            v135 = v133;
            v134(v119, 0, 1, v121);
            goto LABEL_40;
          }
        }
        else
        {
          if (!v125)
          {
            v148 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v148 - 8) + 24))(v119, v120, v148);
            v149 = *(int *)(v121 + 20);
            v150 = (uint64_t *)(v119 + v149);
            v151 = (uint64_t *)&v120[v149];
            v152 = *v151;
            v153 = v151[1];
            outlined copy of Data._Representation(*v151, v153);
            v154 = *v150;
            v155 = v150[1];
            *v150 = v152;
            v150[1] = v153;
            a3 = v166;
            outlined consume of Data._Representation(v154, v155);
            v156 = *(int *)(v121 + 24);
            v157 = *(void **)&v120[v156];
            v158 = *(void **)(v119 + v156);
            *(_QWORD *)(v119 + v156) = v157;
            v159 = v157;

            goto LABEL_40;
          }
          outlined destroy of TetraRatchetOuterMessage(v119, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        v65 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?)
                                    - 8)
                        + 64);
        v66 = (void *)v119;
        v67 = v120;
LABEL_31:
        memcpy(v66, v67, v65);
        goto LABEL_40;
      }
    }
    else
    {
      if (!v72)
      {
        (*(void (**)(char *, char *, uint64_t))(v69 + 24))(v55, v56, v68);
        goto LABEL_57;
      }
      (*(void (**)(char *, uint64_t))(v69 + 8))(v55, v68);
    }
    v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_57;
  }
  if (v61)
  {
LABEL_30:
    v65 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?)
                                - 8)
                    + 64);
    v66 = v55;
    v67 = v56;
    goto LABEL_31;
  }
  v62 = type metadata accessor for Kyber1024.PrivateKey();
  v63 = *(_QWORD *)(v62 - 8);
  v165 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v56, 1, v62))
  {
    v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v55, v56, v62);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v55, 0, 1, v62);
  }
  v73 = *(int *)(v57 + 20);
  v74 = &v55[v73];
  v75 = &v56[v73];
  v76 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v77 = *(_QWORD *)(v76 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
  {
    v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
  }
  else
  {
    v79 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v79 - 8) + 16))(v74, v75, v79);
    v80 = *(int *)(v76 + 20);
    v81 = (uint64_t *)&v74[v80];
    v82 = (uint64_t *)&v75[v80];
    v161 = v4;
    v163 = v5;
    v83 = *v82;
    v84 = v82[1];
    outlined copy of Data._Representation(*v82, v84);
    *v81 = v83;
    v81[1] = v84;
    v4 = v161;
    v5 = v163;
    v85 = *(int *)(v76 + 24);
    v86 = *(void **)&v75[v85];
    *(_QWORD *)&v74[v85] = v86;
    v87 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56);
    v88 = v86;
    v87(v74, 0, 1, v76);
  }
  a3 = v165;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
LABEL_40:
  v89 = a3[7];
  v90 = (uint64_t *)((char *)v5 + v89);
  v91 = (uint64_t *)((char *)v4 + v89);
  v92 = *(unint64_t *)((char *)v4 + v89 + 8);
  if (*(unint64_t *)((char *)v5 + v89 + 8) >> 60 != 15)
  {
    if (v92 >> 60 != 15)
    {
      v94 = *v91;
      outlined copy of Data._Representation(v94, v92);
      v95 = *v90;
      v96 = v90[1];
      *v90 = v94;
      v90[1] = v92;
      outlined consume of Data._Representation(v95, v96);
      return v5;
    }
    outlined destroy of Data((uint64_t)v90);
    goto LABEL_45;
  }
  if (v92 >> 60 == 15)
  {
LABEL_45:
    *(_OWORD *)v90 = *(_OWORD *)v91;
    return v5;
  }
  v93 = *v91;
  outlined copy of Data._Representation(v93, v92);
  *v90 = v93;
  v90[1] = v92;
  return v5;
}

_QWORD *initializeWithTake for TetraOutgoingKeyContent(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[5];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for TetraKEM768Key(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = type metadata accessor for Kyber768.PrivateKey();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v13, v14, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, v18);
    }
    v21 = *(int *)(v15 + 20);
    v22 = &v13[v21];
    v23 = &v14[v21];
    v24 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v27 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v22, v23, v27);
      *(_OWORD *)&v22[*(int *)(v24 + 20)] = *(_OWORD *)&v23[*(int *)(v24 + 20)];
      *(_QWORD *)&v22[*(int *)(v24 + 24)] = *(_QWORD *)&v23[*(int *)(v24 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v28 = a3[6];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = type metadata accessor for TetraKEM1024Key(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v34 = type metadata accessor for Kyber1024.PrivateKey();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v30, 1, v34))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v29, v30, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v29, 0, 1, v34);
    }
    v37 = *(int *)(v31 + 20);
    v38 = &v29[v37];
    v39 = &v30[v37];
    v40 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    v41 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v43 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v38, v39, v43);
      *(_OWORD *)&v38[*(int *)(v40 + 20)] = *(_OWORD *)&v39[*(int *)(v40 + 20)];
      *(_QWORD *)&v38[*(int *)(v40 + 24)] = *(_QWORD *)&v39[*(int *)(v40 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

void **assignWithTake for TetraOutgoingKeyContent(void **a1, void **a2, int *a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t);
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void *v106;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[5];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for TetraKEM768Key(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (v23)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v17, type metadata accessor for TetraKEM768Key);
      goto LABEL_13;
    }
    v30 = type metadata accessor for Kyber768.PrivateKey();
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
    v33 = v32(v17, 1, v30);
    v34 = v32(v18, 1, v30);
    if (v33)
    {
      if (!v34)
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v17, v18, v30);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v17, 0, 1, v30);
LABEL_49:
        v76 = *(int *)(v19 + 20);
        v77 = (uint64_t)&v17[v76];
        v78 = &v18[v76];
        v79 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        v80 = *(_QWORD *)(v79 - 8);
        v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
        v82 = v81(v77, 1, v79);
        v83 = v81((uint64_t)v78, 1, v79);
        if (v82)
        {
          if (!v83)
          {
            v84 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 32))(v77, v78, v84);
            *(_OWORD *)(v77 + *(int *)(v79 + 20)) = *(_OWORD *)&v78[*(int *)(v79 + 20)];
            *(_QWORD *)(v77 + *(int *)(v79 + 24)) = *(_QWORD *)&v78[*(int *)(v79 + 24)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
            goto LABEL_24;
          }
        }
        else
        {
          if (!v83)
          {
            v95 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v95 - 8) + 40))(v77, v78, v95);
            v96 = *(int *)(v79 + 20);
            v97 = *(_QWORD *)(v77 + v96);
            v98 = *(_QWORD *)(v77 + v96 + 8);
            *(_OWORD *)(v77 + v96) = *(_OWORD *)&v78[v96];
            outlined consume of Data._Representation(v97, v98);
            v99 = *(int *)(v79 + 24);
            v100 = *(void **)(v77 + v99);
            *(_QWORD *)(v77 + v99) = *(_QWORD *)&v78[v99];

            goto LABEL_24;
          }
          outlined destroy of TetraRatchetOuterMessage(v77, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?)
                                    - 8)
                        + 64);
        v28 = (void *)v77;
        v29 = v78;
LABEL_14:
        memcpy(v28, v29, v27);
        goto LABEL_24;
      }
    }
    else
    {
      if (!v34)
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v17, v18, v30);
        goto LABEL_49;
      }
      (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v30);
    }
    v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_49;
  }
  if (v23)
  {
LABEL_13:
    v27 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?)
                                - 8)
                    + 64);
    v28 = v17;
    v29 = v18;
    goto LABEL_14;
  }
  v24 = type metadata accessor for Kyber768.PrivateKey();
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v18, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v17, v18, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v17, 0, 1, v24);
  }
  v35 = *(int *)(v19 + 20);
  v36 = &v17[v35];
  v37 = &v18[v35];
  v38 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    v41 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v36, v37, v41);
    *(_OWORD *)&v36[*(int *)(v38 + 20)] = *(_OWORD *)&v37[*(int *)(v38 + 20)];
    *(_QWORD *)&v36[*(int *)(v38 + 24)] = *(_QWORD *)&v37[*(int *)(v38 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_24:
  v42 = a3[6];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for TetraKEM1024Key(0);
  v46 = *(_QWORD *)(v45 - 8);
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
  v48 = v47(v43, 1, v45);
  v49 = v47(v44, 1, v45);
  if (!v48)
  {
    if (v49)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v43, type metadata accessor for TetraKEM1024Key);
      goto LABEL_30;
    }
    v56 = type metadata accessor for Kyber1024.PrivateKey();
    v57 = *(_QWORD *)(v56 - 8);
    v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
    v59 = v58(v43, 1, v56);
    v60 = v58(v44, 1, v56);
    if (v59)
    {
      if (!v60)
      {
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v43, v44, v56);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v43, 0, 1, v56);
LABEL_55:
        v86 = *(int *)(v45 + 20);
        v87 = (uint64_t)&v43[v86];
        v88 = &v44[v86];
        v89 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        v90 = *(_QWORD *)(v89 - 8);
        v91 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
        v92 = v91(v87, 1, v89);
        v93 = v91((uint64_t)v88, 1, v89);
        if (v92)
        {
          if (!v93)
          {
            v94 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 32))(v87, v88, v94);
            *(_OWORD *)(v87 + *(int *)(v89 + 20)) = *(_OWORD *)&v88[*(int *)(v89 + 20)];
            *(_QWORD *)(v87 + *(int *)(v89 + 24)) = *(_QWORD *)&v88[*(int *)(v89 + 24)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
            goto LABEL_40;
          }
        }
        else
        {
          if (!v93)
          {
            v101 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 40))(v87, v88, v101);
            v102 = *(int *)(v89 + 20);
            v103 = *(_QWORD *)(v87 + v102);
            v104 = *(_QWORD *)(v87 + v102 + 8);
            *(_OWORD *)(v87 + v102) = *(_OWORD *)&v88[v102];
            outlined consume of Data._Representation(v103, v104);
            v105 = *(int *)(v89 + 24);
            v106 = *(void **)(v87 + v105);
            *(_QWORD *)(v87 + v105) = *(_QWORD *)&v88[v105];

            goto LABEL_40;
          }
          outlined destroy of TetraRatchetOuterMessage(v87, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        v53 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?)
                                    - 8)
                        + 64);
        v54 = (void *)v87;
        v55 = v88;
LABEL_31:
        memcpy(v54, v55, v53);
        goto LABEL_40;
      }
    }
    else
    {
      if (!v60)
      {
        (*(void (**)(char *, char *, uint64_t))(v57 + 40))(v43, v44, v56);
        goto LABEL_55;
      }
      (*(void (**)(char *, uint64_t))(v57 + 8))(v43, v56);
    }
    v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    goto LABEL_55;
  }
  if (v49)
  {
LABEL_30:
    v53 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?)
                                - 8)
                    + 64);
    v54 = v43;
    v55 = v44;
    goto LABEL_31;
  }
  v50 = type metadata accessor for Kyber1024.PrivateKey();
  v51 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v44, 1, v50))
  {
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v43, v44, v50);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v43, 0, 1, v50);
  }
  v61 = *(int *)(v45 + 20);
  v62 = &v43[v61];
  v63 = &v44[v61];
  v64 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v65 = *(_QWORD *)(v64 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
  {
    v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    v67 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v62, v63, v67);
    *(_OWORD *)&v62[*(int *)(v64 + 20)] = *(_OWORD *)&v63[*(int *)(v64 + 20)];
    *(_QWORD *)&v62[*(int *)(v64 + 24)] = *(_QWORD *)&v63[*(int *)(v64 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
LABEL_40:
  v68 = a3[7];
  v69 = (uint64_t *)((char *)a1 + v68);
  v70 = (uint64_t *)((char *)a2 + v68);
  v71 = *(unint64_t *)((char *)a1 + v68 + 8);
  if (v71 >> 60 != 15)
  {
    v72 = v70[1];
    if (v72 >> 60 != 15)
    {
      v73 = *v69;
      *v69 = *v70;
      v69[1] = v72;
      outlined consume of Data._Representation(v73, v71);
      return a1;
    }
    outlined destroy of Data((uint64_t)v69);
  }
  *(_OWORD *)v69 = *(_OWORD *)v70;
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraOutgoingKeyContent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB1AEFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  BOOL v17;
  unsigned int v18;

  v6 = type metadata accessor for TetraECDHKey();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[7] + 8) >> 60;
  v17 = ((4 * (_DWORD)v16) & 0xC) == 0;
  v18 = ((4 * v16) & 0xC | (v16 >> 2)) ^ 0xF;
  if (v17)
    return 0;
  else
    return v18;
}

uint64_t storeEnumTagSinglePayload for TetraOutgoingKeyContent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB1AFE8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;

  v8 = type metadata accessor for TetraECDHKey();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[6];
    goto LABEL_7;
  }
  v17 = (_QWORD *)(a1 + a4[7]);
  *v17 = 0;
  v17[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

void type metadata completion function for TetraOutgoingKeyContent()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for TetraECDHKey();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Kyber768.PublicKey?(319, &lazy cache variable for type metadata for TetraKEM768Key?, (void (*)(uint64_t))type metadata accessor for TetraKEM768Key);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Kyber768.PublicKey?(319, &lazy cache variable for type metadata for TetraKEM1024Key?, (void (*)(uint64_t))type metadata accessor for TetraKEM1024Key);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Kyber768.PublicKey?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t getEnumTagSinglePayload for TetraRatchetState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TetraRatchetState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_20BB1B2B8 + 4 * byte_20BB42E44[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_20BB1B2EC + 4 * byte_20BB42E3F[v4]))();
}

uint64_t sub_20BB1B2EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB1B2F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BB1B2FCLL);
  return result;
}

uint64_t sub_20BB1B308(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BB1B310);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_20BB1B314(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB1B31C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TetraRatchetState.CodingKeys()
{
  return &unk_24C4BE368;
}

uint64_t storeEnumTagSinglePayload for TetraRatchetingErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_20BB1B384 + 4 * byte_20BB42E4E[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_20BB1B3B8 + 4 * byte_20BB42E49[v4]))();
}

uint64_t sub_20BB1B3B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB1B3C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BB1B3C8);
  return result;
}

uint64_t sub_20BB1B3D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BB1B3DCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_20BB1B3E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB1B3E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TetraRatchetingErrors()
{
  return &type metadata for TetraRatchetingErrors;
}

unint64_t lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraRatchetingErrors and conformance TetraRatchetingErrors;
  if (!lazy protocol witness table cache variable for type TetraRatchetingErrors and conformance TetraRatchetingErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraRatchetingErrors, &type metadata for TetraRatchetingErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraRatchetingErrors and conformance TetraRatchetingErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraRatchetingErrors and conformance TetraRatchetingErrors;
  if (!lazy protocol witness table cache variable for type TetraRatchetingErrors and conformance TetraRatchetingErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraRatchetingErrors, &type metadata for TetraRatchetingErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraRatchetingErrors and conformance TetraRatchetingErrors);
  }
  return result;
}

uint64_t specialized ReceivingKeyTetraRatchet.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E69766965636572 && a2 == 0xEC00000079654B67;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69766965636572 && a2 == 0xEF79654B4D454B67
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000020BB487C0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized TetraRatchetState.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x79654B746F6F72 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E696D6F636E69 && a2 == 0xEE00736E69616843
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E696F6774756FLL && a2 == 0xED00006E69616843
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000020BB487E0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000020BB48800)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t lazy protocol witness table accessor for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for ReceivingKeyTetraRatchet.CodingKeys, &unk_24C4BE6C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for ReceivingKeyTetraRatchet.CodingKeys, &unk_24C4BE6C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for ReceivingKeyTetraRatchet.CodingKeys, &unk_24C4BE6C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for ReceivingKeyTetraRatchet.CodingKeys, &unk_24C4BE6C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReceivingKeyTetraRatchet.CodingKeys and conformance ReceivingKeyTetraRatchet.CodingKeys);
  }
  return result;
}

uint64_t partial apply for closure #1 in TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(_QWORD *a1)
{
  return closure #1 in TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(a1) & 1;
}

uint64_t outlined assign with take of TetraOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type [TetraMessageTypes] and conformance [A](unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x20BD3C414](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of SymmetricKey?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of KEM.EncapsulationResult?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t storeEnumTagSinglePayload for ReceivingKeyTetraRatchet.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20BB1BAFC + 4 * byte_20BB42E58[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20BB1BB30 + 4 * byte_20BB42E53[v4]))();
}

uint64_t sub_20BB1BB30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB1BB38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BB1BB40);
  return result;
}

uint64_t sub_20BB1BB4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BB1BB54);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20BB1BB58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB1BB60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ReceivingKeyTetraRatchet.CodingKeys()
{
  return &unk_24C4BE6C8;
}

uint64_t specialized static TetraMessageEncoding.sealMessage(_:messageKey:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  _QWORD v20[2];
  uint64_t v21;

  v21 = type metadata accessor for SymmetricKey();
  v20[1] = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TetraPB_TetraInnerMessage(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v16 = &v15[*(int *)(v13 + 20)];
  *(_OWORD *)v16 = xmmword_20BB407A0;
  v17 = &v15[*(int *)(v13 + 24)];
  *(_OWORD *)v17 = xmmword_20BB407A0;
  if (a4 >> 60 != 15)
  {
    *(_QWORD *)v17 = a3;
    *((_QWORD *)v17 + 1) = a4;
  }
  *(_QWORD *)v16 = a1;
  *((_QWORD *)v16 + 1) = a2;
  outlined copy of Data?(a3, a4);
  outlined copy of Data._Representation(a1, a2);
  static TetraPBPadding.padMessage(_:)();
  if (!v5)
  {
    static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)((uint64_t)v12, a5);
    __asm { BR              X10 }
  }
  outlined destroy of TetraPB_TetraInnerMessage((uint64_t)v15);
  return a3;
}

void specialized static TetraMessageEncoding.openMessage(_:messageKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[8];

  v9[1] = a2;
  v4 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for TetraPB_TetraInnerMessage(0);
  MEMORY[0x24BDAC7A8](v5);
  v6 = type metadata accessor for SymmetricKey();
  MEMORY[0x24BDAC7A8](v6);
  static TetraSymmetric.deriveSymmetricSenderAuthenticationMode(messageKey:)((uint64_t)v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  __asm { BR              X10 }
}

uint64_t sub_20BB1C040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (BYTE6(v4) != 16)
  {
    v15 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, (uint64_t (*)(uint64_t))MEMORY[0x24BDC61A8], MEMORY[0x24BDC61C0]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v16, *MEMORY[0x24BDC61A0], v15);
    swift_willThrow();
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v8 - 72);
  specialized static CoreCryptoAESCTRImpl.crypt(key:data:IV:)(v6, v2, *(_QWORD *)(v8 - 136));
  if (v9)
  {
LABEL_8:
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v3);
    outlined consume of Data._Representation(v5, v4);
    return v1;
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v3);
  outlined consume of Data._Representation(v5, v4);
  *(_QWORD *)(v8 - 96) = 0;
  *(_OWORD *)(v8 - 128) = 0u;
  *(_OWORD *)(v8 - 112) = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, type metadata accessor for TetraPB_TetraInnerMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInnerMessage);
  Message.init(serializedData:extensions:partial:options:)();
  v10 = *(int *)(v1 + 24);
  v11 = (uint64_t *)(v0 + *(int *)(v1 + 20));
  v12 = v11[1];
  if (v12 >> 60 == 15)
    v1 = 0;
  else
    v1 = *v11;
  v13 = *(_QWORD *)(v0 + v10);
  v14 = *(_QWORD *)(v0 + v10 + 8);
  outlined copy of Data?(*v11, v12);
  outlined copy of Data?(v13, v14);
  outlined destroy of TetraPB_TetraInnerMessage(v0);
  return v1;
}

uint64_t outlined destroy of TetraPB_TetraInnerMessage(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TetraPB_TetraInnerMessage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t SymmetricRatchet.init(ck:index:step:)@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v8 = type metadata accessor for SymmetricKey();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SymmetricRatchet();
  *(_QWORD *)(a4 + *(int *)(v12 + 20)) = MEMORY[0x24BEE4B00];
  if (SymmetricKey.bitCount.getter() >= 256)
  {
    outlined init with copy of SymmetricRatchetStep(a3, a4 + *(int *)(v12 + 24));
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
    __swift_destroy_boxed_opaque_existential_0(a3);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
    result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(_QWORD *)(a4 + *(int *)(result + 48)) = a2;
  }
  else
  {
    v13 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError();
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v14, *MEMORY[0x24BDC6190], v13);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0(a3);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *SymmetricRatchet.maxForwardRatchetDelta.unsafeMutableAddressor()
{
  return &static SymmetricRatchet.maxForwardRatchetDelta;
}

uint64_t SymmetricRatchet.messageKey(forIndex:discardMessageKey:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  unint64_t v14;
  char *v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v29 - v11;
  if (a1 == -1)
  {
    lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
    swift_allocError();
    v16 = 0;
    goto LABEL_18;
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v14 = *(_QWORD *)(v3 + *(int *)(result + 48));
  if (v14 >= 0xFFFFFFFFFFFF3CB0)
  {
    __break(1u);
  }
  else
  {
    if (v14 + 50000 < a1)
    {
      lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
      swift_allocError();
      v16 = 1;
LABEL_18:
      *v15 = v16;
      return swift_willThrow();
    }
    if (v14 <= a1)
      SymmetricRatchet.deriveMessageKeysUntil(_:)(a1);
    v17 = (uint64_t *)(v3 + *(int *)(type metadata accessor for SymmetricRatchet() + 20));
    if ((a2 & 1) == 0)
    {
      v21 = *v17;
      if (*(_QWORD *)(v21 + 16) && (v22 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v23 & 1) != 0))
      {
        v24 = v22;
        v25 = *(_QWORD *)(v21 + 56);
        v26 = type metadata accessor for SymmetricKey();
        v27 = *(_QWORD *)(v26 - 8);
        (*(void (**)(char *, unint64_t, uint64_t))(v27 + 16))(v10, v25 + *(_QWORD *)(v27 + 72) * v24, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v10, 0, 1, v26);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v10, 1, v26) != 1)
          return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(a3, v10, v26);
      }
      else
      {
        v28 = type metadata accessor for SymmetricKey();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v10, 1, 1, v28);
      }
      v20 = (uint64_t)v10;
      goto LABEL_17;
    }
    specialized Dictionary.removeValue(forKey:)(a1, (uint64_t)v12);
    v18 = type metadata accessor for SymmetricKey();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v12, 1, v18) == 1)
    {
      v20 = (uint64_t)v12;
LABEL_17:
      outlined destroy of TetraSessionStates?(v20, &demangling cache variable for type metadata for SymmetricKey?);
      lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
      swift_allocError();
      v16 = 3;
      goto LABEL_18;
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a3, v12, v18);
  }
  return result;
}

uint64_t specialized Dictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v2;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v9 = v15;
    }
    v10 = *(_QWORD *)(v9 + 56);
    v11 = type metadata accessor for SymmetricKey();
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 32))(a2, v10 + *(_QWORD *)(v12 + 72) * v7, v11);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v11);
  }
  else
  {
    v14 = type metadata accessor for SymmetricKey();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t static SymmetricRatchet.maxForwardRatchetDelta.getter()
{
  return 50000;
}

uint64_t *initializeBufferWithCopyOfBuffer for SymmetricRatchet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 48));
    v9 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = *(_OWORD *)(v11 + 24);
    *(_OWORD *)((char *)a1 + v9 + 24) = v12;
    v13 = v12;
    v14 = **(void (***)(char *, char *, uint64_t))(v12 - 8);
    swift_bridgeObjectRetain();
    v14(v10, v11, v13);
  }
  return a1;
}

uint64_t destroy for SymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0(a1 + *(int *)(a2 + 24));
}

uint64_t initializeWithCopy for SymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)(a1 + *(int *)(v7 + 48)) = *(_QWORD *)(a2 + *(int *)(v7 + 48));
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = *(_OWORD *)(v10 + 24);
  *(_OWORD *)(a1 + v8 + 24) = v11;
  v12 = v11;
  v13 = **(void (***)(uint64_t, uint64_t, uint64_t))(v11 - 8);
  swift_bridgeObjectRetain();
  v13(v9, v10, v12);
  return a1;
}

uint64_t assignWithCopy for SymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)(a1 + *(int *)(v7 + 48)) = *(_QWORD *)(a2 + *(int *)(v7 + 48));
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + *(int *)(a3 + 24)), (uint64_t *)(a2 + *(int *)(a3 + 24)));
  return a1;
}

uint64_t initializeWithTake for SymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)(a1 + *(int *)(v7 + 48)) = *(_QWORD *)(a2 + *(int *)(v7 + 48));
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  return a1;
}

uint64_t assignWithTake for SymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)(a1 + *(int *)(v7 + 48)) = *(_QWORD *)(a2 + *(int *)(v7 + 48));
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  __swift_destroy_boxed_opaque_existential_0(a1 + v8);
  v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SymmetricRatchet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB1CB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SymmetricRatchet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB1CBCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SymmetricRatchet()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SymmetricRatchet;
  if (!type metadata singleton initialization cache for SymmetricRatchet)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for SymmetricRatchet()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  char *v3;
  uint64_t v4;
  const char *v5;

  result = type metadata accessor for SymmetricKey();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v3 = &v2;
    v4 = MEMORY[0x24BEE0158] + 64;
    v5 = "(";
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t SymmetricRatchet.deriveMessageKeysUntil(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)v20 - v8;
  result = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v20 - v11;
  if (a1 == -1 || (v13 = *(int *)(v3 + 48), v14 = *(_QWORD *)(v1 + v13), v14 > a1))
  {
    __break(1u);
  }
  else
  {
    v15 = type metadata accessor for SymmetricKey();
    v16 = *(_QWORD *)(v15 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v9, v1, v15);
    *(_QWORD *)&v9[v13] = v14;
    v20[0] = v13;
    v17 = a1;
    v18 = *(int *)(v3 + 48);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v6, v9, v15);
    *(_QWORD *)&v6[v18] = v14;
    specialized Sequence.reduce<A>(_:_:)((uint64_t)v6, v14, v17, v1, (uint64_t)v12);
    outlined destroy of TetraSessionStates?((uint64_t)v6, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    v19 = *(_QWORD *)&v12[*(int *)(v3 + 48)];
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 40))(v1, v12, v15);
    *(_QWORD *)(v1 + v20[0]) = v19;
  }
  return result;
}

uint64_t specialized Sequence.reduce<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void (*v65)(char *, char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  _BOOL8 v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  char v79;
  _QWORD *v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t result;
  BOOL v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t);
  char *v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[6];
  uint64_t v112;

  v93 = a3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v90 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v108 = (char *)&v89 - v12;
  v13 = type metadata accessor for SymmetricKey();
  v109 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v94 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v102 = (char *)&v89 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v101 = (char *)&v89 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v20 = MEMORY[0x24BDAC7A8](v19);
  v100 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v99 = (char *)&v89 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v98 = (char *)&v89 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v107 = (char *)&v89 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v106 = (char *)&v89 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v91 = (char *)&v89 - v30;
  outlined init with copy of (key: SymmetricKey, index: UInt64)(a1, a5);
  v31 = type metadata accessor for SymmetricRatchet();
  v32 = *(int *)(v31 + 20);
  v96 = a4 + *(int *)(v31 + 24);
  v97 = v32;
  v112 = v19;
  v95 = *(int *)(v19 + 48);
  v103 = a4;
  v92 = a5;
  while (1)
  {
    v104 = a2;
    outlined init with copy of SymmetricRatchetStep(v96, (uint64_t)v111);
    v33 = v111[4];
    __swift_project_boxed_opaque_existential_1(v111, v111[3]);
    v34 = *(int *)(v112 + 48);
    v35 = v109;
    v105 = *(void (**)(char *, uint64_t, uint64_t))(v109 + 16);
    v36 = v98;
    v105(v98, a5, v13);
    *(_QWORD *)&v36[v34] = *(_QWORD *)(a5 + v95);
    v38 = v101;
    v37 = v102;
    v39 = (*(uint64_t (**)(char *, char *, char *))(v33 + 8))(v101, v102, v36);
    v110 = v40;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v13);
    v41 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    v41(v36, v38, v13);
    v42 = v99;
    v43 = v37;
    v44 = v112;
    v45 = (uint64_t)v108;
    v41(v99, v43, v13);
    v46 = *(int *)(v44 + 48);
    v47 = (uint64_t)v106;
    v41(v106, v36, v13);
    v48 = v39;
    *(_QWORD *)(v47 + v46) = v39;
    v49 = *(int *)(v44 + 48);
    v50 = v107;
    v41(v107, v42, v13);
    *(_QWORD *)&v50[v49] = v110;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v111);
    v51 = *(int *)(v44 + 48);
    v52 = v48;
    v53 = v100;
    v105(v100, v47, v13);
    *(_QWORD *)&v53[v51] = v48;
    v41((char *)v45, v53, v13);
    v54 = v109;
    v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v109 + 56);
    v55(v45, 0, 1, v13);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v45, 1, v13) == 1)
    {
      v105 = (void (*)(char *, uint64_t, uint64_t))v41;
      outlined destroy of TetraSessionStates?((uint64_t)v108, &demangling cache variable for type metadata for SymmetricKey?);
      v56 = v103;
      v57 = v97;
      v58 = specialized __RawDictionaryStorage.find<A>(_:)(v52);
      if ((v59 & 1) != 0)
      {
        v60 = v58;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v62 = *(_QWORD *)(v56 + v57);
        v111[0] = v62;
        *(_QWORD *)(v56 + v57) = 0x8000000000000000;
        a5 = v92;
        v63 = v57;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v62 = v111[0];
        }
        v64 = v90;
        v65 = (void (*)(char *, char *, uint64_t))v105;
        v105(v90, *(_QWORD *)(v62 + 56) + *(_QWORD *)(v109 + 72) * v60, v13);
        specialized _NativeDictionary._delete(at:)(v60, v62);
        *(_QWORD *)(v56 + v63) = v62;
        swift_bridgeObjectRelease();
        v66 = (uint64_t)v64;
        v67 = 0;
      }
      else
      {
        v67 = 1;
        a5 = v92;
        v66 = (uint64_t)v90;
        v65 = (void (*)(char *, char *, uint64_t))v105;
      }
      v55(v66, v67, 1, v13);
      outlined destroy of TetraSessionStates?(v66, &demangling cache variable for type metadata for SymmetricKey?);
      goto LABEL_21;
    }
    v41(v94, v108, v13);
    v68 = v103;
    v69 = v97;
    v70 = swift_isUniquelyReferenced_nonNull_native();
    v111[0] = *(_QWORD *)(v68 + v69);
    v71 = v111[0];
    *(_QWORD *)(v68 + v69) = 0x8000000000000000;
    v73 = specialized __RawDictionaryStorage.find<A>(_:)(v48);
    v74 = *(_QWORD *)(v71 + 16);
    v75 = (v72 & 1) == 0;
    v76 = v74 + v75;
    if (__OFADD__(v74, v75))
      break;
    v77 = v72;
    v65 = v41;
    if (*(_QWORD *)(v71 + 24) >= v76)
    {
      if ((v70 & 1) != 0)
      {
        v80 = (_QWORD *)v111[0];
        if ((v72 & 1) == 0)
          goto LABEL_18;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v80 = (_QWORD *)v111[0];
        if ((v77 & 1) == 0)
          goto LABEL_18;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v76, v70);
      v78 = specialized __RawDictionaryStorage.find<A>(_:)(v52);
      if ((v77 & 1) != (v79 & 1))
        goto LABEL_28;
      v73 = v78;
      v80 = (_QWORD *)v111[0];
      if ((v77 & 1) == 0)
      {
LABEL_18:
        v80[(v73 >> 6) + 8] |= 1 << v73;
        *(_QWORD *)(v80[6] + 8 * v73) = v52;
        v41((char *)(v80[7] + *(_QWORD *)(v109 + 72) * v73), v94, v13);
        v81 = v80[2];
        v82 = __OFADD__(v81, 1);
        v83 = v81 + 1;
        if (v82)
          goto LABEL_27;
        v80[2] = v83;
        goto LABEL_20;
      }
    }
    (*(void (**)(unint64_t, char *, uint64_t))(v109 + 40))(v80[7] + *(_QWORD *)(v109 + 72) * v73, v94, v13);
LABEL_20:
    *(_QWORD *)(v103 + v69) = v111[0];
    swift_bridgeObjectRelease();
    a5 = v92;
LABEL_21:
    v84 = v104;
    outlined destroy of TetraSessionStates?((uint64_t)v106, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    v85 = *(int *)(v112 + 48);
    v86 = (uint64_t)v91;
    v65(v91, v107, v13);
    *(_QWORD *)(v86 + v85) = v110;
    outlined destroy of TetraSessionStates?(a5, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    result = outlined init with take of (key: SymmetricKey, index: UInt64)(v86, a5);
    if (v93 == v84)
      return result;
    v88 = __CFADD__(v84, 1);
    a2 = v84 + 1;
    if (v88)
    {
      __break(1u);
      return result;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined init with copy of (key: SymmetricKey, index: UInt64)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of (key: SymmetricKey, index: UInt64)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError;
  if (!lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError)
  {
    v1 = type metadata accessor for CryptoKitError();
    result = MEMORY[0x20BD3C414](MEMORY[0x24BDC61C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TetraPB_TetraPublicPrekey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for TetraPB_TetraPublicPrekey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for TetraPB_TetraPublicPrekey(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraPB_TetraPublicPrekey);
}

void protocol witness for Enum.init() in conformance TetraPB_KyberSecurityLevel(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance TetraPB_KyberSecurityLevel@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance TetraPB_KyberSecurityLevel()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance TetraPB_KyberSecurityLevel@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 2uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TetraPB_KyberSecurityLevel(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8))
    v2 = *v1 != 0;
  *a1 = v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_KyberSecurityLevel()
{
  lazy protocol witness table accessor for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel();
  return Enum.hash(into:)();
}

void one-time initialization function for allCases()
{
  static TetraPB_KyberSecurityLevel.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static TetraPB_PrivateKeyBackingStore.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance TetraPB_KyberSecurityLevel@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance TetraPB_KyberSecurityLevel(&one-time initialization token for allCases, &static TetraPB_KyberSecurityLevel.allCases, a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TetraPB_KyberSecurityLevel()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_PrivateKeyBackingStore()
{
  lazy protocol witness table accessor for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore();
  return Enum.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TetraPB_KyberSecurityLevel()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TetraPB_KyberSecurityLevel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8))
    v2 = *a1 != 0;
  v3 = *a2 != 0;
  if (!*((_BYTE *)a2 + 8))
    v3 = *a2;
  return v2 == v3;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance TetraPB_PrivateKeyBackingStore@<X0>(_QWORD *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance TetraPB_KyberSecurityLevel(&one-time initialization token for allCases, &static TetraPB_PrivateKeyBackingStore.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance TetraPB_KyberSecurityLevel@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_KyberSecurityLevel@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_KyberSecurityLevel._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_PrivateKeyBackingStore@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_PrivateKeyBackingStore._protobuf_nameMap, a1);
}

uint64_t TetraPB_KyberPrivateKey.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  char v3;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    v1 = v0;
    if (v0 || (v3 & 1) != 0)
      return result;
    switch(result)
    {
      case 3:
        closure #3 in TetraPB_KyberPrivateKey.decodeMessage<A>(decoder:)();
LABEL_3:
        v1 = 0;
        break;
      case 2:
        closure #2 in TetraPB_KyberPrivateKey.decodeMessage<A>(decoder:)();
        goto LABEL_3;
      case 1:
        type metadata accessor for TetraPB_KyberPrivateKey(0);
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        goto LABEL_3;
    }
    v0 = v1;
  }
}

uint64_t closure #2 in TetraPB_KyberPrivateKey.decodeMessage<A>(decoder:)()
{
  type metadata accessor for TetraPB_KyberPrivateKey(0);
  lazy protocol witness table accessor for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t closure #3 in TetraPB_KyberPrivateKey.decodeMessage<A>(decoder:)()
{
  type metadata accessor for TetraPB_KyberPrivateKey(0);
  lazy protocol witness table accessor for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t TetraPB_KyberPrivateKey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for TetraPB_KyberPrivateKey);
  if (!v4)
  {
    closure #2 in TetraPB_KyberPrivateKey.traverse<A>(visitor:)(v3);
    closure #3 in TetraPB_KyberPrivateKey.traverse<A>(visitor:)(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in TetraPB_KyberPrivateKey.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for TetraPB_KyberPrivateKey(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

uint64_t closure #3 in TetraPB_KyberPrivateKey.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for TetraPB_KyberPrivateKey(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 28) + 9) & 1) == 0)
  {
    lazy protocol witness table accessor for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore();
    return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  }
  return result;
}

double protocol witness for Message.init() in conformance TetraPB_KyberPrivateKey@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  UnknownStorage.init()();
  result = 0.0;
  v5 = a1[6];
  *(_OWORD *)(a2 + a1[5]) = xmmword_20BB407A0;
  v6 = a2 + v5;
  *(_QWORD *)v6 = 0;
  *(_WORD *)(v6 + 8) = 256;
  v7 = a2 + a1[7];
  *(_QWORD *)v7 = 0;
  *(_WORD *)(v7 + 8) = 256;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TetraPB_KyberPrivateKey()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TetraPB_KyberPrivateKey()
{
  return TetraPB_KyberPrivateKey.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_KyberPrivateKey.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TetraPB_KyberPrivateKey()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, type metadata accessor for TetraPB_KyberPrivateKey, (uint64_t)&protocol conformance descriptor for TetraPB_KyberPrivateKey);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_KyberPrivateKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_KyberPrivateKey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraPB_KyberPrivateKey()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, type metadata accessor for TetraPB_KyberPrivateKey, (uint64_t)&protocol conformance descriptor for TetraPB_KyberPrivateKey);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_KyberPrivateKey()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, type metadata accessor for TetraPB_KyberPrivateKey, (uint64_t)&protocol conformance descriptor for TetraPB_KyberPrivateKey);
  return Message.hash(into:)();
}

uint64_t TetraPB_TetraPublicPrekey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraPublicPrekey.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for TetraPB_TetraPublicPrekey);
}

uint64_t TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for TetraPB_TetraPublicPrekey);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TetraPB_TetraPublicPrekey()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TetraPB_TetraPublicPrekey()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, type metadata accessor for TetraPB_TetraPublicPrekey, (uint64_t)&protocol conformance descriptor for TetraPB_TetraPublicPrekey);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_TetraPublicPrekey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_TetraPublicPrekey._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraPB_TetraPublicPrekey()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, type metadata accessor for TetraPB_TetraPublicPrekey, (uint64_t)&protocol conformance descriptor for TetraPB_TetraPublicPrekey);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_TetraPublicPrekey()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, type metadata accessor for TetraPB_TetraPublicPrekey, (uint64_t)&protocol conformance descriptor for TetraPB_TetraPublicPrekey);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TetraPB_TetraPublicPrekey(uint64_t a1, uint64_t a2)
{
  return specialized static TetraPB_TetraInnerMessage.== infix(_:_:)(a1, a2, type metadata accessor for TetraPB_TetraPublicPrekey) & 1;
}

uint64_t TetraPB_TetraInitiationMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraPublicPrekey.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for TetraPB_TetraInitiationMessage);
}

uint64_t TetraPB_TetraPublicPrekey.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t result;
  char v7;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v7 & 1) != 0)
      break;
    if (result == 2 || result == 1)
    {
      a4(0);
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
    v4 = 0;
  }
  return result;
}

uint64_t TetraPB_TetraInitiationMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for TetraPB_TetraInitiationMessage);
}

uint64_t closure #2 in TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  result = a5(0);
  v7 = a1 + *(int *)(result + 24);
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    v9 = *(_QWORD *)v7;
    outlined copy of Data._Representation(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v9, v8);
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TetraPB_TetraInitiationMessage()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TetraPB_TetraInitiationMessage()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, type metadata accessor for TetraPB_TetraInitiationMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInitiationMessage);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_TetraInitiationMessage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_TetraInitiationMessage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraPB_TetraInitiationMessage()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, type metadata accessor for TetraPB_TetraInitiationMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInitiationMessage);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_TetraInitiationMessage()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, type metadata accessor for TetraPB_TetraInitiationMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInitiationMessage);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TetraPB_TetraInitiationMessage(uint64_t a1, uint64_t a2)
{
  return specialized static TetraPB_TetraInnerMessage.== infix(_:_:)(a1, a2, type metadata accessor for TetraPB_TetraInitiationMessage) & 1;
}

uint64_t TetraPB_TetraMessage.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 7:
          type metadata accessor for TetraPB_TetraMessage(0);
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
          type metadata accessor for TetraPB_TetraMessage(0);
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        default:
          break;
      }
      result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
  if (!v4)
  {
    closure #2 in TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for TetraPB_TetraMessage);
    closure #3 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for TetraPB_TetraMessage);
    closure #4 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
    closure #5 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
    closure #6 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
    closure #7 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
    closure #8 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
    closure #9 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for TetraPB_TetraMessage(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 20) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #4 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for TetraPB_TetraMessage(0);
  v3 = a1 + *(int *)(result + 32);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #5 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for TetraPB_TetraMessage(0);
  v3 = a1 + *(int *)(result + 36);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #6 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for TetraPB_TetraMessage(0);
  v3 = a1 + *(int *)(result + 40);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #7 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for TetraPB_TetraMessage(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 44) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #8 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for TetraPB_TetraMessage(0);
  v3 = a1 + *(int *)(result + 48);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

uint64_t closure #9 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  result = type metadata accessor for TetraPB_TetraMessage(0);
  v3 = a1 + *(int *)(result + 52);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)v3;
    outlined copy of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v5, v4);
  }
  return result;
}

double protocol witness for Message.init() in conformance TetraPB_TetraMessage@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  UnknownStorage.init()();
  v4 = a1[6];
  v5 = a2 + a1[5];
  *(_DWORD *)v5 = 0;
  *(_BYTE *)(v5 + 4) = 1;
  result = 0.0;
  *(_OWORD *)(a2 + v4) = xmmword_20BB407A0;
  v7 = a1[8];
  *(_OWORD *)(a2 + a1[7]) = xmmword_20BB407A0;
  *(_OWORD *)(a2 + v7) = xmmword_20BB407A0;
  v8 = a1[10];
  *(_OWORD *)(a2 + a1[9]) = xmmword_20BB407A0;
  *(_OWORD *)(a2 + v8) = xmmword_20BB407A0;
  v9 = a1[12];
  v10 = a2 + a1[11];
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 4) = 1;
  *(_OWORD *)(a2 + v9) = xmmword_20BB407A0;
  *(_OWORD *)(a2 + a1[13]) = xmmword_20BB407A0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TetraPB_TetraMessage()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TetraPB_TetraMessage()
{
  return TetraPB_TetraMessage.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TetraPB_TetraMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraMessage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TetraPB_TetraMessage()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, type metadata accessor for TetraPB_TetraMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraMessage);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_TetraMessage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_TetraMessage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraPB_TetraMessage()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, type metadata accessor for TetraPB_TetraMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraMessage);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_TetraMessage()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, type metadata accessor for TetraPB_TetraMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraMessage);
  return Message.hash(into:)();
}

uint64_t TetraPB_TetraInnerMessage.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraPublicPrekey.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for TetraPB_TetraInnerMessage);
}

uint64_t TetraPB_TetraInnerMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for TetraPB_TetraInnerMessage);
}

uint64_t TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  result = closure #1 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v4, a1, a2, a3, a4);
  if (!v5)
  {
    closure #2 in TetraPB_TetraPublicPrekey.traverse<A>(visitor:)(v4, a1, a2, a3, a4);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TetraPB_TetraInnerMessage()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TetraPB_TetraInnerMessage()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, type metadata accessor for TetraPB_TetraInnerMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInnerMessage);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_TetraInnerMessage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_TetraInnerMessage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraPB_TetraInnerMessage()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, type metadata accessor for TetraPB_TetraInnerMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInnerMessage);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_TetraInnerMessage()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, type metadata accessor for TetraPB_TetraInnerMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInnerMessage);
  return Message.hash(into:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TetraPB_TetraInnerMessage(uint64_t a1, uint64_t a2)
{
  return specialized static TetraPB_TetraInnerMessage.== infix(_:_:)(a1, a2, type metadata accessor for TetraPB_TetraInnerMessage) & 1;
}

uint64_t TetraPB_PaddyKeyDistributionMessage.decodeMessage<A>(decoder:)()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0)
      return result;
    switch(result)
    {
      case 3:
        goto LABEL_2;
      case 2:
        type metadata accessor for TetraPB_PaddyKeyDistributionMessage(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
        break;
      case 1:
LABEL_2:
        type metadata accessor for TetraPB_PaddyKeyDistributionMessage(0);
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
        break;
    }
    v0 = 0;
  }
}

uint64_t TetraPB_PaddyKeyDistributionMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = closure #1 in MPPB_SKPaddedStatus.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for TetraPB_PaddyKeyDistributionMessage);
  if (!v4)
  {
    closure #2 in TetraPB_PaddyKeyDistributionMessage.traverse<A>(visitor:)(v3);
    closure #3 in TetraPB_TetraMessage.traverse<A>(visitor:)(v3, a1, a2, a3, type metadata accessor for TetraPB_PaddyKeyDistributionMessage);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #2 in TetraPB_PaddyKeyDistributionMessage.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for TetraPB_PaddyKeyDistributionMessage(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 4) & 1) == 0)
    return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
  return result;
}

uint64_t closure #3 in TetraPB_TetraMessage.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  result = a5(0);
  v7 = a1 + *(int *)(result + 28);
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    v9 = *(_QWORD *)v7;
    outlined copy of Data._Representation(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
    dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
    return outlined consume of Data?(v9, v8);
  }
  return result;
}

double protocol witness for Message.init() in conformance TetraPB_PaddyKeyDistributionMessage@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v5;
  uint64_t v6;

  UnknownStorage.init()();
  result = 0.0;
  v5 = a1[6];
  *(_OWORD *)(a2 + a1[5]) = xmmword_20BB407A0;
  v6 = a2 + v5;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  *(_OWORD *)(a2 + a1[7]) = xmmword_20BB407A0;
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance TetraPB_PaddyKeyDistributionMessage()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance TetraPB_PaddyKeyDistributionMessage()
{
  return TetraPB_PaddyKeyDistributionMessage.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TetraPB_PaddyKeyDistributionMessage.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance TetraPB_PaddyKeyDistributionMessage()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, type metadata accessor for TetraPB_PaddyKeyDistributionMessage, (uint64_t)&protocol conformance descriptor for TetraPB_PaddyKeyDistributionMessage);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance TetraPB_PaddyKeyDistributionMessage@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance MPPB_SKPaddedStatus(&one-time initialization token for _protobuf_nameMap, (uint64_t)static TetraPB_PaddyKeyDistributionMessage._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraPB_PaddyKeyDistributionMessage()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, type metadata accessor for TetraPB_PaddyKeyDistributionMessage, (uint64_t)&protocol conformance descriptor for TetraPB_PaddyKeyDistributionMessage);
  return Message.debugDescription.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraPB_PaddyKeyDistributionMessage()
{
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, type metadata accessor for TetraPB_PaddyKeyDistributionMessage, (uint64_t)&protocol conformance descriptor for TetraPB_PaddyKeyDistributionMessage);
  return Message.hash(into:)();
}

uint64_t base witness table accessor for Equatable in TetraPB_PaddyKeyDistributionMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, type metadata accessor for TetraPB_PaddyKeyDistributionMessage, (uint64_t)&protocol conformance descriptor for TetraPB_PaddyKeyDistributionMessage);
}

uint64_t type metadata accessor for TetraPB_PaddyKeyDistributionMessage(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraPB_PaddyKeyDistributionMessage);
}

uint64_t base witness table accessor for Message in TetraPB_PaddyKeyDistributionMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, type metadata accessor for TetraPB_PaddyKeyDistributionMessage, (uint64_t)&protocol conformance descriptor for TetraPB_PaddyKeyDistributionMessage);
}

uint64_t base witness table accessor for Hashable in TetraPB_PaddyKeyDistributionMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, type metadata accessor for TetraPB_PaddyKeyDistributionMessage, (uint64_t)&protocol conformance descriptor for TetraPB_PaddyKeyDistributionMessage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TetraPB_PaddyKeyDistributionMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_PaddyKeyDistributionMessage and conformance TetraPB_PaddyKeyDistributionMessage, type metadata accessor for TetraPB_PaddyKeyDistributionMessage, (uint64_t)&protocol conformance descriptor for TetraPB_PaddyKeyDistributionMessage);
}

uint64_t base witness table accessor for Equatable in TetraPB_TetraInnerMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, type metadata accessor for TetraPB_TetraInnerMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInnerMessage);
}

uint64_t type metadata accessor for TetraPB_TetraInnerMessage(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraPB_TetraInnerMessage);
}

uint64_t base witness table accessor for Message in TetraPB_TetraInnerMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, type metadata accessor for TetraPB_TetraInnerMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInnerMessage);
}

uint64_t base witness table accessor for Hashable in TetraPB_TetraInnerMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, type metadata accessor for TetraPB_TetraInnerMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInnerMessage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TetraPB_TetraInnerMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage, type metadata accessor for TetraPB_TetraInnerMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInnerMessage);
}

uint64_t base witness table accessor for Equatable in TetraPB_TetraMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, type metadata accessor for TetraPB_TetraMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraMessage);
}

uint64_t type metadata accessor for TetraPB_TetraMessage(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraPB_TetraMessage);
}

uint64_t base witness table accessor for Message in TetraPB_TetraMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, type metadata accessor for TetraPB_TetraMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraMessage);
}

uint64_t base witness table accessor for Hashable in TetraPB_TetraMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, type metadata accessor for TetraPB_TetraMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraMessage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TetraPB_TetraMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraMessage and conformance TetraPB_TetraMessage, type metadata accessor for TetraPB_TetraMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraMessage);
}

uint64_t base witness table accessor for Equatable in TetraPB_TetraInitiationMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, type metadata accessor for TetraPB_TetraInitiationMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInitiationMessage);
}

uint64_t type metadata accessor for TetraPB_TetraInitiationMessage(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraPB_TetraInitiationMessage);
}

uint64_t base witness table accessor for Message in TetraPB_TetraInitiationMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, type metadata accessor for TetraPB_TetraInitiationMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInitiationMessage);
}

uint64_t base witness table accessor for Hashable in TetraPB_TetraInitiationMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, type metadata accessor for TetraPB_TetraInitiationMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInitiationMessage);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TetraPB_TetraInitiationMessage()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraInitiationMessage and conformance TetraPB_TetraInitiationMessage, type metadata accessor for TetraPB_TetraInitiationMessage, (uint64_t)&protocol conformance descriptor for TetraPB_TetraInitiationMessage);
}

uint64_t base witness table accessor for Equatable in TetraPB_TetraPublicPrekey()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, type metadata accessor for TetraPB_TetraPublicPrekey, (uint64_t)&protocol conformance descriptor for TetraPB_TetraPublicPrekey);
}

uint64_t base witness table accessor for Message in TetraPB_TetraPublicPrekey()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, type metadata accessor for TetraPB_TetraPublicPrekey, (uint64_t)&protocol conformance descriptor for TetraPB_TetraPublicPrekey);
}

uint64_t base witness table accessor for Hashable in TetraPB_TetraPublicPrekey()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, type metadata accessor for TetraPB_TetraPublicPrekey, (uint64_t)&protocol conformance descriptor for TetraPB_TetraPublicPrekey);
}

uint64_t base witness table accessor for Equatable in TetraPB_KyberPrivateKey()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, type metadata accessor for TetraPB_KyberPrivateKey, (uint64_t)&protocol conformance descriptor for TetraPB_KyberPrivateKey);
}

uint64_t type metadata accessor for TetraPB_KyberPrivateKey(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraPB_KyberPrivateKey);
}

uint64_t base witness table accessor for Message in TetraPB_KyberPrivateKey()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, type metadata accessor for TetraPB_KyberPrivateKey, (uint64_t)&protocol conformance descriptor for TetraPB_KyberPrivateKey);
}

uint64_t base witness table accessor for Hashable in TetraPB_KyberPrivateKey()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, type metadata accessor for TetraPB_KyberPrivateKey, (uint64_t)&protocol conformance descriptor for TetraPB_KyberPrivateKey);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TetraPB_KyberPrivateKey()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey, type metadata accessor for TetraPB_KyberPrivateKey, (uint64_t)&protocol conformance descriptor for TetraPB_KyberPrivateKey);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in TetraPB_PrivateKeyBackingStore()
{
  return lazy protocol witness table accessor for type [TetraPB_PrivateKeyBackingStore] and conformance [A](&lazy protocol witness table cache variable for type [TetraPB_PrivateKeyBackingStore] and conformance [A], &demangling cache variable for type metadata for [TetraPB_PrivateKeyBackingStore]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in TetraPB_KyberSecurityLevel()
{
  return lazy protocol witness table accessor for type [TetraPB_PrivateKeyBackingStore] and conformance [A](&lazy protocol witness table cache variable for type [TetraPB_KyberSecurityLevel] and conformance [A], &demangling cache variable for type metadata for [TetraPB_KyberSecurityLevel]);
}

uint64_t lazy protocol witness table accessor for type [TetraPB_PrivateKeyBackingStore] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x20BD3C414](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for CustomDebugStringConvertible in TetraPB_TetraPublicPrekey()
{
  return lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, type metadata accessor for TetraPB_TetraPublicPrekey, (uint64_t)&protocol conformance descriptor for TetraPB_TetraPublicPrekey);
}

unint64_t lazy protocol witness table accessor for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore;
  if (!lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraPB_PrivateKeyBackingStore, &type metadata for TetraPB_PrivateKeyBackingStore);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore;
  if (!lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraPB_PrivateKeyBackingStore, &type metadata for TetraPB_PrivateKeyBackingStore);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore;
  if (!lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraPB_PrivateKeyBackingStore, &type metadata for TetraPB_PrivateKeyBackingStore);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore;
  if (!lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraPB_PrivateKeyBackingStore, &type metadata for TetraPB_PrivateKeyBackingStore);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_PrivateKeyBackingStore and conformance TetraPB_PrivateKeyBackingStore);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel;
  if (!lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraPB_KyberSecurityLevel, &type metadata for TetraPB_KyberSecurityLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel;
  if (!lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraPB_KyberSecurityLevel, &type metadata for TetraPB_KyberSecurityLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel;
  if (!lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraPB_KyberSecurityLevel, &type metadata for TetraPB_KyberSecurityLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel;
  if (!lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraPB_KyberSecurityLevel, &type metadata for TetraPB_KyberSecurityLevel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberSecurityLevel and conformance TetraPB_KyberSecurityLevel);
  }
  return result;
}

uint64_t specialized static TetraPB_KyberPrivateKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for UnknownStorage();
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v44 - v8;
  v10 = (int *)type metadata accessor for TetraPB_KyberPrivateKey(0);
  v11 = v10[5];
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (uint64_t *)(a2 + v11);
  v15 = *v14;
  v16 = v14[1];
  if (v13 >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      outlined copy of Data?(v12, v13);
      outlined copy of Data?(v15, v16);
      specialized static Data.== infix(_:_:)(v12, v13);
      v20 = v19;
      outlined consume of Data?(v15, v16);
      outlined consume of Data?(v12, v13);
      if ((v20 & 1) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
LABEL_5:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    outlined consume of Data?(v15, v16);
    goto LABEL_6;
  }
  if (v16 >> 60 != 15)
    goto LABEL_5;
LABEL_9:
  v21 = v10[6];
  v22 = (uint64_t *)(a1 + v21);
  v23 = *(_BYTE *)(a1 + v21 + 9);
  v24 = (uint64_t *)(a2 + v21);
  if ((v23 & 1) != 0)
  {
    if ((*((_BYTE *)v24 + 9) & 1) == 0)
      goto LABEL_6;
  }
  else
  {
    if ((*((_BYTE *)v24 + 9) & 1) != 0)
      goto LABEL_6;
    v25 = *v22;
    v26 = *((_BYTE *)v22 + 8);
    v27 = *v24;
    v28 = *((_BYTE *)v24 + 8);
    v29 = v25 != 0;
    if ((v26 & 1) == 0)
      v29 = v25;
    if ((v28 & 1) != 0)
    {
      if (v27)
      {
        if (v29 != 1)
          goto LABEL_6;
      }
      else if (v29)
      {
        goto LABEL_6;
      }
    }
    else if (v29 != v27)
    {
      goto LABEL_6;
    }
  }
  v30 = v10[7];
  v31 = (uint64_t *)(a1 + v30);
  v32 = *(_BYTE *)(a1 + v30 + 9);
  v33 = (uint64_t *)(a2 + v30);
  if ((v32 & 1) != 0)
  {
    if ((*((_BYTE *)v33 + 9) & 1) != 0)
      goto LABEL_35;
  }
  else if ((*((_BYTE *)v33 + 9) & 1) == 0)
  {
    v34 = *v31;
    v35 = *((_BYTE *)v31 + 8);
    v36 = *v33;
    v37 = *((_BYTE *)v33 + 8);
    v38 = v34 != 0;
    if ((v35 & 1) == 0)
      v38 = v34;
    if ((v37 & 1) != 0)
    {
      if (v36)
      {
        if (v38 == 1)
          goto LABEL_35;
      }
      else if (!v38)
      {
LABEL_35:
        v39 = v44;
        v40 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
        v41 = a1;
        v42 = v45;
        v40(v9, v41, v45);
        v40(v7, a2, v42);
        lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v17 = dispatch thunk of static Equatable.== infix(_:_:)();
        v43 = *(void (**)(char *, uint64_t))(v39 + 8);
        v43(v7, v42);
        v43(v9, v42);
        return v17 & 1;
      }
    }
    else if (v38 == v36)
    {
      goto LABEL_35;
    }
  }
LABEL_6:
  v17 = 0;
  return v17 & 1;
}

uint64_t specialized static TetraPB_TetraMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _DWORD *v14;
  char v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v44;
  char v45;
  uint64_t v46;
  _DWORD *v47;
  char v48;
  _DWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;

  v4 = type metadata accessor for UnknownStorage();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v68 - v9;
  v11 = type metadata accessor for TetraPB_TetraMessage(0);
  v12 = (int *)v11;
  v13 = *(int *)(v11 + 20);
  v14 = (_DWORD *)(a1 + v13);
  v15 = *(_BYTE *)(a1 + v13 + 4);
  v16 = (_DWORD *)(a2 + v13);
  v17 = *(unsigned __int8 *)(a2 + v13 + 4);
  if ((v15 & 1) != 0)
  {
    if (!v17)
      goto LABEL_33;
  }
  else
  {
    if (*v14 != *v16)
      LOBYTE(v17) = 1;
    if ((v17 & 1) != 0)
      goto LABEL_33;
  }
  v68 = v5;
  v69 = v4;
  v18 = *(int *)(v11 + 24);
  v19 = *(_QWORD *)(a1 + v18);
  v20 = *(_QWORD *)(a1 + v18 + 8);
  v21 = (uint64_t *)(a2 + v18);
  v22 = *v21;
  v23 = v21[1];
  if (v20 >> 60 == 15)
  {
    if (v23 >> 60 != 15)
      goto LABEL_31;
  }
  else
  {
    if (v23 >> 60 == 15)
      goto LABEL_31;
    outlined copy of Data?(v19, v20);
    outlined copy of Data?(v22, v23);
    specialized static Data.== infix(_:_:)(v19, v20);
    v25 = v24;
    outlined consume of Data?(v22, v23);
    outlined consume of Data?(v19, v20);
    if ((v25 & 1) == 0)
      goto LABEL_33;
  }
  v26 = v12[7];
  v19 = *(_QWORD *)(a1 + v26);
  v20 = *(_QWORD *)(a1 + v26 + 8);
  v27 = (uint64_t *)(a2 + v26);
  v22 = *v27;
  v23 = v27[1];
  if (v20 >> 60 == 15)
  {
    if (v23 >> 60 != 15)
      goto LABEL_31;
  }
  else
  {
    if (v23 >> 60 == 15)
      goto LABEL_31;
    outlined copy of Data?(v19, v20);
    outlined copy of Data?(v22, v23);
    specialized static Data.== infix(_:_:)(v19, v20);
    v29 = v28;
    outlined consume of Data?(v22, v23);
    outlined consume of Data?(v19, v20);
    if ((v29 & 1) == 0)
      goto LABEL_33;
  }
  v30 = v12[8];
  v19 = *(_QWORD *)(a1 + v30);
  v20 = *(_QWORD *)(a1 + v30 + 8);
  v31 = (uint64_t *)(a2 + v30);
  v22 = *v31;
  v23 = v31[1];
  if (v20 >> 60 == 15)
  {
    if (v23 >> 60 != 15)
      goto LABEL_31;
  }
  else
  {
    if (v23 >> 60 == 15)
      goto LABEL_31;
    outlined copy of Data?(v19, v20);
    outlined copy of Data?(v22, v23);
    specialized static Data.== infix(_:_:)(v19, v20);
    v33 = v32;
    outlined consume of Data?(v22, v23);
    outlined consume of Data?(v19, v20);
    if ((v33 & 1) == 0)
      goto LABEL_33;
  }
  v34 = v12[9];
  v19 = *(_QWORD *)(a1 + v34);
  v20 = *(_QWORD *)(a1 + v34 + 8);
  v35 = (uint64_t *)(a2 + v34);
  v22 = *v35;
  v23 = v35[1];
  if (v20 >> 60 == 15)
  {
    if (v23 >> 60 != 15)
      goto LABEL_31;
LABEL_27:
    v38 = v12[10];
    v19 = *(_QWORD *)(a1 + v38);
    v20 = *(_QWORD *)(a1 + v38 + 8);
    v39 = (uint64_t *)(a2 + v38);
    v22 = *v39;
    v23 = v39[1];
    if (v20 >> 60 == 15)
    {
      if (v23 >> 60 != 15)
        goto LABEL_31;
    }
    else
    {
      if (v23 >> 60 == 15)
        goto LABEL_31;
      outlined copy of Data?(v19, v20);
      outlined copy of Data?(v22, v23);
      specialized static Data.== infix(_:_:)(v19, v20);
      v45 = v44;
      outlined consume of Data?(v22, v23);
      outlined consume of Data?(v19, v20);
      if ((v45 & 1) == 0)
        goto LABEL_33;
    }
    v46 = v12[11];
    v47 = (_DWORD *)(a1 + v46);
    v48 = *(_BYTE *)(a1 + v46 + 4);
    v49 = (_DWORD *)(a2 + v46);
    v50 = *(unsigned __int8 *)(a2 + v46 + 4);
    if ((v48 & 1) != 0)
    {
      if (!v50)
        goto LABEL_33;
    }
    else
    {
      if (*v47 != *v49)
        LOBYTE(v50) = 1;
      if ((v50 & 1) != 0)
        goto LABEL_33;
    }
    v51 = v12[12];
    v19 = *(_QWORD *)(a1 + v51);
    v20 = *(_QWORD *)(a1 + v51 + 8);
    v52 = (uint64_t *)(a2 + v51);
    v22 = *v52;
    v23 = v52[1];
    if (v20 >> 60 == 15)
    {
      if (v23 >> 60 == 15)
        goto LABEL_47;
    }
    else if (v23 >> 60 != 15)
    {
      outlined copy of Data?(v19, v20);
      outlined copy of Data?(v22, v23);
      specialized static Data.== infix(_:_:)(v19, v20);
      v54 = v53;
      outlined consume of Data?(v22, v23);
      outlined consume of Data?(v19, v20);
      if ((v54 & 1) == 0)
        goto LABEL_33;
LABEL_47:
      v55 = v12[13];
      v56 = *(_QWORD *)(a1 + v55);
      v57 = *(_QWORD *)(a1 + v55 + 8);
      v58 = (uint64_t *)(a2 + v55);
      v59 = *v58;
      v60 = v58[1];
      if (v57 >> 60 == 15)
      {
        if (v60 >> 60 == 15)
          goto LABEL_53;
      }
      else if (v60 >> 60 != 15)
      {
        outlined copy of Data?(v56, v57);
        outlined copy of Data?(v59, v60);
        specialized static Data.== infix(_:_:)(v56, v57);
        v62 = v61;
        outlined consume of Data?(v59, v60);
        outlined consume of Data?(v56, v57);
        if ((v62 & 1) == 0)
          goto LABEL_33;
LABEL_53:
        v63 = v68;
        v64 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 16);
        v65 = a1;
        v66 = v69;
        v64(v10, v65, v69);
        v64(v8, a2, v66);
        lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v42 = dispatch thunk of static Equatable.== infix(_:_:)();
        v67 = *(void (**)(char *, uint64_t))(v63 + 8);
        v67(v8, v66);
        v67(v10, v66);
        return v42 & 1;
      }
      outlined copy of Data?(v56, v57);
      outlined copy of Data?(v59, v60);
      outlined consume of Data?(v56, v57);
      v40 = v59;
      v41 = v60;
      goto LABEL_32;
    }
LABEL_31:
    outlined copy of Data?(v19, v20);
    outlined copy of Data?(v22, v23);
    outlined consume of Data?(v19, v20);
    v40 = v22;
    v41 = v23;
LABEL_32:
    outlined consume of Data?(v40, v41);
    goto LABEL_33;
  }
  if (v23 >> 60 == 15)
    goto LABEL_31;
  outlined copy of Data?(v19, v20);
  outlined copy of Data?(v22, v23);
  specialized static Data.== infix(_:_:)(v19, v20);
  v37 = v36;
  outlined consume of Data?(v22, v23);
  outlined consume of Data?(v19, v20);
  if ((v37 & 1) != 0)
    goto LABEL_27;
LABEL_33:
  v42 = 0;
  return v42 & 1;
}

uint64_t specialized static TetraPB_TetraInnerMessage.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v30;
  char v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;

  v6 = type metadata accessor for UnknownStorage();
  v37 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v36 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v36 - v9;
  v11 = a3(0);
  v12 = *(int *)(v11 + 20);
  v13 = *(_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (uint64_t *)(a2 + v12);
  v16 = *v15;
  v17 = v15[1];
  if (v14 >> 60 != 15)
  {
    if (v17 >> 60 != 15)
    {
      outlined copy of Data?(v13, v14);
      outlined copy of Data?(v16, v17);
      specialized static Data.== infix(_:_:)(v13, v14);
      v21 = v20;
      outlined consume of Data?(v16, v17);
      outlined consume of Data?(v13, v14);
      if ((v21 & 1) == 0)
        goto LABEL_13;
      goto LABEL_7;
    }
LABEL_5:
    outlined copy of Data?(v13, v14);
    outlined copy of Data?(v16, v17);
    outlined consume of Data?(v13, v14);
    v18 = v16;
    v19 = v17;
LABEL_12:
    outlined consume of Data?(v18, v19);
    goto LABEL_13;
  }
  if (v17 >> 60 != 15)
    goto LABEL_5;
LABEL_7:
  v22 = *(int *)(v11 + 24);
  v23 = *(_QWORD *)(a1 + v22);
  v24 = *(_QWORD *)(a1 + v22 + 8);
  v25 = (uint64_t *)(a2 + v22);
  v26 = *v25;
  v27 = v25[1];
  if (v24 >> 60 == 15)
  {
    if (v27 >> 60 == 15)
      goto LABEL_16;
    goto LABEL_11;
  }
  if (v27 >> 60 == 15)
  {
LABEL_11:
    outlined copy of Data?(v23, v24);
    outlined copy of Data?(v26, v27);
    outlined consume of Data?(v23, v24);
    v18 = v26;
    v19 = v27;
    goto LABEL_12;
  }
  outlined copy of Data?(v23, v24);
  outlined copy of Data?(v26, v27);
  specialized static Data.== infix(_:_:)(v23, v24);
  v31 = v30;
  outlined consume of Data?(v26, v27);
  outlined consume of Data?(v23, v24);
  if ((v31 & 1) != 0)
  {
LABEL_16:
    v32 = v37;
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
    v33(v10, a1, v6);
    v34 = v36;
    v33(v36, a2, v6);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v28 = dispatch thunk of static Equatable.== infix(_:_:)();
    v35 = *(void (**)(char *, uint64_t))(v32 + 8);
    v35(v34, v6);
    v35(v10, v6);
    return v28 & 1;
  }
LABEL_13:
  v28 = 0;
  return v28 & 1;
}

uint64_t specialized static TetraPB_PaddyKeyDistributionMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  char v22;
  uint64_t v23;
  _DWORD *v24;
  char v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;

  v4 = type metadata accessor for UnknownStorage();
  v41 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v40 - v8;
  v10 = (int *)type metadata accessor for TetraPB_PaddyKeyDistributionMessage(0);
  v11 = v10[5];
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (uint64_t *)(a2 + v11);
  v15 = *v14;
  v16 = v14[1];
  v40 = v7;
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 == 15)
      goto LABEL_10;
LABEL_5:
    outlined copy of Data?(v12, v13);
    outlined copy of Data?(v15, v16);
    outlined consume of Data?(v12, v13);
    v17 = v15;
    v18 = v16;
LABEL_6:
    outlined consume of Data?(v17, v18);
    goto LABEL_7;
  }
  if (v16 >> 60 == 15)
    goto LABEL_5;
  outlined copy of Data?(v12, v13);
  outlined copy of Data?(v15, v16);
  specialized static Data.== infix(_:_:)(v12, v13);
  v22 = v21;
  outlined consume of Data?(v15, v16);
  outlined consume of Data?(v12, v13);
  if ((v22 & 1) == 0)
    goto LABEL_7;
LABEL_10:
  v23 = v10[6];
  v24 = (_DWORD *)(a1 + v23);
  v25 = *(_BYTE *)(a1 + v23 + 4);
  v26 = (_DWORD *)(a2 + v23);
  v27 = *(unsigned __int8 *)(a2 + v23 + 4);
  if ((v25 & 1) != 0)
  {
    if (!v27)
      goto LABEL_7;
  }
  else
  {
    if (*v24 != *v26)
      LOBYTE(v27) = 1;
    if ((v27 & 1) != 0)
      goto LABEL_7;
  }
  v28 = v10[7];
  v29 = *(_QWORD *)(a1 + v28);
  v30 = *(_QWORD *)(a1 + v28 + 8);
  v31 = (uint64_t *)(a2 + v28);
  v32 = *v31;
  v33 = v31[1];
  if (v30 >> 60 == 15)
  {
    if (v33 >> 60 == 15)
      goto LABEL_22;
    goto LABEL_20;
  }
  if (v33 >> 60 == 15)
  {
LABEL_20:
    outlined copy of Data?(v29, v30);
    outlined copy of Data?(v32, v33);
    outlined consume of Data?(v29, v30);
    v17 = v32;
    v18 = v33;
    goto LABEL_6;
  }
  outlined copy of Data?(v29, v30);
  outlined copy of Data?(v32, v33);
  specialized static Data.== infix(_:_:)(v29, v30);
  v35 = v34;
  outlined consume of Data?(v32, v33);
  outlined consume of Data?(v29, v30);
  if ((v35 & 1) != 0)
  {
LABEL_22:
    v36 = v41;
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
    v37(v9, a1, v4);
    v38 = v40;
    v37(v40, a2, v4);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v19 = dispatch thunk of static Equatable.== infix(_:_:)();
    v39 = *(void (**)(char *, uint64_t))(v36 + 8);
    v39(v38, v4);
    v39(v9, v4);
    return v19 & 1;
  }
LABEL_7:
  v19 = 0;
  return v19 & 1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for TetraPB_KyberSecurityLevel(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TetraPB_KyberSecurityLevel(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for TetraPB_KyberSecurityLevel(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for TetraPB_KyberSecurityLevel(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TetraPB_KyberSecurityLevel()
{
  return &type metadata for TetraPB_KyberSecurityLevel;
}

ValueMetadata *type metadata accessor for TetraPB_PrivateKeyBackingStore()
{
  return &type metadata for TetraPB_PrivateKeyBackingStore;
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraPB_KyberPrivateKey(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      outlined copy of Data._Representation(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_WORD *)v16 + 4) = *((_WORD *)v17 + 4);
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    *(_QWORD *)v18 = *(_QWORD *)v19;
    *((_WORD *)v18 + 4) = *((_WORD *)v19 + 4);
  }
  return a1;
}

uint64_t initializeWithCopy for TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_WORD *)(v14 + 8) = *(_WORD *)(v15 + 8);
  v16 = a1 + v13;
  v17 = a2 + v13;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_WORD *)(v16 + 8) = *(_WORD *)(v17 + 8);
  return a1;
}

uint64_t assignWithCopy for TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      v12 = *v9;
      outlined copy of Data._Representation(v12, v10);
      v13 = *v8;
      v14 = v8[1];
      *v8 = v12;
      v8[1] = v10;
      outlined consume of Data._Representation(v13, v14);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v11 = *v9;
  outlined copy of Data._Representation(v11, v10);
  *v8 = v11;
  v8[1] = v10;
LABEL_8:
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  *(_WORD *)(v16 + 8) = *((_WORD *)v17 + 4);
  *(_QWORD *)v16 = v18;
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  *(_WORD *)(v20 + 8) = *((_WORD *)v21 + 4);
  *(_QWORD *)v20 = v22;
  return a1;
}

uint64_t initializeWithTake for TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_WORD *)(v8 + 8) = *(_WORD *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_WORD *)(v11 + 8) = *(_WORD *)(v12 + 8);
  return a1;
}

uint64_t assignWithTake for TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      v12 = *v8;
      *v8 = *v9;
      v8[1] = v11;
      outlined consume of Data._Representation(v12, v10);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
LABEL_6:
  v13 = a3[6];
  v14 = a3[7];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *(_WORD *)(v15 + 8) = *(_WORD *)(v16 + 8);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_WORD *)(v17 + 8) = *(_WORD *)(v18 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraPB_KyberPrivateKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for TetraPB_KyberPrivateKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for TetraPB_KyberPrivateKey()
{
  return type metadata completion function for TetraPB_KyberPrivateKey();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TetraPB_TetraInitiationMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for TetraPB_TetraInitiationMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraPB_TetraMessage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    v12 = (char *)a1 + v9;
    v13 = (uint64_t *)((char *)a2 + v9);
    v14 = *(uint64_t *)((char *)a2 + v9 + 8);
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
    }
    else
    {
      v16 = *v13;
      outlined copy of Data._Representation(*v13, v14);
      *(_QWORD *)v12 = v16;
      *((_QWORD *)v12 + 1) = v14;
    }
    v17 = a3[7];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = *((_QWORD *)v19 + 1);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    else
    {
      v21 = *(_QWORD *)v19;
      outlined copy of Data._Representation(*(_QWORD *)v19, *((_QWORD *)v19 + 1));
      *(_QWORD *)v18 = v21;
      *((_QWORD *)v18 + 1) = v20;
    }
    v22 = a3[8];
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = *((_QWORD *)v24 + 1);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    else
    {
      v26 = *(_QWORD *)v24;
      outlined copy of Data._Representation(*(_QWORD *)v24, *((_QWORD *)v24 + 1));
      *(_QWORD *)v23 = v26;
      *((_QWORD *)v23 + 1) = v25;
    }
    v27 = a3[9];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = *((_QWORD *)v29 + 1);
    if (v30 >> 60 == 15)
    {
      *(_OWORD *)v28 = *(_OWORD *)v29;
    }
    else
    {
      v31 = *(_QWORD *)v29;
      outlined copy of Data._Representation(*(_QWORD *)v29, *((_QWORD *)v29 + 1));
      *(_QWORD *)v28 = v31;
      *((_QWORD *)v28 + 1) = v30;
    }
    v32 = a3[10];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    v35 = *((_QWORD *)v34 + 1);
    if (v35 >> 60 == 15)
    {
      *(_OWORD *)v33 = *(_OWORD *)v34;
    }
    else
    {
      v36 = *(_QWORD *)v34;
      outlined copy of Data._Representation(*(_QWORD *)v34, *((_QWORD *)v34 + 1));
      *(_QWORD *)v33 = v36;
      *((_QWORD *)v33 + 1) = v35;
    }
    v37 = a3[11];
    v38 = a3[12];
    v39 = (char *)a1 + v37;
    v40 = (char *)a2 + v37;
    *(_DWORD *)v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    v41 = (char *)a1 + v38;
    v42 = (uint64_t *)((char *)a2 + v38);
    v43 = *(uint64_t *)((char *)a2 + v38 + 8);
    if (v43 >> 60 == 15)
    {
      *(_OWORD *)v41 = *(_OWORD *)v42;
    }
    else
    {
      v44 = *v42;
      outlined copy of Data._Representation(*v42, v43);
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v43;
    }
    v45 = a3[13];
    v46 = (char *)a1 + v45;
    v47 = (char *)a2 + v45;
    v48 = *((_QWORD *)v47 + 1);
    if (v48 >> 60 == 15)
    {
      *(_OWORD *)v46 = *(_OWORD *)v47;
    }
    else
    {
      v49 = *(_QWORD *)v47;
      outlined copy of Data._Representation(*(_QWORD *)v47, *((_QWORD *)v47 + 1));
      *(_QWORD *)v46 = v49;
      *((_QWORD *)v46 + 1) = v48;
    }
  }
  return a1;
}

uint64_t destroy for TetraPB_TetraMessage(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;

  v4 = type metadata accessor for UnknownStorage();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + a2[6]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    result = outlined consume of Data._Representation(*v6, v7);
  v8 = (uint64_t *)(a1 + a2[7]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    result = outlined consume of Data._Representation(*v8, v9);
  v10 = (uint64_t *)(a1 + a2[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    result = outlined consume of Data._Representation(*v10, v11);
  v12 = (uint64_t *)(a1 + a2[9]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    result = outlined consume of Data._Representation(*v12, v13);
  v14 = (uint64_t *)(a1 + a2[10]);
  v15 = v14[1];
  if (v15 >> 60 != 15)
    result = outlined consume of Data._Representation(*v14, v15);
  v16 = (uint64_t *)(a1 + a2[12]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    result = outlined consume of Data._Representation(*v16, v17);
  v18 = (uint64_t *)(a1 + a2[13]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    return outlined consume of Data._Representation(*v18, v19);
  return result;
}

uint64_t initializeWithCopy for TetraPB_TetraMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = (uint64_t *)(a2 + v8);
  v13 = *(_QWORD *)(a2 + v8 + 8);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
  }
  else
  {
    v14 = *v12;
    outlined copy of Data._Representation(*v12, v13);
    *(_QWORD *)v11 = v14;
    *(_QWORD *)(v11 + 8) = v13;
  }
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = v17[1];
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  else
  {
    v19 = *v17;
    outlined copy of Data._Representation(*v17, v17[1]);
    *(_QWORD *)v16 = v19;
    *(_QWORD *)(v16 + 8) = v18;
  }
  v20 = a3[8];
  v21 = a1 + v20;
  v22 = (uint64_t *)(a2 + v20);
  v23 = v22[1];
  if (v23 >> 60 == 15)
  {
    *(_OWORD *)v21 = *(_OWORD *)v22;
  }
  else
  {
    v24 = *v22;
    outlined copy of Data._Representation(*v22, v22[1]);
    *(_QWORD *)v21 = v24;
    *(_QWORD *)(v21 + 8) = v23;
  }
  v25 = a3[9];
  v26 = a1 + v25;
  v27 = (uint64_t *)(a2 + v25);
  v28 = v27[1];
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
  }
  else
  {
    v29 = *v27;
    outlined copy of Data._Representation(*v27, v27[1]);
    *(_QWORD *)v26 = v29;
    *(_QWORD *)(v26 + 8) = v28;
  }
  v30 = a3[10];
  v31 = a1 + v30;
  v32 = (uint64_t *)(a2 + v30);
  v33 = v32[1];
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  else
  {
    v34 = *v32;
    outlined copy of Data._Representation(*v32, v32[1]);
    *(_QWORD *)v31 = v34;
    *(_QWORD *)(v31 + 8) = v33;
  }
  v35 = a3[11];
  v36 = a3[12];
  v37 = a1 + v35;
  v38 = a2 + v35;
  *(_DWORD *)v37 = *(_DWORD *)v38;
  *(_BYTE *)(v37 + 4) = *(_BYTE *)(v38 + 4);
  v39 = a1 + v36;
  v40 = (uint64_t *)(a2 + v36);
  v41 = *(_QWORD *)(a2 + v36 + 8);
  if (v41 >> 60 == 15)
  {
    *(_OWORD *)v39 = *(_OWORD *)v40;
  }
  else
  {
    v42 = *v40;
    outlined copy of Data._Representation(*v40, v41);
    *(_QWORD *)v39 = v42;
    *(_QWORD *)(v39 + 8) = v41;
  }
  v43 = a3[13];
  v44 = a1 + v43;
  v45 = (uint64_t *)(a2 + v43);
  v46 = v45[1];
  if (v46 >> 60 == 15)
  {
    *(_OWORD *)v44 = *(_OWORD *)v45;
  }
  else
  {
    v47 = *v45;
    outlined copy of Data._Representation(*v45, v45[1]);
    *(_QWORD *)v44 = v47;
    *(_QWORD *)(v44 + 8) = v46;
  }
  return a1;
}

uint64_t assignWithCopy for TetraPB_TetraMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  v11 = a3[6];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *(_QWORD *)(a2 + v11 + 8);
  if (*(_QWORD *)(a1 + v11 + 8) >> 60 == 15)
  {
    if (v14 >> 60 != 15)
    {
      v15 = *v13;
      outlined copy of Data._Representation(v15, v14);
      *v12 = v15;
      v12[1] = v14;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v14 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v12);
LABEL_6:
    *(_OWORD *)v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }
  v16 = *v13;
  outlined copy of Data._Representation(v16, v14);
  v17 = *v12;
  v18 = v12[1];
  *v12 = v16;
  v12[1] = v14;
  outlined consume of Data._Representation(v17, v18);
LABEL_8:
  v19 = a3[7];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = *(_QWORD *)(a2 + v19 + 8);
  if (*(_QWORD *)(a1 + v19 + 8) >> 60 == 15)
  {
    if (v22 >> 60 != 15)
    {
      v23 = *v21;
      outlined copy of Data._Representation(v23, v22);
      *v20 = v23;
      v20[1] = v22;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v22 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v20);
LABEL_13:
    *(_OWORD *)v20 = *(_OWORD *)v21;
    goto LABEL_15;
  }
  v24 = *v21;
  outlined copy of Data._Representation(v24, v22);
  v25 = *v20;
  v26 = v20[1];
  *v20 = v24;
  v20[1] = v22;
  outlined consume of Data._Representation(v25, v26);
LABEL_15:
  v27 = a3[8];
  v28 = (uint64_t *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v30 = *(_QWORD *)(a2 + v27 + 8);
  if (*(_QWORD *)(a1 + v27 + 8) >> 60 == 15)
  {
    if (v30 >> 60 != 15)
    {
      v31 = *v29;
      outlined copy of Data._Representation(v31, v30);
      *v28 = v31;
      v28[1] = v30;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v30 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v28);
LABEL_20:
    *(_OWORD *)v28 = *(_OWORD *)v29;
    goto LABEL_22;
  }
  v32 = *v29;
  outlined copy of Data._Representation(v32, v30);
  v33 = *v28;
  v34 = v28[1];
  *v28 = v32;
  v28[1] = v30;
  outlined consume of Data._Representation(v33, v34);
LABEL_22:
  v35 = a3[9];
  v36 = (uint64_t *)(a1 + v35);
  v37 = (uint64_t *)(a2 + v35);
  v38 = *(_QWORD *)(a2 + v35 + 8);
  if (*(_QWORD *)(a1 + v35 + 8) >> 60 == 15)
  {
    if (v38 >> 60 != 15)
    {
      v39 = *v37;
      outlined copy of Data._Representation(v39, v38);
      *v36 = v39;
      v36[1] = v38;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v38 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v36);
LABEL_27:
    *(_OWORD *)v36 = *(_OWORD *)v37;
    goto LABEL_29;
  }
  v40 = *v37;
  outlined copy of Data._Representation(v40, v38);
  v41 = *v36;
  v42 = v36[1];
  *v36 = v40;
  v36[1] = v38;
  outlined consume of Data._Representation(v41, v42);
LABEL_29:
  v43 = a3[10];
  v44 = (uint64_t *)(a1 + v43);
  v45 = (uint64_t *)(a2 + v43);
  v46 = *(_QWORD *)(a2 + v43 + 8);
  if (*(_QWORD *)(a1 + v43 + 8) >> 60 == 15)
  {
    if (v46 >> 60 != 15)
    {
      v47 = *v45;
      outlined copy of Data._Representation(v47, v46);
      *v44 = v47;
      v44[1] = v46;
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v46 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v44);
LABEL_34:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    goto LABEL_36;
  }
  v48 = *v45;
  outlined copy of Data._Representation(v48, v46);
  v49 = *v44;
  v50 = v44[1];
  *v44 = v48;
  v44[1] = v46;
  outlined consume of Data._Representation(v49, v50);
LABEL_36:
  v51 = a3[11];
  v52 = a1 + v51;
  v53 = (int *)(a2 + v51);
  v54 = *v53;
  *(_BYTE *)(v52 + 4) = *((_BYTE *)v53 + 4);
  *(_DWORD *)v52 = v54;
  v55 = a3[12];
  v56 = (uint64_t *)(a1 + v55);
  v57 = (uint64_t *)(a2 + v55);
  v58 = *(_QWORD *)(a2 + v55 + 8);
  if (*(_QWORD *)(a1 + v55 + 8) >> 60 == 15)
  {
    if (v58 >> 60 != 15)
    {
      v59 = *v57;
      outlined copy of Data._Representation(v59, v58);
      *v56 = v59;
      v56[1] = v58;
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (v58 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v56);
LABEL_41:
    *(_OWORD *)v56 = *(_OWORD *)v57;
    goto LABEL_43;
  }
  v60 = *v57;
  outlined copy of Data._Representation(v60, v58);
  v61 = *v56;
  v62 = v56[1];
  *v56 = v60;
  v56[1] = v58;
  outlined consume of Data._Representation(v61, v62);
LABEL_43:
  v63 = a3[13];
  v64 = (uint64_t *)(a1 + v63);
  v65 = (uint64_t *)(a2 + v63);
  v66 = *(_QWORD *)(a2 + v63 + 8);
  if (*(_QWORD *)(a1 + v63 + 8) >> 60 != 15)
  {
    if (v66 >> 60 != 15)
    {
      v68 = *v65;
      outlined copy of Data._Representation(v68, v66);
      v69 = *v64;
      v70 = v64[1];
      *v64 = v68;
      v64[1] = v66;
      outlined consume of Data._Representation(v69, v70);
      return a1;
    }
    outlined destroy of Data((uint64_t)v64);
    goto LABEL_48;
  }
  if (v66 >> 60 == 15)
  {
LABEL_48:
    *(_OWORD *)v64 = *(_OWORD *)v65;
    return a1;
  }
  v67 = *v65;
  outlined copy of Data._Representation(v67, v66);
  *v64 = v67;
  v64[1] = v66;
  return a1;
}

uint64_t initializeWithTake for TetraPB_TetraMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v11 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  v13 = a3[11];
  v14 = a3[12];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for TetraPB_TetraMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  *(_DWORD *)v9 = *(_DWORD *)v10;
  v11 = a1 + v8;
  v12 = a2 + v8;
  v13 = *(_QWORD *)(a1 + v8 + 8);
  if (v13 >> 60 == 15)
    goto LABEL_4;
  v14 = *(_QWORD *)(v12 + 8);
  if (v14 >> 60 == 15)
  {
    outlined destroy of Data(v11);
LABEL_4:
    *(_OWORD *)v11 = *(_OWORD *)v12;
    goto LABEL_6;
  }
  v15 = *(_QWORD *)v11;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_QWORD *)(v11 + 8) = v14;
  outlined consume of Data._Representation(v15, v13);
LABEL_6:
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a1 + v16 + 8);
  if (v19 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    goto LABEL_11;
  }
  v20 = *(_QWORD *)(v18 + 8);
  if (v20 >> 60 == 15)
  {
    outlined destroy of Data(v17);
    goto LABEL_9;
  }
  v21 = *(_QWORD *)v17;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_QWORD *)(v17 + 8) = v20;
  outlined consume of Data._Representation(v21, v19);
LABEL_11:
  v22 = a3[8];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)(a1 + v22 + 8);
  if (v25 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)v23 = *(_OWORD *)v24;
    goto LABEL_16;
  }
  v26 = *(_QWORD *)(v24 + 8);
  if (v26 >> 60 == 15)
  {
    outlined destroy of Data(v23);
    goto LABEL_14;
  }
  v27 = *(_QWORD *)v23;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_QWORD *)(v23 + 8) = v26;
  outlined consume of Data._Representation(v27, v25);
LABEL_16:
  v28 = a3[9];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = *(_QWORD *)(a1 + v28 + 8);
  if (v31 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)v29 = *(_OWORD *)v30;
    goto LABEL_21;
  }
  v32 = *(_QWORD *)(v30 + 8);
  if (v32 >> 60 == 15)
  {
    outlined destroy of Data(v29);
    goto LABEL_19;
  }
  v33 = *(_QWORD *)v29;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_QWORD *)(v29 + 8) = v32;
  outlined consume of Data._Representation(v33, v31);
LABEL_21:
  v34 = a3[10];
  v35 = a1 + v34;
  v36 = a2 + v34;
  v37 = *(_QWORD *)(a1 + v34 + 8);
  if (v37 >> 60 == 15)
  {
LABEL_24:
    *(_OWORD *)v35 = *(_OWORD *)v36;
    goto LABEL_26;
  }
  v38 = *(_QWORD *)(v36 + 8);
  if (v38 >> 60 == 15)
  {
    outlined destroy of Data(v35);
    goto LABEL_24;
  }
  v39 = *(_QWORD *)v35;
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *(_QWORD *)(v35 + 8) = v38;
  outlined consume of Data._Representation(v39, v37);
LABEL_26:
  v40 = a3[11];
  v41 = a3[12];
  v42 = a1 + v40;
  v43 = a2 + v40;
  *(_DWORD *)v42 = *(_DWORD *)v43;
  *(_BYTE *)(v42 + 4) = *(_BYTE *)(v43 + 4);
  v44 = a1 + v41;
  v45 = a2 + v41;
  v46 = *(_QWORD *)(a1 + v41 + 8);
  if (v46 >> 60 == 15)
  {
LABEL_29:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    goto LABEL_31;
  }
  v47 = *(_QWORD *)(v45 + 8);
  if (v47 >> 60 == 15)
  {
    outlined destroy of Data(v44);
    goto LABEL_29;
  }
  v48 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = v47;
  outlined consume of Data._Representation(v48, v46);
LABEL_31:
  v49 = a3[13];
  v50 = (uint64_t *)(a1 + v49);
  v51 = (uint64_t *)(a2 + v49);
  v52 = *(_QWORD *)(a1 + v49 + 8);
  if (v52 >> 60 != 15)
  {
    v53 = v51[1];
    if (v53 >> 60 != 15)
    {
      v54 = *v50;
      *v50 = *v51;
      v50[1] = v53;
      outlined consume of Data._Representation(v54, v52);
      return a1;
    }
    outlined destroy of Data((uint64_t)v50);
  }
  *(_OWORD *)v50 = *(_OWORD *)v51;
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraPB_TetraMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB22374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  v6 = type metadata accessor for UnknownStorage();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
  v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10)
    return 0;
  else
    return v11;
}

uint64_t storeEnumTagSinglePayload for TetraPB_TetraMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB22408(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for UnknownStorage();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 24));
  *v10 = 0;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t type metadata completion function for TetraPB_TetraMessage()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TetraPB_TetraInnerMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for TetraPB_TetraInnerMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for TetraPB_TetraPublicPrekey()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraPB_PaddyKeyDistributionMessage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      outlined copy of Data._Representation(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    v18 = (char *)a1 + v15;
    v19 = (uint64_t *)((char *)a2 + v15);
    v20 = *(uint64_t *)((char *)a2 + v15 + 8);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    else
    {
      v21 = *v19;
      outlined copy of Data._Representation(*v19, v20);
      *(_QWORD *)v18 = v21;
      *((_QWORD *)v18 + 1) = v20;
    }
  }
  return a1;
}

uint64_t destroy for TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;

  v4 = type metadata accessor for UnknownStorage();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    result = outlined consume of Data._Representation(*v6, v7);
  v8 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    return outlined consume of Data._Representation(*v8, v9);
  return result;
}

uint64_t initializeWithCopy for TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    outlined copy of Data._Representation(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a1 + v13;
  v17 = (uint64_t *)(a2 + v13);
  v18 = *(_QWORD *)(a2 + v13 + 8);
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  else
  {
    v19 = *v17;
    outlined copy of Data._Representation(*v17, v18);
    *(_QWORD *)v16 = v19;
    *(_QWORD *)(v16 + 8) = v18;
  }
  return a1;
}

uint64_t assignWithCopy for TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      v11 = *v9;
      outlined copy of Data._Representation(v11, v10);
      *v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v8);
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v12 = *v9;
  outlined copy of Data._Representation(v12, v10);
  v13 = *v8;
  v14 = v8[1];
  *v8 = v12;
  v8[1] = v10;
  outlined consume of Data._Representation(v13, v14);
LABEL_8:
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = (int *)(a2 + v15);
  v18 = *v17;
  *(_BYTE *)(v16 + 4) = *((_BYTE *)v17 + 4);
  *(_DWORD *)v16 = v18;
  v19 = a3[7];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = *(_QWORD *)(a2 + v19 + 8);
  if (*(_QWORD *)(a1 + v19 + 8) >> 60 != 15)
  {
    if (v22 >> 60 != 15)
    {
      v24 = *v21;
      outlined copy of Data._Representation(v24, v22);
      v25 = *v20;
      v26 = v20[1];
      *v20 = v24;
      v20[1] = v22;
      outlined consume of Data._Representation(v25, v26);
      return a1;
    }
    outlined destroy of Data((uint64_t)v20);
    goto LABEL_13;
  }
  if (v22 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)v20 = *(_OWORD *)v21;
    return a1;
  }
  v23 = *v21;
  outlined copy of Data._Representation(v23, v22);
  *v20 = v23;
  v20[1] = v22;
  return a1;
}

uint64_t initializeWithTake for TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for TetraPB_PaddyKeyDistributionMessage(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    outlined destroy of Data(v8);
LABEL_4:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)v8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v11;
  outlined consume of Data._Representation(v12, v10);
LABEL_6:
  v13 = a3[6];
  v14 = a3[7];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = (uint64_t *)(a1 + v14);
  v18 = (uint64_t *)(a2 + v14);
  v19 = *(_QWORD *)(a1 + v14 + 8);
  if (v19 >> 60 != 15)
  {
    v20 = v18[1];
    if (v20 >> 60 != 15)
    {
      v21 = *v17;
      *v17 = *v18;
      v17[1] = v20;
      outlined consume of Data._Representation(v21, v19);
      return a1;
    }
    outlined destroy of Data((uint64_t)v17);
  }
  *(_OWORD *)v17 = *(_OWORD *)v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraPB_PaddyKeyDistributionMessage()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for TetraPB_PaddyKeyDistributionMessage()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for TetraPB_PaddyKeyDistributionMessage()
{
  return type metadata completion function for TetraPB_KyberPrivateKey();
}

uint64_t one-time initialization function for paddySenderKeyIDPrefix()
{
  uint64_t result;
  uint64_t v1;

  result = specialized Data.init<A>(_:)(0xD00000000000001ELL, 0x800000020BB48B10);
  *(_QWORD *)&paddySenderKeyIDPrefix = result;
  *((_QWORD *)&paddySenderKeyIDPrefix + 1) = v1;
  return result;
}

uint64_t one-time initialization function for paddyRatchetMsgKeyPrefix()
{
  uint64_t result;
  uint64_t v1;

  result = specialized Data.init<A>(_:)(0xD00000000000002ELL, 0x800000020BB48AE0);
  paddyRatchetMsgKeyPrefix = result;
  *(_QWORD *)algn_25472E308 = v1;
  return result;
}

uint64_t one-time initialization function for paddyRatchetSenderKeyPrefix()
{
  uint64_t result;
  uint64_t v1;

  result = specialized Data.init<A>(_:)(0xD00000000000002DLL, 0x800000020BB48AB0);
  paddyRatchetSenderKeyPrefix = result;
  *(_QWORD *)algn_25472E318 = v1;
  return result;
}

unint64_t protocol witness for SymmetricRatchetStep.ratchet(_:) in conformance PaddyHKDFRatchet(char *a1, char *a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  char *v53;
  char *v54;
  _QWORD v56[2];
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t __src;
  unint64_t v74;
  uint64_t v75;

  v66 = a1;
  v67 = a2;
  v75 = *MEMORY[0x24BDAC8D0];
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SymmetricKey, UInt64));
  v7 = MEMORY[0x24BDAC7A8](v69);
  v65 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v64 = (char *)v56 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v63 = (char *)v56 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v70 = (char *)v56 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v56 - v18;
  v20 = *v4;
  v21 = v4[1];
  v22 = type metadata accessor for SymmetricKey();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v24(v19, a3, v22);
  v25 = *(int *)(v14 + 48);
  *(_QWORD *)&v19[v25] = a4;
  v24(v17, (uint64_t)v19, v22);
  *(_QWORD *)&v17[v25] = a4;
  outlined destroy of (key: SymmetricKey, index: UInt64)((uint64_t)v17);
  if (a4 == -1)
  {
    __break(1u);
  }
  else
  {
    v68 = v25;
    v26 = *(int *)(v14 + 48);
    v24(v17, (uint64_t)v19, v22);
    *(_QWORD *)&v17[v26] = a4;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v22);
    if (one-time initialization token for paddyRatchetMsgKeyPrefix == -1)
    {
      if (!HIDWORD(a4))
        goto LABEL_4;
LABEL_10:
      __break(1u);
      goto LABEL_11;
    }
  }
  swift_once();
  if (HIDWORD(a4))
    goto LABEL_10;
LABEL_4:
  v60 = v23;
  v28 = paddyRatchetMsgKeyPrefix;
  v27 = *(_QWORD *)algn_25472E308;
  __src = a4;
  v29 = specialized Data.InlineData.init(_:)(&__src, (_BYTE *)&__src + 4);
  v31 = v30 & 0xFFFFFFFFFFFFFFLL;
  v71 = v28;
  v72 = v27;
  outlined copy of Data._Representation(v28, v27);
  specialized Data.append<A>(contentsOf:)(v29, v31);
  v32 = v71;
  v33 = v72;
  __src = v71;
  v74 = v72;
  outlined copy of Data._Representation(v20, v21);
  outlined copy of Data._Representation(v32, v33);
  specialized Data.append<A>(contentsOf:)(v20, v21);
  v61 = v21;
  v62 = v20;
  outlined consume of Data._Representation(v20, v21);
  outlined consume of Data._Representation(v32, v33);
  v14 = __src;
  v23 = v74;
  v34 = *(int *)(v69 + 48);
  type metadata accessor for SHA256();
  v35 = lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
  v36 = lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC63E0], MEMORY[0x24BDC6398]);
  v58 = lazy protocol witness table accessor for type Data and conformance Data();
  v37 = v70;
  v69 = v35;
  v59 = v36;
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  v57 = a4;
  *(_QWORD *)&v37[v34] = a4;
  v38 = *(_QWORD *)&v19[v68];
  a4 = v38 + 1;
  if (v38 != -1)
  {
    if (one-time initialization token for paddyRatchetSenderKeyPrefix == -1)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  __break(1u);
LABEL_12:
  swift_once();
LABEL_6:
  v40 = v61;
  v39 = v62;
  if (HIDWORD(a4))
    __break(1u);
  v42 = paddyRatchetSenderKeyPrefix;
  v41 = *(_QWORD *)algn_25472E318;
  __src = a4;
  v43 = specialized Data.InlineData.init(_:)(&__src, (_BYTE *)&__src + 4);
  v56[1] = a4;
  v44 = v43;
  v68 = v23;
  v46 = v45 & 0xFFFFFFFFFFFFFFLL;
  v71 = v42;
  v72 = v41;
  outlined copy of Data._Representation(v42, v41);
  specialized Data.append<A>(contentsOf:)(v44, v46);
  v47 = v71;
  v48 = v72;
  __src = v71;
  v74 = v72;
  outlined copy of Data._Representation(v39, v40);
  outlined copy of Data._Representation(v47, v48);
  specialized Data.append<A>(contentsOf:)(v39, v40);
  outlined consume of Data._Representation(v39, v40);
  outlined consume of Data._Representation(v47, v48);
  v49 = __src;
  v50 = v74;
  v51 = v63;
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  outlined consume of Data._Representation(v14, v68);
  outlined consume of Data._Representation(v49, v50);
  outlined destroy of (key: SymmetricKey, index: UInt64)((uint64_t)v19);
  v52 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
  v53 = v64;
  v52(v64, v70, v22);
  v52(v66, v53, v22);
  v54 = v65;
  v52(v65, v51, v22);
  v52(v67, v54, v22);
  return v57;
}

uint64_t closure #1 in deriveSenderKeyID(key:info:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = MEMORY[0x24BEE0F88];
  v14[4] = MEMORY[0x24BDCFB90];
  v14[0] = a1;
  v14[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x24BEE0F88]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = specialized Data.InlineData.init(_:)(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = specialized Data.LargeSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = specialized Data.InlineSlice.init(_:)((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t PaddyOutgoingSymmetricRatchet.init(conversationDST:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, uint64_t);
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  ValueMetadata *v40;
  _UNKNOWN **v41;
  unint64_t v42;

  v38 = a3;
  v5 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SymmetricKeySize();
  MEMORY[0x24BDAC7A8](v8);
  v9 = type metadata accessor for SymmetricKey();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v36 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v34 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v34 - v16;
  static SymmetricKeySize.bits256.getter();
  SymmetricKey.init(size:)();
  v18 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v18(v15, v17, v9);
  v40 = &type metadata for PaddyHKDFRatchet;
  v41 = &protocol witness table for PaddyHKDFRatchet;
  v19 = a1;
  *(_QWORD *)&v39 = a1;
  *((_QWORD *)&v39 + 1) = a2;
  v20 = *(int *)(v5 + 20);
  v37 = v7;
  *(_QWORD *)&v7[v20] = MEMORY[0x24BEE4B00];
  v21 = v19;
  v42 = a2;
  outlined copy of Data._Representation(v19, a2);
  if (SymmetricKey.bitCount.getter() >= 256)
  {
    v35 = v21;
    v26 = *(int *)(v5 + 24);
    v27 = (uint64_t)v37;
    outlined init with copy of SymmetricRatchetStep((uint64_t)&v39, (uint64_t)&v37[v26]);
    v28 = v36;
    v18(v36, v15, v9);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v39);
    v29 = *(void (**)(char *, uint64_t))(v10 + 8);
    v29(v15, v9);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v27, v28, v9);
    *(_QWORD *)(v27
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                       + 48)) = 0;
    outlined init with take of SymmetricRatchet(v27, v38);
    if (one-time initialization token for paddySenderKeyIDPrefix != -1)
      swift_once();
    v39 = paddySenderKeyIDPrefix;
    type metadata accessor for SHA256();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC63E0], MEMORY[0x24BDC6398]);
    lazy protocol witness table accessor for type Data and conformance Data();
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    SymmetricKey.withUnsafeBytes<A>(_:)();
    v29(v28, v9);
    v30 = v39;
    v29(v17, v9);
    result = type metadata accessor for PaddyOutgoingSymmetricRatchet(0);
    v31 = v38;
    *(_OWORD *)(v38 + *(int *)(result + 20)) = v30;
    v32 = (uint64_t *)(v31 + *(int *)(result + 24));
    v33 = v42;
    *v32 = v35;
    v32[1] = v33;
  }
  else
  {
    v22 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, (uint64_t (*)(uint64_t))MEMORY[0x24BDC61A8], MEMORY[0x24BDC61C0]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v23, *MEMORY[0x24BDC6190], v22);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v39);
    v24 = *(void (**)(char *, uint64_t))(v10 + 8);
    v24(v15, v9);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v21, v42);
    return ((uint64_t (*)(char *, uint64_t))v24)(v17, v9);
  }
  return result;
}

uint64_t outlined init with take of SymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SymmetricRatchet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PaddyOutgoingSymmetricRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for PaddyOutgoingSymmetricRatchet);
}

uint64_t PaddyOutgoingSymmetricRatchet.init(data:conversationDST:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return PaddyOutgoingSymmetricRatchet.init(data:conversationDST:)(a1, a2, a3, a4, type metadata accessor for PaddyOutgoingSymmetricRatchet, a5);
}

uint64_t PaddyOutgoingSymmetricRatchet.exportSenderKey()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(int *)(v4 + 48);
  v8 = type metadata accessor for SymmetricKey();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v6, v1, v8);
  v10 = *(_QWORD *)(v1 + v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v6, v8);
  return v10;
}

uint64_t PaddyOutgoingSymmetricRatchet.seal(message:authenticatedData:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a4;
  v25 = a2;
  v26 = a3;
  v24 = a1;
  v6 = type metadata accessor for SymmetricKey();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v23 - v15;
  v17 = *(_QWORD *)(v4 + *(int *)(v14 + 48));
  if (v17 == -1)
  {
    lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
    swift_allocError();
    *v22 = 0;
    swift_willThrow();
    goto LABEL_6;
  }
  SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(v17, 1, (uint64_t)v9);
  if (v5)
  {
LABEL_6:
    swift_unexpectedError();
    __break(1u);
    goto LABEL_7;
  }
  v18 = *(int *)(v10 + 48);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v9, v6);
  *(_QWORD *)&v16[v18] = v17;
  v19 = static PaddySymmetricLayer.seal(_:authenticatedData:using:)(v24, v25, v26, v27, (uint64_t)v16);
  v20 = *(int *)(v10 + 48);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v16, v6);
  *(_QWORD *)&v13[v20] = v17;
  if (!HIDWORD(v17))
  {
    outlined destroy of (key: SymmetricKey, index: UInt64)((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    return v19;
  }
LABEL_7:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PaddyOutgoingSymmetricRatchet.serializedData()()
{
  return PaddyOutgoingSymmetricRatchet.serializedData()(type metadata accessor for PaddyOutgoingSymmetricRatchet);
}

uint64_t PaddyOutgoingSymmetricRatchet.ratchetSenderKeyID()()
{
  return PaddyOutgoingSymmetricRatchet.ratchetSenderKeyID()(type metadata accessor for PaddyOutgoingSymmetricRatchet);
}

uint64_t PaddyIncomingSymmetricRatchet.init(senderKey:conversationDST:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t result;
  char *v21;
  char *v22;
  void (*v23)(char *, uint64_t);
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  ValueMetadata *v34;
  _UNKNOWN **v35;
  unint64_t v36;

  v32 = a4;
  v7 = type metadata accessor for SymmetricKey();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v29 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v28 - v11;
  v13 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v30 = a1;
  v16(v12, (uint64_t)a1, v7);
  v34 = &type metadata for PaddyHKDFRatchet;
  v35 = &protocol witness table for PaddyHKDFRatchet;
  *(_QWORD *)&v33 = a2;
  *((_QWORD *)&v33 + 1) = a3;
  *(_QWORD *)&v15[*(int *)(v13 + 20)] = MEMORY[0x24BEE4B00];
  v31 = a2;
  v36 = a3;
  outlined copy of Data._Representation(a2, a3);
  if (SymmetricKey.bitCount.getter() >= 256)
  {
    v21 = v30;
    outlined init with copy of SymmetricRatchetStep((uint64_t)&v33, (uint64_t)&v15[*(int *)(v13 + 24)]);
    v22 = v29;
    v16(v29, (uint64_t)v12, v7);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v33);
    v23 = *(void (**)(char *, uint64_t))(v8 + 8);
    v23(v12, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v22, v7);
    *(_QWORD *)&v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                           + 48)] = 0;
    outlined init with take of SymmetricRatchet((uint64_t)v15, v32);
    if (one-time initialization token for paddySenderKeyIDPrefix != -1)
      swift_once();
    v33 = paddySenderKeyIDPrefix;
    type metadata accessor for SHA256();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC63E0], MEMORY[0x24BDC6398]);
    lazy protocol witness table accessor for type Data and conformance Data();
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    SymmetricKey.withUnsafeBytes<A>(_:)();
    v23(v22, v7);
    v24 = v33;
    v23(v21, v7);
    result = type metadata accessor for PaddyIncomingSymmetricRatchet(0);
    v25 = v32;
    *(_OWORD *)(v32 + *(int *)(result + 20)) = v24;
    v26 = (_QWORD *)(v25 + *(int *)(result + 24));
    v27 = v36;
    *v26 = v31;
    v26[1] = v27;
  }
  else
  {
    v17 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, (uint64_t (*)(uint64_t))MEMORY[0x24BDC61A8], MEMORY[0x24BDC61C0]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v18, *MEMORY[0x24BDC6190], v17);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v33);
    v19 = *(void (**)(char *, uint64_t))(v8 + 8);
    v19(v12, v7);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v31, v36);
    return ((uint64_t (*)(char *, uint64_t))v19)(v30, v7);
  }
  return result;
}

uint64_t PaddyIncomingSymmetricRatchet.init(senderKey:index:senderKeyID:conversationDST:)@<X0>(char *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD v41[5];
  unint64_t v42;

  v36 = a7;
  v42 = a4;
  v40 = a3;
  v35 = a2;
  v10 = type metadata accessor for SymmetricKey();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v34 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v33 - v14;
  v16 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v37 = a1;
  v19(v15, (uint64_t)a1, v10);
  v41[3] = &type metadata for PaddyHKDFRatchet;
  v41[4] = &protocol witness table for PaddyHKDFRatchet;
  v41[0] = a5;
  v41[1] = a6;
  *(_QWORD *)&v18[*(int *)(v16 + 20)] = MEMORY[0x24BEE4B00];
  v38 = a5;
  v39 = a6;
  outlined copy of Data._Representation(a5, a6);
  if (SymmetricKey.bitCount.getter() >= 256)
  {
    outlined init with copy of SymmetricRatchetStep((uint64_t)v41, (uint64_t)&v18[*(int *)(v16 + 24)]);
    v24 = v34;
    v19(v34, (uint64_t)v15, v10);
    v25 = v35;
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
    v26 = *(void (**)(char *, uint64_t))(v11 + 8);
    v26(v15, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v24, v10);
    *(_QWORD *)&v18[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                           + 48)] = v25;
    v26(v37, v10);
    v27 = (uint64_t)v18;
    v28 = v36;
    outlined init with take of SymmetricRatchet(v27, v36);
    result = type metadata accessor for PaddyIncomingSymmetricRatchet(0);
    v29 = (_QWORD *)(v28 + *(int *)(result + 24));
    v30 = v39;
    *v29 = v38;
    v29[1] = v30;
    v31 = (_QWORD *)(v28 + *(int *)(result + 20));
    v32 = v42;
    *v31 = v40;
    v31[1] = v32;
  }
  else
  {
    v20 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, (uint64_t (*)(uint64_t))MEMORY[0x24BDC61A8], MEMORY[0x24BDC61C0]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v21, *MEMORY[0x24BDC6190], v20);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v41);
    v22 = *(void (**)(char *, uint64_t))(v11 + 8);
    v22(v15, v10);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v38, v39);
    outlined consume of Data._Representation(v40, v42);
    return ((uint64_t (*)(char *, uint64_t))v22)(v37, v10);
  }
  return result;
}

uint64_t PaddyIncomingSymmetricRatchet.init(data:conversationDST:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return PaddyOutgoingSymmetricRatchet.init(data:conversationDST:)(a1, a2, a3, a4, type metadata accessor for PaddyIncomingSymmetricRatchet, a5);
}

uint64_t PaddyOutgoingSymmetricRatchet.init(data:conversationDST:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t (*a5)(_QWORD)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t (*v39)(_QWORD);
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(_QWORD);
  __int128 v53;
  __int128 v54;
  _UNKNOWN **v55;
  uint64_t v56;

  v51 = a6;
  v52 = a5;
  v56 = a3;
  v10 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v13);
  v14 = (int *)type metadata accessor for MPPB_LiteRatchet();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (uint64_t (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet, (uint64_t)&protocol conformance descriptor for MPPB_LiteRatchet);
  Message.init(serializedData:extensions:partial:options:)();
  if (v6)
  {
    outlined consume of Data._Representation(v56, a4);
    return outlined consume of Data._Representation(a1, a2);
  }
  else
  {
    v47 = v12;
    v18 = (uint64_t *)&v16[v14[7]];
    v19 = *v18;
    v20 = v18[1];
    if (v20 >> 60 == 15)
      v21 = 0;
    else
      v21 = *v18;
    if (v20 >> 60 == 15)
      v22 = 0xC000000000000000;
    else
      v22 = v18[1];
    v46 = *v18;
    outlined copy of Data?(v19, v20);
    v50 = a4;
    specialized static Data.== infix(_:_:)(v56, a4);
    v24 = v23;
    v48 = v22;
    v49 = v21;
    outlined consume of Data._Representation(v21, v22);
    if ((v24 & 1) != 0)
    {
      v25 = (uint64_t *)&v16[v14[6]];
      v26 = *v25;
      v27 = v25[1];
      if (v27 >> 60 == 15)
        v28 = 0;
      else
        v28 = *v25;
      v29 = 0xC000000000000000;
      if (v27 >> 60 != 15)
        v29 = v27;
      v44 = v29;
      v45 = v26;
      v30 = v51;
      v31 = v52(0);
      v32 = (uint64_t *)(v30 + *(int *)(v31 + 20));
      v43 = v32;
      v33 = v44;
      *v32 = v28;
      v32[1] = v33;
      v34 = (uint64_t *)(v30 + *(int *)(v31 + 24));
      v35 = v48;
      *v34 = v49;
      v34[1] = v35;
      v36 = (uint64_t *)&v16[v14[5]];
      v37 = *v36;
      v38 = v36[1];
      if (v38 >> 60 == 15)
        v39 = 0;
      else
        v39 = (uint64_t (*)(_QWORD))*v36;
      v40 = 0xC000000000000000;
      if (v38 >> 60 != 15)
        v40 = v38;
      v44 = v40;
      *((_QWORD *)&v54 + 1) = &type metadata for PaddyHKDFRatchet;
      v55 = &protocol witness table for PaddyHKDFRatchet;
      v52 = v39;
      *(_QWORD *)&v53 = v56;
      *((_QWORD *)&v53 + 1) = v50;
      outlined copy of Data?(v46, v20);
      outlined copy of Data?(v45, v27);
      outlined copy of Data?(v37, v38);
      v41 = (uint64_t)v47;
      SymmetricRatchet.init(data:step:)((uint64_t)v52, v44, (uint64_t)&v53, (uint64_t)v47);
      outlined consume of Data._Representation(a1, a2);
      outlined destroy of MPPB_LiteRatchet((uint64_t)v16);
      return outlined init with take of SymmetricRatchet(v41, v30);
    }
    else
    {
      lazy protocol witness table accessor for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors();
      swift_allocError();
      *v42 = 1;
      swift_willThrow();
      outlined consume of Data._Representation(v56, v50);
      outlined consume of Data._Representation(a1, a2);
      return outlined destroy of MPPB_LiteRatchet((uint64_t)v16);
    }
  }
}

uint64_t PaddyIncomingSymmetricRatchet.serializedData()()
{
  return PaddyOutgoingSymmetricRatchet.serializedData()(type metadata accessor for PaddyIncomingSymmetricRatchet);
}

uint64_t PaddyOutgoingSymmetricRatchet.serializedData()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v3 = (int *)type metadata accessor for MPPB_LiteRatchet();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v6 = &v5[v3[5]];
  *(_OWORD *)v6 = xmmword_20BB407A0;
  v7 = &v5[v3[6]];
  *(_OWORD *)v7 = xmmword_20BB407A0;
  v8 = &v5[v3[7]];
  *(_OWORD *)v8 = xmmword_20BB407A0;
  *(_QWORD *)v6 = SymmetricRatchet.serializedData()();
  *((_QWORD *)v6 + 1) = v9;
  v10 = a1(0);
  v11 = (uint64_t *)(v1 + *(int *)(v10 + 20));
  v13 = *v11;
  v12 = v11[1];
  *(_QWORD *)v7 = *v11;
  *((_QWORD *)v7 + 1) = v12;
  v14 = (uint64_t *)(v1 + *(int *)(v10 + 24));
  v15 = *v14;
  v16 = v14[1];
  *(_QWORD *)v8 = *v14;
  *((_QWORD *)v8 + 1) = v16;
  outlined copy of Data._Representation(v13, v12);
  outlined copy of Data._Representation(v15, v16);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type MPPB_LiteRatchet and conformance MPPB_LiteRatchet, (uint64_t (*)(uint64_t))type metadata accessor for MPPB_LiteRatchet, (uint64_t)&protocol conformance descriptor for MPPB_LiteRatchet);
  v17 = Message.serializedData(partial:)();
  outlined destroy of MPPB_LiteRatchet((uint64_t)v5);
  return v17;
}

uint64_t PaddyIncomingSymmetricRatchet.open(_:authenticatedData:index:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a4;
  v10 = type metadata accessor for SymmetricKey();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(a5, 1, (uint64_t)v13);
  if (!v5)
  {
    static PaddySymmetricLayer.open(_:authenticatedData:using:)(a1, a2, a3, v17);
    a2 = v15;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  return a2;
}

uint64_t PaddyIncomingSymmetricRatchet.ratchetSenderKeyID()()
{
  return PaddyOutgoingSymmetricRatchet.ratchetSenderKeyID()(type metadata accessor for PaddyIncomingSymmetricRatchet);
}

uint64_t PaddyOutgoingSymmetricRatchet.ratchetSenderKeyID()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + *(int *)(a1(0) + 20);
  v3 = *(_QWORD *)v2;
  outlined copy of Data._Representation(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  return v3;
}

unint64_t lazy protocol witness table accessor for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors;
  if (!lazy protocol witness table cache variable for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for LiteSymmetricRatchetErrors, &type metadata for LiteSymmetricRatchetErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors;
  if (!lazy protocol witness table cache variable for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for LiteSymmetricRatchetErrors, &type metadata for LiteSymmetricRatchetErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiteSymmetricRatchetErrors and conformance LiteSymmetricRatchetErrors);
  }
  return result;
}

uint64_t outlined destroy of MPPB_LiteRatchet(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MPPB_LiteRatchet();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for PaddyIncomingSymmetricRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for PaddyIncomingSymmetricRatchet);
}

uint64_t getEnumTagSinglePayload for PaddyOutgoingSymmetricRatchet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PaddyOutgoingSymmetricRatchet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *initializeBufferWithCopyOfBuffer for PaddyOutgoingSymmetricRatchet(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 48));
    v9 = type metadata accessor for SymmetricRatchet();
    *(uint64_t *)((char *)a1 + *(int *)(v9 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v9 + 20));
    v10 = *(int *)(v9 + 24);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = *(_OWORD *)((char *)a2 + v10 + 24);
    *(_OWORD *)((char *)a1 + v10 + 24) = v13;
    v14 = v13;
    v15 = **(void (***)(char *, char *, uint64_t))(v13 - 8);
    swift_bridgeObjectRetain();
    v15(v11, v12, v14);
    v16 = *(int *)(a3 + 20);
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = *v18;
    v20 = v18[1];
    outlined copy of Data._Representation(*v18, v20);
    *v17 = v19;
    v17[1] = v20;
    v21 = *(int *)(a3 + 24);
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = *v23;
    v25 = v23[1];
    outlined copy of Data._Representation(*v23, v25);
    *v22 = v24;
    v22[1] = v25;
  }
  return a1;
}

uint64_t destroy for PaddyOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for SymmetricRatchet();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(a1 + *(int *)(v5 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t initializeWithCopy for PaddyOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;

  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)(a1 + *(int *)(v7 + 48)) = *(_QWORD *)(a2 + *(int *)(v7 + 48));
  v8 = type metadata accessor for SymmetricRatchet();
  *(_QWORD *)(a1 + *(int *)(v8 + 20)) = *(_QWORD *)(a2 + *(int *)(v8 + 20));
  v9 = *(int *)(v8 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = *(_OWORD *)(a2 + v9 + 24);
  *(_OWORD *)(a1 + v9 + 24) = v12;
  v13 = v12;
  v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
  swift_bridgeObjectRetain();
  v14(v10, v11, v13);
  v15 = *(int *)(a3 + 20);
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  v19 = v17[1];
  outlined copy of Data._Representation(*v17, v19);
  *v16 = v18;
  v16[1] = v19;
  v20 = *(int *)(a3 + 24);
  v21 = (uint64_t *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v23 = *v22;
  v24 = v22[1];
  outlined copy of Data._Representation(*v22, v24);
  *v21 = v23;
  v21[1] = v24;
  return a1;
}

uint64_t assignWithCopy for PaddyOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)(a1 + *(int *)(v7 + 48)) = *(_QWORD *)(a2 + *(int *)(v7 + 48));
  v8 = type metadata accessor for SymmetricRatchet();
  *(_QWORD *)(a1 + *(int *)(v8 + 20)) = *(_QWORD *)(a2 + *(int *)(v8 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + *(int *)(v8 + 24)), (uint64_t *)(a2 + *(int *)(v8 + 24)));
  v9 = *(int *)(a3 + 20);
  v10 = (uint64_t *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v12 = *v11;
  v13 = v11[1];
  outlined copy of Data._Representation(*v11, v13);
  v14 = *v10;
  v15 = v10[1];
  *v10 = v12;
  v10[1] = v13;
  outlined consume of Data._Representation(v14, v15);
  v16 = *(int *)(a3 + 24);
  v17 = (uint64_t *)(a1 + v16);
  v18 = (uint64_t *)(a2 + v16);
  v19 = *v18;
  v20 = v18[1];
  outlined copy of Data._Representation(*v18, v20);
  v21 = *v17;
  v22 = v17[1];
  *v17 = v19;
  v17[1] = v20;
  outlined consume of Data._Representation(v21, v22);
  return a1;
}

uint64_t initializeWithTake for PaddyOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)(a1 + *(int *)(v7 + 48)) = *(_QWORD *)(a2 + *(int *)(v7 + 48));
  v8 = type metadata accessor for SymmetricRatchet();
  *(_QWORD *)(a1 + *(int *)(v8 + 20)) = *(_QWORD *)(a2 + *(int *)(v8 + 20));
  v9 = *(int *)(v8 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
  v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  v13 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for PaddyOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)(a1 + *(int *)(v7 + 48)) = *(_QWORD *)(a2 + *(int *)(v7 + 48));
  v8 = type metadata accessor for SymmetricRatchet();
  *(_QWORD *)(a1 + *(int *)(v8 + 20)) = *(_QWORD *)(a2 + *(int *)(v8 + 20));
  swift_bridgeObjectRelease();
  v9 = *(int *)(v8 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  __swift_destroy_boxed_opaque_existential_0(a1 + v9);
  v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v12;
  *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 32);
  v13 = *(int *)(a3 + 20);
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  outlined consume of Data._Representation(v14, v15);
  v16 = *(int *)(a3 + 24);
  v17 = *(_QWORD *)(a1 + v16);
  v18 = *(_QWORD *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  outlined consume of Data._Representation(v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaddyIncomingSymmetricRatchet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PaddyIncomingSymmetricRatchet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for PaddyOutgoingSymmetricRatchet()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SymmetricRatchet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PaddyHKDFRatchet(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t *assignWithCopy for PaddyHKDFRatchet(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of Data._Representation(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for PaddyHKDFRatchet(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaddyHKDFRatchet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PaddyHKDFRatchet(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PaddyHKDFRatchet()
{
  return &type metadata for PaddyHKDFRatchet;
}

uint64_t specialized Data.append<A>(contentsOf:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13[2];
  uint64_t v14;
  _QWORD v15[6];

  v2 = v1;
  v15[5] = *MEMORY[0x24BDAC8D0];
  type metadata accessor for NSData();
  v4 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (!swift_dynamicCast())
  {
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    outlined destroy of ContiguousBytes?((uint64_t)v13);
    v7 = NSData.startIndex.getter();
    v8 = NSData.endIndex.getter();
    v9 = NSData.startIndex.getter();
    v10 = NSData.endIndex.getter();
    if (v7 < v9 || v10 < v7)
    {
      __break(1u);
    }
    else
    {
      v11 = NSData.startIndex.getter();
      v12 = NSData.endIndex.getter();
      if (v8 >= v11 && v12 >= v8)
      {
        if (!__OFSUB__(v8, v7))
          __asm { BR              X12 }
LABEL_11:
        __break(1u);
        JUMPOUT(0x20BB254A4);
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  outlined init with take of Message(v13, (uint64_t)v15);
  v5 = __swift_project_boxed_opaque_existential_1(v15, v15[3]);
  MEMORY[0x24BDAC7A8](v5);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
}

void specialized Data.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_20BB2555C
     + *((int *)qword_20BB25700 + (__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x24BDCDDE8])[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_20BB2556C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  outlined copy of Data._Representation(v1, v0);
  Data._Representation.append(contentsOf:)();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v3);
}

uint64_t one-time initialization function for tetraDHRatchetStepKDFString()
{
  uint64_t result;
  uint64_t v1;

  result = specialized Data.init<A>(_:)(0xD00000000000001DLL, 0x800000020BB48B90);
  tetraDHRatchetStepKDFString = result;
  *(_QWORD *)algn_253E6C4D8 = v1;
  return result;
}

uint64_t one-time initialization function for tetraSymmetricKeyRatchetStepKDFStringBase()
{
  uint64_t result;
  uint64_t v1;

  result = specialized Data.init<A>(_:)(0xD00000000000001CLL, 0x800000020BB48B50);
  tetraSymmetricKeyRatchetStepKDFStringBase = result;
  unk_253E6C3F0 = v1;
  return result;
}

uint64_t one-time initialization function for tetraSymmetricKeyRatchetStepChainKeyDerivationLabel(uint64_t a1)
{
  return one-time initialization function for tetraSymmetricKeyRatchetStepChainKeyDerivationLabel(a1, 0xD000000000000012, 0x800000020BB48B70, &tetraSymmetricKeyRatchetStepChainKeyDerivationLabel, &qword_253E6C490);
}

uint64_t one-time initialization function for tetraSymmetricKeyRatchetStepMessageKeyDerivationLabel(uint64_t a1)
{
  return one-time initialization function for tetraSymmetricKeyRatchetStepChainKeyDerivationLabel(a1, 0xD000000000000014, 0x800000020BB48B30, &tetraSymmetricKeyRatchetStepMessageKeyDerivationLabel, &qword_253E6C480);
}

uint64_t one-time initialization function for tetraSymmetricKeyRatchetStepChainKeyDerivationLabel(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  if (one-time initialization token for tetraSymmetricKeyRatchetStepKDFStringBase != -1)
    swift_once();
  v9 = tetraSymmetricKeyRatchetStepKDFStringBase;
  v10 = qword_253E6C3F0;
  outlined copy of Data._Representation(tetraSymmetricKeyRatchetStepKDFStringBase, qword_253E6C3F0);
  v11 = specialized Data.init<A>(_:)(a2, a3);
  v13 = v12;
  *a4 = v9;
  *a5 = v10;
  outlined copy of Data._Representation(v9, v10);
  outlined copy of Data._Representation(v11, v13);
  specialized Data.append<A>(contentsOf:)(v11, v13);
  outlined consume of Data._Representation(v11, v13);
  outlined consume of Data._Representation(v11, v13);
  return outlined consume of Data._Representation(v9, v10);
}

uint64_t one-time initialization function for tetraSymmetricKeyRatchetStep()
{
  uint64_t v0;
  unint64_t v1;

  if (one-time initialization token for tetraSymmetricKeyRatchetStepChainKeyDerivationLabel != -1)
    swift_once();
  v0 = tetraSymmetricKeyRatchetStepChainKeyDerivationLabel;
  v1 = qword_253E6C490;
  outlined copy of Data._Representation(tetraSymmetricKeyRatchetStepChainKeyDerivationLabel, qword_253E6C490);
  if (one-time initialization token for tetraSymmetricKeyRatchetStepMessageKeyDerivationLabel != -1)
    swift_once();
  tetraSymmetricKeyRatchetStep = v0;
  *(_QWORD *)algn_253E6C4E8 = v1;
  qword_253E6C4F0 = tetraSymmetricKeyRatchetStepMessageKeyDerivationLabel;
  unk_253E6C4F8 = qword_253E6C480;
  qword_253E6C500 = 32;
  byte_253E6C508 = 0;
  return outlined copy of Data._Representation(tetraSymmetricKeyRatchetStepMessageKeyDerivationLabel, qword_253E6C480);
}

uint64_t closure #1 in Data.append<A>(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

_BYTE *partial apply for specialized closure #3 in Data.append<A>(contentsOf:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *result;
  uint64_t v7;
  uint64_t v8;

  result = specialized closure #3 in Data.append<A>(contentsOf:)(a1, a2, *(_QWORD *)(v3 + 16), **(void ***)(v3 + 32));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
  }
  return result;
}

uint64_t partial apply for closure #1 in Data.append<A>(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

_BYTE *specialized closure #3 in Data.append<A>(contentsOf:)(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v6;
  uint64_t v7;
  id v8;
  id v9;
  void *v10;

  if (!result)
  {
    *(_QWORD *)(swift_allocObject() + 16) = a4;
    v9 = a4;
    NSData.startIndex.getter();
    goto LABEL_5;
  }
  v6 = result;
  v7 = a2 - (_QWORD)result - a3;
  if (!__OFSUB__(a2 - (_QWORD)result, a3))
  {
    *(_QWORD *)(swift_allocObject() + 16) = a4;
    v8 = a4;
    specialized Sequence._copySequenceContents(initializing:)(&v10, &v6[a3], v7);
    v9 = v10;
LABEL_5:
    swift_release();

    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_20BB25B60()
{
  uint64_t v0;

  return swift_deallocObject();
}

id TetraVersions.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraVersions();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TetraVersions()
{
  return objc_opt_self();
}

id Kyber1024ObjCPrivateKey.init(protoBufData:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  _BYTE *v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  char v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSData v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _OWORD v32[2];
  uint64_t v33;
  uint64_t v34;

  v4 = v2;
  v34 = *MEMORY[0x24BDAC8D0];
  v7 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v7);
  v8 = (int *)type metadata accessor for TetraPB_KyberPrivateKey(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v32 - v12;
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey();
  Message.init(serializedData:extensions:partial:options:)();
  if (v3)
  {
    outlined consume of Data._Representation(a1, a2);
LABEL_10:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return v4;
  }
  v14 = (uint64_t *)&v13[v8[5]];
  if ((unint64_t)v14[1] >> 60 == 15)
  {
    lazy protocol witness table accessor for type TetraKeyStorageError and conformance TetraKeyStorageError();
    swift_allocError();
    *v15 = 0;
LABEL_9:
    swift_willThrow();
    outlined consume of Data._Representation(a1, a2);
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v13, type metadata accessor for TetraPB_KyberPrivateKey);
    goto LABEL_10;
  }
  v16 = &v13[v8[6]];
  if ((v16[9] & 1) != 0)
  {
LABEL_8:
    lazy protocol witness table accessor for type TetraKeyStorageError and conformance TetraKeyStorageError();
    swift_allocError();
    *v18 = 1;
    goto LABEL_9;
  }
  v17 = *(_QWORD *)v16;
  if ((v16[8] & 1) != 0)
  {
    if (!v17)
      goto LABEL_8;
  }
  else if (v17 != 1)
  {
    goto LABEL_8;
  }
  v20 = v13[v8[7] + 9];
  outlined init with copy of TetraPB_KyberPrivateKey((uint64_t)v13, (uint64_t)v11);
  if ((v20 & 1) != 0)
    goto LABEL_15;
  v21 = &v11[v8[7]];
  if ((v21[9] & 1) != 0)
    goto LABEL_15;
  v28 = *(_QWORD *)v21;
  if ((v21[8] & 1) == 0)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v11, type metadata accessor for TetraPB_KyberPrivateKey);
    if (v28 != 1)
      goto LABEL_16;
LABEL_32:
    v29 = v14[1];
    if (v29 >> 60 == 15)
      v30 = 0;
    else
      v30 = *v14;
    if (v29 >> 60 == 15)
      v31 = 0xC000000000000000;
    else
      v31 = v14[1];
    outlined copy of Data?(*v14, v29);
    v25.super.isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v30, v31);
    *(_QWORD *)&v32[0] = 0;
    v26 = objc_msgSend(v2, sel_initWithSepKeyBytes_error_, v25.super.isa, v32);
    goto LABEL_23;
  }
  if (v28)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v11, type metadata accessor for TetraPB_KyberPrivateKey);
    goto LABEL_32;
  }
LABEL_15:
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v11, type metadata accessor for TetraPB_KyberPrivateKey);
LABEL_16:
  v22 = v14[1];
  if (v22 >> 60 == 15)
    v23 = 0;
  else
    v23 = *v14;
  if (v22 >> 60 == 15)
    v24 = 0xC000000000000000;
  else
    v24 = v14[1];
  outlined copy of Data?(*v14, v22);
  v25.super.isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v23, v24);
  *(_QWORD *)&v32[0] = 0;
  v26 = objc_msgSend(v2, sel_initWithApKeyBytes_error_, v25.super.isa, v32);
LABEL_23:
  v4 = v26;

  if (v4)
  {
    v27 = *(id *)&v32[0];
  }
  else
  {
    v4 = *(id *)&v32[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  outlined consume of Data._Representation(a1, a2);
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v13, type metadata accessor for TetraPB_KyberPrivateKey);
  return v4;
}

uint64_t Kyber1024ObjCPrivateKey.protobufData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  char *v36;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  MEMORY[0x24BDAC7A8](v1);
  v33 = (uint64_t)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v36 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v32 - v6;
  v8 = type metadata accessor for Kyber1024.PrivateKey();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for TetraPB_KyberPrivateKey(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UnknownStorage.init()();
  v15 = &v14[v12[5]];
  *(_OWORD *)v15 = xmmword_20BB407A0;
  v16 = &v14[v12[6]];
  *(_QWORD *)v16 = 0;
  *((_WORD *)v16 + 4) = 256;
  v17 = &v14[v12[7]];
  *(_QWORD *)v17 = 0;
  *((_WORD *)v17 + 4) = 256;
  v18 = v0 + OBJC_IVAR____TtC17MessageProtection23Kyber1024ObjCPrivateKey_privKey;
  outlined init with copy of TetraSessionStates?(v18, (uint64_t)v7, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  v19 = v35(v7, 1, v8);
  v34 = v18;
  if (v19 == 1)
  {
    outlined destroy of Kyber1024.PrivateKey?((uint64_t)v7);
    v20 = type metadata accessor for TetraKEM1024Key(0);
    v21 = v33;
    outlined init with copy of TetraSessionStates?(v18 + *(int *)(v20 + 20), v33, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    v22 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v21, 1, v22) == 1)
    {
      __break(1u);
      result = swift_unexpectedError();
      __break(1u);
      return result;
    }
    v23 = (uint64_t *)(v21 + *(int *)(v22 + 20));
    v24 = *v23;
    v25 = v23[1];
    outlined copy of Data._Representation(*v23, v25);
    outlined destroy of TetraRatchetOuterMessage(v21, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    v24 = Kyber1024.PrivateKey.dataRepresentation.getter();
    v25 = v26;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35;
  v27 = (uint64_t)v36;
  outlined consume of Data?(*(_QWORD *)v15, *((_QWORD *)v15 + 1));
  *(_QWORD *)v15 = v24;
  *((_QWORD *)v15 + 1) = v25;
  *(_QWORD *)v16 = 1;
  *((_WORD *)v16 + 4) = 1;
  outlined init with copy of TetraSessionStates?(v34, v27, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  v29 = v28(v27, 1, v8);
  outlined destroy of Kyber1024.PrivateKey?(v27);
  *(_QWORD *)v17 = v29 == 1;
  *((_WORD *)v17 + 4) = 1;
  lazy protocol witness table accessor for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey();
  v30 = Message.serializedData(partial:)();
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v14, type metadata accessor for TetraPB_KyberPrivateKey);
  return v30;
}

uint64_t outlined destroy of Kyber1024.PrivateKey?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey;
  if (!lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey)
  {
    v1 = type metadata accessor for TetraPB_KyberPrivateKey(255);
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraPB_KyberPrivateKey, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_KyberPrivateKey and conformance TetraPB_KyberPrivateKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraKeyStorageError and conformance TetraKeyStorageError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraKeyStorageError and conformance TetraKeyStorageError;
  if (!lazy protocol witness table cache variable for type TetraKeyStorageError and conformance TetraKeyStorageError)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraKeyStorageError, &type metadata for TetraKeyStorageError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKeyStorageError and conformance TetraKeyStorageError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraKeyStorageError and conformance TetraKeyStorageError;
  if (!lazy protocol witness table cache variable for type TetraKeyStorageError and conformance TetraKeyStorageError)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraKeyStorageError, &type metadata for TetraKeyStorageError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKeyStorageError and conformance TetraKeyStorageError);
  }
  return result;
}

uint64_t outlined init with copy of TetraPB_KyberPrivateKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraPB_KyberPrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *initializeBufferWithCopyOfBuffer for TetraSessionStates(_DWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  id v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  void (*v50)(char *, _QWORD, uint64_t, uint64_t);
  id v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  void (*v74)(char *, _QWORD, uint64_t, uint64_t);
  id v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  __int128 v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t *v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  int *v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  int *v130;
  _QWORD *v132;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    v6 = type metadata accessor for TetraSessionState();
    v7 = *(int *)(v6 + 20);
    v8 = (char *)v4 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for SymmetricKey();
    v11 = *(_QWORD *)(v10 - 8);
    v132 = a2;
    v130 = (int *)v6;
    v125 = v11;
    v126 = v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = type metadata accessor for TetraRatchetState(0);
    *(_QWORD *)&v8[*(int *)(v14 + 20)] = *(_QWORD *)&v9[*(int *)(v14 + 20)];
    v127 = v14;
    v128 = v9;
    v15 = *(int *)(v14 + 24);
    v129 = v8;
    v16 = &v8[v15];
    v17 = &v9[v15];
    v18 = *(void **)&v9[v15];
    *(_QWORD *)&v8[v15] = v18;
    v19 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
    v20 = &v16[v19];
    v21 = &v17[v19];
    v22 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    v23 = *(_QWORD *)(v22 - 8);
    v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
    swift_bridgeObjectRetain();
    v25 = v18;
    if (v24(v21, 1, v22))
    {
      v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v27 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
    v28 = v27[5];
    v29 = &v16[v28];
    v30 = &v17[v28];
    v31 = type metadata accessor for TetraKEM768Key(0);
    v32 = *(_QWORD *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v123 = v32;
      v34 = type metadata accessor for Kyber768.PrivateKey();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v30, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v29, v30, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v29, 0, 1, v34);
      }
      v37 = *(int *)(v31 + 20);
      v38 = &v29[v37];
      v39 = &v30[v37];
      v40 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        v43 = type metadata accessor for Kyber768.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v38, v39, v43);
        v44 = *(int *)(v40 + 20);
        v117 = (uint64_t *)&v38[v44];
        v119 = v38;
        v45 = (uint64_t *)&v39[v44];
        v121 = v27;
        v46 = *v45;
        v47 = v45[1];
        outlined copy of Data._Representation(*v45, v47);
        *v117 = v46;
        v117[1] = v47;
        v27 = v121;
        v48 = *(int *)(v40 + 24);
        v49 = *(void **)&v39[v48];
        *(_QWORD *)&v119[v48] = v49;
        v50 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56);
        v51 = v49;
        v50(v119, 0, 1, v40);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(v29, 0, 1, v31);
    }
    v52 = v27[6];
    v53 = &v16[v52];
    v54 = &v17[v52];
    v55 = type metadata accessor for TetraKEM1024Key(0);
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
    {
      v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    }
    else
    {
      v124 = v56;
      v58 = type metadata accessor for Kyber1024.PrivateKey();
      v59 = *(_QWORD *)(v58 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v54, 1, v58))
      {
        v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
        memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v53, v54, v58);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v53, 0, 1, v58);
      }
      v61 = *(int *)(v55 + 20);
      v62 = &v53[v61];
      v63 = &v54[v61];
      v64 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
      v65 = *(_QWORD *)(v64 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
      {
        v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
      }
      else
      {
        v67 = type metadata accessor for Kyber1024.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(v62, v63, v67);
        v68 = *(int *)(v64 + 20);
        v118 = (uint64_t *)&v62[v68];
        v120 = v62;
        v69 = (uint64_t *)&v63[v68];
        v122 = v27;
        v70 = *v69;
        v71 = v69[1];
        outlined copy of Data._Representation(*v69, v71);
        *v118 = v70;
        v118[1] = v71;
        v27 = v122;
        v72 = *(int *)(v64 + 24);
        v73 = *(void **)&v63[v72];
        *(_QWORD *)&v120[v72] = v73;
        v74 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56);
        v75 = v73;
        v74(v120, 0, 1, v64);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v124 + 56))(v53, 0, 1, v55);
    }
    v76 = v27[7];
    v77 = &v16[v76];
    v78 = &v17[v76];
    v79 = *((_QWORD *)v78 + 1);
    if (v79 >> 60 == 15)
    {
      *(_OWORD *)v77 = *(_OWORD *)v78;
    }
    else
    {
      v80 = *(_QWORD *)v78;
      outlined copy of Data._Representation(*(_QWORD *)v78, *((_QWORD *)v78 + 1));
      *(_QWORD *)v77 = v80;
      *((_QWORD *)v77 + 1) = v79;
    }
    v81 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
    v82 = &v16[v81];
    v83 = &v17[v81];
    v84 = type metadata accessor for SymmetricRatchet();
    v85 = *(_QWORD *)(v84 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
    {
      v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
      memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v82, v83, v126);
      v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(_QWORD *)&v82[*(int *)(v87 + 48)] = *(_QWORD *)&v83[*(int *)(v87 + 48)];
      *(_QWORD *)&v82[*(int *)(v84 + 20)] = *(_QWORD *)&v83[*(int *)(v84 + 20)];
      v88 = *(int *)(v84 + 24);
      v89 = &v82[v88];
      v90 = &v83[v88];
      v91 = *(_OWORD *)(v90 + 24);
      *(_OWORD *)&v82[v88 + 24] = v91;
      v92 = v91;
      v93 = **(void (***)(char *, char *, uint64_t))(v91 - 8);
      swift_bridgeObjectRetain();
      v93(v89, v90, v92);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v82, 0, 1, v84);
    }
    *(_DWORD *)&v129[*(int *)(v127 + 28)] = *(_DWORD *)&v128[*(int *)(v127 + 28)];
    v94 = *(int *)(v127 + 32);
    v95 = &v129[v94];
    v96 = &v128[v94];
    v97 = type metadata accessor for Date();
    v98 = *(_QWORD *)(v97 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
    {
      v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(v95, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v95, v96, v97);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v97);
    }
    v100 = v130[6];
    v101 = (char *)v4 + v100;
    v102 = (char *)v132 + v100;
    v103 = type metadata accessor for P256.Signing.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v101, v102, v103);
    v104 = v130[7];
    v105 = (char *)v4 + v104;
    v106 = (char *)v132 + v104;
    v107 = type metadata accessor for P256.KeyAgreement.PublicKey();
    v108 = *(_QWORD *)(v107 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
    {
      v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 16))(v105, v106, v107);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
    }
    v110 = v130[8];
    v111 = (_QWORD *)((char *)v4 + v110);
    v112 = (_QWORD *)((char *)v132 + v110);
    v113 = *v112;
    v114 = v112[1];
    outlined copy of Data._Representation(*v112, v114);
    *v111 = v113;
    v111[1] = v114;
    *((_BYTE *)v4 + v130[9]) = *((_BYTE *)v132 + v130[9]);
    v115 = *(int *)(a3 + 24);
    *((_BYTE *)v4 + *(int *)(a3 + 20)) = *((_BYTE *)v132 + *(int *)(a3 + 20));
    *(_QWORD *)((char *)v4 + v115) = *(_QWORD *)((char *)v132 + v115);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for TetraSessionStates(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  v2 = (int *)type metadata accessor for TetraSessionState();
  v3 = a1 + v2[5];
  v4 = type metadata accessor for SymmetricKey();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v39 = v5;
  v40 = v4;
  v6 = type metadata accessor for TetraRatchetState(0);
  swift_bridgeObjectRelease();
  v7 = (id *)(v3 + *(int *)(v6 + 24));

  v8 = (char *)v7 + *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v9 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  v11 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v12 = (char *)v7 + v11[5];
  v13 = type metadata accessor for TetraKEM768Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v14 = type metadata accessor for Kyber768.PrivateKey();
    v15 = *(_QWORD *)(v14 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
      (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    v16 = &v12[*(int *)(v13 + 20)];
    v17 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
    {
      v18 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v16, v18);
      outlined consume of Data._Representation(*(_QWORD *)&v16[*(int *)(v17 + 20)], *(_QWORD *)&v16[*(int *)(v17 + 20) + 8]);

    }
  }
  v19 = (char *)v7 + v11[6];
  v20 = type metadata accessor for TetraKEM1024Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
  {
    v21 = type metadata accessor for Kyber1024.PrivateKey();
    v22 = *(_QWORD *)(v21 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v19, 1, v21))
      (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    v23 = &v19[*(int *)(v20 + 20)];
    v24 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24))
    {
      v25 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v23, v25);
      outlined consume of Data._Representation(*(_QWORD *)&v23[*(int *)(v24 + 20)], *(_QWORD *)&v23[*(int *)(v24 + 20) + 8]);

    }
  }
  v26 = (uint64_t *)((char *)v7 + v11[7]);
  v27 = v26[1];
  if (v27 >> 60 != 15)
    outlined consume of Data._Representation(*v26, v27);
  v28 = (char *)v7 + *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v29 = type metadata accessor for SymmetricRatchet();
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29))
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v40);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)&v28[*(int *)(v29 + 24)]);
  }
  v30 = v3 + *(int *)(v6 + 32);
  v31 = type metadata accessor for Date();
  v32 = *(_QWORD *)(v31 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
  v33 = a1 + v2[6];
  v34 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
  v35 = a1 + v2[7];
  v36 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v37 = *(_QWORD *)(v36 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
  outlined consume of Data._Representation(*(_QWORD *)(a1 + v2[8]), *(_QWORD *)(a1 + v2[8] + 8));
  return swift_bridgeObjectRelease();
}

_DWORD *initializeWithCopy for TetraSessionStates(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  void (*v48)(char *, _QWORD, uint64_t, uint64_t);
  id v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  void (*v72)(char *, _QWORD, uint64_t, uint64_t);
  id v73;
  uint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  __int128 v89;
  uint64_t v90;
  void (*v91)(char *, char *, uint64_t);
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v115;
  uint64_t *v116;
  char *v117;
  char *v118;
  int *v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  int *v126;
  _DWORD *v128;
  _DWORD *v129;

  *a1 = *a2;
  v5 = type metadata accessor for TetraSessionState();
  v6 = *(int *)(v5 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SymmetricKey();
  v10 = *(_QWORD *)(v9 - 8);
  v128 = a2;
  v129 = a1;
  v126 = (int *)v5;
  v121 = v10;
  v122 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = type metadata accessor for TetraRatchetState(0);
  *(_QWORD *)&v7[*(int *)(v12 + 20)] = *(_QWORD *)&v8[*(int *)(v12 + 20)];
  v123 = v12;
  v124 = v8;
  v13 = *(int *)(v12 + 24);
  v125 = v7;
  v14 = &v7[v13];
  v15 = &v8[v13];
  v16 = *(void **)&v8[v13];
  *(_QWORD *)&v7[v13] = v16;
  v17 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v18 = &v14[v17];
  v19 = &v15[v17];
  v20 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  swift_bridgeObjectRetain();
  v23 = v16;
  if (v22(v19, 1, v20))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v25 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v26 = v25[5];
  v27 = &v14[v26];
  v28 = &v15[v26];
  v29 = type metadata accessor for TetraKEM768Key(0);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v32 = type metadata accessor for Kyber768.PrivateKey();
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v28, 1, v32))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v27, v28, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v27, 0, 1, v32);
    }
    v35 = *(int *)(v29 + 20);
    v36 = &v27[v35];
    v37 = &v28[v35];
    v38 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    v39 = *(_QWORD *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      v41 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v36, v37, v41);
      v42 = *(int *)(v38 + 20);
      v115 = (uint64_t *)&v36[v42];
      v117 = v36;
      v43 = (uint64_t *)&v37[v42];
      v119 = v25;
      v44 = *v43;
      v45 = v43[1];
      outlined copy of Data._Representation(*v43, v45);
      *v115 = v44;
      v115[1] = v45;
      v25 = v119;
      v46 = *(int *)(v38 + 24);
      v47 = *(void **)&v37[v46];
      *(_QWORD *)&v117[v46] = v47;
      v48 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56);
      v49 = v47;
      v48(v117, 0, 1, v38);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v50 = v25[6];
  v51 = &v14[v50];
  v52 = &v15[v50];
  v53 = type metadata accessor for TetraKEM1024Key(0);
  v54 = *(_QWORD *)(v53 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
  {
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
  }
  else
  {
    v56 = type metadata accessor for Kyber1024.PrivateKey();
    v57 = *(_QWORD *)(v56 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v52, 1, v56))
    {
      v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v51, v52, v56);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v51, 0, 1, v56);
    }
    v59 = *(int *)(v53 + 20);
    v60 = &v51[v59];
    v61 = &v52[v59];
    v62 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    v63 = *(_QWORD *)(v62 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
    {
      v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      v65 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16))(v60, v61, v65);
      v66 = *(int *)(v62 + 20);
      v116 = (uint64_t *)&v60[v66];
      v118 = v60;
      v67 = (uint64_t *)&v61[v66];
      v120 = v25;
      v68 = *v67;
      v69 = v67[1];
      outlined copy of Data._Representation(*v67, v69);
      *v116 = v68;
      v116[1] = v69;
      v25 = v120;
      v70 = *(int *)(v62 + 24);
      v71 = *(void **)&v61[v70];
      *(_QWORD *)&v118[v70] = v71;
      v72 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56);
      v73 = v71;
      v72(v118, 0, 1, v62);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  v74 = v25[7];
  v75 = &v14[v74];
  v76 = &v15[v74];
  v77 = *((_QWORD *)v76 + 1);
  if (v77 >> 60 == 15)
  {
    *(_OWORD *)v75 = *(_OWORD *)v76;
  }
  else
  {
    v78 = *(_QWORD *)v76;
    outlined copy of Data._Representation(*(_QWORD *)v76, *((_QWORD *)v76 + 1));
    *(_QWORD *)v75 = v78;
    *((_QWORD *)v75 + 1) = v77;
  }
  v79 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v80 = &v14[v79];
  v81 = &v15[v79];
  v82 = type metadata accessor for SymmetricRatchet();
  v83 = *(_QWORD *)(v82 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
  {
    v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v80, v81, v122);
    v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(_QWORD *)&v80[*(int *)(v85 + 48)] = *(_QWORD *)&v81[*(int *)(v85 + 48)];
    *(_QWORD *)&v80[*(int *)(v82 + 20)] = *(_QWORD *)&v81[*(int *)(v82 + 20)];
    v86 = *(int *)(v82 + 24);
    v87 = &v80[v86];
    v88 = &v81[v86];
    v89 = *(_OWORD *)(v88 + 24);
    *(_OWORD *)&v80[v86 + 24] = v89;
    v90 = v89;
    v91 = **(void (***)(char *, char *, uint64_t))(v89 - 8);
    swift_bridgeObjectRetain();
    v91(v87, v88, v90);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
  }
  *(_DWORD *)&v125[*(int *)(v123 + 28)] = *(_DWORD *)&v124[*(int *)(v123 + 28)];
  v92 = *(int *)(v123 + 32);
  v93 = &v125[v92];
  v94 = &v124[v92];
  v95 = type metadata accessor for Date();
  v96 = *(_QWORD *)(v95 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
  {
    v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v93, v94, v95);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
  }
  v98 = v126[6];
  v99 = (char *)v129 + v98;
  v100 = (char *)v128 + v98;
  v101 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v99, v100, v101);
  v102 = v126[7];
  v103 = (char *)v129 + v102;
  v104 = (char *)v128 + v102;
  v105 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v106 = *(_QWORD *)(v105 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105))
  {
    v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v106 + 16))(v103, v104, v105);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
  }
  v108 = v126[8];
  v109 = (uint64_t *)((char *)v129 + v108);
  v110 = (uint64_t *)((char *)v128 + v108);
  v111 = *v110;
  v112 = v110[1];
  outlined copy of Data._Representation(*v110, v112);
  *v109 = v111;
  v109[1] = v112;
  *((_BYTE *)v129 + v126[9]) = *((_BYTE *)v128 + v126[9]);
  v113 = *(int *)(a3 + 24);
  *((_BYTE *)v129 + *(int *)(a3 + 20)) = *((_BYTE *)v128 + *(int *)(a3 + 20));
  *(_QWORD *)((char *)v129 + v113) = *(_QWORD *)((char *)v128 + v113);
  swift_bridgeObjectRetain();
  return v129;
}

_DWORD *assignWithCopy for TetraSessionStates(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(char *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void (*v66)(char *, _QWORD, uint64_t, uint64_t);
  id v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(char *, uint64_t, uint64_t);
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  void (*v85)(char *, _QWORD, uint64_t, uint64_t);
  id v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t);
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  size_t v100;
  void *v101;
  _DWORD *v102;
  _DWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(char *, uint64_t, uint64_t);
  int v107;
  int v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  void *v122;
  void (*v123)(char *, _QWORD, uint64_t, uint64_t);
  id v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(char *, uint64_t, uint64_t);
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  void (*v146)(char *, char *, uint64_t);
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t (*v153)(char *, uint64_t, uint64_t);
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t (*v166)(char *, uint64_t, uint64_t);
  int v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t (*v184)(uint64_t, uint64_t, uint64_t);
  int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  void *v194;
  void (*v195)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  void *v206;
  void *v207;
  id v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  void *v218;
  void *v219;
  id v220;
  uint64_t v221;
  uint64_t v222;
  _DWORD *v223;
  _DWORD *v224;
  uint64_t v225;
  char *v226;
  int *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  char *v231;
  _QWORD *v232;

  *a1 = *a2;
  v6 = type metadata accessor for TetraSessionState();
  v7 = *(int *)(v6 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SymmetricKey();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  v228 = a3;
  v221 = v11;
  v222 = v10;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = type metadata accessor for TetraRatchetState(0);
  *(_QWORD *)&v8[*(int *)(v16 + 20)] = *(_QWORD *)&v9[*(int *)(v16 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v225 = v16;
  v226 = v8;
  v17 = *(int *)(v16 + 24);
  v18 = &v8[v17];
  v19 = &v9[v17];
  v20 = *(void **)&v8[v17];
  v21 = *(void **)&v9[v17];
  *(_QWORD *)v18 = v21;
  v22 = v21;

  v23 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v231 = v19;
  v232 = v18;
  v24 = &v18[v23];
  v25 = &v19[v23];
  v26 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  v223 = a2;
  v224 = a1;
  v229 = v9;
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
LABEL_12:
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
LABEL_13:
  v32 = v231;
  v33 = type metadata accessor for TetraOutgoingKeyContent(0);
  v34 = *(int *)(v33 + 20);
  v35 = (char *)v232 + v34;
  v36 = &v231[v34];
  v37 = type metadata accessor for TetraKEM768Key(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  v227 = (int *)v6;
  v230 = v33;
  if (!v40)
  {
    if (v41)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v35, type metadata accessor for TetraKEM768Key);
      goto LABEL_19;
    }
    v47 = type metadata accessor for Kyber768.PrivateKey();
    v48 = *(_QWORD *)(v47 - 8);
    v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
    v50 = v49(v35, 1, v47);
    v51 = v49(v36, 1, v47);
    if (v50)
    {
      if (!v51)
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v35, v36, v47);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v35, 0, 1, v47);
        goto LABEL_33;
      }
    }
    else
    {
      if (!v51)
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 24))(v35, v36, v47);
LABEL_33:
        v44 = v232;
        v69 = *(int *)(v37 + 20);
        v70 = &v35[v69];
        v71 = &v36[v69];
        v72 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        v73 = *(_QWORD *)(v72 - 8);
        v74 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 48);
        v75 = v74(v70, 1, v72);
        v76 = v74(v71, 1, v72);
        if (v75)
        {
          if (!v76)
          {
            v77 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 16))(v70, v71, v77);
            v78 = *(int *)(v72 + 20);
            v79 = (uint64_t *)&v70[v78];
            v80 = (uint64_t *)&v71[v78];
            v81 = *v80;
            v82 = v80[1];
            outlined copy of Data._Representation(*v80, v82);
            *v79 = v81;
            v79[1] = v82;
            v83 = *(int *)(v72 + 24);
            v84 = *(void **)&v71[v83];
            *(_QWORD *)&v70[v83] = v84;
            v85 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56);
            v86 = v84;
            v85(v70, 0, 1, v72);
            goto LABEL_39;
          }
        }
        else
        {
          if (!v76)
          {
            v197 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v197 - 8) + 24))(v70, v71, v197);
            v198 = *(int *)(v72 + 20);
            v199 = (uint64_t *)&v70[v198];
            v200 = (uint64_t *)&v71[v198];
            v201 = *v200;
            v202 = v200[1];
            outlined copy of Data._Representation(*v200, v202);
            v203 = *v199;
            v204 = v199[1];
            *v199 = v201;
            v199[1] = v202;
            outlined consume of Data._Representation(v203, v204);
            v205 = *(int *)(v72 + 24);
            v206 = *(void **)&v71[v205];
            v207 = *(void **)&v70[v205];
            *(_QWORD *)&v70[v205] = v206;
            v208 = v206;

            goto LABEL_39;
          }
          outlined destroy of TetraRatchetOuterMessage((uint64_t)v70, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
        goto LABEL_39;
      }
      (*(void (**)(char *, uint64_t))(v48 + 8))(v35, v47);
    }
    v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    goto LABEL_33;
  }
  if (v41)
  {
LABEL_19:
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    v44 = v232;
    goto LABEL_39;
  }
  v42 = type metadata accessor for Kyber768.PrivateKey();
  v43 = *(_QWORD *)(v42 - 8);
  v44 = v232;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v36, 1, v42))
  {
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v35, v36, v42);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v35, 0, 1, v42);
  }
  v52 = *(int *)(v37 + 20);
  v53 = &v35[v52];
  v54 = &v36[v52];
  v55 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v56 = *(_QWORD *)(v55 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
  {
    v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    v58 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v53, v54, v58);
    v59 = *(int *)(v55 + 20);
    v60 = (uint64_t *)&v53[v59];
    v61 = (uint64_t *)&v54[v59];
    v63 = *v61;
    v62 = v61[1];
    outlined copy of Data._Representation(*v61, v62);
    *v60 = v63;
    v60[1] = v62;
    v32 = v231;
    v44 = v232;
    v33 = v230;
    v64 = *(int *)(v55 + 24);
    v65 = *(void **)&v54[v64];
    *(_QWORD *)&v53[v64] = v65;
    v66 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56);
    v67 = v65;
    v66(v53, 0, 1, v55);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_39:
  v88 = *(int *)(v33 + 24);
  v89 = (char *)v44 + v88;
  v90 = &v32[v88];
  v91 = type metadata accessor for TetraKEM1024Key(0);
  v92 = *(_QWORD *)(v91 - 8);
  v93 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v92 + 48);
  v94 = v93(v89, 1, v91);
  v95 = v93(v90, 1, v91);
  if (!v94)
  {
    if (v95)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v89, type metadata accessor for TetraKEM1024Key);
      goto LABEL_45;
    }
    v104 = type metadata accessor for Kyber1024.PrivateKey();
    v105 = *(_QWORD *)(v104 - 8);
    v106 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 48);
    v107 = v106(v89, 1, v104);
    v108 = v106(v90, 1, v104);
    if (v107)
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v89, v90, v104);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v89, 0, 1, v104);
LABEL_88:
        v180 = *(int *)(v91 + 20);
        v181 = (uint64_t)&v89[v180];
        v90 += v180;
        v182 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        v183 = *(_QWORD *)(v182 - 8);
        v184 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v183 + 48);
        v185 = v184(v181, 1, v182);
        v186 = v184((uint64_t)v90, 1, v182);
        if (v185)
        {
          if (!v186)
          {
            v187 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v187 - 8) + 16))(v181, v90, v187);
            v188 = *(int *)(v182 + 20);
            v189 = (uint64_t *)(v181 + v188);
            v190 = (uint64_t *)&v90[v188];
            v191 = *v190;
            v192 = v190[1];
            outlined copy of Data._Representation(*v190, v192);
            *v189 = v191;
            v189[1] = v192;
            v193 = *(int *)(v182 + 24);
            v194 = *(void **)&v90[v193];
            *(_QWORD *)(v181 + v193) = v194;
            v195 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v183 + 56);
            v196 = v194;
            v195(v181, 0, 1, v182);
            goto LABEL_47;
          }
        }
        else
        {
          if (!v186)
          {
            v209 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v209 - 8) + 24))(v181, v90, v209);
            v210 = *(int *)(v182 + 20);
            v211 = (uint64_t *)(v181 + v210);
            v212 = (uint64_t *)&v90[v210];
            v213 = *v212;
            v214 = v212[1];
            outlined copy of Data._Representation(*v212, v214);
            v215 = *v211;
            v216 = v211[1];
            *v211 = v213;
            v211[1] = v214;
            outlined consume of Data._Representation(v215, v216);
            v217 = *(int *)(v182 + 24);
            v218 = *(void **)&v90[v217];
            v219 = *(void **)(v181 + v217);
            *(_QWORD *)(v181 + v217) = v218;
            v220 = v218;

            goto LABEL_47;
          }
          outlined destroy of TetraRatchetOuterMessage(v181, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        v100 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?)
                                     - 8)
                         + 64);
        v101 = (void *)v181;
LABEL_46:
        memcpy(v101, v90, v100);
LABEL_47:
        v103 = v223;
        v102 = v224;
        v98 = v230;
        goto LABEL_56;
      }
    }
    else
    {
      if (!v108)
      {
        (*(void (**)(char *, char *, uint64_t))(v105 + 24))(v89, v90, v104);
        goto LABEL_88;
      }
      (*(void (**)(char *, uint64_t))(v105 + 8))(v89, v104);
    }
    v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64));
    goto LABEL_88;
  }
  if (v95)
  {
LABEL_45:
    v100 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?)
                                 - 8)
                     + 64);
    v101 = v89;
    goto LABEL_46;
  }
  v96 = type metadata accessor for Kyber1024.PrivateKey();
  v97 = *(_QWORD *)(v96 - 8);
  v98 = v230;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v90, 1, v96))
  {
    v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v89, v90, v96);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v89, 0, 1, v96);
  }
  v109 = *(int *)(v91 + 20);
  v110 = &v89[v109];
  v111 = &v90[v109];
  v112 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v113 = *(_QWORD *)(v112 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
  {
    v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
  }
  else
  {
    v115 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 16))(v110, v111, v115);
    v116 = *(int *)(v112 + 20);
    v117 = (uint64_t *)&v110[v116];
    v118 = (uint64_t *)&v111[v116];
    v119 = *v118;
    v120 = v118[1];
    outlined copy of Data._Representation(*v118, v120);
    *v117 = v119;
    v117[1] = v120;
    v98 = v230;
    v32 = v231;
    v44 = v232;
    v121 = *(int *)(v112 + 24);
    v122 = *(void **)&v111[v121];
    *(_QWORD *)&v110[v121] = v122;
    v123 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v113 + 56);
    v124 = v122;
    v123(v110, 0, 1, v112);
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
  v103 = v223;
  v102 = v224;
LABEL_56:
  v125 = *(int *)(v98 + 28);
  v126 = (_QWORD *)((char *)v44 + v125);
  v127 = (uint64_t *)&v32[v125];
  v128 = *(_QWORD *)&v32[v125 + 8];
  if (*(_QWORD *)((char *)v44 + v125 + 8) >> 60 == 15)
  {
    if (v128 >> 60 != 15)
    {
      v129 = *v127;
      outlined copy of Data._Representation(*v127, v128);
      *v126 = v129;
      v126[1] = v128;
      goto LABEL_63;
    }
    goto LABEL_61;
  }
  if (v128 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v126);
LABEL_61:
    *(_OWORD *)v126 = *(_OWORD *)v127;
    goto LABEL_63;
  }
  v130 = *v127;
  outlined copy of Data._Representation(*v127, v128);
  v131 = *v126;
  v132 = v126[1];
  *v126 = v130;
  v126[1] = v128;
  outlined consume of Data._Representation(v131, v132);
LABEL_63:
  v133 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v134 = (char *)v44 + v133;
  v135 = &v32[v133];
  v136 = type metadata accessor for SymmetricRatchet();
  v137 = *(_QWORD *)(v136 - 8);
  v138 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v137 + 48);
  v139 = v138(v134, 1, v136);
  v140 = v138(v135, 1, v136);
  if (v139)
  {
    if (!v140)
    {
      (*(void (**)(char *, char *, uint64_t))(v221 + 16))(v134, v135, v222);
      v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(_QWORD *)&v134[*(int *)(v141 + 48)] = *(_QWORD *)&v135[*(int *)(v141 + 48)];
      *(_QWORD *)&v134[*(int *)(v136 + 20)] = *(_QWORD *)&v135[*(int *)(v136 + 20)];
      v142 = *(int *)(v136 + 24);
      v143 = &v134[v142];
      v144 = &v135[v142];
      v145 = *((_QWORD *)v144 + 3);
      *((_QWORD *)v143 + 3) = v145;
      *((_QWORD *)v143 + 4) = *((_QWORD *)v144 + 4);
      v146 = **(void (***)(char *, char *, uint64_t))(v145 - 8);
      swift_bridgeObjectRetain();
      v146(v143, v144, v145);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v137 + 56))(v134, 0, 1, v136);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v140)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v134, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
LABEL_68:
    v147 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v134, v135, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    goto LABEL_69;
  }
  (*(void (**)(char *, char *, uint64_t))(v221 + 24))(v134, v135, v222);
  v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)&v134[*(int *)(v178 + 48)] = *(_QWORD *)&v135[*(int *)(v178 + 48)];
  *(_QWORD *)&v134[*(int *)(v136 + 20)] = *(_QWORD *)&v135[*(int *)(v136 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)&v134[*(int *)(v136 + 24)], (uint64_t *)&v135[*(int *)(v136 + 24)]);
LABEL_69:
  *(_DWORD *)&v226[*(int *)(v225 + 28)] = *(_DWORD *)&v229[*(int *)(v225 + 28)];
  v148 = *(int *)(v225 + 32);
  v149 = &v226[v148];
  v150 = &v229[v148];
  v151 = type metadata accessor for Date();
  v152 = *(_QWORD *)(v151 - 8);
  v153 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v152 + 48);
  v154 = v153(v149, 1, v151);
  v155 = v153(v150, 1, v151);
  if (v154)
  {
    if (!v155)
    {
      (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v149, v150, v151);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v152 + 56))(v149, 0, 1, v151);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v155)
  {
    (*(void (**)(char *, uint64_t))(v152 + 8))(v149, v151);
LABEL_74:
    v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v156 - 8) + 64));
    goto LABEL_75;
  }
  (*(void (**)(char *, char *, uint64_t))(v152 + 24))(v149, v150, v151);
LABEL_75:
  v157 = v227[6];
  v158 = (uint64_t)v102 + v157;
  v159 = (uint64_t)v103 + v157;
  v160 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v160 - 8) + 24))(v158, v159, v160);
  v161 = v227[7];
  v162 = (char *)v102 + v161;
  v163 = (char *)v103 + v161;
  v164 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v165 = *(_QWORD *)(v164 - 8);
  v166 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v165 + 48);
  v167 = v166(v162, 1, v164);
  v168 = v166(v163, 1, v164);
  if (!v167)
  {
    if (!v168)
    {
      (*(void (**)(char *, char *, uint64_t))(v165 + 24))(v162, v163, v164);
      goto LABEL_81;
    }
    (*(void (**)(char *, uint64_t))(v165 + 8))(v162, v164);
    goto LABEL_80;
  }
  if (v168)
  {
LABEL_80:
    v169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
    goto LABEL_81;
  }
  (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v162, v163, v164);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v165 + 56))(v162, 0, 1, v164);
LABEL_81:
  v170 = v227[8];
  v171 = (uint64_t *)((char *)v102 + v170);
  v172 = (uint64_t *)((char *)v103 + v170);
  v173 = *v172;
  v174 = v172[1];
  outlined copy of Data._Representation(*v172, v174);
  v175 = *v171;
  v176 = v171[1];
  *v171 = v173;
  v171[1] = v174;
  outlined consume of Data._Representation(v175, v176);
  *((_BYTE *)v102 + v227[9]) = *((_BYTE *)v103 + v227[9]);
  *((_BYTE *)v102 + *(int *)(v228 + 20)) = *((_BYTE *)v103 + *(int *)(v228 + 20));
  *(_QWORD *)((char *)v102 + *(int *)(v228 + 24)) = *(_QWORD *)((char *)v103 + *(int *)(v228 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v102;
}

_DWORD *initializeWithTake for TetraSessionStates(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  int *v87;
  _DWORD *v88;
  _DWORD *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  int *v93;

  v3 = a2;
  *a1 = *a2;
  v5 = type metadata accessor for TetraSessionState();
  v6 = *(int *)(v5 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)v3 + v6;
  v9 = type metadata accessor for SymmetricKey();
  v10 = *(_QWORD *)(v9 - 8);
  v84 = v10;
  v85 = v9;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = type metadata accessor for TetraRatchetState(0);
  *(_QWORD *)&v7[*(int *)(v12 + 20)] = *(_QWORD *)&v8[*(int *)(v12 + 20)];
  v90 = v12;
  v91 = v8;
  v13 = *(int *)(v12 + 24);
  v92 = v7;
  v14 = &v7[v13];
  v15 = &v8[v13];
  *(_QWORD *)&v7[v13] = *(_QWORD *)&v8[v13];
  v16 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v17 = &v14[v16];
  v18 = &v15[v16];
  v19 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v20 = *(_QWORD *)(v19 - 8);
  v93 = (int *)v5;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v22 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v23 = v22[5];
  v24 = &v14[v23];
  v25 = &v15[v23];
  v26 = type metadata accessor for TetraKEM768Key(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v86 = v22;
    v29 = type metadata accessor for Kyber768.PrivateKey();
    v30 = *(_QWORD *)(v29 - 8);
    v88 = v3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v25, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v24, v25, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v24, 0, 1, v29);
    }
    v32 = *(int *)(v26 + 20);
    v33 = &v24[v32];
    v34 = &v25[v32];
    v35 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      v38 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v33, v34, v38);
      *(_OWORD *)&v33[*(int *)(v35 + 20)] = *(_OWORD *)&v34[*(int *)(v35 + 20)];
      *(_QWORD *)&v33[*(int *)(v35 + 24)] = *(_QWORD *)&v34[*(int *)(v35 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    v22 = v86;
    v3 = v88;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v39 = v22[6];
  v40 = &v14[v39];
  v41 = &v15[v39];
  v42 = type metadata accessor for TetraKEM1024Key(0);
  v43 = *(_QWORD *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
  {
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    v87 = v22;
    v45 = type metadata accessor for Kyber1024.PrivateKey();
    v46 = *(_QWORD *)(v45 - 8);
    v89 = v3;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v41, 1, v45))
    {
      v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v40, v41, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v40, 0, 1, v45);
    }
    v48 = *(int *)(v42 + 20);
    v49 = &v40[v48];
    v50 = &v41[v48];
    v51 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    v52 = *(_QWORD *)(v51 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      v54 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v49, v50, v54);
      *(_OWORD *)&v49[*(int *)(v51 + 20)] = *(_OWORD *)&v50[*(int *)(v51 + 20)];
      *(_QWORD *)&v49[*(int *)(v51 + 24)] = *(_QWORD *)&v50[*(int *)(v51 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
    }
    v22 = v87;
    v3 = v89;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
  }
  *(_OWORD *)&v14[v22[7]] = *(_OWORD *)&v15[v22[7]];
  v55 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v56 = &v14[v55];
  v57 = &v15[v55];
  v58 = type metadata accessor for SymmetricRatchet();
  v59 = *(_QWORD *)(v58 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
  {
    v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v56, v57, v85);
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(_QWORD *)&v56[*(int *)(v61 + 48)] = *(_QWORD *)&v57[*(int *)(v61 + 48)];
    *(_QWORD *)&v56[*(int *)(v58 + 20)] = *(_QWORD *)&v57[*(int *)(v58 + 20)];
    v62 = *(int *)(v58 + 24);
    v63 = &v56[v62];
    v64 = &v57[v62];
    v65 = *((_OWORD *)v64 + 1);
    *(_OWORD *)v63 = *(_OWORD *)v64;
    *((_OWORD *)v63 + 1) = v65;
    *((_QWORD *)v63 + 4) = *((_QWORD *)v64 + 4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
  }
  *(_DWORD *)&v92[*(int *)(v90 + 28)] = *(_DWORD *)&v91[*(int *)(v90 + 28)];
  v66 = *(int *)(v90 + 32);
  v67 = &v92[v66];
  v68 = &v91[v66];
  v69 = type metadata accessor for Date();
  v70 = *(_QWORD *)(v69 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
  {
    v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v67, v68, v69);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
  }
  v72 = v93[6];
  v73 = (char *)a1 + v72;
  v74 = (char *)v3 + v72;
  v75 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v73, v74, v75);
  v76 = v93[7];
  v77 = (char *)a1 + v76;
  v78 = (char *)v3 + v76;
  v79 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v80 = *(_QWORD *)(v79 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v77, v78, v79);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  *(_OWORD *)((char *)a1 + v93[8]) = *(_OWORD *)((char *)v3 + v93[8]);
  *((_BYTE *)a1 + v93[9]) = *((_BYTE *)v3 + v93[9]);
  v82 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)v3 + *(int *)(a3 + 20));
  *(_QWORD *)((char *)a1 + v82) = *(_QWORD *)((char *)v3 + v82);
  return a1;
}

_DWORD *assignWithTake for TetraSessionStates(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(char *, uint64_t, uint64_t);
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  size_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(char *, uint64_t, uint64_t);
  int v72;
  int v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(char *, uint64_t, uint64_t);
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(char *, uint64_t, uint64_t);
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(uint64_t, uint64_t, uint64_t);
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (*v147)(uint64_t, uint64_t, uint64_t);
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  int *v165;
  int *v166;
  int *v167;
  int *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  int *v172;
  uint64_t v173;
  _DWORD *v174;

  *a1 = *a2;
  v6 = type metadata accessor for TetraSessionState();
  v7 = *(int *)(v6 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SymmetricKey();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  v173 = a3;
  v174 = a2;
  v172 = (int *)v6;
  v163 = v11;
  v164 = v10;
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = type metadata accessor for TetraRatchetState(0);
  *(_QWORD *)&v8[*(int *)(v16 + 20)] = *(_QWORD *)&v9[*(int *)(v16 + 20)];
  swift_bridgeObjectRelease();
  v170 = v16;
  v171 = v9;
  v17 = *(int *)(v16 + 24);
  v18 = &v8[v17];
  v19 = &v9[v17];
  v20 = *(void **)&v8[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;

  v21 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v22 = &v18[v21];
  v23 = &v19[v21];
  v24 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  v169 = v8;
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_13:
  v30 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v31 = v30[5];
  v32 = &v18[v31];
  v33 = &v19[v31];
  v34 = type metadata accessor for TetraKEM768Key(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (v38)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v32, type metadata accessor for TetraKEM768Key);
      goto LABEL_19;
    }
    v166 = v30;
    v44 = type metadata accessor for Kyber768.PrivateKey();
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
    v47 = v46(v32, 1, v44);
    v48 = v46(v33, 1, v44);
    if (v47)
    {
      if (!v48)
      {
        (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v32, v33, v44);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v32, 0, 1, v44);
LABEL_77:
        v30 = v166;
        v134 = *(int *)(v34 + 20);
        v135 = (uint64_t)&v32[v134];
        v33 += v134;
        v136 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        v137 = *(_QWORD *)(v136 - 8);
        v138 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 48);
        v139 = v138(v135, 1, v136);
        v140 = v138((uint64_t)v33, 1, v136);
        if (v139)
        {
          if (!v140)
          {
            v141 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v141 - 8) + 32))(v135, v33, v141);
            *(_OWORD *)(v135 + *(int *)(v136 + 20)) = *(_OWORD *)&v33[*(int *)(v136 + 20)];
            *(_QWORD *)(v135 + *(int *)(v136 + 24)) = *(_QWORD *)&v33[*(int *)(v136 + 24)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v137 + 56))(v135, 0, 1, v136);
            goto LABEL_31;
          }
        }
        else
        {
          if (!v140)
          {
            v151 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 40))(v135, v33, v151);
            v152 = *(int *)(v136 + 20);
            v153 = *(_QWORD *)(v135 + v152);
            v154 = *(_QWORD *)(v135 + v152 + 8);
            *(_OWORD *)(v135 + v152) = *(_OWORD *)&v33[v152];
            outlined consume of Data._Representation(v153, v154);
            v155 = *(int *)(v136 + 24);
            v156 = *(void **)(v135 + v155);
            *(_QWORD *)(v135 + v155) = *(_QWORD *)&v33[v155];

            goto LABEL_31;
          }
          outlined destroy of TetraRatchetOuterMessage(v135, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        v42 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?)
                                    - 8)
                        + 64);
        v43 = (void *)v135;
LABEL_20:
        memcpy(v43, v33, v42);
        goto LABEL_31;
      }
    }
    else
    {
      if (!v48)
      {
        (*(void (**)(char *, char *, uint64_t))(v45 + 40))(v32, v33, v44);
        goto LABEL_77;
      }
      (*(void (**)(char *, uint64_t))(v45 + 8))(v32, v44);
    }
    v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
    goto LABEL_77;
  }
  if (v38)
  {
LABEL_19:
    v42 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?)
                                - 8)
                    + 64);
    v43 = v32;
    goto LABEL_20;
  }
  v39 = type metadata accessor for Kyber768.PrivateKey();
  v40 = *(_QWORD *)(v39 - 8);
  v165 = v30;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v33, 1, v39))
  {
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v32, v33, v39);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v32, 0, 1, v39);
  }
  v49 = *(int *)(v34 + 20);
  v50 = &v32[v49];
  v51 = &v33[v49];
  v52 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v53 = *(_QWORD *)(v52 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
  {
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    v55 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 32))(v50, v51, v55);
    *(_OWORD *)&v50[*(int *)(v52 + 20)] = *(_OWORD *)&v51[*(int *)(v52 + 20)];
    *(_QWORD *)&v50[*(int *)(v52 + 24)] = *(_QWORD *)&v51[*(int *)(v52 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
  }
  v30 = v165;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
LABEL_31:
  v56 = v30[6];
  v57 = &v18[v56];
  v58 = &v19[v56];
  v59 = type metadata accessor for TetraKEM1024Key(0);
  v60 = *(_QWORD *)(v59 - 8);
  v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 48);
  v62 = v61(v57, 1, v59);
  v63 = v61(v58, 1, v59);
  if (!v62)
  {
    if (v63)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v57, type metadata accessor for TetraKEM1024Key);
      goto LABEL_37;
    }
    v168 = v30;
    v69 = type metadata accessor for Kyber1024.PrivateKey();
    v70 = *(_QWORD *)(v69 - 8);
    v71 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 48);
    v72 = v71(v57, 1, v69);
    v73 = v71(v58, 1, v69);
    if (v72)
    {
      if (!v73)
      {
        (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v57, v58, v69);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v57, 0, 1, v69);
LABEL_83:
        v30 = v168;
        v143 = *(int *)(v59 + 20);
        v144 = (uint64_t)&v57[v143];
        v58 += v143;
        v145 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        v146 = *(_QWORD *)(v145 - 8);
        v147 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v146 + 48);
        v148 = v147(v144, 1, v145);
        v149 = v147((uint64_t)v58, 1, v145);
        if (v148)
        {
          if (!v149)
          {
            v150 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v150 - 8) + 32))(v144, v58, v150);
            *(_OWORD *)(v144 + *(int *)(v145 + 20)) = *(_OWORD *)&v58[*(int *)(v145 + 20)];
            *(_QWORD *)(v144 + *(int *)(v145 + 24)) = *(_QWORD *)&v58[*(int *)(v145 + 24)];
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v146 + 56))(v144, 0, 1, v145);
            goto LABEL_47;
          }
        }
        else
        {
          if (!v149)
          {
            v157 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v157 - 8) + 40))(v144, v58, v157);
            v158 = *(int *)(v145 + 20);
            v159 = *(_QWORD *)(v144 + v158);
            v160 = *(_QWORD *)(v144 + v158 + 8);
            *(_OWORD *)(v144 + v158) = *(_OWORD *)&v58[v158];
            outlined consume of Data._Representation(v159, v160);
            v161 = *(int *)(v145 + 24);
            v162 = *(void **)(v144 + v161);
            *(_QWORD *)(v144 + v161) = *(_QWORD *)&v58[v161];

            goto LABEL_47;
          }
          outlined destroy of TetraRatchetOuterMessage(v144, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        v67 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?)
                                    - 8)
                        + 64);
        v68 = (void *)v144;
LABEL_38:
        memcpy(v68, v58, v67);
        goto LABEL_47;
      }
    }
    else
    {
      if (!v73)
      {
        (*(void (**)(char *, char *, uint64_t))(v70 + 40))(v57, v58, v69);
        goto LABEL_83;
      }
      (*(void (**)(char *, uint64_t))(v70 + 8))(v57, v69);
    }
    v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
    goto LABEL_83;
  }
  if (v63)
  {
LABEL_37:
    v67 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?)
                                - 8)
                    + 64);
    v68 = v57;
    goto LABEL_38;
  }
  v64 = type metadata accessor for Kyber1024.PrivateKey();
  v65 = *(_QWORD *)(v64 - 8);
  v167 = v30;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v58, 1, v64))
  {
    v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v57, v58, v64);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v57, 0, 1, v64);
  }
  v74 = *(int *)(v59 + 20);
  v75 = &v57[v74];
  v76 = &v58[v74];
  v77 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v78 = *(_QWORD *)(v77 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
  {
    v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
  }
  else
  {
    v80 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 32))(v75, v76, v80);
    *(_OWORD *)&v75[*(int *)(v77 + 20)] = *(_OWORD *)&v76[*(int *)(v77 + 20)];
    *(_QWORD *)&v75[*(int *)(v77 + 24)] = *(_QWORD *)&v76[*(int *)(v77 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
  }
  v30 = v167;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
LABEL_47:
  v81 = v30[7];
  v82 = (uint64_t)&v18[v81];
  v83 = &v19[v81];
  v84 = *(_QWORD *)&v18[v81 + 8];
  if (v84 >> 60 == 15)
  {
LABEL_50:
    *(_OWORD *)v82 = *(_OWORD *)v83;
    goto LABEL_52;
  }
  v85 = *((_QWORD *)v83 + 1);
  if (v85 >> 60 == 15)
  {
    outlined destroy of Data(v82);
    goto LABEL_50;
  }
  v86 = *(_QWORD *)v82;
  *(_QWORD *)v82 = *(_QWORD *)v83;
  *(_QWORD *)(v82 + 8) = v85;
  outlined consume of Data._Representation(v86, v84);
LABEL_52:
  v87 = *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v88 = &v18[v87];
  v89 = &v19[v87];
  v90 = type metadata accessor for SymmetricRatchet();
  v91 = *(_QWORD *)(v90 - 8);
  v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 48);
  v93 = v92(v88, 1, v90);
  v94 = v92(v89, 1, v90);
  if (v93)
  {
    if (!v94)
    {
      (*(void (**)(char *, char *, uint64_t))(v163 + 32))(v88, v89, v164);
      v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(_QWORD *)&v88[*(int *)(v95 + 48)] = *(_QWORD *)&v89[*(int *)(v95 + 48)];
      *(_QWORD *)&v88[*(int *)(v90 + 20)] = *(_QWORD *)&v89[*(int *)(v90 + 20)];
      v96 = *(int *)(v90 + 24);
      v97 = &v88[v96];
      v98 = &v89[v96];
      v99 = *((_OWORD *)v98 + 1);
      *(_OWORD *)v97 = *(_OWORD *)v98;
      *((_OWORD *)v97 + 1) = v99;
      *((_QWORD *)v97 + 4) = *((_QWORD *)v98 + 4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v94)
  {
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v88, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
LABEL_57:
    v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    goto LABEL_58;
  }
  (*(void (**)(char *, char *, uint64_t))(v163 + 40))(v88, v89, v164);
  v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)&v88[*(int *)(v128 + 48)] = *(_QWORD *)&v89[*(int *)(v128 + 48)];
  *(_QWORD *)&v88[*(int *)(v90 + 20)] = *(_QWORD *)&v89[*(int *)(v90 + 20)];
  swift_bridgeObjectRelease();
  v129 = *(int *)(v90 + 24);
  v130 = (uint64_t)&v88[v129];
  v131 = &v89[v129];
  __swift_destroy_boxed_opaque_existential_0(v130);
  v132 = *((_OWORD *)v131 + 1);
  *(_OWORD *)v130 = *(_OWORD *)v131;
  *(_OWORD *)(v130 + 16) = v132;
  *(_QWORD *)(v130 + 32) = *((_QWORD *)v131 + 4);
LABEL_58:
  *(_DWORD *)&v169[*(int *)(v170 + 28)] = *(_DWORD *)&v171[*(int *)(v170 + 28)];
  v101 = *(int *)(v170 + 32);
  v102 = &v169[v101];
  v103 = &v171[v101];
  v104 = type metadata accessor for Date();
  v105 = *(_QWORD *)(v104 - 8);
  v106 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 48);
  v107 = v106(v102, 1, v104);
  v108 = v106(v103, 1, v104);
  if (v107)
  {
    if (!v108)
    {
      (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v102, v103, v104);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (v108)
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v102, v104);
LABEL_63:
    v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(v102, v103, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    goto LABEL_64;
  }
  (*(void (**)(char *, char *, uint64_t))(v105 + 40))(v102, v103, v104);
LABEL_64:
  v110 = v172[6];
  v111 = (char *)a1 + v110;
  v112 = (char *)v174 + v110;
  v113 = type metadata accessor for P256.Signing.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v113 - 8) + 40))(v111, v112, v113);
  v114 = v172[7];
  v115 = (char *)a1 + v114;
  v116 = (char *)v174 + v114;
  v117 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v118 = *(_QWORD *)(v117 - 8);
  v119 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v118 + 48);
  v120 = v119(v115, 1, v117);
  v121 = v119(v116, 1, v117);
  if (!v120)
  {
    if (!v121)
    {
      (*(void (**)(char *, char *, uint64_t))(v118 + 40))(v115, v116, v117);
      goto LABEL_70;
    }
    (*(void (**)(char *, uint64_t))(v118 + 8))(v115, v117);
    goto LABEL_69;
  }
  if (v121)
  {
LABEL_69:
    v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
    goto LABEL_70;
  }
  (*(void (**)(char *, char *, uint64_t))(v118 + 32))(v115, v116, v117);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v115, 0, 1, v117);
LABEL_70:
  v123 = v172[8];
  v124 = *(_QWORD *)((char *)a1 + v123);
  v125 = *(_QWORD *)((char *)a1 + v123 + 8);
  *(_OWORD *)((char *)a1 + v123) = *(_OWORD *)((char *)v174 + v123);
  outlined consume of Data._Representation(v124, v125);
  *((_BYTE *)a1 + v172[9]) = *((_BYTE *)v174 + v172[9]);
  v126 = *(int *)(v173 + 24);
  *((_BYTE *)a1 + *(int *)(v173 + 20)) = *((_BYTE *)v174 + *(int *)(v173 + 20));
  *(_QWORD *)((char *)a1 + v126) = *(_QWORD *)((char *)v174 + v126);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraSessionStates()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB29CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for TetraSessionState();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TetraSessionStates()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB29D50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for TetraSessionState();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for TetraSessionStates()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TetraSessionStates;
  if (!type metadata singleton initialization cache for TetraSessionStates)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for TetraSessionStates()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for TetraSessionState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t TetraSessionStates.discardMessageKeyOnSessionStates(ephemeralECDHPublicKey:messageIndex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  Swift::String v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t result;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for TetraSessionState();
  v8 = *(_QWORD *)(v68 - 8);
  MEMORY[0x24BDAC7A8](v68);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v61 - v16;
  if ((TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:)(a1, a2) & 1) != 0)
  {
    v10 = (char *)static os_log_type_t.info.getter();
    v18 = MessageProtectionLog();
    if (!v18)
      goto LABEL_29;
    v19 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, a1, v11);
    if (os_log_type_enabled(v19, (os_log_type_t)v10))
    {
      v66 = v11;
      v67 = v12;
      v65 = a2;
      v20 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      v71[0] = v21;
      *(_DWORD *)v20 = 136315394;
      v22 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
      if (v23 >> 60 == 15)
        goto LABEL_31;
      v24 = v22;
      v25 = v23;
      v26 = Data.base64EncodedString(options:)(0);
      outlined consume of Data?(v24, v25);
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26._countAndFlagsBits, (unint64_t)v26._object, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v17, v66);
      *(_WORD *)(v20 + 12) = 2048;
      v70 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20BABB000, v19, (os_log_type_t)v10, "Discarded MessageKey associated with {publicKey:%s, index:%llu} on default session.", (uint8_t *)v20, 0x16u);
      v27 = 1;
      swift_arrayDestroy();
      MEMORY[0x20BD3C498](v21, -1, -1);
      MEMORY[0x20BD3C498](v20, -1, -1);

      return v27;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    return 1;
  }
  v64 = (uint64_t)v7;
  v67 = v12;
  v28 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for TetraSessionStates() + 24));
  v29 = *(_QWORD *)(v28 + 16);
  if (!v29)
  {
LABEL_21:
    static os_log_type_t.error.getter();
    v58 = MessageProtectionLog();
    if (!v58)
      goto LABEL_30;
    v59 = v58;
    os_log(_:dso:log:_:_:)();

    return 0;
  }
  v62 = v15;
  v63 = v28;
  v65 = a2;
  v66 = v11;
  v30 = v28 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v31 = *(_QWORD *)(v8 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of TetraRatchetOuterMessage(v30, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    v32 = &v10[*(int *)(v68 + 20)];
    v33 = type metadata accessor for TetraRatchetState(0);
    v34 = *(_QWORD *)&v32[*(int *)(v33 + 20)];
    MEMORY[0x24BDAC7A8](v33);
    *(&v61 - 2) = a1;
    swift_bridgeObjectRetain();
    v35 = (unint64_t)specialized _ArrayProtocol.filter(_:)(partial apply for closure #1 in TetraSessionState.discardMessageKeyOnSessionState(ephemeralECDHPublicKey:messageIndex:), &v61 - 4, v34);
    if (v35 >> 62)
      break;
    if (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_13;
LABEL_10:
    swift_bridgeObjectRelease();
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    v30 += v31;
    if (!--v29)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
  }
  swift_bridgeObjectRetain();
  v36 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v36)
    goto LABEL_10;
LABEL_13:
  if ((v35 & 0xC000000000000001) != 0)
  {
    MEMORY[0x20BD3B790](0, v35);
    v37 = v64;
    v38 = v65;
LABEL_16:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    type metadata accessor for SymmetricRatchet();
    specialized Dictionary.removeValue(forKey:)(v38, v37);
    outlined destroy of TetraSessionStates?(v37, &demangling cache variable for type metadata for SymmetricKey?);
    swift_endAccess();
    swift_release();
    v39 = static os_log_type_t.info.getter();
    v40 = MessageProtectionLog();
    if (!v40)
      goto LABEL_32;
    v41 = v40;
    swift_bridgeObjectRelease();
    v42 = v66;
    v43 = v67;
    v44 = v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v62, a1, v66);
    if (os_log_type_enabled(v41, (os_log_type_t)v39))
    {
      LODWORD(v65) = v39;
      v45 = swift_slowAlloc();
      v64 = swift_slowAlloc();
      v70 = v64;
      *(_DWORD *)v45 = 136315650;
      v46 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
      if (v47 >> 60 == 15)
        goto LABEL_33;
      v48 = v46;
      v49 = v47;
      v50 = Data.base64EncodedString(options:)(0);
      outlined consume of Data?(v48, v49);
      v71[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50._countAndFlagsBits, (unint64_t)v50._object, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v44, v66);
      *(_WORD *)(v45 + 12) = 2048;
      v71[0] = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v45 + 22) = 2080;
      swift_beginAccess();
      v51 = (uint64_t *)&v10[*(int *)(v68 + 32)];
      v52 = *v51;
      v53 = v51[1];
      outlined copy of Data._Representation(*v51, v53);
      v54 = Data.description.getter();
      v56 = v55;
      outlined consume of Data._Representation(v52, v53);
      v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20BABB000, v41, (os_log_type_t)v65, "Discarded MessageKey associated with {publicKey:%s, index:%llu} on previous session (%s).", (uint8_t *)v45, 0x20u);
      v57 = v64;
      swift_arrayDestroy();
      MEMORY[0x20BD3C498](v57, -1, -1);
      MEMORY[0x20BD3C498](v45, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
    }
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    return 1;
  }
  v37 = v64;
  v38 = v65;
  if (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_16;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  result = outlined destroy of TetraRatchetOuterMessage((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  __break(1u);
  return result;
}

void TetraSessionStates.sealMessage(message:authenticatedData:prekeyHash:remoteRegistration:sessionDST:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, char *a10, uint64_t (*a11)(uint64_t), uint64_t a12)
{
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;

  v14 = v12;
  v39 = a6;
  v37 = a4;
  v38 = a5;
  v35 = a2;
  v36 = a3;
  v34 = a1;
  v18 = type metadata accessor for TetraRatchetOuterMessage();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for TetraSessionState();
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (int *)((char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((*((_BYTE *)v14 + *(int *)(v22 + 36)) & 1) != 0)
  {
    a7 = 0;
    v25 = *(_DWORD *)&a10[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion];
    if (v25 >= 0xD)
      v25 = 13;
    *v14 = v25;
    a8 = 0xF000000000000000;
LABEL_9:
    TetraRatchetState.sealMessage(message:authenticatedData:prekeyHash:)(v34, v35, v36, v37, v38, v39, a7, a8, a9);
    outlined consume of Data?(a7, a8);
    return;
  }
  specialized static Data.== infix(_:_:)(*(_QWORD *)((char *)v14 + *(int *)(v21 + 32)), *(_QWORD *)((char *)v14 + *(int *)(v21 + 32) + 8));
  if ((v26 & 1) != 0)
  {
    v27 = *(_DWORD *)&a10[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion];
    if (v27 >= 0xD)
      v27 = 13;
    *v14 = v27;
    outlined copy of Data._Representation(a7, a8);
    goto LABEL_9;
  }
  v32 = a9;
  v33 = a12;
  v28 = a10;
  TetraSessionState.init(remoteTetraRegistration:sessionDST:)(v28, a11, v33, v24);
  if (!v13)
  {
    v29 = *(_DWORD *)&v28[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion];
    if (v29 >= 0xD)
      v29 = 13;
    *v24 = v29;
    if ((*((_BYTE *)v24 + *(int *)(v21 + 36)) & 1) != 0)
    {
      a7 = 0;
      a8 = 0xF000000000000000;
    }
    else
    {
      outlined copy of Data._Representation(a7, a8);
    }
    v30 = v32;
    TetraRatchetState.sealMessage(message:authenticatedData:prekeyHash:)(v34, v35, v36, v37, v38, v39, a7, a8, (uint64_t)v20);
    outlined consume of Data?(a7, a8);
    TetraSessionStates.makeDefault(_:)(v24);
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    outlined init with take of TetraRatchetState((uint64_t)v20, v30, (uint64_t (*)(_QWORD))type metadata accessor for TetraRatchetOuterMessage);
  }
}

NSObject *TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  os_log_type_t v12;
  NSObject *result;
  NSObject *v14;
  uint8_t *v15;
  _QWORD v16[7];
  unint64_t v17;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TetraSessionState() - 8) + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_20BB404E0;
  outlined init with copy of TetraRatchetOuterMessage(v3, v9 + v8, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  type metadata accessor for TetraSessionStates();
  v17 = v9;
  v10 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v10);
  v16[2] = a2;
  v16[3] = a3;
  v16[4] = a1;
  v11 = *(_QWORD *)(specialized _ArrayProtocol.filter(_:)((uint64_t (*)(char *))partial apply for closure #1 in TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:), (uint64_t)v16, v9)+ 16);
  if (v11 <= 1)
  {
    swift_bridgeObjectRelease();
    return (v11 == 1);
  }
  else
  {
    v12 = static os_log_type_t.fault.getter();
    result = MessageProtectionLog();
    if (result)
    {
      v14 = result;
      if (os_log_type_enabled(result, v12))
      {
        swift_bridgeObjectRetain();
        v15 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v15 = 134217984;
        swift_bridgeObjectRelease();
        v17 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_20BABB000, v14, v12, "Unexpectedly found %ld colliding prekey hashes", v15, 0xCu);
        MEMORY[0x20BD3C498](v15, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      return 0;
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

NSObject *TetraSessionStates.openMessage(_:prekeysHash:sessionDST:theirTetraVersion:didRatchet:)(uint64_t a1, uint64_t a2, unint64_t a3, NSObject *a4, uint64_t a5, unsigned int a6, _BYTE *a7)
{
  int *v7;
  NSObject *v8;
  NSObject *v9;
  int *v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  Swift::String v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int *v47;
  NSObject *v48;
  os_log_type_t v49;
  NSObject *v50;
  NSObject *v51;
  int *v52;
  NSObject *v53;
  _QWORD v55[7];
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL4 v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  uint64_t v72;
  _BYTE *v73;
  int *v74;
  uint64_t __s1[4];

  v9 = v8;
  v10 = v7;
  v72 = a5;
  v73 = a7;
  v70 = a1;
  v71 = a4;
  __s1[3] = *MEMORY[0x24BDAC8D0];
  v69 = type metadata accessor for TetraSessionState();
  v14 = *(_QWORD *)(v69 - 8);
  v15 = MEMORY[0x24BDAC7A8](v69);
  v74 = (int *)((char *)v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15);
  v63 = (uint64_t)v55 - v17;
  if (a3 >> 60 != 15)
  {
    v18 = v69;
    v19 = (uint64_t *)((char *)v7 + *(int *)(v69 + 32));
    v20 = *v19;
    v21 = v19[1];
    outlined copy of Data?(a2, a3);
    specialized static Data.== infix(_:_:)(v20, v21);
    if ((v22 & 1) != 0)
    {
      if (a6 >= 0xD)
        v23 = 13;
      else
        v23 = a6;
      *v10 = v23;
      *((_BYTE *)v10 + *(int *)(v18 + 36)) = 1;
      v9 = TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(v70, v71, v72, v73);
      outlined consume of Data?(a2, a3);
      return v9;
    }
    v57 = v14;
    v65 = a2;
    v56 = a6;
    v24 = *(_QWORD *)((char *)v10 + *(int *)(type metadata accessor for TetraSessionStates() + 24));
    if (*(_QWORD *)(v24 + 16))
    {
      v62 = v10;
      v25 = v24 + ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80));
      v68 = a3 >> 62;
      v55[6] = HIDWORD(v65);
      v26 = __OFSUB__(HIDWORD(v65), (_DWORD)v65);
      v60 = v26;
      v59 = HIDWORD(v65) - (int)v65;
      v67 = BYTE6(a3);
      v61 = a3;
      *(_QWORD *)&v64 = a3 & 0x3FFFFFFFFFFFFFFFLL;
      v58 = (int)v65;
      v55[5] = v65 >> 32;
      v55[4] = (v65 >> 32) - (int)v65;
      v66 = *(_QWORD *)(v57 + 72);
      v55[2] = v24;
      swift_bridgeObjectRetain();
      v27 = v63;
      outlined init with copy of TetraRatchetOuterMessage(v25, v63, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      __asm { BR              X8 }
    }
    outlined consume of Data?(v65, a3);
    a6 = v56;
    v14 = v57;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
  v28 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v67 = *(_QWORD *)(v14 + 72);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_20BB404E0;
  outlined init with copy of TetraRatchetOuterMessage((uint64_t)v10, v29 + v28, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  type metadata accessor for TetraSessionStates();
  __s1[0] = v29;
  v30 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v30);
  v32 = *(_QWORD *)(__s1[0] + 16);
  if (a6 >= 0xD)
    v33 = 13;
  else
    v33 = a6;
  LODWORD(v68) = v33;
  if (v32)
  {
    v62 = v10;
    v61 = __s1[0];
    v34 = __s1[0] + v28;
    *(_QWORD *)&v31 = 136315394;
    v64 = v31;
    v63 = MEMORY[0x24BEE4AD8] + 8;
    v35 = v69;
    do
    {
      v47 = v74;
      outlined init with copy of TetraRatchetOuterMessage(v34, (uint64_t)v74, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      swift_beginAccess();
      *v47 = v68;
      *((_BYTE *)v47 + *(int *)(v35 + 36)) = 1;
      v48 = TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(v70, v71, v72, v73);
      if (!v9)
      {
        v9 = v48;
        swift_endAccess();
        swift_bridgeObjectRelease();
        v52 = v74;
        TetraSessionStates.makeDefault(_:)(v74);
        outlined destroy of TetraRatchetOuterMessage((uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
        return v9;
      }
      swift_endAccess();
      v49 = static os_log_type_t.error.getter();
      v50 = MessageProtectionLog();
      if (!v50)
        __break(1u);
      v51 = v50;
      if (os_log_type_enabled(v50, v49))
      {
        v36 = v9;
        v37 = v9;
        v38 = swift_slowAlloc();
        v66 = swift_slowAlloc();
        __s1[0] = v66;
        *(_DWORD *)v38 = v64;
        v39 = (uint64_t *)((char *)v74 + *(int *)(v35 + 32));
        LODWORD(v65) = v49;
        v40 = *v39;
        v41 = v39[1];
        outlined copy of Data._Representation(*v39, v41);
        v42 = Data.base64EncodedString(options:)(0);
        v43 = v41;
        v35 = v69;
        outlined consume of Data._Representation(v40, v43);
        *(_QWORD *)(v38 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42._countAndFlagsBits, (unint64_t)v42._object, __s1);
        swift_bridgeObjectRelease();
        *(_WORD *)(v38 + 12) = 2080;
        swift_getErrorValue();
        v44 = Error.localizedDescription.getter();
        *(_QWORD *)(v38 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, __s1);
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_20BABB000, v51, (os_log_type_t)v65, "Failed to decrypt with session: %s. Decryption error: %s", (uint8_t *)v38, 0x16u);
        v46 = v66;
        swift_arrayDestroy();
        MEMORY[0x20BD3C498](v46, -1, -1);
        MEMORY[0x20BD3C498](v38, -1, -1);

      }
      else
      {

      }
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v74, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      v9 = 0;
      v34 += v67;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    v10 = v62;
  }
  else
  {
    swift_bridgeObjectRelease();
    v35 = v69;
  }
  *v10 = v68;
  *((_BYTE *)v10 + *(int *)(v35 + 36)) = 1;
  v53 = TetraRatchetState.openMessage(_:sessionDST:didRatchet:)(v70, v71, v72, v73);
  if (!v9)
    return v53;
  return v9;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = type metadata accessor for TetraSessionState();
  v24 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v20 - v11;
  v13 = MEMORY[0x24BEE4AF8];
  v25 = MEMORY[0x24BEE4AF8];
  v22 = *(_QWORD *)(a3 + 16);
  if (v22)
  {
    v14 = 0;
    v15 = MEMORY[0x24BEE4AF8];
    v20[1] = a2;
    v21 = a3;
    v20[0] = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v13 = *(_QWORD *)(v24 + 72);
      outlined init with copy of TetraRatchetOuterMessage(a3 + v16 + v13 * v14, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      v17 = a1(v12);
      if (v3)
      {
        outlined destroy of TetraRatchetOuterMessage((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
        swift_release();
        swift_bridgeObjectRelease();
        return v13;
      }
      if ((v17 & 1) != 0)
      {
        outlined init with take of TetraRatchetState((uint64_t)v12, v23, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v25;
        v19 = *(_QWORD *)(v25 + 16);
        v18 = *(_QWORD *)(v25 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          v15 = v25;
        }
        *(_QWORD *)(v15 + 16) = v19 + 1;
        result = outlined init with take of TetraRatchetState(v23, v15 + v16 + v19 * v13, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        result = outlined destroy of TetraRatchetOuterMessage((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      }
      if (v22 == ++v14)
      {
        v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

_QWORD *specialized _ArrayProtocol.filter(_:)(uint64_t (*a1)(uint64_t *), _QWORD *a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v5 = a3;
  v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (a3 >> 62)
  {
LABEL_18:
    v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      v9 = 0;
      v15 = v5 & 0xFFFFFFFFFFFFFF8;
      v16 = v5 & 0xC000000000000001;
      v14 = v5;
      while (1)
      {
        if (v16)
        {
          v10 = MEMORY[0x20BD3B790](v9, v5);
          v11 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
LABEL_14:
            __break(1u);
LABEL_15:
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return v3;
          }
        }
        else
        {
          if (v9 >= *(_QWORD *)(v15 + 16))
          {
            __break(1u);
            goto LABEL_18;
          }
          v10 = *(_QWORD *)(v5 + 8 * v9 + 32);
          swift_retain();
          v11 = v9 + 1;
          if (__OFADD__(v9, 1))
            goto LABEL_14;
        }
        v17 = v10;
        v3 = a2;
        v12 = a1(&v17);
        if (v4)
          goto LABEL_15;
        if ((v12 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          v5 = v14;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          v3 = &v18;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        ++v9;
        if (v11 == v8)
        {
          v3 = v18;
          goto LABEL_20;
        }
      }
    }
  }
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

void TetraSessionStates.makeDefault(_:)(int *a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  os_log_type_t v12;
  NSObject *v13;
  NSObject *v14;
  uint8_t *v15;

  v2 = (uint64_t)v1;
  if ((specialized static TetraSessionState.== infix(_:_:)(v1, a1) & 1) != 0)
  {
    outlined assign with copy of TetraSessionState((uint64_t)a1, (uint64_t)v1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TetraSessionState>);
    v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TetraSessionState() - 8) + 80);
    v5 = (v4 + 32) & ~v4;
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_20BB404E0;
    outlined init with copy of TetraRatchetOuterMessage(v2, v6 + v5, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    v7 = (uint64_t *)(v2 + *(int *)(type metadata accessor for TetraSessionStates() + 24));
    specialized Array.append<A>(contentsOf:)(*v7);
    *v7 = v6;
    v8 = outlined assign with copy of TetraSessionState((uint64_t)a1, v2);
    MEMORY[0x24BDAC7A8](v8);
    v9 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t (*)(unint64_t))_s17MessageProtection18TetraSessionStatesV11makeDefaultyyAA0cD5StateVFSbAFXEfU_TA_0);
    v10 = *(_QWORD *)(*v7 + 16);
    if (v10 < v9)
    {
      __break(1u);
      goto LABEL_12;
    }
    specialized Array.replaceSubrange<A>(_:with:)(v9, v10);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v2 + *(int *)(type metadata accessor for TetraSessionStates() + 24)) + 16);
  if (v11 < 3)
    return;
  specialized RangeReplaceableCollection<>.removeLast(_:)(v11 - 2);
  v12 = static os_log_type_t.error.getter();
  v13 = MessageProtectionLog();
  if (!v13)
  {
LABEL_12:
    __break(1u);
    return;
  }
  v14 = v13;
  if (os_log_type_enabled(v13, v12))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v15 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_20BABB000, v14, v12, "Removed %ld Tetra sessions.", v15, 0xCu);
    MEMORY[0x20BD3C498](v15, -1, -1);
  }

}

Swift::Bool __swiftcall TetraSessionStates.hasSessionWithCompatibleVersion()()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Bool result;
  unint64_t v21;
  uint64_t (*v22)();
  unint64_t v23;
  uint64_t v24;
  uint64_t (*v25)();
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  Swift::Bool v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraSessionState?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TetraSessionState();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v47 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (_DWORD *)((char *)&v41 - v9);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v46 = (char *)&v41 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (_DWORD *)((char *)&v41 - v13);
  v15 = *v0 - 13;
  v16 = (_QWORD *)((char *)v0 + *(int *)(type metadata accessor for TetraSessionStates() + 24));
  v17 = *v16;
  if (v15 <= 0x12)
  {
    v18 = MEMORY[0x24BEE4AF8];
    v48 = MEMORY[0x24BEE4AF8];
    v19 = *(_QWORD *)(v17 + 16);
    result = swift_bridgeObjectRetain();
    if (v19)
    {
      v44 = v16;
      v21 = 0;
      v22 = type metadata accessor for TetraSessionState;
      v47 = v19;
      while (v21 < *(_QWORD *)(v17 + 16))
      {
        v23 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        v24 = *(_QWORD *)(v5 + 72);
        outlined init with copy of TetraRatchetOuterMessage(v17 + v23 + v24 * v21, (uint64_t)v14, (uint64_t (*)(_QWORD))v22);
        if ((*v14 - 13) > 0x12)
        {
          result = outlined destroy of TetraRatchetOuterMessage((uint64_t)v14, (uint64_t (*)(_QWORD))v22);
        }
        else
        {
          v25 = v22;
          outlined init with take of TetraRatchetState((uint64_t)v14, (uint64_t)v46, (uint64_t (*)(_QWORD))v22);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
          v18 = v48;
          v27 = *(_QWORD *)(v48 + 16);
          v26 = *(_QWORD *)(v48 + 24);
          if (v27 >= v26 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
            v18 = v48;
          }
          *(_QWORD *)(v18 + 16) = v27 + 1;
          v28 = v18 + v23 + v27 * v24;
          v22 = v25;
          result = outlined init with take of TetraRatchetState((uint64_t)v46, v28, (uint64_t (*)(_QWORD))v25);
          v19 = v47;
        }
        if (v19 == ++v21)
        {
          v18 = v48;
          v16 = v44;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *v16 = v18;
    return 1;
  }
  v29 = MEMORY[0x24BEE4AF8];
  v48 = MEMORY[0x24BEE4AF8];
  v30 = *(_QWORD *)(v17 + 16);
  result = swift_bridgeObjectRetain();
  if (v30)
  {
    v42 = v0;
    v43 = v4;
    v46 = v3;
    v44 = v16;
    v31 = 0;
    v32 = MEMORY[0x24BEE4AF8];
    v45 = v5;
    while (v31 < *(_QWORD *)(v17 + 16))
    {
      v33 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v34 = *(_QWORD *)(v5 + 72);
      outlined init with copy of TetraRatchetOuterMessage(v17 + v33 + v34 * v31, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      if ((*v10 - 13) > 0x12)
      {
        result = outlined destroy of TetraRatchetOuterMessage((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      }
      else
      {
        v35 = v30;
        outlined init with take of TetraRatchetState((uint64_t)v10, v47, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1);
        v32 = v48;
        v37 = *(_QWORD *)(v48 + 16);
        v36 = *(_QWORD *)(v48 + 24);
        if (v37 >= v36 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
          v32 = v48;
        }
        *(_QWORD *)(v32 + 16) = v37 + 1;
        result = outlined init with take of TetraRatchetState(v47, v32 + v33 + v37 * v34, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
        v30 = v35;
        v5 = v45;
      }
      if (v30 == ++v31)
      {
        v29 = v48;
        v4 = v43;
        v16 = v44;
        v3 = v46;
        v0 = v42;
        goto LABEL_27;
      }
    }
    goto LABEL_34;
  }
LABEL_27:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v16 = v29;
  if (!*(_QWORD *)(v29 + 16))
    return 0;
  v39 = v16;
  v40 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v0, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  result = outlined init with copy of TetraRatchetOuterMessage(v29 + v40, (uint64_t)v0, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  if (!*(_QWORD *)(*v39 + 16))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  outlined init with copy of TetraRatchetOuterMessage(*v39 + v40, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
  result = outlined destroy of TetraSessionStates?((uint64_t)v3, &demangling cache variable for type metadata for TetraSessionState?);
  if (*(_QWORD *)(*v39 + 16))
  {
    v38 = 1;
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    return v38;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t closure #1 in TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;

  v44 = a3;
  v45 = (char *)a4;
  v5 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v42 = *(_QWORD *)(v5 - 8);
  v43 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (P256.KeyAgreement.PublicKey?, P256.KeyAgreement.PublicKey?));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v40 - v15;
  v17 = type metadata accessor for TetraSessionState();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized static Data.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(v18 + 32)), *(_QWORD *)(a1 + *(int *)(v18 + 32) + 8));
  v22 = v21;
  outlined init with copy of TetraRatchetOuterMessage(a1, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  outlined init with copy of P256.KeyAgreement.PublicKey?((uint64_t)v45, (uint64_t)v16);
  if ((v22 & 1) == 0)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v16, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    v29 = 0;
    return v29 & 1;
  }
  v23 = (uint64_t)v14;
  v24 = v7;
  v25 = (uint64_t)&v10[*(int *)(v8 + 48)];
  outlined init with copy of P256.KeyAgreement.PublicKey?((uint64_t)&v20[*(int *)(v17 + 28)], (uint64_t)v10);
  outlined init with copy of P256.KeyAgreement.PublicKey?((uint64_t)v16, v25);
  v27 = v42;
  v26 = v43;
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
  if (v28((uint64_t)v10, 1, v43) != 1)
  {
    outlined init with copy of P256.KeyAgreement.PublicKey?((uint64_t)v10, v23);
    if (v28(v25, 1, v26) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v24, v25, v26);
      v41 = v23;
      v30 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      v45 = v10;
      v32 = v31;
      v33 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
      v35 = v34;
      specialized static Data.== infix(_:_:)(v30, v32);
      v29 = v36;
      outlined consume of Data._Representation(v33, v35);
      outlined consume of Data._Representation(v30, v32);
      v37 = v43;
      v38 = *(void (**)(char *, uint64_t))(v42 + 8);
      v38(v24, v43);
      outlined destroy of TetraSessionStates?((uint64_t)v16, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
      v38((char *)v41, v37);
      outlined destroy of TetraSessionStates?((uint64_t)v45, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
      return v29 & 1;
    }
    outlined destroy of TetraSessionStates?((uint64_t)v16, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v23, v26);
    goto LABEL_8;
  }
  outlined destroy of TetraSessionStates?((uint64_t)v16, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  if (v28(v25, 1, v26) != 1)
  {
LABEL_8:
    outlined destroy of TetraSessionStates?((uint64_t)v10, &demangling cache variable for type metadata for (P256.KeyAgreement.PublicKey?, P256.KeyAgreement.PublicKey?));
    v29 = 0;
    return v29 & 1;
  }
  outlined destroy of TetraSessionStates?((uint64_t)v10, &demangling cache variable for type metadata for P256.KeyAgreement.PublicKey?);
  v29 = 1;
  return v29 & 1;
}

Swift::Void __swiftcall TetraSessionStates.cleanupPreviousSessionStates()()
{
  uint64_t v0;
  unint64_t v1;
  os_log_type_t v2;
  NSObject *v3;
  uint8_t *v4;
  NSObject *log;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + *(int *)(type metadata accessor for TetraSessionStates() + 24)) + 16);
  if (v1 >= 3)
  {
    specialized RangeReplaceableCollection<>.removeLast(_:)(v1 - 2);
    v2 = static os_log_type_t.error.getter();
    v3 = MessageProtectionLog();
    if (v3)
    {
      log = v3;
      if (os_log_type_enabled(v3, v2))
      {
        v4 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v4 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_20BABB000, log, v2, "Removed %ld Tetra sessions.", v4, 0xCu);
        MEMORY[0x20BD3C498](v4, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      __break(1u);
    }
  }
}

unint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
      v3 = v2 >= result;
      result = v2 - result;
      if (v3)
        return specialized Array.replaceSubrange<A>(_:with:)(result, v2);
    }
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in TetraSessionStates.makeDefault(_:)(_DWORD *a1, int *a2)
{
  return specialized static TetraSessionState.== infix(_:_:)(a1, a2) & 1;
}

uint64_t TetraSessionStates.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  char v13;
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraSessionStates.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = 0;
  type metadata accessor for TetraSessionState();
  lazy protocol witness table accessor for type TetraSessionState and conformance TetraSessionState(&lazy protocol witness table cache variable for type TetraSessionState and conformance TetraSessionState, (uint64_t)&protocol conformance descriptor for TetraSessionState);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = type metadata accessor for TetraSessionStates();
    v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12 = *(_QWORD *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TetraSessionState]);
    lazy protocol witness table accessor for type [TetraSessionState] and conformance <A> [A](&lazy protocol witness table cache variable for type [TetraSessionState] and conformance <A> [A], &lazy protocol witness table cache variable for type TetraSessionState and conformance TetraSessionState, (uint64_t)&protocol conformance descriptor for TetraSessionState, MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t TetraSessionStates.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;

  v19 = a2;
  v20 = type metadata accessor for TetraSessionState();
  MEMORY[0x24BDAC7A8](v20);
  v21 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraSessionStates.CodingKeys>);
  v4 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TetraSessionStates();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(int *)(v8 + 20);
  v10[v11] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys();
  v22 = v6;
  v12 = (uint64_t)v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v18 = v11;
  v24 = a1;
  v13 = (uint64_t)v10;
  v28 = 0;
  lazy protocol witness table accessor for type TetraSessionState and conformance TetraSessionState(&lazy protocol witness table cache variable for type TetraSessionState and conformance TetraSessionState, (uint64_t)&protocol conformance descriptor for TetraSessionState);
  v14 = (uint64_t)v21;
  v15 = v22;
  v16 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of TetraRatchetState(v14, v13, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionState);
  v27 = 1;
  *(_BYTE *)(v13 + v18) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TetraSessionState]);
  v26 = 2;
  lazy protocol witness table accessor for type [TetraSessionState] and conformance <A> [A](&lazy protocol witness table cache variable for type [TetraSessionState] and conformance <A> [A], &lazy protocol witness table cache variable for type TetraSessionState and conformance TetraSessionState, (uint64_t)&protocol conformance descriptor for TetraSessionState, MEMORY[0x24BEE12D0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v16);
  *(_QWORD *)(v13 + *(int *)(v7 + 24)) = v25;
  outlined init with copy of TetraRatchetOuterMessage(v13, v19, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v24);
  return outlined destroy of TetraRatchetOuterMessage(v13, (uint64_t (*)(_QWORD))type metadata accessor for TetraSessionStates);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraSessionStates.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000015;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x53746C7561666564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraSessionStates.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TetraSessionStates.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraSessionStates.CodingKeys()
{
  lazy protocol witness table accessor for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraSessionStates.CodingKeys()
{
  lazy protocol witness table accessor for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraSessionStates@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraSessionStates.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraSessionStates(_QWORD *a1)
{
  return TetraSessionStates.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraSessionStates.CodingKeys, &unk_24C4BD1C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraSessionStates.CodingKeys, &unk_24C4BD1C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraSessionStates.CodingKeys, &unk_24C4BD1C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraSessionStates.CodingKeys, &unk_24C4BD1C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSessionStates.CodingKeys and conformance TetraSessionStates.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TetraSessionState and conformance TetraSessionState(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for TetraSessionState();
    result = MEMORY[0x20BD3C414](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [TetraSessionState] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TetraSessionState]);
    v10 = lazy protocol witness table accessor for type TetraSessionState and conformance TetraSessionState(a2, a3);
    result = MEMORY[0x20BD3C414](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in TetraSessionStates.hasSessionForEphemeralAndPrekeyHash(_:prekeyHash:)(a1, v1[2], v1[3], v1[4]) & 1;
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t _s17MessageProtection18TetraSessionStatesV11makeDefaultyyAA0cD5StateVFSbAFXEfU_TA_0(_DWORD *a1)
{
  uint64_t v1;

  return specialized static TetraSessionState.== infix(_:_:)(a1, *(int **)(v1 + 16)) & 1;
}

uint64_t storeEnumTagSinglePayload for TetraSessionStates.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20BB2D2A8 + 4 * byte_20BB44165[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20BB2D2DC + 4 * asc_20BB44160[v4]))();
}

uint64_t sub_20BB2D2DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB2D2E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BB2D2ECLL);
  return result;
}

uint64_t sub_20BB2D2F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BB2D300);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20BB2D304(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB2D30C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TetraSessionStates.CodingKeys()
{
  return &unk_24C4BD1C8;
}

uint64_t specialized TetraSessionStates.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x53746C7561666564 && a2 == 0xEE006E6F69737365;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000020BB48D20
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000020BB48D40)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

id HKDF.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id HKDF.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HKDF();
  return objc_msgSendSuper2(&v2, sel_init);
}

id HKDF.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HKDF();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized static HKDF.deriveKeyWith(_:salt:outputSize:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  void (*v12)(_BYTE *, uint64_t);
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  uint64_t v17;

  v3 = type metadata accessor for SymmetricKey();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v15[-v8];
  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v17 = v10;
  SymmetricKey.init<A>(data:)();
  v16 = a2;
  type metadata accessor for SHA256();
  v11 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8];
  type metadata accessor for NSData();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, v11, MEMORY[0x24BDC6AE8]);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type NSData and conformance NSData, (uint64_t (*)(uint64_t))type metadata accessor for NSData, MEMORY[0x24BDD0120]);
  static HKDF.deriveKey<A>(inputKeyMaterial:salt:outputByteCount:)();
  v12 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v12(v7, v3);
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v13 = v16;
  v12(v9, v3);
  return v13;
}

uint64_t type metadata accessor for HKDF()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for LiteSymmetricRatchetErrors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20BB2D884 + 4 * byte_20BB44355[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20BB2D8B8 + 4 * asc_20BB44350[v4]))();
}

uint64_t sub_20BB2D8B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB2D8C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BB2D8C8);
  return result;
}

uint64_t sub_20BB2D8D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BB2D8DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20BB2D8E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB2D8E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LiteSymmetricRatchetErrors()
{
  return &type metadata for LiteSymmetricRatchetErrors;
}

id TetraErrorHelpers.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id TetraErrorHelpers.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraErrorHelpers();
  return objc_msgSendSuper2(&v2, sel_init);
}

id TetraErrorHelpers.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraErrorHelpers();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized static TetraErrorHelpers.fRStringFrom(error:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;

  v0 = (void *)_convertErrorToNSError(_:)();
  v1 = objc_msgSend(v0, sel_domain);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  v3._countAndFlagsBits = 45;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  objc_msgSend(v0, sel_code);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);

  swift_bridgeObjectRelease();
  return v2;
}

uint64_t specialized static TetraErrorHelpers.shouldMarkForStateReset(string:)(void *a1)
{
  void *v2;
  _BYTE *v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  _BYTE *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unsigned int v18;
  void *v19;

  lazy protocol witness table accessor for type TetraAKE and conformance TetraAKE();
  v2 = (void *)swift_allocError();
  *v3 = 1;
  v4 = (void *)_convertErrorToNSError(_:)();
  v5 = objc_msgSend(v4, sel_domain);

  if (!v5)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = (id)MEMORY[0x20BD3B538](v6);
    swift_bridgeObjectRelease();
  }

  lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors();
  v7 = (void *)swift_allocError();
  *v8 = 3;
  v9 = (void *)_convertErrorToNSError(_:)();
  v10 = objc_msgSend(v9, sel_domain);

  if (!v10)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = (id)MEMORY[0x20BD3B538](v11);
    swift_bridgeObjectRelease();
  }

  lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
  v12 = (void *)swift_allocError();
  *v13 = 4;
  v14 = specialized static TetraErrorHelpers.fRStringFrom(error:)();
  v16 = v15;

  LODWORD(v12) = objc_msgSend(a1, sel_containsString_, v5);
  if ((_DWORD)v12)
  {
    swift_bridgeObjectRelease();

    return 1;
  }
  else
  {
    v18 = objc_msgSend(a1, sel_containsString_, v10);

    if (v18)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v19 = (void *)MEMORY[0x20BD3B538](v14, v16);
      swift_bridgeObjectRelease();
      v17 = objc_msgSend(a1, sel_isEqualToString_, v19);

    }
  }
  return (uint64_t)v17;
}

uint64_t type metadata accessor for TetraErrorHelpers()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for TetraGeneralError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_20BB2DD48 + 4 * byte_20BB44455[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_20BB2DD7C + 4 * byte_20BB44450[v4]))();
}

uint64_t sub_20BB2DD7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB2DD84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BB2DD8CLL);
  return result;
}

uint64_t sub_20BB2DD98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BB2DDA0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_20BB2DDA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB2DDAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TetraGeneralError()
{
  return &type metadata for TetraGeneralError;
}

ValueMetadata *type metadata accessor for TetraAKE()
{
  return &type metadata for TetraAKE;
}

uint64_t storeEnumTagSinglePayload for TetraSymmetricRatchetErrors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20BB2DEB0 + 4 * byte_20BB4445A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20BB2DED0 + 4 * byte_20BB4445F[v4]))();
}

_BYTE *sub_20BB2DEB0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20BB2DED0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20BB2DED8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20BB2DEE0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20BB2DEE8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20BB2DEF0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TetraSymmetricRatchetErrors()
{
  return &type metadata for TetraSymmetricRatchetErrors;
}

ValueMetadata *type metadata accessor for TetraCommitmentError()
{
  return &type metadata for TetraCommitmentError;
}

uint64_t storeEnumTagSinglePayload for TetraAKE(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20BB2DF68 + 4 * byte_20BB44469[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20BB2DF9C + 4 * byte_20BB44464[v4]))();
}

uint64_t sub_20BB2DF9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB2DFA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BB2DFACLL);
  return result;
}

uint64_t sub_20BB2DFB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BB2DFC0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20BB2DFC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB2DFCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TetraKeyStorageError()
{
  return &type metadata for TetraKeyStorageError;
}

_QWORD *initializeBufferWithCopyOfBuffer for TetraQueryLookupError(_QWORD *a1, id *a2)
{
  id v3;
  id v4;

  v3 = *a2;
  v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for TetraQueryLookupError(id *a1)
{

}

void **assignWithCopy for TetraQueryLookupError(void **a1, id *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = *a2;
  v4 = *a2;
  v5 = *a1;
  *a1 = v3;

  return a1;
}

void **assignWithTake for TetraQueryLookupError(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for TetraQueryLookupError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TetraQueryLookupError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t getEnumTag for TetraQueryLookupError(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for TetraQueryLookupError(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for TetraQueryLookupError()
{
  return &type metadata for TetraQueryLookupError;
}

unint64_t lazy protocol witness table accessor for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors;
  if (!lazy protocol witness table cache variable for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraSymmetricRatchetErrors, &type metadata for TetraSymmetricRatchetErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors;
  if (!lazy protocol witness table cache variable for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraSymmetricRatchetErrors, &type metadata for TetraSymmetricRatchetErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors);
  }
  return result;
}

void static TetraPBPadding.padMessage(_:)()
{
  uint64_t v0;

  type metadata accessor for TetraPB_TetraInnerMessage(0);
  lazy protocol witness table accessor for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage();
  Message.serializedData(partial:)();
  if (!v0)
    __asm { BR              X10 }
  swift_unexpectedError();
  __break(1u);
  JUMPOUT(0x20BB2E424);
}

unint64_t lazy protocol witness table accessor for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage;
  if (!lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage)
  {
    v1 = type metadata accessor for TetraPB_TetraInnerMessage(255);
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraPB_TetraInnerMessage, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPB_TetraInnerMessage and conformance TetraPB_TetraInnerMessage);
  }
  return result;
}

uint64_t static TetraPBPadding.paddingBytesToAdd(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  if (a1 < 2)
  {
    __break(1u);
    goto LABEL_16;
  }
  v2 = a1 - 1;
  if (!((unint64_t)(a1 - 1) >> 32))
  {
    v3 = 2;
    v4 = 3;
    v5 = 4;
    if (v2 >> 28)
      v5 = 5;
    if (v2 >= 0x200000)
      v4 = v5;
    if (v2 >= 0x4000)
      v3 = v4;
    if (v2 >= 0x80)
      v6 = v3;
    else
      v6 = 1;
    v19 = specialized Data.init(count:)(v6);
    v20 = v7;
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)&v19);
    v17 = (_QWORD *)specialized Data.init(count:)(v2 - v6);
    v18 = v8;
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)&v17);
    if (!v9)
    {
      v10 = (uint64_t)v17;
      v11 = v18;
      v17 = &outlined read-only object #0 of static TetraPBPadding.paddingBytesToAdd(for:);
      v12 = v19;
      v13 = v20;
      outlined copy of Data._Representation(v19, v20);
      specialized Array.append<A>(contentsOf:)(v12, v13);
      outlined copy of Data._Representation(v10, v11);
      specialized Array.append<A>(contentsOf:)(v10, v11);
      if (v17[2] == a1)
      {
        v14 = swift_bridgeObjectRetain();
        v15 = specialized Data.init<A>(_:)(v14);
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v10, v11);
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v12, v13);
        return v15;
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraPBErrors and conformance TetraPBErrors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraPBErrors and conformance TetraPBErrors;
  if (!lazy protocol witness table cache variable for type TetraPBErrors and conformance TetraPBErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraPBErrors, &type metadata for TetraPBErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPBErrors and conformance TetraPBErrors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraPBErrors and conformance TetraPBErrors;
  if (!lazy protocol witness table cache variable for type TetraPBErrors and conformance TetraPBErrors)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraPBErrors, &type metadata for TetraPBErrors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraPBErrors and conformance TetraPBErrors);
  }
  return result;
}

uint64_t closure #1 in static TetraPBPadding.paddingBytesToAdd(for:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;

  if (result)
  {
    if ((a3 & 0x8000000000000000) != 0)
      goto LABEL_11;
    v3 = HIDWORD(a3);
    if (HIDWORD(a3))
      goto LABEL_11;
    do
    {
      if (a3 <= 0x7F && ~result + a2 == v3)
      {
        *(_BYTE *)(result + v3) = a3;
        return result;
      }
      *(_BYTE *)(result + v3) = a3 | 0x80;
      LODWORD(a3) = a3 >> 7;
      ++v3;
    }
    while (!__OFADD__(v3, 1));
    __break(1u);
  }
  __break(1u);
LABEL_11:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_20BB2E80C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = closure #1 in static TetraPBPadding.paddingBytesToAdd(for:)((uint64_t)&v6, (uint64_t)&v6 + BYTE6(a1), v3);
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v2 = v6;
  v2[1] = v5;
  return result;
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  Data.InlineSlice.ensureUniqueReference()();
  v4 = *a1;
  v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = __DataStorage._offset.getter();
  v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = v5 - v4;
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  closure #1 in static TetraPBPadding.paddingBytesToAdd(for:)(v7 + v9, v7 + v9 + v12, a2);
}

uint64_t storeEnumTagSinglePayload for TetraPBErrors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20BB2EAB8 + 4 * byte_20BB448D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20BB2EAD8 + 4 * byte_20BB448D5[v4]))();
}

_BYTE *sub_20BB2EAB8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20BB2EAD8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20BB2EAE0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20BB2EAE8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20BB2EAF0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20BB2EAF8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TetraPBErrors()
{
  return &type metadata for TetraPBErrors;
}

uint64_t specialized BidirectionalCollection.suffix(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (result < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return result;
  }
  if (a2)
    v3 = a3 - a2;
  else
    v3 = 0;
  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(v3, -result, 0, a2, a3);
  if ((v4 & 1) != 0)
    result = 0;
  if (v3 < result)
    goto LABEL_10;
  return result;
}

void specialized BidirectionalCollection.suffix(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x20BB2ED1CLL);
}

uint64_t static PaddySymmetricLayer.seal(_:authenticatedData:using:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v38 = a3;
  v39 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AES.GCM.Nonce?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AES.GCM.SealedBox();
  v35 = *(_QWORD *)(v11 - 8);
  v36 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, nonce: AES.GCM.Nonce));
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v34 - v19;
  v21 = (char *)&v34 + *(int *)(v18 + 48) - v19;
  static PaddySymmetricLayer.deriveSymmetricKeyingFromMessageKey(_:)((uint64_t)&v34 - v19, (uint64_t)v21, a5);
  v42 = a1;
  v43 = a2;
  v22 = &v17[*(int *)(v14 + 48)];
  v23 = type metadata accessor for SymmetricKey();
  v37 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v17, v20, v23);
  v24 = type metadata accessor for AES.GCM.Nonce();
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v21, v24);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v10, v22, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v24);
  v40 = v38;
  v41 = v39;
  lazy protocol witness table accessor for type Data and conformance Data();
  v26 = v44;
  static AES.GCM.seal<A, B>(_:using:nonce:authenticating:)();
  outlined destroy of TetraSessionStates?((uint64_t)v10, &demangling cache variable for type metadata for AES.GCM.Nonce?);
  if (v26)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v20, &demangling cache variable for type metadata for (key: SymmetricKey, nonce: AES.GCM.Nonce));
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v17, v23);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v37 + 8))(v17, v23);
    v28 = AES.GCM.SealedBox.ciphertext.getter();
    v30 = v29;
    v31 = AES.GCM.SealedBox.tag.getter();
    v33 = v32;
    v42 = v28;
    v43 = v30;
    outlined copy of Data._Representation(v28, v30);
    specialized Data.append<A>(contentsOf:)(v31, v33);
    outlined consume of Data._Representation(v31, v33);
    outlined consume of Data._Representation(v28, v30);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v36);
    outlined destroy of TetraSessionStates?((uint64_t)v20, &demangling cache variable for type metadata for (key: SymmetricKey, nonce: AES.GCM.Nonce));
    return v42;
  }
}

void static PaddySymmetricLayer.open(_:authenticatedData:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[16];

  v9[4] = a4;
  v9[3] = a3;
  v5 = type metadata accessor for AES.GCM.SealedBox();
  MEMORY[0x24BDAC7A8](v5);
  v9[15] = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, nonce: AES.GCM.Nonce));
  v8 = MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  __asm { BR              X9 }
}

uint64_t sub_20BB2F10C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (BYTE6(v7) < 0x11uLL)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x20BB2F364);
  }
  *(_QWORD *)(v9 - 184) = v5;
  *(_QWORD *)(v9 - 176) = v0;
  v10 = v4 + *(int *)(v3 + 48);
  static PaddySymmetricLayer.deriveSymmetricKeyingFromMessageKey(_:)(v4, v10, v2);
  v11 = v6 + *(int *)(v3 + 48);
  v12 = type metadata accessor for SymmetricKey();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v6, v4, v12);
  v14 = type metadata accessor for AES.GCM.Nonce();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v11, v10, v14);
  if (!v1)
  {
    v15 = BYTE6(v7);
    goto LABEL_9;
  }
  if (v1 != 1)
  {
    v17 = *(_QWORD *)(v8 + 16);
    v16 = *(_QWORD *)(v8 + 24);
    v15 = v16 - v17;
    if (!__OFSUB__(v16, v17))
      goto LABEL_8;
    goto LABEL_16;
  }
  if (__OFSUB__(HIDWORD(v8), (_DWORD)v8))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15 = HIDWORD(v8) - (int)v8;
LABEL_8:
  outlined copy of Data._Representation(v8, v7);
LABEL_9:
  if (__OFSUB__(v15, 16))
  {
    __break(1u);
    JUMPOUT(0x20BB2F350);
  }
  specialized Collection.prefix(_:)(v15 - 16, v8, v7);
  *(_OWORD *)(v9 - 112) = *(_OWORD *)(v9 - 96);
  outlined copy of Data._Representation(v8, v7);
  specialized BidirectionalCollection.suffix(_:)(16, v8, v7);
  *(_OWORD *)(v9 - 144) = *(_OWORD *)(v9 - 128);
  lazy protocol witness table accessor for type Data and conformance Data();
  v18 = *(_QWORD *)(v9 - 72);
  v19 = *(_QWORD *)(v9 - 152);
  AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)();
  if (v19)
  {
    outlined destroy of TetraSessionStates?(v4, &demangling cache variable for type metadata for (key: SymmetricKey, nonce: AES.GCM.Nonce));
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v6, v12);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v6, v12);
    v20 = *(_QWORD *)(v9 - 160);
    *(_QWORD *)(v9 - 96) = *(_QWORD *)(v9 - 168);
    *(_QWORD *)(v9 - 88) = v20;
    v12 = static AES.GCM.open<A>(_:using:authenticating:)();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v9 - 184) + 8))(v18, *(_QWORD *)(v9 - 176));
    outlined destroy of TetraSessionStates?(v4, &demangling cache variable for type metadata for (key: SymmetricKey, nonce: AES.GCM.Nonce));
  }
  return v12;
}

uint64_t one-time initialization function for paddyKDFStringPrefix()
{
  uint64_t result;
  uint64_t v1;

  result = specialized Data.init<A>(_:)(0xD00000000000001ALL, 0x800000020BB48E40);
  paddyKDFStringPrefix = result;
  *(_QWORD *)algn_25472E328 = v1;
  return result;
}

uint64_t one-time initialization function for paddySymmetricAESKeyDST(uint64_t a1)
{
  return one-time initialization function for paddySymmetricAESKeyDST(a1, 0xEB0000000079654BLL, (uint64_t *)&paddySymmetricAESKeyDST, (unint64_t *)&paddySymmetricAESKeyDST + 1);
}

uint64_t one-time initialization function for paddySymmetricAESNonceDST(uint64_t a1)
{
  return one-time initialization function for paddySymmetricAESKeyDST(a1, 0xED000065636E6F4ELL, (uint64_t *)&paddySymmetricAESNonceDST, (unint64_t *)&paddySymmetricAESNonceDST + 1);
}

uint64_t one-time initialization function for paddySymmetricAESKeyDST(uint64_t a1, unint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (one-time initialization token for paddyKDFStringPrefix != -1)
    swift_once();
  v7 = paddyKDFStringPrefix;
  v8 = *(_QWORD *)algn_25472E328;
  outlined copy of Data._Representation(paddyKDFStringPrefix, *(unint64_t *)algn_25472E328);
  v9 = specialized Data.init<A>(_:)(0x2D4D43472D534541, a2);
  v11 = v10;
  *a3 = v7;
  *a4 = v8;
  outlined copy of Data._Representation(v7, v8);
  outlined copy of Data._Representation(v9, v11);
  specialized Data.append<A>(contentsOf:)(v9, v11);
  outlined consume of Data._Representation(v9, v11);
  outlined consume of Data._Representation(v9, v11);
  return outlined consume of Data._Representation(v7, v8);
}

uint64_t static PaddySymmetricLayer.deriveSymmetricKeyingFromMessageKey(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  __int128 v21;

  v5 = type metadata accessor for SymmetricKey();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v18 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v18 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v18 - v13, a3, v5);
  v15 = SymmetricKey.bitCount.getter();
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v14, v5);
  if (v15 == 256)
  {
    v19 = v16;
    v20 = a1;
    if (one-time initialization token for paddySymmetricAESKeyDST == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v21 = paddySymmetricAESKeyDST;
  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC63E0], MEMORY[0x24BDC6398]);
  lazy protocol witness table accessor for type Data and conformance Data();
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  if (one-time initialization token for paddySymmetricAESNonceDST != -1)
    swift_once();
  v21 = paddySymmetricAESNonceDST;
  static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
  type metadata accessor for AES.GCM.Nonce();
  SymmetricKey.withUnsafeBytes<A>(_:)();
  v19(v9, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v20, v12, v5);
}

uint64_t closure #1 in static PaddySymmetricLayer.deriveSymmetricKeyingFromMessageKey(_:)()
{
  uint64_t v0;
  uint64_t result;

  lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  result = AES.GCM.Nonce.init<A>(data:)();
  if (v0)
  {
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    result = MEMORY[0x20BD3C414](MEMORY[0x24BDCFB88], MEMORY[0x24BEE0F88]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }
  return result;
}

void I2OSP(value:outputByteCount:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  _QWORD v14[2];

  if (a1 < 0 || (v3 = a2 - 1, a2 < 1))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (a1 <= 1)
    v4 = 1;
  else
    v4 = a1;
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    goto LABEL_27;
  v7 = ceil(log2((double)v6) * 0.125);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v8 = (uint64_t)v7;
  if ((uint64_t)v7 > a2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v14[0] = specialized Data.init(count:)(a2);
  v14[1] = v9;
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)v14);
  if (__OFSUB__(a2, v8))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (a2 - v8 < a2)
  {
    v10 = -v8;
    while (1)
    {
      v11 = a2 + v10;
      if (__OFSUB__(v3, a2 + v10))
        break;
      if ((unint64_t)(v3 - (a2 + v10) - 0x1000000000000000) >> 61 != 7)
        goto LABEL_25;
      v13 = __CFADD__(v10++, 1);
      Data._Representation.subscript.setter();
      if (v13)
        return;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        return;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_33:
  __break(1u);
}

void TetraMessageSignerFormatter.init(message:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  char *v6;
  int __src;
  _BYTE v8[40];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Kyber768.PublicKey?);
  v4 = MEMORY[0x24BDAC7A8](v3);
  MEMORY[0x24BDAC7A8](v4);
  __src = *(_DWORD *)(a1 + 24);
  v5 = v1;
  specialized Data.InlineData.init(_:)(&__src, v8);
  v6 = (char *)&loc_20BB2FA58
     + *((int *)qword_20BB30308
       + (*(_QWORD *)(a1 + *(int *)(type metadata accessor for TetraRatchetOuterMessage() + 48) + 8) >> 62));
  __asm { BR              X10 }
}

uint64_t sub_20BB2FA68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;

  *(_QWORD *)(v7 - 216) = v0;
  I2OSP(value:outputByteCount:)(BYTE6(v4), 4);
  v9 = v8;
  v11 = v10;
  *(_QWORD *)(v7 - 112) = v8;
  *(_QWORD *)(v7 - 104) = v10;
  outlined copy of Data._Representation(v2, v4);
  outlined copy of Data._Representation(v9, v11);
  specialized Data.append<A>(contentsOf:)(v2, v4);
  outlined consume of Data._Representation(v2, v4);
  v12 = outlined consume of Data._Representation(v9, v11);
  v13 = *(_QWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 200) = v5;
  *(_QWORD *)(v7 - 192) = v13;
  v14 = (uint64_t *)(*(_QWORD *)(v7 - 160) + *(int *)(*(_QWORD *)(v7 - 168) + 40));
  v15 = *v14;
  v16 = v14[1];
  *(_QWORD *)(v7 - 208) = v6;
  if (v16 >> 60 != 15)
    return ((uint64_t (*)(uint64_t))((char *)&loc_20BB2FB2C + *((int *)qword_20BB30318 + (v16 >> 62))))(v12);
  I2OSP(value:outputByteCount:)(0, 2);
  v19 = v18;
  v21 = v20;
  *(_QWORD *)(v7 - 112) = v18;
  *(_QWORD *)(v7 - 104) = v20;
  outlined copy of Data?(v15, v16);
  outlined copy of Data._Representation(v19, v21);
  outlined copy of Data._Representation(0, 0xC000000000000000);
  specialized Data.append<A>(contentsOf:)(0, 0xC000000000000000);
  outlined consume of Data._Representation(0, 0xC000000000000000);
  outlined consume of Data._Representation(0, 0xC000000000000000);
  outlined consume of Data._Representation(v19, v21);
  v22 = *(_QWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 184) = *(_QWORD *)(v7 - 104);
  *(_QWORD *)(v7 - 176) = v22;
  v23 = *(_QWORD *)(v7 - 160);
  v24 = v23 + *(int *)(*(_QWORD *)(v7 - 168) + 32);
  outlined init with copy of Kyber768.PublicKey?(v24, v1);
  v25 = type metadata accessor for Kyber768.PublicKey();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
  if (v27(v1, 1, v25) == 1)
  {
    outlined destroy of Kyber768.PublicKey?(v1);
    I2OSP(value:outputByteCount:)(0, 4);
    v32 = v31;
    v34 = v33;
    outlined init with copy of Kyber768.PublicKey?(v24, v3);
    if (v27(v3, 1, v25) == 1)
    {
      outlined destroy of Kyber768.PublicKey?(v3);
      v35 = 0;
      v36 = 0xC000000000000000;
    }
    else
    {
      v35 = Kyber768.PublicKey.dataRepresentation.getter();
      v36 = v37;
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v3, v25);
    }
    *(_QWORD *)(v7 - 128) = v32;
    *(_QWORD *)(v7 - 120) = v34;
    outlined copy of Data._Representation(v32, v34);
    outlined copy of Data._Representation(v35, v36);
    specialized Data.append<A>(contentsOf:)(v35, v36);
    outlined consume of Data._Representation(v35, v36);
    outlined consume of Data._Representation(v35, v36);
    v38 = outlined consume of Data._Representation(v32, v34);
    v39 = *(_QWORD *)(v7 - 128);
    v40 = *(_QWORD *)(v7 - 120);
    v41 = (uint64_t *)(v23 + *(int *)(*(_QWORD *)(v7 - 168) + 36));
    v43 = *v41;
    v42 = v41[1];
    if (v42 >> 60 == 15)
    {
      I2OSP(value:outputByteCount:)(0, 4);
      v45 = v44;
      v47 = v46;
      *(_QWORD *)(v7 - 112) = v39;
      *(_QWORD *)(v7 - 104) = v40;
      outlined copy of Data._Representation(v39, v40);
      specialized Data.append<A>(contentsOf:)(v45, v47);
      outlined consume of Data._Representation(v45, v47);
      outlined consume of Data._Representation(v39, v40);
      v48 = *(_QWORD *)(v7 - 112);
      v49 = *(_QWORD *)(v7 - 104);
      *(_QWORD *)(v7 - 128) = v48;
      *(_QWORD *)(v7 - 120) = v49;
      outlined copy of Data._Representation(v48, v49);
      outlined copy of Data._Representation(0, 0xC000000000000000);
      outlined copy of Data?(v43, v42);
      specialized Data.append<A>(contentsOf:)(0, 0xC000000000000000);
      outlined consume of Data._Representation(0, 0xC000000000000000);
      outlined consume of Data._Representation(0, 0xC000000000000000);
      outlined consume of Data._Representation(v48, v49);
      v50 = *(_QWORD *)(v7 - 128);
      v51 = *(_QWORD *)(v7 - 120);
      *(_QWORD *)(v7 - 112) = v50;
      *(_QWORD *)(v7 - 104) = v51;
      outlined copy of Data._Representation(v50, v51);
      v53 = *(_QWORD *)(v7 - 184);
      v52 = *(_QWORD *)(v7 - 176);
      outlined copy of Data._Representation(v52, v53);
      specialized Data.append<A>(contentsOf:)(v52, v53);
      outlined consume of Data._Representation(v52, v53);
      outlined consume of Data._Representation(v50, v51);
      v54 = specialized Data.init<A>(_:)(0xD000000000000020, 0x800000020BB48EE0);
      v56 = v55;
      v57 = *(unsigned int **)(v7 - 160);
      I2OSP(value:outputByteCount:)(*v57, 4);
      v59 = v58;
      v61 = v60;
      *(_QWORD *)(v7 - 128) = v54;
      *(_QWORD *)(v7 - 120) = v56;
      outlined copy of Data._Representation(v54, v56);
      specialized Data.append<A>(contentsOf:)(v59, v61);
      outlined consume of Data._Representation(v59, v61);
      outlined consume of Data._Representation(v54, v56);
      return ((uint64_t (*)(_QWORD))((char *)&loc_20BB2FFCC
                                             + *((int *)qword_20BB30348 + (*((_QWORD *)v57 + 2) >> 62))))(0);
    }
    else
    {
      return ((uint64_t (*)(uint64_t))((char *)&loc_20BB2FDE8 + *((int *)qword_20BB30338 + (v42 >> 62))))(v38);
    }
  }
  else
  {
    Kyber768.PublicKey.dataRepresentation.getter();
    v29 = v28;
    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v1, v25);
    return ((uint64_t (*)(uint64_t))((char *)&loc_20BB2FC80 + *((int *)qword_20BB30328 + (v29 >> 62))))(v30);
  }
}

id sub_20BB2FFDC()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  id v39;

  *(_QWORD *)(v8 - 224) = v3;
  I2OSP(value:outputByteCount:)(BYTE6(v4), 4);
  v10 = v9;
  v11 = v7;
  v13 = v12;
  *(_QWORD *)(v8 - 112) = v5;
  *(_QWORD *)(v8 - 104) = v6;
  outlined copy of Data._Representation(v5, v6);
  specialized Data.append<A>(contentsOf:)(v10, v13);
  outlined consume of Data._Representation(v10, v13);
  outlined consume of Data._Representation(v5, v6);
  v14 = *(_QWORD *)(v8 - 112);
  v15 = *(_QWORD *)(v8 - 104);
  *(_QWORD *)(v8 - 128) = v14;
  *(_QWORD *)(v8 - 120) = v15;
  outlined copy of Data._Representation(v2, v4);
  outlined copy of Data._Representation(v14, v15);
  specialized Data.append<A>(contentsOf:)(v2, v4);
  outlined consume of Data._Representation(v2, v4);
  outlined consume of Data._Representation(v14, v15);
  v16 = *(_QWORD *)(v8 - 128);
  v17 = *(_QWORD *)(v8 - 120);
  *(_QWORD *)(v8 - 112) = v16;
  *(_QWORD *)(v8 - 104) = v17;
  outlined copy of Data._Representation(v16, v17);
  v18 = *(_QWORD *)(v8 - 192);
  outlined copy of Data._Representation(v18, v0);
  specialized Data.append<A>(contentsOf:)(v18, v0);
  outlined consume of Data._Representation(v18, v0);
  outlined consume of Data._Representation(v16, v17);
  v19 = *(_QWORD *)(v8 - 112);
  v20 = *(_QWORD *)(v8 - 104);
  v21 = (uint64_t *)(v11 + *(int *)(*(_QWORD *)(v8 - 168) + 44));
  v22 = *v21;
  v23 = v21[1];
  *(_QWORD *)(v8 - 128) = v19;
  *(_QWORD *)(v8 - 120) = v20;
  outlined copy of Data._Representation(v22, v23);
  outlined copy of Data._Representation(v19, v20);
  specialized Data.append<A>(contentsOf:)(v22, v23);
  outlined consume of Data._Representation(v22, v23);
  outlined consume of Data._Representation(v19, v20);
  v24 = *(_QWORD *)(v8 - 128);
  v25 = *(_QWORD *)(v8 - 120);
  v26 = P256.KeyAgreement.PublicKey.compactRepresentation.getter();
  if (v27 >> 60 == 15)
    __break(1u);
  v28 = v26;
  v29 = v27;
  v30 = *(_QWORD *)(v8 - 216) & 0xFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v8 - 112) = v24;
  *(_QWORD *)(v8 - 104) = v25;
  outlined copy of Data._Representation(v24, v25);
  specialized Data.append<A>(contentsOf:)(v28, v29);
  outlined consume of Data?(v28, v29);
  outlined consume of Data._Representation(v24, v25);
  v31 = *(_QWORD *)(v8 - 112);
  v32 = *(_QWORD *)(v8 - 104);
  *(_QWORD *)(v8 - 128) = v31;
  *(_QWORD *)(v8 - 120) = v32;
  outlined copy of Data._Representation(v31, v32);
  v33 = *(_QWORD *)(v8 - 208);
  outlined copy of Data._Representation(v33, v30);
  specialized Data.append<A>(contentsOf:)(v33, v30);
  outlined consume of Data._Representation(v33, v30);
  outlined consume of Data._Representation(v31, v32);
  v34 = *(_QWORD *)(v8 - 128);
  v35 = *(_QWORD *)(v8 - 120);
  *(_QWORD *)(v8 - 112) = v34;
  *(_QWORD *)(v8 - 104) = v35;
  outlined copy of Data._Representation(v34, v35);
  v36 = *(_QWORD *)(v8 - 224);
  outlined copy of Data._Representation(v36, v1);
  specialized Data.append<A>(contentsOf:)(v36, v1);
  outlined consume of Data._Representation(v36, v1);
  outlined consume of Data._Representation(*(_QWORD *)(v8 - 176), *(_QWORD *)(v8 - 184));
  outlined consume of Data._Representation(v18, v0);
  outlined consume of Data._Representation(v33, v30);
  outlined consume of Data._Representation(v34, v35);
  outlined consume of Data._Representation(v36, v1);
  v37 = *(char **)(v8 - 200);
  *(_OWORD *)&v37[OBJC_IVAR____TtC17MessageProtection27TetraMessageSignerFormatter__signedData] = *(_OWORD *)(v8 - 112);

  v38 = type metadata accessor for TetraMessageSignerFormatter();
  *(_QWORD *)(v8 - 152) = v37;
  *(_QWORD *)(v8 - 144) = v38;
  v39 = objc_msgSendSuper2((objc_super *)(v8 - 152), sel_init);
  outlined destroy of TetraRatchetOuterMessage(*(_QWORD *)(v8 - 160));
  return v39;
}

uint64_t TetraMessageSignerFormatter.signedData()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17MessageProtection27TetraMessageSignerFormatter__signedData);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + OBJC_IVAR____TtC17MessageProtection27TetraMessageSignerFormatter__signedData + 8));
  return v1;
}

id TetraMessageSignerFormatter.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void TetraMessageSignerFormatter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id TetraMessageSignerFormatter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraMessageSignerFormatter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TetraMessageSignerFormatter()
{
  return objc_opt_self();
}

uint64_t outlined destroy of TetraRatchetOuterMessage(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TetraRatchetOuterMessage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraKEM768Key(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  id v26;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Kyber768.PrivateKey();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v17 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v12, v13, v17);
      v18 = *(int *)(v14 + 20);
      v19 = (uint64_t *)&v12[v18];
      v20 = (uint64_t *)&v13[v18];
      v21 = *v20;
      v22 = v20[1];
      outlined copy of Data._Representation(*v20, v22);
      *v19 = v21;
      v19[1] = v22;
      v23 = *(int *)(v14 + 24);
      v24 = *(void **)&v13[v23];
      *(_QWORD *)&v12[v23] = v24;
      v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56);
      v26 = v24;
      v25(v12, 0, 1, v14);
    }
  }
  return a1;
}

void destroy for TetraKEM768Key(uint64_t a1, uint64_t a2)
{
  destroy for TetraKEM768Key(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6BE0], type metadata accessor for SecureEnclave.Kyber768.PrivateKey, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C08]);
}

char *initializeWithCopy for TetraKEM768Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);
  id v24;

  v6 = type metadata accessor for Kyber768.PrivateKey();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v10, v11, v15);
    v16 = *(int *)(v12 + 20);
    v17 = (uint64_t *)&v10[v16];
    v18 = (uint64_t *)&v11[v16];
    v19 = *v18;
    v20 = v18[1];
    outlined copy of Data._Representation(*v18, v20);
    *v17 = v19;
    v17[1] = v20;
    v21 = *(int *)(v12 + 24);
    v22 = *(void **)&v11[v21];
    *(_QWORD *)&v10[v21] = v22;
    v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56);
    v24 = v22;
    v23(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithCopy for TetraKEM768Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void (*v28)(char *, _QWORD, uint64_t, uint64_t);
  id v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;

  v6 = type metadata accessor for Kyber768.PrivateKey();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v32 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 24))(v13, v14, v32);
      v33 = *(int *)(v15 + 20);
      v34 = (uint64_t *)&v13[v33];
      v35 = (uint64_t *)&v14[v33];
      v36 = *v35;
      v37 = v35[1];
      outlined copy of Data._Representation(*v35, v37);
      v38 = *v34;
      v39 = v34[1];
      *v34 = v36;
      v34[1] = v37;
      outlined consume of Data._Representation(v38, v39);
      v40 = *(int *)(v15 + 24);
      v41 = *(void **)&v14[v40];
      v42 = *(void **)&v13[v40];
      *(_QWORD *)&v13[v40] = v41;
      v43 = v41;

      return a1;
    }
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v13, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    return a1;
  }
  v20 = type metadata accessor for Kyber768.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v13, v14, v20);
  v21 = *(int *)(v15 + 20);
  v22 = (uint64_t *)&v13[v21];
  v23 = (uint64_t *)&v14[v21];
  v24 = *v23;
  v25 = v23[1];
  outlined copy of Data._Representation(*v23, v25);
  *v22 = v24;
  v22[1] = v25;
  v26 = *(int *)(v15 + 24);
  v27 = *(void **)&v14[v26];
  *(_QWORD *)&v13[v26] = v27;
  v28 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  v29 = v27;
  v28(v13, 0, 1, v15);
  return a1;
}

char *initializeWithTake for TetraKEM768Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for Kyber768.PrivateKey();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v10, v11, v15);
    *(_OWORD *)&v10[*(int *)(v12 + 20)] = *(_OWORD *)&v11[*(int *)(v12 + 20)];
    *(_QWORD *)&v10[*(int *)(v12 + 24)] = *(_QWORD *)&v11[*(int *)(v12 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for TetraKEM768Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;

  v6 = type metadata accessor for Kyber768.PrivateKey();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v23 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v13, v14, v23);
      v24 = *(int *)(v15 + 20);
      v25 = *(_QWORD *)&v13[v24];
      v26 = *(_QWORD *)&v13[v24 + 8];
      *(_OWORD *)&v13[v24] = *(_OWORD *)&v14[v24];
      outlined consume of Data._Representation(v25, v26);
      v27 = *(int *)(v15 + 24);
      v28 = *(void **)&v13[v27];
      *(_QWORD *)&v13[v27] = *(_QWORD *)&v14[v27];

      return a1;
    }
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v13, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  v20 = type metadata accessor for Kyber768.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v13, v14, v20);
  *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
  *(_QWORD *)&v13[*(int *)(v15 + 24)] = *(_QWORD *)&v14[*(int *)(v15 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraKEM768Key()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB30E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, &demangling cache variable for type metadata for Kyber768.PrivateKey?, &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
}

uint64_t storeEnumTagSinglePayload for TetraKEM768Key()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB30E30(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, &demangling cache variable for type metadata for Kyber768.PrivateKey?, &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
}

uint64_t type metadata accessor for TetraKEM768Key(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraKEM768Key);
}

void type metadata completion function for TetraKEM768Key(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for TetraKEM768Key(a1, a2, a3, &lazy cache variable for type metadata for Kyber768.PrivateKey?, (void (*)(uint64_t))MEMORY[0x24BDC6BE0], &lazy cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?, (void (*)(uint64_t))type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraKEM1024Key(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);
  id v26;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Kyber1024.PrivateKey();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v17 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v12, v13, v17);
      v18 = *(int *)(v14 + 20);
      v19 = (uint64_t *)&v12[v18];
      v20 = (uint64_t *)&v13[v18];
      v21 = *v20;
      v22 = v20[1];
      outlined copy of Data._Representation(*v20, v22);
      *v19 = v21;
      v19[1] = v22;
      v23 = *(int *)(v14 + 24);
      v24 = *(void **)&v13[v23];
      *(_QWORD *)&v12[v23] = v24;
      v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56);
      v26 = v24;
      v25(v12, 0, 1, v14);
    }
  }
  return a1;
}

void destroy for TetraKEM1024Key(uint64_t a1, uint64_t a2)
{
  destroy for TetraKEM768Key(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C40], type metadata accessor for SecureEnclave.Kyber1024.PrivateKey, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6C68]);
}

void destroy for TetraKEM768Key(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v9 = a3(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  v11 = a1 + *(int *)(a2 + 20);
  v12 = a4(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v13 = a5(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
    outlined consume of Data._Representation(*(_QWORD *)(v11 + *(int *)(v12 + 20)), *(_QWORD *)(v11 + *(int *)(v12 + 20) + 8));

  }
}

char *initializeWithCopy for TetraKEM1024Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(char *, _QWORD, uint64_t, uint64_t);
  id v24;

  v6 = type metadata accessor for Kyber1024.PrivateKey();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v10, v11, v15);
    v16 = *(int *)(v12 + 20);
    v17 = (uint64_t *)&v10[v16];
    v18 = (uint64_t *)&v11[v16];
    v19 = *v18;
    v20 = v18[1];
    outlined copy of Data._Representation(*v18, v20);
    *v17 = v19;
    v17[1] = v20;
    v21 = *(int *)(v12 + 24);
    v22 = *(void **)&v11[v21];
    *(_QWORD *)&v10[v21] = v22;
    v23 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56);
    v24 = v22;
    v23(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithCopy for TetraKEM1024Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void (*v28)(char *, _QWORD, uint64_t, uint64_t);
  id v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;

  v6 = type metadata accessor for Kyber1024.PrivateKey();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v32 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 24))(v13, v14, v32);
      v33 = *(int *)(v15 + 20);
      v34 = (uint64_t *)&v13[v33];
      v35 = (uint64_t *)&v14[v33];
      v36 = *v35;
      v37 = v35[1];
      outlined copy of Data._Representation(*v35, v37);
      v38 = *v34;
      v39 = v34[1];
      *v34 = v36;
      v34[1] = v37;
      outlined consume of Data._Representation(v38, v39);
      v40 = *(int *)(v15 + 24);
      v41 = *(void **)&v14[v40];
      v42 = *(void **)&v13[v40];
      *(_QWORD *)&v13[v40] = v41;
      v43 = v41;

      return a1;
    }
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v13, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    return a1;
  }
  v20 = type metadata accessor for Kyber1024.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v13, v14, v20);
  v21 = *(int *)(v15 + 20);
  v22 = (uint64_t *)&v13[v21];
  v23 = (uint64_t *)&v14[v21];
  v24 = *v23;
  v25 = v23[1];
  outlined copy of Data._Representation(*v23, v25);
  *v22 = v24;
  v22[1] = v25;
  v26 = *(int *)(v15 + 24);
  v27 = *(void **)&v14[v26];
  *(_QWORD *)&v13[v26] = v27;
  v28 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56);
  v29 = v27;
  v28(v13, 0, 1, v15);
  return a1;
}

char *initializeWithTake for TetraKEM1024Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for Kyber1024.PrivateKey();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v10, v11, v15);
    *(_OWORD *)&v10[*(int *)(v12 + 20)] = *(_OWORD *)&v11[*(int *)(v12 + 20)];
    *(_QWORD *)&v10[*(int *)(v12 + 24)] = *(_QWORD *)&v11[*(int *)(v12 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for TetraKEM1024Key(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;

  v6 = type metadata accessor for Kyber1024.PrivateKey();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v23 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v13, v14, v23);
      v24 = *(int *)(v15 + 20);
      v25 = *(_QWORD *)&v13[v24];
      v26 = *(_QWORD *)&v13[v24 + 8];
      *(_OWORD *)&v13[v24] = *(_OWORD *)&v14[v24];
      outlined consume of Data._Representation(v25, v26);
      v27 = *(int *)(v15 + 24);
      v28 = *(void **)&v13[v27];
      *(_QWORD *)&v13[v27] = *(_QWORD *)&v14[v27];

      return a1;
    }
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v13, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  v20 = type metadata accessor for Kyber1024.PublicKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v13, v14, v20);
  *(_OWORD *)&v13[*(int *)(v15 + 20)] = *(_OWORD *)&v14[*(int *)(v15 + 20)];
  *(_QWORD *)&v13[*(int *)(v15 + 24)] = *(_QWORD *)&v14[*(int *)(v15 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraKEM1024Key()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB3186C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, &demangling cache variable for type metadata for Kyber1024.PrivateKey?, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
}

uint64_t storeEnumTagSinglePayload for TetraKEM1024Key()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB3188C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, &demangling cache variable for type metadata for Kyber1024.PrivateKey?, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
}

uint64_t type metadata accessor for TetraKEM1024Key(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraKEM1024Key);
}

void type metadata completion function for TetraKEM1024Key(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for TetraKEM768Key(a1, a2, a3, &lazy cache variable for type metadata for Kyber1024.PrivateKey?, (void (*)(uint64_t))MEMORY[0x24BDC6C40], &lazy cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?, (void (*)(uint64_t))type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
}

void type metadata completion function for TetraKEM768Key(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t), unint64_t *a6, void (*a7)(uint64_t))
{
  unint64_t v9;
  unint64_t v10;

  type metadata accessor for Kyber768.PublicKey?(319, a4, a5);
  if (v9 <= 0x3F)
  {
    type metadata accessor for Kyber768.PublicKey?(319, a6, a7);
    if (v10 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t TetraKEM1024Key.publicKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TetraKEM1024Key(0);
  outlined init with copy of TetraSessionStates?(v1 + *(int *)(v13 + 20), (uint64_t)v8, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v8, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    outlined init with copy of TetraSessionStates?(v1, (uint64_t)v5, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    v14 = type metadata accessor for Kyber1024.PrivateKey();
    v15 = *(_QWORD *)(v14 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v5, 1, v14);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      Kyber1024.PrivateKey.publicKey.getter();
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v5, v14);
    }
  }
  else
  {
    outlined init with take of TetraRatchetState((uint64_t)v8, (uint64_t)v12, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
    v17 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, v12, v17);
    return outlined destroy of TetraRatchetOuterMessage((uint64_t)v12, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
  }
  return result;
}

uint64_t TetraKEM1024Key.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16[24];
  ValueMetadata *v17;
  unint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (one-time initialization token for SEPisAvailable != -1)
    swift_once();
  if (static MPStaticProperties.SEPisAvailable == 1
    && (v17 = &type metadata for MessageProtectionFeatureFlags,
        v18 = lazy protocol witness table accessor for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags(),
        v16[0] = 1,
        v9 = isFeatureEnabled(_:)(),
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v16),
        (v9 & 1) != 0))
  {
    result = SecureEnclave.Kyber1024.PrivateKey.init()((uint64_t)v8);
    if (v1)
      return result;
    v11 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 0, 1, v11);
    v12 = type metadata accessor for TetraKEM1024Key(0);
    outlined init with take of KEM.EncapsulationResult?((uint64_t)v8, a1 + *(int *)(v12 + 20), &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    v13 = type metadata accessor for Kyber1024.PrivateKey();
  }
  else
  {
    result = static Kyber1024.PrivateKey.generate()();
    if (v1)
      return result;
    v14 = type metadata accessor for Kyber1024.PrivateKey();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v5, 0, 1, v14);
    outlined init with take of KEM.EncapsulationResult?((uint64_t)v5, a1, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    a1 += *(int *)(type metadata accessor for TetraKEM1024Key(0) + 20);
    v13 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
}

uint64_t TetraKEM1024Key.decapsulate(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[6];

  v19[1] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TetraKEM1024Key(0);
  outlined init with copy of TetraSessionStates?(v1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v7, &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    outlined init with copy of TetraSessionStates?(v1, (uint64_t)v4, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    v13 = type metadata accessor for Kyber1024.PrivateKey();
    v14 = *(_QWORD *)(v13 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      Kyber1024.PrivateKey.decapsulate(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v4, v13);
    }
  }
  else
  {
    outlined init with take of TetraRatchetState((uint64_t)v7, (uint64_t)v11, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
    v16 = v19[5];
    v17 = closure #1 in SecureEnclave.Kyber768.PrivateKey.decapsulate(_:)(*(void **)&v11[*(int *)(v8 + 24)]);
    if (!v16)
    {
      v19[2] = v17;
      v19[3] = v18;
      SymmetricKey.init<A>(data:)();
    }
    return outlined destroy of TetraRatchetOuterMessage((uint64_t)v11, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
  }
  return result;
}

uint64_t TetraKEM768Key.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16[24];
  ValueMetadata *v17;
  unint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (one-time initialization token for SEPisAvailable != -1)
    swift_once();
  if (static MPStaticProperties.SEPisAvailable == 1
    && (v17 = &type metadata for MessageProtectionFeatureFlags,
        v18 = lazy protocol witness table accessor for type MessageProtectionFeatureFlags and conformance MessageProtectionFeatureFlags(),
        v16[0] = 2,
        v9 = isFeatureEnabled(_:)(),
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v16),
        (v9 & 1) != 0))
  {
    result = SecureEnclave.Kyber768.PrivateKey.init()((uint64_t)v8);
    if (v1)
      return result;
    v11 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 0, 1, v11);
    v12 = type metadata accessor for TetraKEM768Key(0);
    outlined init with take of KEM.EncapsulationResult?((uint64_t)v8, a1 + *(int *)(v12 + 20), &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    v13 = type metadata accessor for Kyber768.PrivateKey();
  }
  else
  {
    result = static Kyber768.PrivateKey.generate()();
    if (v1)
      return result;
    v14 = type metadata accessor for Kyber768.PrivateKey();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v5, 0, 1, v14);
    outlined init with take of KEM.EncapsulationResult?((uint64_t)v5, a1, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
    a1 += *(int *)(type metadata accessor for TetraKEM768Key(0) + 20);
    v13 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
}

uint64_t TetraKEM768Key.decapsulate(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[6];

  v19[1] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TetraKEM768Key(0);
  outlined init with copy of TetraSessionStates?(v1 + *(int *)(v12 + 20), (uint64_t)v7, &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v7, &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    outlined init with copy of TetraSessionStates?(v1, (uint64_t)v4, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
    v13 = type metadata accessor for Kyber768.PrivateKey();
    v14 = *(_QWORD *)(v13 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      Kyber768.PrivateKey.decapsulate(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v4, v13);
    }
  }
  else
  {
    outlined init with take of TetraRatchetState((uint64_t)v7, (uint64_t)v11, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
    v16 = v19[5];
    v17 = closure #1 in SecureEnclave.Kyber768.PrivateKey.decapsulate(_:)(*(void **)&v11[*(int *)(v8 + 24)]);
    if (!v16)
    {
      v19[2] = v17;
      v19[3] = v18;
      SymmetricKey.init<A>(data:)();
    }
    return outlined destroy of TetraRatchetOuterMessage((uint64_t)v11, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
  }
  return result;
}

uint64_t TetraKEM768Key.publicKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TetraKEM768Key(0);
  outlined init with copy of TetraSessionStates?(v1 + *(int *)(v13 + 20), (uint64_t)v8, &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v8, &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    outlined init with copy of TetraSessionStates?(v1, (uint64_t)v5, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
    v14 = type metadata accessor for Kyber768.PrivateKey();
    v15 = *(_QWORD *)(v14 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v5, 1, v14);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      Kyber768.PrivateKey.publicKey.getter();
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v5, v14);
    }
  }
  else
  {
    outlined init with take of TetraRatchetState((uint64_t)v8, (uint64_t)v12, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
    v17 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, v12, v17);
    return outlined destroy of TetraRatchetOuterMessage((uint64_t)v12, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
  }
  return result;
}

uint64_t TetraKEM768Key.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraKEM768Key.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for Kyber768.PrivateKey();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6BE0], (uint64_t)&protocol conformance descriptor for Kyber768.PrivateKey);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for TetraKEM768Key(0);
    v8[14] = 1;
    type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey and conformance SecureEnclave.Kyber768.PrivateKey, type metadata accessor for SecureEnclave.Kyber768.PrivateKey, (uint64_t)&protocol conformance descriptor for SecureEnclave.Kyber768.PrivateKey);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t TetraKEM768Key.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  char v27;

  v22 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  MEMORY[0x24BDAC7A8](v4);
  v23 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraKEM768Key.CodingKeys>);
  v8 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TetraKEM768Key(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v21 = a1;
  v14 = v8;
  v15 = (uint64_t)v13;
  v16 = (uint64_t)v23;
  type metadata accessor for Kyber768.PrivateKey();
  v27 = 0;
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type Kyber768.PrivateKey and conformance Kyber768.PrivateKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6BE0], (uint64_t)&protocol conformance descriptor for Kyber768.PrivateKey);
  v18 = (uint64_t)v24;
  v17 = v25;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  outlined init with take of KEM.EncapsulationResult?(v18, v15, &demangling cache variable for type metadata for Kyber768.PrivateKey?);
  type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v26 = 1;
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SecureEnclave.Kyber768.PrivateKey and conformance SecureEnclave.Kyber768.PrivateKey, type metadata accessor for SecureEnclave.Kyber768.PrivateKey, (uint64_t)&protocol conformance descriptor for SecureEnclave.Kyber768.PrivateKey);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v17);
  outlined init with take of KEM.EncapsulationResult?(v16, v15 + *(int *)(v11 + 20), &demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
  outlined init with copy of TetraRatchetOuterMessage(v15, v22, type metadata accessor for TetraKEM768Key);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
  return outlined destroy of TetraRatchetOuterMessage(v15, type metadata accessor for TetraKEM768Key);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraKEM768Key.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x79654B706573;
  else
    return 0x79654B7061;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraKEM768Key.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized TetraKEM768Key.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraKEM768Key.CodingKeys()
{
  lazy protocol witness table accessor for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraKEM768Key.CodingKeys()
{
  lazy protocol witness table accessor for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraKEM768Key@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraKEM768Key.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraKEM768Key(_QWORD *a1)
{
  return TetraKEM768Key.encode(to:)(a1);
}

uint64_t TetraKEM1024Key.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraKEM1024Key.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for Kyber1024.PrivateKey();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type Kyber1024.PrivateKey and conformance Kyber1024.PrivateKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6C40], (uint64_t)&protocol conformance descriptor for Kyber1024.PrivateKey);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for TetraKEM1024Key(0);
    v8[14] = 1;
    type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey and conformance SecureEnclave.Kyber1024.PrivateKey, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey, (uint64_t)&protocol conformance descriptor for SecureEnclave.Kyber1024.PrivateKey);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t TetraKEM1024Key.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  char v27;

  v22 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  MEMORY[0x24BDAC7A8](v4);
  v23 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  MEMORY[0x24BDAC7A8](v6);
  v24 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraKEM1024Key.CodingKeys>);
  v8 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TetraKEM1024Key(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  v21 = a1;
  v14 = v8;
  v15 = (uint64_t)v13;
  v16 = (uint64_t)v23;
  type metadata accessor for Kyber1024.PrivateKey();
  v27 = 0;
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type Kyber1024.PrivateKey and conformance Kyber1024.PrivateKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6C40], (uint64_t)&protocol conformance descriptor for Kyber1024.PrivateKey);
  v18 = (uint64_t)v24;
  v17 = v25;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  outlined init with take of KEM.EncapsulationResult?(v18, v15, &demangling cache variable for type metadata for Kyber1024.PrivateKey?);
  type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v26 = 1;
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SecureEnclave.Kyber1024.PrivateKey and conformance SecureEnclave.Kyber1024.PrivateKey, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey, (uint64_t)&protocol conformance descriptor for SecureEnclave.Kyber1024.PrivateKey);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v17);
  outlined init with take of KEM.EncapsulationResult?(v16, v15 + *(int *)(v11 + 20), &demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
  outlined init with copy of TetraRatchetOuterMessage(v15, v22, type metadata accessor for TetraKEM1024Key);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
  return outlined destroy of TetraRatchetOuterMessage(v15, type metadata accessor for TetraKEM1024Key);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraKEM1024Key.CodingKeys()
{
  lazy protocol witness table accessor for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraKEM1024Key.CodingKeys()
{
  lazy protocol witness table accessor for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraKEM1024Key@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraKEM1024Key.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraKEM1024Key(_QWORD *a1)
{
  return TetraKEM1024Key.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraKEM768Key.CodingKeys, &unk_24C4BCEC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraKEM768Key.CodingKeys, &unk_24C4BCEC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraKEM768Key.CodingKeys, &unk_24C4BCEC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraKEM768Key.CodingKeys, &unk_24C4BCEC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM768Key.CodingKeys and conformance TetraKEM768Key.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraKEM1024Key.CodingKeys, &unk_24C4BD0A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraKEM1024Key.CodingKeys, &unk_24C4BD0A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraKEM1024Key.CodingKeys, &unk_24C4BD0A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraKEM1024Key.CodingKeys, &unk_24C4BD0A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraKEM1024Key.CodingKeys and conformance TetraKEM1024Key.CodingKeys);
  }
  return result;
}

void *type metadata accessor for TetraKEM1024Key.CodingKeys()
{
  return &unk_24C4BD0A8;
}

uint64_t storeEnumTagSinglePayload for TetraKEM1024Key.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20BB330C0 + 4 * byte_20BB449F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20BB330F4 + 4 * asc_20BB449F0[v4]))();
}

uint64_t sub_20BB330F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB330FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BB33104);
  return result;
}

uint64_t sub_20BB33110(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BB33118);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20BB3311C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB33124(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TetraKEM768Key.CodingKeys()
{
  return &unk_24C4BCEC8;
}

uint64_t specialized TetraKEM768Key.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x79654B7061 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x79654B706573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

char *TetraRegistration.init(tetraRegistrationData:ecdhPublicKey:version:timestamp:signedBy:isEncrypting:)(void *a1, void *a2, int a3, void *a4, int a5, double a6)
{
  void *v6;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  Class isa;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  objc_class *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char *v50;
  _BYTE *v51;
  uint64_t v53;
  id v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  _QWORD *v59;
  _QWORD v60[2];
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  int v65;
  id v66;
  id v67;
  char *v68;
  char *v69;
  objc_super v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v67 = a2;
  v64 = a5;
  v65 = a3;
  v66 = a4;
  v9 = (char *)type metadata accessor for P256.KeyAgreement.PublicKey();
  v10 = *((_QWORD *)v9 - 1);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x24BDAC7A8](v13);
  v14 = type metadata accessor for TetraPB_TetraPublicPrekey(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = v6;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v73 = 0;
  v71 = 0u;
  v72 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, type metadata accessor for TetraPB_TetraPublicPrekey, (uint64_t)&protocol conformance descriptor for TetraPB_TetraPublicPrekey);
  v17 = (uint64_t)v68;
  Message.init(serializedData:extensions:partial:options:)();
  if (v17)
  {

LABEL_19:
    type metadata accessor for TetraRegistration();
    swift_deallocPartialClassInstance();
    return v9;
  }
  v62 = v9;
  v63 = v12;
  v61 = v10;
  v9 = (char *)v66;
  v18 = v69;
  *(double *)&v69[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_timestamp] = a6;
  v19 = (uint64_t *)&v16[*(int *)(v14 + 20)];
  v20 = *v19;
  v21 = v19[1];
  if (v21 >> 60 == 15)
    v22 = 0;
  else
    v22 = *v19;
  v68 = v16;
  if (v21 >> 60 == 15)
    v23 = 0xC000000000000000;
  else
    v23 = v21;
  outlined copy of Data?(v20, v21);
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v22, v23);
  v25 = objc_allocWithZone((Class)type metadata accessor for Kyber1024ObjCPublicKey(0));
  v26 = Kyber1024ObjCPublicKey.init(publicKeyBytes:)(isa);
  v27 = OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey;
  *(_QWORD *)&v18[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey] = v26;
  v28 = (uint64_t *)&v68[*(int *)(v14 + 24)];
  v29 = *v28;
  v30 = v28[1];
  if (v30 >> 60 == 15)
    v31 = 0;
  else
    v31 = *v28;
  if (v30 >> 60 == 15)
    v32 = 0xC000000000000000;
  else
    v32 = v30;
  v33 = &v18[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature];
  *(_QWORD *)v33 = v31;
  *((_QWORD *)v33 + 1) = v32;
  outlined copy of Data?(v29, v30);
  v34 = v67;
  v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v37 = v36;

  *(_QWORD *)&v71 = v35;
  *((_QWORD *)&v71 + 1) = v37;
  v38 = v63;
  P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)();
  v60[1] = 0;
  v67 = v34;
  v39 = v38;
  v40 = &v18[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_ecdhPublicKey];
  v41 = v61;
  v42 = v62;
  (*(void (**)(char *, char *, char *))(v61 + 32))(&v18[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_ecdhPublicKey], v39, v62);
  if ((v65 - 13) > 0x12)
  {
    v50 = v69;

    lazy protocol witness table accessor for type TetraGeneralError and conformance TetraGeneralError();
    swift_allocError();
    *v51 = 1;
    swift_willThrow();

    outlined destroy of TetraPB_TetraPublicPrekey((uint64_t)v68);
    (*(void (**)(char *, char *))(v41 + 8))(v40, v42);

    outlined consume of Data._Representation(*(_QWORD *)v33, *((_QWORD *)v33 + 1));
    goto LABEL_19;
  }
  v43 = v69;
  *(_DWORD *)&v69[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion] = v65;
  *(_QWORD *)&v43[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signingPublicKey] = v9;
  v44 = v9;

  v45 = (objc_class *)type metadata accessor for TetraRegistration();
  v70.receiver = v43;
  v70.super_class = v45;
  v46 = (char *)objc_msgSendSuper2(&v70, sel_init);
  v47 = *(_QWORD *)&v46[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature];
  v48 = *(_QWORD *)&v46[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature + 8];
  v9 = v46;
  outlined copy of Data._Representation(v47, v48);
  v49 = specialized TetraRegistration.isValidSignature(_:signedBy:isEncrypting:)(v44, v64 & 1);
  outlined consume of Data._Representation(v47, v48);
  if ((v49 & 1) != 0)
  {

    outlined destroy of TetraPB_TetraPublicPrekey((uint64_t)v68);
  }
  else
  {

    v54 = v67;
    v53 = (uint64_t)v68;
    if (one-time initialization token for TetraLogger != -1)
      swift_once();
    v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)TetraLogger);
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v58 = 0;
      _os_log_impl(&dword_20BABB000, v56, v57, "The signature of the registration payload could not be verified.", v58, 2u);
      MEMORY[0x20BD3C498](v58, -1, -1);
    }

    lazy protocol witness table accessor for type TetraQueryLookupError and conformance TetraQueryLookupError();
    swift_allocError();
    *v59 = 0;
    swift_willThrow();

    outlined destroy of TetraPB_TetraPublicPrekey(v53);
  }
  return v9;
}

void TetraRegistration.computeKeysHash()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Class isa;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v1 = v0;
  v35 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for SHA384();
  v30 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for SHA384Digest();
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v27 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrefixSequence<SHA384Digest>);
  MEMORY[0x24BDAC7A8](v26);
  v25 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Kyber1024.PublicKey();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = P256.KeyAgreement.PublicKey.rawRepresentation.getter();
  v12 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, *(_QWORD *)(v0 + OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey)+ OBJC_IVAR____TtC17MessageProtection22Kyber1024ObjCPublicKey_pubKey, v6);
  v13 = Kyber1024.PublicKey.dataRepresentation.getter();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v13, v15);
  v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;

  v31 = v10;
  v32 = v12;
  outlined copy of Data._Representation(v10, v12);
  outlined copy of Data._Representation(v17, v19);
  specialized Data.append<A>(contentsOf:)(v17, v19);
  outlined consume of Data._Representation(v17, v19);
  outlined consume of Data._Representation(v17, v19);
  outlined consume of Data._Representation(v10, v12);
  v20 = v31;
  v21 = v32;
  v22 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature);
  v23 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature + 8);
  v33 = v31;
  v34 = v32;
  outlined copy of Data._Representation(v22, v23);
  outlined copy of Data._Representation(v20, v21);
  specialized Data.append<A>(contentsOf:)(v22, v23);
  outlined consume of Data._Representation(v22, v23);
  outlined consume of Data._Representation(v20, v21);
  v24 = v34;
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B20], MEMORY[0x24BDC6B10]);
  dispatch thunk of HashFunction.init()();
  __asm { BR              X10 }
}

uint64_t sub_20BB33E78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 - 104) = v2;
  *(_WORD *)(v4 - 96) = v3;
  *(_BYTE *)(v4 - 94) = BYTE2(v3);
  *(_BYTE *)(v4 - 93) = BYTE3(v3);
  *(_BYTE *)(v4 - 92) = BYTE4(v3);
  *(_BYTE *)(v4 - 91) = BYTE5(v3);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  outlined consume of Data._Representation(v2, v3);
  v5 = *(_QWORD *)(v4 - 160);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 136) + 8))(v1, v0);
  v6 = *(_QWORD *)(v4 - 176);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v4 - 152) + 32))(v6, v5, *(_QWORD *)(v4 - 144));
  *(_QWORD *)(v6 + *(int *)(*(_QWORD *)(v4 - 168) + 36)) = 16;
  v7 = specialized Data.init<A>(_:)(v6);
  outlined consume of Data._Representation(v2, v3);
  return v7;
}

uint64_t TetraRegistration.registrationData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Class isa;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE v25[16];

  v1 = v0;
  v2 = type metadata accessor for Kyber1024.PublicKey();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for TetraPB_TetraPublicPrekey(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  UnknownStorage.init()();
  v9 = &v8[*(int *)(v6 + 20)];
  *(_OWORD *)v9 = xmmword_20BB407A0;
  v10 = &v8[*(int *)(v6 + 24)];
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey);
  *(_OWORD *)v10 = xmmword_20BB407A0;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v11 + OBJC_IVAR____TtC17MessageProtection22Kyber1024ObjCPublicKey_pubKey, v2);
  v12 = Kyber1024.PublicKey.dataRepresentation.getter();
  v14 = v13;
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v12, v14);
  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;

  outlined consume of Data?(*(_QWORD *)v9, *((_QWORD *)v9 + 1));
  *(_QWORD *)v9 = v16;
  *((_QWORD *)v9 + 1) = v18;
  v19 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature);
  v20 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature + 8);
  v21 = *(_QWORD *)v10;
  v22 = *((_QWORD *)v10 + 1);
  outlined copy of Data._Representation(v19, v20);
  outlined consume of Data?(v21, v22);
  *(_QWORD *)v10 = v19;
  *((_QWORD *)v10 + 1) = v20;
  lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraPB_TetraPublicPrekey and conformance TetraPB_TetraPublicPrekey, type metadata accessor for TetraPB_TetraPublicPrekey, (uint64_t)&protocol conformance descriptor for TetraPB_TetraPublicPrekey);
  v23 = Message.serializedData(partial:)();
  outlined destroy of TetraPB_TetraPublicPrekey((uint64_t)v8);
  return v23;
}

uint64_t outlined destroy of TetraPB_TetraPublicPrekey(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TetraPB_TetraPublicPrekey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id TetraRegistration.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void TetraRegistration.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id TetraRegistration.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraRegistration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TetraRegistration()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TetraRegistration;
  if (!type metadata singleton initialization cache for TetraRegistration)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ObjC metadata update function for TetraRegistration()
{
  return type metadata accessor for TetraRegistration();
}

uint64_t type metadata completion function for TetraRegistration()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for P256.KeyAgreement.PublicKey();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t specialized TetraRegistration.isValidSignature(_:signedBy:isEncrypting:)(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  Class isa;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = objc_msgSend(objc_allocWithZone((Class)NGMTetraRegistrationSignatureFormatter), sel_initWithTetraRegistration_, v3);
  isa = Data._bridgeToObjectiveC()().super.isa;
  LODWORD(a1) = objc_msgSend(a1, sel_verifyTetraRegistrationSignature_formatter_, isa, v6);

  if (!(_DWORD)a1)
  {
    if (one-time initialization token for TetraLogger != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)TetraLogger);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10))
      goto LABEL_19;
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    v12 = "Tetra signature is incorrect.";
    goto LABEL_18;
  }
  if ((a2 & 1) != 0)
  {
    if ((objc_msgSend(v6, sel_isStillValidToEncrypt) & 1) == 0)
    {
      if (one-time initialization token for TetraLogger != -1)
        swift_once();
      v8 = type metadata accessor for Logger();
      __swift_project_value_buffer(v8, (uint64_t)TetraLogger);
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v9, v10))
        goto LABEL_19;
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      v12 = "Tetra registration is too old to encrypt to.";
LABEL_18:
      _os_log_impl(&dword_20BABB000, v9, v10, v12, v11, 2u);
      MEMORY[0x20BD3C498](v11, -1, -1);
LABEL_19:

      v14 = 0;
      goto LABEL_20;
    }
  }
  else if ((objc_msgSend(v6, sel_isStillValidToDecrypt) & 1) == 0)
  {
    if (one-time initialization token for TetraLogger != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)TetraLogger);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10))
      goto LABEL_19;
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    v12 = "Tetra registration is too old to decrypt key exchange messages with.";
    goto LABEL_18;
  }
  v14 = 1;
LABEL_20:

  return v14;
}

id specialized TetraRegistration.init(kyberPublicKey:ecdhPublicKey:timestamp:version:signedBy:)(void *a1, void *a2, uint64_t a3, void *a4, double a5)
{
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  Class isa;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  objc_class *v36;
  id result;
  void *v38;
  uint64_t v39;
  id v40;
  objc_super v41;
  id v42[3];

  v40 = a4;
  v42[2] = *(id *)MEMORY[0x24BDAC8D0];
  v10 = type metadata accessor for P256.KeyAgreement.PublicKey();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v5;
  v15 = a2;
  v16 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = v17;

  v42[0] = v16;
  v42[1] = v18;
  P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)();
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v14[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_ecdhPublicKey], v13, v10);
  *(_QWORD *)&v14[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_kyberPublicKey] = a1;
  *(double *)&v14[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_timestamp] = a5;
  *(_DWORD *)&v14[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_tetraVersion] = a3;
  v19 = a1;
  v20 = v15;
  v21 = v19;
  v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = v23;

  v25 = objc_allocWithZone((Class)NGMTetraRegistrationSignatureFormatter);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v27 = objc_msgSend(v25, sel_initWithKyberPublicKey_ecdhPublicKey_timestamp_tetraVersion_, v21, isa, a3, a5);
  outlined consume of Data._Representation(v22, v24);

  v28 = v40;
  v29 = objc_msgSend(v40, sel_publicKey);
  *(_QWORD *)&v14[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signingPublicKey] = v29;
  v42[0] = 0;
  v30 = objc_msgSend(v28, sel_signDataWithRegistrationFormatter_error_, v27, v42);
  v31 = v42[0];
  if (v30)
  {
    v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

    v35 = (uint64_t *)&v14[OBJC_IVAR____TtC17MessageProtection17TetraRegistration_signature];
    *v35 = v32;
    v35[1] = v34;

    v36 = (objc_class *)type metadata accessor for TetraRegistration();
    v41.receiver = v14;
    v41.super_class = v36;
    return objc_msgSendSuper2(&v41, sel_init);
  }
  else
  {
    v38 = v31;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    result = (id)swift_unexpectedError();
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TetraQueryLookupError and conformance TetraQueryLookupError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraQueryLookupError and conformance TetraQueryLookupError;
  if (!lazy protocol witness table cache variable for type TetraQueryLookupError and conformance TetraQueryLookupError)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraQueryLookupError, &type metadata for TetraQueryLookupError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraQueryLookupError and conformance TetraQueryLookupError);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TetraIncomingSymmetricRatchet(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;

  v4 = type metadata accessor for SymmetricRatchet();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = type metadata accessor for SymmetricKey();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 48));
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 20));
    v9 = *(int *)(v6 + 24);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = *(_OWORD *)(v11 + 24);
    *(_OWORD *)((char *)a1 + v9 + 24) = v12;
    v13 = v12;
    v14 = **(void (***)(char *, char *, uint64_t))(v12 - 8);
    swift_bridgeObjectRetain();
    v14(v10, v11, v13);
  }
  return a1;
}

uint64_t destroy for TetraIncomingSymmetricRatchet(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  v3 = type metadata accessor for SymmetricRatchet();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_0(a1 + *(int *)(v3 + 24));
}

uint64_t initializeWithCopy for TetraIncomingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)(a1 + *(int *)(v5 + 48)) = *(_QWORD *)(a2 + *(int *)(v5 + 48));
  v6 = type metadata accessor for SymmetricRatchet();
  *(_QWORD *)(a1 + *(int *)(v6 + 20)) = *(_QWORD *)(a2 + *(int *)(v6 + 20));
  v7 = *(int *)(v6 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(v9 + 24);
  *(_OWORD *)(a1 + v7 + 24) = v10;
  v11 = v10;
  v12 = **(void (***)(uint64_t, uint64_t, uint64_t))(v10 - 8);
  swift_bridgeObjectRetain();
  v12(v8, v9, v11);
  return a1;
}

uint64_t assignWithCopy for TetraIncomingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)(a1 + *(int *)(v5 + 48)) = *(_QWORD *)(a2 + *(int *)(v5 + 48));
  v6 = type metadata accessor for SymmetricRatchet();
  *(_QWORD *)(a1 + *(int *)(v6 + 20)) = *(_QWORD *)(a2 + *(int *)(v6 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + *(int *)(v6 + 24)), (uint64_t *)(a2 + *(int *)(v6 + 24)));
  return a1;
}

uint64_t initializeWithTake for TetraIncomingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)(a1 + *(int *)(v5 + 48)) = *(_QWORD *)(a2 + *(int *)(v5 + 48));
  v6 = type metadata accessor for SymmetricRatchet();
  *(_QWORD *)(a1 + *(int *)(v6 + 20)) = *(_QWORD *)(a2 + *(int *)(v6 + 20));
  v7 = *(int *)(v6 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  return a1;
}

uint64_t assignWithTake for TetraIncomingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)(a1 + *(int *)(v5 + 48)) = *(_QWORD *)(a2 + *(int *)(v5 + 48));
  v6 = type metadata accessor for SymmetricRatchet();
  *(_QWORD *)(a1 + *(int *)(v6 + 20)) = *(_QWORD *)(a2 + *(int *)(v6 + 20));
  swift_bridgeObjectRelease();
  v7 = *(int *)(v6 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  __swift_destroy_boxed_opaque_existential_0(a1 + v7);
  v10 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v10;
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraIncomingSymmetricRatchet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB34F34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SymmetricRatchet();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TetraIncomingSymmetricRatchet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB34F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SymmetricRatchet();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TetraIncomingSymmetricRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraIncomingSymmetricRatchet);
}

uint64_t type metadata completion function for TetraIncomingSymmetricRatchet()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for SymmetricRatchet();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for TetraOutgoingSymmetricRatchet(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  uint64_t v5;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void (*v39)(char *, _QWORD, uint64_t, uint64_t);
  id v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  void (*v63)(char *, _QWORD, uint64_t, uint64_t);
  id v64;
  uint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int128 v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t *v85;
  uint64_t *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  int *v92;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v5 = a3;
    v7 = a1;
    v8 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
    v9 = (char *)v7 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    v14 = v4;
    if (v13(v10, 1, v11))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
    v17 = v16[5];
    v18 = (char *)v7 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for TetraKEM768Key(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v91 = v16;
      v23 = type metadata accessor for Kyber768.PrivateKey();
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v19, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v18, v19, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v18, 0, 1, v23);
      }
      v26 = *(int *)(v20 + 20);
      v27 = &v18[v26];
      v28 = &v19[v26];
      v29 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
      }
      else
      {
        v32 = type metadata accessor for Kyber768.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v27, v28, v32);
        v33 = *(int *)(v29 + 20);
        v85 = (uint64_t *)&v27[v33];
        v87 = v27;
        v34 = (uint64_t *)&v28[v33];
        v89 = v5;
        v36 = *v34;
        v35 = v34[1];
        outlined copy of Data._Representation(*v34, v35);
        *v85 = v36;
        v85[1] = v35;
        v37 = *(int *)(v29 + 24);
        v38 = *(void **)&v28[v37];
        v5 = v89;
        *(_QWORD *)&v87[v37] = v38;
        v39 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56);
        v40 = v38;
        v39(v87, 0, 1, v29);
      }
      v16 = v91;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v41 = v16[6];
    v42 = (char *)v7 + v41;
    v43 = (char *)a2 + v41;
    v44 = type metadata accessor for TetraKEM1024Key(0);
    v45 = *(_QWORD *)(v44 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
    {
      v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      v92 = v16;
      v47 = type metadata accessor for Kyber1024.PrivateKey();
      v48 = *(_QWORD *)(v47 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v43, 1, v47))
      {
        v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v42, v43, v47);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v42, 0, 1, v47);
      }
      v50 = *(int *)(v44 + 20);
      v51 = &v42[v50];
      v52 = &v43[v50];
      v53 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        v56 = type metadata accessor for Kyber1024.PublicKey();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v51, v52, v56);
        v57 = *(int *)(v53 + 20);
        v86 = (uint64_t *)&v51[v57];
        v88 = v51;
        v58 = (uint64_t *)&v52[v57];
        v90 = v5;
        v59 = *v58;
        v60 = v58[1];
        outlined copy of Data._Representation(*v58, v60);
        *v86 = v59;
        v86[1] = v60;
        v61 = *(int *)(v53 + 24);
        v62 = *(void **)&v52[v61];
        v5 = v90;
        *(_QWORD *)&v88[v61] = v62;
        v63 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56);
        v64 = v62;
        v63(v88, 0, 1, v53);
      }
      v16 = v92;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
    v65 = v16[7];
    v66 = (char *)v7 + v65;
    v67 = (char *)a2 + v65;
    v68 = *((_QWORD *)v67 + 1);
    if (v68 >> 60 == 15)
    {
      *(_OWORD *)v66 = *(_OWORD *)v67;
    }
    else
    {
      v69 = *(_QWORD *)v67;
      outlined copy of Data._Representation(*(_QWORD *)v67, *((_QWORD *)v67 + 1));
      *(_QWORD *)v66 = v69;
      *((_QWORD *)v66 + 1) = v68;
    }
    v70 = *(int *)(v5 + 20);
    v71 = (char *)v7 + v70;
    v72 = (char *)a2 + v70;
    v73 = type metadata accessor for SymmetricRatchet();
    v74 = *(_QWORD *)(v73 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
    {
      v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
      memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      v76 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v71, v72, v76);
      v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(_QWORD *)&v71[*(int *)(v77 + 48)] = *(_QWORD *)&v72[*(int *)(v77 + 48)];
      *(_QWORD *)&v71[*(int *)(v73 + 20)] = *(_QWORD *)&v72[*(int *)(v73 + 20)];
      v78 = *(int *)(v73 + 24);
      v79 = &v71[v78];
      v80 = &v72[v78];
      v81 = *(_OWORD *)(v80 + 24);
      *(_OWORD *)&v71[v78 + 24] = v81;
      v82 = v81;
      v83 = **(void (***)(char *, char *, uint64_t))(v81 - 8);
      swift_bridgeObjectRetain();
      v83(v79, v80, v82);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
    }
  }
  return v7;
}

uint64_t destroy for TetraOutgoingSymmetricRatchet(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;

  v4 = (char *)a1 + *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v5 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v7 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v8 = (char *)a1 + v7[5];
  v9 = type metadata accessor for TetraKEM768Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = type metadata accessor for Kyber768.PrivateKey();
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10))
      (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    v12 = &v8[*(int *)(v9 + 20)];
    v13 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
    {
      v14 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
      outlined consume of Data._Representation(*(_QWORD *)&v12[*(int *)(v13 + 20)], *(_QWORD *)&v12[*(int *)(v13 + 20) + 8]);

    }
  }
  v15 = (char *)a1 + v7[6];
  v16 = type metadata accessor for TetraKEM1024Key(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
  {
    v17 = type metadata accessor for Kyber1024.PrivateKey();
    v18 = *(_QWORD *)(v17 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v17))
      (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    v19 = &v15[*(int *)(v16 + 20)];
    v20 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
    {
      v21 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v19, v21);
      outlined consume of Data._Representation(*(_QWORD *)&v19[*(int *)(v20 + 20)], *(_QWORD *)&v19[*(int *)(v20 + 20) + 8]);

    }
  }
  v22 = (uint64_t *)((char *)a1 + v7[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    outlined consume of Data._Representation(*v22, v23);
  v24 = (char *)a1 + *(int *)(a2 + 20);
  v25 = type metadata accessor for SymmetricRatchet();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25);
  if (!(_DWORD)result)
  {
    v27 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(v24, v27);
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v24[*(int *)(v25 + 24)]);
  }
  return result;
}

void **initializeWithCopy for TetraOutgoingSymmetricRatchet(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void (*v38)(char *, _QWORD, uint64_t, uint64_t);
  id v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  void (*v62)(char *, _QWORD, uint64_t, uint64_t);
  id v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  uint64_t *v84;
  uint64_t *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  int *v91;

  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v6;
  if (v12(v9, 1, v10))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v16 = v15[5];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for TetraKEM768Key(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v90 = v15;
    v22 = type metadata accessor for Kyber768.PrivateKey();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v22))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v17, v18, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v17, 0, 1, v22);
    }
    v25 = *(int *)(v19 + 20);
    v26 = &v17[v25];
    v27 = &v18[v25];
    v28 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    v29 = *(_QWORD *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      v31 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v26, v27, v31);
      v32 = *(int *)(v28 + 20);
      v84 = (uint64_t *)&v26[v32];
      v86 = v26;
      v33 = (uint64_t *)&v27[v32];
      v88 = a3;
      v35 = *v33;
      v34 = v33[1];
      outlined copy of Data._Representation(*v33, v34);
      *v84 = v35;
      v84[1] = v34;
      v36 = *(int *)(v28 + 24);
      v37 = *(void **)&v27[v36];
      a3 = v88;
      *(_QWORD *)&v86[v36] = v37;
      v38 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
      v39 = v37;
      v38(v86, 0, 1, v28);
    }
    v15 = v90;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v40 = v15[6];
  v41 = (char *)a1 + v40;
  v42 = (char *)a2 + v40;
  v43 = type metadata accessor for TetraKEM1024Key(0);
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
  {
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v91 = v15;
    v46 = type metadata accessor for Kyber1024.PrivateKey();
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v42, 1, v46))
    {
      v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v41, v42, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v41, 0, 1, v46);
    }
    v49 = *(int *)(v43 + 20);
    v50 = &v41[v49];
    v51 = &v42[v49];
    v52 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    v53 = *(_QWORD *)(v52 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
    {
      v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    }
    else
    {
      v55 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v50, v51, v55);
      v56 = *(int *)(v52 + 20);
      v85 = (uint64_t *)&v50[v56];
      v87 = v50;
      v57 = (uint64_t *)&v51[v56];
      v89 = a3;
      v58 = *v57;
      v59 = v57[1];
      outlined copy of Data._Representation(*v57, v59);
      *v85 = v58;
      v85[1] = v59;
      v60 = *(int *)(v52 + 24);
      v61 = *(void **)&v51[v60];
      a3 = v89;
      *(_QWORD *)&v87[v60] = v61;
      v62 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56);
      v63 = v61;
      v62(v87, 0, 1, v52);
    }
    v15 = v91;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
  }
  v64 = v15[7];
  v65 = (char *)a1 + v64;
  v66 = (char *)a2 + v64;
  v67 = *((_QWORD *)v66 + 1);
  if (v67 >> 60 == 15)
  {
    *(_OWORD *)v65 = *(_OWORD *)v66;
  }
  else
  {
    v68 = *(_QWORD *)v66;
    outlined copy of Data._Representation(*(_QWORD *)v66, *((_QWORD *)v66 + 1));
    *(_QWORD *)v65 = v68;
    *((_QWORD *)v65 + 1) = v67;
  }
  v69 = *(int *)(a3 + 20);
  v70 = (char *)a1 + v69;
  v71 = (char *)a2 + v69;
  v72 = type metadata accessor for SymmetricRatchet();
  v73 = *(_QWORD *)(v72 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
  {
    v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
  }
  else
  {
    v75 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v70, v71, v75);
    v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(_QWORD *)&v70[*(int *)(v76 + 48)] = *(_QWORD *)&v71[*(int *)(v76 + 48)];
    *(_QWORD *)&v70[*(int *)(v72 + 20)] = *(_QWORD *)&v71[*(int *)(v72 + 20)];
    v77 = *(int *)(v72 + 24);
    v78 = &v70[v77];
    v79 = &v71[v77];
    v80 = *(_OWORD *)(v79 + 24);
    *(_OWORD *)&v70[v77 + 24] = v80;
    v81 = v80;
    v82 = **(void (***)(char *, char *, uint64_t))(v80 - 8);
    swift_bridgeObjectRetain();
    v82(v78, v79, v81);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
  }
  return a1;
}

void **assignWithCopy for TetraOutgoingSymmetricRatchet(void **a1, void **a2, uint64_t a3)
{
  void **v3;
  void **v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void (*v51)(char *, _QWORD, uint64_t, uint64_t);
  id v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  void (*v70)(char *, _QWORD, uint64_t, uint64_t);
  id v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(char *, uint64_t, uint64_t);
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  size_t v84;
  void *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(char *, uint64_t, uint64_t);
  int v90;
  int v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void *v105;
  void (*v106)(char *, _QWORD, uint64_t, uint64_t);
  id v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(char *, uint64_t, uint64_t);
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  void (*v130)(char *, char *, uint64_t);
  uint64_t v131;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t (*v141)(uint64_t, uint64_t, uint64_t);
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  void *v151;
  void (*v152)(uint64_t, _QWORD, uint64_t, uint64_t);
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  void *v163;
  void *v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  id v177;
  void **v178;
  void **v179;
  void **v180;
  void **v181;
  uint64_t v183;

  v3 = a2;
  v4 = a1;
  v5 = *a1;
  v6 = *a2;
  *a1 = *a2;
  v7 = v6;

  v8 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v9 = (char *)v4 + v8;
  v10 = (char *)v3 + v8;
  v11 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = type metadata accessor for TetraOutgoingKeyContent(0);
  v18 = *(int *)(v17 + 20);
  v19 = (char *)v4 + v18;
  v20 = (char *)v3 + v18;
  v21 = type metadata accessor for TetraKEM768Key(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  v183 = v17;
  if (!v24)
  {
    if (v25)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v19, type metadata accessor for TetraKEM768Key);
      goto LABEL_13;
    }
    v30 = v17;
    v31 = v3;
    v32 = type metadata accessor for Kyber768.PrivateKey();
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
    v35 = v34(v19, 1, v32);
    v36 = v34(v20, 1, v32);
    if (v35)
    {
      if (!v36)
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v19, v20, v32);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v19, 0, 1, v32);
        goto LABEL_26;
      }
    }
    else
    {
      if (!v36)
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 24))(v19, v20, v32);
LABEL_26:
        v3 = v31;
        v54 = *(int *)(v21 + 20);
        v55 = &v19[v54];
        v56 = &v20[v54];
        v57 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        v58 = *(_QWORD *)(v57 - 8);
        v59 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48);
        v60 = v59(v55, 1, v57);
        v61 = v59(v56, 1, v57);
        if (v60)
        {
          if (!v61)
          {
            v62 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v55, v56, v62);
            v63 = *(int *)(v57 + 20);
            v64 = (uint64_t *)&v55[v63];
            v65 = (uint64_t *)&v56[v63];
            v66 = *v65;
            v67 = v65[1];
            outlined copy of Data._Representation(*v65, v67);
            *v64 = v66;
            v64[1] = v67;
            v3 = v31;
            v68 = *(int *)(v57 + 24);
            v69 = *(void **)&v56[v68];
            *(_QWORD *)&v55[v68] = v69;
            v70 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56);
            v71 = v69;
            v70(v55, 0, 1, v57);
LABEL_32:
            v17 = v30;
            goto LABEL_33;
          }
        }
        else
        {
          if (!v61)
          {
            v154 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v154 - 8) + 24))(v55, v56, v154);
            v155 = *(int *)(v57 + 20);
            v156 = (uint64_t *)&v55[v155];
            v157 = (uint64_t *)&v56[v155];
            v158 = *v157;
            v159 = v157[1];
            outlined copy of Data._Representation(*v157, v159);
            v160 = *v156;
            v161 = v156[1];
            *v156 = v158;
            v156[1] = v159;
            v3 = v31;
            outlined consume of Data._Representation(v160, v161);
            v162 = *(int *)(v57 + 24);
            v163 = *(void **)&v56[v162];
            v164 = *(void **)&v55[v162];
            *(_QWORD *)&v55[v162] = v163;
            v165 = v163;

            goto LABEL_32;
          }
          outlined destroy of TetraRatchetOuterMessage((uint64_t)v55, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
        goto LABEL_32;
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v19, v32);
    }
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_26;
  }
  if (v25)
  {
LABEL_13:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_33;
  }
  v26 = type metadata accessor for Kyber768.PrivateKey();
  v27 = *(_QWORD *)(v26 - 8);
  v180 = v3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v20, 1, v26))
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v19, v20, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v19, 0, 1, v26);
  }
  v37 = *(int *)(v21 + 20);
  v38 = &v19[v37];
  v39 = &v20[v37];
  v40 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v43 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v38, v39, v43);
    v44 = *(int *)(v40 + 20);
    v45 = (uint64_t *)&v38[v44];
    v46 = (uint64_t *)&v39[v44];
    v178 = v4;
    v48 = *v46;
    v47 = v46[1];
    outlined copy of Data._Representation(*v46, v47);
    *v45 = v48;
    v45[1] = v47;
    v4 = v178;
    v49 = *(int *)(v40 + 24);
    v50 = *(void **)&v39[v49];
    *(_QWORD *)&v38[v49] = v50;
    v51 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56);
    v52 = v50;
    v51(v38, 0, 1, v40);
    v17 = v183;
  }
  v3 = v180;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_33:
  v73 = *(int *)(v17 + 24);
  v74 = (char *)v4 + v73;
  v75 = (char *)v3 + v73;
  v76 = type metadata accessor for TetraKEM1024Key(0);
  v77 = *(_QWORD *)(v76 - 8);
  v78 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 48);
  v79 = v78(v74, 1, v76);
  v80 = v78(v75, 1, v76);
  if (!v79)
  {
    if (v80)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v74, type metadata accessor for TetraKEM1024Key);
      goto LABEL_39;
    }
    v87 = type metadata accessor for Kyber1024.PrivateKey();
    v88 = *(_QWORD *)(v87 - 8);
    v89 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v88 + 48);
    v90 = v89(v74, 1, v87);
    v91 = v89(v75, 1, v87);
    if (v90)
    {
      if (!v91)
      {
        (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v74, v75, v87);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v74, 0, 1, v87);
LABEL_67:
        v136 = *(int *)(v76 + 20);
        v137 = (uint64_t)&v74[v136];
        v138 = &v75[v136];
        v139 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        v140 = *(_QWORD *)(v139 - 8);
        v141 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v140 + 48);
        v142 = v141(v137, 1, v139);
        v143 = v141((uint64_t)v138, 1, v139);
        if (v142)
        {
          if (!v143)
          {
            v144 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 16))(v137, v138, v144);
            v145 = *(int *)(v139 + 20);
            v146 = (uint64_t *)(v137 + v145);
            v147 = (uint64_t *)&v138[v145];
            v148 = *v147;
            v149 = v147[1];
            outlined copy of Data._Representation(*v147, v149);
            *v146 = v148;
            v146[1] = v149;
            v150 = *(int *)(v139 + 24);
            v151 = *(void **)&v138[v150];
            *(_QWORD *)(v137 + v150) = v151;
            v152 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v140 + 56);
            v153 = v151;
            v152(v137, 0, 1, v139);
            goto LABEL_49;
          }
        }
        else
        {
          if (!v143)
          {
            v166 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 24))(v137, v138, v166);
            v167 = *(int *)(v139 + 20);
            v168 = (uint64_t *)(v137 + v167);
            v169 = (uint64_t *)&v138[v167];
            v170 = *v169;
            v171 = v169[1];
            outlined copy of Data._Representation(*v169, v171);
            v172 = *v168;
            v173 = v168[1];
            *v168 = v170;
            v168[1] = v171;
            outlined consume of Data._Representation(v172, v173);
            v174 = *(int *)(v139 + 24);
            v175 = *(void **)&v138[v174];
            v176 = *(void **)(v137 + v174);
            *(_QWORD *)(v137 + v174) = v175;
            v177 = v175;

            goto LABEL_49;
          }
          outlined destroy of TetraRatchetOuterMessage(v137, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        v84 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?)
                                    - 8)
                        + 64);
        v85 = (void *)v137;
        v86 = v138;
LABEL_40:
        memcpy(v85, v86, v84);
        goto LABEL_49;
      }
    }
    else
    {
      if (!v91)
      {
        (*(void (**)(char *, char *, uint64_t))(v88 + 24))(v74, v75, v87);
        goto LABEL_67;
      }
      (*(void (**)(char *, uint64_t))(v88 + 8))(v74, v87);
    }
    v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v135 - 8) + 64));
    goto LABEL_67;
  }
  if (v80)
  {
LABEL_39:
    v84 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?)
                                - 8)
                    + 64);
    v85 = v74;
    v86 = v75;
    goto LABEL_40;
  }
  v81 = type metadata accessor for Kyber1024.PrivateKey();
  v82 = *(_QWORD *)(v81 - 8);
  v181 = v3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v75, 1, v81))
  {
    v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v74, v75, v81);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v74, 0, 1, v81);
  }
  v92 = *(int *)(v76 + 20);
  v93 = &v74[v92];
  v94 = &v75[v92];
  v95 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v96 = *(_QWORD *)(v95 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
  {
    v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
  }
  else
  {
    v98 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16))(v93, v94, v98);
    v99 = *(int *)(v95 + 20);
    v100 = (uint64_t *)&v93[v99];
    v101 = (uint64_t *)&v94[v99];
    v179 = v4;
    v102 = *v101;
    v103 = v101[1];
    outlined copy of Data._Representation(*v101, v103);
    *v100 = v102;
    v100[1] = v103;
    v4 = v179;
    v104 = *(int *)(v95 + 24);
    v105 = *(void **)&v94[v104];
    *(_QWORD *)&v93[v104] = v105;
    v106 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56);
    v107 = v105;
    v106(v93, 0, 1, v95);
  }
  v3 = v181;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v74, 0, 1, v76);
LABEL_49:
  v108 = *(int *)(v183 + 28);
  v109 = (uint64_t *)((char *)v4 + v108);
  v110 = (uint64_t *)((char *)v3 + v108);
  v111 = *(unint64_t *)((char *)v3 + v108 + 8);
  if (*(unint64_t *)((char *)v4 + v108 + 8) >> 60 == 15)
  {
    if (v111 >> 60 != 15)
    {
      v112 = *v110;
      outlined copy of Data._Representation(*v110, v111);
      *v109 = v112;
      v109[1] = v111;
      goto LABEL_56;
    }
    goto LABEL_54;
  }
  if (v111 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v109);
LABEL_54:
    *(_OWORD *)v109 = *(_OWORD *)v110;
    goto LABEL_56;
  }
  v113 = *v110;
  outlined copy of Data._Representation(*v110, v111);
  v114 = *v109;
  v115 = v109[1];
  *v109 = v113;
  v109[1] = v111;
  outlined consume of Data._Representation(v114, v115);
LABEL_56:
  v116 = *(int *)(a3 + 20);
  v117 = (char *)v4 + v116;
  v118 = (char *)v3 + v116;
  v119 = type metadata accessor for SymmetricRatchet();
  v120 = *(_QWORD *)(v119 - 8);
  v121 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 48);
  v122 = v121(v117, 1, v119);
  v123 = v121(v118, 1, v119);
  if (!v122)
  {
    if (!v123)
    {
      v133 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 24))(v117, v118, v133);
      v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(_QWORD *)&v117[*(int *)(v134 + 48)] = *(_QWORD *)&v118[*(int *)(v134 + 48)];
      *(_QWORD *)&v117[*(int *)(v119 + 20)] = *(_QWORD *)&v118[*(int *)(v119 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      __swift_assign_boxed_opaque_existential_1((uint64_t *)&v117[*(int *)(v119 + 24)], (uint64_t *)&v118[*(int *)(v119 + 24)]);
      return v4;
    }
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v117, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
    goto LABEL_61;
  }
  if (v123)
  {
LABEL_61:
    v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
    return v4;
  }
  v124 = type metadata accessor for SymmetricKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16))(v117, v118, v124);
  v125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)&v117[*(int *)(v125 + 48)] = *(_QWORD *)&v118[*(int *)(v125 + 48)];
  *(_QWORD *)&v117[*(int *)(v119 + 20)] = *(_QWORD *)&v118[*(int *)(v119 + 20)];
  v126 = *(int *)(v119 + 24);
  v127 = &v117[v126];
  v128 = &v118[v126];
  v129 = *((_QWORD *)v128 + 3);
  *((_QWORD *)v127 + 3) = v129;
  *((_QWORD *)v127 + 4) = *((_QWORD *)v128 + 4);
  v130 = **(void (***)(char *, char *, uint64_t))(v129 - 8);
  swift_bridgeObjectRetain();
  v130(v127, v128, v129);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v117, 0, 1, v119);
  return v4;
}

_QWORD *initializeWithTake for TetraOutgoingSymmetricRatchet(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v58;
  uint64_t v59;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v13 = v12[5];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for TetraKEM768Key(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v58 = a3;
    v19 = type metadata accessor for Kyber768.PrivateKey();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, v19))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v14, v15, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v14, 0, 1, v19);
    }
    v22 = *(int *)(v16 + 20);
    v23 = &v14[v22];
    v24 = &v15[v22];
    v25 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v28 = type metadata accessor for Kyber768.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v23, v24, v28);
      *(_OWORD *)&v23[*(int *)(v25 + 20)] = *(_OWORD *)&v24[*(int *)(v25 + 20)];
      *(_QWORD *)&v23[*(int *)(v25 + 24)] = *(_QWORD *)&v24[*(int *)(v25 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    a3 = v58;
  }
  v29 = v12[6];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = type metadata accessor for TetraKEM1024Key(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v59 = a3;
    v35 = type metadata accessor for Kyber1024.PrivateKey();
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v31, 1, v35))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v30, v31, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v30, 0, 1, v35);
    }
    v38 = *(int *)(v32 + 20);
    v39 = &v30[v38];
    v40 = &v31[v38];
    v41 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      v44 = type metadata accessor for Kyber1024.PublicKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v39, v40, v44);
      *(_OWORD *)&v39[*(int *)(v41 + 20)] = *(_OWORD *)&v40[*(int *)(v41 + 20)];
      *(_QWORD *)&v39[*(int *)(v41 + 24)] = *(_QWORD *)&v40[*(int *)(v41 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    a3 = v59;
  }
  *(_OWORD *)((char *)a1 + v12[7]) = *(_OWORD *)((char *)a2 + v12[7]);
  v45 = *(int *)(a3 + 20);
  v46 = (char *)a1 + v45;
  v47 = (char *)a2 + v45;
  v48 = type metadata accessor for SymmetricRatchet();
  v49 = *(_QWORD *)(v48 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
  {
    v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v51 = type metadata accessor for SymmetricKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32))(v46, v47, v51);
    v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    *(_QWORD *)&v46[*(int *)(v52 + 48)] = *(_QWORD *)&v47[*(int *)(v52 + 48)];
    *(_QWORD *)&v46[*(int *)(v48 + 20)] = *(_QWORD *)&v47[*(int *)(v48 + 20)];
    v53 = *(int *)(v48 + 24);
    v54 = &v46[v53];
    v55 = &v47[v53];
    v56 = *((_OWORD *)v55 + 1);
    *(_OWORD *)v54 = *(_OWORD *)v55;
    *((_OWORD *)v54 + 1) = v56;
    *((_QWORD *)v54 + 4) = *((_QWORD *)v55 + 4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  }
  return a1;
}

void **assignWithTake for TetraOutgoingSymmetricRatchet(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(char *, uint64_t, uint64_t);
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(char *, uint64_t, uint64_t);
  int v67;
  int v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(char *, uint64_t, uint64_t);
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(type metadata accessor for TetraECDHKey() + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.P256.KeyAgreement.PrivateKey?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = (int *)type metadata accessor for TetraOutgoingKeyContent(0);
  v17 = v16[5];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = type metadata accessor for TetraKEM768Key(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (v24)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v18, type metadata accessor for TetraKEM768Key);
      goto LABEL_13;
    }
    v128 = a3;
    v29 = type metadata accessor for Kyber768.PrivateKey();
    v30 = *(_QWORD *)(v29 - 8);
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
    v32 = v31(v18, 1, v29);
    v33 = v31(v19, 1, v29);
    if (v32)
    {
      if (!v33)
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v18, v19, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v18, 0, 1, v29);
        goto LABEL_26;
      }
    }
    else
    {
      if (!v33)
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 40))(v18, v19, v29);
LABEL_26:
        v42 = *(int *)(v20 + 20);
        v43 = &v18[v42];
        v44 = &v19[v42];
        v45 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
        v46 = *(_QWORD *)(v45 - 8);
        v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48);
        v48 = v47(v43, 1, v45);
        v49 = v47(v44, 1, v45);
        if (v48)
        {
          if (!v49)
          {
            v50 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 32))(v43, v44, v50);
            *(_OWORD *)&v43[*(int *)(v45 + 20)] = *(_OWORD *)&v44[*(int *)(v45 + 20)];
            *(_QWORD *)&v43[*(int *)(v45 + 24)] = *(_QWORD *)&v44[*(int *)(v45 + 24)];
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
LABEL_32:
            a3 = v128;
            goto LABEL_33;
          }
        }
        else
        {
          if (!v49)
          {
            v115 = type metadata accessor for Kyber768.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 40))(v43, v44, v115);
            v116 = *(int *)(v45 + 20);
            v117 = *(_QWORD *)&v43[v116];
            v118 = *(_QWORD *)&v43[v116 + 8];
            *(_OWORD *)&v43[v116] = *(_OWORD *)&v44[v116];
            outlined consume of Data._Representation(v117, v118);
            v119 = *(int *)(v45 + 24);
            v120 = *(void **)&v43[v119];
            *(_QWORD *)&v43[v119] = *(_QWORD *)&v44[v119];

            goto LABEL_32;
          }
          outlined destroy of TetraRatchetOuterMessage((uint64_t)v43, type metadata accessor for SecureEnclave.Kyber768.PrivateKey);
        }
        v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
        goto LABEL_32;
      }
      (*(void (**)(char *, uint64_t))(v30 + 8))(v18, v29);
    }
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_26;
  }
  if (v24)
  {
LABEL_13:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM768Key?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_33;
  }
  v25 = type metadata accessor for Kyber768.PrivateKey();
  v26 = *(_QWORD *)(v25 - 8);
  v127 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v19, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber768.PrivateKey?);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v18, v19, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v18, 0, 1, v25);
  }
  v34 = *(int *)(v20 + 20);
  v35 = &v18[v34];
  v36 = &v19[v34];
  v37 = type metadata accessor for SecureEnclave.Kyber768.PrivateKey(0);
  v38 = *(_QWORD *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber768.PrivateKey?);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v40 = type metadata accessor for Kyber768.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v35, v36, v40);
    *(_OWORD *)&v35[*(int *)(v37 + 20)] = *(_OWORD *)&v36[*(int *)(v37 + 20)];
    *(_QWORD *)&v35[*(int *)(v37 + 24)] = *(_QWORD *)&v36[*(int *)(v37 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  }
  a3 = v127;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_33:
  v52 = v16[6];
  v53 = (char *)a1 + v52;
  v54 = (char *)a2 + v52;
  v55 = type metadata accessor for TetraKEM1024Key(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
  v58 = v57(v53, 1, v55);
  v59 = v57(v54, 1, v55);
  if (!v58)
  {
    if (v59)
    {
      outlined destroy of TetraRatchetOuterMessage((uint64_t)v53, type metadata accessor for TetraKEM1024Key);
      goto LABEL_39;
    }
    v130 = a3;
    v64 = type metadata accessor for Kyber1024.PrivateKey();
    v65 = *(_QWORD *)(v64 - 8);
    v66 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 48);
    v67 = v66(v53, 1, v64);
    v68 = v66(v54, 1, v64);
    if (v67)
    {
      if (!v68)
      {
        (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v53, v54, v64);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v53, 0, 1, v64);
        goto LABEL_51;
      }
    }
    else
    {
      if (!v68)
      {
        (*(void (**)(char *, char *, uint64_t))(v65 + 40))(v53, v54, v64);
LABEL_51:
        v77 = *(int *)(v55 + 20);
        v78 = &v53[v77];
        v79 = &v54[v77];
        v80 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
        v81 = *(_QWORD *)(v80 - 8);
        v82 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48);
        v83 = v82(v78, 1, v80);
        v84 = v82(v79, 1, v80);
        if (v83)
        {
          if (!v84)
          {
            v85 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 32))(v78, v79, v85);
            *(_OWORD *)&v78[*(int *)(v80 + 20)] = *(_OWORD *)&v79[*(int *)(v80 + 20)];
            *(_QWORD *)&v78[*(int *)(v80 + 24)] = *(_QWORD *)&v79[*(int *)(v80 + 24)];
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
LABEL_57:
            a3 = v130;
            goto LABEL_58;
          }
        }
        else
        {
          if (!v84)
          {
            v121 = type metadata accessor for Kyber1024.PublicKey();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 40))(v78, v79, v121);
            v122 = *(int *)(v80 + 20);
            v123 = *(_QWORD *)&v78[v122];
            v124 = *(_QWORD *)&v78[v122 + 8];
            *(_OWORD *)&v78[v122] = *(_OWORD *)&v79[v122];
            outlined consume of Data._Representation(v123, v124);
            v125 = *(int *)(v80 + 24);
            v126 = *(void **)&v78[v125];
            *(_QWORD *)&v78[v125] = *(_QWORD *)&v79[v125];

            goto LABEL_57;
          }
          outlined destroy of TetraRatchetOuterMessage((uint64_t)v78, type metadata accessor for SecureEnclave.Kyber1024.PrivateKey);
        }
        v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
        memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
        goto LABEL_57;
      }
      (*(void (**)(char *, uint64_t))(v65 + 8))(v53, v64);
    }
    v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_51;
  }
  if (v59)
  {
LABEL_39:
    v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TetraKEM1024Key?);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_58;
  }
  v60 = type metadata accessor for Kyber1024.PrivateKey();
  v61 = *(_QWORD *)(v60 - 8);
  v129 = a3;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v54, 1, v60))
  {
    v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Kyber1024.PrivateKey?);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v53, v54, v60);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v53, 0, 1, v60);
  }
  v69 = *(int *)(v55 + 20);
  v70 = &v53[v69];
  v71 = &v54[v69];
  v72 = type metadata accessor for SecureEnclave.Kyber1024.PrivateKey(0);
  v73 = *(_QWORD *)(v72 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
  {
    v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SecureEnclave.Kyber1024.PrivateKey?);
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
  }
  else
  {
    v75 = type metadata accessor for Kyber1024.PublicKey();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 32))(v70, v71, v75);
    *(_OWORD *)&v70[*(int *)(v72 + 20)] = *(_OWORD *)&v71[*(int *)(v72 + 20)];
    *(_QWORD *)&v70[*(int *)(v72 + 24)] = *(_QWORD *)&v71[*(int *)(v72 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
  }
  a3 = v129;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
LABEL_58:
  v87 = v16[7];
  v88 = (uint64_t)a1 + v87;
  v89 = (char *)a2 + v87;
  v90 = *(unint64_t *)((char *)a1 + v87 + 8);
  if (v90 >> 60 == 15)
  {
LABEL_61:
    *(_OWORD *)v88 = *(_OWORD *)v89;
    goto LABEL_63;
  }
  v91 = *((_QWORD *)v89 + 1);
  if (v91 >> 60 == 15)
  {
    outlined destroy of Data(v88);
    goto LABEL_61;
  }
  v92 = *(_QWORD *)v88;
  *(_QWORD *)v88 = *(_QWORD *)v89;
  *(_QWORD *)(v88 + 8) = v91;
  outlined consume of Data._Representation(v92, v90);
LABEL_63:
  v93 = *(int *)(a3 + 20);
  v94 = (char *)a1 + v93;
  v95 = (char *)a2 + v93;
  v96 = type metadata accessor for SymmetricRatchet();
  v97 = *(_QWORD *)(v96 - 8);
  v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v97 + 48);
  v99 = v98(v94, 1, v96);
  v100 = v98(v95, 1, v96);
  if (!v99)
  {
    if (!v100)
    {
      v109 = type metadata accessor for SymmetricKey();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v109 - 8) + 40))(v94, v95, v109);
      v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      *(_QWORD *)&v94[*(int *)(v110 + 48)] = *(_QWORD *)&v95[*(int *)(v110 + 48)];
      *(_QWORD *)&v94[*(int *)(v96 + 20)] = *(_QWORD *)&v95[*(int *)(v96 + 20)];
      swift_bridgeObjectRelease();
      v111 = *(int *)(v96 + 24);
      v112 = (uint64_t)&v94[v111];
      v113 = &v95[v111];
      __swift_destroy_boxed_opaque_existential_0(v112);
      v114 = *((_OWORD *)v113 + 1);
      *(_OWORD *)v112 = *(_OWORD *)v113;
      *(_OWORD *)(v112 + 16) = v114;
      *(_QWORD *)(v112 + 32) = *((_QWORD *)v113 + 4);
      return a1;
    }
    outlined destroy of TetraRatchetOuterMessage((uint64_t)v94, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
    goto LABEL_68;
  }
  if (v100)
  {
LABEL_68:
    v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
    return a1;
  }
  v101 = type metadata accessor for SymmetricKey();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v94, v95, v101);
  v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  *(_QWORD *)&v94[*(int *)(v102 + 48)] = *(_QWORD *)&v95[*(int *)(v102 + 48)];
  *(_QWORD *)&v94[*(int *)(v96 + 20)] = *(_QWORD *)&v95[*(int *)(v96 + 20)];
  v103 = *(int *)(v96 + 24);
  v104 = &v94[v103];
  v105 = &v95[v103];
  v106 = *((_OWORD *)v105 + 1);
  *(_OWORD *)v104 = *(_OWORD *)v105;
  *((_OWORD *)v104 + 1) = v106;
  *((_QWORD *)v104 + 4) = *((_QWORD *)v105 + 4);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
  return a1;
}

uint64_t getEnumTagSinglePayload for TetraOutgoingSymmetricRatchet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB37908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for TetraOutgoingKeyContent(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for TetraOutgoingSymmetricRatchet()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20BB3798C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for TetraOutgoingKeyContent(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for TetraOutgoingSymmetricRatchet(uint64_t a1)
{
  return type metadata accessor for Kyber1024ObjCPublicKey(a1, (uint64_t *)&type metadata singleton initialization cache for TetraOutgoingSymmetricRatchet);
}

void type metadata completion function for TetraOutgoingSymmetricRatchet()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for TetraOutgoingKeyContent(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SymmetricRatchet?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for SymmetricRatchet?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SymmetricRatchet?)
  {
    type metadata accessor for SymmetricRatchet();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SymmetricRatchet?);
  }
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000012;
  else
    v3 = 0x506465646F636E65;
  if (v2)
    v4 = 0xEF6675626F746F72;
  else
    v4 = 0x800000020BB47390;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000012;
  else
    v5 = 0x506465646F636E65;
  if ((a2 & 1) != 0)
    v6 = 0x800000020BB47390;
  else
    v6 = 0xEF6675626F746F72;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20BB37BFC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_20BB37CCC + 4 * byte_20BB44D97[a2]))(0x654B3836376D656BLL);
}

uint64_t sub_20BB37CCC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x654B3836376D656BLL && v1 == 0xE900000000000079)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t TetraOutgoingSymmetricRatchet.init(symmetricRatchetHead:outgoingPublicKeys:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricKey?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SymmetricKey();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v36 = (uint64_t)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v29 - v16;
  v18 = a3 + *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v19 = type metadata accessor for SymmetricRatchet();
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v35 = v18;
  v34(v18, 1, 1, v19);
  outlined init with copy of TetraSessionStates?(a1, (uint64_t)v11, &demangling cache variable for type metadata for SymmetricKey?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of TetraSessionStates?(a1, &demangling cache variable for type metadata for SymmetricKey?);
    outlined destroy of TetraSessionStates?((uint64_t)v11, &demangling cache variable for type metadata for SymmetricKey?);
  }
  else
  {
    v30 = v8;
    v31 = a1;
    v32 = a3;
    v33 = a2;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v11, v12);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(v36, v17, v12);
    if (one-time initialization token for tetraSymmetricKeyRatchetStep != -1)
      swift_once();
    v20 = tetraSymmetricKeyRatchetStep;
    v21 = *(_QWORD *)algn_253E6C4E8;
    v22 = qword_253E6C4F0;
    v23 = unk_253E6C4F8;
    v24 = qword_253E6C500;
    v25 = byte_253E6C508;
    v37[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA384>);
    v37[4] = &protocol witness table for HKDFRatchet<A>;
    v26 = swift_allocObject();
    v37[0] = v26;
    *(_QWORD *)(v26 + 16) = v20;
    *(_QWORD *)(v26 + 24) = v21;
    *(_QWORD *)(v26 + 32) = v22;
    *(_QWORD *)(v26 + 40) = v23;
    *(_QWORD *)(v26 + 48) = v24;
    *(_BYTE *)(v26 + 56) = v25;
    outlined copy of Data._Representation(v20, v21);
    outlined copy of Data._Representation(v22, v23);
    v27 = (uint64_t)v30;
    SymmetricRatchet.init(ck:index:step:)(v36, 0, (uint64_t)v37, (uint64_t)v30);
    outlined destroy of TetraSessionStates?(v31, &demangling cache variable for type metadata for SymmetricKey?);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
    v34(v27, 0, 1, v19);
    outlined assign with take of SymmetricRatchet?(v27, v35);
    a3 = v32;
    a2 = v33;
  }
  return outlined init with take of TetraRatchetState(a2, a3, type metadata accessor for TetraOutgoingKeyContent);
}

uint64_t TetraIncomingSymmetricRatchet.init(symmetricRatchetHead:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  v30 = a2;
  v3 = type metadata accessor for SymmetricKey();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v28 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v26 - v7;
  v9 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = v4;
  v12 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v29 = a1;
  v27 = v12;
  v12(v8, a1, v3);
  if (one-time initialization token for tetraSymmetricKeyRatchetStep != -1)
    swift_once();
  v13 = tetraSymmetricKeyRatchetStep;
  v14 = *(_QWORD *)algn_253E6C4E8;
  v16 = qword_253E6C4F0;
  v15 = unk_253E6C4F8;
  v17 = qword_253E6C500;
  v18 = byte_253E6C508;
  v32[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA384>);
  v32[4] = &protocol witness table for HKDFRatchet<A>;
  v19 = swift_allocObject();
  v32[0] = v19;
  *(_QWORD *)(v19 + 16) = v13;
  *(_QWORD *)(v19 + 24) = v14;
  *(_QWORD *)(v19 + 32) = v16;
  *(_QWORD *)(v19 + 40) = v15;
  *(_QWORD *)(v19 + 48) = v17;
  *(_BYTE *)(v19 + 56) = v18;
  *(_QWORD *)&v11[*(int *)(v9 + 20)] = MEMORY[0x24BEE4B00];
  outlined copy of Data._Representation(v13, v14);
  outlined copy of Data._Representation(v16, v15);
  if (SymmetricKey.bitCount.getter() <= 255)
  {
    v24 = type metadata accessor for CryptoKitError();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type CryptoKitError and conformance CryptoKitError, (uint64_t (*)(uint64_t))MEMORY[0x24BDC61A8], MEMORY[0x24BDC61C0]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v25, *MEMORY[0x24BDC6190], v24);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v3);
    swift_bridgeObjectRelease();
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    outlined init with copy of SymmetricRatchetStep((uint64_t)v32, (uint64_t)&v11[*(int *)(v9 + 24)]);
    v20 = v28;
    v27(v28, v8, v3);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v32);
    v21 = v31;
    v22 = *(void (**)(char *, uint64_t))(v31 + 8);
    v22(v8, v3);
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v11, v20, v3);
    *(_QWORD *)&v11[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                           + 48)] = 0;
    v22(v29, v3);
    return outlined init with take of TetraRatchetState((uint64_t)v11, v30, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
  }
  return result;
}

NSObject *TetraIncomingSymmetricRatchet.openMessage(_:messageIndex:messageKeyIndicator:discardMessageKey:)(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *result;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;
  char *v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  LODWORD(v50) = a6;
  v46 = a4;
  v42 = a1;
  v49 = type metadata accessor for SymmetricKey();
  v45 = *(_QWORD *)(v49 - 8);
  v10 = MEMORY[0x24BDAC7A8](v49);
  v44 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v40 - v12;
  v14 = *(_QWORD *)(v6
                  + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64))
                           + 48));
  v47 = a3 - v14;
  LODWORD(v48) = a3 < v14;
  LOBYTE(v15) = static os_log_type_t.info.getter();
  result = MessageProtectionLog();
  if (result)
  {
    v17 = result;
    v15 = v15;
    v18 = os_log_type_enabled(result, (os_log_type_t)v15);
    v43 = a5;
    v41 = a2;
    if (v18)
    {
      v19 = swift_slowAlloc();
      *(_DWORD *)v19 = 134218752;
      v52 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 1024;
      LODWORD(v52) = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 18) = 2048;
      v52 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 28) = 1024;
      LODWORD(v52) = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_20BABB000, v17, (os_log_type_t)v15, "Tetra ratchet with current index %llu and incoming %u for delta of: %llu, and overflow %{BOOL}d ", (uint8_t *)v19, 0x22u);
      MEMORY[0x20BD3C498](v19, -1, -1);
    }

    v20 = v51;
    SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(a3, v50 & 1, (uint64_t)v13);
    if (v20)
      return v15;
    v52 = 0xD00000000000001ALL;
    v53 = 0x800000020BB48100;
    v21._object = (void *)0x800000020BB49150;
    v21._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v21);
    v22 = specialized Data.init<A>(_:)(v52, v53);
    v24 = v23;
    v52 = v22;
    v53 = v23;
    type metadata accessor for SHA384();
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B20], MEMORY[0x24BDC6B10]);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC63E0], MEMORY[0x24BDC6398]);
    lazy protocol witness table accessor for type Data and conformance Data();
    v25 = v44;
    v26 = v49;
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    outlined consume of Data._Representation(v22, v24);
    SymmetricKey.withUnsafeBytes<A>(_:)();
    v27 = *(void (**)(char *, uint64_t))(v45 + 8);
    v27(v25, v26);
    v29 = v52;
    v28 = v53;
    v30 = v43;
    specialized static Data.== infix(_:_:)(v52, v53);
    if ((v31 & 1) != 0)
    {
      specialized static TetraMessageEncoding.openMessage(_:messageKey:)(v42, v41, (uint64_t)v13);
      v15 = v39;
      v27(v13, v49);
      outlined consume of Data._Representation(v29, v28);
      return v15;
    }
    v51 = v13;
    LOBYTE(v15) = static os_log_type_t.error.getter();
    result = MessageProtectionLog();
    if (result)
    {
      v32 = result;
      v15 = v15;
      if (os_log_type_enabled(result, (os_log_type_t)v15))
      {
        outlined copy of Data._Representation(v29, v28);
        v50 = v27;
        v33 = v46;
        outlined copy of Data._Representation(v46, v30);
        outlined copy of Data._Representation(v29, v28);
        outlined copy of Data._Representation(v33, v30);
        v34 = swift_slowAlloc();
        v48 = swift_slowAlloc();
        v52 = v48;
        *(_DWORD *)v34 = 136315394;
        LODWORD(v47) = v15;
        v35 = Data.base64EncodedString(options:)(0);
        v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35._countAndFlagsBits, (unint64_t)v35._object, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v29, v28);
        outlined consume of Data._Representation(v29, v28);
        *(_WORD *)(v34 + 12) = 2080;
        v36 = Data.base64EncodedString(options:)(0);
        v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36._countAndFlagsBits, (unint64_t)v36._object, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v33, v30);
        v37 = v33;
        v27 = v50;
        outlined consume of Data._Representation(v37, v30);
        _os_log_impl(&dword_20BABB000, v32, (os_log_type_t)v47, "Mismatch in ratchet state, attempting to decrypt with message key with indicator: %s instead of %s.", (uint8_t *)v34, 0x16u);
        v15 = v48;
        swift_arrayDestroy();
        MEMORY[0x20BD3C498](v15, -1, -1);
        MEMORY[0x20BD3C498](v34, -1, -1);
      }

      lazy protocol witness table accessor for type TetraRatchetingErrors and conformance TetraRatchetingErrors();
      swift_allocError();
      *v38 = 3;
      swift_willThrow();
      outlined consume of Data._Representation(v29, v28);
      v27(v51, v49);
      return v15;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t TetraOutgoingSymmetricRatchet.sealMessage(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;

  v43 = a3;
  v44 = a4;
  v41 = a1;
  v42 = a2;
  v40 = a5;
  v47 = type metadata accessor for SymmetricKey();
  v7 = *(_QWORD *)(v47 - 8);
  v8 = MEMORY[0x24BDAC7A8](v47);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v39 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v39 - v17;
  v19 = v5 + *(int *)(type metadata accessor for TetraOutgoingSymmetricRatchet(0) + 20);
  v20 = type metadata accessor for SymmetricRatchet();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20) == 1)
  {
    __break(1u);
LABEL_12:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v21 = *(_QWORD *)(v19 + *(int *)(v13 + 48));
  if (v21 == -1)
  {
    lazy protocol witness table accessor for type SymmetricRatchetErrors and conformance SymmetricRatchetErrors();
    swift_allocError();
    *v24 = 0;
    return swift_willThrow();
  }
  result = SymmetricRatchet.messageKey(forIndex:discardMessageKey:)(v21, 1, (uint64_t)v12);
  if (!v6)
  {
    v23 = *(int *)(v13 + 48);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v18, v12, v47);
    *(_QWORD *)&v18[v23] = v21;
    if (HIDWORD(v21))
    {
      lazy protocol witness table accessor for type TetraSymmetricRatchetErrors and conformance TetraSymmetricRatchetErrors();
      swift_allocError();
      swift_willThrow();
      return outlined destroy of TetraSessionStates?((uint64_t)v18, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
    }
    v25 = specialized static TetraMessageEncoding.sealMessage(_:messageKey:)(v41, v42, v43, v44, (uint64_t)v18);
    v43 = v26;
    v44 = v25;
    v45 = 0xD00000000000001ALL;
    v46 = 0x800000020BB48100;
    v27._object = (void *)0x800000020BB49150;
    v42 = v23;
    v27._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v27);
    v28 = specialized Data.init<A>(_:)(v45, v46);
    v30 = v29;
    v45 = v28;
    v46 = v29;
    v41 = type metadata accessor for SHA384();
    v39 = lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type SHA384 and conformance SHA384, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6B20], MEMORY[0x24BDC6B10]);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError((unint64_t *)&lazy protocol witness table cache variable for type SymmetricKey and conformance SymmetricKey, (uint64_t (*)(uint64_t))MEMORY[0x24BDC63E0], MEMORY[0x24BDC6398]);
    lazy protocol witness table accessor for type Data and conformance Data();
    v31 = v47;
    static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)();
    outlined consume of Data._Representation(v28, v30);
    SymmetricKey.withUnsafeBytes<A>(_:)();
    v32 = *(void (**)(char *, uint64_t))(v7 + 8);
    v32(v10, v31);
    v33 = v45;
    v34 = v46;
    v35 = *(int *)(v13 + 48);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v16, v18, v31);
    v36 = *(_QWORD *)&v18[v42];
    *(_QWORD *)&v16[v35] = v36;
    if (!HIDWORD(v36))
    {
      outlined destroy of TetraSessionStates?((uint64_t)v18, &demangling cache variable for type metadata for (key: SymmetricKey, index: UInt64));
      result = ((uint64_t (*)(char *, uint64_t))v32)(v16, v31);
      v37 = v40;
      v38 = v43;
      *v40 = v44;
      v37[1] = v38;
      *((_DWORD *)v37 + 4) = v36;
      v37[3] = v33;
      v37[4] = v34;
      return result;
    }
    goto LABEL_12;
  }
  return result;
}

uint64_t TetraOutgoingSymmetricRatchet.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[5];
  char v54;

  v48 = a2;
  v50 = type metadata accessor for TetraOutgoingKeyContent(0);
  MEMORY[0x24BDAC7A8](v50);
  v49 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
  MEMORY[0x24BDAC7A8](v4);
  v46 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraOutgoingSymmetricRatchet.CodingKeys>);
  v51 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(int *)(v10 + 20);
  v47 = v12;
  v14 = (uint64_t)&v12[v13];
  v15 = type metadata accessor for SymmetricRatchet();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v14, 1, 1, v15);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys();
  v17 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
  {
LABEL_2:
    __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
    return outlined destroy of TetraSessionStates?(v14, &demangling cache variable for type metadata for SymmetricRatchet?);
  }
  else
  {
    v41 = v16;
    v42 = v15;
    v52 = v14;
    v45 = a1;
    v19 = KeyedDecodingContainer.allKeys.getter();
    v20 = *(_QWORD *)(v19 + 16);
    v21 = v6;
    if (v20)
    {
      v43 = v8;
      v44 = v6;
      swift_bridgeObjectRetain();
      v22 = 0;
      v23 = v51;
      while ((*(_BYTE *)(v19 + v22 + 32) & 1) != 0)
      {
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v24 & 1) != 0)
          goto LABEL_11;
        if (v20 == ++v22)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease();
LABEL_11:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v54 = 0;
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v25 = v53[1];
      v39 = v53[0];
      v40 = 0;
      if (one-time initialization token for tetraSymmetricKeyRatchetStep != -1)
        swift_once();
      v26 = tetraSymmetricKeyRatchetStep;
      v27 = *(_QWORD *)algn_253E6C4E8;
      v28 = qword_253E6C4F0;
      v29 = unk_253E6C4F8;
      v30 = qword_253E6C500;
      v31 = byte_253E6C508;
      v53[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA384>);
      v53[4] = &protocol witness table for HKDFRatchet<A>;
      v32 = swift_allocObject();
      v53[0] = v32;
      *(_QWORD *)(v32 + 16) = v26;
      *(_QWORD *)(v32 + 24) = v27;
      *(_QWORD *)(v32 + 32) = v28;
      *(_QWORD *)(v32 + 40) = v29;
      *(_QWORD *)(v32 + 48) = v30;
      *(_BYTE *)(v32 + 56) = v31;
      outlined copy of Data._Representation(v26, v27);
      outlined copy of Data._Representation(v28, v29);
      v33 = v46;
      v34 = v40;
      SymmetricRatchet.init(data:step:)(v39, v25, (uint64_t)v53, v46);
      if (v34)
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v43, v44);
        a1 = v45;
        v14 = v52;
        goto LABEL_2;
      }
      v41(v33, 0, 1, v42);
      outlined assign with take of SymmetricRatchet?(v33, v52);
LABEL_16:
      v8 = v43;
      v21 = v44;
    }
    else
    {
      swift_bridgeObjectRelease();
      v23 = v51;
    }
    LOBYTE(v53[0]) = 1;
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraOutgoingKeyContent and conformance TetraOutgoingKeyContent, type metadata accessor for TetraOutgoingKeyContent, (uint64_t)&protocol conformance descriptor for TetraOutgoingKeyContent);
    v35 = (uint64_t)v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v21);
    v36 = (uint64_t)v45;
    v37 = (uint64_t)v47;
    outlined init with take of TetraRatchetState(v35, (uint64_t)v47, type metadata accessor for TetraOutgoingKeyContent);
    outlined init with copy of TetraOutgoingSymmetricRatchet(v37, v48);
    __swift_destroy_boxed_opaque_existential_0(v36);
    return outlined destroy of TetraRatchetOuterMessage(v37, type metadata accessor for TetraOutgoingSymmetricRatchet);
  }
}

uint64_t TetraOutgoingSymmetricRatchet.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SymmetricRatchet();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraOutgoingSymmetricRatchet.CodingKeys>);
  v23 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  outlined init with copy of TetraSessionStates?(v2 + *(int *)(v13 + 20), (uint64_t)v6, &demangling cache variable for type metadata for SymmetricRatchet?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of TetraSessionStates?((uint64_t)v6, &demangling cache variable for type metadata for SymmetricRatchet?);
    v14 = v21;
LABEL_4:
    LOBYTE(v24) = 1;
    type metadata accessor for TetraOutgoingKeyContent(0);
    lazy protocol witness table accessor for type CryptoKitError and conformance CryptoKitError(&lazy protocol witness table cache variable for type TetraOutgoingKeyContent and conformance TetraOutgoingKeyContent, type metadata accessor for TetraOutgoingKeyContent, (uint64_t)&protocol conformance descriptor for TetraOutgoingKeyContent);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v12, v14);
  }
  outlined init with take of TetraRatchetState((uint64_t)v6, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
  v15 = SymmetricRatchet.serializedData()();
  v17 = v16;
  v24 = v15;
  v25 = v16;
  v26 = 0;
  lazy protocol witness table accessor for type Data and conformance Data();
  v14 = v21;
  v18 = v22;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined consume of Data._Representation(v15, v17);
  outlined destroy of TetraRatchetOuterMessage((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
  if (!v18)
    goto LABEL_4;
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v12, v14);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TetraOutgoingSymmetricRatchet.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TetraOutgoingSymmetricRatchet.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraOutgoingSymmetricRatchet.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TetraOutgoingSymmetricRatchet.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TetraOutgoingSymmetricRatchet.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TetraOutgoingSymmetricRatchet.CodingKeys.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TetraOutgoingSymmetricRatchet.CodingKeys(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x506465646F636E65;
  if (*v1)
    v2 = 0xD000000000000012;
  v3 = 0x800000020BB47390;
  if (!*v1)
    v3 = 0xEF6675626F746F72;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraOutgoingSymmetricRatchet.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000012;
  else
    return 0x506465646F636E65;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraOutgoingSymmetricRatchet.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TetraOutgoingSymmetricRatchet.CodingKeys.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraOutgoingSymmetricRatchet.CodingKeys()
{
  lazy protocol witness table accessor for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraOutgoingSymmetricRatchet.CodingKeys()
{
  lazy protocol witness table accessor for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraOutgoingSymmetricRatchet@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraOutgoingSymmetricRatchet.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraOutgoingSymmetricRatchet(_QWORD *a1)
{
  return TetraOutgoingSymmetricRatchet.encode(to:)(a1);
}

uint64_t TetraIncomingSymmetricRatchet.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[4];
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  _QWORD v34[5];
  _BYTE *v35;

  v33 = a2;
  v3 = type metadata accessor for SymmetricRatchet();
  MEMORY[0x24BDAC7A8](v3);
  v5 = &v26[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TetraIncomingSymmetricRatchet.CodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for TetraIncomingSymmetricRatchet(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys();
  v13 = (uint64_t)v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    v32 = v12;
    v14 = v7;
    v35 = v5;
    v15 = v33;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v16 = v6;
    v17 = v34[1];
    v30 = v34[0];
    v31 = v9;
    v29 = v14;
    if (one-time initialization token for tetraSymmetricKeyRatchetStep != -1)
      swift_once();
    v19 = tetraSymmetricKeyRatchetStep;
    v18 = *(_QWORD *)algn_253E6C4E8;
    v21 = qword_253E6C4F0;
    v20 = unk_253E6C4F8;
    v28 = qword_253E6C500;
    v27 = byte_253E6C508;
    v34[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKDFRatchet<SHA384>);
    v34[4] = &protocol witness table for HKDFRatchet<A>;
    v22 = swift_allocObject();
    v34[0] = v22;
    *(_QWORD *)(v22 + 16) = v19;
    *(_QWORD *)(v22 + 24) = v18;
    *(_QWORD *)(v22 + 32) = v21;
    *(_QWORD *)(v22 + 40) = v20;
    *(_QWORD *)(v22 + 48) = v28;
    *(_BYTE *)(v22 + 56) = v27;
    outlined copy of Data._Representation(v19, v18);
    outlined copy of Data._Representation(v21, v20);
    v23 = (uint64_t)v35;
    SymmetricRatchet.init(data:step:)(v30, v17, (uint64_t)v34, (uint64_t)v35);
    (*(void (**)(_BYTE *, uint64_t))(v29 + 8))(v31, v16);
    v24 = (uint64_t)v32;
    outlined init with take of TetraRatchetState(v23, (uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for SymmetricRatchet);
    outlined init with take of TetraRatchetState(v24, v15, type metadata accessor for TetraIncomingSymmetricRatchet);
  }
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
}

uint64_t TetraIncomingSymmetricRatchet.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TetraIncomingSymmetricRatchet.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v6 = SymmetricRatchet.serializedData()();
  v8 = v7;
  v10[0] = v6;
  v10[1] = v7;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  outlined consume of Data._Representation(v6, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TetraIncomingSymmetricRatchet.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TetraIncomingSymmetricRatchet.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TetraIncomingSymmetricRatchet.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TetraIncomingSymmetricRatchet.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance TetraIncomingSymmetricRatchet.CodingKeys, *a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TetraIncomingSymmetricRatchet.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = 0x506465646F636E65;
  a1[1] = 0xEF6675626F746F72;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TetraIncomingSymmetricRatchet.CodingKeys()
{
  return 0x506465646F636E65;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TetraIncomingSymmetricRatchet.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance TetraIncomingSymmetricRatchet.CodingKeys, v3);
  result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TetraIncomingSymmetricRatchet.CodingKeys()
{
  lazy protocol witness table accessor for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TetraIncomingSymmetricRatchet.CodingKeys()
{
  lazy protocol witness table accessor for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance TetraIncomingSymmetricRatchet@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TetraIncomingSymmetricRatchet.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TetraIncomingSymmetricRatchet(_QWORD *a1)
{
  return TetraIncomingSymmetricRatchet.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraOutgoingSymmetricRatchet.CodingKeys, &type metadata for TetraOutgoingSymmetricRatchet.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraOutgoingSymmetricRatchet.CodingKeys, &type metadata for TetraOutgoingSymmetricRatchet.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraOutgoingSymmetricRatchet.CodingKeys, &type metadata for TetraOutgoingSymmetricRatchet.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraOutgoingSymmetricRatchet.CodingKeys, &type metadata for TetraOutgoingSymmetricRatchet.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraOutgoingSymmetricRatchet.CodingKeys and conformance TetraOutgoingSymmetricRatchet.CodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of TetraOutgoingSymmetricRatchet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TetraOutgoingSymmetricRatchet(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20BB39EE4()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t outlined assign with take of SymmetricRatchet?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SymmetricRatchet?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraIncomingSymmetricRatchet.CodingKeys, &type metadata for TetraIncomingSymmetricRatchet.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraIncomingSymmetricRatchet.CodingKeys, &type metadata for TetraIncomingSymmetricRatchet.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraIncomingSymmetricRatchet.CodingKeys, &type metadata for TetraIncomingSymmetricRatchet.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys;
  if (!lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys)
  {
    result = MEMORY[0x20BD3C414](&protocol conformance descriptor for TetraIncomingSymmetricRatchet.CodingKeys, &type metadata for TetraIncomingSymmetricRatchet.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TetraIncomingSymmetricRatchet.CodingKeys and conformance TetraIncomingSymmetricRatchet.CodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TetraIncomingSymmetricRatchet.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20BB3A020 + 4 * byte_20BB44D9E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20BB3A040 + 4 * byte_20BB44DA3[v4]))();
}

_BYTE *sub_20BB3A020(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20BB3A040(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20BB3A048(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20BB3A050(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20BB3A058(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20BB3A060(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TetraIncomingSymmetricRatchet.CodingKeys()
{
  return &type metadata for TetraIncomingSymmetricRatchet.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for TetraOutgoingSymmetricRatchet.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20BB3A0C8 + 4 * byte_20BB44DAD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20BB3A0FC + 4 * byte_20BB44DA8[v4]))();
}

uint64_t sub_20BB3A0FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB3A104(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20BB3A10CLL);
  return result;
}

uint64_t sub_20BB3A118(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20BB3A120);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20BB3A124(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20BB3A12C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TetraOutgoingSymmetricRatchet.CodingKeys()
{
  return &type metadata for TetraOutgoingSymmetricRatchet.CodingKeys;
}

id TetraSessionSerialized.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id TetraSessionSerialized.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for TetraSessionSerialized();
  v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for TetraSessionSerialized()
{
  return objc_opt_self();
}

id TetraSessionSerialized.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TetraSessionSerialized();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static TetraSessionSerialized.fetchRequest()()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone(MEMORY[0x24BDBB678]);
  v1 = (void *)MEMORY[0x20BD3B538](0xD000000000000016, 0x800000020BB47C00);
  v2 = objc_msgSend(v0, sel_initWithEntityName_, v1);

  return v2;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in TetraSessionSerialized()
{
  return MEMORY[0x24BEE0948];
}

uint64_t protocol witness for Identifiable.id.getter in conformance TetraSessionSerialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for TetraSessionSerialized();
  result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

void MPLogAndAssignCFError_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_20BABB000, v0, v1, "%@. The error was not assigned to a CFError.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void MPLogAndAssignCFError_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_20BABB000, v0, v1, "%@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void MPLogAndAssignError_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0_0(&dword_20BABB000, v0, v1, "%@. The error was not assigned to an NSError.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void nextMultiple_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = 134218240;
  v4 = a1;
  v5 = 2048;
  v6 = a2;
  _os_log_error_impl(&dword_20BABB000, log, OS_LOG_TYPE_ERROR, "Message Encryption: nextPowerOfTwo invalid input %llx, %llx", (uint8_t *)&v3, 0x16u);
}

void SecMPPublicIdentityCreateFromBytes_cold_1(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a1, "description");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl(&dword_20BABB000, a2, OS_LOG_TYPE_ERROR, "Failed to create legacy public key from bytes: %@", (uint8_t *)&v4, 0xCu);

}

void SecMPPIAppendPKIEncryptedData_cold_1(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl(&dword_20BABB000, log, OS_LOG_TYPE_ERROR, "Failed to encrypt data to legacy public key.", v1, 2u);
}

void SecMPFullIdentityCreateFromData_cold_1(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  objc_msgSend(a1, "description");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_0(&dword_20BABB000, v2, v3, "Failed to initialize legacy key: %@", v4, v5, v6, v7, 2u);

  OUTLINED_FUNCTION_1_0();
}

void SecMPFIAppendSignature_cold_1(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  objc_msgSend(a1, "description");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_0(&dword_20BABB000, v2, v3, "Failed to perform legacy signature: %@", v4, v5, v6, v7, 2u);

  OUTLINED_FUNCTION_1_0();
}

void SecMPFullIdentityCreateFromRefs_cold_1()
{
  __assert_rtn("SecMPFullIdentityCreateFromRefs", "SecMessageFullIdentity.m", 215, "[recoveredMessage isEqualToData:message]");
}

void SecMPFullIdentityCreateFromRefs_cold_2()
{
  __assert_rtn("SecMPFullIdentityCreateFromRefs", "SecMessageFullIdentity.m", 214, "SecMPVerifyAndExposeMessage((__bridge CFDataRef)protectedMessage, publicIdentityRef, identityRef, (__bridge CFMutableDataRef)recoveredMessage, NULL)");
}

void SecMPFullIdentityCreateFromRefs_cold_3()
{
  __assert_rtn("SecMPFullIdentityCreateFromRefs", "SecMessageFullIdentity.m", 212, "SecMPSignAndProtectMessage((__bridge CFDataRef)message, identityRef, publicIdentityRef, (__bridge CFMutableDataRef)protectedMessage, NULL)");
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t __DataStorage.init(length:)()
{
  return MEMORY[0x24BDCBBD0]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t __DataStorage.init(capacity:)()
{
  return MEMORY[0x24BDCBBF8]();
}

uint64_t type metadata accessor for __DataStorage()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x24BDCC1E0]();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCCA20]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x24BDCCA40]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x24BDCCA48]();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return MEMORY[0x24BDCCA60]();
}

uint64_t PropertyListEncoder.init()()
{
  return MEMORY[0x24BDCCA88]();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return MEMORY[0x24BDCCA90]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t NSFastEnumerationIterator.next()()
{
  return MEMORY[0x24BDCD508]();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return MEMORY[0x24BDCD520]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x24BDCD870]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
  MEMORY[0x24BDCDB60]();
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
  MEMORY[0x24BDCDBC8]();
}

uint64_t Data.description.getter()
{
  return MEMORY[0x24BDCDBE0]();
}

uint64_t Data._copyContents(initializing:)()
{
  return MEMORY[0x24BDCDBF8]();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t Data._Representation.resetBytes(in:)()
{
  return MEMORY[0x24BDCDC20]();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return MEMORY[0x24BDCDC40]();
}

uint64_t Data._Representation.subscript.getter()
{
  return MEMORY[0x24BDCDC58]();
}

uint64_t Data._Representation.subscript.setter()
{
  return MEMORY[0x24BDCDC68]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCDCA8](options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t Data.hash(into:)()
{
  return MEMORY[0x24BDCDCF8]();
}

uint64_t Data.append(_:)()
{
  return MEMORY[0x24BDCDD40]();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return MEMORY[0x24BDCDD78]();
}

uint64_t Data.advanced(by:)()
{
  return MEMORY[0x24BDCDD90]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x24BDCE5D8]();
}

uint64_t Date.init()()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t isFeatureEnabled(_:)()
{
  return MEMORY[0x24BE30BE0]();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5118]();
}

uint64_t _CFObject.hash(into:)()
{
  return MEMORY[0x24BEE5120]();
}

uint64_t _CFObject.hashValue.getter()
{
  return MEMORY[0x24BEE5130]();
}

uint64_t static Padme.paddedMessageByteCount(_:)()
{
  return MEMORY[0x24BE2A378]();
}

uint64_t static Internal.areAllInitialized(_:)()
{
  return MEMORY[0x24BE5BE28]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x24BE5BF00]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x24BE5BF08]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x24BE5BF10]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x24BE5BFC0]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x24BE5BFC8]();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return MEMORY[0x24BE5C008]();
}

uint64_t _MessageImplementationBase.isEqualTo(message:)()
{
  return MEMORY[0x24BE5C010]();
}

uint64_t Enum.hash(into:)()
{
  return MEMORY[0x24BE5C018]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x24BE5C038]();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return MEMORY[0x24BE5C070]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return MEMORY[0x24BE5C0A0]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt32Field(value:)()
{
  return MEMORY[0x24BE5C128]();
}

uint64_t dispatch thunk of Decoder.decodeSingularUInt64Field(value:)()
{
  return MEMORY[0x24BE5C138]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return MEMORY[0x24BE5C148]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x24BE5C160]();
}

uint64_t Message.isInitialized.getter()
{
  return MEMORY[0x24BE5C1B0]();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return MEMORY[0x24BE5C1B8]();
}

uint64_t Message.serializedData(partial:)()
{
  return MEMORY[0x24BE5C1C0]();
}

uint64_t Message.debugDescription.getter()
{
  return MEMORY[0x24BE5C1D0]();
}

uint64_t Message.hash(into:)()
{
  return MEMORY[0x24BE5C1E8]();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C278]();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C298]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2F0]();
}

uint64_t dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2F8]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C300]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C310]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x24BE5C330]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BE5C340]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x24BE5C350]();
}

uint64_t os_log(_:dso:log:_:_:)()
{
  return MEMORY[0x24BEE76F0]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t type metadata accessor for CryptoKitError()
{
  return MEMORY[0x24BDC61A8]();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return MEMORY[0x24BDC62A8]();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return MEMORY[0x24BDC62B0]();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return MEMORY[0x24BDC62C8]();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return MEMORY[0x24BDC62F0]();
}

uint64_t type metadata accessor for SHA384Digest()
{
  return MEMORY[0x24BDC6320]();
}

uint64_t SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)()
{
  return MEMORY[0x24BDC6370]();
}

uint64_t SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)()
{
  return MEMORY[0x24BDC6378]();
}

uint64_t type metadata accessor for SharedSecret()
{
  return MEMORY[0x24BDC6380]();
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x24BDC63A0]();
}

uint64_t SymmetricKey.init<A>(data:)()
{
  return MEMORY[0x24BDC63B0]();
}

uint64_t SymmetricKey.init(size:)()
{
  return MEMORY[0x24BDC63C0]();
}

uint64_t SymmetricKey.bitCount.getter()
{
  return MEMORY[0x24BDC63D0]();
}

uint64_t type metadata accessor for SymmetricKey()
{
  return MEMORY[0x24BDC63E0]();
}

uint64_t static SecureEnclave.isAvailable.getter()
{
  return MEMORY[0x24BDC6440]();
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)()
{
  return MEMORY[0x24BDC6448]();
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.publicKey.getter()
{
  return MEMORY[0x24BDC6450]();
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.init(dataRepresentation:authenticationContext:)()
{
  return MEMORY[0x24BDC6460]();
}

uint64_t SecureEnclave.P256.KeyAgreement.PrivateKey.init(compactRepresentable:accessControl:authenticationContext:)()
{
  return MEMORY[0x24BDC6468]();
}

uint64_t type metadata accessor for SecureEnclave.P256.KeyAgreement.PrivateKey()
{
  return MEMORY[0x24BDC6480]();
}

uint64_t static SymmetricKeySize.bits256.getter()
{
  return MEMORY[0x24BDC64F0]();
}

uint64_t type metadata accessor for SymmetricKeySize()
{
  return MEMORY[0x24BDC6510]();
}

uint64_t static AES.GCM.open<A>(_:using:authenticating:)()
{
  return MEMORY[0x24BDC6590]();
}

uint64_t static AES.GCM.seal<A, B>(_:using:nonce:authenticating:)()
{
  return MEMORY[0x24BDC6598]();
}

uint64_t AES.GCM.Nonce.init<A>(data:)()
{
  return MEMORY[0x24BDC65B8]();
}

uint64_t type metadata accessor for AES.GCM.Nonce()
{
  return MEMORY[0x24BDC65D0]();
}

uint64_t AES.GCM.SealedBox.ciphertext.getter()
{
  return MEMORY[0x24BDC65F8]();
}

uint64_t AES.GCM.SealedBox.tag.getter()
{
  return MEMORY[0x24BDC6600]();
}

uint64_t AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)()
{
  return MEMORY[0x24BDC6608]();
}

uint64_t AES.GCM.SealedBox.combined.getter()
{
  return MEMORY[0x24BDC6620]();
}

uint64_t AES.GCM.SealedBox.init(combined:)()
{
  return MEMORY[0x24BDC6628]();
}

uint64_t type metadata accessor for AES.GCM.SealedBox()
{
  return MEMORY[0x24BDC6638]();
}

uint64_t static AES.KeyWrap.wrap(_:using:)()
{
  return MEMORY[0x24BDC6660]();
}

uint64_t static AES.KeyWrap.unwrap<A>(_:using:)()
{
  return MEMORY[0x24BDC6668]();
}

uint64_t KEM.EncapsulationResult.encapsulated.getter()
{
  return MEMORY[0x24BDC6698]();
}

uint64_t KEM.EncapsulationResult.sharedSecret.getter()
{
  return MEMORY[0x24BDC66A0]();
}

uint64_t type metadata accessor for KEM.EncapsulationResult()
{
  return MEMORY[0x24BDC66A8]();
}

uint64_t static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:)()
{
  return MEMORY[0x24BDC66B8]();
}

uint64_t static HKDF.extract<A>(inputKeyMaterial:salt:)()
{
  return MEMORY[0x24BDC66C0]();
}

uint64_t static HKDF.deriveKey<A>(inputKeyMaterial:salt:outputByteCount:)()
{
  return MEMORY[0x24BDC66D0]();
}

uint64_t HPKE.Ciphersuite.init(kem:kdf:aead:)()
{
  return MEMORY[0x24BDC6738]();
}

uint64_t type metadata accessor for HPKE.Ciphersuite()
{
  return MEMORY[0x24BDC6740]();
}

uint64_t type metadata accessor for HPKE.KDF()
{
  return MEMORY[0x24BDC6760]();
}

uint64_t type metadata accessor for HPKE.KEM()
{
  return MEMORY[0x24BDC6770]();
}

uint64_t type metadata accessor for HPKE.AEAD()
{
  return MEMORY[0x24BDC6788]();
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)()
{
  return MEMORY[0x24BDC67B0]();
}

uint64_t HPKE.Sender.encapsulatedKey.getter()
{
  return MEMORY[0x24BDC67B8]();
}

uint64_t HPKE.Sender.seal<A, B>(_:authenticating:)()
{
  return MEMORY[0x24BDC67C8]();
}

uint64_t type metadata accessor for HPKE.Sender()
{
  return MEMORY[0x24BDC67E0]();
}

uint64_t HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)()
{
  return MEMORY[0x24BDC6810]();
}

uint64_t HPKE.Recipient.open<A, B>(_:authenticating:)()
{
  return MEMORY[0x24BDC6820]();
}

uint64_t type metadata accessor for HPKE.Recipient()
{
  return MEMORY[0x24BDC6840]();
}

uint64_t P256.KeyAgreement.PublicKey.rawRepresentation.getter()
{
  return MEMORY[0x24BDC6878]();
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(rawRepresentation:)()
{
  return MEMORY[0x24BDC6880]();
}

uint64_t P256.KeyAgreement.PublicKey.x963Representation.getter()
{
  return MEMORY[0x24BDC6888]();
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(x963Representation:)()
{
  return MEMORY[0x24BDC6898]();
}

uint64_t P256.KeyAgreement.PublicKey.compactRepresentation.getter()
{
  return MEMORY[0x24BDC68A0]();
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(compactRepresentation:)()
{
  return MEMORY[0x24BDC68A8]();
}

uint64_t P256.KeyAgreement.PublicKey.compressedRepresentation.getter()
{
  return MEMORY[0x24BDC68B0]();
}

uint64_t type metadata accessor for P256.KeyAgreement.PublicKey()
{
  return MEMORY[0x24BDC68D0]();
}

uint64_t P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)()
{
  return MEMORY[0x24BDC68F0]();
}

uint64_t P256.KeyAgreement.PrivateKey.publicKey.getter()
{
  return MEMORY[0x24BDC68F8]();
}

uint64_t P256.KeyAgreement.PrivateKey.init<A>(x963Representation:)()
{
  return MEMORY[0x24BDC6930]();
}

uint64_t P256.KeyAgreement.PrivateKey.init(compactRepresentable:)()
{
  return MEMORY[0x24BDC6940]();
}

uint64_t type metadata accessor for P256.KeyAgreement.PrivateKey()
{
  return MEMORY[0x24BDC6968]();
}

uint64_t P256.Signing.PrivateKey.publicKey.getter()
{
  return MEMORY[0x24BDC6980]();
}

uint64_t P256.Signing.PrivateKey.rawRepresentation.getter()
{
  return MEMORY[0x24BDC6988]();
}

uint64_t P256.Signing.PrivateKey.init<A>(rawRepresentation:)()
{
  return MEMORY[0x24BDC6990]();
}

uint64_t P256.Signing.PrivateKey.x963Representation.getter()
{
  return MEMORY[0x24BDC6998]();
}

uint64_t P256.Signing.PrivateKey.init<A>(x963Representation:)()
{
  return MEMORY[0x24BDC69A0]();
}

uint64_t P256.Signing.PrivateKey.init(compactRepresentable:)()
{
  return MEMORY[0x24BDC69A8]();
}

uint64_t P256.Signing.PrivateKey.keyFromDiversification(with:seedExtractionLabel:)()
{
  return MEMORY[0x24BDC69B0]();
}

uint64_t P256.Signing.PrivateKey.signature<A>(for:)()
{
  return MEMORY[0x24BDC69C0]();
}

uint64_t type metadata accessor for P256.Signing.PrivateKey()
{
  return MEMORY[0x24BDC69D0]();
}

uint64_t P256.Signing.ECDSASignature.rawRepresentation.getter()
{
  return MEMORY[0x24BDC69F0]();
}

uint64_t P256.Signing.ECDSASignature.init<A>(rawRepresentation:)()
{
  return MEMORY[0x24BDC69F8]();
}

uint64_t type metadata accessor for P256.Signing.ECDSASignature()
{
  return MEMORY[0x24BDC6A00]();
}

uint64_t P256.Signing.PublicKey.isValidSignature<A>(_:for:)()
{
  return MEMORY[0x24BDC6A10]();
}

uint64_t P256.Signing.PublicKey.rawRepresentation.getter()
{
  return MEMORY[0x24BDC6A18]();
}

uint64_t P256.Signing.PublicKey.init<A>(rawRepresentation:)()
{
  return MEMORY[0x24BDC6A20]();
}

uint64_t P256.Signing.PublicKey.x963Representation.getter()
{
  return MEMORY[0x24BDC6A28]();
}

uint64_t P256.Signing.PublicKey.init<A>(x963Representation:)()
{
  return MEMORY[0x24BDC6A30]();
}

uint64_t P256.Signing.PublicKey.compactRepresentation.getter()
{
  return MEMORY[0x24BDC6A38]();
}

uint64_t P256.Signing.PublicKey.init<A>(compactRepresentation:)()
{
  return MEMORY[0x24BDC6A40]();
}

uint64_t P256.Signing.PublicKey.keyFromDiversification(with:seedExtractionLabel:)()
{
  return MEMORY[0x24BDC6A48]();
}

uint64_t type metadata accessor for P256.Signing.PublicKey()
{
  return MEMORY[0x24BDC6A60]();
}

uint64_t type metadata accessor for SHA256()
{
  return MEMORY[0x24BDC6AF8]();
}

uint64_t type metadata accessor for SHA384()
{
  return MEMORY[0x24BDC6B20]();
}

uint64_t Kyber768.PrivateKey.publicKey.getter()
{
  return MEMORY[0x24BDC6BB8]();
}

uint64_t Kyber768.PrivateKey.decapsulate(_:)()
{
  return MEMORY[0x24BDC6BC0]();
}

uint64_t Kyber768.PrivateKey.init<A>(bytes:)()
{
  return MEMORY[0x24BDC6BD0]();
}

uint64_t static Kyber768.PrivateKey.generate()()
{
  return MEMORY[0x24BDC6BD8]();
}

uint64_t type metadata accessor for Kyber768.PrivateKey()
{
  return MEMORY[0x24BDC6BE0]();
}

uint64_t Kyber768.PublicKey.encapsulate()()
{
  return MEMORY[0x24BDC6BF0]();
}

uint64_t Kyber768.PublicKey.dataRepresentation.getter()
{
  return MEMORY[0x24BDC6BF8]();
}

uint64_t Kyber768.PublicKey.init<A>(dataRepresentation:)()
{
  return MEMORY[0x24BDC6C00]();
}

uint64_t type metadata accessor for Kyber768.PublicKey()
{
  return MEMORY[0x24BDC6C08]();
}

uint64_t Kyber1024.PrivateKey.publicKey.getter()
{
  return MEMORY[0x24BDC6C18]();
}

uint64_t Kyber1024.PrivateKey.decapsulate(_:)()
{
  return MEMORY[0x24BDC6C20]();
}

uint64_t Kyber1024.PrivateKey.dataRepresentation.getter()
{
  return MEMORY[0x24BDC6C28]();
}

uint64_t Kyber1024.PrivateKey.init<A>(bytes:)()
{
  return MEMORY[0x24BDC6C30]();
}

uint64_t static Kyber1024.PrivateKey.generate()()
{
  return MEMORY[0x24BDC6C38]();
}

uint64_t type metadata accessor for Kyber1024.PrivateKey()
{
  return MEMORY[0x24BDC6C40]();
}

uint64_t Kyber1024.PublicKey.encapsulate()()
{
  return MEMORY[0x24BDC6C50]();
}

uint64_t Kyber1024.PublicKey.dataRepresentation.getter()
{
  return MEMORY[0x24BDC6C58]();
}

uint64_t Kyber1024.PublicKey.init<A>(dataRepresentation:)()
{
  return MEMORY[0x24BDC6C60]();
}

uint64_t type metadata accessor for Kyber1024.PublicKey()
{
  return MEMORY[0x24BDC6C68]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCF828]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x24BEE0BB0]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return MEMORY[0x24BEE0CA0]();
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x24BEE0CD0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t NSPredicate.init(format:_:)()
{
  return MEMORY[0x24BDCFDD8]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x24BEE7920]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
  MEMORY[0x24BEE5920]();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x24BEE5928]();
}

uint64_t NSManagedObjectContext.performAndWait<A>(_:)()
{
  return MEMORY[0x24BDBB360]();
}

uint64_t NSManagedObjectContext.fetch<A>(_:)()
{
  return MEMORY[0x24BDBB390]();
}

uint64_t NSData.startIndex.getter()
{
  return MEMORY[0x24BDD0128]();
}

uint64_t NSData.endIndex.getter()
{
  return MEMORY[0x24BDD0130]();
}

uint64_t NSData.subscript.getter()
{
  return MEMORY[0x24BDD0138]();
}

uint64_t NSArray.makeIterator()()
{
  return MEMORY[0x24BDD0158]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE5BB8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t static OS_os_log.default.getter()
{
  return MEMORY[0x24BEE7978]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t _HashTable.occupiedBucket(after:)()
{
  return MEMORY[0x24BEE22D8]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE23A0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x24BEE23E8]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t Identifiable<>.id.getter()
{
  return MEMORY[0x24BEE2578]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return MEMORY[0x24BEE2F08]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE32E0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3358]();
}

{
  return MEMORY[0x24BEE33B8]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3430]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A8]();
}

{
  return MEMORY[0x24BEE3508]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3DE0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t Slice<>.withUnsafeBytes<A>(_:)()
{
  return MEMORY[0x24BDD0780]();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return MEMORY[0x24BEE42C8]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x24BDAC320](data, *(_QWORD *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x24BDAC358](data, *(_QWORD *)&len, md);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x24BDBBC58](cf);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x24BDBBC88](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x24BDBBCB0](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x24BDBBCC0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x24BDBBD00](theData);
}

void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength)
{
  MEMORY[0x24BDBBD10](theData, extraLength);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x24BDBBD20](theData, length);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDE0](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x24BDBBE70](err);
}

CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBE80](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x24BDBBE88](allocator, domain, code, userInfo);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x24BDBBE90](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x24BDBBE98](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x24BDBBEA0](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x24BDBC260](stream, buffer, bufferLength);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x24BDBC4A8](theString, appendedString);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x24BDBC540](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x24BDBC598](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC600](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x24BDBC9E0](stream, buffer, bufferLength);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD0DD8]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD1280]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x24BE7AF88]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x24BE7AF90]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x24BE7AFA8]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x24BE7AFD8]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x24BE7AFE8]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x24BE7AFF0]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x24BE7B018]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x24BE7B028]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x24BE7B030]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x24BE7B038]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x24BE7B048]();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x24BDE87A0](allocator, protection, flags, error);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x24BDE8A78](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x24BDE8A80](query);
}

CFDictionaryRef SecKeyCopyAttributes(SecKeyRef key)
{
  return (CFDictionaryRef)MEMORY[0x24BDE8A98](key);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDE8AA8](key, error);
}

CFDataRef SecKeyCopyKeyExchangeResult(SecKeyRef privateKey, SecKeyAlgorithm algorithm, SecKeyRef publicKey, CFDictionaryRef parameters, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDE8AB0](privateKey, algorithm, publicKey, parameters, error);
}

uint64_t SecKeyCopyPublicBytes()
{
  return MEMORY[0x24BDE8AC0]();
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return (SecKeyRef)MEMORY[0x24BDE8AC8](key);
}

CFDataRef SecKeyCreateDecryptedData(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef ciphertext, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDE8AE8](key, algorithm, ciphertext, error);
}

CFDataRef SecKeyCreateEncryptedData(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef plaintext, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDE8B00](key, algorithm, plaintext, error);
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x24BDE8B30](parameters, error);
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDE8B38](key, algorithm, dataToSign, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x24BDE8B40](keyData, attributes, error);
}

uint64_t SecKeyGetSize()
{
  return MEMORY[0x24BDE8B78]();
}

CFTypeID SecKeyGetTypeID(void)
{
  return MEMORY[0x24BDE8B80]();
}

Boolean SecKeyIsAlgorithmSupported(SecKeyRef key, SecKeyOperationType operation, SecKeyAlgorithm algorithm)
{
  return MEMORY[0x24BDE8B88](key, operation, algorithm);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return MEMORY[0x24BDE8BA8](key, algorithm, signedData, signature, error);
}

uint64_t SecOTRFullIdentityCreateFromSecKeyRef()
{
  return MEMORY[0x24BDE8BB0]();
}

uint64_t SecOTRPublicIdentityCreateFromSecKeyRef()
{
  return MEMORY[0x24BDE8BB8]();
}

uint64_t SecOTRSessionCreateFromIDAndFlags()
{
  return MEMORY[0x24BDE8BC0]();
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x24BDE8CC8](rnd, count, bytes);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x24BDBD0A8]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x24BDBD0B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

uint64_t __memset_chk()
{
  return MEMORY[0x24BDAC858]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

uint64_t cc_clear()
{
  return MEMORY[0x24BDAD348]();
}

uint64_t cc_cmp_safe()
{
  return MEMORY[0x24BDAD350]();
}

uint64_t ccaes_ctr_crypt_mode()
{
  return MEMORY[0x24BDAD368]();
}

uint64_t ccaes_siv_decrypt_mode()
{
  return MEMORY[0x24BDAD388]();
}

uint64_t ccaes_siv_encrypt_mode()
{
  return MEMORY[0x24BDAD390]();
}

uint64_t ccctr_one_shot()
{
  return MEMORY[0x24BDAD3D0]();
}

uint64_t ccder_decode_sequence_tl()
{
  return MEMORY[0x24BDAD480]();
}

uint64_t ccder_decode_tl()
{
  return MEMORY[0x24BDAD490]();
}

uint64_t ccder_encode_constructed_tl()
{
  return MEMORY[0x24BDAD4B0]();
}

uint64_t ccder_encode_implicit_raw_octet_string()
{
  return MEMORY[0x24BDAD4B8]();
}

uint64_t ccder_encode_integer()
{
  return MEMORY[0x24BDAD4C0]();
}

uint64_t ccder_sizeof()
{
  return MEMORY[0x24BDAD4E0]();
}

uint64_t ccder_sizeof_implicit_raw_octet_string()
{
  return MEMORY[0x24BDAD4E8]();
}

uint64_t ccec_compact_export_pub()
{
  return MEMORY[0x24BDAD550]();
}

uint64_t ccec_compact_generate_key()
{
  return MEMORY[0x24BDAD558]();
}

uint64_t ccec_compact_import_pub()
{
  return MEMORY[0x24BDAD560]();
}

uint64_t ccec_cp_256()
{
  return MEMORY[0x24BDAD590]();
}

uint64_t ccec_export_pub()
{
  return MEMORY[0x24BDAD5B0]();
}

uint64_t ccec_import_pub()
{
  return MEMORY[0x24BDAD5D0]();
}

uint64_t ccec_validate_pub()
{
  return MEMORY[0x24BDAD5E8]();
}

uint64_t ccec_x963_import_pub()
{
  return MEMORY[0x24BDAD610]();
}

uint64_t ccecdh_compute_shared_secret()
{
  return MEMORY[0x24BDAD628]();
}

uint64_t cchmac_final()
{
  return MEMORY[0x24BDAD6B0]();
}

uint64_t cchmac_init()
{
  return MEMORY[0x24BDAD6B8]();
}

uint64_t cchmac_update()
{
  return MEMORY[0x24BDAD6C0]();
}

uint64_t ccn_cmp()
{
  return MEMORY[0x24BDAD718]();
}

uint64_t ccn_read_uint()
{
  return MEMORY[0x24BDAD720]();
}

uint64_t ccn_sub()
{
  return MEMORY[0x24BDAD728]();
}

uint64_t ccrng()
{
  return MEMORY[0x24BDAD758]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x24BDAD828]();
}

uint64_t ccsiv_one_shot()
{
  return MEMORY[0x24BDAD848]();
}

uint64_t cczp_bitlen()
{
  return MEMORY[0x24BDAD928]();
}

uint64_t cczp_prime()
{
  return MEMORY[0x24BDAD930]();
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAE3F0](__x, __y);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAD8](__x);
  return result;
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x24BDAEEC8](__s, __smax, *(_QWORD *)&__c, __n);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x24BEDD0B0](self, _cmd, offset, atomic);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD3D0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x24BEDD438](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x24BEDD440](obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x24BDB0128](*(_QWORD *)&a1, a2);
}

