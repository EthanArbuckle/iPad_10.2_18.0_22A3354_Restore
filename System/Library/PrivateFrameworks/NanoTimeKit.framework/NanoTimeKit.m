id NTKClockFaceLocalizedString(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  NTKDefaultValueLocalizedString(v3, CFSTR("ClockFaces"), v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    if (NTKClockFaceLocalizedString_onceToken != -1)
      dispatch_once(&NTKClockFaceLocalizedString_onceToken, &__block_literal_global_292);
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v7 = (id)NTKClockFaceLocalizedString_hiddenTables;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v8)
    {
      v10 = v8;
      v11 = *(_QWORD *)v16;
      while (2)
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v7);
          NTKDefaultValueLocalizedString(v3, *(void **)(*((_QWORD *)&v15 + 1) + 8 * i), v9, 0);
          v13 = objc_claimAutoreleasedReturnValue();
          if (v13)
          {
            v6 = (void *)v13;

            goto LABEL_14;
          }
        }
        v10 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v10)
          continue;
        break;
      }
    }

    v6 = (void *)objc_msgSend(v3, "copy", (_QWORD)v15);
  }
LABEL_14:

  return v6;
}

id NTKDefaultValueLocalizedString(void *a1, void *a2, uint64_t a3, int a4)
{
  id v6;
  id v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  __CFString *v11;

  v6 = a2;
  v7 = a1;
  NTKBundle();
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (a4)
  {
    -[__CFString localizedStringForKey:value:table:](v8, "localizedStringForKey:value:table:", v7, &stru_1E6BDC918, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    -[__CFString localizedStringForKey:value:table:](v8, "localizedStringForKey:value:table:", v7, CFSTR("\x03"), v6);
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if (v11 == CFSTR("\x03"))
    {
      v10 = 0;
      v9 = v11;
    }
    else
    {
      v9 = v11;
      v10 = v9;
    }
  }

  return v10;
}

id NTKBundle()
{
  if (NTKBundle_onceToken != -1)
    dispatch_once(&NTKBundle_onceToken, &__block_literal_global_265);
  return (id)NTKBundle___bundle;
}

id NTKSnapshotMappedImageCache()
{
  if (NTKSnapshotMappedImageCache_onceToken != -1)
    dispatch_once(&NTKSnapshotMappedImageCache_onceToken, &__block_literal_global_55);
  return (id)NTKSnapshotMappedImageCache___cache;
}

void sub_1B72A891C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B72A950C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t NTKEqualObjects(void *a1, void *a2)
{
  if (a1 == a2)
    return 1;
  else
    return objc_msgSend(a1, "isEqual:", a2);
}

id _NTKLoggingObjectForDomain(uint64_t a1, uint64_t a2)
{
  dispatch_once_t *v3;
  _QWORD v5[6];

  v3 = (dispatch_once_t *)((char *)&_NTKLoggingObjectForDomain_onceTokens + 8 * a1);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___NTKLoggingObjectForDomain_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = a1;
  v5[5] = a2;
  if (*v3 != -1)
    dispatch_once(v3, v5);
  return (id)_NTKLoggingObjectForDomain___logObjects[a1];
}

id NTKFaceBundleClassesFromBundle(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _QWORD v27[3];

  v27[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_msgSend(v1, "principalClass");
  if (!v2)
  {
    _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      NTKFaceBundleClassesFromBundle_cold_1((uint64_t)v1, v5, v6);

    goto LABEL_22;
  }
  v3 = v2;
  if (objc_msgSend(v2, "isSubclassOfClass:", objc_opt_class()))
  {
    v27[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v27, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_23;
  }
  if (!objc_msgSend(v3, "isSubclassOfClass:", objc_opt_class()))
  {
    v18 = (void *)MEMORY[0x1E0C99DA0];
    objc_msgSend(v1, "bundleIdentifier");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "raise:format:", CFSTR("NTKFaceBundleLoadingUnknownClassException"), CFSTR("Class %@ is not a subclass of NTKFaceBundle in %@"), v3, v19);

LABEL_22:
    v4 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_23;
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  objc_msgSend(v3, "faceBundleClasses");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v23;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v23 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v12);
        if (objc_msgSend(v13, "isSubclassOfClass:", objc_opt_class()))
        {
          objc_msgSend(v13, "identifier");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v7, "containsObject:", v14) & 1) != 0)
          {
            v15 = (void *)MEMORY[0x1E0C99DA0];
            objc_msgSend(v1, "bundleIdentifier");
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "raise:format:", CFSTR("NTKFaceBundleLoadingDuplicateIdentifierException"), CFSTR("Identifier %@ already specified in bundle %@"), v14, v16);

          }
          else
          {
            objc_msgSend(v21, "addObject:", v13);
            objc_msgSend(v7, "addObject:", v14);
          }
        }
        else
        {
          v17 = (void *)MEMORY[0x1E0C99DA0];
          objc_msgSend(v1, "bundleIdentifier");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "raise:format:", CFSTR("NTKFaceBundleLoadingUnknownClassException"), CFSTR("Class %@ is not a subclass of NTKFaceBundle in %@"), v13, v14);
        }

        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
    }
    while (v10);
  }

  v4 = (void *)objc_msgSend(v21, "copy");
LABEL_23:

  return v4;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void __Block_byref_object_dispose__9(uint64_t a1)
{

}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

void __Block_byref_object_dispose__21(uint64_t a1)
{

}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void __Block_byref_object_dispose__24(uint64_t a1)
{

}

void __Block_byref_object_dispose__25(uint64_t a1)
{

}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

void __Block_byref_object_dispose__27(uint64_t a1)
{

}

void __Block_byref_object_dispose__28(uint64_t a1)
{

}

void __Block_byref_object_dispose__29(uint64_t a1)
{

}

void __Block_byref_object_dispose__30(uint64_t a1)
{

}

void __Block_byref_object_dispose__31(uint64_t a1)
{

}

void __Block_byref_object_dispose__32(uint64_t a1)
{

}

void __Block_byref_object_dispose__33(uint64_t a1)
{

}

void __Block_byref_object_dispose__34(uint64_t a1)
{

}

void __Block_byref_object_dispose__35(uint64_t a1)
{

}

void __Block_byref_object_dispose__36(uint64_t a1)
{

}

void __Block_byref_object_dispose__37(uint64_t a1)
{

}

void __Block_byref_object_dispose__38(uint64_t a1)
{

}

void __Block_byref_object_dispose__39(uint64_t a1)
{

}

void __Block_byref_object_dispose__40(uint64_t a1)
{

}

void __Block_byref_object_dispose__41(uint64_t a1)
{

}

void __Block_byref_object_dispose__42(uint64_t a1)
{

}

void __Block_byref_object_dispose__43(uint64_t a1)
{

}

void __Block_byref_object_dispose__44(uint64_t a1)
{

}

void __Block_byref_object_dispose__45(uint64_t a1)
{

}

void __Block_byref_object_dispose__46(uint64_t a1)
{

}

void __Block_byref_object_dispose__47(uint64_t a1)
{

}

void __Block_byref_object_dispose__48(uint64_t a1)
{

}

void __Block_byref_object_dispose__49(uint64_t a1)
{

}

void __Block_byref_object_dispose__50(uint64_t a1)
{

}

void __Block_byref_object_dispose__51(uint64_t a1)
{

}

void __Block_byref_object_dispose__52(uint64_t a1)
{

}

void __Block_byref_object_dispose__53(uint64_t a1)
{

}

void __Block_byref_object_dispose__54(uint64_t a1)
{

}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__9(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__38(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__39(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__41(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__42(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__43(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__44(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__45(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__46(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__51(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__52(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__54(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1B72ABDD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B72AC2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B72ACE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;

  _Block_object_dispose(&a60, 8);
  _Block_object_dispose(&a64, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

void sub_1B72AD3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void sub_1B72AD9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72AE098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72AECBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 192), 8);
  _Unwind_Resume(a1);
}

const __CFString *NTKArgonStringForFetchReason(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a1 - 1) < 4)
    return off_1E6BDBE88[a1 - 1];
  if (NTKInternalBuild(a1, a2))
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", CFSTR("NTKArgonFetchReasonInvalidException"), CFSTR("Unknown Argon fetch reason %ld"), a1);
  return CFSTR("Unknown");
}

id NTKCCustomizationLocalizedString(void *a1, uint64_t a2, uint64_t a3)
{
  return NTKCDefaultValueLocalizedString(a1, CFSTR("NTKCustomization"), a3, 1);
}

id _NTKDisabledComplicationTypesForDevice(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  NTKBundleIDToComplicationTypesMappingForDevice(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_alloc_init(MEMORY[0x1E0CB3788]);
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        if (NTKIsSystemAppRestrictedOrRemoved(v9))
        {
          objc_msgSend(v4, "objectForKey:", v9);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = 0u;
          v18 = 0u;
          v19 = 0u;
          v20 = 0u;
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
          if (v11)
          {
            v12 = v11;
            v13 = *(_QWORD *)v18;
            do
            {
              for (j = 0; j != v12; ++j)
              {
                if (*(_QWORD *)v18 != v13)
                  objc_enumerationMutation(v10);
                objc_msgSend(v3, "addIndex:", objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * j), "unsignedIntegerValue"));
              }
              v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
            }
            while (v12);
          }

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v6);
  }

  if ((objc_msgSend(v1, "isEcgPhoneComplicationEnabled") & 1) == 0)
    objc_msgSend(v3, "addIndex:", 46);
  if ((objc_msgSend(v1, "isRadioPhoneComplicationEnabled") & 1) == 0)
    objc_msgSend(v3, "addIndex:", 35);
  v15 = (void *)objc_msgSend(v3, "copy");

  return v15;
}

uint64_t NTKIsSystemAppRestrictedOrRemoved(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((_NTKIsSystemAppAlwaysPresent(v1) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((_NTKIsSystemAppIsRemoved(v1) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = NTKIsSystemAppRestricted(v1);
  }

  return v2;
}

uint64_t _NTKIsSystemAppIsRemoved(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  if (_NTKIsRunningSnapShotService_onceToken != -1)
    dispatch_once(&_NTKIsRunningSnapShotService_onceToken, &__block_literal_global_397);
  if (_NTKIsRunningSnapShotService_runningInSnapshotSerivce)
  {
    v2 = 0;
  }
  else
  {
    +[NTKCompanionAppLibrary sharedAppLibrary](NTKCompanionAppLibrary, "sharedAppLibrary");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v3, "isRemovedSystemApp:", v1);

  }
  return v2;
}

uint64_t _NTKIsSystemAppAlwaysPresent(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = _NTKIsSystemAppAlwaysPresent_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&_NTKIsSystemAppAlwaysPresent_onceToken, &__block_literal_global_402);
  v3 = objc_msgSend((id)_NTKIsSystemAppAlwaysPresent___alwaysPresentAppBundleIdentifiers, "containsObject:", v2);

  return v3;
}

uint64_t NTKIsSystemAppRestricted(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  if (_NTKIsRunningSnapShotService_onceToken != -1)
    dispatch_once(&_NTKIsRunningSnapShotService_onceToken, &__block_literal_global_397);
  if (_NTKIsRunningSnapShotService_runningInSnapshotSerivce)
  {
    v2 = 0;
  }
  else
  {
    +[NTKCompanionAppLibrary sharedAppLibrary](NTKCompanionAppLibrary, "sharedAppLibrary");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v3, "isRestrictedSystemApp:", v1);

  }
  return v2;
}

uint64_t NTKGizmoOrCompanionAreRussian(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  objc_msgSend(a1, "nrDevice");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)MEMORY[0x1E0C99DC8];
  objc_msgSend(v1, "valueForProperty:", *MEMORY[0x1E0D51668]);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "componentsFromLocaleIdentifier:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", *MEMORY[0x1E0C9B060]);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "valueForProperty:", *MEMORY[0x1E0D51750]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MGGetStringAnswer();
  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "countryCode");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v7, "isEqualToString:", CFSTR("RU/A")) & 1) != 0
    || (objc_msgSend(v9, "isEqualToString:", CFSTR("RU")) & 1) != 0
    || (objc_msgSend(v6, "isEqualToString:", CFSTR("RU/A")) & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    v10 = objc_msgSend(v5, "isEqualToString:", CFSTR("RU"));
  }

  return v10;
}

uint64_t NTKEqualStrings(void *a1, void *a2)
{
  if (a1 == a2)
    return 1;
  else
    return objc_msgSend(a1, "isEqualToString:", a2);
}

uint64_t NTKShowVictoryFaces(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((NTKShowHardwareSpecificFaces() & 1) != 0)
    v2 = 1;
  else
    v2 = objc_msgSend(v1, "supportsVictoryFaces");

  return v2;
}

uint64_t NTKShowHardwareSpecificFaces()
{
  uint64_t result;
  int AppBooleanValue;
  NSObject *v2;
  uint8_t v3[16];

  result = CLKInternalBuild();
  if ((_DWORD)result)
  {
    if (NTKShowHardwareSpecificFaces_onceToken != -1)
      dispatch_once(&NTKShowHardwareSpecificFaces_onceToken, &__block_literal_global_216);
    if ((NTKShowHardwareSpecificFaces___needsUpdate & 1) == 0)
    {
      AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("ShowHardwareSpecificFaces"), CFSTR("com.apple.NanoTimeKit"), 0);
      NTKShowHardwareSpecificFaces___flag = AppBooleanValue != 0;
      NTKShowHardwareSpecificFaces___needsUpdate = 1;
      if (AppBooleanValue)
      {
        _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
        v2 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v3 = 0;
          _os_log_impl(&dword_1B72A3000, v2, OS_LOG_TYPE_DEFAULT, "ShowHardwareSpecificFaces=YES. Showing all hardware specific faces.", v3, 2u);
        }

      }
    }
    return NTKShowHardwareSpecificFaces___flag != 0;
  }
  return result;
}

void sub_1B72B0A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void NTKQueryFaceSupportServerForNewFaces(void *a1)
{
  void (**v1)(id, _QWORD);
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  void (**v11)(id, _QWORD);
  uint8_t *v12;
  uint64_t *v13;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  uint8_t buf[8];
  uint8_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  v1 = a1;
  if (_os_feature_enabled_impl())
  {
    _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B72A3000, v2, OS_LOG_TYPE_DEFAULT, "Argon manual mode enabled - skipping query.", buf, 2u);
    }

    if (v1)
      v1[2](v1, 0);
  }
  else
  {
    *(_QWORD *)buf = 0;
    v22 = buf;
    v23 = 0x3032000000;
    v24 = __Block_byref_object_copy__4;
    v25 = __Block_byref_object_dispose__4;
    v26 = 0;
    v15 = 0;
    v16 = &v15;
    v17 = 0x3032000000;
    v18 = __Block_byref_object_copy__4;
    v19 = __Block_byref_object_dispose__4;
    v20 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.nanotimekit.facesupportserver"), 4096);
    v3 = (void *)v16[5];
    NTKFaceSupportServerInterface();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setRemoteObjectInterface:", v4);

    v5 = (void *)v16[5];
    v6 = MEMORY[0x1E0C809B0];
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __NTKQueryFaceSupportServerForNewFaces_block_invoke;
    v14[3] = &unk_1E6BCFA78;
    v14[4] = &v15;
    v14[5] = buf;
    objc_msgSend(v5, "setInvalidationHandler:", v14);
    objc_msgSend((id)v16[5], "resume");
    objc_msgSend((id)v16[5], "remoteObjectProxyWithErrorHandler:", &__block_literal_global_89);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)*((_QWORD *)v22 + 5);
    *((_QWORD *)v22 + 5) = v7;

    v9 = (void *)*((_QWORD *)v22 + 5);
    v10[0] = v6;
    v10[1] = 3221225472;
    v10[2] = __NTKQueryFaceSupportServerForNewFaces_block_invoke_90;
    v10[3] = &unk_1E6BCFAE0;
    v11 = v1;
    v12 = buf;
    v13 = &v15;
    objc_msgSend(v9, "queryForNewFaces:", v10);

    _Block_object_dispose(&v15, 8);
    _Block_object_dispose(buf, 8);

  }
}

void sub_1B72B0C98(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B72B0FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B72B122C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id NTKCollectionServerInterface()
{
  if (NTKCollectionServerInterface_onceToken != -1)
    dispatch_once(&NTKCollectionServerInterface_onceToken, &__block_literal_global_97);
  return (id)NTKCollectionServerInterface_interface;
}

id NTKCollectionClientInterface()
{
  if (NTKCollectionClientInterface_onceToken != -1)
    dispatch_once(&NTKCollectionClientInterface_onceToken, &__block_literal_global_68_0);
  return (id)NTKCollectionClientInterface_interface;
}

id NTKFaceSupportServerInterface()
{
  if (NTKFaceSupportServerInterface_onceToken != -1)
    dispatch_once(&NTKFaceSupportServerInterface_onceToken, &__block_literal_global_24);
  return (id)NTKFaceSupportServerInterface_interface;
}

id NTKFaceSnapshotServerInterface()
{
  if (NTKFaceSnapshotServerInterface_onceToken != -1)
    dispatch_once(&NTKFaceSnapshotServerInterface_onceToken, &__block_literal_global_161);
  return (id)NTKFaceSnapshotServerInterface_interface;
}

id NTKFaceSnapshotClientInterface()
{
  if (NTKFaceSnapshotClientInterface_onceToken != -1)
    dispatch_once(&NTKFaceSnapshotClientInterface_onceToken, &__block_literal_global_56_0);
  return (id)NTKFaceSnapshotClientInterface_interface;
}

id NTKCompanionClockFaceLocalizedString(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  void (**v8)(void *, void *, _QWORD);
  uint64_t v10;
  uint64_t v11;
  __CFString *(*v12)(uint64_t, void *, uint64_t);
  void *v13;
  id v14;
  id v15;

  v3 = a1;
  v4 = a2;
  NTKCDefaultValueLocalizedString(v3, CFSTR("ClockFacesCompanion"), v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    v10 = MEMORY[0x1E0C809B0];
    v11 = 3221225472;
    v12 = __NTKCompanionClockFaceLocalizedString_block_invoke;
    v13 = &unk_1E6BDC200;
    v7 = v3;
    v14 = v7;
    v15 = v4;
    v8 = (void (**)(void *, void *, _QWORD))_Block_copy(&v10);
    v8[2](v8, &unk_1E6CAACC0, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v6)
    {
      v8[2](v8, &unk_1E6CAACD8, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v6)
      {
        v8[2](v8, &unk_1E6CAACF0, 0);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
      }
    }

    if (!v6)
      v6 = (void *)objc_msgSend(v7, "copy", v10, v11, v12, v13);
  }

  return v6;
}

id NTKCDefaultValueLocalizedString(void *a1, void *a2, uint64_t a3, int a4)
{
  id v6;
  id v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  __CFString *v11;

  v6 = a2;
  v7 = a1;
  NTKCBundle();
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v9 = v8;
  if (a4)
  {
    -[__CFString localizedStringForKey:value:table:](v8, "localizedStringForKey:value:table:", v7, &stru_1E6BDC918, v6);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    -[__CFString localizedStringForKey:value:table:](v8, "localizedStringForKey:value:table:", v7, CFSTR("\x03"), v6);
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if (v11 == CFSTR("\x03"))
    {
      v10 = 0;
      v9 = v11;
    }
    else
    {
      v9 = v11;
      v10 = v9;
    }
  }

  return v10;
}

id NTKCBundle()
{
  if (NTKCBundle_onceToken != -1)
    dispatch_once(&NTKCBundle_onceToken, &__block_literal_global_51);
  return (id)NTKCBundle_bundle;
}

double NTKMaxLineHeightDeltaForEnumeratableFaceCollection(void *a1, void *a2, void *a3, int a4, double a5)
{
  id v9;
  id v10;
  id v11;
  double v12;
  double v13;
  _QWORD v15[4];
  id v16;
  id v17;
  _QWORD *v18;
  double v19;
  _QWORD v20[4];

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v20[0] = 0;
  v20[1] = v20;
  v20[2] = 0x2020000000;
  v20[3] = NTKHeightForStringFontAndWidth(CFSTR("M"), (uint64_t)v10, v11, 1.79769313e308);
  if (a4)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __NTKMaxLineHeightDeltaForEnumeratableFaceCollection_block_invoke;
    v15[3] = &unk_1E6BD1430;
    v18 = v20;
    v16 = v10;
    v17 = v11;
    v19 = a5;
    objc_msgSend(v9, "enumerateFaceNamesUsingBlock:", v15);

  }
  UICeilToScale();
  v13 = v12;
  _Block_object_dispose(v20, 8);

  return v13;
}

void sub_1B72B238C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double NTKHeightForStringFontAndWidth(void *a1, uint64_t a2, void *a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  double v11;
  double v12;

  v7 = a1;
  v8 = a3;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithObject:forKey:", a2, *MEMORY[0x1E0DC1138]);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v8)
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, *MEMORY[0x1E0DC1178]);
  objc_msgSend(v7, "boundingRectWithSize:options:attributes:context:", 1, v10, 0, a4, 1.79769313e308);
  v12 = v11;

  return v12;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  return NSRequestConcreteImplementation();
}

uint64_t OUTLINED_FUNCTION_1_0()
{
  return objc_opt_class();
}

void OUTLINED_FUNCTION_0_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_1_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_0_6(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_1_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_7(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;

  ___StateDescription_block_invoke(a1, v3, a3);
}

void OUTLINED_FUNCTION_0_8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

id OUTLINED_FUNCTION_0_9(id a1)
{
  return a1;
}

void OUTLINED_FUNCTION_3(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_0_11()
{
  return NSRequestConcreteImplementation();
}

void sub_1B72B2AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72B2C2C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int16 buf)
{
  uint64_t v19;
  NSObject *v20;

  objc_begin_catch(a1);
  _NTKLoggingObjectForDomain(10, (uint64_t)"NTKLoggingDomainCollection");
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    buf = 0;
    _os_log_error_impl(&dword_1B72A3000, v20, OS_LOG_TYPE_ERROR, "Parameter validation failed for loading full collection", (uint8_t *)&buf, 2u);
  }

  if (v19)
    (*(void (**)(uint64_t))(v19 + 16))(v19);
  objc_end_catch();
  JUMPOUT(0x1B72B2BFCLL);
}

void sub_1B72B2C9C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void NTKValidateDictionary(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  _QWORD v6[6];

  v5 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Dictionary validation failed: putative dictionary is a %@"), objc_opt_class());
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __NTKValidateDictionary_block_invoke;
  v6[3] = &__block_descriptor_48_e15_v32__0_8_16_B24lu32l8u40l8;
  v6[4] = a2;
  v6[5] = a3;
  objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v6);

}

void NTKValidateArray(void *a1, uint64_t a2)
{
  id v3;
  _QWORD v4[5];

  v3 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Array validation failed: putative array is a %@"), objc_opt_class());
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __NTKValidateArray_block_invoke;
  v4[3] = &__block_descriptor_40_e15_v32__0_8Q16_B24lu32l8;
  v4[4] = a2;
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v4);

}

void sub_1B72B3294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B72B426C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _executeWithLock(os_unfair_lock_s *a1, void *a2)
{
  void (**v3)(void);

  v3 = a2;
  os_unfair_lock_lock(a1);
  v3[2]();
  os_unfair_lock_unlock(a1);

}

void sub_1B72B4858(void *a1)
{
  os_unfair_lock_s *v1;

  objc_begin_catch(a1);
  os_unfair_lock_unlock(v1);
  objc_exception_rethrow();
}

void sub_1B72B486C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B72B57FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _NTKUpdateLunarCalendarID()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  char v5;
  void *v6;
  id obj;

  objc_msgSend(MEMORY[0x1E0CAA208], "sharedPreferences");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "overlayCalendarID");
  obj = (id)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend(obj, "length") && objc_msgSend(MEMORY[0x1E0D3EFB0], "isLunarCalendarDefaultOn"))
  {
    v1 = (void *)MEMORY[0x1E0D3EFB0];
    objc_msgSend(MEMORY[0x1E0C99DC8], "autoupdatingCurrentLocale");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "localeIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "preferredLunarCalendarForLocaleID:", v3);
    v4 = objc_claimAutoreleasedReturnValue();

    obj = (id)v4;
  }
  v5 = objc_msgSend(obj, "isEqualToString:", _lunarCalendarID);
  objc_storeStrong((id *)&_lunarCalendarID, obj);
  if ((v5 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "postNotificationName:object:userInfo:", CFSTR("NTKLunarCalendarIDChangedNotification"), 0, 0);

  }
}

id _NTKBundleIDToComplicationTypesMappingGizmo()
{
  id WeakRetained;
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;

  os_unfair_lock_lock((os_unfair_lock_t)&_NTKBundleIDToComplicationTypesMappingGizmo___lock);
  WeakRetained = objc_loadWeakRetained(&_NTKBundleIDToComplicationTypesMappingGizmo___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v1 = WeakRetained;
  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_loadWeakRetained(&_NTKBundleIDToComplicationTypesMappingGizmo___cachedDevice);
  if (v2 != v3)
  {

LABEL_5:
    objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak(&_NTKBundleIDToComplicationTypesMappingGizmo___cachedDevice, v7);

    v8 = objc_loadWeakRetained(&_NTKBundleIDToComplicationTypesMappingGizmo___cachedDevice);
    _NTKBundleIDToComplicationTypesMappingGizmo___previousCLKDeviceVersion = objc_msgSend(v8, "version");

    objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    ___NTKBundleIDToComplicationTypesMappingGizmo_block_invoke((uint64_t)v9, v9);

    goto LABEL_6;
  }
  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "version");
  v6 = _NTKBundleIDToComplicationTypesMappingGizmo___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_NTKBundleIDToComplicationTypesMappingGizmo___lock);
  return (id)_NTKBundleIDToComplicationTypesMappingGizmo_bundleIDToComplicationTypesMapping;
}

uint64_t NTKShowInternalFaces()
{
  uint64_t result;

  result = CLKInternalBuild();
  if ((_DWORD)result)
  {
    if (NTKShowInternalFaces_onceToken != -1)
      dispatch_once(&NTKShowInternalFaces_onceToken, &__block_literal_global_207);
    if (NTKShowInternalFaces___needsUpdate == 1)
    {
      return NTKShowInternalFaces___flag != 0;
    }
    else
    {
      result = CFPreferencesGetAppBooleanValue(CFSTR("ShowInternalFaces"), CFSTR("com.apple.NanoTimeKit.face"), 0) != 0;
      NTKShowInternalFaces___flag = result;
      NTKShowInternalFaces___needsUpdate = 1;
    }
  }
  return result;
}

uint64_t NTKShowBlueRidgeUI(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  os_unfair_lock_lock(&NTKShowBlueRidgeUI___lock);
  WeakRetained = objc_loadWeakRetained(&NTKShowBlueRidgeUI___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&NTKShowBlueRidgeUI___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&NTKShowBlueRidgeUI___cachedDevice, v1);
    NTKShowBlueRidgeUI___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    __NTKShowBlueRidgeUI_block_invoke(v8, v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = NTKShowBlueRidgeUI___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock(&NTKShowBlueRidgeUI___lock);
  v9 = NTKShowBlueRidgeUI___showBlueRidgeUI;

  return v9;
}

id NTKLunarCalendarLocaleID()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;

  if (NTKLunarCalendarLocaleID_onceToken != -1)
    dispatch_once(&NTKLunarCalendarLocaleID_onceToken, &__block_literal_global_437);
  if (_lunarLatest != _lunarSeed)
  {
    _lunarLatest = _lunarSeed;
    NTKLunarCalendarID();
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v0, "length"))
    {
      objc_msgSend(MEMORY[0x1E0D3EFB0], "localeForCalendarID:", v0);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "localeIdentifier");
      v2 = objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v2 = 0;
    }
    v3 = (void *)_lunarCalendarLocaleID;
    _lunarCalendarLocaleID = v2;

  }
  return (id)_lunarCalendarLocaleID;
}

id NTKLunarCalendarID()
{
  if (NTKLunarCalendarID_onceToken != -1)
    dispatch_once(&NTKLunarCalendarID_onceToken, &__block_literal_global_436);
  return (id)_lunarCalendarID;
}

uint64_t NTKIsDaemonOrFaceSnapshotService()
{
  return CLKRunningInProcess();
}

uint64_t NTKGPUIsEnabled()
{
  if (NTKGPUIsEnabled_onceToken != -1)
    dispatch_once(&NTKGPUIsEnabled_onceToken, &__block_literal_global_43);
  return NTKGPUIsEnabled_gpuIsEnabled;
}

uint64_t NTKFallbackComplicationFamilyForFamily(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  if (*MEMORY[0x1E0C93E90] == a1)
  {
    v2 = 0;
LABEL_5:
    *a2 = v2;
    return 1;
  }
  if (a1 == 104)
  {
    v2 = 3;
    goto LABEL_5;
  }
  return 0;
}

uint64_t NTKFaceStyleIsAvailable(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v3 = a2;
  v4 = NTKEffectiveFaceStyleForFaceStyle(a1);
  if (!NTKGPUIsEnabled())
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF7) == 4;
    goto LABEL_19;
  }
  v5 = objc_msgSend(v3, "collectionType");
  if (v4 == 14 && v5 != 5)
    goto LABEL_4;
  if (v4 == 42)
  {
    if ((objc_msgSend(v3, "isZeusBlack") & 1) != 0)
    {
LABEL_13:
      v6 = 1;
      goto LABEL_14;
    }
  }
  else if ((unint64_t)(v4 - 19) > 1 && (v4 != 35 || objc_msgSend(v3, "deviceCategory") == 1)
         || (objc_msgSend(v3, "supportsVictoryFaces") & 1) != 0)
  {
    goto LABEL_13;
  }
LABEL_4:
  v6 = NTKShowHardwareSpecificFaces();
LABEL_14:
  if ((NTKShowInternalFaces() & 1) == 0)
    v6 &= ~+[NTKFace isFaceStyleAvailableInternal:forDevice:](NTKFace, "isFaceStyleAvailableInternal:forDevice:", v4, v3);
  if ((v4 & 0xFFFFFFFFFFFFFFF7) == 5)
    v7 = 0;
  else
    v7 = v6;
LABEL_19:

  return v7;
}

uint64_t NTKEffectiveFaceStyleForFaceStyle(uint64_t result)
{
  if ((unint64_t)(result - 200) <= 0x21 && ((0x399BF140FuLL >> (result + 56)) & 1) != 0)
    return qword_1B75604B0[result - 200];
  return result;
}

id NTKComplicationTypeRankedListWithDefaultTypes(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = NTKComplicationTypeFallbackList_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&NTKComplicationTypeFallbackList_onceToken, &__block_literal_global_1139);
  objc_msgSend(v2, "arrayByAddingObjectsFromArray:", NTKComplicationTypeFallbackList_complicationFallbackList);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id NTKComplicationSlotDescriptor(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1E0CB37E8];
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "numberWithInteger:", a1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v12[0] = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v12, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[_SlotDescriptor descriptorWithComplicationFamilies:complicationTypesRankedList:allowedComplicationTypes:](_SlotDescriptor, "descriptorWithComplicationFamilies:complicationTypesRankedList:allowedComplicationTypes:", v9, v6, v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id NTKCacheDirectory()
{
  if (NTKCacheDirectory_onceToken != -1)
    dispatch_once(&NTKCacheDirectory_onceToken, &__block_literal_global_50_0);
  return (id)NTKCacheDirectory_path;
}

id NTKBundleIDToComplicationTypesMappingForDevice(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (v1 && !objc_msgSend(v1, "isRunningGraceOrLater"))
  {
    _NTKBundleIDToComplicationTypesMappingCompanion();
    v3 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    _NTKBundleIDToComplicationTypesMappingGizmo();
    v3 = objc_claimAutoreleasedReturnValue();
  }
  v4 = (void *)v3;

  return v4;
}

id NTKBundleComplicationMigrationServiceLookupPathForDevice(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = a1;
  NTKBundleComplicationMigrationServiceLookupDirectory();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(v1, "nrDeviceUUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@.dat"), v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "stringByAppendingPathComponent:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id NTKBundleComplicationMigrationServiceLookupDirectory()
{
  if (NTKBundleComplicationMigrationServiceLookupDirectory_onceToken != -1)
    dispatch_once(&NTKBundleComplicationMigrationServiceLookupDirectory_onceToken, &__block_literal_global_61);
  return (id)NTKBundleComplicationMigrationServiceLookupDirectory_path;
}

id NTKBundleComplicationDirectoryURLs()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  +[NTKBundleLoader rootDirectory](NTKBundleLoader, "rootDirectory");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("/AppleInternal/Library/NanoTimeKit/ComplicationBundles/"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "fileURLWithPath:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(v0, "stringByAppendingString:", CFSTR("/System/Library/NanoTimeKit/ComplicationBundles/"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "fileURLWithPath:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", CFSTR("/var/mobile/Library/NanoTimeKit/ComplicationBundles/"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v3;
  v10[1] = v6;
  v10[2] = v7;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id NTKBundleComplicationDataSourceClassesFromBundle(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v17;
  id v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t buf[4];
  void *v24;
  _BYTE v25[128];
  _QWORD v26[3];

  v26[1] = *MEMORY[0x1E0C80C00];
  v18 = a1;
  v1 = (void *)objc_msgSend(v18, "principalClass");
  if (!v1)
  {
    _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      NTKBundleComplicationDataSourceClassesFromBundle_cold_1((uint64_t)v18, v4);
    goto LABEL_6;
  }
  v2 = v1;
  if (objc_msgSend(v1, "isSubclassOfClass:", objc_opt_class()))
  {
    v26[0] = v2;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_21;
  }
  if (!objc_msgSend(v2, "isSubclassOfClass:", objc_opt_class()))
  {
    _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v24 = v2;
      _os_log_impl(&dword_1B72A3000, v4, OS_LOG_TYPE_DEFAULT, "Unsupported principal class: %{public}@", buf, 0xCu);
    }
LABEL_6:

    v3 = (void *)MEMORY[0x1E0C9AA60];
    goto LABEL_21;
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  objc_msgSend(v2, "complicationBundleDataSources");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v20;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v20 != v9)
          objc_enumerationMutation(v6);
        v11 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * v10);
        if (objc_msgSend(v11, "isSubclassOfClass:", objc_opt_class()))
        {
          objc_msgSend(v11, "bundleIdentifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          if ((objc_msgSend(v5, "containsObject:", v12) & 1) != 0)
          {
            v13 = (void *)MEMORY[0x1E0C99DA0];
            objc_msgSend(v18, "bundleIdentifier");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v13, "raise:format:", CFSTR("NTKBundleComplicationLoadingDuplicateIdentifierException"), CFSTR("Identifier %@ already specified in bundle %@"), v12, v14);

          }
          else
          {
            objc_msgSend(v17, "addObject:", v11);
            objc_msgSend(v5, "addObject:", v12);
          }
        }
        else
        {
          v15 = (void *)MEMORY[0x1E0C99DA0];
          objc_msgSend(v18, "bundleIdentifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "raise:format:", CFSTR("NTKBundleComplicationLoadingUnknownClassException"), CFSTR("Class %@ is not a subclass of CLKCComplicationBundleDataSource in %@"), v11, v12);
        }

        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
    }
    while (v8);
  }

  v3 = (void *)objc_msgSend(v17, "copy");
LABEL_21:

  return v3;
}

id NTKAllSignatureCornerTypes()
{
  if (NTKAllSignatureCornerTypes_onceToken != -1)
    dispatch_once(&NTKAllSignatureCornerTypes_onceToken, &__block_literal_global_1082);
  return (id)NTKAllSignatureCornerTypes_results;
}

id NTKAllSignatureCircularTypes()
{
  if (NTKAllSignatureCircularTypes_onceToken != -1)
    dispatch_once(&NTKAllSignatureCircularTypes_onceToken, &__block_literal_global_1083);
  return (id)NTKAllSignatureCircularTypes_results;
}

void sub_1B72B7CFC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1B72B8734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B72B9424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72B96C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72B9850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72BAD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72BAFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B72BB330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72BBD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  _Block_object_dispose(&a59, 8);
  _Unwind_Resume(a1);
}

void sub_1B72BD070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72BD880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72BED54(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void _NTKDigitalModularLayoutConstants(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_NTKDigitalModularLayoutConstants___lock);
  WeakRetained = objc_loadWeakRetained(&_NTKDigitalModularLayoutConstants___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_NTKDigitalModularLayoutConstants___cachedDevice);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_NTKDigitalModularLayoutConstants___cachedDevice, obj);
    _NTKDigitalModularLayoutConstants___previousCLKDeviceVersion = objc_msgSend(obj, "version");

    ___NTKDigitalModularLayoutConstants_block_invoke(v9, obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _NTKDigitalModularLayoutConstants___previousCLKDeviceVersion;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_NTKDigitalModularLayoutConstants___lock);
  v10 = *(_OWORD *)&qword_1EF172188;
  *(_OWORD *)(a2 + 64) = xmmword_1EF172178;
  *(_OWORD *)(a2 + 80) = v10;
  *(_OWORD *)(a2 + 96) = xmmword_1EF172198;
  *(_QWORD *)(a2 + 112) = qword_1EF1721A8;
  v11 = *(_OWORD *)&qword_1EF172148;
  *(_OWORD *)a2 = _NTKDigitalModularLayoutConstants___constants;
  *(_OWORD *)(a2 + 16) = v11;
  v12 = *(_OWORD *)&qword_1EF172168;
  *(_OWORD *)(a2 + 32) = xmmword_1EF172158;
  *(_OWORD *)(a2 + 48) = v12;

}

double NTKDigitalModularFaceViewTopGapEditing(void *a1)
{
  _BYTE v2[56];
  double v3;

  _NTKDigitalModularLayoutConstants(a1, (uint64_t)v2);
  return v3;
}

double NTKDigitalModularFaceViewTopGap(void *a1)
{
  _BYTE v2[16];
  double v3;

  _NTKDigitalModularLayoutConstants(a1, (uint64_t)v2);
  return v3;
}

double NTKDigitalModularFaceViewLargeModuleHeight(void *a1)
{
  _BYTE v2[40];
  double v3;

  _NTKDigitalModularLayoutConstants(a1, (uint64_t)v2);
  return v3;
}

double NTKDigitalModularFaceViewLargeModuleHeightEditing(void *a1)
{
  _BYTE v2[48];
  double v3;

  _NTKDigitalModularLayoutConstants(a1, (uint64_t)v2);
  return v3;
}

double NTKDigitalModularFaceViewSmallModuleHeight(void *a1)
{
  _BYTE v2[32];
  double v3;

  _NTKDigitalModularLayoutConstants(a1, (uint64_t)v2);
  return v3;
}

double NTKDigitalModularFaceViewSideModuleWidth(void *a1)
{
  _BYTE v2[24];
  double v3;

  _NTKDigitalModularLayoutConstants(a1, (uint64_t)v2);
  return v3;
}

double NTKDigitalModularFaceViewModuleGap(void *a1)
{
  double v2[15];

  _NTKDigitalModularLayoutConstants(a1, (uint64_t)v2);
  return v2[0];
}

double NTKDigitalModularFaceViewCenterModuleWidth(void *a1)
{
  _BYTE v2[24];
  double v3;

  _NTKDigitalModularLayoutConstants(a1, (uint64_t)v2);
  return v3;
}

void sub_1B72C13AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _LayoutConstants(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_LayoutConstants___cachedDevice, v1);
    _LayoutConstants___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    ___LayoutConstants_block_invoke(v8, (uint64_t)v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _LayoutConstants___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock);
  v9 = *(double *)&_LayoutConstants___constants_0;

  return v9;
}

void sub_1B72C1E48(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

id attributedBodyLabelText(void *a1)
{
  void *v1;
  double v2;
  id v3;
  void *v4;
  double v5;
  void *v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v15[3];
  _QWORD v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  v1 = (void *)MEMORY[0x1E0C944D0];
  v2 = *(double *)&qword_1EF16D490;
  v3 = a1;
  objc_msgSend(v1, "systemFontOfSize:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v5) = 0.5;
  objc_msgSend(MEMORY[0x1E0DC1288], "NTKHyphenationParagraphStyleWithFactor:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(double *)&qword_1EF16D488;
  objc_msgSend(v4, "lineHeight");
  objc_msgSend(v6, "setLineHeightMultiple:", v7 / v8);
  v9 = *MEMORY[0x1E0DC1138];
  v16[0] = v4;
  v10 = *MEMORY[0x1E0DC1140];
  v15[0] = v9;
  v15[1] = v10;
  objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v15[2] = *MEMORY[0x1E0DC1178];
  v16[1] = v11;
  v16[2] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, v15, 3);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3778]), "initWithString:attributes:", v3, v12);
  return v13;
}

void sub_1B72C33E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void NTKArgonExtractorReportExtractionFailure(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int v20;
  id v21;
  NSObject *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  char v32;
  id v33;
  NSObject *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  id v52;
  uint8_t buf[4];
  void *v54;
  __int16 v55;
  void *v56;
  __int16 v57;
  id v58;
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (NTKInternalBuild(v6, v7))
  {
    v8 = (void *)CFPreferencesCopyAppValue(CFSTR("ArgonBugReportBootSession"), CFSTR("com.apple.NanoTimeKit.face"));
    NTKBootSessionUUID();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "UUIDString");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10 && (objc_msgSend(v8, "isEqualToString:", v10) & 1) == 0)
    {
      CFPreferencesSetAppValue(CFSTR("ArgonBugReportBootSession"), v10, CFSTR("com.apple.NanoTimeKit.face"));
      v11 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(v5, "lastPathComponent");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "stringWithFormat:", CFSTR("%s: %@"), a1, v12);
      v44 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", CFSTR("/var/mobile/Library/NanoTimeKit/FaceSupport"));
      v14 = objc_claimAutoreleasedReturnValue();
      if (v14)
        objc_msgSend(v13, "addObject:", v14);
      v43 = (void *)v14;
      v37 = v10;
      if (v5)
        objc_msgSend(v13, "addObject:", v5);
      v39 = v6;
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      NSTemporaryDirectory();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "UUIDString");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "stringByAppendingPathComponent:", v17);
      v18 = objc_claimAutoreleasedReturnValue();

      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v52 = 0;
      v20 = objc_msgSend(v19, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v18, 1, 0, &v52);
      v21 = v52;

      if ((v20 & 1) == 0)
      {
        _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          NTKArgonExtractorReportExtractionFailure_cold_1();

      }
      v40 = v5;
      v41 = v21;
      v38 = v8;
      v42 = (void *)v18;
      objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v18);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v48 = 0u;
      v49 = 0u;
      v50 = 0u;
      v51 = 0u;
      v23 = v13;
      v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v48, v59, 16);
      if (v24)
      {
        v25 = v24;
        v26 = *(_QWORD *)v49;
        do
        {
          for (i = 0; i != v25; ++i)
          {
            if (*(_QWORD *)v49 != v26)
              objc_enumerationMutation(v23);
            if (v20)
            {
              v28 = *(void **)(*((_QWORD *)&v48 + 1) + 8 * i);
              objc_msgSend(v28, "lastPathComponent");
              v29 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v45, "URLByAppendingPathComponent:", v29);
              v30 = (void *)objc_claimAutoreleasedReturnValue();

              objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
              v31 = (void *)objc_claimAutoreleasedReturnValue();
              v47 = 0;
              v32 = objc_msgSend(v31, "copyItemAtURL:toURL:error:", v28, v30, &v47);
              v33 = v47;

              if ((v32 & 1) == 0)
              {
                _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
                v34 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412802;
                  v54 = v28;
                  v55 = 2112;
                  v56 = v30;
                  v57 = 2112;
                  v58 = v33;
                  _os_log_error_impl(&dword_1B72A3000, v34, OS_LOG_TYPE_ERROR, "Copying %@ to %@ failed - %@", buf, 0x20u);
                }

              }
              objc_msgSend(v46, "addObject:", v30);

            }
          }
          v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v48, v59, 16);
        }
        while (v25);
      }

      if (NTKArgonExtractorReportExtractionFailure_onceToken != -1)
        dispatch_once(&NTKArgonExtractorReportExtractionFailure_onceToken, &__block_literal_global_1);
      v6 = v39;
      v5 = v40;
      v10 = v37;
      v8 = v38;
      v35 = (void *)NTKArgonExtractorReportExtractionFailure_reporterQueue;
      objc_msgSend(v39, "description");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "enqueueReportWithTitle:description:attachmentURLs:", v44, v36, v46);

    }
  }

}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void sub_1B72C48A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1B72C70E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t archiveEvent(uint64_t a1, int a2)
{
  if (a2 == 22)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t _NTKAppleEncryptedArchiveMemoryExtractorWriteHeader(void *a1, AAHeader_impl *a2)
{
  _QWORD *v3;
  unint64_t v4;
  AAFieldKey v5;
  uint32_t KeyIndex;
  unsigned int FieldString;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  AAFieldKey v12;
  uint32_t v13;
  unsigned int FieldUInt;
  _QWORD *v15;
  void *v16;
  uint64_t v18;
  size_t length;
  char value[1024];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = v3[8] & 0xFFFFFFFFFFFFFFFELL;
    objc_sync_exit(v3);

    if (v4 == 2)
      goto LABEL_18;
  }
  else
  {
    objc_sync_exit(0);
  }
  bzero(value, 0x400uLL);
  length = 0;
  v5.ikey = 5521744;
  KeyIndex = AAHeaderGetKeyIndex(a2, v5);
  if ((KeyIndex & 0x80000000) != 0)
    goto LABEL_18;
  FieldString = AAHeaderGetFieldString(a2, KeyIndex, 0x400uLL, value, &length);
  if (FieldString <= 1)
    v8 = 1;
  else
    v8 = FieldString;
  if ((int)v8 < 1)
    goto LABEL_19;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", value);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "targetArchivedPath");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v9, "isEqualToString:", v10);

  if (!v11 || (v18 = 0, v12.ikey = 5265748, v13 = AAHeaderGetKeyIndex(a2, v12), (v13 & 0x80000000) != 0))
  {
LABEL_18:
    v8 = 0;
    goto LABEL_19;
  }
  FieldUInt = AAHeaderGetFieldUInt(a2, v13, &v18);
  if (FieldUInt <= 1)
    v8 = 1;
  else
    v8 = FieldUInt;
  if ((int)v8 >= 1)
  {
    if (v18 == 70)
    {
      v15 = v3;
      objc_sync_enter(v15);
      if (v3)
        v15[8] = 2;
      objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithCapacity:", 0x100000);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[NTKAppleEncryptedArchiveMemoryExtractor setOutputData:]((uint64_t)v15, v16);

      objc_sync_exit(v15);
    }
    goto LABEL_18;
  }
LABEL_19:

  return v8;
}

void sub_1B72C74BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _NTKAppleEncryptedArchiveMemoryExtractorWriteBlob(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  id *v9;
  id v10;

  v7 = a1;
  v8 = v7;
  if (a2 == 5521732)
  {
    v9 = (id *)v7;
    objc_sync_enter(v9);
    if (v9 && v9[8] == (id)2)
    {
      if (a4)
      {
        v10 = v9[9];
        objc_msgSend(v10, "appendBytes:length:", a3, a4);

      }
      else
      {
        v9[8] = (id)3;
      }
    }
    objc_sync_exit(v9);

  }
  return 0;
}

void sub_1B72C757C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _NTKAppleEncryptedArchiveMemoryExtractorCancel(void *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_sync_enter(v1);
  v2 = (void *)MEMORY[0x1E0CB35C8];
  v6 = *MEMORY[0x1E0CB3308];
  objc_msgSend(v1, "archiveURL");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = v3;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 3072, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[NTKAppleEncryptedArchiveMemoryExtractor setOutputError:]((uint64_t)v1, v5);

  if (v1)
    v1[8] = 4;
  objc_sync_exit(v1);

}

void sub_1B72C7698(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _NTKAppleEncryptedArchiveMemoryExtractorClose(void *a1)
{
  id v2;

  v2 = (id)objc_opt_self();

  return 0;
}

id SiriBlurImageForColor(void *a1)
{
  __CFString *v1;

  if (objc_msgSend(a1, "isSiriColor"))
    v1 = CFSTR("SiriBlur");
  else
    v1 = CFSTR("SiriBlurGrey");
  NTKImageNamed(v1);
  return (id)objc_claimAutoreleasedReturnValue();
}

double DarkeningAmountForColor(void *a1)
{
  int v1;
  double result;

  v1 = objc_msgSend(a1, "isSiriColor");
  result = 0.25;
  if (v1)
    return 0.5;
  return result;
}

uint64_t NTKUpNextDemoTimeoutDuration()
{
  if (NTKUpNextDemoTimeoutDuration_onceToken != -1)
    dispatch_once(&NTKUpNextDemoTimeoutDuration_onceToken, &__block_literal_global_3);
  return NTKUpNextDemoTimeoutDuration_defaultTimeout;
}

uint64_t NTKUpNextDemoPrerenderAllCells()
{
  if (NTKUpNextDemoPrerenderAllCells_onceToken != -1)
    dispatch_once(&NTKUpNextDemoPrerenderAllCells_onceToken, &__block_literal_global_8);
  return NTKUpNextDemoPrerenderAllCells_prerenderAllCells;
}

void _LayoutConstants_0(void *a1@<X0>, void *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_0);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_0);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_0);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_0, obj);
    _LayoutConstants___previousCLKDeviceVersion_0 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_0(v9, obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_0;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_0);
  memcpy(a2, &_LayoutConstants_constants, 0x108uLL);

}

void sub_1B72C86F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _updateDisabledDataSources(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_updateDisabledDataSources");
}

uint64_t _thirdPartyDataSourcesDidChange(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_availableDataSourcesDidChange");
}

void sub_1B72C9F14(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1B72CA2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B72CB5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B72CB7E0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1B72CD2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1B72CD4FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B72CFF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_DWORD *NTKSplineVector_new(int a1)
{
  _DWORD *v2;

  v2 = malloc_type_malloc(0x10uLL, 0x10800409227ACB4uLL);
  *(_QWORD *)v2 = malloc_type_malloc(8 * a1, 0x100004000313F17uLL);
  v2[2] = a1;
  return v2;
}

void NTKSplineVector_destroy(void **a1)
{
  free(*a1);
  free(a1);
}

_QWORD *NTKSplineMatrix_new(int a1)
{
  _QWORD *v2;

  v2 = malloc_type_malloc(0x18uLL, 0x1080040622C3295uLL);
  *v2 = malloc_type_malloc(8 * (a1 * a1), 0x100004000313F17uLL);
  v2[1] = malloc_type_malloc(4 * (a1 * a1), 0x100004052888210uLL);
  *((_DWORD *)v2 + 4) = a1;
  return v2;
}

void NTKSplineMatrix_destroy(void **a1)
{
  void *v2;
  void *v3;

  v2 = *a1;
  if (v2)
    free(v2);
  v3 = a1[1];
  if (v3)
    free(v3);
  free(a1);
}

void NTKSplineVector_zero(uint64_t a1)
{
  bzero(*(void **)a1, 8 * *(int *)(a1 + 8));
}

void NTKSplineMatrix_zero(uint64_t a1)
{
  bzero(*(void **)a1, 8 * (*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 16)));
}

void NTKSplineMatrix_convert_to_single_precision(uint64_t a1)
{
  vDSP_vdpsp(*(const double **)a1, 1, *(float **)(a1 + 8), 1, (*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 16)));
}

void NTKSplineMatrix_discard_double_precision(void **a1)
{
  free(*a1);
  *a1 = 0;
}

uint64_t NTKSplineMatrix_set(uint64_t result, int a2, int a3, double a4)
{
  *(double *)(*(_QWORD *)result + 8 * (a2 + *(_DWORD *)(result + 16) * a3)) = a4;
  return result;
}

double NTKSplineMatrix_get(uint64_t a1, int a2, int a3)
{
  return *(double *)(*(_QWORD *)a1 + 8 * (a2 + *(_DWORD *)(a1 + 16) * a3));
}

uint64_t NTKSplineVector_print(uint64_t a1)
{
  uint64_t v2;

  putchar(123);
  if (*(int *)(a1 + 8) >= 1)
  {
    v2 = 0;
    do
    {
      printf(" (%lf, %lf) ", COERCE_FLOAT(*(_QWORD *)(*(_QWORD *)a1 + 8 * v2)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(*(_QWORD *)a1 + 8 * v2))));
      ++v2;
    }
    while (v2 < *(int *)(a1 + 8));
  }
  return puts("}\r");
}

uint64_t NTKSplineMatrix_print(uint64_t a1)
{
  int v2;
  unint64_t v3;

  putchar(123);
  v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    v3 = 0;
    do
    {
      if (!((int)v3 % v2))
        puts("\r");
      printf(" %.3e ", *(double *)(*(_QWORD *)a1 + 8 * v3++));
      v2 = *(_DWORD *)(a1 + 16);
    }
    while (v3 < (v2 * v2));
  }
  return puts("}\r");
}

uint64_t NTKSplineMatrix_times_NTKSplineVector_float(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x2_t v7;
  int v8;
  uint64_t v9;

  v3 = *(_DWORD *)(result + 16);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = *(_QWORD *)(result + 8);
    do
    {
      if (v3 < 1)
      {
        v9 = v3;
      }
      else
      {
        v6 = 0;
        v7 = *(float32x2_t *)(*a2 + 8 * v4);
        do
        {
          *(float32x2_t *)(*a3 + 8 * v6) = vmla_n_f32(*(float32x2_t *)(*a3 + 8 * v6), v7, *(float *)(v5 + 4 * v6));
          ++v6;
          v8 = *(_DWORD *)(result + 16);
        }
        while (v6 < v8);
        v9 = v8;
        v3 = *(_DWORD *)(result + 16);
      }
      v5 += 4 * v9;
      ++v4;
    }
    while (v4 < v9);
  }
  return result;
}

_QWORD *NTKSplineMatrixInversionWorkspace_new(int a1)
{
  _QWORD *v2;

  v2 = malloc_type_malloc(0x10uLL, 0x900405DDA6445uLL);
  *v2 = malloc_type_malloc(4 * a1, 0x100004052888210uLL);
  v2[1] = malloc_type_malloc(8 * a1, 0x100004000313F17uLL);
  return v2;
}

void NTKSplineMatrixInversionWorkspace_destroy(void **a1)
{
  free(*a1);
  free(a1[1]);
  free(a1);
}

uint64_t NTKSplineMatrix_invert(uint64_t a1, uint64_t a2)
{
  __CLPK_integer *v3;
  __CLPK_doublereal *v4;
  uint64_t result;
  __CLPK_integer __lda;
  __CLPK_integer __info;

  __lda = *(_DWORD *)(a1 + 16);
  __info = 0;
  v3 = *(__CLPK_integer **)a2;
  v4 = *(__CLPK_doublereal **)(a2 + 8);
  dgetrf_(&__lda, &__lda, *(__CLPK_doublereal **)a1, &__lda, *(__CLPK_integer **)a2, &__info);
  result = __info;
  if (!__info)
  {
    dgetri_(&__lda, *(__CLPK_doublereal **)a1, &__lda, v3, v4, &__lda, &__info);
    return __info;
  }
  return result;
}

void sub_1B72D2898(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1B72D3870(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1B72D3AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B72D3C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B72D3E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _NTKRemovePunctationIfNecessaryFromTextForDateStyle(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  if (a2 == 512 || a2 == 8)
  {
    if (CLKRemovesPunctuationFromWeekdayDay())
    {
      objc_msgSend(MEMORY[0x1E0CB3500], "punctuationCharacterSet");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "componentsSeparatedByCharactersInSet:", v4);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v5, "componentsJoinedByString:", &stru_1E6BDC918);
      v6 = objc_claimAutoreleasedReturnValue();

      v3 = (id)v6;
    }
  }
  return v3;
}

id _NTKAllDateFormatters()
{
  if (_NTKAllDateFormatters_onceToken != -1)
    dispatch_once(&_NTKAllDateFormatters_onceToken, &__block_literal_global_5);
  return (id)_NTKAllDateFormatters_allDateFormatters;
}

void sub_1B72D5238(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1B72D5490(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

uint64_t _NTKFaceSnapshotCacheShowDebugAPLInSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = NTKInternalBuild(a1, a2);
  if ((_DWORD)result)
    return _os_feature_enabled_impl();
  return result;
}

id _NTKFaceDebugAPLSnapshotWithBaseImage(void *a1)
{
  id v1;
  float v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  _QWORD v19[4];
  id v20;
  id v21;
  double v22;
  double v23;
  uint64_t v24;
  _QWORD v25[3];
  _QWORD v26[4];

  v26[3] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  CLKUIComputeImageAPL();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("APL: %0.2f%%"), (float)(v2 * 100.0));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_alloc(MEMORY[0x1E0CB3498]);
  v25[0] = *MEMORY[0x1E0DC1140];
  objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v26[0] = v5;
  v25[1] = *MEMORY[0x1E0DC1100];
  objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:", 0.0, 0.5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v26[1] = v6;
  v25[2] = *MEMORY[0x1E0DC1138];
  objc_msgSend(MEMORY[0x1E0DC1350], "systemFontOfSize:", 20.0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v26[2] = v7;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 3);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(v4, "initWithString:attributes:", v3, v8);

  objc_msgSend(v1, "size");
  v11 = v10;
  v13 = v12;
  v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3828]), "initWithSize:", v10, v12);
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 3221225472;
  v19[2] = ___NTKFaceDebugAPLSnapshotWithBaseImage_block_invoke;
  v19[3] = &unk_1E6BCE280;
  v22 = v11;
  v23 = v13;
  v24 = 0x4034000000000000;
  v20 = v1;
  v21 = v9;
  v15 = v9;
  v16 = v1;
  objc_msgSend(v14, "imageWithActions:", v19);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id _NTKFaceSnapshotCacheKeyForFace(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  objc_msgSend(a1, "dailySnapshotKey");
  v1 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)v1;
  if (v1 && NTKInternalBuild(v1, v2) && _os_feature_enabled_impl())
  {
    objc_msgSend(v3, "stringByAppendingString:", CFSTR("-apl_debug"));
    v4 = objc_claimAutoreleasedReturnValue();

    v3 = (void *)v4;
  }
  return v3;
}

void sub_1B72D9AD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_1B72D9CE0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1B72DCF40(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B72DFA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72DFEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72E0190(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

BOOL willHandsOverlapWhenAnimating(double a1, double a2, double a3, double a4)
{
  return isTargetAngleInPath(a1, a2, a4)
      || isTargetAngleInPath(a1, a2, a3)
      || isTargetAngleInPath(a3, a4, a2)
      || isTargetAngleInPath(a3, a4, a1);
}

BOOL isTargetAngleInPath(double a1, double a2, double a3)
{
  double v5;

  +[NTKOlympusMask normalizeAngle:](NTKOlympusMask, "normalizeAngle:", a3);
  if (a2 > a1 || v5 <= a1)
  {
    if (v5 < a1 && a2 > a1)
      v5 = v5 + 360.0;
  }
  else
  {
    v5 = v5 + -360.0;
  }
  if (v5 >= a1 && v5 <= a2)
    return 1;
  if (v5 <= a1)
    return v5 >= a2;
  return 0;
}

void sub_1B72E2F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

BOOL NTKProtoFacePigmentSetReadFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  NTKProtoCollectionBySlot *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = (NTKProtoCollectionBySlot *)a1[2];
        a1[2] = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(NTKProtoCollectionBySlot);
    objc_msgSend(a1, "addCollectionBySlots:", v18);
    if (!PBReaderPlaceMark() || !NTKProtoCollectionBySlotReadFrom((uint64_t)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void NTKCleanUpForBridgeRemoval()
{
  NSObject *v0;
  void *v1;
  void *v2;
  int v3;
  id v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  int v16;
  void *v17;
  id v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  const __CFString *v34;
  uint64_t v35;
  uint64_t i;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  id v41;
  const __CFString *v42;
  id v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  id v58;
  id v59;
  unsigned __int8 v60;
  uint8_t buf[4];
  void *v62;
  __int16 v63;
  id v64;
  _BYTE v65[128];
  _QWORD v66[4];

  v66[2] = *MEMORY[0x1E0C80C00];
  _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B72A3000, v0, OS_LOG_TYPE_DEFAULT, "starting NTK pref & file cleanup due to Bridge uninstall", buf, 2u);
  }

  NTKKillCompanionDaemon();
  NTKClearUserDefaultsDomain(CFSTR("com.apple.ClockKit"));
  NTKClearUserDefaultsDomain(CFSTR("com.apple.NanoTimeKit"));
  NTKClearUserDefaultsDomain(CFSTR("com.apple.NanoTimeKit.daemon"));
  NTKClearUserDefaultsDomain(CFSTR("com.apple.NanoTimeKit.face"));
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = 0;
  NTKHomeDirectory();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = v1;
  LODWORD(v1) = objc_msgSend(v1, "fileExistsAtPath:isDirectory:", v2, &v60);
  v3 = v60;

  v4 = 0;
  if ((_DWORD)v1 && v3)
  {
    NTKHomeDirectory();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v59 = 0;
    objc_msgSend(v49, "removeItemAtPath:error:", v5, &v59);
    v4 = v59;

    _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v4)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        NTKCleanUpForBridgeRemoval_cold_2((uint64_t)v4, v7, v8, v9, v10, v11, v12, v13);
    }
    else
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B72A3000, v7, OS_LOG_TYPE_DEFAULT, "removed NTK home directory", buf, 2u);
      }
      v4 = 0;
    }

  }
  NTKCacheDirectory();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v49, "fileExistsAtPath:isDirectory:", v14, &v60);
  v16 = v60;

  if (v15 && v16)
  {
    NTKCacheDirectory();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v58 = v4;
    objc_msgSend(v49, "removeItemAtPath:error:", v17, &v58);
    v18 = v58;

    _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = v19;
    if (v18)
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        NTKCleanUpForBridgeRemoval_cold_1((uint64_t)v18, v20, v21, v22, v23, v24, v25, v26);
    }
    else
    {
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B72A3000, v20, OS_LOG_TYPE_DEFAULT, "removed NTK cache directory", buf, 2u);
      }
      v18 = 0;
    }

    v4 = v18;
  }
  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", CFSTR("/private/var/mobile/Library/Caches/MappedImageCache/"));
  v27 = objc_claimAutoreleasedReturnValue();
  v28 = *MEMORY[0x1E0C999D0];
  v50 = *MEMORY[0x1E0C99A90];
  v66[0] = *MEMORY[0x1E0C99A90];
  v66[1] = v28;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v66, 2);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = (void *)v27;
  objc_msgSend(v49, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:", v27, v29, 5, &__block_literal_global_10);
  v30 = (void *)objc_claimAutoreleasedReturnValue();

  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v31 = v30;
  v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v54, v65, 16);
  if (v32)
  {
    v33 = v32;
    v34 = CFSTR("nanotimekit");
    v35 = *(_QWORD *)v55;
    v48 = *(_QWORD *)v55;
    do
    {
      for (i = 0; i != v33; ++i)
      {
        if (*(_QWORD *)v55 != v35)
          objc_enumerationMutation(v31);
        v37 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * i);
        v53 = 0;
        objc_msgSend(v37, "getResourceValue:forKey:error:", &v53, v28, 0);
        v38 = v53;
        if (objc_msgSend(v38, "BOOLValue"))
        {
          v52 = 0;
          objc_msgSend(v37, "getResourceValue:forKey:error:", &v52, v50, 0);
          v39 = v52;
          if (objc_msgSend(v39, "localizedStandardContainsString:", v34))
          {
            v40 = v28;
            v41 = v31;
            v42 = v34;
            v51 = v4;
            objc_msgSend(v49, "removeItemAtURL:error:", v37, &v51);
            v43 = v51;

            _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
            v44 = objc_claimAutoreleasedReturnValue();
            v45 = v44;
            if (v43)
            {
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412546;
                v62 = v37;
                v63 = 2112;
                v64 = v43;
                _os_log_error_impl(&dword_1B72A3000, v45, OS_LOG_TYPE_ERROR, "error removing image cache directory (%@): %@", buf, 0x16u);
              }
            }
            else
            {
              if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v62 = v37;
                _os_log_impl(&dword_1B72A3000, v45, OS_LOG_TYPE_DEFAULT, "removed image cache directory: %@", buf, 0xCu);
              }
              v43 = 0;
            }

            v4 = v43;
            v34 = v42;
            v31 = v41;
            v28 = v40;
            v35 = v48;
          }

        }
      }
      v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v54, v65, 16);
    }
    while (v33);
  }

  _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
  v46 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B72A3000, v46, OS_LOG_TYPE_DEFAULT, "cleanup complete", buf, 2u);
  }

}

void sub_1B72E6C24(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 144));
  _Unwind_Resume(a1);
}

void sub_1B72E8740(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_1B72E8AD0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void sub_1B72E98EC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1B72EB070(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_5_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_1B72ED298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72EDAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _LayoutConstants_1(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_3);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_3);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_3);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_3, obj);
    _LayoutConstants___previousCLKDeviceVersion_3 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_3(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_3;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_3);
  v10 = *(_OWORD *)&qword_1EF1725B0;
  *(_OWORD *)(a2 + 32) = xmmword_1EF1725A0;
  *(_OWORD *)(a2 + 48) = v10;
  *(_OWORD *)(a2 + 64) = xmmword_1EF1725C0;
  *(_QWORD *)(a2 + 80) = qword_1EF1725D0;
  v11 = *(_OWORD *)&qword_1EF172590;
  *(_OWORD *)a2 = _LayoutConstants_constants_0;
  *(_OWORD *)(a2 + 16) = v11;

}

void sub_1B72EEE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B72F007C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B72F0244(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void sub_1B72F2740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B72F5348(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B72F5BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _LayoutConstants_2(void *a1@<X0>, void *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_5);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_5);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_5);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_5, obj);
    _LayoutConstants___previousCLKDeviceVersion_5 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_5(v9, obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_5;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_5);
  memcpy(a2, &_LayoutConstants___constants, 0x108uLL);

}

_QWORD *generateOpenSplineMatrix(int a1)
{
  _QWORD *v2;
  int v3;

  v2 = NTKSplineMatrix_new(a1);
  NTKSplineMatrix_zero((uint64_t)v2);
  if (a1 >= 3)
  {
    v3 = 1;
    do
    {
      NTKSplineMatrix_set((uint64_t)v2, v3, v3 - 1, 1.0);
      NTKSplineMatrix_set((uint64_t)v2, v3, v3, 4.0);
      NTKSplineMatrix_set((uint64_t)v2, v3, v3 + 1, 1.0);
      ++v3;
    }
    while (v3 != a1 - 1);
  }
  NTKSplineMatrix_set((uint64_t)v2, 0, 0, 2.0);
  NTKSplineMatrix_set((uint64_t)v2, 0, 1, 1.0);
  NTKSplineMatrix_set((uint64_t)v2, a1 - 1, a1 - 2, 1.0);
  NTKSplineMatrix_set((uint64_t)v2, a1 - 1, a1 - 1, 2.0);
  return v2;
}

_QWORD *generateClosedSplineMatrix(int a1)
{
  _QWORD *v2;
  int v3;

  v2 = NTKSplineMatrix_new(a1);
  NTKSplineMatrix_zero((uint64_t)v2);
  if (a1 >= 3)
  {
    v3 = 1;
    do
    {
      NTKSplineMatrix_set((uint64_t)v2, v3, v3 - 1, 1.0);
      NTKSplineMatrix_set((uint64_t)v2, v3, v3, 4.0);
      NTKSplineMatrix_set((uint64_t)v2, v3, v3 + 1, 1.0);
      ++v3;
    }
    while (v3 != a1 - 1);
  }
  NTKSplineMatrix_set((uint64_t)v2, 0, 0, 4.0);
  NTKSplineMatrix_set((uint64_t)v2, 0, 1, 1.0);
  NTKSplineMatrix_set((uint64_t)v2, 0, a1 - 1, 1.0);
  NTKSplineMatrix_set((uint64_t)v2, a1 - 1, 0, 1.0);
  NTKSplineMatrix_set((uint64_t)v2, a1 - 1, a1 - 2, 1.0);
  NTKSplineMatrix_set((uint64_t)v2, a1 - 1, a1 - 1, 4.0);
  return v2;
}

float32x2_t computeCubic(float32x2_t *a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, double a6, double a7)
{
  float32x2_t v7;
  float32x2_t v13;
  float32x2_t v14;

  *(float *)&a7 = *(float *)&a6 * *(float *)&a6;
  v7 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a6, 0);
  if (a1)
  {
    __asm { FMOV            V7.2S, #3.0 }
    v13 = vmul_f32(a5, _D7);
    v14 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
    *a1 = vmla_n_f32(vmla_n_f32(a3, vadd_f32(a4, a4), *(float *)&a6), v13, *(float *)&a7);
  }
  else
  {
    v14 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a7, 0);
  }
  return vmla_n_f32(vmla_f32(vmla_f32(a2, a3, v7), a4, v14), a5, *(float *)&a7 * *(float *)&a6);
}

id getNSSComplicationDataSourceClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getNSSComplicationDataSourceClass_softClass;
  v7 = getNSSComplicationDataSourceClass_softClass;
  if (!getNSSComplicationDataSourceClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getNSSComplicationDataSourceClass_block_invoke;
    v3[3] = &unk_1E6BCF200;
    v3[4] = &v4;
    __getNSSComplicationDataSourceClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1B73019CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _BreatheTintColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", 0.22, 0.64, 0.68, 1.0);
}

Class __getNSSComplicationDataSourceClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!NewsServicesLibraryCore_frameworkLibrary)
  {
    NewsServicesLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!NewsServicesLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("NSSComplicationDataSource");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)__getNSSComplicationDataSourceClass_block_invoke_cold_1();
    free(v3);
  }
  getNSSComplicationDataSourceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void NTKConfigureFaceDefaultsChangedNotification()
{
  if (NTKConfigureFaceDefaultsChangedNotification_onceToken != -1)
    dispatch_once(&NTKConfigureFaceDefaultsChangedNotification_onceToken, &__block_literal_global_19);
}

void _FaceDefaultsChanged()
{
  id v0;

  CFPreferencesAppSynchronize(CFSTR("com.apple.NanoTimeKit.face"));
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", CFSTR("NTKFaceDefaultsChangedNotification"), 0);

}

void sub_1B730727C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7308790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;

  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Block_object_dispose(&STACK[0x220], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Unwind_Resume(a1);
}

void sub_1B730BDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _NTKPhotoAnalysisIndex(uint64_t a1)
{
  uint64_t result;
  BOOL v3;
  uint64_t v4;

  switch(CLKDeviceCategoryForSizeClass())
  {
    case 1:
      return a1 != 0;
    case 2:
      v3 = a1 == 0;
      v4 = 2;
      goto LABEL_8;
    case 3:
      v3 = a1 == 0;
      v4 = 4;
      goto LABEL_8;
    case 4:
      v3 = a1 == 0;
      v4 = 6;
      goto LABEL_8;
    case 5:
      v3 = a1 == 0;
      v4 = 8;
LABEL_8:
      if (v3)
        result = v4;
      else
        result = v4 + 1;
      break;
    default:
      result = -1;
      break;
  }
  return result;
}

void sub_1B7311C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B7311D78(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id NTKPodcastsTintColor()
{
  if (NTKPodcastsTintColor_onceToken != -1)
    dispatch_once(&NTKPodcastsTintColor_onceToken, &__block_literal_global_20);
  return (id)NTKPodcastsTintColor__color;
}

id NTKPodcastsTintColorHeadline()
{
  if (NTKPodcastsTintColorHeadline_onceToken != -1)
    dispatch_once(&NTKPodcastsTintColorHeadline_onceToken, &__block_literal_global_2);
  return (id)NTKPodcastsTintColorHeadline__color;
}

id NTKPodcastsTintColorBody()
{
  if (NTKPodcastsTintColorBody_onceToken != -1)
    dispatch_once(&NTKPodcastsTintColorBody_onceToken, &__block_literal_global_3_0);
  return (id)NTKPodcastsTintColorBody__color;
}

id NTKPodcastsTintColorBody2()
{
  if (NTKPodcastsTintColorBody2_onceToken != -1)
    dispatch_once(&NTKPodcastsTintColorBody2_onceToken, &__block_literal_global_4);
  return (id)NTKPodcastsTintColorBody2__color;
}

uint64_t NTKPodcastsPlatterBackgroundColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
}

uint64_t _handleAppConduitApplicationsChangedNotification(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_fetchInstalledApps");
}

void sub_1B73162C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location)
{
  id *v9;
  uint64_t v10;

  objc_destroyWeak(v9);
  objc_destroyWeak((id *)(v10 - 112));
  _Unwind_Resume(a1);
}

void sub_1B7317A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7317BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _NTKTimeTravelSettings_HandleSettingsChanged(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_handlePrefsChanged");
}

void sub_1B7318FAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73190A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B731919C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B7319230(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B7319330(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73193FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B7319468(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B7319584(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B7319878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  id v14;
  NSObject *v15;
  void *v16;

  if (a2 == 1)
  {
    v14 = objc_begin_catch(exception_object);
    _NTKLoggingObjectForDomain(18, (uint64_t)"NTKLoggingDomainComplication");
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v14, "reason");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      -[NTKComplicationSampleData initWithCoder:].cold.2(v16, (uint64_t)&a13, v15);
    }

    objc_end_catch();
    JUMPOUT(0x1B73197F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B7319B54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B7319D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1B7319F54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B731A02C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B731A438(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _handleNumbersChangedNotification(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_updateNumbers");
}

void _LayoutConstants_3(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_7);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_7);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_7);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_7, obj);
    _LayoutConstants___previousCLKDeviceVersion_7 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_6(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_7;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_7);
  v10 = *(_OWORD *)&qword_1EF172820;
  *(_OWORD *)(a2 + 32) = xmmword_1EF172810;
  *(_OWORD *)(a2 + 48) = v10;
  *(_OWORD *)(a2 + 64) = xmmword_1EF172830;
  *(_QWORD *)(a2 + 80) = qword_1EF172840;
  v11 = *(_OWORD *)&qword_1EF172800;
  *(_OWORD *)a2 = _LayoutConstants___constants_0;
  *(_OWORD *)(a2 + 16) = v11;

}

id NTKFaceSupportDatabase()
{
  void *WeakRetained;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint8_t v6[16];
  uint8_t buf[16];

  os_unfair_lock_lock((os_unfair_lock_t)&NTKFaceSupportDatabase_lock);
  WeakRetained = objc_loadWeakRetained(&NTKFaceSupportDatabase_database);
  if (!WeakRetained)
  {
    if (CFPreferencesGetAppBooleanValue(CFSTR("ArgonSandbox"), CFSTR("com.apple.NanoTimeKit.face"), 0))
    {
      _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
      v1 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v2 = 2;
        _os_log_impl(&dword_1B72A3000, v1, OS_LOG_TYPE_DEFAULT, "Using CloudKit sandbox environment", buf, 2u);
      }
      else
      {
        v2 = 2;
      }
    }
    else
    {
      _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
      v1 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_1B72A3000, v1, OS_LOG_TYPE_DEFAULT, "Using CloudKit production environment", v6, 2u);
      }
      v2 = 1;
    }

    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C94C40]), "initWithContainerIdentifier:environment:", CFSTR("com.apple.nanotimekit.facesupport"), v2);
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C94C28]), "initWithContainerID:", v3);
    objc_msgSend(v4, "publicCloudDatabase");
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_setAssociatedObject(WeakRetained, (const void *)NTKFaceSupportEphemeralContainerKey, v4, (void *)1);
    objc_storeWeak(&NTKFaceSupportDatabase_database, WeakRetained);

  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NTKFaceSupportDatabase_lock);
  return WeakRetained;
}

void sub_1B731CB8C(void *a1)
{
  objc_begin_catch(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&NTKFaceSupportDatabase_lock);
  objc_exception_rethrow();
}

void sub_1B731CBB4(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id NTKFaceSupportInternalDirectory(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  NSObject *v4;
  int v6;
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (NTKInternalBuild(a1, a2))
  {
    +[NTKBundleLoader rootDirectory](NTKBundleLoader, "rootDirectory");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("/AppleInternal/Library/NanoTimeKit/FaceSupport/UnencryptedBundles/"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138412290;
      v7 = v3;
      _os_log_impl(&dword_1B72A3000, v4, OS_LOG_TYPE_DEFAULT, "Downloading keys from %@", (uint8_t *)&v6, 0xCu);
    }

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id NTKFaceSupportArchiveSourceDirectory()
{
  void *v0;
  void *v1;

  +[NTKBundleLoader rootDirectory](NTKBundleLoader, "rootDirectory");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("/System/Library/NanoTimeKit/FaceBundles/"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t NTKFaceSupportDefaultArchiveSearchPathDomainMask()
{
  if (NTKInternalBuild())
    return 6;
  else
    return 2;
}

id NTKFaceSupportArchiveSearchPathsForDomains(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[NTKBundleLoader rootDirectory](NTKBundleLoader, "rootDirectory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!a1 || (a1 & 2) != 0)
  {
    objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("/System/Library/NanoTimeKit/FaceBundles/"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v5);

  }
  if ((a1 & 4) != 0)
  {
    objc_msgSend(v4, "stringByAppendingPathComponent:", CFSTR("/AppleInternal/Library/NanoTimeKit/FaceSupport/EncryptedBundles/"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v6);

  }
  v7 = (void *)objc_msgSend(v2, "copy");

  return v7;
}

id NTKFaceSupportUnencryptedBundleSearchPathsForDomains(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 3);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[NTKBundleLoader rootDirectory](NTKBundleLoader, "rootDirectory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (!a1 || (a1 & 2) != 0)
  {
    objc_msgSend(v3, "stringByAppendingPathComponent:", CFSTR("/System/Library/NanoTimeKit/FaceBundles/"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v5);

  }
  if ((a1 & 4) != 0)
  {
    objc_msgSend(v4, "stringByAppendingPathComponent:", CFSTR("/AppleInternal/Library/NanoTimeKit/FaceSupport/UnencryptedBundles/"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v6);

  }
  v7 = (void *)objc_msgSend(v2, "copy");

  return v7;
}

BOOL NTKAskFaceSupportServerToAddKeyDescriptor(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  id v8;
  void *v9;
  NSObject *v10;
  dispatch_semaphore_t v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _BOOL8 v24;
  _QWORD v26[4];
  id v27;
  __int128 *v28;
  uint64_t *v29;
  _QWORD v30[8];
  _QWORD v31[6];
  _QWORD v32[5];
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t);
  id v38;
  _QWORD v39[4];
  NSObject *v40;
  id v41;
  __int128 *v42;
  _QWORD aBlock[4];
  id v44;
  uint64_t *v45;
  __int128 *p_buf;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  void (*v54)(uint64_t);
  id v55;
  __int128 buf;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  void (*v59)(uint64_t);
  id v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v5;
    _os_log_impl(&dword_1B72A3000, v6, OS_LOG_TYPE_DEFAULT, "Asking to add key descriptor: %@", (uint8_t *)&buf, 0xCu);
  }

  v47 = 0;
  v48 = &v47;
  v49 = 0x2020000000;
  v50 = 0;
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v57 = 0x3032000000;
  v58 = __Block_byref_object_copy__4;
  v59 = __Block_byref_object_dispose__4;
  v60 = 0;
  v7 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __NTKAskFaceSupportServerToAddKeyDescriptor_block_invoke;
  aBlock[3] = &unk_1E6BCFB08;
  v8 = v5;
  v44 = v8;
  v45 = &v47;
  p_buf = &buf;
  v9 = _Block_copy(aBlock);
  if (CLKIsNTKDaemon())
  {
    _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v51) = 138412290;
      *(_QWORD *)((char *)&v51 + 4) = v8;
      _os_log_impl(&dword_1B72A3000, v10, OS_LOG_TYPE_DEFAULT, "Adding key descriptor: %@ via daemon", (uint8_t *)&v51, 0xCu);
    }

    *(_QWORD *)&v51 = 0;
    *((_QWORD *)&v51 + 1) = &v51;
    v52 = 0x3032000000;
    v53 = __Block_byref_object_copy__4;
    v54 = __Block_byref_object_dispose__4;
    +[NTKDArgonService sharedService](NTKDArgonService, "sharedService");
    v55 = (id)objc_claimAutoreleasedReturnValue();
    v11 = dispatch_semaphore_create(0);
    v12 = *(void **)(*((_QWORD *)&v51 + 1) + 40);
    v39[0] = v7;
    v39[1] = 3221225472;
    v39[2] = __NTKAskFaceSupportServerToAddKeyDescriptor_block_invoke_94;
    v39[3] = &unk_1E6BCFB30;
    v41 = v9;
    v13 = v11;
    v40 = v13;
    v42 = &v51;
    objc_msgSend(v12, "ingestKeyDescriptor:withMethod:completion:", v8, a2, v39);
    dispatch_semaphore_wait(v13, 0xFFFFFFFFFFFFFFFFLL);

    _Block_object_dispose(&v51, 8);
  }
  else
  {
    _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v51) = 138412290;
      *(_QWORD *)((char *)&v51 + 4) = v8;
      _os_log_impl(&dword_1B72A3000, v14, OS_LOG_TYPE_DEFAULT, "Adding key descriptor: %@ via XPC", (uint8_t *)&v51, 0xCu);
    }

    *(_QWORD *)&v51 = 0;
    *((_QWORD *)&v51 + 1) = &v51;
    v52 = 0x3032000000;
    v53 = __Block_byref_object_copy__4;
    v54 = __Block_byref_object_dispose__4;
    v55 = 0;
    v33 = 0;
    v34 = &v33;
    v35 = 0x3032000000;
    v36 = __Block_byref_object_copy__4;
    v37 = __Block_byref_object_dispose__4;
    v38 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.nanotimekit.facesupportserver"), 4096);
    v15 = (void *)v34[5];
    NTKFaceSupportServerInterface();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setRemoteObjectInterface:", v16);

    v17 = (void *)v34[5];
    v32[0] = v7;
    v32[1] = 3221225472;
    v32[2] = __NTKAskFaceSupportServerToAddKeyDescriptor_block_invoke_95;
    v32[3] = &unk_1E6BCF200;
    v32[4] = &v33;
    objc_msgSend(v17, "setInvalidationHandler:", v32);
    v18 = (void *)v34[5];
    v31[0] = v7;
    v31[1] = 3221225472;
    v31[2] = __NTKAskFaceSupportServerToAddKeyDescriptor_block_invoke_96;
    v31[3] = &unk_1E6BCFA78;
    v31[4] = &v33;
    v31[5] = &v51;
    objc_msgSend(v18, "setInterruptionHandler:", v31);
    objc_msgSend((id)v34[5], "resume");
    v19 = (void *)v34[5];
    v30[0] = v7;
    v30[1] = 3221225472;
    v30[2] = __NTKAskFaceSupportServerToAddKeyDescriptor_block_invoke_97;
    v30[3] = &unk_1E6BCFB58;
    v30[4] = &buf;
    v30[5] = &v47;
    v30[6] = &v51;
    v30[7] = &v33;
    objc_msgSend(v19, "synchronousRemoteObjectProxyWithErrorHandler:", v30);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = *(void **)(*((_QWORD *)&v51 + 1) + 40);
    *(_QWORD *)(*((_QWORD *)&v51 + 1) + 40) = v20;

    v22 = *(void **)(*((_QWORD *)&v51 + 1) + 40);
    v26[0] = v7;
    v26[1] = 3221225472;
    v26[2] = __NTKAskFaceSupportServerToAddKeyDescriptor_block_invoke_98;
    v26[3] = &unk_1E6BCFB80;
    v27 = v9;
    v28 = &v51;
    v29 = &v33;
    objc_msgSend(v22, "ingestKeyDescriptor:withMethod:completion:", v8, a2, v26);

    _Block_object_dispose(&v33, 8);
    _Block_object_dispose(&v51, 8);

  }
  if (a3)
  {
    v23 = *(void **)(*((_QWORD *)&buf + 1) + 40);
    if (v23)
      *a3 = objc_retainAutorelease(v23);
  }
  v24 = *((_BYTE *)v48 + 24) != 0;

  _Block_object_dispose(&buf, 8);
  _Block_object_dispose(&v47, 8);

  return v24;
}

void sub_1B731D4E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Unwind_Resume(a1);
}

BOOL NTKAskFaceSupportServerToResetOnNextLaunch()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _BOOL8 v8;
  _QWORD v10[5];
  _QWORD v11[5];
  uint8_t buf[8];
  uint8_t *v13;
  uint64_t v14;
  char v15;

  _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B72A3000, v0, OS_LOG_TYPE_DEFAULT, "Asking to reset on next launch.", buf, 2u);
  }

  v1 = CLKIsNTKDaemon();
  if ((_DWORD)v1)
  {
    if (!NTKInternalBuild(v1, v2))
      return 0;
    v1 = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("This function is intended for client use and may not be invoked from within the daemon."));
  }
  *(_QWORD *)buf = 0;
  v13 = buf;
  v14 = 0x2020000000;
  v15 = 0;
  v3 = (void *)MEMORY[0x1BCCA7FA8](v1);
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.nanotimekit.facesupportserver"), 4096);
  NTKFaceSupportServerInterface();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setRemoteObjectInterface:", v5);

  objc_msgSend(v4, "resume");
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __NTKAskFaceSupportServerToResetOnNextLaunch_block_invoke;
  v11[3] = &unk_1E6BCFBA8;
  v11[4] = buf;
  objc_msgSend(v4, "synchronousRemoteObjectProxyWithErrorHandler:", v11);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __NTKAskFaceSupportServerToResetOnNextLaunch_block_invoke_102;
  v10[3] = &unk_1E6BCFBD0;
  v10[4] = buf;
  objc_msgSend(v7, "requestResetOnNextLaunch:", v10);
  objc_msgSend(v4, "invalidate");

  objc_autoreleasePoolPop(v3);
  v8 = v13[24] != 0;
  _Block_object_dispose(buf, 8);
  return v8;
}

void sub_1B731DA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id NTKAskFaceSupportServerForKnownKeyDescriptors()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v10[5];
  _QWORD v11[5];
  uint8_t buf[8];
  uint8_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B72A3000, v0, OS_LOG_TYPE_DEFAULT, "Requesting known key descriptors.", buf, 2u);
  }

  v1 = CLKIsNTKDaemon();
  if ((_DWORD)v1)
  {
    if (!NTKInternalBuild(v1, v2))
    {
      v8 = 0;
      return v8;
    }
    v1 = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("This function is intended for client use and may not be invoked from within the daemon."));
  }
  *(_QWORD *)buf = 0;
  v13 = buf;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy__4;
  v16 = __Block_byref_object_dispose__4;
  v17 = 0;
  v3 = (void *)MEMORY[0x1BCCA7FA8](v1);
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.nanotimekit.facesupportserver"), 4096);
  NTKFaceSupportServerInterface();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setRemoteObjectInterface:", v5);

  objc_msgSend(v4, "resume");
  v6 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __NTKAskFaceSupportServerForKnownKeyDescriptors_block_invoke;
  v11[3] = &unk_1E6BCFBA8;
  v11[4] = buf;
  objc_msgSend(v4, "synchronousRemoteObjectProxyWithErrorHandler:", v11);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = v6;
  v10[1] = 3221225472;
  v10[2] = __NTKAskFaceSupportServerForKnownKeyDescriptors_block_invoke_103;
  v10[3] = &unk_1E6BCFBF8;
  v10[4] = buf;
  objc_msgSend(v7, "knownKeyDescriptors:", v10);
  objc_msgSend(v4, "invalidate");

  objc_autoreleasePoolPop(v3);
  v8 = *((id *)v13 + 5);
  _Block_object_dispose(buf, 8);

  return v8;
}

void sub_1B731DCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL NTKAskFaceSupportServerToDisplayUserNotificationForKeyDescriptor(void *a1, _QWORD *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _BOOL8 v13;
  _QWORD v15[6];
  _QWORD v16[6];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  __int128 buf;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v3, "fileName");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v5;
    _os_log_impl(&dword_1B72A3000, v4, OS_LOG_TYPE_DEFAULT, "Requesting user notification for %@", (uint8_t *)&buf, 0xCu);

  }
  v6 = CLKIsNTKDaemon();
  if ((_DWORD)v6)
  {
    if (!NTKInternalBuild(v6, v7))
    {
      v13 = 0;
      goto LABEL_11;
    }
    v6 = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("This function is intended for client use and may not be invoked from within the daemon."));
  }
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  *(_QWORD *)&buf = 0;
  *((_QWORD *)&buf + 1) = &buf;
  v22 = 0x3032000000;
  v23 = __Block_byref_object_copy__4;
  v24 = __Block_byref_object_dispose__4;
  v25 = 0;
  v8 = (void *)MEMORY[0x1BCCA7FA8](v6);
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.nanotimekit.facesupportserver"), 4096);
  NTKFaceSupportServerInterface();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setRemoteObjectInterface:", v10);

  objc_msgSend(v9, "resume");
  v11 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = __NTKAskFaceSupportServerToDisplayUserNotificationForKeyDescriptor_block_invoke;
  v16[3] = &unk_1E6BCFC20;
  v16[4] = &buf;
  v16[5] = &v17;
  objc_msgSend(v9, "synchronousRemoteObjectProxyWithErrorHandler:", v16);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v15[0] = v11;
  v15[1] = 3221225472;
  v15[2] = __NTKAskFaceSupportServerToDisplayUserNotificationForKeyDescriptor_block_invoke_105;
  v15[3] = &unk_1E6BCFC48;
  v15[4] = &v17;
  v15[5] = &buf;
  objc_msgSend(v12, "displayUserNotificationForKeyDescriptor:completion:", v3, v15);
  objc_msgSend(v9, "invalidate");

  objc_autoreleasePoolPop(v8);
  v13 = *((_BYTE *)v18 + 24) != 0;
  if (a2 && !*((_BYTE *)v18 + 24))
    *a2 = objc_retainAutorelease(*(id *)(*((_QWORD *)&buf + 1) + 40));
  _Block_object_dispose(&buf, 8);

  _Block_object_dispose(&v17, 8);
LABEL_11:

  return v13;
}

void sub_1B731E038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL NTKAskFaceSupportServerForCurrentEnvironment(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _BOOL8 v12;
  _QWORD v14[7];
  _QWORD v15[6];
  uint8_t buf[8];
  uint8_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;

  _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B72A3000, v4, OS_LOG_TYPE_DEFAULT, "Requesting current environment.", buf, 2u);
  }

  v5 = CLKIsNTKDaemon();
  if ((_DWORD)v5)
  {
    if (!NTKInternalBuild(v5, v6))
      return 0;
    v5 = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("This function is intended for client use and may not be invoked from within the daemon."));
  }
  v26 = 0;
  v27 = &v26;
  v28 = 0x2020000000;
  v29 = 0;
  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  *(_QWORD *)buf = 0;
  v17 = buf;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy__4;
  v20 = __Block_byref_object_dispose__4;
  v21 = 0;
  v7 = (void *)MEMORY[0x1BCCA7FA8](v5);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.nanotimekit.facesupportserver"), 4096);
  NTKFaceSupportServerInterface();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setRemoteObjectInterface:", v9);

  objc_msgSend(v8, "resume");
  v10 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __NTKAskFaceSupportServerForCurrentEnvironment_block_invoke;
  v15[3] = &unk_1E6BCFC20;
  v15[4] = buf;
  v15[5] = &v26;
  objc_msgSend(v8, "synchronousRemoteObjectProxyWithErrorHandler:", v15);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v10;
  v14[1] = 3221225472;
  v14[2] = __NTKAskFaceSupportServerForCurrentEnvironment_block_invoke_106;
  v14[3] = &unk_1E6BCFC70;
  v14[4] = &v26;
  v14[5] = &v22;
  v14[6] = buf;
  objc_msgSend(v11, "requestCurrentEnvironment:", v14);
  objc_msgSend(v8, "invalidate");

  objc_autoreleasePoolPop(v7);
  if (a1)
    *a1 = v23[3];
  if (a2)
    *a2 = objc_retainAutorelease(*((id *)v17 + 5));
  v12 = *((_BYTE *)v27 + 24) != 0;
  _Block_object_dispose(buf, 8);

  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);
  return v12;
}

void sub_1B731E380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

BOOL NTKAskFaceSupportServerToChangeCurrentEnvironment(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _BOOL8 v12;
  _QWORD v14[6];
  _QWORD v15[6];
  uint8_t buf[8];
  uint8_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;

  _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B72A3000, v4, OS_LOG_TYPE_DEFAULT, "Setting current environment.", buf, 2u);
  }

  v5 = CLKIsNTKDaemon();
  if ((_DWORD)v5)
  {
    if (!NTKInternalBuild(v5, v6))
      return 0;
    v5 = objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99750], CFSTR("This function is intended for client use and may not be invoked from within the daemon."));
  }
  v22 = 0;
  v23 = &v22;
  v24 = 0x2020000000;
  v25 = 0;
  *(_QWORD *)buf = 0;
  v17 = buf;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy__4;
  v20 = __Block_byref_object_dispose__4;
  v21 = 0;
  v7 = (void *)MEMORY[0x1BCCA7FA8](v5);
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3B38]), "initWithMachServiceName:options:", CFSTR("com.apple.nanotimekit.facesupportserver"), 4096);
  NTKFaceSupportServerInterface();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setRemoteObjectInterface:", v9);

  objc_msgSend(v8, "resume");
  v10 = MEMORY[0x1E0C809B0];
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __NTKAskFaceSupportServerToChangeCurrentEnvironment_block_invoke;
  v15[3] = &unk_1E6BCFC20;
  v15[4] = buf;
  v15[5] = &v22;
  objc_msgSend(v8, "synchronousRemoteObjectProxyWithErrorHandler:", v15);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14[0] = v10;
  v14[1] = 3221225472;
  v14[2] = __NTKAskFaceSupportServerToChangeCurrentEnvironment_block_invoke_108;
  v14[3] = &unk_1E6BCFC48;
  v14[4] = &v22;
  v14[5] = buf;
  objc_msgSend(v11, "setCurrentEnvironment:completion:", a1, v14);
  objc_msgSend(v8, "invalidate");

  objc_autoreleasePoolPop(v7);
  if (a2)
    *a2 = objc_retainAutorelease(*((id *)v17 + 5));
  v12 = *((_BYTE *)v23 + 24) != 0;
  _Block_object_dispose(buf, 8);

  _Block_object_dispose(&v22, 8);
  return v12;
}

void sub_1B731E6B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_2_1(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t NTKFaceSnapshotRendererSuccessLogMessage(int a1)
{
  const __CFString *v1;

  v1 = &stru_1E6BDC918;
  if (a1)
    v1 = CFSTR(" hasBlankComplication");
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("snapshot succeeded%@"), v1);
}

void sub_1B731F194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B73207E0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Block_object_dispose((const void *)(v3 - 240), 8);
  objc_destroyWeak((id *)(v3 - 208));
  _Block_object_dispose((const void *)(v3 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1B7320E40(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1B7321418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id ViewClassForFace(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (a1)
  {
    v1 = a1;
    v2 = objc_msgSend(v1, "faceStyle");
    objc_msgSend(v1, "bundleIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "device");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      +[NTKFaceBundleManager sharedManager](NTKFaceBundleManager, "sharedManager");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "faceBundleForBundleIdentifier:onDevice:", v3, v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v6, "faceViewClass");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_9:

    }
    else
    {
      switch(v2)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 6:
        case 7:
        case 8:
        case 10:
        case 12:
        case 14:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 41:
        case 42:
          goto LABEL_8;
        case 5:
        case 9:
        case 11:
        case 13:
        case 15:
        case 21:
        case 22:
        case 23:
        case 34:
        case 40:
        case 43:
          goto LABEL_12;
        default:
          if ((unint64_t)(v2 - 200) <= 0x21 && ((1 << (v2 + 56)) & 0x3991F140FLL) != 0)
          {
LABEL_8:
            +[NTKFaceBundleManager sharedManager](NTKFaceBundleManager, "sharedManager");
            v6 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
            v8 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v6, "faceBundleForFaceStyle:onDevice:", v2, v8);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v9, "faceViewClass");
            v7 = (void *)objc_claimAutoreleasedReturnValue();

            goto LABEL_9;
          }
LABEL_12:
          objc_opt_class();
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          break;
      }
    }

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

void sub_1B73239D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *createDateFormat(uint64_t a1, int a2, int a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v10;
  uint64_t v11;
  __CFString *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  __CFString *v17;
  __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  __CFString *v25;
  const __CFString *v26;
  void *v27;
  uint64_t v28;
  char v30;
  uint64_t v31;
  const __CFString *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  objc_msgSend(MEMORY[0x1E0CB3578], "_componentsFromFormatString:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
  if (!v6)
  {
    v12 = &stru_1E6BDC918;
    goto LABEL_28;
  }
  v7 = v6;
  v8 = *(_QWORD *)v34;
  v9 = *MEMORY[0x1E0C99730];
  if (a3)
    v10 = CFSTR("%+1.0f");
  else
    v10 = CFSTR("%1.0f");
  if (a2)
    v10 = CFSTR("%02d");
  v32 = v10;
  v11 = *MEMORY[0x1E0C99740];
  v12 = &stru_1E6BDC918;
  do
  {
    v13 = 0;
    v31 = v7;
    do
    {
      if (*(_QWORD *)v34 != v8)
        objc_enumerationMutation(v5);
      v14 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v13);
      objc_msgSend(v14, "objectForKeyedSubscript:", v9);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = objc_msgSend(v15, "BOOLValue");

      objc_msgSend(v14, "objectForKeyedSubscript:", v11);
      v17 = (__CFString *)objc_claimAutoreleasedReturnValue();
      v18 = v17;
      if (v16)
      {
        -[__CFString stringByAppendingString:](v12, "stringByAppendingString:", v17);
        v19 = objc_claimAutoreleasedReturnValue();

        v12 = (__CFString *)v19;
        goto LABEL_21;
      }
      if ((-[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("HH")) & 1) != 0)
        goto LABEL_18;
      v20 = v9;
      v21 = v8;
      v22 = v5;
      objc_msgSend(v14, "objectForKeyedSubscript:", v11);
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v23, "isEqualToString:", CFSTR("hh")) & 1) != 0)
        goto LABEL_17;
      objc_msgSend(v14, "objectForKeyedSubscript:", v11);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v24, "isEqualToString:", CFSTR("H")))
      {

LABEL_17:
        v5 = v22;
        v8 = v21;
        v9 = v20;
        v7 = v31;
LABEL_18:

        goto LABEL_19;
      }
      objc_msgSend(v14, "objectForKeyedSubscript:", v11);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(v27, "isEqualToString:", CFSTR("h"));

      v5 = v22;
      v8 = v21;
      v9 = v20;
      v7 = v31;
      if ((v30 & 1) == 0)
      {
        v25 = v12;
        v26 = CFSTR("%02d");
        goto LABEL_20;
      }
LABEL_19:
      v25 = v12;
      v26 = v32;
LABEL_20:
      -[__CFString stringByAppendingString:](v25, "stringByAppendingString:", v26);
      v18 = v12;
      v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_21:

      ++v13;
    }
    while (v7 != v13);
    v28 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v33, v37, 16);
    v7 = v28;
  }
  while (v28);
LABEL_28:

  return v12;
}

void createDateFormats()
{
  id v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;

  v0 = objc_alloc(MEMORY[0x1E0C99DC8]);
  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "localeIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = (id)objc_msgSend(v0, "initWithLocaleIdentifier:", v2);

  objc_msgSend(MEMORY[0x1E0CB3578], "dateFormatFromTemplate:options:locale:", CFSTR("mmssSS"), 0, v19);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)__formatMinSecSubsec;
  __formatMinSecSubsec = v3;

  objc_msgSend(MEMORY[0x1E0CB3578], "dateFormatFromTemplate:options:locale:", CFSTR("HHmmss"), 0, v19);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)__formatHourMinSec;
  __formatHourMinSec = v5;

  objc_msgSend(MEMORY[0x1E0CB3578], "dateFormatFromTemplate:options:locale:", CFSTR("HHmm"), 0, v19);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)__formatHourMin;
  __formatHourMin = v7;

  objc_msgSend(MEMORY[0x1E0CB3578], "dateFormatFromTemplate:options:locale:", CFSTR("HHmm"), 0, v19);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)__formatHourMinSigned;
  __formatHourMinSigned = v9;

  createDateFormat(__formatMinSecSubsec, 1, 0);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = (void *)__formatMinSecSubsec;
  __formatMinSecSubsec = v11;

  createDateFormat(__formatHourMinSec, 1, 0);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)__formatHourMinSec;
  __formatHourMinSec = v13;

  createDateFormat(__formatHourMin, 0, 0);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (void *)__formatHourMin;
  __formatHourMin = v15;

  createDateFormat(__formatHourMinSigned, 0, 1);
  v17 = objc_claimAutoreleasedReturnValue();
  v18 = (void *)__formatHourMinSigned;
  __formatHourMinSigned = v17;

}

id _ImageCache(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_ImageCache___lock);
  WeakRetained = objc_loadWeakRetained(&_ImageCache___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_ImageCache___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_ImageCache___cachedDevice, v1);
    _ImageCache___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    v8 = objc_opt_new();
    v9 = (void *)_ImageCache___dictionary;
    _ImageCache___dictionary = v8;

    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _ImageCache___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_ImageCache___lock);
  v10 = (id)_ImageCache___dictionary;

  return v10;
}

id _cacheKeyString(uint64_t a1, void *a2, double a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  char __str[75];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = 0.0;
  v9 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  objc_msgSend(a2, "getRed:green:blue:alpha:", &v9, &v8, &v7, &v6);
  snprintf(__str, 0x4BuLL, "%tu_%x%x%x%x_%.2f", a1, (int)(v9 * 255.0), (int)(v8 * 255.0), (int)(v7 * 255.0), (int)(v6 * 255.0), a3);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", __str);
  return (id)objc_claimAutoreleasedReturnValue();
}

NTKCompanionRemoteComplicationManager *NTKSharedRemoteComplicationProvider()
{
  return +[NTKCompanionRemoteComplicationManager sharedInstance](NTKCompanionRemoteComplicationManager, "sharedInstance");
}

void sub_1B732798C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t _subsampleFactorForAsset(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;

  if (!a1)
    return 1;
  v1 = a1;
  v2 = objc_msgSend(v1, "pixelWidth");
  v3 = objc_msgSend(v1, "pixelHeight");

  if ((unint64_t)(v3 * v2) <= 0xE4E1C0)
    return 1;
  else
    return 2;
}

void sub_1B732A2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___fullSizeImageForAsset_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;

  if (a2)
  {
    +[NTKCompanionResourceDirectoryEditor _subsampledImageWithData:orientation:subsampleFactor:](NTKCompanionResourceDirectoryEditor, "_subsampledImageWithData:orientation:subsampleFactor:", a2, a3, *(_QWORD *)(a1 + 40));
    a2 = objc_claimAutoreleasedReturnValue();
  }
  v4 = (id)a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void ___watchSizeImageForAsset_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  NTKCompanionImageDataScaler *v11;
  _QWORD v12[4];
  id v13;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = (double)(unint64_t)objc_msgSend(v5, "pixelWidth");
  v8 = (double)(unint64_t)objc_msgSend(*(id *)(a1 + 32), "pixelHeight");
  +[NTKCompanionResourceDirectoryEditor _watchPhotoImageSize](NTKCompanionResourceDirectoryEditor, "_watchPhotoImageSize");
  v11 = -[NTKCompanionImageDataScaler initWithSize:crop:data:orientation:outputSize:]([NTKCompanionImageDataScaler alloc], "initWithSize:crop:data:orientation:outputSize:", v6, a3, v7, v8, *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72), v9, v10);

  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___watchSizeImageForAsset_block_invoke_2;
  v12[3] = &unk_1E6BD01C8;
  v13 = *(id *)(a1 + 40);
  -[NTKCompanionImageDataScaler cropAndScaleWithCompletion:](v11, "cropAndScaleWithCompletion:", v12);

}

void ___watchSizeImageForAsset_block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v3;

  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0DC3870], "imageWithData:scale:", a2, 1.0);
    a2 = objc_claimAutoreleasedReturnValue();
  }
  v3 = (id)a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

uint64_t invokeBlockForArchiveEvent(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t (**v9)(void *, uint64_t, void *, uint64_t);
  void *v10;
  uint64_t v11;

  v8 = (void *)MEMORY[0x1BCCA7FA8]();
  v9 = (uint64_t (**)(void *, uint64_t, void *, uint64_t))_Block_copy(a1);
  if (v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v9[2](v9, a2, v10, a4);

  }
  else
  {
    v11 = 0;
  }

  objc_autoreleasePoolPop(v8);
  return v11;
}

double NTKSiderealDegreesToSolarDayProgress(double a1)
{
  double result;

  result = a1 / 360.0;
  if (result < 0.0)
    return result + 1.0;
  return result;
}

uint64_t NTKSunriseAltitudeToSolarDayPercentage()
{
  return CLKMapFractionIntoRange();
}

uint64_t NTKSunsetAltitudeToSolarDayPercentage()
{
  return CLKMapFractionIntoRange();
}

double NTKPointOnCircle(double a1, double a2, double a3, double a4)
{
  float v5;

  v5 = a4;
  return a2 + a1 * __sincosf_stret(v5).__cosval;
}

id NTKCircleSectorPath(uint64_t a1, double a2, double a3, double a4, double a5, double a6)
{
  void *v12;

  objc_msgSend(MEMORY[0x1E0DC3508], "bezierPath");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "moveToPoint:", a2, a3);
  objc_msgSend(v12, "addArcWithCenter:radius:startAngle:endAngle:clockwise:", a1, a2, a3, a4, a5, a6);
  objc_msgSend(v12, "closePath");
  return v12;
}

__n128 _LayoutConstants_4@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_10);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_10);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_10);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_10, obj);
    _LayoutConstants___previousCLKDeviceVersion_10 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_9(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_10;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_10);
  v10 = *(_OWORD *)&qword_1EF1729A8;
  *(_OWORD *)(a2 + 64) = xmmword_1EF172998;
  *(_OWORD *)(a2 + 80) = v10;
  *(_QWORD *)(a2 + 96) = qword_1EF1729B8;
  v11 = *(_OWORD *)&qword_1EF172968;
  *(_OWORD *)a2 = _LayoutConstants___constants_1;
  *(_OWORD *)(a2 + 16) = v11;
  v12 = *(_OWORD *)&qword_1EF172988;
  *(_OWORD *)(a2 + 32) = xmmword_1EF172978;
  *(_OWORD *)(a2 + 48) = v12;

  return result;
}

void sub_1B732EEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B732EFA8(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

double _LayoutConstants_5(void *a1, uint64_t a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  __int128 *v11;
  NSObject *v12;
  double v13;

  v3 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_11);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_11);
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v6 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_11);
    if (v6 == v3)
    {
      v7 = objc_msgSend(v3, "version");
      v8 = _LayoutConstants___previousCLKDeviceVersion_11;

      if (v7 == v8)
        goto LABEL_6;
    }
    else
    {

    }
  }
  v9 = objc_storeWeak(&_LayoutConstants___cachedDevice_11, v3);
  _LayoutConstants___previousCLKDeviceVersion_11 = objc_msgSend(v3, "version");

  ___LayoutConstants_block_invoke_10(v10, v3);
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_11);
  if (a2 == 10)
  {
LABEL_12:
    v11 = &_LayoutConstants___constantsGraphicCircular;
    goto LABEL_13;
  }
  if (a2 != 12)
  {
    _NTKLoggingObjectForDomain(18, (uint64_t)"NTKLoggingDomainComplication");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      _LayoutConstants_cold_1(a2, v12);

    goto LABEL_12;
  }
  v11 = &_LayoutConstants___constantsGraphicExtraLarge;
LABEL_13:
  v13 = *(double *)v11;

  return v13;
}

void sub_1B732FCF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1B73301F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _LayoutConstants_6(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  id v15;

  v5 = a1;
  v15 = v5;
  if (a2)
  {
    v6 = v5;
    os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstantsExtraLarge___lock);
    WeakRetained = objc_loadWeakRetained(&_LayoutConstantsExtraLarge___cachedDevice);
    if (WeakRetained)
    {
      v8 = WeakRetained;
      v9 = objc_loadWeakRetained(&_LayoutConstantsExtraLarge___cachedDevice);
      if (v9 == v6)
      {
        v10 = objc_msgSend(v6, "version");
        v11 = _LayoutConstantsExtraLarge___previousCLKDeviceVersion;

        if (v10 == v11)
        {
LABEL_8:
          os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstantsExtraLarge___lock);
          v14 = *(_OWORD *)&qword_1EF172A50;
          *(_OWORD *)a3 = _LayoutConstantsExtraLarge___constants;
          *(_OWORD *)(a3 + 16) = v14;
          *(_QWORD *)(a3 + 32) = qword_1EF172A60;

          goto LABEL_9;
        }
      }
      else
      {

      }
    }
    v12 = objc_storeWeak(&_LayoutConstantsExtraLarge___cachedDevice, v6);
    _LayoutConstantsExtraLarge___previousCLKDeviceVersion = objc_msgSend(v6, "version");

    ___LayoutConstantsExtraLarge_block_invoke(v13, v6);
    goto LABEL_8;
  }
  _LayoutConstantsModularSmall(v5, a3);
LABEL_9:

}

void sub_1B7330834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  id *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void _LayoutConstantsModularSmall(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstantsModularSmall___lock);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstantsModularSmall___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstantsModularSmall___cachedDevice);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstantsModularSmall___cachedDevice, obj);
    _LayoutConstantsModularSmall___previousCLKDeviceVersion = objc_msgSend(obj, "version");

    ___LayoutConstantsModularSmall_block_invoke(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstantsModularSmall___previousCLKDeviceVersion;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstantsModularSmall___lock);
  v10 = unk_1EF172A90;
  *(_OWORD *)a2 = _LayoutConstantsModularSmall___constants;
  *(_OWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 32) = qword_1EF172AA0;

}

void sub_1B7331B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

NTKColorCurveElement *_elementWithColorAtAltitude(double a1, double a2, double a3, double a4)
{
  void *v5;
  NTKColorCurveElement *v6;
  double v7;
  NTKColorCurveElement *v8;

  objc_msgSend(MEMORY[0x1E0DC3658], "colorWithHue:saturation:brightness:alpha:", a1 / 360.0, a2 / 100.0, a3 / 100.0, 1.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = [NTKColorCurveElement alloc];
  *(float *)&v7 = a4;
  v8 = -[NTKColorCurveElement initWithColor:fraction:](v6, "initWithColor:fraction:", v5, v7);

  return v8;
}

double _LayoutConstants_7(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_12);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_12);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_12);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_LayoutConstants___cachedDevice_12, v1);
    _LayoutConstants___previousCLKDeviceVersion_12 = objc_msgSend(v1, "version");

    ___LayoutConstants_block_invoke_11(v8, (uint64_t)v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _LayoutConstants___previousCLKDeviceVersion_12;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_12);
  v9 = *(double *)&_LayoutConstants___constants_0_3;

  return v9;
}

void sub_1B7338420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _disabledLayerActions()
{
  if (_disabledLayerActions_onceToken != -1)
    dispatch_once(&_disabledLayerActions_onceToken, &__block_literal_global_33);
  return (id)_disabledLayerActions__dictionary;
}

void ___disabledLayerActions_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  _QWORD v3[6];
  _QWORD v4[7];

  v4[6] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = CFSTR("transform");
  v3[1] = CFSTR("borderColor");
  v4[0] = v0;
  v4[1] = v0;
  v3[2] = CFSTR("borderWidth");
  v3[3] = CFSTR("backgroundColor");
  v4[2] = v0;
  v4[3] = v0;
  v3[4] = CFSTR("opacity");
  v3[5] = CFSTR("cornerRadius");
  v4[4] = v0;
  v4[5] = v0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, v3, 6);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)_disabledLayerActions__dictionary;
  _disabledLayerActions__dictionary = v1;

}

void sub_1B733C278(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t create_zip(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t disk_open;
  size_t v16;
  uint64_t next_header2;
  const char *v18;
  const char *v19;
  int v20;
  uint64_t v21;
  const char *v22;
  int v23;
  int v24;
  int v25;
  ssize_t v26;
  uint64_t v27;
  NSObject *v28;
  int *v29;
  char *v30;
  NSObject *v31;
  const char *v32;
  uint32_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  const char *v38;
  int *v39;
  char *v40;
  NSObject *v41;
  const char *v42;
  NSObject *v43;
  uint32_t v45;
  int *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  const char *v52;
  uint64_t v53;
  size_t v54;
  stat v55;
  char __dst[1024];
  uint8_t v57[4];
  const char *v58;
  __int16 v59;
  ssize_t v60;
  __int16 v61;
  char *v62;
  __int16 v63;
  uint64_t v64;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  _BYTE v68[18];
  uint64_t v69;

  MEMORY[0x1E0C80A78](a1, a2, a3);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v69 = *MEMORY[0x1E0C80C00];
  v9 = strnlen(v3, 0x400uLL);
  archive_write_new();
  archive_write_set_format_zip();
  archive_write_set_options();
  v10 = archive_write_open_filename();
  if ((_DWORD)v10)
  {
    v11 = v10;
    _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      create_zip_cold_2();

  }
  else
  {
    v54 = v9;
    if (v6)
    {
      v13 = 0;
      v52 = v4;
      v53 = v6;
      while (1)
      {
        archive_read_disk_new();
        archive_read_disk_set_standard_lookup();
        v14 = v8;
        disk_open = archive_read_disk_open();
        v16 = v54;
        if ((_DWORD)disk_open)
          break;
        while (1)
        {
          archive_entry_new();
          next_header2 = archive_read_next_header2();
          if ((_DWORD)next_header2)
            break;
          archive_read_disk_descend();
          v18 = (const char *)archive_entry_sourcepath();
          if (strlen(v18) > v16 && !strncmp(v18, v4, v16))
          {
            v19 = &v18[v54 - 1];
            do
              v20 = *(unsigned __int8 *)++v19;
            while (v20 == 47);
            strncpy(__dst, v19, 0x400uLL);
            archive_entry_set_pathname();
          }
          v21 = archive_write_header();
          if ((_DWORD)v21)
          {
            v11 = v21;
            _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
            v35 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
              goto LABEL_41;
            v49 = archive_error_string();
            *(_DWORD *)buf = 136315650;
            v66 = "create_zip";
            v67 = 1024;
            *(_DWORD *)v68 = v11;
            *(_WORD *)&v68[4] = 2080;
            *(_QWORD *)&v68[6] = v49;
            v37 = v35;
            v38 = "%s, error in archive_write_header(): %d, %s";
LABEL_56:
            _os_log_error_impl(&dword_1B72A3000, v37, OS_LOG_TYPE_ERROR, v38, buf, 0x1Cu);
LABEL_41:

            goto LABEL_33;
          }
          v22 = (const char *)archive_entry_sourcepath();
          memset(&v55, 0, sizeof(v55));
          if (lstat(v22, &v55))
          {
            _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
            v43 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            {
              v39 = __error();
              v40 = strerror(*v39);
              *(_DWORD *)buf = 136315650;
              v66 = "copy_file_data";
              v67 = 2080;
              *(_QWORD *)v68 = v22;
              *(_WORD *)&v68[8] = 2080;
              *(_QWORD *)&v68[10] = v40;
              v41 = v43;
              v42 = "%s, error: cannot stat %s, %s";
              goto LABEL_50;
            }
LABEL_52:

LABEL_32:
            v11 = 4294967266;
            goto LABEL_33;
          }
          v23 = v55.st_mode & 0xF000;
          if (v23 == 0x8000)
          {
            if (v55.st_nlink >= 2u)
            {
              _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
              v43 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                goto LABEL_52;
              *(_DWORD *)buf = 136315650;
              v66 = "copy_file_data";
              v67 = 2080;
              *(_QWORD *)v68 = v22;
              *(_WORD *)&v68[8] = 2048;
              *(_QWORD *)&v68[10] = v55.st_nlink;
              v41 = v43;
              v42 = "%s, error: %s has a link count > 1 (%ld)";
            }
            else
            {
              v24 = open(v22, 0);
              if ((v24 & 0x80000000) == 0)
              {
                v25 = v24;
                v26 = read(v24, buf, 0x4000uLL);
                if (v26)
                {
                  while (1)
                  {
                    if (v26 < 0)
                    {
                      _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
                      v28 = objc_claimAutoreleasedReturnValue();
                      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                        goto LABEL_30;
                      v29 = __error();
                      v30 = strerror(*v29);
                      *(_DWORD *)v57 = 136315650;
                      v58 = "copy_file_data";
                      v59 = 2080;
                      v60 = (ssize_t)v22;
                      v61 = 2080;
                      v62 = v30;
                      v31 = v28;
                      v32 = "%s, error: read error in %s, %s";
                      v33 = 32;
                      goto LABEL_54;
                    }
                    v27 = archive_write_data();
                    if (v27 != v26)
                      break;
                    v26 = read(v25, buf, 0x4000uLL);
                    if (!v26)
                    {
                      close(v25);
                      v16 = v54;
                      goto LABEL_26;
                    }
                  }
                  v34 = v27;
                  _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
                  v28 = objc_claimAutoreleasedReturnValue();
                  if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                    goto LABEL_30;
                  v48 = archive_error_string();
                  *(_DWORD *)v57 = 136315906;
                  v58 = "copy_file_data";
                  v59 = 2048;
                  v60 = v26;
                  v61 = 2048;
                  v62 = (char *)v34;
                  v63 = 2080;
                  v64 = v48;
                  v31 = v28;
                  v32 = "%s, error in archive_write_data(), (in == %zu, out == %zu): %s";
                  v33 = 42;
LABEL_54:
                  _os_log_error_impl(&dword_1B72A3000, v31, OS_LOG_TYPE_ERROR, v32, v57, v33);
LABEL_30:

                  v4 = v52;
                }
                close(v25);
                goto LABEL_32;
              }
              _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
              v43 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                goto LABEL_52;
              v46 = __error();
              v47 = strerror(*v46);
              *(_DWORD *)buf = 136315650;
              v66 = "copy_file_data";
              v67 = 2080;
              *(_QWORD *)v68 = v22;
              *(_WORD *)&v68[8] = 2080;
              *(_QWORD *)&v68[10] = v47;
              v41 = v43;
              v42 = "%s, error: cannot open %s, %s";
            }
LABEL_50:
            v45 = 32;
LABEL_51:
            _os_log_error_impl(&dword_1B72A3000, v41, OS_LOG_TYPE_ERROR, v42, buf, v45);
            goto LABEL_52;
          }
          if (v23 != 0x4000)
          {
            _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
            v43 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
              goto LABEL_52;
            *(_DWORD *)buf = 136315394;
            v66 = "copy_file_data";
            v67 = 2080;
            *(_QWORD *)v68 = v22;
            v41 = v43;
            v42 = "%s, error: %s is not a regular file or directory";
            v45 = 22;
            goto LABEL_51;
          }
LABEL_26:
          archive_entry_free();
        }
        v11 = next_header2;
        if ((_DWORD)next_header2 != 1)
        {
          _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
          v35 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
            goto LABEL_41;
          v36 = archive_error_string();
          *(_DWORD *)buf = 136315650;
          v66 = "create_zip";
          v67 = 1024;
          *(_DWORD *)v68 = v11;
          *(_WORD *)&v68[4] = 2080;
          *(_QWORD *)&v68[6] = v36;
          v37 = v35;
          v38 = "%s, error in archive_read_next_header2(): %d, %s";
          goto LABEL_56;
        }
        v11 = 0;
LABEL_33:
        archive_entry_free();
        archive_read_close();
        archive_read_free();
        if ((_DWORD)v11)
          goto LABEL_58;
        ++v13;
        v8 = v14;
        if (v13 == v53)
          goto LABEL_57;
      }
      v11 = disk_open;
      _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
      v50 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        create_zip_cold_1();

    }
    else
    {
LABEL_57:
      v11 = 0;
LABEL_58:
      archive_write_close();
      archive_write_free();
    }
  }
  return v11;
}

uint64_t extract_zip(int a1, char *__s1)
{
  size_t v3;
  char *v4;
  uint64_t open_filename;
  uint64_t v6;
  NSObject *v7;
  size_t v8;
  uint64_t next_header;
  const char *v10;
  uint64_t v11;
  uint64_t data_block;
  NSObject *v13;
  NSObject *v16;
  char __dst[1026];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = strnlen(__s1, 0x400uLL);
  strncpy(__dst, __s1, 0x400uLL);
  *(_WORD *)&__dst[v3] = 47;
  v4 = &__dst[v3 + 1];
  archive_read_new();
  archive_read_support_format_zip();
  archive_write_disk_new();
  archive_write_disk_set_options();
  archive_write_disk_set_standard_lookup();
  open_filename = archive_read_open_filename();
  if (!(_DWORD)open_filename)
  {
    v8 = 1025 - v3;
    while (2)
    {
      next_header = archive_read_next_header();
      if (!(_DWORD)next_header)
      {
        v10 = (const char *)archive_entry_pathname();
        if (*v10 == 47)
        {
          _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            extract_zip_cold_2();
        }
        else
        {
          if ((unint64_t)(stpncpy(v4, v10, v8) - __dst) < 0x402)
          {
            archive_entry_set_pathname();
            v11 = archive_write_header();
            if ((_DWORD)v11)
            {
              v6 = v11;
              _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
              v13 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
                extract_zip_cold_6();
            }
            else
            {
              while (1)
              {
                data_block = archive_read_data_block();
                if ((_DWORD)data_block)
                  break;
                v6 = archive_write_data_block();
                if ((_DWORD)v6)
                {
                  _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
                  v13 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
                    extract_zip_cold_5();
                  goto LABEL_18;
                }
              }
              v6 = data_block;
              if ((_DWORD)data_block == 1)
                continue;
              _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
              v13 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
                extract_zip_cold_4();
            }
            goto LABEL_18;
          }
          _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            extract_zip_cold_3();
        }

        v6 = 4294967266;
        goto LABEL_19;
      }
      break;
    }
    v6 = next_header;
    if ((_DWORD)next_header == 1)
    {
      v6 = 0;
      goto LABEL_19;
    }
    _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      extract_zip_cold_1();
LABEL_18:

LABEL_19:
    archive_read_close();
    archive_read_free();
    archive_write_close();
    archive_write_free();
    return v6;
  }
  v6 = open_filename;
  _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    extract_zip_cold_7();

  return v6;
}

void OUTLINED_FUNCTION_1_6(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

uint64_t OUTLINED_FUNCTION_3_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 24) = a1;
  return archive_error_string();
}

id _NTKKaleidoscopeLoggingObjectForDomain(uint64_t a1, uint64_t a2)
{
  dispatch_once_t *v3;
  _QWORD v5[6];

  v3 = (dispatch_once_t *)((char *)&_NTKKaleidoscopeLoggingObjectForDomain_onceTokens + 8 * a1);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___NTKKaleidoscopeLoggingObjectForDomain_block_invoke;
  v5[3] = &__block_descriptor_48_e5_v8__0l;
  v5[4] = a1;
  v5[5] = a2;
  if (*v3 != -1)
    dispatch_once(v3, v5);
  return (id)_NTKKaleidoscopeLoggingObjectForDomain___logObjects[a1];
}

uint64_t _NTKCustomMonogramStore_HandleStoreChanged(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_notifyClientsOfChange");
}

uint64_t _NTKCustomMonogramStore_BroadcastChanges(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_notifyClientsOfChange");
}

uint64_t _NTKClockStatusBarSettings_HandleSettingsChanged(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_handlePrefsChanged");
}

id _FormattedDate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = _FormattedDate_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&_FormattedDate_onceToken, &__block_literal_global_229);
  objc_msgSend((id)_FormattedDate___formatter, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1B73436D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B7343F44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73441FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_2_3(void *a1, const char *a2)
{
  return objc_msgSend(a1, "fallbackLocation");
}

double _LayoutConstants_8(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_13);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_13);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_13);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_LayoutConstants___cachedDevice_13, v1);
    _LayoutConstants___previousCLKDeviceVersion_13 = objc_msgSend(v1, "version");

    ___LayoutConstants_block_invoke_12(v8, (uint64_t)v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _LayoutConstants___previousCLKDeviceVersion_13;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_13);
  v9 = *(double *)&_LayoutConstants_constants_0_1;

  return v9;
}

void sub_1B7347094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B73472A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 _LayoutConstants_9@<Q0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_14);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_14);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_14);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_14, obj);
    _LayoutConstants___previousCLKDeviceVersion_14 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_13(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_14;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_14);
  v10 = unk_1EF172CD0;
  a2[12] = xmmword_1EF172CC0;
  a2[13] = v10;
  a2[14] = xmmword_1EF172CE0;
  v11 = *(_OWORD *)&qword_1EF172C90;
  a2[8] = xmmword_1EF172C80;
  a2[9] = v11;
  v12 = *(_OWORD *)&qword_1EF172CB0;
  a2[10] = xmmword_1EF172CA0;
  a2[11] = v12;
  v13 = *(_OWORD *)&qword_1EF172C50;
  a2[4] = xmmword_1EF172C40;
  a2[5] = v13;
  v14 = *(_OWORD *)&qword_1EF172C70;
  a2[6] = xmmword_1EF172C60;
  a2[7] = v14;
  v15 = *(_OWORD *)&qword_1EF172C10;
  *a2 = _LayoutConstants__constants;
  a2[1] = v15;
  v16 = *(_OWORD *)&qword_1EF172C30;
  a2[2] = xmmword_1EF172C20;
  a2[3] = v16;

  return result;
}

void sub_1B734B04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _LayoutConstants_10(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_15);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_15);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_15);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_LayoutConstants___cachedDevice_15, v1);
    _LayoutConstants___previousCLKDeviceVersion_15 = objc_msgSend(v1, "version");

    CLKValueForDeviceMetrics();
    _LayoutConstants___constants_0_4 = v8;
    _LayoutConstants___constants_1_2 = 0x4000000000000000;
    _LayoutConstants___constants_2_2 = 0x3FECCCCCCCCCCCCDLL;
    _LayoutConstants___constants_3_1 = 0x3FF8000000000000;
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _LayoutConstants___previousCLKDeviceVersion_15;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_15);
  v9 = *(double *)&_LayoutConstants___constants_0_4;

  return v9;
}

void sub_1B734EC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _NTKSiderealDataCacheArchivePath()
{
  if (_NTKSiderealDataCacheDirectory_onceToken != -1)
    dispatch_once(&_NTKSiderealDataCacheDirectory_onceToken, &__block_literal_global_224);
  return objc_msgSend((id)_NTKSiderealDataCacheDirectory___path, "stringByAppendingPathComponent:", CFSTR("SiderealData.archive"));
}

void sub_1B73535A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B7353B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B7354E1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id _complicationOrDie(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
  }
  else
  {
    +[NTKComplication nullComplication](NTKComplication, "nullComplication");
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  v4 = v3;

  return v4;
}

uint64_t _dataSourcesDidChange(uint64_t a1, void *a2)
{
  NSObject *v3;
  uint8_t v5[16];

  _NTKLoggingObjectForDomain(27, (uint64_t)"NTKLoggingDomainUpNext");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B72A3000, v3, OS_LOG_TYPE_DEFAULT, "Third party data sources did change. Reloading NTKCUpNextDataSourcesManager.", v5, 2u);
  }

  return objc_msgSend(a2, "fetchIdentifiers");
}

void sub_1B73574F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1B7358E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getINAppInfoClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!IntentsLibraryCore_frameworkLibrary)
  {
    IntentsLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!IntentsLibraryCore_frameworkLibrary)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("INAppInfo");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    __getINAppInfoClass_block_invoke_cold_1();
    free(v3);
  }
  getINAppInfoClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getWLKIsSportsEnabledSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (WatchListKitLibraryCore_frameworkLibrary)
  {
    v2 = (void *)WatchListKitLibraryCore_frameworkLibrary;
  }
  else
  {
    WatchListKitLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)WatchListKitLibraryCore_frameworkLibrary;
    if (!WatchListKitLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "WLKIsSportsEnabled");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getWLKIsSportsEnabledSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B7359508(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B73597AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B73599C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double NTKDigitalTimeLabelDefaultFrameBottom(void *a1)
{
  _OWORD v2[3];
  uint64_t v3;

  v3 = 0;
  memset(v2, 0, sizeof(v2));
  _LayoutConstants_11(a1, (uint64_t)v2);
  return *(double *)v2;
}

void _LayoutConstants_11(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_16);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_16);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_16);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_16, obj);
    _LayoutConstants___previousCLKDeviceVersion_16 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_14(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_16;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_16);
  v10 = *(_OWORD *)&qword_1EF172DD0;
  *(_OWORD *)a2 = _LayoutConstants___constants_2;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = xmmword_1EF172DE0;
  *(_QWORD *)(a2 + 48) = qword_1EF172DF0;

}

double NTKDigitalTimeLabelStyleWideRightSideMargin(void *a1)
{
  _OWORD v2[3];
  double v3;

  v3 = 0.0;
  memset(v2, 0, sizeof(v2));
  _LayoutConstants_11(a1, (uint64_t)v2);
  return v3;
}

void sub_1B735BE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _LayoutConstants_12(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;
  double v10;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_17);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_17);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_17);
    if (v4 == v1)
    {
      v5 = objc_msgSend(v1, "version");
      v6 = _LayoutConstants___previousCLKDeviceVersion_17;

      if (v5 == v6)
        goto LABEL_8;
    }
    else
    {

    }
  }
  v7 = objc_storeWeak(&_LayoutConstants___cachedDevice_17, v1);
  _LayoutConstants___previousCLKDeviceVersion_17 = objc_msgSend(v1, "version");

  v8 = objc_msgSend(v1, "sizeClass");
  v9 = -3.0;
  if (!v8)
    v9 = -2.0;
  _LayoutConstants___constants_3 = 0;
  qword_1EF172E28 = *(_QWORD *)&v9;
  xmmword_1EF172E30 = *MEMORY[0x1E0C9D538];
LABEL_8:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_17);
  v10 = *(double *)&_LayoutConstants___constants_3;

  return v10;
}

id NTKKeylineViewWithContinuousCurveCornerRadius(double a1)
{
  void *v2;
  void *v3;
  id v4;
  _QWORD v6[4];
  id v7;

  v2 = (void *)objc_opt_new();
  objc_msgSend(v2, "layer");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setBorderWidth:", 1.5);
  objc_msgSend(v3, "setCornerRadius:", a1);
  objc_msgSend(v3, "setCornerCurve:", *MEMORY[0x1E0CD2A68]);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __NTKKeylineViewWithContinuousCurveCornerRadius_block_invoke;
  v6[3] = &unk_1E6BD0F48;
  v7 = v3;
  v4 = v3;
  objc_msgSend(v2, "setColorizationBlock:", v6);

  return v2;
}

double NTKKeylineWidth()
{
  return 1.5;
}

_NTKKeylineImageView *NTKKeylineViewWithFullScreenContinuousCurves()
{
  _NTKKeylineImageView *v0;
  void *v1;
  _NTKKeylineImageView *v2;

  v0 = [_NTKKeylineImageView alloc];
  _FullscreenContinuousCurveKeylineImage();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = -[CLKUIColoringImageView initWithImage:](v0, "initWithImage:", v1);

  return v2;
}

id _FullscreenContinuousCurveKeylineImage()
{
  void *v0;
  void *v1;
  double v2;
  void *v3;

  +[CLKRenderingContext sharedRenderingContext](NTKFaceViewRenderingContext, "sharedRenderingContext");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "device");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "screenCornerRadius");
  _FullscreenContinuousCurveKeylineImageWithRadius(v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

_NTKKeylineImageView *NTKKeylineViewWithFullScreenContinuousCurvesWithRadius(double a1)
{
  _NTKKeylineImageView *v2;
  void *v3;
  _NTKKeylineImageView *v4;

  v2 = [_NTKKeylineImageView alloc];
  _FullscreenContinuousCurveKeylineImageWithRadius(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = -[CLKUIColoringImageView initWithImage:](v2, "initWithImage:", v3);

  return v4;
}

id _FullscreenContinuousCurveKeylineImageWithRadius(double a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t *v7;
  id WeakRetained;
  int *v9;
  int *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id (*v30)(uint64_t);
  void *v31;
  double v32;

  +[CLKRenderingContext sharedRenderingContext](NTKFaceViewRenderingContext, "sharedRenderingContext");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "device");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = (void *)MEMORY[0x1E0CB37E8];
  CLKRoundForDevice();
  objc_msgSend(v4, "numberWithDouble:");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v28 = MEMORY[0x1E0C809B0];
  v29 = 3221225472;
  v30 = ___FullscreenContinuousCurveKeylineImageWithRadius_block_invoke;
  v31 = &__block_descriptor_40_e14___UIImage_8__0l;
  v32 = a1;
  v6 = v5;
  v7 = &v28;
  os_unfair_lock_lock((os_unfair_lock_t)&_CachedKeylineImageForKey___lock);
  WeakRetained = objc_loadWeakRetained(&_CachedKeylineImageForKey___cachedDevice);
  v9 = &dword_1EF172000;
  v10 = &dword_1EF172000;
  if (!WeakRetained)
    goto LABEL_5;
  v11 = WeakRetained;
  objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "device");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v14 = objc_loadWeakRetained(&_CachedKeylineImageForKey___cachedDevice);
  if (v13 != v14)
  {

LABEL_5:
    objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext", v27, v28, v29);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "device");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak(&_CachedKeylineImageForKey___cachedDevice, v19);

    v20 = objc_loadWeakRetained(&_CachedKeylineImageForKey___cachedDevice);
    *((_QWORD *)v9 + 462) = objc_msgSend(v20, "version");

    objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "device");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v24 = (void *)*((_QWORD *)v10 + 459);
    *((_QWORD *)v10 + 459) = v23;

    goto LABEL_6;
  }
  objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "device");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = objc_msgSend(v16, "version");
  v17 = _CachedKeylineImageForKey___previousCLKDeviceVersion;

  v10 = &dword_1EF172000;
  v9 = &dword_1EF172000;
  if (v27 != v17)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_CachedKeylineImageForKey___lock);
  objc_msgSend(*((id *)v10 + 459), "objectForKey:", v6);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v25)
  {
    v30((uint64_t)v7);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (v25)
      objc_msgSend(*((id *)v10 + 459), "setObject:forKey:", v25, v6);
  }

  return v25;
}

id NTKCompoundKeylineViewWithFullScreenContinuousCurves(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  _FullscreenContinuousCurveKeylineImage();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[_NTKCompoundKeylineImageView keylineWithImage:secondaryKeylineView:](_NTKCompoundKeylineImageView, "keylineWithImage:secondaryKeylineView:", v2, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

_NTKKeylinePathView *NTKKeylineViewWithBezierPath(void *a1, double a2)
{
  id v3;
  _NTKKeylinePathView *v4;

  v3 = a1;
  v4 = -[_NTKKeylinePathView initWithPath:secondPath:scale:]([_NTKKeylinePathView alloc], "initWithPath:secondPath:scale:", v3, 0, a2);

  return v4;
}

_NTKKeylinePathView *NTKKeylineViewWithBezierPaths(void *a1, void *a2, double a3)
{
  id v5;
  id v6;
  _NTKKeylinePathView *v7;

  v5 = a2;
  v6 = a1;
  v7 = -[_NTKKeylinePathView initWithPath:secondPath:scale:]([_NTKKeylinePathView alloc], "initWithPath:secondPath:scale:", v6, v5, a3);

  return v7;
}

_NTKKeylineImageView *NTKKeylineViewWithImage(void *a1)
{
  id v1;
  _NTKKeylineImageView *v2;

  v1 = a1;
  v2 = -[CLKUIColoringImageView initWithImage:]([_NTKKeylineImageView alloc], "initWithImage:", v1);

  return v2;
}

id NTKKeylineViewWithCircle(CGFloat a1, double a2)
{
  void *v3;
  void *v4;
  void *v5;
  CGRect v7;
  CGRect v8;

  v7.size.width = a1;
  v3 = (void *)MEMORY[0x1E0DC3508];
  v7.origin.x = 0.0;
  v7.origin.y = 0.0;
  v7.size.height = v7.size.width;
  v8 = CGRectInset(v7, 0.75, 0.75);
  objc_msgSend(v3, "bezierPathWithOvalInRect:", v8.origin.x, v8.origin.y, v8.size.width, v8.size.height);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  NTKKeylineViewWithBezierPath(v4, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id NTKKeylineViewWithWheelShapedPath(CGFloat a1, CGFloat a2, double a3)
{
  void *v6;
  void *v7;
  double v8;
  CGFloat v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  +[CLKRenderingContext sharedRenderingContext](NTKFaceViewRenderingContext, "sharedRenderingContext");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "device");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  CLKRoundForDevice();
  v9 = v8;
  v10 = (void *)MEMORY[0x1E0DC3508];
  v16.origin.x = 0.0;
  v16.origin.y = 0.0;
  v16.size.width = a1;
  v16.size.height = a1;
  v17 = CGRectInset(v16, 0.75, 0.75);
  objc_msgSend(v10, "bezierPathWithOvalInRect:", v17.origin.x, v17.origin.y, v17.size.width, v17.size.height);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)MEMORY[0x1E0DC3508];
  v18.origin.x = v9;
  v18.origin.y = v9;
  v18.size.width = a2;
  v18.size.height = a2;
  v19 = CGRectInset(v18, 0.75, 0.75);
  objc_msgSend(v12, "bezierPathWithOvalInRect:", v19.origin.x, v19.origin.y, v19.size.width, v19.size.height);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  NTKKeylineViewWithBezierPaths(v11, v13, a3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

_NTKKeylineFittedCircleView *NTKFittedCircleKeylineView()
{
  return objc_alloc_init(_NTKKeylineFittedCircleView);
}

id NTKKeylineViewWithCircleInRect(double a1, double a2, double a3, double a4, double a5)
{
  void *v6;
  void *v7;
  void *v8;
  CGRect v10;

  v6 = (void *)MEMORY[0x1E0DC3508];
  v10 = CGRectInset(*(CGRect *)&a1, 0.75, 0.75);
  objc_msgSend(v6, "bezierPathWithOvalInRect:", v10.origin.x, v10.origin.y, v10.size.width, v10.size.height);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  NTKKeylineViewWithBezierPath(v7, a5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id NTKKeylineViewWithConcentricCircles(CGFloat a1, double a2, double a3)
{
  void *v5;
  void *v6;
  double v7;
  CGFloat v8;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  +[CLKRenderingContext sharedRenderingContext](NTKFaceViewRenderingContext, "sharedRenderingContext");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "device");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  CLKFloorForDevice();
  v8 = v7;

  v19.origin.x = 0.0;
  v19.origin.y = 0.0;
  v19.size.width = a1;
  v19.size.height = a1;
  v20 = CGRectInset(v19, v8, v8);
  x = v20.origin.x;
  y = v20.origin.y;
  width = v20.size.width;
  height = v20.size.height;
  v13 = (void *)MEMORY[0x1E0DC3508];
  v20.origin.x = 0.0;
  v20.origin.y = 0.0;
  v20.size.width = a1;
  v20.size.height = a1;
  v21 = CGRectInset(v20, 0.75, 0.75);
  objc_msgSend(v13, "bezierPathWithOvalInRect:", v21.origin.x, v21.origin.y, v21.size.width, v21.size.height);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (void *)MEMORY[0x1E0DC3508];
  v22.origin.x = x;
  v22.origin.y = y;
  v22.size.width = width;
  v22.size.height = height;
  v23 = CGRectInset(v22, 0.75, 0.75);
  objc_msgSend(v15, "bezierPathWithOvalInRect:", v23.origin.x, v23.origin.y, v23.size.width, v23.size.height);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "appendPath:", v16);

  NTKKeylineViewWithBezierPath(v14, a3);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id NTKKeylineViewWithStretchedCircle(CGFloat a1, CGFloat a2, double a3)
{
  double width;
  void *v5;
  void *v6;
  CGRect v8;
  CGRect v9;

  v8.size.height = a2;
  v8.size.width = a1;
  v8.origin.x = 0.0;
  v8.origin.y = 0.0;
  v9 = CGRectInset(v8, 0.75, 0.75);
  if (v9.size.width <= v9.size.height)
    width = v9.size.width;
  else
    width = v9.size.height;
  objc_msgSend(MEMORY[0x1E0DC3508], "bezierPathWithRoundedRect:cornerRadius:", v9.origin.x, v9.origin.y, v9.size.width, v9.size.height, width * 0.5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  NTKKeylineViewWithBezierPath(v5, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t NTKKeylineSelectedColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "systemGreenColor");
}

uint64_t NTKKeylineDeselectedColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:", 0.4, 1.0);
}

void sub_1B735EC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B735F220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t NTKShowInternalWidgets()
{
  uint64_t result;

  result = CLKInternalBuild();
  if ((_DWORD)result)
  {
    if (NTKShowInternalWidgets_onceToken != -1)
      dispatch_once(&NTKShowInternalWidgets_onceToken, &__block_literal_global_212);
    if (NTKShowInternalWidgets___needsUpdate == 1)
    {
      return NTKShowInternalWidgets___flag != 0;
    }
    else
    {
      result = CFPreferencesGetAppBooleanValue(CFSTR("ShowInternalWidgets"), CFSTR("com.apple.NanoTimeKit.face"), 0) != 0;
      NTKShowInternalWidgets___flag = result;
      NTKShowInternalWidgets___needsUpdate = 1;
    }
  }
  return result;
}

uint64_t NTKSensitivityForVictoryFaces()
{
  return 0;
}

uint64_t NTKAlwaysGenerateSnapshots()
{
  uint64_t result;
  int AppBooleanValue;
  NSObject *v2;
  _BOOL4 v3;
  const char *v4;
  uint8_t *v5;
  __int16 v6;
  __int16 v7;

  result = CLKInternalBuild();
  if ((_DWORD)result)
  {
    if (NTKAlwaysGenerateSnapshots_onceToken != -1)
      dispatch_once(&NTKAlwaysGenerateSnapshots_onceToken, &__block_literal_global_220);
    if ((NTKAlwaysGenerateSnapshots___needsUpdate & 1) != 0)
      return NTKAlwaysGenerateSnapshots___flag != 0;
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("AlwaysGenerateSnapshots"), CFSTR("com.apple.NanoTimeKit.face"), 0);
    NTKAlwaysGenerateSnapshots___flag = AppBooleanValue != 0;
    NTKAlwaysGenerateSnapshots___needsUpdate = 1;
    _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
    v2 = objc_claimAutoreleasedReturnValue();
    v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    if (AppBooleanValue)
    {
      if (v3)
      {
        v7 = 0;
        v4 = "AlwaysGenerateSnapshots=YES. Face and complication snapshot cache is ignored.";
        v5 = (uint8_t *)&v7;
LABEL_10:
        _os_log_impl(&dword_1B72A3000, v2, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
      }
    }
    else if (v3)
    {
      v6 = 0;
      v4 = "AlwaysGenerateSnapshots=NO.";
      v5 = (uint8_t *)&v6;
      goto LABEL_10;
    }

    return NTKAlwaysGenerateSnapshots___flag != 0;
  }
  return result;
}

uint64_t NTKDisableWidgetTemplateConversion()
{
  if (NTKDisableWidgetTemplateConversion_onceToken != -1)
    dispatch_once(&NTKDisableWidgetTemplateConversion_onceToken, &__block_literal_global_224_0);
  return NTKDisableWidgetTemplateConversion___flag;
}

uint64_t NTKHasRegionalGeoRestrictions()
{
  if (NTKHasRegionalGeoRestrictions_onceToken != -1)
    dispatch_once(&NTKHasRegionalGeoRestrictions_onceToken, &__block_literal_global_227);
  return NTKHasRegionalGeoRestrictions_geoRestricted;
}

uint64_t NTKBlueRidgeUISensitivity()
{
  return 0;
}

uint64_t NTKIndicScriptNumeralsUISensitivity()
{
  return 0;
}

uint64_t NTKShowIndicScriptNumerals(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;

  v1 = a1;
  os_unfair_lock_lock(&NTKShowIndicScriptNumerals___lock);
  WeakRetained = objc_loadWeakRetained(&NTKShowIndicScriptNumerals___cachedDevice);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v4 = objc_loadWeakRetained(&NTKShowIndicScriptNumerals___cachedDevice);
    if (v4 == v1)
    {
      v5 = objc_msgSend(v1, "version");
      v6 = NTKShowIndicScriptNumerals___previousCLKDeviceVersion;

      if (v5 == v6)
        goto LABEL_6;
    }
    else
    {

    }
  }
  v7 = objc_storeWeak(&NTKShowIndicScriptNumerals___cachedDevice, v1);
  NTKShowIndicScriptNumerals___previousCLKDeviceVersion = objc_msgSend(v1, "version");

  __NTKShowIndicScriptNumerals_block_invoke(v8, v1);
LABEL_6:
  os_unfair_lock_unlock(&NTKShowIndicScriptNumerals___lock);
  objc_msgSend(MEMORY[0x1E0C94518], "sharedMonitor");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "shouldHideForSensitivity:", 0) ^ 1;

  if (NTKShowIndicScriptNumerals___isFeatureEnabled)
    v11 = v10;
  else
    v11 = 0;

  return v11;
}

uint64_t NTKShowCarbonara(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  os_unfair_lock_lock(&NTKShowCarbonara___lock);
  WeakRetained = objc_loadWeakRetained(&NTKShowCarbonara___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&NTKShowCarbonara___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&NTKShowCarbonara___cachedDevice, v1);
    NTKShowCarbonara___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    __NTKShowCarbonara_block_invoke(v8, v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = NTKShowCarbonara___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock(&NTKShowCarbonara___lock);
  v9 = NTKShowCarbonara___showCarbonara;

  return v9;
}

uint64_t NTKShowGossamerUI(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  os_unfair_lock_lock(&NTKShowGossamerUI___lock);
  WeakRetained = objc_loadWeakRetained(&NTKShowGossamerUI___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&NTKShowGossamerUI___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&NTKShowGossamerUI___cachedDevice, v1);
    NTKShowGossamerUI___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    __NTKShowGossamerUI_block_invoke(v8, v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = NTKShowGossamerUI___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock(&NTKShowGossamerUI___lock);
  v9 = NTKShowGossamerUI___showGossamerUI;

  return v9;
}

uint64_t NTKGossamerUISensitivity()
{
  return 0;
}

uint64_t NTKStarbearEnabled()
{
  return 1;
}

uint64_t NTKShowStarbearPickerUI()
{
  return 1;
}

uint64_t NTKUseComplicationSnapshotService()
{
  if (NTKUseComplicationSnapshotService_onceToken != -1)
    dispatch_once(&NTKUseComplicationSnapshotService_onceToken, &__block_literal_global_252);
  return NTKUseComplicationSnapshotService___useComplicationSnapshotService;
}

uint64_t NTKShowStarbearPickerComplicationViews()
{
  if (NTKShowStarbearPickerComplicationViews_onceToken != -1)
    dispatch_once(&NTKShowStarbearPickerComplicationViews_onceToken, &__block_literal_global_254);
  return NTKShowStarbearPickerComplicationViews___showStarbearPickerComplicationViews;
}

id NTKBootSessionUUID()
{
  id v1;
  void *v2;
  void *v3;
  size_t v4;
  _BYTE v5[37];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  memset(v5, 0, sizeof(v5));
  v4 = 37;
  if (sysctlbyname("kern.bootsessionuuid", v5, &v4, 0, 0))
  {
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    return (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = objc_alloc(MEMORY[0x1E0CB3A28]);
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = (void *)objc_msgSend(v1, "initWithUUIDString:", v2);

    return v3;
  }
}

void NTKRaiseInternalException(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  objc_class *v11;
  id v12;
  void *v13;
  NSObject *v14;
  void *v15;

  v10 = a1;
  v11 = (objc_class *)MEMORY[0x1E0CB3940];
  v12 = a2;
  v13 = (void *)objc_msgSend([v11 alloc], "initWithFormat:arguments:", v12, &a9);

  _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    NTKRaiseInternalException_cold_1(v13, v14);

  if (CLKInternalBuild())
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", v10, v13, 0);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "raise");

  }
  NTKSubmitError(v10, v13);

}

void _NTKGenerateSimulatedCrash(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  id v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  void (*v16)(uint64_t, uint64_t, id);
  _Unwind_Exception *v17;
  _QWORD v18[5];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;

  v10 = a1;
  v11 = a2;
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:arguments:", v11, &a9);
  _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    _NTKGenerateSimulatedCrash_cold_2(v12, v13);

  v14 = getpid();
  v15 = v12;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v16 = (void (*)(uint64_t, uint64_t, id))getSimulateCrashSymbolLoc_ptr;
  v22 = getSimulateCrashSymbolLoc_ptr;
  if (!getSimulateCrashSymbolLoc_ptr)
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __getSimulateCrashSymbolLoc_block_invoke;
    v18[3] = &unk_1E6BCF200;
    v18[4] = &v19;
    __getSimulateCrashSymbolLoc_block_invoke((uint64_t)v18);
    v16 = (void (*)(uint64_t, uint64_t, id))v20[3];
  }
  _Block_object_dispose(&v19, 8);
  if (!v16)
  {
    v17 = (_Unwind_Exception *)__57__NTKCUpNextDataSourcesManager__buildRowsAfterPrewarming__block_invoke_3_cold_1();
    _Block_object_dispose(&v19, 8);
    _Unwind_Resume(v17);
  }
  v16(v14, 464371934, v15);

}

uint64_t NTKInterpolateBetweenDates(void *a1, void *a2, double a3)
{
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v5 = a2;
  objc_msgSend(a1, "timeIntervalSince1970");
  v7 = v6;
  objc_msgSend(v5, "timeIntervalSince1970");
  v9 = v8;

  return objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v7 + (v9 - v7) * a3);
}

BOOL NTKHourOfDateIsSingular(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char v7;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "component:fromDate:", 32, v2);

  if (v4 >= 13)
  {
    objc_msgSend(v3, "locale");
    v5 = objc_claimAutoreleasedReturnValue();
    if (!v5)
    {
      objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
      v5 = objc_claimAutoreleasedReturnValue();
    }
    v6 = (void *)v5;
    v7 = CLKLocaleIs24HourMode();

    if ((v7 & 1) == 0)
      v4 -= 12;
  }

  return v4 == 1;
}

id NTKFractionStringBasedOnCurrentLocaleNumberSystem(void *a1, void *a2)
{
  id v3;
  id v4;
  const __CFString *v5;
  void *v6;

  v3 = a2;
  v4 = a1;
  if (CLKLocaleCurrentNumberSystem() == 1)
    v5 = CFSTR("%2$@/%1$@");
  else
    v5 = CFSTR("%1$@/%2$@");
  objc_msgSend(MEMORY[0x1E0CB3940], "localizedStringWithFormat:", v5, v4, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id NTKAssetsBundle()
{
  if (NTKAssetsBundle_onceToken != -1)
    dispatch_once(&NTKAssetsBundle_onceToken, &__block_literal_global_268_0);
  return (id)NTKAssetsBundle___bundle;
}

id NTKLocationBundle()
{
  if (NTKLocationBundle_onceToken != -1)
    dispatch_once(&NTKLocationBundle_onceToken, &__block_literal_global_271);
  return (id)NTKLocationBundle___bundle;
}

void NTKHighPriorityApply(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void (**v5)(_QWORD);
  _QWORD v6[4];
  id v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  dispatch_group_t v16;
  _QWORD v17[5];
  int v18;

  v3 = a2;
  if (NTKHighPriorityApply_onceToken != -1)
    dispatch_once(&NTKHighPriorityApply_onceToken, &__block_literal_global_280);
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x3020000000;
  v18 = -1;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__12;
  v15 = __Block_byref_object_dispose__12;
  v16 = dispatch_group_create();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __NTKHighPriorityApply_block_invoke_282;
  v6[3] = &unk_1E6BD1298;
  v8 = &v11;
  v9 = v17;
  v10 = a1;
  v4 = v3;
  v7 = v4;
  v5 = (void (**)(_QWORD))_Block_copy(v6);
  dispatch_async((dispatch_queue_t)NTKHighPriorityApply__workloop, v5);
  v5[2](v5);
  dispatch_group_wait((dispatch_group_t)v12[5], 0xFFFFFFFFFFFFFFFFLL);

  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(v17, 8);

}

void sub_1B73614C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

id NTKImageNamed(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  +[CLKRenderingContext sharedRenderingContext](NTKFaceViewRenderingContext, "sharedRenderingContext");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "device");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  NTKImageNamedForDevice(v1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id NTKImageNamedForDevice(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = a1;
  NTKBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  CLKUIImageNamedFromBundleForDevice();
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id NTKImageNamedFromBundle(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = a1;
  +[CLKRenderingContext sharedRenderingContext](NTKFaceViewRenderingContext, "sharedRenderingContext");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "device");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  CLKUIImageNamedFromBundleForDevice();
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id NTKImageNamedFromAssetsBundle(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  +[CLKRenderingContext sharedRenderingContext](NTKFaceViewRenderingContext, "sharedRenderingContext");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "device");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  NTKImageNamedFromAssetsBundleForDevice(v1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id NTKImageNamedFromAssetsBundleForDevice(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;

  v3 = a2;
  v4 = a1;
  NTKAssetsBundle();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  CLKUIImageNamedFromAssetBundleForDevice();
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id NTKLocalizedString(void *a1, void *a2, uint64_t a3)
{
  return NTKDefaultValueLocalizedString(a1, a2, a3, 1);
}

id NTKBundleLocalizedString(void *a1, uint64_t a2, uint64_t a3)
{
  return NTKDefaultValueLocalizedString(a1, CFSTR("NanoTimeKit"), a3, 1);
}

id NTKClockFaceLocalizedFormat(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  NTKDefaultValueLocalizedString(v3, CFSTR("ClockFacesFormats"), v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    if (NTKClockFaceLocalizedFormat_onceToken != -1)
      dispatch_once(&NTKClockFaceLocalizedFormat_onceToken, &__block_literal_global_345);
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v7 = (id)NTKClockFaceLocalizedFormat_hiddenTables;
    v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v8)
    {
      v10 = v8;
      v11 = *(_QWORD *)v16;
      while (2)
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v16 != v11)
            objc_enumerationMutation(v7);
          NTKDefaultValueLocalizedString(v3, *(void **)(*((_QWORD *)&v15 + 1) + 8 * i), v9, 0);
          v13 = objc_claimAutoreleasedReturnValue();
          if (v13)
          {
            v6 = (void *)v13;

            goto LABEL_14;
          }
        }
        v10 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
        if (v10)
          continue;
        break;
      }
    }

    v6 = (void *)objc_msgSend(v3, "copy", (_QWORD)v15);
  }
LABEL_14:

  return v6;
}

id NTKWOTLocalizedString(void *a1, uint64_t a2, uint64_t a3)
{
  return NTKDefaultValueLocalizedString(a1, CFSTR("WheelsOfTime"), a3, 1);
}

uint64_t NTKUseAllUppercaseShortWeekdays()
{
  if (NTKUseAllUppercaseShortWeekdays_onceToken != -1)
    dispatch_once(&NTKUseAllUppercaseShortWeekdays_onceToken, &__block_literal_global_350);
  return NTKUseAllUppercaseShortWeekdays_useAllUppercaseShortWeekdays;
}

uint64_t NTKCanUseAllUppercaseLongDateStrings()
{
  if (NTKCanUseAllUppercaseLongDateStrings_onceToken != -1)
    dispatch_once(&NTKCanUseAllUppercaseLongDateStrings_onceToken, &__block_literal_global_357);
  return NTKCanUseAllUppercaseLongDateStrings___canUppercase;
}

uint64_t NTKCanUseShortRelativeDateStyleForHeartRateComplicationStrings()
{
  if (NTKCanUseShortRelativeDateStyleForHeartRateComplicationStrings_onceToken != -1)
    dispatch_once(&NTKCanUseShortRelativeDateStyleForHeartRateComplicationStrings_onceToken, &__block_literal_global_360);
  return NTKCanUseShortRelativeDateStyleForHeartRateComplicationStrings___useShortRelativeDateStyle;
}

id _NTKFacesUnsupportedByDevice(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = (objc_class *)MEMORY[0x1E0C99DE8];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  v4 = objc_msgSend(v2, "nrDeviceVersion");

  if (v4 >> 17 <= 2)
  {
    NTKNewToGraceFaceStyles();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObjectsFromArray:", v5);

    if (v4 <= 0x50200)
    {
      NTKNewToGloryFFaceStyles();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "addObjectsFromArray:", v6);

      if (HIWORD(v4) <= 4u)
      {
        NTKNewToGloryFaceStyles();
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "addObjectsFromArray:", v7);

        if (!(v4 >> 18))
        {
          NTKNewToFortuneFaceStyles();
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObjectsFromArray:", v8);

        }
      }
    }
  }
  return v3;
}

uint64_t NTKCanAddWatchFace(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  uint64_t v11;
  NTKFaceDescriptor *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  void *v17;
  char v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  int v24;
  NSObject *v25;
  void *v26;
  void *v27;
  unsigned int v28;
  void *v29;
  void *v30;
  unsigned int v31;
  void *v32;
  uint64_t v33;
  id v34;
  id v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  unint64_t v39;
  void *v40;
  _QWORD v41[4];
  id v42;
  uint64_t *v43;
  _QWORD v44[4];
  id v45;
  id v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[16];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (v5)
  {
    if ((objc_msgSend(v5, "isValidConfigurationToAddToLibrary") & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "nrDevice");
      v8 = (void *)objc_claimAutoreleasedReturnValue();

      if (v8)
      {
        objc_msgSend(v5, "device");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "canCustomize");

        if ((v10 & 1) != 0)
        {
          v11 = objc_msgSend(v5, "faceStyle");
          v12 = [NTKFaceDescriptor alloc];
          if (v11 == 44)
          {
            objc_msgSend(v5, "bundleIdentifier");
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = -[NTKFaceDescriptor initWithBundleIdentifier:](v12, "initWithBundleIdentifier:", v13);

          }
          else
          {
            v14 = -[NTKFaceDescriptor initWithFaceStyle:](v12, "initWithFaceStyle:", objc_msgSend(v5, "faceStyle"));
          }
          objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          v18 = -[NSObject isAvailableForDevice:](v14, "isAvailableForDevice:", v17);

          if ((v18 & 1) == 0)
          {
            if (a3)
            {
              objc_msgSend(MEMORY[0x1E0CB35C8], "ntk_errorWithCode:", 11);
              *a3 = (id)objc_claimAutoreleasedReturnValue();
            }
            _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
              NTKCanAddWatchFace_cold_9();
            goto LABEL_55;
          }
          v19 = (void *)objc_opt_class();
          objc_msgSend(v5, "device");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(v19) = objc_msgSend(v19, "isRestrictedForDevice:", v20);

          if ((_DWORD)v19)
          {
            if (a3)
            {
              objc_msgSend(MEMORY[0x1E0CB35C8], "ntk_errorWithCode:", 1);
              *a3 = (id)objc_claimAutoreleasedReturnValue();
            }
            _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
              NTKCanAddWatchFace_cold_3(v5, v21);
LABEL_55:
            v15 = 0;
LABEL_56:

            goto LABEL_24;
          }
          if ((objc_msgSend(v6, "hasLoaded") & 1) == 0)
          {
            _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
            v21 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
              NTKCanAddWatchFace_cold_8();
            goto LABEL_55;
          }
          objc_msgSend(v5, "device");
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          _NTKFacesUnsupportedByDevice(v22);
          v21 = objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v5, "faceStyle"));
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v24 = -[NSObject containsObject:](v21, "containsObject:", v23);

          if (v24)
          {
            if (a3)
            {
              objc_msgSend(MEMORY[0x1E0CB35C8], "ntk_errorWithCode:", 1);
              *a3 = (id)objc_claimAutoreleasedReturnValue();
            }
            _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
            v25 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              NTKCanAddWatchFace_cold_4(v5, v25);

            goto LABEL_55;
          }
          v26 = (void *)objc_opt_new();
          objc_msgSend(v5, "device");
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          v28 = objc_msgSend(v27, "nrDeviceVersion");

          if (HIWORD(v28) <= 4u)
          {
            NTKNewToGloryComplicationTypes();
            v29 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "addIndexes:", v29);

          }
          objc_msgSend(v5, "device");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = objc_msgSend(v30, "nrDeviceVersion");

          if (!(v31 >> 18))
          {
            NTKNewToFortuneComplicationTypes();
            v32 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v26, "addIndexes:", v32);

          }
          v48 = 0;
          v49 = &v48;
          v50 = 0x2020000000;
          v51 = 0;
          v33 = MEMORY[0x1E0C809B0];
          v44[0] = MEMORY[0x1E0C809B0];
          v44[1] = 3221225472;
          v44[2] = __NTKCanAddWatchFace_block_invoke;
          v44[3] = &unk_1E6BD1360;
          v34 = v5;
          v45 = v34;
          v35 = v26;
          v46 = v35;
          v47 = &v48;
          objc_msgSend(v34, "enumerateComplicationSlotsWithBlock:", v44);
          if (v49[3])
          {
            if (a3)
            {
              objc_msgSend(MEMORY[0x1E0CB35C8], "ntk_errorWithCode:", 2);
              *a3 = (id)objc_claimAutoreleasedReturnValue();
            }
            _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
            v36 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v49[3]);
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              NTKCanAddWatchFace_cold_7(v37, (uint64_t)v52, v36);
            }

            _Block_object_dispose(&v48, 8);
            goto LABEL_55;
          }

          _Block_object_dispose(&v48, 8);
          v48 = 0;
          v49 = &v48;
          v50 = 0x2020000000;
          LOBYTE(v51) = 0;
          if (objc_msgSend(v34, "isSingular"))
          {
            v41[0] = v33;
            v41[1] = 3221225472;
            v41[2] = __NTKCanAddWatchFace_block_invoke_370;
            v41[3] = &unk_1E6BCD750;
            v42 = v34;
            v43 = &v48;
            objc_msgSend(v6, "enumerateFacesUsingBlock:", v41);

          }
          if (*((_BYTE *)v49 + 24))
          {
            if (a3)
            {
              objc_msgSend(MEMORY[0x1E0CB35C8], "ntk_errorWithCode:", 6);
              *a3 = (id)objc_claimAutoreleasedReturnValue();
            }
            _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
            v38 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
              NTKCanAddWatchFace_cold_6();
          }
          else
          {
            v39 = objc_msgSend(v6, "numberOfFaces");
            objc_msgSend(v34, "device");
            v40 = (void *)objc_claimAutoreleasedReturnValue();
            LOBYTE(v39) = v39 < NTKFaceLibraryMaxFaceCountForDevice(v40);

            if ((v39 & 1) != 0)
            {
              v15 = 1;
LABEL_71:
              _Block_object_dispose(&v48, 8);
              goto LABEL_56;
            }
            if (a3)
            {
              objc_msgSend(MEMORY[0x1E0CB35C8], "ntk_errorWithCode:", 5);
              *a3 = (id)objc_claimAutoreleasedReturnValue();
            }
            _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
            v38 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
              NTKCanAddWatchFace_cold_5();
          }

          v15 = 0;
          goto LABEL_71;
        }
        if (a3)
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "ntk_errorWithCode:", 8);
          *a3 = (id)objc_claimAutoreleasedReturnValue();
        }
        _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          NTKCanAddWatchFace_cold_10();
      }
      else
      {
        if (a3)
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "ntk_errorWithCode:", 3);
          *a3 = (id)objc_claimAutoreleasedReturnValue();
        }
        _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          NTKCanAddWatchFace_cold_2();
      }
    }
    else
    {
      if (a3)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "ntk_errorWithCode:", 0);
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        NTKCanAddWatchFace_cold_11();
    }
  }
  else
  {
    if (a3)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "ntk_errorWithCode:", 0);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      NTKCanAddWatchFace_cold_1();
  }
  v15 = 0;
LABEL_24:

  return v15;
}

void sub_1B736244C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t NTKCanAddInternalComplicationWithBundleId(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;

  v1 = a1;
  if (objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.NanoOxygenSaturation.watchkitapp")))
  {
    objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "nrDevice");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = HKRPShouldInstallOxygenSaturationWatchAppOnPairedWatch();
  }
  else
  {
    if (!objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.NanoHeartRhythm")))
    {
      v4 = 1;
      goto LABEL_7;
    }
    v5 = objc_alloc(MEMORY[0x1E0CB67B0]);
    v6 = objc_alloc_init(MEMORY[0x1E0CB6780]);
    v2 = (void *)objc_msgSend(v5, "initWithHealthStore:", v6);

    objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "nrDevice");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v2, "isElectrocardiogramAppInstallAllowedForWatch:", v7);

  }
LABEL_7:

  return v4;
}

id NTKSHA1HashFromString(void *a1)
{
  const char *v1;
  CC_LONG v2;
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  unsigned __int8 v7;
  unsigned __int8 v9[41];
  unsigned __int8 md[20];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = (const char *)objc_msgSend(objc_retainAutorelease(a1), "UTF8String");
  v2 = strlen(v1);
  CC_SHA1(v1, v2, md);
  v3 = 0;
  v4 = v9;
  do
  {
    v5 = md[v3];
    v6 = (v5 >> 4) | 0x30;
    if (v5 > 0x9F)
      LOBYTE(v6) = (md[v3] >> 4) + 87;
    *v4 = v6;
    if ((v5 & 0xF) <= 9)
      v7 = v5 & 0xF | 0x30;
    else
      v7 = (v5 & 0xF) + 87;
    v4[1] = v7;
    v4 += 2;
    ++v3;
  }
  while (v3 != 20);
  *v4 = 0;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v9, 4);
  return (id)objc_claimAutoreleasedReturnValue();
}

id NTKSanitizedFileNameFromStableIdentifier(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  const char *v8;
  size_t v9;
  void *v10;
  void *v11;

  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") >= 0xE0)
  {
    NTKSHA1HashFromString(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v1, "rangeOfComposedCharacterSequenceAtIndex:", 183);
    objc_msgSend(v1, "substringToIndex:", v3 + v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), v5, v2);
    v6 = objc_claimAutoreleasedReturnValue();

    v1 = (id)v6;
  }
  v7 = objc_retainAutorelease(v1);
  v8 = (const char *)objc_msgSend(v7, "fileSystemRepresentation");
  v9 = strlen(v8);
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringWithFileSystemRepresentation:length:", v8, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

uint64_t NTKRandomInt32InScope(int a1, int a2)
{
  uint32_t v3;

  if (a2 - a1 >= -1)
    v3 = a2 - a1 + 1;
  else
    v3 = ~(a2 - a1);
  return arc4random_uniform(v3) + a1;
}

float NTKRandomFloatFromZeroToOne()
{
  return (float)(int)arc4random_uniform(0x2711u) / 10000.0;
}

void NTKValidateDictionaryValue(void *a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v11 = a2;
  objc_msgSend(a1, "objectForKey:");
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = (void *)v7;
  if (v7 || (a4 & 1) != 0)
  {
    if (v7 && (objc_opt_isKindOfClass() & 1) == 0)
      objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Dictionary value for key '%@': expected value class %@, found %@"), v11, a3, v8);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0CB2C88], CFSTR("Dictionary missing value for required key %@"), v11, v9, v10);
  }

}

id NTKColorByPremultiplyingAlpha(void *a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;

  v6 = 0.0;
  v7 = 0.0;
  v4 = 1.0;
  v5 = 0.0;
  objc_msgSend(a1, "getRed:green:blue:alpha:", &v7, &v6, &v5, &v4);
  objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", v4 * a2 * v7, v4 * a2 * v6, v4 * a2 * v5, 1.0, v4 * a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

id NTKColorByModifyingHSB(void *a1, double a2, double a3, double a4)
{
  int v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  uint64_t v13;
  double v14;
  double v15;
  double v16;

  v15 = 0.0;
  v16 = 0.0;
  v13 = 0;
  v14 = 0.0;
  v7 = objc_msgSend(a1, "getHue:saturation:brightness:alpha:", &v16, &v15, &v14, &v13);
  v8 = 0;
  if (v7)
  {
    v9 = fmin(v16 * a2, 1.0);
    if (v9 < 0.0)
      v9 = 0.0;
    v10 = fmin(v15 * a3, 1.0);
    if (v10 < 0.0)
      v10 = 0.0;
    v15 = v10;
    v16 = v9;
    v11 = fmin(v14 * a4, 1.0);
    if (v11 < 0.0)
      v11 = 0.0;
    v14 = v11;
    objc_msgSend(MEMORY[0x1E0DC3658], "colorWithHue:saturation:brightness:alpha:");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v8;
}

id NTKColorByBrightening(void *a1, double a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  double v8;
  uint64_t v10;
  double v11;

  v3 = a1;
  NTKColorByModifyingHSB(v3, 1.0, 1.0, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    v6 = v4;
LABEL_7:
    v7 = v6;
    goto LABEL_8;
  }
  v10 = 0;
  v11 = 0.0;
  v7 = 0;
  if (objc_msgSend(v3, "getWhite:alpha:", &v11, &v10))
  {
    v8 = fmin(v11 * a2, 1.0);
    if (v8 < 0.0)
      v8 = 0.0;
    v11 = v8;
    objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
LABEL_8:

  return v7;
}

id NTKColorByApplyingOverlayColor(void *a1, void *a2)
{
  id v3;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;

  v11 = 0.0;
  v12 = 0.0;
  v9 = 0;
  v10 = 0.0;
  v3 = a2;
  objc_msgSend(a1, "getRed:green:blue:alpha:", &v12, &v11, &v10, &v9);
  v7 = 0.0;
  v8 = 0.0;
  v5 = 0.0;
  v6 = 0.0;
  objc_msgSend(v3, "getRed:green:blue:alpha:", &v8, &v7, &v6, &v5);

  objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", (1.0 - v5) * v12 + v5 * v8, (1.0 - v5) * v11 + v5 * v7, (1.0 - v5) * v10 + v5 * v6, 1.0);
  return (id)objc_claimAutoreleasedReturnValue();
}

id NTKColorByApplyingBlackOverlay(void *a1, double a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x1E0DC3658];
  v4 = a1;
  objc_msgSend(v3, "colorWithWhite:alpha:", 0.0, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  NTKColorByApplyingOverlayColor(v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id NTKColorByApplyingWhiteOverlay(void *a1, double a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x1E0DC3658];
  v4 = a1;
  objc_msgSend(v3, "colorWithWhite:alpha:", 1.0, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  NTKColorByApplyingOverlayColor(v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t NTKCompareColorsByHue(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;

  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "isEqual:", v4) & 1) != 0)
  {
    v5 = 0;
    goto LABEL_22;
  }
  v17 = 0.0;
  v15 = 0.0;
  v16 = 0.0;
  v14 = 0;
  objc_msgSend(v3, "getHue:saturation:brightness:alpha:", &v17, &v16, &v15, &v14);
  v12 = 0.0;
  v13 = 0.0;
  v10 = 0;
  v11 = 0.0;
  objc_msgSend(v4, "getHue:saturation:brightness:alpha:", &v13, &v12, &v11, &v10);
  v6 = v16 <= 0.01;
  if (v15 <= 0.01)
    v6 = 1;
  v7 = v12 <= 0.01;
  if (v11 <= 0.01)
    v7 = 1;
  if (v6 && !v7)
    goto LABEL_19;
  if (!v6 && v7)
    goto LABEL_21;
  if (v6 || v7)
    goto LABEL_13;
  if (v17 < v13)
  {
LABEL_19:
    v5 = -1;
    goto LABEL_22;
  }
  if (v17 > v13)
    goto LABEL_21;
  if (v16 < v12)
    goto LABEL_19;
  if (v16 > v12)
  {
LABEL_21:
    v5 = 1;
    goto LABEL_22;
  }
LABEL_13:
  if (v15 >= v11)
    v5 = v15 > v11;
  else
    v5 = -1;
LABEL_22:

  return v5;
}

uint64_t NTKColorWithRGBA(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "colorWithRed:green:blue:alpha:", (double)a1 / 255.0, (double)a2 / 255.0, (double)a3 / 255.0, a4);
}

id NTKRGBAArrayWithColor(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v7;
  double v8;
  double v9;
  double v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v9 = 0.0;
  v10 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  objc_msgSend(a1, "getRed:green:blue:alpha:", &v10, &v9, &v8, &v7);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v10);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v11[0] = v1;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v9);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v11[1] = v2;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v8);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11[2] = v3;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v11[3] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id _NTKLaunchIntent(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  v2 = v1;
  if (!objc_msgSend(v1, "length"))
  {

    v2 = 0;
  }

  return v2;
}

uint64_t NTKDefaultAppLaunchLocation()
{
  return 0;
}

void NTKLaunchApp(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *MEMORY[0x1E0D22D78];
    v5[0] = a1;
    v1 = (void *)MEMORY[0x1E0C99D80];
    v2 = a1;
    objc_msgSend(v1, "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
}

void NTKOpenActivityContinuation(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *MEMORY[0x1E0D22CE0];
    v6 = a1;
    v7 = v1;
    v2 = (void *)MEMORY[0x1E0C99D20];
    v3 = a1;
    objc_msgSend(v2, "arrayWithObjects:count:", &v6, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v8, &v7, 1, v6);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
}

uint64_t _NTKIsRunningSnapShotService()
{
  if (_NTKIsRunningSnapShotService_onceToken != -1)
    dispatch_once(&_NTKIsRunningSnapShotService_onceToken, &__block_literal_global_397);
  return _NTKIsRunningSnapShotService_runningInSnapshotSerivce;
}

void NTKClearUserDefaultsDomain(const __CFString *a1)
{
  const __CFString *v2;
  const __CFString *v3;
  CFArrayRef v4;
  const __CFArray *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  const __CFString *v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v3 = (const __CFString *)*MEMORY[0x1E0C9B230];
    v4 = CFPreferencesCopyKeyList(a1, (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v5 = v4;
    v6 = -[__CFArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v13;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v13 != v8)
            objc_enumerationMutation(v5);
          CFPreferencesSetValue(*(CFStringRef *)(*((_QWORD *)&v12 + 1) + 8 * v9++), 0, a1, v2, v3);
        }
        while (v7 != v9);
        v7 = -[__CFArray countByEnumeratingWithState:objects:count:](v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
      }
      while (v7);
    }

    CFPreferencesSynchronize(a1, v2, v3);
    _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = -[__CFArray count](v5, "count", (_QWORD)v12);
      *(_DWORD *)buf = 134218242;
      v17 = v11;
      v18 = 2112;
      v19 = a1;
      _os_log_impl(&dword_1B72A3000, v10, OS_LOG_TYPE_DEFAULT, "Cleared %lu values from %@ domain", buf, 0x16u);
    }

  }
}

void NTKPostPowerReserveModalPresentationNotification()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", CFSTR("NPRFBatteryCenterLaunchNotification"), 0);

}

void NTKKillCompanionDaemon()
{
  NSObject *v0;
  uint8_t v1[16];

  objc_msgSend(CFSTR("killall -9 nanotimekitcompaniond"), "UTF8String");
  IMPerformSystem();
  _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1B72A3000, v0, OS_LOG_TYPE_DEFAULT, "killed nanotimekitcompaniond", v1, 2u);
  }

}

id NTKTemporaryResourceRootDirectory()
{
  return +[_NTKTemporaryResourceRootDirectory path](_NTKTemporaryResourceRootDirectory, "path");
}

id NTKNewTeporaryResourceDirectory(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    +[_NTKTemporaryResourceRootDirectory path](_NTKTemporaryResourceRootDirectory, "path");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "stringByAppendingPathComponent:", v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id NTKNewUniqueTeporaryResourceDirectory()
{
  void *v0;
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "UUIDString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  NTKNewTeporaryResourceDirectory(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t NTKMarkFileAtURLAsPurgeable(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;
  int v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if ((objc_msgSend(v3, "isFileURL") & 1) != 0)
  {
    objc_msgSend(v3, "absoluteURL", 65541);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "path");
    v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v6 = open((const char *)objc_msgSend(v5, "fileSystemRepresentation"), 0);

    if (v6 < 0)
    {
      if (a2)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], *__error(), 0);
        v10 = 0;
        *a2 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_10;
      }
    }
    else
    {
      if (!ffsctl(v6, 0xC0084A44uLL, &v12, 0))
      {
        close(v6);
        v10 = 1;
        goto LABEL_10;
      }
      if (a2)
      {
        objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB2FE0], *__error(), 0);
        *a2 = (id)objc_claimAutoreleasedReturnValue();
      }
      close(v6);
    }
  }
  else if (a2)
  {
    v7 = (void *)MEMORY[0x1E0CB35C8];
    v8 = *MEMORY[0x1E0CB32E8];
    v13 = *MEMORY[0x1E0CB3308];
    v14[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v14, &v13, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "errorWithDomain:code:userInfo:", v8, -1000, v9);
    *a2 = (id)objc_claimAutoreleasedReturnValue();

  }
  v10 = 0;
LABEL_10:

  return v10;
}

void NTKRequestFreeSpaceOnVolume(void *a1, unint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  unint64_t v13;
  NSObject *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  _QWORD v23[3];
  _QWORD v24[3];
  uint8_t buf[4];
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "absoluteURL");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "path");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v22 = 0;
  objc_msgSend(v7, "attributesOfFileSystemForPath:error:", v9, &v22);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v22;

  if (v10)
  {
    objc_msgSend(v10, "objectForKeyedSubscript:", *MEMORY[0x1E0CB2B00]);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = objc_msgSend(v12, "unsignedLongLongValue");

    if (v13 >= a2)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v13);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, void *, _QWORD, _QWORD))v6 + 2))(v6, v20, 0, 0);

    }
    else
    {
      _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134283777;
        v26 = a2;
        v27 = 2049;
        v28 = v13;
        _os_log_impl(&dword_1B72A3000, v14, OS_LOG_TYPE_DEFAULT, "NTKRequestFreeSpaceOnVolume: Insufficient free space (need %{private}llu, have %{private}llu). Requesting purge.", buf, 0x16u);
      }

      v23[0] = CFSTR("CACHE_DELETE_VOLUME");
      objc_msgSend(v5, "absoluteURL");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "path");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v24[0] = v16;
      v23[1] = CFSTR("CACHE_DELETE_AMOUNT");
      if (a2 <= 0x100000)
        v17 = 0x100000;
      else
        v17 = a2;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v23[2] = CFSTR("CACHE_DELETE_URGENCY");
      v24[1] = v18;
      v24[2] = &unk_1E6C9E500;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 3);
      v19 = (void *)objc_claimAutoreleasedReturnValue();

      v21 = v6;
      CacheDeletePurgeSpaceWithInfo();

    }
  }
  else
  {
    (*((void (**)(id, _QWORD, _QWORD, id))v6 + 2))(v6, 0, 0, v11);
  }

}

__CFString *LogBool(int a1)
{
  if (a1)
    return CFSTR("YES");
  else
    return CFSTR("NO");
}

double NTKSingleLineHeight(uint64_t a1, void *a2)
{
  return NTKHeightForStringFontAndWidth(CFSTR("M"), a1, a2, 1.79769313e308);
}

void sub_1B7363DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id NTKSwatchTwoColorImage(void *a1, void *a2, double a3, double a4)
{
  id v7;
  id v8;
  double v10;
  double v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  _QWORD v17[4];
  id v18;
  id v19;
  double v20;
  double v21;

  v7 = a1;
  v8 = a2;
  if (a3 == *MEMORY[0x1E0C9D820] && a4 == *(double *)(MEMORY[0x1E0C9D820] + 8))
  {
    +[NTKEditOption sizeForSwatchStyle:](NTKEditOption, "sizeForSwatchStyle:", 0);
    a3 = v10;
    a4 = v11;
  }
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3828]), "initWithSize:", a3, a4);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __NTKSwatchTwoColorImage_block_invoke;
  v17[3] = &unk_1E6BD14C0;
  v18 = v8;
  v19 = v7;
  v20 = a3;
  v21 = a4;
  v13 = v7;
  v14 = v8;
  objc_msgSend(v12, "imageWithActions:", v17);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

id NTKSwatchImageFromLayer(void *a1, CGFloat a2, CGFloat a3)
{
  return NTKSwatchImageFromLayerMasked(a1, 1, a2, a3);
}

id NTKSwatchImageFromLayerMasked(void *a1, int a2, CGFloat a3, CGFloat a4)
{
  id v7;
  double v9;
  double v10;
  CGContext *CurrentContext;
  void *v12;
  CGContext *v13;
  CGImage *Image;
  CGContext *v15;
  CGContext *v16;
  void *v17;
  CGSize v19;
  CGSize v20;
  CGRect v21;
  CGRect v22;

  v7 = a1;
  if (a3 == *MEMORY[0x1E0C9D820] && a4 == *(double *)(MEMORY[0x1E0C9D820] + 8))
  {
    +[NTKEditOption sizeForSwatchStyle:](NTKEditOption, "sizeForSwatchStyle:", 0);
    a3 = v9;
    a4 = v10;
  }
  objc_msgSend(v7, "setFrame:", 0.0, 0.0, a3, a4);
  if (a2)
  {
    v19.width = a3;
    v19.height = a4;
    UIGraphicsBeginImageContextWithOptions(v19, 0, 0.0);
    CurrentContext = UIGraphicsGetCurrentContext();
    objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "set");

    v21.origin.x = 0.0;
    v21.origin.y = 0.0;
    v21.size.width = a3;
    v21.size.height = a4;
    CGContextFillEllipseInRect(CurrentContext, v21);
    v13 = UIGraphicsGetCurrentContext();
    Image = CGBitmapContextCreateImage(v13);
    UIGraphicsEndImageContext();
  }
  else
  {
    Image = 0;
  }
  v20.width = a3;
  v20.height = a4;
  UIGraphicsBeginImageContextWithOptions(v20, 0, 0.0);
  v15 = UIGraphicsGetCurrentContext();
  v16 = v15;
  if (Image)
  {
    v22.origin.x = 0.0;
    v22.origin.y = 0.0;
    v22.size.width = a3;
    v22.size.height = a4;
    CGContextClipToMask(v15, v22, Image);
  }
  objc_msgSend(v7, "renderInContext:", v16);
  UIGraphicsGetImageFromCurrentImageContext();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  UIGraphicsEndImageContext();
  if (Image)
    CGImageRelease(Image);

  return v17;
}

id NTKSwatchColorSectorsImage(void *a1, double a2, double a3, CGFloat a4, CGFloat a5)
{
  id v9;
  double v11;
  double v12;
  unint64_t v13;
  id v14;
  __double2 v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  unint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  double v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  if (a4 == *MEMORY[0x1E0C9D820] && a5 == *(double *)(MEMORY[0x1E0C9D820] + 8))
  {
    +[NTKEditOption sizeForSwatchStyle:](NTKEditOption, "sizeForSwatchStyle:", 0);
    a4 = v11;
    a5 = v12;
  }
  v13 = objc_msgSend(v9, "count");
  v14 = objc_alloc_init(MEMORY[0x1E0CD2790]);
  objc_msgSend(v14, "setType:", *MEMORY[0x1E0CD2F50]);
  objc_msgSend(v14, "setStartPoint:", 0.5, 0.5);
  v15 = __sincos_stret(3.14159265 / (double)v13 + 1.57079633);
  objc_msgSend(v14, "setEndPoint:", v15.__cosval + 0.5, 0.5 - v15.__sinval);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v17 = v9;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v43;
    do
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)v43 != v20)
          objc_enumerationMutation(v17);
        v22 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * i);
        objc_msgSend(v16, "addObject:", v22, (_QWORD)v42);
        objc_msgSend(v16, "addObject:", v22);
      }
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
    }
    while (v19);
  }

  objc_msgSend(v16, "firstObject");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "addObject:", v23);

  objc_msgSend(v16, "bs_reverse");
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v24, "bs_compactMap:", &__block_literal_global_453);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setColors:", v25);

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v27 = 0;
    v28 = 1.0 / (double)v13;
    v29 = fmax(fmin(a2, 1.0), 0.0) * v28;
    v30 = (v28 - v29) * 0.5;
    v31 = v29 + v30;
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v30 + (double)v27 * v28, (_QWORD)v42);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "addObject:", v32);

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v31 + (double)v27 * v28);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "addObject:", v33);

      ++v27;
    }
    while (v13 != v27);
  }
  objc_msgSend(v26, "addObject:", &unk_1E6CA4548, (_QWORD)v42);
  objc_msgSend(v14, "setLocations:", v26);
  if (a3 <= 0.0)
  {
    NTKSwatchImageFromLayerMasked(v14, 1, a4, a5);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    NTKSwatchImageFromLayerMasked(v14, 0, a4, a5);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = v34;
    if (a4 >= a5)
      v36 = a5;
    else
      v36 = a4;
    NTKBlurImage(v34, v36 / 4.5 * a3);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3890]), "initWithImage:", v37);
    objc_msgSend(v38, "layer");
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    NTKSwatchImageFromLayerMasked(v39, 1, a4, a5);
    v40 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v40;
}

id NTKSwatchTwoColorGradientImage(void *a1, void *a2, int a3, double a4, double a5, CGFloat a6, CGFloat a7)
{
  id v13;
  id v14;
  double v16;
  double v17;
  CGContext *CurrentContext;
  void *v19;
  CGContext *v20;
  CGImage *Image;
  CGContext *v22;
  CGColorSpace *v23;
  double v24;
  _BOOL4 v25;
  double v26;
  double v27;
  _BOOL4 v28;
  double v29;
  _BOOL4 v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  size_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  __int128 v38;
  _OWORD *v39;
  CGGradient *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  void *v47;
  _OWORD v49[8];
  CGFloat locations[2];
  __int128 v51;
  uint64_t v52;
  CGSize v53;
  CGSize v54;
  CGRect v55;
  CGRect v56;

  v52 = *MEMORY[0x1E0C80C00];
  v13 = a1;
  v14 = a2;
  if (a6 == *MEMORY[0x1E0C9D820] && a7 == *(double *)(MEMORY[0x1E0C9D820] + 8))
  {
    +[NTKEditOption sizeForSwatchStyle:](NTKEditOption, "sizeForSwatchStyle:", 0);
    a6 = v16;
    a7 = v17;
  }
  v53.width = a6;
  v53.height = a7;
  UIGraphicsBeginImageContextWithOptions(v53, 0, 0.0);
  CurrentContext = UIGraphicsGetCurrentContext();
  objc_msgSend(MEMORY[0x1E0DC3658], "blackColor");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "set");

  v55.origin.x = 0.0;
  v55.origin.y = 0.0;
  v55.size.width = a6;
  v55.size.height = a7;
  CGContextFillEllipseInRect(CurrentContext, v55);
  v20 = UIGraphicsGetCurrentContext();
  Image = CGBitmapContextCreateImage(v20);
  UIGraphicsEndImageContext();
  v54.width = a6;
  v54.height = a7;
  UIGraphicsBeginImageContextWithOptions(v54, 0, 0.0);
  v22 = UIGraphicsGetCurrentContext();
  v23 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  v56.origin.x = 0.0;
  v56.origin.y = 0.0;
  v56.size.width = a6;
  v56.size.height = a7;
  CGContextClipToMask(v22, v56, Image);
  *(_OWORD *)locations = xmmword_1B755E0C8;
  v51 = unk_1B755E0D8;
  if (a4 >= 0.0)
    v24 = a4;
  else
    v24 = 0.0;
  v25 = v24 < 1.0;
  if (v24 >= 1.0)
    v26 = 1.0;
  else
    v26 = v24;
  if (v26 >= a5)
    v27 = v26;
  else
    v27 = a5;
  v28 = v27 < 1.0;
  if (v27 >= 1.0)
    v29 = 1.0;
  else
    v29 = v27;
  v30 = v26 > 0.0;
  if (v29 <= v26)
    v28 = 0;
  v32 = v25 & v30;
  v31 = !v25 || !v30;
  if (v25 && v30)
    v33 = 3;
  else
    v33 = 2;
  v34 = (v33 + v28);
  if (v31)
    v35 = 1;
  else
    v35 = 2;
  objc_msgSend(v13, "getRed:green:blue:alpha:");
  v36 = &v49[2 * v35];
  objc_msgSend(v14, "getRed:green:blue:alpha:", v36, (char *)v36 + 8, v36 + 1, (char *)v36 + 24);
  if ((_DWORD)v32)
  {
    v49[0] = v49[2];
    v49[1] = v49[3];
  }
  v37 = v32 | 2;
  if (v37 < v34)
  {
    v38 = v36[1];
    v39 = &v49[2 * v37];
    *v39 = *v36;
    v39[1] = v38;
  }
  locations[v32] = v26;
  locations[v35] = v29;
  v40 = CGGradientCreateWithColorComponents(v23, (const CGFloat *)v49, locations, v34);
  v41 = a6 * 0.5;
  v42 = a7 * 0.5;
  if (a3)
  {
    v43 = sqrt(a7 * a7 + a6 * a6) * 0.5 * 0.707106781;
    v44 = v41 + v43;
    v41 = v41 - v43;
    v45 = v42 - v43;
    v46 = v42 + v43;
  }
  else
  {
    v46 = v42 + v42;
    v45 = 0.0;
    v44 = a6 * 0.5;
  }
  CGContextDrawLinearGradient(v22, v40, *(CGPoint *)&v41, *(CGPoint *)&v44, 0);
  UIGraphicsGetImageFromCurrentImageContext();
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  CGGradientRelease(v40);
  CGColorSpaceRelease(v23);
  UIGraphicsEndImageContext();
  CGImageRelease(Image);

  return v47;
}

id NTKSwatchColorStripesImage(void *a1, double a2, double a3, double a4)
{
  id v7;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD v17[4];
  id v18;
  double v19;
  double v20;

  v7 = a1;
  if (a3 == *MEMORY[0x1E0C9D820] && a4 == *(double *)(MEMORY[0x1E0C9D820] + 8))
  {
    +[NTKEditOption sizeForSwatchStyle:](NTKEditOption, "sizeForSwatchStyle:", 0);
    a3 = v9;
    a4 = v10;
  }
  if (objc_msgSend(v7, "count"))
    v11 = (double)(unint64_t)objc_msgSend(v7, "count");
  else
    v11 = 1.0;
  v12 = a3 / v11;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3828]), "initWithSize:", a3, a4);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __NTKSwatchColorStripesImage_block_invoke;
  v17[3] = &unk_1E6BD1528;
  v18 = v7;
  v19 = a2;
  v20 = v12;
  v14 = v7;
  objc_msgSend(v13, "imageWithActions:", v17);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

void NTKApplyViewCornerRadius(void *a1, double a2)
{
  id v3;

  v3 = a1;
  objc_msgSend(v3, "_setContinuousCornerRadius:", a2);
  objc_msgSend(v3, "setClipsToBounds:", fabs(a2) >= 0.00000011920929);

}

uint64_t NTKDeviceIsGreenTea()
{
  if (NTKDeviceIsGreenTea_onceToken != -1)
    dispatch_once(&NTKDeviceIsGreenTea_onceToken, &__block_literal_global_455);
  return NTKDeviceIsGreenTea_deviceIsGreenTea;
}

uint64_t NTKDisableFaceSwiping()
{
  return 0;
}

uint64_t NTKFastFaceSwitchingEnabled()
{
  NTKSnapshotSwitchingEnabled();
  return 1;
}

uint64_t NTKSnapshotSwitchingEnabled()
{
  void *v0;
  uint64_t v1;

  +[NTKFastFaceSwitchingSettings sharedInstance](NTKFastFaceSwitchingSettings, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "fastFaceSwitchingEnabled");

  return v1;
}

id NTKRoundedCGFloatString(uint64_t a1, double a2)
{
  id v4;
  double v5;
  void *v6;
  void *v7;

  v4 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
  objc_msgSend(v4, "setMaximumFractionDigits:", a1);
  *(float *)&v5 = a2;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringFromNumber:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t NTKEnableAODVibrancy(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v1 = a1;
  os_unfair_lock_lock(&NTKEnableAODVibrancy___lock);
  WeakRetained = objc_loadWeakRetained(&NTKEnableAODVibrancy___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&NTKEnableAODVibrancy___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&NTKEnableAODVibrancy___cachedDevice, v1);
    NTKEnableAODVibrancy___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    __NTKEnableAODVibrancy_block_invoke();
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = NTKEnableAODVibrancy___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock(&NTKEnableAODVibrancy___lock);
  v8 = NTKEnableAODVibrancy_enableAODVibrancy;

  return v8;
}

uint64_t NTKEnableAOD1hzTimeline(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v1 = a1;
  os_unfair_lock_lock(&NTKEnableAOD1hzTimeline___lock);
  WeakRetained = objc_loadWeakRetained(&NTKEnableAOD1hzTimeline___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&NTKEnableAOD1hzTimeline___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&NTKEnableAOD1hzTimeline___cachedDevice, v1);
    NTKEnableAOD1hzTimeline___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    __NTKEnableAOD1hzTimeline_block_invoke();
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = NTKEnableAOD1hzTimeline___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock(&NTKEnableAOD1hzTimeline___lock);
  v8 = NTKEnableAOD1hzTimeline_enableAOD1hzTimeline;

  return v8;
}

uint64_t NTKEnableAOD1hzTimelineForAllCapableFaces(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  os_unfair_lock_lock(&NTKEnableAOD1hzTimelineForAllCapableFaces___lock);
  WeakRetained = objc_loadWeakRetained(&NTKEnableAOD1hzTimelineForAllCapableFaces___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&NTKEnableAOD1hzTimelineForAllCapableFaces___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&NTKEnableAOD1hzTimelineForAllCapableFaces___cachedDevice, v1);
    NTKEnableAOD1hzTimelineForAllCapableFaces___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    __NTKEnableAOD1hzTimelineForAllCapableFaces_block_invoke(v8, v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = NTKEnableAOD1hzTimelineForAllCapableFaces___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock(&NTKEnableAOD1hzTimelineForAllCapableFaces___lock);
  v9 = NTKEnableAOD1hzTimelineForAllCapableFaces_allowExtendedSupport;

  return v9;
}

uint64_t NTKPeerDeviceHandlesWideLoads()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(MEMORY[0x1E0D51838], "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "getActivePairedDevice");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("06ADE5F4-5D76-45B0-91A4-289A116145AE"));
    v3 = objc_msgSend(v1, "supportsCapability:", v2);

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void *__getSimulateCrashSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (CrashReporterSupportLibraryCore_frameworkLibrary)
  {
    v2 = (void *)CrashReporterSupportLibraryCore_frameworkLibrary;
  }
  else
  {
    CrashReporterSupportLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)CrashReporterSupportLibraryCore_frameworkLibrary;
    if (!CrashReporterSupportLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "SimulateCrash");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getSimulateCrashSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1B7365620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL NTKComplicationFamilyIsRichForDevice(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "deviceCategory");

  return (unint64_t)(a1 - 8) < 5 && v3 != 1;
}

id NTKLocalizedTitleForComplication(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    objc_msgSend(a1, "localizedRichDetailText");
  else
    objc_msgSend(a1, "localizedDetailText");
  return (id)objc_claimAutoreleasedReturnValue();
}

void NTKPositionSimpleTemperatureLabel(void *a1, double a2, double a3, double a4, double a5)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  unint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  double v36;
  double v37;
  double v38;
  double v39;
  id v40;

  v40 = a1;
  +[CLKRenderingContext sharedRenderingContext](NTKFaceViewRenderingContext, "sharedRenderingContext");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "device");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  NTKClockFaceLocalizedString(CFSTR("WEATHER_DEGREE_SYMBOL"), CFSTR("°"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v40, "text");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "rangeOfString:", v11);

  objc_msgSend(v40, "text");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = objc_msgSend(v14, "length");

  objc_msgSend(v40, "text");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3500], "decimalDigitCharacterSet");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = objc_msgSend(v16, "rangeOfCharacterFromSet:", v17);

  if (v13 != 0x7FFFFFFFFFFFFFFFLL && (v15 < 4 ? (v19 = v18 == 0x7FFFFFFFFFFFFFFFLL) : (v19 = 0), v19 || v15 == 2))
  {
    v29 = v15 - 1;
    objc_msgSend(v40, "text");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = v30;
    if (v13)
      objc_msgSend(v30, "substringToIndex:", v29);
    else
      objc_msgSend(v30, "substringFromIndex:", v29);
    v32 = (void *)objc_claimAutoreleasedReturnValue();

    v33 = (void *)MEMORY[0x1E0C99D80];
    objc_msgSend(v40, "font");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "dictionaryWithObjectsAndKeys:", v34, *MEMORY[0x1E0DC1138], 0);
    v35 = (void *)objc_claimAutoreleasedReturnValue();

    MEMORY[0x1BCCA72B8](objc_msgSend(v32, "sizeWithAttributes:", v35), a2, a3, a4, a5);
    objc_msgSend(v40, "bounds");
    objc_msgSend(v40, "frame");
    CLKRectCenteredAboutPointForDevice();
    v22 = v36;
    v24 = v37;
    v26 = v38;
    v28 = v39;

    v20 = v40;
  }
  else
  {
    objc_msgSend(v40, "frame");
    CLKRectCenteredIntegralRectForDevice();
    v20 = v40;
    v22 = v21;
    v24 = v23;
    v26 = v25;
    v28 = v27;
  }
  objc_msgSend(v20, "setFrame:", v22, v24, v26, v28);

}

double NTKFindCubicBezierCoordinate(double a1, double a2, double a3, double a4, double a5)
{
  return (1.0 - a1) * ((1.0 - a1) * (a3 * 3.0)) * a1
       + (1.0 - a1) * ((1.0 - a1) * a2) * (1.0 - a1)
       + (1.0 - a1) * (a4 * 3.0) * a1 * a1
       + a1 * a5 * a1 * a1;
}

id NTKInterpolateBetweenBezierPaths(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  id v37;
  id v38;
  unint64_t i;
  void *v40;
  void *v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  unint64_t v58;
  void *v59;
  void *v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    v37 = v4;
LABEL_24:
    v38 = v37;
    goto LABEL_44;
  }
  if (!v4)
  {
    v37 = v3;
    goto LABEL_24;
  }
  objc_msgSend(MEMORY[0x1E0DC3508], "bezierPath");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_retainAutorelease(v3);
  CGPathApply((CGPathRef)objc_msgSend(v8, "CGPath"), v7, (CGPathApplierFunction)NTKBuildPathElement);
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_retainAutorelease(v5);
  CGPathApply((CGPathRef)objc_msgSend(v10, "CGPath"), v9, (CGPathApplierFunction)NTKBuildPathElement);
  if (objc_msgSend(v7, "count"))
  {
    if (objc_msgSend(v9, "count"))
    {
      v11 = objc_msgSend(v7, "count");
      v12 = objc_msgSend(v9, "count");
      if (v11 >= v12)
        v13 = v12;
      else
        v13 = v11;
      if (v13)
      {
        v14 = 0;
        do
        {
          objc_msgSend(v7, "objectAtIndexedSubscript:", v14);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "objectAtIndexedSubscript:", v14);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v15, "type");
          if (v17 == objc_msgSend(v16, "type"))
          {
            switch(objc_msgSend(v15, "type"))
            {
              case 0u:
                objc_msgSend(v15, "endPoint");
                objc_msgSend(v16, "endPoint");
                CLKInterpolateBetweenPoints();
                objc_msgSend(v6, "moveToPoint:");
                break;
              case 1u:
                goto LABEL_13;
              case 2u:
                objc_msgSend(v15, "endPoint");
                objc_msgSend(v16, "endPoint");
                CLKInterpolateBetweenPoints();
                v22 = v21;
                v24 = v23;
                objc_msgSend(v15, "points");
                objc_msgSend(v16, "points");
                CLKInterpolateBetweenPoints();
                objc_msgSend(v6, "addQuadCurveToPoint:controlPoint:", v22, v24, v25, v26);
                break;
              case 3u:
                objc_msgSend(v15, "endPoint");
                objc_msgSend(v16, "endPoint");
                CLKInterpolateBetweenPoints();
                v28 = v27;
                v30 = v29;
                objc_msgSend(v15, "points");
                objc_msgSend(v16, "points");
                CLKInterpolateBetweenPoints();
                v32 = v31;
                v34 = v33;
                objc_msgSend(v15, "points");
                objc_msgSend(v16, "points");
                CLKInterpolateBetweenPoints();
                objc_msgSend(v6, "addCurveToPoint:controlPoint1:controlPoint2:", v28, v30, v32, v34, v35, v36);
                break;
              case 4u:
                objc_msgSend(v6, "closePath");
                break;
              default:
                break;
            }
          }
          else
          {
LABEL_13:
            objc_msgSend(v15, "endPoint");
            objc_msgSend(v16, "endPoint");
            CLKInterpolateBetweenPoints();
            objc_msgSend(v6, "addLineToPoint:");
          }

          ++v14;
          v18 = objc_msgSend(v7, "count");
          v19 = objc_msgSend(v9, "count");
          if (v18 >= v19)
            v20 = v19;
          else
            v20 = v18;
        }
        while (v14 < v20);
      }
      for (i = objc_msgSend(v7, "count"); i < objc_msgSend(v9, "count"); ++i)
      {
        objc_msgSend(v7, "lastObject");
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "objectAtIndexedSubscript:", i);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        switch(objc_msgSend(v41, "type"))
        {
          case 0u:
            objc_msgSend(v40, "endPoint");
            objc_msgSend(v41, "endPoint");
            CLKInterpolateBetweenPoints();
            objc_msgSend(v6, "moveToPoint:");
            break;
          case 1u:
            objc_msgSend(v40, "endPoint");
            objc_msgSend(v41, "endPoint");
            CLKInterpolateBetweenPoints();
            objc_msgSend(v6, "addLineToPoint:");
            break;
          case 2u:
            objc_msgSend(v40, "endPoint");
            objc_msgSend(v41, "endPoint");
            CLKInterpolateBetweenPoints();
            v43 = v42;
            v45 = v44;
            objc_msgSend(v40, "endPoint");
            objc_msgSend(v41, "points");
            CLKInterpolateBetweenPoints();
            objc_msgSend(v6, "addQuadCurveToPoint:controlPoint:", v43, v45, v46, v47);
            break;
          case 3u:
            objc_msgSend(v40, "endPoint");
            objc_msgSend(v41, "endPoint");
            CLKInterpolateBetweenPoints();
            v49 = v48;
            v51 = v50;
            objc_msgSend(v40, "endPoint");
            objc_msgSend(v41, "points");
            CLKInterpolateBetweenPoints();
            v53 = v52;
            v55 = v54;
            objc_msgSend(v40, "endPoint");
            objc_msgSend(v41, "points");
            CLKInterpolateBetweenPoints();
            objc_msgSend(v6, "addCurveToPoint:controlPoint1:controlPoint2:", v49, v51, v53, v55, v56, v57);
            break;
          case 4u:
            objc_msgSend(v6, "closePath");
            break;
          default:
            break;
        }

      }
      v58 = objc_msgSend(v9, "count");
      v10 = v6;
      if (v58 < objc_msgSend(v7, "count"))
      {
        do
        {
          objc_msgSend(v7, "objectAtIndexedSubscript:", v58);
          v59 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v9, "lastObject");
          v60 = (void *)objc_claimAutoreleasedReturnValue();
          switch(objc_msgSend(v60, "type"))
          {
            case 0u:
              objc_msgSend(v59, "endPoint");
              objc_msgSend(v60, "endPoint");
              CLKInterpolateBetweenPoints();
              objc_msgSend(v6, "moveToPoint:");
              break;
            case 1u:
              objc_msgSend(v59, "endPoint");
              objc_msgSend(v60, "endPoint");
              CLKInterpolateBetweenPoints();
              objc_msgSend(v6, "addLineToPoint:");
              break;
            case 2u:
              objc_msgSend(v59, "endPoint");
              objc_msgSend(v60, "endPoint");
              CLKInterpolateBetweenPoints();
              v62 = v61;
              v64 = v63;
              objc_msgSend(v59, "points");
              objc_msgSend(v60, "endPoint");
              CLKInterpolateBetweenPoints();
              objc_msgSend(v6, "addQuadCurveToPoint:controlPoint:", v62, v64, v65, v66);
              break;
            case 3u:
              objc_msgSend(v59, "endPoint");
              objc_msgSend(v60, "endPoint");
              CLKInterpolateBetweenPoints();
              v68 = v67;
              v70 = v69;
              objc_msgSend(v59, "points");
              objc_msgSend(v60, "endPoint");
              CLKInterpolateBetweenPoints();
              v72 = v71;
              v74 = v73;
              objc_msgSend(v59, "points");
              objc_msgSend(v60, "endPoint");
              CLKInterpolateBetweenPoints();
              objc_msgSend(v6, "addCurveToPoint:controlPoint1:controlPoint2:", v68, v70, v72, v74, v75, v76);
              break;
            case 4u:
              objc_msgSend(v6, "closePath");
              break;
            default:
              break;
          }

          ++v58;
        }
        while (v58 < objc_msgSend(v7, "count"));
        v10 = v6;
      }
    }
    else
    {
      v10 = v8;
    }
  }
  v38 = v10;

LABEL_44:
  return v38;
}

double NTKFindCubicBezierPoint(double a1, float64x2_t a2, float64_t a3, float64x2_t a4, float64_t a5, float64x2_t a6, float64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, float64x2_t a16)
{
  double result;

  a2.f64[1] = a3;
  a4.f64[1] = a5;
  __asm { FMOV            V4.2D, #3.0 }
  a6.f64[1] = a7;
  *(_QWORD *)&result = *(_OWORD *)&vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_f64(a4, _Q4), 1.0 - a1), 1.0 - a1), a1), vmulq_n_f64(vmulq_n_f64(a2, 1.0 - a1), 1.0 - a1), 1.0 - a1), vmulq_n_f64(vmulq_n_f64(vmulq_f64(a6, _Q4), 1.0 - a1), a1), a1), vmulq_n_f64(vmulq_n_f64(a16, a1), a1), a1);
  return result;
}

double NTKComputeCubicBezierLength(float64x2_t a1, float64_t a2, float64x2_t a3, float64_t a4, float64x2_t a5, float64_t a6, float64x2_t a7, float64_t a8)
{
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  double v16;
  int v17;
  double v18;
  double v19;
  float64x2_t v20;
  float64x2_t v21;

  a3.f64[1] = a4;
  __asm { FMOV            V3.2D, #3.0 }
  a5.f64[1] = a6;
  v13 = vmulq_f64(a3, _Q3);
  v14 = vmulq_f64(a5, _Q3);
  a7.f64[1] = a8;
  a1.f64[1] = a2;
  v15 = 0uLL;
  v16 = 0.0;
  v17 = 11;
  v18 = 0.0;
  do
  {
    v19 = 1.0 - v18 / 10.0;
    v20 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmulq_n_f64(vmulq_n_f64(v13, v19), v19), v18 / 10.0), vmulq_n_f64(vmulq_n_f64(a1, v19), v19), v19), vmulq_n_f64(vmulq_n_f64(v14, v19), v18 / 10.0), v18 / 10.0), vmulq_n_f64(vmulq_n_f64(a7, v18 / 10.0), v18 / 10.0), v18 / 10.0);
    if (v17 != 11)
    {
      v21 = vsubq_f64(v20, v15);
      v16 = v16 + sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v21, v21).f64[1]), v21.f64[0], v21.f64[0]));
    }
    v18 = v18 + 1.0;
    v15 = v20;
    --v17;
  }
  while (v17);
  return v16;
}

double NTKComputeCubicBezierYForX(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v17;
  int v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  double v26;
  double v27;
  double v28;
  double v29;

  v17 = vabdd_f64(a9, a2) * 10.0;
  if (v17 < 10.0)
    v17 = 10.0;
  v18 = (int)v17;
  if ((int)v17 < 0)
    return 0.0;
  v19 = 0;
  v20 = (double)v18;
  v21 = a4 * 3.0;
  v22 = a6 * 3.0;
  v23 = a5 * 3.0;
  v24 = a7 * 3.0;
  v25 = v18 + 1;
  v26 = 0.0;
  v27 = 1.79769313e308;
  do
  {
    v28 = (double)v19 / v20;
    v29 = vabdd_f64(v28 * ((1.0 - v28) * (v21 * (1.0 - v28)))+ (1.0 - v28) * (a2 * (1.0 - v28)) * (1.0 - v28)+ v28 * (v22 * (1.0 - v28)) * v28+ v28 * (a9 * v28) * v28, a1);
    if (v29 < v27)
    {
      v26 = v28 * ((1.0 - v28) * (v23 * (1.0 - v28)))
          + (1.0 - v28) * (a3 * (1.0 - v28)) * (1.0 - v28)
          + v28 * (v24 * (1.0 - v28)) * v28
          + v28 * (a10 * v28) * v28;
      v27 = v29;
    }
    ++v19;
  }
  while (v25 != v19);
  return v26;
}

void NTKRandomFlipTransformForRect(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  float v10;
  float v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CGFloat Height;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat Width;
  __int128 v25;
  __int128 v26;
  CGAffineTransform v27;
  CGAffineTransform v28;
  CGRect v29;

  v10 = NTKRandomFloatFromZeroToOne();
  v11 = NTKRandomFloatFromZeroToOne();
  v12 = MEMORY[0x1E0C9BAA8];
  v13 = *MEMORY[0x1E0C9BAA8];
  v14 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a1 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 16) = v14;
  v15 = *(_OWORD *)(v12 + 32);
  *(_OWORD *)(a1 + 32) = v15;
  if (v10 >= 0.5)
  {
    *(_OWORD *)&v28.a = v13;
    *(_OWORD *)&v28.c = v14;
    *(_OWORD *)&v28.tx = v15;
    CGAffineTransformScale((CGAffineTransform *)a1, &v28, 1.0, -1.0);
    v29.origin.x = a2;
    v29.origin.y = a3;
    v29.size.width = a4;
    v29.size.height = a5;
    Height = CGRectGetHeight(v29);
    v17 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&v27.a = *(_OWORD *)a1;
    *(_OWORD *)&v27.c = v17;
    *(_OWORD *)&v27.tx = *(_OWORD *)(a1 + 32);
    CGAffineTransformTranslate(&v28, &v27, 0.0, -Height);
    v18 = *(_OWORD *)&v28.c;
    *(_OWORD *)a1 = *(_OWORD *)&v28.a;
    *(_OWORD *)(a1 + 16) = v18;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v28.tx;
  }
  if (v11 >= 0.5)
  {
    v19 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&v27.a = *(_OWORD *)a1;
    *(_OWORD *)&v27.c = v19;
    *(_OWORD *)&v27.tx = *(_OWORD *)(a1 + 32);
    CGAffineTransformScale(&v28, &v27, -1.0, 1.0);
    v20 = *(_OWORD *)&v28.c;
    *(_OWORD *)a1 = *(_OWORD *)&v28.a;
    *(_OWORD *)(a1 + 16) = v20;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v28.tx;
    v21 = a2;
    *(CGFloat *)&v20 = a3;
    v22 = a4;
    v23 = a5;
    Width = CGRectGetWidth(*(CGRect *)((char *)&v20 - 8));
    v25 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&v27.a = *(_OWORD *)a1;
    *(_OWORD *)&v27.c = v25;
    *(_OWORD *)&v27.tx = *(_OWORD *)(a1 + 32);
    CGAffineTransformTranslate(&v28, &v27, -Width, 0.0);
    v26 = *(_OWORD *)&v28.c;
    *(_OWORD *)a1 = *(_OWORD *)&v28.a;
    *(_OWORD *)(a1 + 16) = v26;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v28.tx;
  }
}

double NTKComputeRectAroundCircle(double a1, double a2, double a3)
{
  return a1 - a3;
}

double NTKScreenRadiusAtAngleWithInset(void *a1, double a2, double a3)
{
  id v5;
  float v6;
  float v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  double v21;
  __double2 v22;
  long double v23;
  long double v24;
  double v25;
  double v26;
  double v28;
  double v30;

  v5 = a1;
  v6 = a2;
  v7 = fmodf(v6, 6.2832);
  v8 = v7;
  if (v7 < 0.0)
  {
    do
      v8 = v8 + 6.28318531;
    while (v8 < 0.0);
  }
  v9 = 1.57079633;
  if (v8 >= 1.57079633)
  {
    v10 = 3.14159265;
    if (v8 >= 3.14159265)
    {
      if (v8 < 4.71238898)
      {
        v8 = v8 + -3.14159265;
        goto LABEL_9;
      }
      v10 = 6.28318531;
    }
    v8 = v10 - v8;
  }
LABEL_9:
  objc_msgSend(v5, "screenBounds");
  v12 = v11 + a3 * -2.0;
  objc_msgSend(v5, "screenBounds");
  v14 = v13 + a3 * -2.0;
  objc_msgSend(v5, "screenCornerRadius");
  v16 = fmax((v15 - a3) * 1.52866, 0.0);
  v17 = v14 * 0.5;
  if (atan2(-(v16 - v12 * 0.5), v14 * 0.5) >= v8)
  {
    v18 = v17 * tan(v8);
LABEL_13:
    v19 = v18 * v18 + v17 * v17;
    goto LABEL_25;
  }
  v18 = v12 * 0.5;
  if (atan2(v18, v14 * 0.5 - v16) < v8)
  {
    v17 = v18 / tan(v8);
    goto LABEL_13;
  }
  v20 = 0;
  v30 = v18 - v16;
  v21 = 0.0;
  do
  {
    v22 = __sincos_stret((v21 + v9) * 0.5);
    v23 = v17 - v16 + v16 * pow(v22.__cosval, 0.622409222);
    v24 = v30 + v16 * pow(v22.__sinval, 0.622409222);
    v25 = v8 - atan2(v24, v23);
    if (v25 > 0.0)
      v26 = (v21 + v9) * 0.5;
    else
      v26 = v21;
    if (v25 < 0.0)
      v9 = (v21 + v9) * 0.5;
    else
      v21 = v26;
    if (fabs(v25) <= 0.01)
      break;
  }
  while (v20++ < 0x63);
  v19 = v24 * v24 + v23 * v23;
LABEL_25:
  v28 = sqrt(v19);

  return v28;
}

double NTKRectCenteredInRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return a5 + floor((a7 - a3) * 0.5);
}

void sub_1B7368B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1B7369DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7369F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B736A108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _handleDaemonDidLaunchNotification(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_register");
}

__n128 _LayoutConstants_13@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_18);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_18);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_18);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_18, obj);
    _LayoutConstants___previousCLKDeviceVersion_18 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_15(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_18;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_18);
  v10 = xmmword_1EF173168;
  *(_OWORD *)(a2 + 96) = xmmword_1EF173158;
  *(_OWORD *)(a2 + 112) = v10;
  *(_QWORD *)(a2 + 128) = qword_1EF173178;
  v11 = *(_OWORD *)&qword_1EF173128;
  *(_OWORD *)(a2 + 32) = xmmword_1EF173118;
  *(_OWORD *)(a2 + 48) = v11;
  v12 = unk_1EF173148;
  *(_OWORD *)(a2 + 64) = xmmword_1EF173138;
  *(_OWORD *)(a2 + 80) = v12;
  v13 = unk_1EF173108;
  *(_OWORD *)a2 = _LayoutConstants___constants_4;
  *(_OWORD *)(a2 + 16) = v13;

  return result;
}

double _LargeOrMediumTickLengthAtIndex(uint64_t a1, void *a2, double a3, double a4, double a5)
{
  id v9;
  void *v10;
  double v11;
  _BYTE v13[120];
  double v14;

  v9 = a2;
  v10 = v9;
  switch(a1)
  {
    case 0:
    case 6:
      _LayoutConstants_13(v9, (uint64_t)v13);
      a4 = v14 + a3;
      break;
    case 1:
    case 5:
    case 7:
    case 11:
      v11 = a3 / 0.866025404;
      goto LABEL_4;
    case 2:
    case 4:
    case 8:
    case 10:
      v11 = a4 / 0.866025404;
LABEL_4:
      a4 = v11 - a5;
      break;
    case 3:
    case 9:
      break;
    default:
      a4 = 0.0;
      break;
  }

  return a4;
}

double _TickPosition(void *a1, double a2, double a3, double a4, double a5)
{
  double v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v6 = a2 + a4 * __sincos_stret(a5).__cosval;
  v7 = a1;
  v8 = MEMORY[0x1BCCA72B8](objc_msgSend(v7, "screenBounds"));
  objc_msgSend(v7, "screenScale");
  v10 = v9 * (v6 - v8);
  objc_msgSend(v7, "screenScale");
  objc_msgSend(v7, "screenScale");
  v12 = v8 + (double)(uint64_t)v10 / v11;
  objc_msgSend(v7, "screenScale");

  return v12;
}

uint64_t _PrintAPL(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = NTKInternalBuild(a1, a2);
  if ((_DWORD)result)
    return _os_feature_enabled_impl();
  return result;
}

id _NTKPhotosAnalysisQueue()
{
  if (_NTKPhotosAnalysisQueue_onceToken != -1)
    dispatch_once(&_NTKPhotosAnalysisQueue_onceToken, &__block_literal_global_46);
  return (id)_NTKPhotosAnalysisQueue___analysisQueue;
}

void sub_1B7371A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B7371FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1B73723AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B7372950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B7372D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  objc_destroyWeak(&location);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

id NTKLogDirectory()
{
  if (NTKLogDirectory_onceToken != -1)
    dispatch_once(&NTKLogDirectory_onceToken, &__block_literal_global_47);
  return (id)NTKLogDirectory___path;
}

uint64_t NTKDebugColorSynchronousRenders()
{
  if (NTKDebugColorSynchronousRenders_onceToken != -1)
    dispatch_once(&NTKDebugColorSynchronousRenders_onceToken, &__block_literal_global_4_0);
  return NTKDebugColorSynchronousRenders___flag;
}

uint64_t NTKDebugRegenerateAllSnapshots()
{
  if (NTKDebugRegenerateAllSnapshots_onceToken != -1)
    dispatch_once(&NTKDebugRegenerateAllSnapshots_onceToken, &__block_literal_global_7);
  return NTKDebugRegenerateAllSnapshots___flag;
}

uint64_t NTKDebugDisableSnapshotting()
{
  if (NTKDebugDisableSnapshotting_onceToken != -1)
    dispatch_once(&NTKDebugDisableSnapshotting_onceToken, &__block_literal_global_10);
  return NTKDebugDisableSnapshotting___flag;
}

uint64_t NTKDebugNoSnapshotsInSwitcher()
{
  if (NTKDebugNoSnapshotsInSwitcher_onceToken != -1)
    dispatch_once(&NTKDebugNoSnapshotsInSwitcher_onceToken, &__block_literal_global_14);
  return NTKDebugNoSnapshotsInSwitcher___flag;
}

uint64_t NTKDebugSnapshotInNanoTimeKitDaemon()
{
  if (NTKDebugSnapshotInNanoTimeKitDaemon_onceToken != -1)
    dispatch_once(&NTKDebugSnapshotInNanoTimeKitDaemon_onceToken, &__block_literal_global_17);
  return NTKDebugSnapshotInNanoTimeKitDaemon___flag;
}

uint64_t NTKDebugWriteSnapshotsToDiskAsPNGs()
{
  if (NTKDebugWriteSnapshotsToDiskAsPNGs_onceToken != -1)
    dispatch_once(&NTKDebugWriteSnapshotsToDiskAsPNGs_onceToken, &__block_literal_global_20_0);
  return NTKDebugWriteSnapshotsToDiskAsPNGs___flag;
}

uint64_t NTKDebugShowVisualIndicatorOnSnapshot()
{
  if (NTKDebugShowVisualIndicatorOnSnapshot_onceToken != -1)
    dispatch_once(&NTKDebugShowVisualIndicatorOnSnapshot_onceToken, &__block_literal_global_23);
  return NTKDebugShowVisualIndicatorOnSnapshot___flag;
}

uint64_t NTKDebugClearCachesAfterEachSnapshot()
{
  if (NTKDebugClearCachesAfterEachSnapshot_onceToken != -1)
    dispatch_once(&NTKDebugClearCachesAfterEachSnapshot_onceToken, &__block_literal_global_26);
  return NTKDebugClearCachesAfterEachSnapshot___flag;
}

uint64_t NTKDebugStarbearPickerLoadingIndicator()
{
  if (NTKDebugStarbearPickerLoadingIndicator_onceToken != -1)
    dispatch_once(&NTKDebugStarbearPickerLoadingIndicator_onceToken, &__block_literal_global_29);
  return NTKDebugStarbearPickerLoadingIndicator___flag;
}

uint64_t NTKDebugAlwaysGenerateComplicationSnapshots()
{
  if (NTKDebugAlwaysGenerateComplicationSnapshots_onceToken != -1)
    dispatch_once(&NTKDebugAlwaysGenerateComplicationSnapshots_onceToken, &__block_literal_global_32);
  return NTKDebugAlwaysGenerateComplicationSnapshots___flag;
}

uint64_t NTKDebugGenerateComplicationSnapshotsInProcess()
{
  if (NTKDebugGenerateComplicationSnapshotsInProcess_onceToken != -1)
    dispatch_once(&NTKDebugGenerateComplicationSnapshotsInProcess_onceToken, &__block_literal_global_35);
  return NTKDebugGenerateComplicationSnapshotsInProcess___flag;
}

uint64_t NTKDebugGenerateComplicationSnapshotsOverXPCWithDaemon()
{
  if (NTKDebugGenerateComplicationSnapshotsOverXPCWithDaemon_onceToken != -1)
    dispatch_once(&NTKDebugGenerateComplicationSnapshotsOverXPCWithDaemon_onceToken, &__block_literal_global_38);
  return NTKDebugGenerateComplicationSnapshotsOverXPCWithDaemon___flag;
}

uint64_t NTKDebugForceSlowDownOfSnapshotQueue()
{
  if (NTKDebugForceSlowDownOfSnapshotQueue_onceToken != -1)
    dispatch_once(&NTKDebugForceSlowDownOfSnapshotQueue_onceToken, &__block_literal_global_41);
  return NTKDebugForceSlowDownOfSnapshotQueue___flag;
}

uint64_t NTKDebugForceSleepWidgetInStarbearPickerFeaturedSection()
{
  if (NTKDebugForceSleepWidgetInStarbearPickerFeaturedSection_onceToken != -1)
    dispatch_once(&NTKDebugForceSleepWidgetInStarbearPickerFeaturedSection_onceToken, &__block_literal_global_44_0);
  return NTKDebugForceSleepWidgetInStarbearPickerFeaturedSection___flag;
}

uint64_t NTKDebugStarbearPickerViewControllerLayout()
{
  if (NTKDebugStarbearPickerViewControllerLayout_onceToken != -1)
    dispatch_once(&NTKDebugStarbearPickerViewControllerLayout_onceToken, &__block_literal_global_47);
  return NTKDebugStarbearPickerViewControllerLayout___flag;
}

uint64_t NTKDebugStarbearPickerHideInternalComplications()
{
  if (NTKDebugStarbearPickerHideInternalComplications_onceToken != -1)
    dispatch_once(&NTKDebugStarbearPickerHideInternalComplications_onceToken, &__block_literal_global_50);
  return NTKDebugStarbearPickerHideInternalComplications___flag;
}

uint64_t NTKDebugStarbearPickerEveryFeaturedComplication()
{
  if (NTKDebugStarbearPickerEveryFeaturedComplication_onceToken != -1)
    dispatch_once(&NTKDebugStarbearPickerEveryFeaturedComplication_onceToken, &__block_literal_global_53);
  return NTKDebugStarbearPickerEveryFeaturedComplication___flag;
}

uint64_t NTKDebugAnalogHandsFramesPerSecond()
{
  if (NTKDebugAnalogHandsFramesPerSecond_onceToken != -1)
    dispatch_once(&NTKDebugAnalogHandsFramesPerSecond_onceToken, &__block_literal_global_56);
  return NTKDebugAnalogHandsFramesPerSecond___fps;
}

uint64_t NTKDebugSpriteKitFramesPerSecond()
{
  if (NTKDebugSpriteKitFramesPerSecond_onceToken != -1)
    dispatch_once(&NTKDebugSpriteKitFramesPerSecond_onceToken, &__block_literal_global_59);
  return NTKDebugSpriteKitFramesPerSecond___fps;
}

uint64_t NTKDebugShowSpriteKitDebugHUD()
{
  if (NTKDebugShowSpriteKitDebugHUD_onceToken != -1)
    dispatch_once(&NTKDebugShowSpriteKitDebugHUD_onceToken, &__block_literal_global_62_0);
  return NTKDebugShowSpriteKitDebugHUD___flag;
}

uint64_t NTKDebugShowDebugClientSideAnimatedAnalogHands()
{
  if (NTKDebugShowDebugClientSideAnimatedAnalogHands_onceToken != -1)
    dispatch_once(&NTKDebugShowDebugClientSideAnimatedAnalogHands_onceToken, &__block_literal_global_65_0);
  return NTKDebugShowDebugClientSideAnimatedAnalogHands___flag;
}

double NTKDebugActivityWristRaiseTimeout()
{
  if (NTKDebugActivityWristRaiseTimeout_onceToken != -1)
    dispatch_once(&NTKDebugActivityWristRaiseTimeout_onceToken, &__block_literal_global_68);
  return *(double *)&NTKDebugActivityWristRaiseTimeout___timeout;
}

uint64_t NTKIsConnectivityPhoneComplicationEnabled()
{
  if (NTKIsConnectivityPhoneComplicationEnabled_onceToken != -1)
    dispatch_once(&NTKIsConnectivityPhoneComplicationEnabled_onceToken, &__block_literal_global_71_0);
  return NTKIsConnectivityPhoneComplicationEnabled_enabled;
}

void NTKDebugLoadLocaleOverride()
{
  void *v0;
  void *v1;
  id v2;

  v2 = (id)CFPreferencesCopyAppValue(CFSTR("LocaleOverride"), CFSTR("com.apple.NanoTimeKit.face"));
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "__loadSwizzledCurrentLocaleIfNeeded");
    v0 = (void *)MEMORY[0x1E0C99DC8];
    objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", v2);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "__setCurrentLocal:", v1);

  }
}

uint64_t NTKDebugDaemonRunningSnapshotTestingTool()
{
  return 0;
}

uint64_t NTKDebugUpNextDisableCoordinatorCaching()
{
  if (NTKDebugUpNextDisableCoordinatorCaching_onceToken != -1)
    dispatch_once(&NTKDebugUpNextDisableCoordinatorCaching_onceToken, &__block_literal_global_83);
  return NTKDebugUpNextDisableCoordinatorCaching_disableCache;
}

uint64_t NTKDebugUpNextEnableDailyRoutineDataSource()
{
  if (NTKDebugUpNextEnableDailyRoutineDataSource_onceToken != -1)
    dispatch_once(&NTKDebugUpNextEnableDailyRoutineDataSource_onceToken, &__block_literal_global_86);
  return NTKDebugUpNextEnableDailyRoutineDataSource_disableCache;
}

uint64_t NTKDebugUpNextEnableLocationDataSource()
{
  if (NTKDebugUpNextEnableLocationDataSource_onceToken != -1)
    dispatch_once(&NTKDebugUpNextEnableLocationDataSource_onceToken, &__block_literal_global_89_0);
  return NTKDebugUpNextEnableLocationDataSource_enableLocationDebug;
}

uint64_t NTKDebugUpNextEnableModelDebugDisplay()
{
  if (NTKDebugUpNextEnableModelDebugDisplay_onceToken != -1)
    dispatch_once(&NTKDebugUpNextEnableModelDebugDisplay_onceToken, &__block_literal_global_92);
  return NTKDebugUpNextEnableModelDebugDisplay_enableModelDebug;
}

void NTKPlayStartupSound()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v2[2];
  _QWORD v3[3];

  v3[2] = *MEMORY[0x1E0C80C00];
  if (NTKPlayStartupSound_onceToken != -1)
    dispatch_once(&NTKPlayStartupSound_onceToken, &__block_literal_global_95);
  if (NTKPlayStartupSound_playStartupSound)
  {
    v0 = *MEMORY[0x1E0C9AE50];
    v1 = *MEMORY[0x1E0C92518];
    v2[0] = *MEMORY[0x1E0C92528];
    v2[1] = v1;
    v3[0] = v0;
    v3[1] = &unk_1E6C9E5D8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
    AudioServicesPlaySystemSoundWithOptions();
  }
}

id NTKDebugSimulatedTombstoneExtensionBundleIdentifier()
{
  if (NTKDebugSimulatedTombstoneExtensionBundleIdentifier_onceToken != -1)
    dispatch_once(&NTKDebugSimulatedTombstoneExtensionBundleIdentifier_onceToken, &__block_literal_global_102);
  return (id)NTKDebugSimulatedTombstoneExtensionBundleIdentifier_identifier;
}

void sub_1B7376F80(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1B737728C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1B7377660(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t _handleDarwinNotification(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "handleDarwinNotification:");
}

void sub_1B7379478(_Unwind_Exception *exception_object, int a2)
{
  id v2;
  NSObject *v3;

  if (a2 == 1)
  {
    v2 = objc_begin_catch(exception_object);
    _NTKKaleidoscopeLoggingObjectForDomain(0, (uint64_t)"NTKKaleidoscopeLoggingDomainDefault");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      +[NTKKaleidoscopePathfinder pathfinderFromFile:].cold.3();

    objc_end_catch();
    JUMPOUT(0x1B7379434);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B737B834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B737BC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B737CB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__n128 _LayoutConstants_14@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_21);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_21);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_21);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_21, obj);
    _LayoutConstants___previousCLKDeviceVersion_21 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_18(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_21;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_21);
  v10 = *(_OWORD *)&qword_1EF173488;
  *(_OWORD *)(a2 + 128) = xmmword_1EF173478;
  *(_OWORD *)(a2 + 144) = v10;
  *(_QWORD *)(a2 + 160) = qword_1EF173498;
  v11 = *(_OWORD *)&qword_1EF173448;
  *(_OWORD *)(a2 + 64) = xmmword_1EF173438;
  *(_OWORD *)(a2 + 80) = v11;
  v12 = *(_OWORD *)&qword_1EF173468;
  *(_OWORD *)(a2 + 96) = xmmword_1EF173458;
  *(_OWORD *)(a2 + 112) = v12;
  v13 = *(_OWORD *)&qword_1EF173408;
  *(_OWORD *)a2 = _LayoutConstants_constants_1;
  *(_OWORD *)(a2 + 16) = v13;
  v14 = *(_OWORD *)&qword_1EF173428;
  *(_OWORD *)(a2 + 32) = xmmword_1EF173418;
  *(_OWORD *)(a2 + 48) = v14;

  return result;
}

uint64_t _NTKBundleComplicationMigrationStatusForValue(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  if (!v1)
    goto LABEL_9;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (objc_msgSend(v1, "BOOLValue"))
        v3 = 2;
      else
        v3 = 0;
      goto LABEL_14;
    }
LABEL_9:
    v3 = 0;
    goto LABEL_14;
  }
  objc_msgSend(v1, "lowercaseString");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isEqualToString:", CFSTR("partial")) & 1) != 0)
  {
    v3 = 1;
  }
  else if (objc_msgSend(v2, "isEqualToString:", CFSTR("full")))
  {
    v3 = 2;
  }
  else
  {
    v3 = 0;
  }

LABEL_14:
  return v3;
}

uint64_t NTKBundleComplicationMigrationStatusForInfoDictionary(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "objectForKey:", NTKBundleComplicationMigrationStatusKey);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = _NTKBundleComplicationMigrationStatusForValue(v1);

  return v2;
}

double _LayoutConstants_15@<D0>(uint64_t a1@<X8>)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  __int128 v16;
  double result;
  __int128 v18;

  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_22);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_22);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "device");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_22);
  if (v5 != v6)
  {

LABEL_5:
    objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "device");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak(&_LayoutConstants___cachedDevice_22, v12);

    v13 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_22);
    _LayoutConstants___previousCLKDeviceVersion_22 = objc_msgSend(v13, "version");

    objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "device");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    ___LayoutConstants_block_invoke_19((uint64_t)v15, v15);

    goto LABEL_6;
  }
  objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "device");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "version");
  v10 = _LayoutConstants___previousCLKDeviceVersion_22;

  if (v9 != v10)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_22);
  v16 = xmmword_1EF1734E8;
  *(_OWORD *)(a1 + 32) = xmmword_1EF1734D8;
  *(_OWORD *)(a1 + 48) = v16;
  *(_OWORD *)(a1 + 64) = xmmword_1EF1734F8;
  *(_QWORD *)(a1 + 80) = qword_1EF173508;
  result = *(double *)&_LayoutConstants_layoutConstants;
  v18 = *(_OWORD *)&qword_1EF1734C8;
  *(_OWORD *)a1 = _LayoutConstants_layoutConstants;
  *(_OWORD *)(a1 + 16) = v18;
  return result;
}

void sub_1B7384E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1B738712C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7387278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL NTKProtoMigrationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_22:
        v19 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_24:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = 16;
    goto LABEL_22;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1B738B0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B738B488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

Class __getNSSComplicationDataSourceClass_block_invoke_0(uint64_t a1)
{
  Class result;
  void *v3;

  if (!NewsServicesLibraryCore_frameworkLibrary_0)
  {
    NewsServicesLibraryCore_frameworkLibrary_0 = _sl_dlopen();
    if (!NewsServicesLibraryCore_frameworkLibrary_0)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("NSSComplicationDataSource");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)__getNSSComplicationDataSourceClass_block_invoke_cold_1();
    free(v3);
  }
  getNSSComplicationDataSourceClass_softClass_0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

id ReminderFormattedEntryDate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = ReminderFormattedEntryDate_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&ReminderFormattedEntryDate_onceToken, &__block_literal_global_51);
  objc_msgSend((id)ReminderFormattedEntryDate___formatter, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1B738D658(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1B738D7A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B738D820(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B738DB00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _NTKImageWriteToFile(CGImage *a1, NSString *a2)
{
  const __CFURL *v3;
  __CFString *v4;
  CGImageDestination *v5;
  _BOOL8 v6;

  v3 = (const __CFURL *)objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", a2);
  objc_msgSend((id)*MEMORY[0x1E0CEC580], "identifier");
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v5 = CGImageDestinationCreateWithURL(v3, v4, 1uLL, 0);

  if (!v5)
    return 0;
  CGImageDestinationAddImage(v5, a1, 0);
  v6 = CGImageDestinationFinalize(v5);
  CFRelease(v5);
  return v6;
}

void sub_1B738F63C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t _NTKRawWriteToFile(const void **a1, int a2, int a3, void *a4)
{
  NSString *v7;
  CGDataProvider *v8;
  CGColorSpace *v9;
  CGImage *v10;

  v7 = a4;
  v8 = CGDataProviderCreateWithData(0, *a1, 4 * a2 * a3, 0);
  v9 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
  v10 = CGImageCreate(a2, a3, 8uLL, 0x20uLL, 4 * a2, v9, 0, v8, 0, 0, kCGRenderingIntentDefault);
  _NTKImageWriteToFile(v10, v7);
  CGImageRelease(v10);
  CGDataProviderRelease(v8);
  CGColorSpaceRelease(v9);

  return 1;
}

void sub_1B738F720(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NTKPhotoAnalysis *NTKAnalyzePhoto(void *a1, void *a2, char a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9)
{
  id v17;
  id v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  CGColorSpace *v22;
  CGImage *v23;
  CGImage *v24;
  float32x4_t v25;
  uint64_t v26;
  float v27;
  float v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  int v32;
  unsigned int v33;
  float v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  int v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  unsigned int y;
  unsigned int v49;
  unsigned int x;
  unsigned int v51;
  char *v52;
  float v53;
  float v54;
  uint64_t v55;
  float32x2_t v56;
  unsigned int v57;
  unsigned int v58;
  CGColorSpace *v59;
  uint64_t v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  float v78;
  float v79;
  uint64_t i;
  CGFloat v81;
  CGFloat v82;
  CGFloat v83;
  CGFloat v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  char *v90;
  char *v91;
  unsigned int v92;
  float v93;
  NTKPhotoAnalysis *v94;
  NTKPhotoAnalysis *v95;
  int v97;
  unsigned int v98;
  unsigned int v99;
  NTKPhotoAnalysis *v100;
  char v101;
  CGImage *image;
  CGColorSpace *v103;
  void *v104;
  id v105;
  CGContext *c;
  void *v107;
  char *v108;
  id obj;
  uint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  uint64_t v114;
  float v115;
  float v116;
  size_t width;
  unsigned int v118;
  float v119;
  unsigned int v120;
  id v121;
  unsigned int v122;
  uint64_t v123;
  _OWORD v124[2];
  unint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  unint64_t v136;
  _BYTE v137[128];
  _BYTE v138[128];
  int v139;
  int32x2_t v140;
  uint64_t v141;
  int v142;
  unsigned int v143;
  int v144;
  _OWORD v145[32];
  _OWORD v146[32];
  uint64_t v147;
  CGRect v148;
  CGRect v149;
  CGRect v150;
  CGRect v151;
  CGRect v152;
  CGRect v153;
  CGRect v154;
  CGRect v155;
  CGRect v156;
  CGRect v157;

  v147 = *MEMORY[0x1E0C80C00];
  v17 = a1;
  v18 = a2;
  +[NTKPhotoAnalysis defaultAnalysis](NTKPhotoAnalysis, "defaultAnalysis");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v17)
    goto LABEL_57;
  v148.origin.x = a4;
  v148.origin.y = a5;
  v148.size.width = a6;
  v148.size.height = a7;
  if (CGRectGetWidth(v148) <= 1.0)
    goto LABEL_57;
  v149.origin.x = a4;
  v149.origin.y = a5;
  v149.size.width = a6;
  v149.size.height = a7;
  if (CGRectGetHeight(v149) > 1.0)
  {
    v136 = 0;
    v134 = 0u;
    v135 = 0u;
    if (v19)
      objc_msgSend(v19, "structure");
    width = a8;
    v20 = (4 * width);
    v21 = (unint64_t)malloc_type_malloc(v20 * a9, 0xC6CFB348uLL);
    bzero((void *)v21, v20 * a9);
    v22 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
    c = CGBitmapContextCreate((void *)v21, width, a9, 8uLL, v20, v22, 1u);
    v107 = v18;
    v108 = (char *)v21;
    v103 = v22;
    v104 = v19;
    v101 = a3;
    v105 = v17;
    v23 = (CGImage *)objc_msgSend(objc_retainAutorelease(v17), "CGImage");
    v150.origin.x = a4;
    v150.origin.y = a5;
    v150.size.width = a6;
    v150.size.height = a7;
    v24 = CGImageCreateWithImageInRect(v23, v150);
    v151.size.width = (double)width;
    v151.size.height = (double)a9;
    v151.origin.x = 0.0;
    v151.origin.y = 0.0;
    CGContextDrawImage(c, v151, v24);
    image = v24;
    memset(v146, 0, sizeof(v146));
    memset(v145, 0, sizeof(v145));
    v140 = vsub_s32((int32x2_t)0x100000000, vdup_n_s32(width));
    v25 = (float32x4_t)0x1FFFFFFFFuLL;
    v141 = 0x1FFFFFFFFLL;
    v143 = a8;
    v144 = width + 1;
    v26 = a9 - 1;
    v27 = 0.0;
    v28 = 0.0;
    v139 = ~(_DWORD)width;
    v142 = width - 1;
    if (v26 >= 2)
    {
      v29 = v21 + 4;
      v30 = 1;
      LODWORD(v21) = a8;
      do
      {
        if ((width - 1) >= 2)
        {
          v31 = (unsigned int *)(v29 + 4 * v21);
          v32 = width - 2;
          do
          {
            v33 = *v31++;
            v20 = v20 & 0xFFFFFFFF00000000 | v33;
            v25.f32[0] = _NTKHSLFromRGBA8(v20, v25);
            v27 = v27 + v34;
            v28 = v28 + v35;
            v36 = (int)(float)((float)(v25.f32[0] * 128.0) + 0.5) & 0x7F;
            v25.f32[0] = *((float *)v146 + v36) + v35;
            *((_DWORD *)v146 + v36) = v25.i32[0];
            --v32;
          }
          while (v32);
        }
        ++v30;
        v21 = (v21 + width);
      }
      while (v30 != v26);
    }
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v18 = v107;
    obj = v107;
    v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v130, v138, 16);
    v38 = v108;
    if (v37)
    {
      v39 = 0;
      v110 = *(_QWORD *)v131;
      v112 = a9 + -1.0;
      v113 = a8 + -1.0;
      v40 = 0.0;
      v41 = 0.0;
      v42 = 0.0;
      do
      {
        v43 = 0;
        v111 = v37;
        do
        {
          if (*(_QWORD *)v131 != v110)
            objc_enumerationMutation(obj);
          objc_msgSend(*(id *)(*((_QWORD *)&v130 + 1) + 8 * v43), "rectValue");
          v156.origin.x = v44;
          v156.origin.y = v45;
          v156.size.width = v46;
          v156.size.height = v47;
          v152.origin.x = 1.0;
          v152.origin.y = 1.0;
          v152.size.height = a9 + -1.0;
          v152.size.width = a8 + -1.0;
          v153 = CGRectIntersection(v152, v156);
          v114 = v43;
          y = v153.origin.y;
          v49 = v153.size.height - 1;
          v120 = v49 + v153.origin.y;
          if (!__CFADD__(v49, v153.origin.y))
          {
            x = v153.origin.x;
            v51 = v153.size.width + v153.origin.x - 1;
            v118 = v153.origin.x;
            do
            {
              v122 = y;
              if (v51 >= x)
              {
                v52 = &v108[4 * y * width + 4];
                do
                {
                  v21 = v21 & 0xFFFFFFFF00000000 | *(unsigned int *)v52;
                  *(float *)&v153.origin.x = _NTKHSLFromRGBA8(v21, (float32x4_t)v153.origin);
                  v55 = 0;
                  v56 = 0;
                  do
                  {
                    v57 = *(_DWORD *)&v52[4 * *(&v139 + v55)];
                    v56 = vmla_n_f32(v56, _ZZL26_NTKInterestingnessComputeRK13_NTKHeapArrayIDv4_fEiiE6_sobel[v55++], (float)((float)((float)BYTE1(v57) * 0.0028047)+ (float)((float)v57 * 0.00083373))+ (float)((float)BYTE2(v57) * 0.00028314));
                  }
                  while (v55 != 8);
                  v42 = v42 + sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v56, v56).i32[1]), v56.f32[0], v56.f32[0]));
                  v41 = v41 + v54;
                  v40 = v40 + v53;
                  ++v39;
                  v58 = (int)(float)((float)(*(float *)&v153.origin.x * 128.0) + 0.5) & 0x7F;
                  *(float *)&v153.origin.x = v53 + *((float *)v145 + v58);
                  *((_DWORD *)v145 + v58) = LODWORD(v153.origin.x);
                  ++x;
                  v52 += 4;
                }
                while (x <= v51);
              }
              y = v122 + 1;
              x = v118;
            }
            while (v122 + 1 <= v120);
          }
          v43 = v114 + 1;
        }
        while (v114 + 1 != v111);
        v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v130, v138, 16, v153.origin.x);
      }
      while (v37);

      v19 = v104;
      v17 = v105;
      v18 = v107;
      v38 = v108;
      v59 = v103;
      if (v39 >= 1)
      {
        v60 = 0;
        v119 = v41 / (float)v39;
        v61 = (float)((width - 2) * (a9 - 2));
        v62 = 0.0;
        v63 = v28 / v61;
        do
        {
          if (*(float *)((char *)v145 + v60) > 0.01)
            v62 = v62 + 1.0;
          v60 += 4;
        }
        while (v60 != 512);
        v64 = 0;
        v116 = (float)v39;
        v115 = v42 / (float)v39;
        v65 = 0.0;
        v66 = 0.0;
        v67 = v27 / v61;
        do
        {
          if (*((float *)v146 + v64) > v66)
          {
            v66 = *((float *)v146 + v64);
            v65 = (float)(int)v64 * 0.0078125;
          }
          ++v64;
        }
        while (v64 != 128);
        v68 = v40 / v116;
        if ((float)(v119 * 0.75) >= (float)((float)(v68 * 0.75) + 0.25))
          v69 = (float)(v68 * 0.75) + 0.25;
        else
          v69 = v119 * 0.75;
        v70 = v67 * 0.5;
        DWORD1(v134) = _NTKHSBFromHSL(v65, v63 * 0.75, v67 * 0.5);
        *((_QWORD *)&v134 + 1) = __PAIR64__(v72, v71);
        LODWORD(v135) = _NTKHSBFromHSL(v65, v63 * 0.9, v67 * 0.4);
        *(_QWORD *)((char *)&v135 + 4) = __PAIR64__(v74, v73);
        HIDWORD(v135) = _NTKHSBFromHSL(v65, v68, v69);
        v136 = __PAIR64__(v76, v75);
        v126 = 0u;
        v127 = 0u;
        v128 = 0u;
        v129 = 0u;
        v121 = obj;
        v77 = objc_msgSend(v121, "countByEnumeratingWithState:objects:count:", &v126, v137, 16);
        if (v77)
        {
          v123 = *(_QWORD *)v127;
          v78 = 0.0;
          v79 = 0.0;
          do
          {
            for (i = 0; i != v77; ++i)
            {
              if (*(_QWORD *)v127 != v123)
                objc_enumerationMutation(v121);
              objc_msgSend(*(id *)(*((_QWORD *)&v126 + 1) + 8 * i), "rectValue");
              v157.origin.x = v81;
              v157.origin.y = v82;
              v157.size.width = v83;
              v157.size.height = v84;
              v154.origin.x = 1.0;
              v154.origin.y = 1.0;
              v154.size.height = v112;
              v154.size.width = v113;
              v155 = CGRectIntersection(v154, v157);
              v85 = v155.origin.y;
              v86 = v155.size.height - 1;
              v87 = v86 + v155.origin.y;
              if (!__CFADD__(v86, v155.origin.y))
              {
                v88 = v155.origin.x;
                v89 = v155.size.width + v155.origin.x - 1;
                v90 = &v108[4 * v155.origin.x];
                do
                {
                  if (v89 >= v88)
                  {
                    v91 = &v90[4 * v85 * width];
                    v92 = v88;
                    do
                    {
                      v21 = v21 & 0xFFFFFFFF00000000 | *(unsigned int *)v91;
                      _NTKHSLFromRGBA8(v21, (float32x4_t)v155.origin);
                      *(float *)&v155.origin.x = vabds_f32(v93, v70);
                      if (*(float *)&v155.origin.x < 0.1)
                      {
                        *(float *)&v155.origin.x = (float)((float)(0.1 - *(float *)&v155.origin.x) / 0.01)
                                                 * sqrtf((float)(0.1 - *(float *)&v155.origin.x) / 0.01);
                        v78 = v78 + *(float *)&v155.origin.x;
                      }
                      if (v93 > 0.85)
                      {
                        *(float *)&v155.origin.x = (float)((float)(v93 + -0.85) / 0.01)
                                                 * sqrtf((float)(v93 + -0.85) / 0.01);
                        v79 = v79 + *(float *)&v155.origin.x;
                      }
                      ++v92;
                      v91 += 4;
                    }
                    while (v92 <= v89);
                  }
                  ++v85;
                }
                while (v85 <= v87);
              }
            }
            v77 = objc_msgSend(v121, "countByEnumeratingWithState:objects:count:", &v126, v137, 16, v155.origin.x);
          }
          while (v77);
        }
        else
        {
          v78 = 0.0;
          v79 = 0.0;
        }

        v19 = v104;
        v17 = v105;
        v18 = v107;
        v38 = v108;
        v59 = v103;
        if (v115 <= 0.4)
        {
          v97 = (float)(v79 / v116) > 0.015;
          if (v119 > 0.8)
          {
            v97 = (float)(v62 / v116) > 0.11;
            if ((float)(v78 / v116) > 0.015)
              v97 = 1;
          }
        }
        else
        {
          v97 = 1;
        }
        LOBYTE(v134) = v97;
        BYTE1(v134) = (v119 > 0.8) & ~(_BYTE)v97;
        if ((v101 & 1) != 0 && ((v119 > 0.8) & ~v97) != 0)
        {
          BYTE1(v134) = 0;
          *((_QWORD *)&v134 + 1) = 0x3F80000000000000;
          DWORD1(v134) = 0;
          *(float *)&v98 = *((float *)&v136 + 1) * 0.9;
          *(float *)&v99 = *(float *)&v136 + (1.0 - *(float *)&v136) * 0.15;
          v136 = __PAIR64__(v98, v99);
        }
      }
    }
    else
    {

      v19 = v104;
      v17 = v105;
      v59 = v103;
    }
    free(v38);
    CGImageRelease(image);
    CGContextRelease(c);
    CGColorSpaceRelease(v59);
    v100 = [NTKPhotoAnalysis alloc];
    v124[0] = v134;
    v124[1] = v135;
    v125 = v136;
    v94 = -[NTKPhotoAnalysis initWithStructure:](v100, "initWithStructure:", v124);
  }
  else
  {
LABEL_57:
    v94 = v19;
  }
  v95 = v94;

  return v95;
}

void sub_1B739014C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{

  _Unwind_Resume(a1);
}

float _NTKHSLFromRGBA8(int a1, float32x4_t a2)
{
  float32x4_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float result;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  a2.f32[0] = (float)a1;
  a2.f32[1] = (float)BYTE1(a1);
  a2.f32[2] = (float)BYTE2(a1);
  v2 = vdivq_f32(a2, (float32x4_t)vdupq_n_s32(0x437F0000u));
  if (v2.f32[0] <= v2.f32[1])
    v3 = v2.f32[1];
  else
    v3 = v2.f32[0];
  if (v2.f32[0] >= v2.f32[1])
    v4 = v2.f32[1];
  else
    v4 = v2.f32[0];
  if (v3 <= v2.f32[2])
    v5 = v2.f32[2];
  else
    v5 = v3;
  if (v4 >= v2.f32[2])
    v6 = v2.f32[2];
  else
    v6 = v4;
  result = 0.0;
  if (v5 > v6)
  {
    v8 = v5 - v6;
    v9 = (float)((float)(v2.f32[0] - v2.f32[1]) / (float)(v5 - v6)) + 4.0;
    if (v2.f32[1] == v5)
      v9 = (float)((float)(v2.f32[2] - v2.f32[0]) / v8) + 2.0;
    v10 = (float)(v2.f32[1] - v2.f32[2]) / v8;
    v11 = 0.0;
    if (v2.f32[1] < v2.f32[2])
      v11 = 6.0;
    v12 = v11 + v10;
    if (v2.f32[0] != v5)
      v12 = v9;
    return v12 / 6.0;
  }
  return result;
}

float _NTKHSBFromHSL(float a1, float a2, float a3)
{
  float v3;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  v3 = a3;
  v5 = a3;
  v6 = a3;
  if (a2 >= 0.00001)
  {
    v7 = (float)(a3 + a2) - (float)(a3 * a2);
    v8 = a3 * (float)(a2 + 1.0);
    if (a3 < 0.5)
      v9 = v8;
    else
      v9 = v7;
    v10 = -(float)(v9 - (float)(a3 * 2.0));
    v6 = _NTKHue2RGB(v10, v9, a1 + 0.33333);
    v3 = _NTKHue2RGB(-(float)(v9 - (float)(v3 * 2.0)), v9, a1);
    v5 = _NTKHue2RGB(v10, v9, a1 + -0.33333);
  }
  v11 = 0.0;
  if (v3 >= v5)
  {
    v12 = v5;
  }
  else
  {
    v11 = -1.0;
    v12 = v3;
  }
  if (v3 >= v5)
    v5 = v3;
  if (v6 >= v5)
  {
    v13 = v5;
  }
  else
  {
    v11 = -0.33333 - v11;
    v13 = v6;
  }
  if (v6 >= v5)
    v14 = v6;
  else
    v14 = v5;
  if (v13 >= v12)
    v15 = v12;
  else
    v15 = v13;
  return fabsf(v11 + (float)((float)(v13 - v12) / (float)((float)((float)(v14 - v15) * 6.0) + 0.00001)));
}

void NTKAnalyzeInterestingness(void *a1, float *a2, int a3, int a4, int a5)
{
  id v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _OWORD *v16;
  int32x2_t v17;
  float v18;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  float32x2_t v43;
  float32x2_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x4_t v47;
  float v48;
  float v49;
  int v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  int v55;
  uint64_t v57;
  int v58;
  float32x4_t v59;
  float *v60;
  int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  int32x2_t v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v8 = a1;
  v60 = a2;
  bzero(a2, 4 * a4 * a3);
  v9 = objc_msgSend(v8, "width");
  v10 = objc_msgSend(v8, "height");
  v11 = v9 / a3;
  if (v9 / a3 <= 1)
    v11 = 1;
  if (v11 >= 16)
    v12 = 16;
  else
    v12 = v11;
  LODWORD(v13) = v10 / a4;
  if (v10 / a4 <= 1)
    LODWORD(v13) = 1;
  if ((int)v13 >= 16)
    v13 = 16;
  else
    v13 = v13;
  v65 = v13;
  v53 = v8;
  v14 = (v65 * a4);
  v64 = v12 * a3;
  if (objc_msgSend(v53, "width") != (_DWORD)v12 * a3
    || (v15 = v53, objc_msgSend(v53, "height") != (_DWORD)v14))
  {
    objc_msgSend(v53, "scaleToWidth:height:", v64, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(v15, "contents");
  v52 = v15;
  v16 = malloc_type_malloc((16 * v12 * v65), 0x1000040451B5BE8uLL);
  if (a4 - a5 > a5)
  {
    v61 = a3 - a5;
    v17 = vsub_s32((int32x2_t)0x100000000, vdup_n_s32(v12));
    v18 = (float)((v65 - 2) * (v12 - 2));
    v54 = a3;
    v58 = a5 * v12 + a5 * v12 * a3 * v65;
    v55 = a3 * v65 * v12;
    __asm { FMOV            V0.4S, #1.0 }
    v66 = HIDWORD(_Q0);
    v57 = a5;
    v59 = (float32x4_t)vdupq_n_s32(0x3C23D70Au);
    do
    {
      if (v61 > a5)
      {
        v24 = a5;
        v25 = v58;
        do
        {
          v62 = v24;
          v26 = 0;
          v27 = 0;
          v63 = v25;
          do
          {
            v28 = v27;
            v29 = v65;
            v30 = v25;
            do
            {
              _CLKUIRGB2LAB();
              *(_QWORD *)&v32 = v31;
              *((_QWORD *)&v32 + 1) = __PAIR64__(v66, v33);
              v27 = v28 + 1;
              v16[v28] = v32;
              ++v30;
              ++v28;
              --v29;
            }
            while (v29);
            ++v26;
            v25 += v64;
          }
          while (v26 != (_DWORD)v12);
          v67 = ~(_DWORD)v12;
          v68 = v17;
          v69 = 0x1FFFFFFFFLL;
          v34 = 0.0;
          v35 = 0.0;
          v70 = v12 - 1;
          v71 = v12;
          v36 = 0.0;
          v37 = 0.0;
          v72 = v12 + 1;
          if (v65 >= 3)
          {
            v38 = 1;
            v39 = v12;
            do
            {
              if (v12 >= 3)
              {
                v40 = 1;
                v41 = v39;
                do
                {
                  v42 = 0;
                  ++v41;
                  v43 = 0;
                  v44 = 0;
                  v45 = 0;
                  do
                  {
                    v46 = _ZZL26_NTKInterestingnessComputeRK13_NTKHeapArrayIDv4_fEiiE6_sobel[v42];
                    v47 = vmulq_f32((float32x4_t)v16[v41 + *(&v67 + v42)], v59);
                    v45 = vmla_n_f32(v45, v46, v47.f32[0]);
                    v44 = vmla_lane_f32(v44, v46, *(float32x2_t *)v47.f32, 1);
                    v43 = vmla_laneq_f32(v43, v46, v47, 2);
                    ++v42;
                  }
                  while (v42 != 8);
                  v37 = v37 + sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v45, v45).i32[1]), v45.f32[0], v45.f32[0]));
                  v36 = v36 + sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v44, v44).i32[1]), v44.f32[0], v44.f32[0]));
                  v35 = v35 + sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v43, v43).i32[1]), v43.f32[0], v43.f32[0]));
                  v34 = v34 + (float)(0.01 * COERCE_FLOAT(v16[v41]));
                  ++v40;
                }
                while (v40 != (_DWORD)v12 - 1);
              }
              v39 += v12;
            }
            while (v38++ != (_DWORD)v65 - 2);
          }
          v48 = v34 / v18;
          v49 = 1.0;
          if (v48 <= 0.9)
          {
            v50 = v63;
            v51 = v62;
            if (v48 < 0.25)
              v49 = v48 * 4.0;
          }
          else
          {
            v49 = (float)(1.0 - v48) * 10.0;
            v50 = v63;
            v51 = v62;
          }
          v60[v51 + v57 * v54] = (float)((float)((float)(v49 * 0.2) + (float)(sqrtf(v37 / v18) * 0.2))
                                       + (float)(sqrtf(v36 / v18) * 0.3))
                               + (float)(sqrtf(v35 / v18) * 0.3);
          v24 = v51 + 1;
          v25 = v50 + v12;
        }
        while (v61 != (_DWORD)v24);
      }
      v58 += v55;
      ++v57;
    }
    while (a4 - a5 != (_DWORD)v57);
  }
  free(v16);

}

void sub_1B7390894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, id a11, uint64_t a12)
{

  _Unwind_Resume(a1);
}

id NTKGeneratePathFromInterestingness(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  size_t v8;
  char *v9;
  BOOL *v10;
  int v11;
  int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  float v24;
  float *v25;
  float *v26;
  uint64_t v27;
  float v28;
  int v29;
  int v30;
  float v31;
  unint64_t v32;
  unint64_t i;
  float v34;
  float v35;
  int v36;
  int v37;
  uint64_t v38;
  float *v39;
  float *v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  float *v48;
  float v49;
  float *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  int v60;
  int32x2_t v61;
  BOOL v62;
  __int32 v65;
  char v66;
  char v67;
  int v68;
  float v69;
  char v70;
  int v71;
  int32x2_t v72;
  char v73;
  __int32 v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  __int32 v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v90;
  uint64_t v91;
  unsigned __int16 *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  BOOL *v98;
  int v99;
  int v100;
  int v101;
  int v102;
  float v103;
  uint64_t j;
  uint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v114;
  uint64_t v115;
  unsigned __int16 *v116;
  char v117;
  unsigned __int8 *v118;
  uint64_t v119;
  unsigned __int8 *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  float v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  float v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  BOOL v134;
  BOOL v135;
  int v137;
  unsigned __int16 *v138;
  uint64_t v139;
  unsigned __int8 *v140;
  BOOL *v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  char v147;
  int v148;
  int v149;
  int v153;
  char v154;
  char v155;
  float v156;
  int v157;
  char v158;
  char v159;
  int v160;
  int v161;
  int v162;
  int v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  unsigned __int8 *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned __int8 *v174;
  uint64_t v175;
  void *v177;
  int v178;
  int v179;
  id v180;
  uint64_t v181;
  int32x2_t v182;
  BOOL v183;
  BOOL v184;
  int32x2_t v186;
  int v187;
  int32x4_t v188;
  int32x2_t v189;
  int32x4_t v190;
  int16x4_t v191;
  int v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  unsigned __int8 v202;
  int v203;
  _WORD *v204;
  uint64_t v205;
  int v206;
  size_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  char *v213;
  uint64_t v214;
  int v215;
  int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  unsigned int v222;
  char v223;
  int v224;
  int v225;
  int v226;
  unsigned int v227;
  size_t v228;
  signed int v229;
  unsigned int v230;
  int v231;
  uint64_t v232;
  int64_t v233;
  uint64_t v234;
  unsigned __int8 *v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  int v241;
  float32x2_t *v242;
  char v243;
  int32x2_t v244;
  int32x2_t v245;
  int32x2_t v246;
  int32x2_t v247;
  float32x2_t *v248;
  unsigned int v249;
  uint64_t v250;
  __int32 v251;
  int v252;
  int v253;
  uint64_t k;
  int v255;
  unsigned int v256;
  float32x2_t *v257;
  size_t v258;
  uint64_t v259;
  int32x2_t v260;
  float32x2_t *v261;
  _DWORD *v262;
  int32x2_t v263;
  int32x2_t v264;
  BOOL v265;
  BOOL v266;
  __int32 v268;
  uint64_t v269;
  float32x2_t *v270;
  __int8 v271;
  uint64_t v272;
  int32x2_t v273;
  signed __int32 v274;
  float32x2_t *v275;
  int32x2_t v276;
  int32x2_t v277;
  uint64_t v278;
  __int32 v279;
  uint64_t v280;
  size_t v281;
  size_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  int v286;
  uint64_t v287;
  unsigned int v288;
  uint64_t v289;
  int v290;
  int v291;
  uint64_t v292;
  int v293;
  float v295;
  float v296;
  uint64_t *v297;
  uint64_t m;
  uint64_t v299;
  uint64_t v300;
  float v302;
  __int32 v303;
  _WORD *v304;
  unsigned __int8 *v305;
  __int32 v306;
  uint64_t v307;
  int v308;
  size_t v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  int v313;
  float v314;
  signed int v315;
  float32x2_t *v316;
  _BYTE *v317;
  uint64_t v318;
  float32x2_t v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  int32x2_t v324;
  int v325;
  int32x2_t v326;
  int32x2_t v327;
  uint64_t v328;
  int32x2_t v329;
  uint64_t v330;
  float32x2_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  int v335;
  int v336;
  int v337;
  int v338;
  int v339;
  float32x2_t v340;
  float32x2_t v341;
  float32x2_t v342;
  float32x2_t v343;
  float32x2_t v344;
  float32x2_t v345;
  float32x2_t v346;
  float32x2_t v347;
  float32x2_t v348;
  float32x2_t v349;
  float32x2_t v350;
  int v351;
  int v352;
  float v353;
  float v354;
  float v355;
  int v356;
  uint64_t v357;
  id v358;
  char *v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  double v363;
  void *v364;
  uint64_t v366;
  int v367;
  int v368;
  int v369;
  unint64_t v370;
  unsigned __int8 *v371;
  uint64_t v372;
  int v373;
  float32x2_t *v374;
  unint64_t v375;
  int v376;
  uint64_t v377;
  size_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  float32x2_t *v383;
  unsigned __int16 *ptr;
  BOOL *v385;
  unsigned __int8 *v386;
  int v387;
  int32x2_t v388;
  int v389;
  uint64_t v390;
  char *v391;
  uint64_t v392;
  uint64_t v393;
  __int128 v394;
  __int128 v395;
  unsigned int v396;
  int v397;
  __int32 v398;
  int v399;
  unsigned __int8 *__src;
  float32x2_t *__srca;
  char *v402;
  int32x2_t v403;
  uint64_t v404;
  int v405;
  int v406;
  int v407;
  _WORD *v408;
  void *v409;
  unsigned int v410;
  int v411;
  void *v412[4];
  int v413;
  void *v414[2048];
  int v415;
  unint64_t v416;
  uint64_t v417;
  int v418;
  uint64_t v419;
  int v420;
  int v421;
  uint64_t v422;

  v3 = MEMORY[0x1E0C80A78](a1, a2, a3);
  v7 = v6;
  v422 = *MEMORY[0x1E0C80C00];
  v8 = v5 * (uint64_t)v4;
  v399 = v4;
  v369 = v5;
  v379 = v3;
  v390 = v8;
  if ((int)v8 < 1)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = (char *)malloc_type_malloc(v8, 0x100004077774924uLL);
    v10 = (BOOL *)malloc_type_malloc(v8, 0x100004077774924uLL);
    v4 = v399;
    v5 = v369;
    v3 = v379;
  }
  v11 = v5 - v7;
  if (v5 - v7 > v7)
  {
    v17 = v4 - v7;
    v18 = v7;
    v19 = (float *)(v3 + 4 * (v7 + v7 * (uint64_t)v4));
    v14 = 0.0;
    v15 = 1.0;
    v20 = v7;
    v16 = 0.0;
    do
    {
      v21 = v19;
      v22 = v4 - 2 * v7;
      if (v17 > v7)
      {
        do
        {
          v23 = *v21++;
          v24 = v23;
          if (v15 >= v23)
            v15 = v24;
          if (v14 <= v24)
            v14 = v24;
          v16 = v16 + v24;
          --v22;
        }
        while (v22);
      }
      ++v20;
      v19 += v4;
    }
    while (v20 != v11);
    v417 = 0;
    v416 = 0;
    v418 = 0;
    v13 = v14 - v15;
    v25 = (float *)(v3 + 4 * (v7 + v7 * (uint64_t)v4));
    do
    {
      v26 = v25;
      v27 = v4 - 2 * v7;
      if (v17 > v7)
      {
        do
        {
          v28 = *v26++;
          v29 = (int)(float)((float)((float)((float)(v28 - v15) / v13) * 9.0) + 0.5);
          ++*((_WORD *)&v416 + v29);
          --v27;
        }
        while (v27);
      }
      ++v18;
      v25 += v4;
    }
    while (v18 != v11);
    v12 = HIWORD(v418);
    v5 = v369;
  }
  else
  {
    v12 = 0;
    v417 = 0;
    v416 = 0;
    v13 = -1.0;
    v14 = 0.0;
    v15 = 1.0;
    v16 = 0.0;
    v418 = 0;
  }
  v30 = (v5 - 2 * v7) * (v4 - 2 * v7);
  v31 = v16 / (float)v30;
  LODWORD(v32) = (int)(float)((float)((float)(v31 - v15) / v13) * 9.0);
  if ((int)v32 <= 4)
    v32 = 4;
  else
    v32 = v32;
  if (v32 <= 7)
  {
    for (i = 8; i > v32; --i)
      v12 += *((unsigned __int16 *)&v416 + i);
  }
  v34 = (float)(v15 + v14) * 0.5;
  if (v31 >= v34)
    v35 = v34;
  else
    v35 = v31;
  v36 = v4 - v7;
  if (v11 > v7)
  {
    v37 = 0;
    v38 = v7;
    v39 = (float *)(v3 + 4 * (v7 + v7 * (uint64_t)v4));
    do
    {
      v40 = v39;
      v41 = v4 - 2 * v7;
      if (v36 > v7)
      {
        do
        {
          v42 = *v40++;
          if (v42 > v35)
            ++v37;
          --v41;
        }
        while (v41);
      }
      ++v38;
      v39 += v4;
    }
    while (v38 != v11);
  }
  else
  {
    v37 = 0;
  }
  v43 = v4;
  v44 = v30 - 3;
  if (v12 >= v44)
    v12 = v44;
  if (v37 < v44)
    v44 = v37;
  if (v12 <= 3)
    v12 = 3;
  if (v44 <= 3)
    v44 = 3;
  v45 = v44 + v12;
  v378 = v8;
  if (v11 > v7)
  {
    v47 = v7;
    v48 = (float *)(v3 + 4 * (v7 + v7 * (uint64_t)v4));
    v46 = -1;
    v49 = -1.0;
    do
    {
      if (v36 > v7)
      {
        v50 = v48;
        v51 = v4 - 2 * v7;
        v52 = v7;
        do
        {
          if (*v50 > v49)
          {
            v46 = __PAIR64__(v47, v52);
            v49 = *v50;
          }
          ++v52;
          ++v50;
          --v51;
        }
        while (v51);
      }
      ++v47;
      v48 += v4;
    }
    while (v47 != v11);
  }
  else
  {
    v46 = -1;
  }
  v403 = (int32x2_t)v46;
  v407 = v45 >> 1;
  v53 = v46 + HIDWORD(v46) * v4;
  v397 = v4 - v7;
  v398 = v11;
  bzero(v9, v8);
  v55 = v397;
  v54 = v398;
  v56 = v379;
  v57 = 0;
  v9[v53] = 1;
  v58 = -1;
  LODWORD(v59) = -1.0;
  v60 = -1;
  do
  {
    v61 = vadd_s32(_NTKAdjacent8[v57], v403);
    v62 = v61.i32[0] >= v7 && v61.i32[1] < v398;
    if (v62 && v61.i32[1] >= v7 && v61.i32[0] < v397)
    {
      v65 = v61.i32[0] + v61.i32[1] * v399;
      if (*(float *)(v379 + 4 * v65) > *(float *)&v59)
      {
        v60 = v61.i32[0] + v61.i32[1] * v399;
        v58 = v57;
        LODWORD(v59) = *(_DWORD *)(v379 + 4 * v65);
      }
    }
    ++v57;
  }
  while (v57 != 8);
  v385 = v10;
  v66 = 0;
  v67 = v58 + 7;
  v68 = -1;
  v69 = -1.0;
  v70 = 1;
  v71 = v399;
  do
  {
    v72 = vadd_s32(_NTKAdjacent8[(v67 + v66) & 7], v403);
    v73 = v70;
    if (v72.i32[0] >= v7 && v72.i32[1] < v398 && v72.i32[1] >= v7 && v72.i32[0] < v397)
    {
      v77 = v72.i32[0] + v72.i32[1] * v399;
      if (*(float *)(v379 + 4 * v77) > v69)
      {
        v68 = v72.i32[0] + v72.i32[1] * v399;
        v69 = *(float *)(v379 + 4 * v77);
      }
    }
    v70 = 0;
    v66 = 2;
  }
  while ((v73 & 1) != 0);
  v78 = 0;
  v79 = 0;
  ptr = 0;
  v80 = 0;
  v9[v60] = 1;
  v9[v68] = 1;
  v416 = __PAIR64__(v60, v53);
  LODWORD(v417) = v68;
  v402 = v9;
  do
  {
    v81 = 0;
    v82 = *((_DWORD *)&v416 + v80);
    v83 = v82 / v71;
    v84 = v82 % v71;
    do
    {
      v85 = *(_QWORD *)&_NTKAdjacent8[v81] + v84;
      v86 = HIDWORD(*(_QWORD *)&_NTKAdjacent8[v81]) + v83;
      if (v85 >= v7 && v86 >= v7 && v85 < v55 && v86 < v54)
      {
        v90 = v85 + v86 * v71;
        if (!v9[v90])
        {
          v91 = v90;
          if (*(float *)(v56 + 4 * v90) <= v35)
          {
            v93 = 3;
          }
          else
          {
            if (v79 >= v78)
            {
              v78 = 2 * v78 + 2;
              v92 = (unsigned __int16 *)malloc_type_realloc(ptr, 2 * v78, 0x1000040BDFB0063uLL);
              v54 = v398;
              v71 = v399;
              v56 = v379;
              v55 = v397;
            }
            else
            {
              v92 = ptr;
            }
            ptr = v92;
            v92[v79++] = v91;
            v93 = 2;
          }
          v402[v91] = v93;
          v9 = v402;
        }
      }
      ++v81;
    }
    while (v81 != 8);
    ++v80;
  }
  while (v80 != 3);
  v94 = v7;
  v95 = v54;
  v96 = v55;
  v391 = &v9[v7 + (int)v43 * (uint64_t)v7];
  v393 = v43 - 2 * v7;
  v97 = 3;
  v98 = v385;
  v377 = v43;
  v404 = v54;
  while (1)
  {
    v99 = v407 - v97;
    if (v99 >= 1)
    {
      v100 = 0;
      do
      {
        if (v79 < 1)
          break;
        v101 = *ptr;
        v102 = 0;
        if (v79 != 1)
        {
          v103 = *(float *)(v56 + 4 * *ptr);
          for (j = 1; j != v79; ++j)
          {
            v105 = ptr[j];
            if (*(float *)(v56 + 4 * v105) > v103)
            {
              v102 = j;
              v101 = ptr[j];
              v103 = *(float *)(v56 + 4 * v105);
            }
          }
        }
        if (v79 - 1 != v102)
        {
          memmove(&ptr[v102], &ptr[v102 + 1], 2 * (v79 + ~v102));
          v95 = v404;
          v55 = v397;
          v54 = v398;
          v56 = v379;
          v71 = v399;
          v102 = v79 - 1;
        }
        v106 = 0;
        v9[v101] = 1;
        v107 = v101 / v71;
        v108 = v101 % v71;
        v79 = v102;
        do
        {
          v109 = *(_QWORD *)&_NTKAdjacent8[v106] + v108;
          v110 = HIDWORD(*(_QWORD *)&_NTKAdjacent8[v106]) + v107;
          if (v109 >= v7 && v110 >= v7 && v109 < v55 && v110 < v54)
          {
            v114 = v109 + v110 * v71;
            if (!v402[v114])
            {
              v115 = v114;
              if (*(float *)(v56 + 4 * v114) <= v35)
              {
                v117 = 3;
              }
              else
              {
                if (v79 >= v78)
                {
                  v78 = 2 * v78 + 2;
                  v116 = (unsigned __int16 *)malloc_type_realloc(ptr, 2 * v78, 0x1000040BDFB0063uLL);
                  v54 = v398;
                  v71 = v399;
                  v56 = v379;
                  v55 = v397;
                  v95 = v404;
                }
                else
                {
                  v116 = ptr;
                }
                ptr = v116;
                v116[v79++] = v115;
                v117 = 2;
              }
              v402[v115] = v117;
              v98 = v385;
            }
          }
          ++v106;
        }
        while (v106 != 8);
        ++v100;
        v94 = v7;
        v9 = v402;
        v43 = v377;
      }
      while (v100 != v99);
    }
    v97 = 0;
    if (v54 > v7)
    {
      v118 = (unsigned __int8 *)v391;
      v119 = v94;
      do
      {
        v120 = v118;
        v121 = v393;
        if (v55 > v7)
        {
          do
          {
            v122 = *v120++;
            if (v122 == 1)
              ++v97;
            --v121;
          }
          while (v121);
        }
        ++v119;
        v118 += v43;
      }
      while (v119 != v95);
    }
    if (v54 <= v7 || v97 >= v407)
      break;
    v123 = 0xFFFFFFFFLL;
    v124 = -1.0;
    v125 = v94;
    v126 = -1;
    do
    {
      if (v55 > v7)
      {
        v127 = v125 * v43;
        v128 = v94;
        v129 = v124;
        v130 = v123;
        do
        {
          v123 = v128 + v127;
          if (v9[v128 + v127] == 3 && (v124 = *(float *)(v56 + 4 * v123), v124 > v129))
          {
            v131 = 0;
            while (1)
            {
              v132 = *(_QWORD *)&_NTKAdjacent8[v131] + v128;
              v133 = HIDWORD(*(_QWORD *)&_NTKAdjacent8[v131]) + v125;
              v134 = v132 >= v55 || v132 < v7;
              v135 = v134 || v133 < v7;
              if (!v135 && v133 < v54)
              {
                v137 = v132 + v133 * v71;
                if (!v9[v137] && *(float *)(v56 + 4 * v137) > v35)
                  break;
              }
              if (++v131 == 8)
                goto LABEL_168;
            }
            v126 = v137;
          }
          else
          {
LABEL_168:
            v123 = v130;
            v124 = v129;
          }
          ++v128;
          v129 = v124;
          v130 = v123;
        }
        while (v128 != v96);
      }
      ++v125;
    }
    while (v125 != v95);
    if (v124 <= 0.0)
      break;
    v9[(int)v123] = 1;
    if (v79 >= v78)
    {
      v78 = 2 * v78 + 2;
      v138 = (unsigned __int16 *)malloc_type_realloc(ptr, 2 * v78, 0x1000040BDFB0063uLL);
      v54 = v398;
      v71 = v399;
      v56 = v379;
      v55 = v397;
      v95 = v404;
    }
    else
    {
      v138 = ptr;
    }
    ptr = v138;
    v138[v79++] = v126;
    v9[v126] = 2;
  }
  v139 = v390;
  if ((int)v378 >= 1)
  {
    v140 = (unsigned __int8 *)v9;
    v141 = v98;
    do
    {
      v142 = *v140++;
      *v141++ = v142 == 1;
      --v139;
    }
    while (v139);
  }
  if (v54 > v7)
  {
    v143 = v94;
    do
    {
      if (v55 > v7)
      {
        v144 = v94;
        do
        {
          if (v98[v144 + v143 * v43])
          {
            v145 = 0;
            v146 = 0;
            v147 = -1;
            do
            {
              v148 = *(_QWORD *)&_NTKAdjacent8[v145] + v144;
              v149 = HIDWORD(*(_QWORD *)&_NTKAdjacent8[v145]) + v143;
              if (v148 < v55 && v148 >= v7 && v149 >= v7 && v149 < v54)
              {
                v153 = v98[v148 + v149 * v71];
                v146 += v153;
                if (v153)
                  v147 = v145;
              }
              ++v145;
            }
            while (v145 != 8);
            if (v146 == 1)
            {
              v154 = 0;
              v155 = v147 + 7;
              v156 = -1.0;
              v157 = -1;
              v158 = 1;
              do
              {
                v159 = v158;
                v160 = HIDWORD(*(_QWORD *)&_NTKAdjacent8[(v155 + v154) & 7]);
                v161 = *(_QWORD *)&_NTKAdjacent8[(v155 + v154) & 7] + v144;
                v162 = v160 + v143;
                if (v161 < v55 && v161 >= v7 && v162 >= v7 && v162 < v54)
                {
                  v166 = v161 + v162 * v71;
                  if (*(float *)(v56 + 4 * v166) > v156)
                  {
                    v156 = *(float *)(v56 + 4 * v166);
                    v157 = v166;
                  }
                }
                v158 = 0;
                v154 = 2;
              }
              while ((v159 & 1) != 0);
              v98[v157] = 1;
            }
          }
          ++v144;
        }
        while (v144 != v96);
      }
      ++v143;
    }
    while (v143 != v95);
  }
  if (v71 <= v369)
    v167 = v369;
  else
    v167 = v71;
  if ((int)v167 < 1)
  {
LABEL_233:
    *(_QWORD *)&v59 = -1;
    *((_QWORD *)&v59 + 1) = -1;
  }
  else
  {
    v168 = 0;
    v169 = v7;
    while (1)
    {
      v170 = v168 + v7;
      if ((int)v168 + v7 < v54 - (int)v168)
        break;
LABEL_232:
      ++v168;
      ++v169;
      if (v168 == v167)
        goto LABEL_233;
    }
    v171 = (unsigned __int8 *)&v98[(v43 + 1) * v169];
    v172 = v71 - v170;
    v173 = v169;
    while (v170 >= (int)v172)
    {
LABEL_231:
      ++v173;
      v171 += v43;
      if (v173 >= v54 - (int)v168)
        goto LABEL_232;
    }
    v174 = v171;
    v175 = v169;
    while (!*v174++)
    {
      if (++v175 >= v172)
        goto LABEL_231;
    }
    *(_QWORD *)&v59 = __PAIR64__(v173, v175);
  }
  v177 = 0;
  v178 = v59;
  if ((v59 & 0x80000000) != 0)
  {
    v180 = 0;
  }
  else
  {
    v179 = DWORD1(v59);
    v180 = 0;
    if ((DWORD1(v59) & 0x80000000) == 0)
    {
      v394 = v59;
      bzero(v9, v378);
      v181 = 0;
      while (1)
      {
        v182 = vadd_s32(_NTKAdjacent8[v181], *(int32x2_t *)&v394);
        v183 = v182.i32[0] < v7 || v182.i32[1] < v7;
        v184 = !v183 && v182.i32[0] < v397;
        if (!v184 || v182.i32[1] >= v398)
          break;
        if (++v181 == 8)
          goto LABEL_252;
      }
      if ((_DWORD)v181 != -1)
        goto LABEL_257;
LABEL_252:
      v181 = 0;
      while (1)
      {
        v186 = vadd_s32(_NTKAdjacent8[v181], *(int32x2_t *)&v394);
        if (!v98[v186.i32[0] + v186.i32[1] * v399])
          break;
        if (++v181 == 8)
        {
          LODWORD(v181) = -1;
          break;
        }
      }
LABEL_257:
      v187 = 0;
      v188.i64[1] = -1;
      v188.i64[0] = __PAIR64__(v369, v399);
      while (1)
      {
        v189 = vadd_s32(_NTKAdjacent8[((_BYTE)v181 + (_BYTE)v187) & 7], *(int32x2_t *)&v394);
        *(int32x2_t *)v190.i8 = v189;
        v190.u64[1] = (unint64_t)v189;
        v191.i32[0] = vmovn_s32(vcgtq_s32(v188, v190)).u32[0];
        v191.i32[1] = vmovn_s32(vcgtq_s32(v190, v188)).i32[1];
        if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v191, 0xFuLL))) & 1) != 0
          && v98[v189.i32[0] + v189.i32[1] * v399])
        {
          break;
        }
        if (++v187 == 8)
          goto LABEL_263;
      }
      LODWORD(v181) = ((_BYTE)v181 + (_BYTE)v187) & 7;
LABEL_263:
      v192 = v178 + v179 * v399;
      v9[v192] |= 1 << v181;
      v408 = malloc_type_realloc(0, 4uLL, 0x1000040BDFB0063uLL);
      *v408 = v192;
      *((_QWORD *)&v193 + 1) = *((_QWORD *)&v394 + 1);
      *(int32x2_t *)&v194 = vadd_s32(_NTKAdjacent8[(int)v181], *(int32x2_t *)&v394);
      v195 = 2;
      v196 = 1;
      v198 = v398;
      v197 = v399;
      v199 = v369;
      v200 = v397;
LABEL_264:
      while (1)
      {
        v201 = 5;
        while (1)
        {
          v202 = (v181 + v201) & 7;
          *(int32x2_t *)&v193 = vadd_s32(_NTKAdjacent8[v202], *(int32x2_t *)&v194);
          if ((int)v193 < v197
            && (v193 & 0x80000000) == 0
            && (DWORD1(v193) & 0x80000000) == 0
            && SDWORD1(v193) < v199
            && v98[(int)v193 + DWORD1(v193) * v197])
          {
            break;
          }
          if (++v201 == 13)
            goto LABEL_264;
        }
        v203 = v194 + DWORD1(v194) * v197;
        LODWORD(v181) = 1 << v202;
        if (((1 << v202) & v402[v203]) != 0)
          break;
        if ((int)v196 >= (int)v195)
        {
          v395 = v193;
          v205 = (2 * v195 + 2);
          v204 = malloc_type_realloc(v408, 2 * (int)v205, 0x1000040BDFB0063uLL);
          v198 = v398;
          v197 = v399;
          v199 = v369;
          v200 = v397;
          v195 = v205;
          v193 = v395;
        }
        else
        {
          v204 = v408;
        }
        v408 = v204;
        v204[(int)v196] = v203;
        v402[v203] |= v181;
        v196 = (v196 + 1);
        LOBYTE(v181) = v202;
        *(_QWORD *)&v194 = v193;
      }
      v392 = v195;
      v206 = v197 - 1;
      v376 = v199 - 1;
      if (v198 > v7)
      {
        v375 = 0;
        v387 = 0;
        v208 = v7;
        v209 = v208 + (int)v208 * (uint64_t)(int)v43;
        v210 = &v402[v209];
        v211 = (unsigned __int8 *)&v98[v209];
        v207 = v378;
        do
        {
          if (v200 > v7)
          {
            v212 = v211;
            v213 = v210;
            v214 = v43 - 2 * v7;
            v215 = v7;
            do
            {
              if (*v212++)
              {
                if (v206 >= v215)
                  v217 = v215;
                else
                  v217 = v206;
                v218 = v375;
                v219 = HIDWORD(v375);
                if ((int)v375 <= v215)
                  v220 = v215;
                else
                  v220 = v375;
                if (v376 >= (int)v208)
                  v221 = v208;
                else
                  v221 = v376;
                if (SHIDWORD(v375) <= (int)v208)
                  v222 = v208;
                else
                  v222 = HIDWORD(v375);
                if (*v213)
                  v223 = 0;
                else
                  v223 = -2;
                v224 = v387;
                if (!*v213)
                  v224 = v387 + 1;
                v387 = v224;
                if (!*v213)
                {
                  v219 = v222;
                  v218 = v220;
                }
                v375 = __PAIR64__(v219, v218);
                if (*v213)
                  v225 = v376;
                else
                  v225 = v221;
                v376 = v225;
                if (!*v213)
                  v206 = v217;
              }
              else
              {
                v223 = -1;
              }
              *v213++ = v223;
              ++v215;
              --v214;
            }
            while (v214);
          }
          ++v208;
          v210 += v43;
          v211 += v43;
        }
        while (v208 != v404);
      }
      else
      {
        v387 = 0;
        v375 = 0;
        v207 = v378;
      }
      v226 = v375 - v206;
      if ((int)v375 - v206 >= HIDWORD(v375) - v376)
        v226 = HIDWORD(v375) - v376;
      v368 = v226;
      if (v226 > 1 && v387 >= 1)
      {
        v370 = 0;
        v366 = v376;
        v227 = 1;
        v228 = v392;
        v374 = (float32x2_t *)(&v416 + 2 * v207);
        v9 = v402;
        v367 = v206;
        while (1)
        {
          v229 = HIDWORD(v375) - ((v227 - 1) >> 1);
          if ((int)(v376 + ((v227 - 1) >> 1)) <= v229)
            break;
LABEL_428:
          if ((int)++v227 < v368)
          {
            ++v370;
            v206 = v367;
            if (v387 > 0)
              continue;
          }
          goto LABEL_432;
        }
        v371 = (unsigned __int8 *)(int)(v206 + (v370 >> 1));
        v230 = (v227 - 1) >> 1;
        v373 = v230 + v206;
        v231 = v375 - v230;
        v232 = v231;
        v372 = v229;
        v233 = v376 + (v370 >> 1);
        v396 = v227;
        v380 = v231;
LABEL_317:
        if (v373 > (int)v232)
          goto LABEL_427;
        v234 = v233 * v377;
        v235 = v371;
        v381 = v233 * v377;
        v382 = v233;
LABEL_319:
        if (v235[v234 + (_QWORD)v9] != 254)
          goto LABEL_426;
        v386 = &v235[v234];
        v236 = 0;
        v413 = 8;
        v411 = 0;
        do
        {
          v237 = *(_QWORD *)&_NTKAdjacent8[v236]
               + (_DWORD)v235
               + (HIDWORD(*(_QWORD *)&_NTKAdjacent8[v236]) + v233) * v197;
          *((_DWORD *)v412 + v236) = v237;
          if (v227 > v9[v237])
          {
            v238 = v411++;
            *((_DWORD *)&v409 + v238) = v237;
          }
          ++v236;
        }
        while (v236 != 8);
        v239 = v411;
        __src = v235;
        if (v411 != 1)
          goto LABEL_391;
        v405 = (int)v409;
        if ((int)v196 < 1)
        {
          v241 = -1;
          LODWORD(v240) = -1;
        }
        else
        {
          v240 = 0;
          while ((_DWORD)v409 != (unsigned __int16)v408[v240])
          {
            if (v196 == ++v240)
            {
              v241 = -1;
              LODWORD(v240) = -1;
              goto LABEL_332;
            }
          }
          v241 = (unsigned __int16)v408[((int)v240 + 1) % (int)v196];
        }
LABEL_332:
        if ((int)v207 > 4096)
        {
          LODWORD(v234) = 0;
          v98 = v385;
          goto LABEL_390;
        }
        v421 = v207;
        if ((_DWORD)v207)
        {
          v242 = (float32x2_t *)&v416;
          do
          {
            *v242 = (float32x2_t)0x7FFFFFFFFFFFFFFFLL;
            v242[1].i32[0] = 0x7FFFFFFF;
            v242[1].i8[4] = 0;
            v242 += 2;
          }
          while (v242 != v374);
          v243 = *((_BYTE *)&v417 + 16 * v405 + 4) | 1;
        }
        else
        {
          v243 = -1;
        }
        v244.i32[0] = v405 % v197;
        v244.i32[1] = v405 / v197;
        v245.i32[0] = v241 % v197;
        v245.i32[1] = v241 / v197;
        v388 = v245;
        v246 = vsub_s32(v244, v245);
        v247 = vmul_s32(v246, v246);
        v248 = (float32x2_t *)(&v416 + 2 * v405);
        v248[1].i32[0] = vadd_s32(v247, vdup_lane_s32(v247, 1)).u32[0];
        ++v248;
        v248[-1].i32[1] = 0;
        v383 = v248;
        v248->i8[4] = v243;
        v249 = 1;
        v415 = 1;
        LODWORD(v414[0]) = v405;
        v250 = (int)v240 + 1;
        v389 = ~(_DWORD)v240;
        while (1)
        {
          v251 = (__int32)v414[0];
          if (v249 < 2)
          {
            v252 = 0;
          }
          else
          {
            v252 = 0;
            v253 = *((_DWORD *)&v416 + 4 * SLODWORD(v414[0]) + 2);
            for (k = 1; k != v249; ++k)
            {
              if (*((_DWORD *)&v416 + 4 * *((int *)v414 + k) + 2) < v253)
              {
                v253 = *((_DWORD *)&v416 + 4 * *((int *)v414 + k) + 2);
                v252 = k;
              }
            }
            v251 = *((_DWORD *)v414 + v252);
          }
          if (v251 != v241)
            break;
          if (v241 < 1)
            goto LABEL_388;
          v255 = -1;
          LODWORD(v234) = -2;
          v256 = v241;
          do
          {
            v257 = (float32x2_t *)(&v416 + 2 * v256);
            v257[1].i32[0] = v255;
            v255 = v256;
            v256 = v257->i32[0];
            LODWORD(v234) = v234 + 1;
          }
          while (v257->i32[0] > 0);
          if ((v234 + 1) >= 3)
          {
            v278 = v196;
            v279 = v383->i32[0];
            if (v383->i32[0] == v241)
            {
              v196 = v278;
            }
            else
            {
              v280 = (int)v278;
              do
              {
                if (v280 >= (int)v228)
                {
                  v281 = (2 * v228 + 2);
                  v408 = malloc_type_realloc(v408, 2 * (int)v281, 0x1000040BDFB0063uLL);
                  v198 = v398;
                  v197 = v399;
                  v200 = v397;
                  v228 = v281;
                  v235 = __src;
                }
                if (v250 != v280)
                {
                  v282 = v228;
                  memmove(&v408[v250 + 1], &v408[v250], 2 * (v389 + (int)v280));
                  v197 = v399;
                  v235 = __src;
                  v228 = v282;
                  v200 = v397;
                  v198 = v398;
                }
                v408[v250] = v279;
                v402[v279] = v396;
                v279 = *((_DWORD *)&v416 + 4 * v279 + 2);
                ++v280;
              }
              while (v279 != v241);
              v196 = v280;
              v9 = v402;
            }
          }
          else
          {
            LODWORD(v234) = 0;
          }
LABEL_386:
          if (v251 == v241)
            goto LABEL_389;
          v249 = v415;
          if (v415 < 1)
          {
LABEL_388:
            LODWORD(v234) = 0;
LABEL_389:
            v98 = v385;
            LODWORD(v207) = v378;
LABEL_390:
            v387 -= v234;
            v227 = v396;
            v232 = v380;
            v234 = v381;
            v233 = v382;
            v239 = 1;
LABEL_391:
            if (v239 >= 2)
            {
              v420 = 0;
              if ((int)v196 >= 1)
              {
                v283 = 0;
                do
                {
                  v284 = 0;
                  v285 = 0;
                  v286 = 0;
                  v287 = v283;
                  v288 = (unsigned __int16)v408[v283++];
                  if (v283 == v196)
                    v289 = 0;
                  else
                    v289 = v287 + 1;
                  v290 = (unsigned __int16)v408[v289];
                  do
                  {
                    v291 = *(_DWORD *)((char *)v412 + v284);
                    v286 |= v291 == v288;
                    v285 |= v291 == v290;
                    v284 += 4;
                  }
                  while (v284 != 32);
                  if ((v286 & v285 & 1) != 0)
                  {
                    *(_QWORD *)&v194 = __PAIR64__(v288, v287);
                    DWORD2(v194) = v290;
                    v292 = v420++;
                    *((_OWORD *)&v416 + v292) = v194;
                  }
                }
                while (v283 != v196);
                if (v420 > 0)
                {
                  if (v420 == 1)
                  {
                    v293 = 0;
                  }
                  else
                  {
                    v293 = 0;
                    if (SHIDWORD(v416) / v197 == (int)v417 / v197 || SHIDWORD(v416) % v197 == (int)v417 % v197)
                      v295 = 0.0;
                    else
                      v295 = -1.0;
                    v296 = v295 + (float)(*(float *)(v379 + 4 * SHIDWORD(v416)) + *(float *)(v379 + 4 * (int)v417));
                    v297 = &v419;
                    for (m = 1; m != v420; ++m)
                    {
                      v299 = *((int *)v297 - 1);
                      v300 = *(int *)v297;
                      if ((int)v299 / v197 == (int)v300 / v197 || (int)v299 % v197 == (int)v300 % v197)
                        v302 = 0.0;
                      else
                        v302 = -1.0;
                      if ((float)(v302 + (float)(*(float *)(v379 + 4 * v299) + *(float *)(v379 + 4 * v300))) < v296)
                      {
                        v293 = m;
                        v296 = v302 + (float)(*(float *)(v379 + 4 * v299) + *(float *)(v379 + 4 * v300));
                      }
                      v297 += 2;
                    }
                  }
                  v303 = *((_DWORD *)&v416 + 4 * v293);
                  if ((int)v196 >= (int)v228)
                  {
                    v207 = (2 * v228 + 2);
                    v304 = malloc_type_realloc(v408, 2 * (int)v207, 0x1000040BDFB0063uLL);
                    v228 = v207;
                    v408 = v304;
                    v198 = v398;
                    v197 = v399;
                    LODWORD(v207) = v378;
                    v200 = v397;
                    v235 = __src;
                  }
                  v305 = v386;
                  v306 = v303 + 1;
                  v307 = v303 + 1;
                  v308 = v196 - v306;
                  if (v308)
                  {
                    v309 = v228;
                    memmove(&v408[v307 + 1], &v408[v307], 2 * v308);
                    v305 = v386;
                    v197 = v399;
                    v235 = __src;
                    v228 = v309;
                    v200 = v397;
                    v198 = v398;
                  }
                  v196 = (v196 + 1);
                  v408[v307] = (_WORD)v305;
                  v227 = v396;
                  v305[(_QWORD)v9] = v396;
                  --v387;
                  v232 = v380;
                  v234 = v381;
                  v233 = v382;
                }
              }
            }
LABEL_426:
            v62 = (uint64_t)v235++ < v232;
            if (!v62)
            {
LABEL_427:
              v62 = v233++ < v372;
              if (!v62)
                goto LABEL_428;
              goto LABEL_317;
            }
            goto LABEL_319;
          }
        }
        if (v249 - 1 != v252)
        {
          v258 = v228;
          memmove((char *)v414 + 4 * v252, (char *)v414 + 4 * v252 + 4, 4 * (int)(v249 + ~v252));
          v197 = v399;
          v235 = __src;
          v228 = v258;
          v200 = v397;
          v198 = v398;
          v252 = v415 - 1;
        }
        v259 = 0;
        v415 = v252;
        v261 = (float32x2_t *)(&v416 + 2 * v251);
        v261[1].i8[4] = v261[1].i8[4] & 0xFC | 2;
        v262 = (_DWORD *)v261 + 1;
        while (1)
        {
          v263 = _NTKAdjacent8[v259];
          v260.i32[1] = v251 / v197;
          v260.i32[0] = v251 % v197;
          v264 = vadd_s32(v263, v260);
          v265 = v264.i32[0] >= v7 && v264.i32[1] < v198;
          v266 = !v265 || v264.i32[1] < v7;
          if (!v266 && v264.i32[0] < v200)
          {
            v268 = v264.i32[0] + v264.i32[1] * v197;
            if (v251 != v405)
            {
              v269 = v241;
              if (v268 == v241)
                goto LABEL_372;
            }
            if (v9[v268] == 254)
              break;
          }
LABEL_366:
          if (++v259 == 8)
            goto LABEL_386;
        }
        v269 = v268;
LABEL_372:
        v270 = (float32x2_t *)(&v416 + 2 * v269);
        v271 = v270[1].i8[4];
        if ((v271 & 2) == 0)
        {
          if ((v270[1].i8[4] & 1) == 0)
          {
            v272 = v415++;
            *((_DWORD *)v414 + v272) = v268;
            v270[1].i8[4] = v271 | 1;
          }
          v273 = vmul_s32(v263, v263);
          v274 = vadd_s32(v273, vdup_lane_s32(v273, 1)).u32[0] + *v262;
          v275 = (float32x2_t *)(&v416 + 2 * v269);
          if (v274 < v275->i32[1])
          {
            v270->i32[0] = v251;
            v275->i32[1] = v274;
            v276 = vsub_s32(v264, v388);
            v277 = vmul_s32(v276, v276);
            v275[1].i32[0] = vadd_s32(v277, vdup_lane_s32(v277, 1)).u32[0];
          }
        }
        goto LABEL_366;
      }
      v9 = v402;
LABEL_432:
      v310 = v196 - 1;
      if ((int)v196 < 1)
      {
        v316 = 0;
        __srca = 0;
        v356 = v196;
        v317 = 0;
        v416 = 0;
        LODWORD(v417) = v356;
        HIDWORD(v417) = v356;
      }
      else
      {
        v311 = 0;
        v312 = v196;
        v313 = -1;
        v314 = -1.0;
        do
        {
          if (*(float *)(v379 + 4 * (unsigned __int16)v408[v311]) > v314)
          {
            v313 = v311;
            v314 = *(float *)(v379 + 4 * (unsigned __int16)v408[v311]);
          }
          ++v311;
        }
        while (v196 != v311);
        __srca = (float32x2_t *)malloc_type_malloc(8 * v196, 0x100004000313F17uLL);
        v315 = v196;
        HIDWORD(v417) = v196;
        v316 = (float32x2_t *)malloc_type_malloc(8 * v196, 0x100004000313F17uLL);
        v416 = (unint64_t)v316;
        v317 = malloc_type_malloc(v196, 0x100004077774924uLL);
        v318 = 0;
        v319 = vcvt_f32_s32((int32x2_t)__PAIR64__(v369, v399));
        do
        {
          v320 = 0;
          v321 = (unsigned __int16)v408[(v313 + (int)v318) % v315];
          v322 = v321 / v399;
          v323 = v321 % v399;
          v324.i32[0] = v321 % v399;
          v324.i32[1] = v321 / v399;
          __srca[v318] = vdiv_f32(vadd_f32(vcvt_f32_s32(v324), (float32x2_t)0x3F0000003F000000), v319);
          v325 = (unsigned __int16)v408[(v310 + v313 + (int)v318) % v315];
          while (1)
          {
            v326.i32[1] = v325 / v399;
            v326.i32[0] = v325 % v399;
            v327 = vadd_s32(_NTKAdjacent8[v320], v326);
            if (v327.i32[0] + v327.i32[1] * v399 == v321)
              break;
            if (++v320 == 8)
            {
              LODWORD(v320) = -1;
              break;
            }
          }
          v328 = 0;
          while (1)
          {
            v329 = vadd_s32(_NTKAdjacent8[v328], (int32x2_t)__PAIR64__(v322, v323));
            if (v329.i32[0] + v329.i32[1] * v399 == (unsigned __int16)v408[(v313 + (int)v318 + 1) % v315])
              break;
            if (++v328 == 8)
            {
              LODWORD(v328) = -1;
              break;
            }
          }
          v317[v318++] = (_DWORD)v320 == (_DWORD)v328;
        }
        while (v318 != v312);
        memcpy(v316, __srca, 8 * v315);
        v330 = 0;
        LODWORD(v417) = v315;
        v331 = (float32x2_t)vdup_n_s32(0x3F2AAAABu);
        do
        {
          v332 = v330 + 1;
          if (!v317[v330])
          {
            v333 = v332 == v312 ? 0 : v330 + 1;
            if (v317[v333])
            {
              if (v315 < 3)
              {
LABEL_459:
                v335 = -1;
              }
              else
              {
                v334 = 2;
                while (v317[((int)v330 + v334) % v315])
                {
                  if ((_DWORD)v312 == ++v334)
                    goto LABEL_459;
                }
                v335 = v315 + v330 + v334;
              }
              v336 = v315 + v330;
              v337 = v335 - (v315 + v330);
              if (v335 >= v315 + (int)v330)
                v338 = v335 - (v315 + v330);
              else
                v338 = v337 + 1;
              if (v337 >= 2)
              {
                v339 = 0;
                v340 = __srca[(v336 - 1) % v315];
                v341 = __srca[(v335 + 1) % v315];
                v342 = __srca[v336 % v315];
                v343 = __srca[v335 % v315];
                v344 = vmul_f32(vadd_f32(v342, v343), (float32x2_t)0x3F0000003F000000);
                v345 = vmla_f32(v340, v331, vsub_f32(v342, v340));
                v346 = vmla_f32(v341, v331, vsub_f32(v343, v341));
                v347 = vsub_f32(v342, v345);
                v348 = vsub_f32(v344, v342);
                v349 = vsub_f32(v343, v346);
                v350 = vsub_f32(v344, v343);
                v351 = v338 >> 1;
                v352 = v315 + v330;
                do
                {
                  v353 = (float)v339 / (float)v351;
                  v354 = 1.0 - sqrtf(1.0 - v353);
                  v355 = sqrtf(v353);
                  v316[(v352 + v339) % v315] = vmla_n_f32(vmla_n_f32(v345, v347, v355), v348, v354);
                  v316[v335 % v315] = vmla_n_f32(vmla_n_f32(v346, v349, v355), v350, v354);
                  ++v339;
                  --v335;
                }
                while (v351 != v339);
              }
            }
          }
          v330 = v332;
        }
        while (v332 != v312);
      }
      _NTKNewSubdividedPath((float32x2_t *)&v416, (uint64_t)v414);
      _NTKNewSubdividedPath((float32x2_t *)v414, (uint64_t)v412);
      _NTKNewSubdividedPath((float32x2_t *)v412, (uint64_t)&v409);
      v357 = v410;
      v358 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v359 = (char *)v409;
      if ((int)v357 >= 1)
      {
        v360 = 0;
        v361 = 8 * v357;
        do
        {
          v406 = HIDWORD(*(_QWORD *)&v359[v360]);
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v366);
          v362 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v358, "addObject:", v362);

          HIDWORD(v363) = v406;
          LODWORD(v363) = v406;
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v363);
          v364 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v358, "addObject:", v364);

          v360 += 8;
        }
        while (v361 != v360);
      }
      free(v359);
      free(v412[0]);
      free(v414[0]);
      free(v317);
      free(v316);
      free(__srca);
      v180 = v358;

      v177 = v408;
    }
  }
  free(ptr);
  free(v177);
  free(v98);
  free(v9);
  return v180;
}

void sub_1B7392474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,void *a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  void *v60;

  free(v60);
  free(a45);
  free(a29);
  free(a49);
  free(a30);
  free(a46);
  _Unwind_Resume(a1);
}

void NTKAnalyzeDominance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  id v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  unsigned int v37;
  float *v38;
  float v39;
  float v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  float32x4_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  int v55;
  float32x4_t *v56;
  unint64_t v58;
  float32x4_t *v59;
  unint64_t v60;
  float32x4_t v67;
  float v70;
  float v72;
  float32x4_t v73;
  uint64_t v74;
  uint64_t i;
  uint64_t v76;
  float32x4_t v77;
  float32x4_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  int v101;
  id v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  char *__b;
  signed int v108;
  uint64_t v109;
  int v110;
  float32x4_t v111;
  float32x4_t v112;
  _OWORD v113[256];
  int v114;
  float32x4_t v115[9];
  int v116;
  _OWORD v117[512];
  int v118;
  uint64_t v119;

  v3 = (void *)MEMORY[0x1E0C80A78](a1, a2, a3);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  __b = v10;
  v119 = *MEMORY[0x1E0C80C00];
  v11 = v3;
  v12 = objc_msgSend(v11, "width");
  v13 = objc_msgSend(v11, "height");
  v14 = v12 / v9;
  if (v12 / v9 <= 1)
    v14 = 1;
  if (v14 >= 16)
    v15 = 16;
  else
    v15 = v14;
  v16 = v13 / v7;
  if (v13 / v7 <= 1)
    v16 = 1;
  if (v16 >= 16)
    v17 = 16;
  else
    v17 = v16;
  v102 = v11;
  v18 = v15 * v9;
  if (objc_msgSend(v102, "width") != (_DWORD)v15 * v9
    || (v19 = v102, objc_msgSend(v102, "height") != v17 * v7))
  {
    objc_msgSend(v102, "scaleToWidth:height:", (v15 * v9), (v17 * v7));
    v19 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v20 = objc_msgSend(v19, "contents");
  v101 = v9;
  v114 = 256;
  if (v7 * v9 >= 1)
    memset_pattern16(__b, &unk_1B755E410, 16 * (v7 * v9));
  if ((int)(v7 - v5) > (int)v5)
  {
    v108 = v9 - v5;
    v105 = v5 * v15 + v5 * v15 * v9 * v17;
    v103 = v9 * v17 * v15;
    v104 = (int)v5;
    v106 = v17;
    do
    {
      if (v108 > (int)v5)
      {
        v21 = (int)v5;
        v22 = v105;
        do
        {
          v109 = v21;
          v23 = 0;
          LODWORD(v24) = 0;
          v110 = v22;
          do
          {
            v24 = (int)v24;
            v25 = v24 + 1;
            v26 = v15;
            v27 = v22;
            do
            {
              v28 = v25;
              v113[v24++] = *(_OWORD *)(v20 + 16 * v27++);
              ++v25;
              --v26;
            }
            while (v26);
            ++v23;
            v22 += v18;
          }
          while (v23 != v17);
          v118 = 512;
          bzero(v117, 0x2000uLL);
          if ((int)v24 - 1 >= 0)
          {
            v29 = v28;
            v30 = (float32x4_t *)v113;
            do
            {
              v31 = *v30++;
              v32.i64[0] = 0x3F0000003F000000;
              v32.i64[1] = 0x3F0000003F000000;
              v33 = vmlaq_f32(v32, (float32x4_t)xmmword_1B755E3E0, v31);
              *(uint32x2_t *)v33.f32 = vshl_u32((uint32x2_t)vcvt_s32_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v33.f32)), (uint32x2_t)0x600000003);
              v117[v33.i32[0] | (int)v33.f32[2] | v33.i32[1]] = vaddq_f32(v31, (float32x4_t)v117[v33.i32[0] | (int)v33.f32[2] | v33.i32[1]]);
              --v29;
            }
            while (v29);
          }
          v34 = 0;
          v116 = 9;
          while (1)
          {
            v35 = 0;
            v36 = 1.0;
            v37 = -1;
            v38 = (float *)((unint64_t)v117 | 0xC);
            do
            {
              v39 = *v38;
              v38 += 4;
              v40 = (float)(int)v39;
              if (v36 <= v40)
              {
                v36 = v40;
                v37 = v35;
              }
              ++v35;
            }
            while (v35 != 512);
            if ((v37 & 0x80000000) != 0)
              break;
            v41 = (v37 >> 6) & 7;
            v42 = (v37 >> 3) & 7;
            v43 = v37 & 7;
            if (v41 <= 1)
              v44 = 1;
            else
              v44 = (v37 >> 6) & 7;
            v45 = v44 - 1;
            if (v42 <= 1)
              v46 = 1;
            else
              v46 = v42;
            if (v43 <= 1)
              v47 = 1;
            else
              v47 = v43;
            if (v41 >= 6)
              v41 = 6;
            v48 = v41 + 1;
            v49 = 0uLL;
            if (v45 <= v48)
            {
              v50 = v46 - 1;
              v51 = v47 - 1;
              if (v43 >= 6)
                v43 = 6;
              if (v42 >= 6)
                v42 = 6;
              v52 = v42 + 1;
              v53 = v47 - 3;
              do
              {
                if (v50 <= v52)
                {
                  v54 = v50;
                  do
                  {
                    if (v51 <= v43 + 1)
                    {
                      v55 = v53;
                      do
                      {
                        v56 = (float32x4_t *)&v117[(v45 << 6) | (8 * v54) | (v55 + 2)];
                        v49 = vaddq_f32(v49, *v56);
                        v56->i64[0] = 0;
                        v56->i64[1] = 0;
                        ++v55;
                      }
                      while (v43 != v55);
                    }
                    _ZF = v54++ == v52;
                  }
                  while (!_ZF);
                }
                _ZF = v45++ == v48;
              }
              while (!_ZF);
            }
            v115[v34++] = v49;
            if (v34 == 9)
            {
              v58 = 9;
              goto LABEL_63;
            }
          }
          if (!(_DWORD)v34)
            goto LABEL_76;
          v58 = v34;
LABEL_63:
          v59 = v115;
          v60 = v58;
          do
          {
            v111 = *v59;
            v112 = vdivq_f32(*v59, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v59, 3));
            _CLKUIRGB2LAB();
            _S1 = _V0.S[1];
            __asm { FMLA            S2, S1, V0.S[1] }
            v67.i32[1] = sqrtf(_S2);
            _D0 = vmulq_f32(v67, (float32x4_t)xmmword_1B755E3F0).u64[0];
            _S1 = 1077936127;
            v70 = vmlas_n_f32(0.1, 3.0, *(float *)&_D0);
            if (*(float *)&_D0 >= 0.3)
              v70 = 1.0;
            __asm { FMLA            S4, S1, V0.S[1] }
            if (*((float *)&_D0 + 1) >= 0.3)
              v72 = 1.0;
            else
              v72 = _S4;
            v73 = v112;
            v73.i32[3] = vmuls_lane_f32(v72 * (float)(v72 * (float)(v70 * v70)), v111, 3);
            *v59++ = v73;
            --v60;
          }
          while (v60);
          if (v58 >= 2)
          {
            v74 = 0;
            for (i = 1; i != v58; ++i)
            {
              v76 = v74;
              do
              {
                v77 = v115[v76];
                v78 = v115[v76 + 1];
                if ((vmovn_s32(vcgtq_f32(v78, v77)).i8[6] & 1) == 0)
                  break;
                v115[v76 + 1] = v77;
                v115[v76] = v78;
                v79 = v76-- + 1;
              }
              while (v79 > 1);
              ++v74;
            }
          }
LABEL_76:
          _CLKUIRGB2LAB();
          _CLKUILAB2RGB();
          HIDWORD(v80) = 1.0;
          *(_OWORD *)&__b[16 * v109 + 16 * v104 * v101] = v80;
          v21 = v109 + 1;
          v22 = v110 + v15;
          v17 = v106;
        }
        while (v108 != (_DWORD)v109 + 1);
      }
      v105 += v103;
      ++v104;
    }
    while (v7 - v5 != (_DWORD)v104);
  }
  v81 = v5 - 2;
  if ((int)v5 >= 2)
  {
    v82 = v5;
    v83 = (v7 - (unint64_t)v5) * v101;
    v84 = (uint64_t)&__b[16 * v83 - 16 + 16 * v101 + 16 * v5];
    v85 = 16 * v101;
    v86 = v85 - 16;
    v87 = (uint64_t)&__b[16 * v83 - 16 + 16 * v5];
    v88 = (uint64_t)&__b[16 * (v5 - 2) * v101 - 16 + 16 * v5];
    v89 = v85 ^ 0xFFFFFFFFFFFFFFF0;
    v90 = (uint64_t)&__b[16 * (v5 - 1) * v101 - 16 + 16 * v5];
    v91 = v81 - 1;
    v92 = v101 * v81;
    v93 = 16 * (v92 + v5) - 32;
    v94 = v101 - v5;
    do
    {
      v95 = v82 - 1;
      if (v82 - 1 <= v101 - (int)v82)
      {
        v97 = 0;
        v96 = v82 - 2;
        do
        {
          *(_OWORD *)(v88 + 16 * v97) = *(_OWORD *)(v90 + 16 * v97);
          *(_OWORD *)(v84 + 16 * v97) = *(_OWORD *)(v87 + 16 * v97);
          ++v97;
        }
        while (v82 + v97 - 2 < v101 - (int)v82);
      }
      else
      {
        v96 = v82 - 2;
      }
      if (v96 <= v7 - v95)
      {
        v98 = __b;
        v99 = v91;
        do
        {
          *(_OWORD *)&v98[v93] = *(_OWORD *)&v98[v93 + 16];
          *(_OWORD *)&v98[16 * v92 + 16 + 16 * v94] = *(_OWORD *)&v98[16 * v92 + 16 * v94];
          ++v99;
          v98 += v85;
        }
        while (v99 < v7 - v95);
      }
      v84 += v86;
      v87 += v86;
      v88 += v89;
      v90 += v89;
      --v91;
      v93 += v89;
      v92 -= v101;
      ++v94;
    }
    while (v82-- > 2);
  }

}

void sub_1B7392CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

id NTKPlusImage()
{
  id WeakRetained;
  void *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;

  os_unfair_lock_lock((os_unfair_lock_t)&NTKPlusImage::__lock);
  WeakRetained = objc_loadWeakRetained(&NTKPlusImage::__cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v1 = WeakRetained;
  objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "device");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_loadWeakRetained(&NTKPlusImage::__cachedDevice);
  if (v3 != v4)
  {

LABEL_5:
    objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "device");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak(&NTKPlusImage::__cachedDevice, v10);

    v11 = objc_loadWeakRetained(&NTKPlusImage::__cachedDevice);
    NTKPlusImage::__previousCLKDeviceVersion = objc_msgSend(v11, "version");

    objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "device");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    __NTKPlusImage_block_invoke((uint64_t)v13, v13);

    goto LABEL_6;
  }
  objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "device");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "version");
  v8 = NTKPlusImage::__previousCLKDeviceVersion;

  if (v7 != v8)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&NTKPlusImage::__lock);
  return (id)NTKPlusImage::_plusImage;
}

void sub_1B7392E6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B7392FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1B7393014()
{
  JUMPOUT(0x1B7393004);
}

void sub_1B7393288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B7393880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;

  free(v19);
  free(a17);
  free(a18);
  free(v18);
  _Unwind_Resume(a1);
}

void sub_1B73939A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id NTKBlurImage(void *a1, double a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  CGImage *v13;
  id v14;
  double v15;
  id v16;

  v3 = a1;
  v4 = v3;
  if (v3 && a2 > 0.0)
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9DDC8]), "initWithImage:", v3);
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0C9DDB8], "filterWithName:", CFSTR("CIAffineClamp"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setDefaults");
      v7 = *MEMORY[0x1E0C9E1F8];
      objc_msgSend(v6, "setValue:forKey:", v5, *MEMORY[0x1E0C9E1F8]);
      objc_msgSend(MEMORY[0x1E0C9DDB8], "filterWithName:", CFSTR("CIGaussianBlur"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a2);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setValue:forKey:", v9, *MEMORY[0x1E0C9E258]);

      objc_msgSend(v6, "outputImage");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "setValue:forKey:", v10, v7);

      objc_msgSend(v8, "outputImage");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if (v11)
      {
        objc_msgSend(MEMORY[0x1E0C9DD90], "context");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "extent");
        v13 = (CGImage *)objc_msgSend(v12, "createCGImage:fromRect:", v11);
        if (v13)
        {
          v14 = objc_alloc(MEMORY[0x1E0DC3870]);
          objc_msgSend(v4, "scale");
          v16 = (id)objc_msgSend(v14, "initWithCGImage:scale:orientation:", v13, objc_msgSend(v4, "imageOrientation"), v15);
          CGImageRelease(v13);
        }
        else
        {
          v16 = 0;
        }

      }
      else
      {
        v16 = 0;
      }

    }
    else
    {
      v16 = 0;
    }

  }
  else
  {
    v16 = v3;
  }

  return v16;
}

void sub_1B7393BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v7;

  _Unwind_Resume(a1);
}

void sub_1B7393C30()
{
  JUMPOUT(0x1B7393C24);
}

id NTKCropImage(void *a1, double a2, double a3, double a4, double a5)
{
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  uint64_t v18;
  CGImage *v19;
  CGImage *v20;
  id v21;
  CGRect v23;

  v9 = a1;
  v10 = v9;
  if (v9)
  {
    objc_msgSend(v9, "size");
    v12 = v11;
    v14 = v13;
    objc_msgSend(v10, "scale");
    v16 = v15;
    if ((v12 * v15))
      v17 = (v14 * v15) == 0;
    else
      v17 = 1;
    if (v17)
    {
      v21 = v10;
    }
    else
    {
      v18 = objc_msgSend(v10, "imageOrientation");
      v19 = (CGImage *)objc_msgSend(objc_retainAutorelease(v10), "CGImage");
      v23.size.height = a5 * v16;
      v23.size.width = a4 * v16;
      v23.origin.y = a3 * v16;
      v23.origin.x = a2 * v16;
      v20 = CGImageCreateWithImageInRect(v19, v23);
      objc_msgSend(MEMORY[0x1E0DC3870], "imageWithCGImage:scale:orientation:", v20, v18, v16);
      v21 = (id)objc_claimAutoreleasedReturnValue();
      CGImageRelease(v20);
    }
  }
  else
  {
    v21 = 0;
  }

  return v21;
}

void sub_1B7393D40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

id NTKDefaultMonochromeColorMatrix()
{
  if (NTKDefaultMonochromeColorMatrix::once != -1)
    dispatch_once(&NTKDefaultMonochromeColorMatrix::once, &__block_literal_global_43_0);
  return (id)NTKDefaultMonochromeColorMatrix::__matrix;
}

BOOL NTKIsDefaultMonochromeColorMatrix(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  NTKDefaultMonochromeColorMatrix();
  v2 = (id)objc_claimAutoreleasedReturnValue();

  return v2 == v1;
}

id NTKGenerateMonochromeColorMatrixFromImage(void *a1)
{
  id v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  size_t v6;
  double v7;
  size_t v8;
  char *v10;
  CGColorSpace *DeviceRGB;
  CGContext *v12;
  CGImage *v13;
  float v14;
  float v15;
  unsigned int v16;
  char *v17;
  unsigned int v18;
  float v19;
  uint64_t v20;
  signed int v21;
  signed int v22;
  signed int v23;
  int v24;
  uint64_t v25;
  void *v26;
  float v28;
  float v29[4];
  float v30;
  float v31;
  float v32;
  float v33;
  int v34;
  float v35;
  float v36;
  float v37;
  float v38;
  int v39;
  float v40;
  __int128 v41;
  int v42;
  _DWORD v43[256];
  uint64_t v44;
  CGRect v45;

  v44 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_18;
  objc_msgSend(v1, "scale");
  v4 = v3;
  objc_msgSend(v2, "size");
  v6 = (v4 * v5);
  v8 = (v4 * v7);
  if (!(_DWORD)v6 || (_DWORD)v8 == 0)
    goto LABEL_18;
  v10 = (char *)malloc_type_calloc(1uLL, (4 * v6 * v8), 0x5C680A36uLL);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v12 = CGBitmapContextCreate(v10, v6, v8, 8uLL, (4 * v6), DeviceRGB, 1u);
  v13 = (CGImage *)objc_msgSend(objc_retainAutorelease(v2), "CGImage");
  v45.size.width = (double)v6;
  v45.size.height = (double)v8;
  v45.origin.x = 0.0;
  v45.origin.y = 0.0;
  CGContextDrawImage(v12, v45, v13);
  bzero(v43, 0x400uLL);
  v16 = v6 * v8;
  if ((_DWORD)v6 * (_DWORD)v8)
  {
    v17 = v10;
    do
    {
      LOBYTE(v14) = *v17;
      LOBYTE(v15) = v17[1];
      *(float *)&v18 = (float)LODWORD(v15) * 0.7152;
      v19 = *(float *)&v18 + (float)((float)LODWORD(v14) * 0.2126);
      LOBYTE(v18) = v17[2];
      v15 = (float)v18;
      v14 = v19 + (float)(v15 * 0.0722);
      ++v43[v14];
      v17 += 4;
    }
    while (v17 < &v10[4 * v16]);
  }
  v20 = 0;
  v21 = 0;
  v22 = v16 / 0x3E8;
  while (1)
  {
    v21 += v43[v20];
    if (v21 > v22)
      break;
    if (++v20 == 256)
    {
      LODWORD(v20) = 0;
      break;
    }
  }
  v23 = 0;
  v24 = 255;
  while (1)
  {
    v23 += v43[v24];
    if (v23 > v22)
      break;
    if (--v24 == -1)
    {
      v24 = 255;
      break;
    }
  }
  CGContextRelease(v12);
  free(v10);
  CGColorSpaceRelease(DeviceRGB);
  if (v24 - (int)v20 > 9)
  {
    v28 = 255.0 / (float)(v24 - v20);
    v29[0] = v28 * 0.2126;
    v29[1] = v28 * 0.7152;
    v29[2] = v28 * 0.0722;
    v29[3] = 0.0;
    v30 = (float)((float)-(int)v20 / 255.0) * v28;
    v31 = v28 * 0.2126;
    v32 = v28 * 0.7152;
    v33 = v28 * 0.0722;
    v34 = 0;
    v35 = v30;
    v36 = v28 * 0.2126;
    v37 = v28 * 0.7152;
    v38 = v28 * 0.0722;
    v39 = 0;
    v40 = v30;
    v41 = xmmword_1B755E400;
    v42 = 0;
    objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", v29, "{CAColorMatrix=ffffffffffffffffffff}");
    v25 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
LABEL_18:
    NTKDefaultMonochromeColorMatrix();
    v25 = objc_claimAutoreleasedReturnValue();
  }
  v26 = (void *)v25;

  return v26;
}

void sub_1B739413C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id NTKInterpolateColorMatrixToIdentity(void *a1, double a2)
{
  id v3;
  void *v4;
  float32x4_t v5;
  float v6;
  float v7;
  float v8;
  float32x4_t v9;
  float v10;
  float v11;
  float32x4_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  void *v17;
  float v19;
  float32x4_t v20;
  float v21;
  float v22;
  float32x4_t v23;
  float v24;
  float v25;
  float32x4_t v26;
  float v27;
  float v28;
  float v29;
  _OWORD v30[5];

  v3 = a1;
  v4 = v3;
  v5 = 0uLL;
  memset(v30, 0, sizeof(v30));
  if (v3)
  {
    objc_msgSend(v3, "CAColorMatrixValue");
    v6 = *(float *)v30;
    v5 = *(float32x4_t *)((char *)v30 + 4);
    v7 = *((float *)&v30[1] + 2);
    v8 = *((float *)&v30[1] + 1);
    v9 = *(float32x4_t *)((char *)&v30[1] + 12);
    v11 = *((float *)&v30[2] + 3);
    v10 = *(float *)&v30[3];
    v12 = *(float32x4_t *)((char *)&v30[3] + 4);
    v13 = *((float *)&v30[4] + 2);
    v14 = *((float *)&v30[4] + 1);
    v15 = *((float *)&v30[4] + 3);
  }
  else
  {
    v15 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    v10 = 0.0;
    v11 = 0.0;
    v7 = 0.0;
    v8 = 0.0;
    v6 = 0.0;
    v9 = 0uLL;
    v12 = 0uLL;
  }
  v16 = a2;
  v19 = v6 + (float)((float)(1.0 - v6) * v16);
  v20 = vmulq_n_f32(v5, 1.0 - v16);
  v21 = (float)(1.0 - v16) * v8;
  v22 = v7 + (float)((float)(1.0 - v7) * v16);
  v23 = vmulq_n_f32(v9, 1.0 - v16);
  v24 = (float)(1.0 - v16) * v11;
  v25 = v10 + (float)((float)(1.0 - v10) * v16);
  v26 = vmulq_n_f32(v12, 1.0 - v16);
  v27 = (float)(1.0 - v16) * v14;
  v28 = v13 + (float)((float)(1.0 - v13) * v16);
  v29 = (float)(1.0 - v16) * v15;
  objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithBytes:objCType:", &v19, "{CAColorMatrix=ffffffffffffffffffff}");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_1B73942A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id NTKInterpolateBetweenImages(void *a1, void *a2, double a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  id v26;
  size_t v28;
  size_t v29;
  CGContext *v30;
  id v31;
  CGImage *v32;
  CGImage *v33;
  int32x2_t v34;
  uint8x8_t v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  __int32 *v39;
  __int32 *v40;
  __int32 v41;
  int16x8_t v42;
  CGImage *Image;
  char *v44;
  void *v45;
  CGContext *c;
  CGColorSpace *space;
  CGRect v48;
  CGRect v49;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  v8 = v6;
  if (!v5)
    goto LABEL_12;
  v8 = v5;
  if (!v6)
    goto LABEL_12;
  objc_msgSend(v5, "size");
  v10 = v9;
  v12 = v11;
  objc_msgSend(v5, "scale");
  v14 = v13;
  v15 = (v10 * v13);
  v16 = (v12 * v13);
  v17 = !v15 || v16 == 0;
  v8 = v7;
  if (v17)
    goto LABEL_12;
  objc_msgSend(v7, "size");
  v19 = v18;
  v21 = v20;
  objc_msgSend(v7, "scale");
  v23 = (v19 * v22);
  v24 = (v21 * v22);
  v25 = !v23 || v24 == 0;
  v8 = v7;
  if (v25)
  {
LABEL_12:
    v26 = v8;
  }
  else
  {
    if (v15 <= v23)
      v28 = v23;
    else
      v28 = v15;
    if (v16 <= v24)
      v29 = v24;
    else
      v29 = v16;
    space = CGColorSpaceCreateDeviceRGB();
    v44 = (char *)malloc_type_calloc(1uLL, (4 * v28 * v29), 0x26161728uLL);
    c = CGBitmapContextCreate(v44, v28, v29, 8uLL, (4 * v28), space, 1u);
    v45 = malloc_type_calloc(1uLL, (4 * v28 * v29), 0xB9EA0708uLL);
    v30 = CGBitmapContextCreate(v45, v28, v29, 8uLL, (4 * v28), space, 1u);
    v31 = objc_retainAutorelease(v5);
    v32 = (CGImage *)objc_msgSend(v31, "CGImage");
    v48.size.height = (double)v16;
    v48.size.width = (double)v15;
    v48.origin.x = 0.0;
    v48.origin.y = 0.0;
    CGContextDrawImage(c, v48, v32);
    v33 = (CGImage *)objc_msgSend(objc_retainAutorelease(v7), "CGImage");
    v49.size.height = (double)v24;
    v49.size.width = (double)v23;
    v49.origin.x = 0.0;
    v49.origin.y = 0.0;
    CGContextDrawImage(v30, v49, v33);
    if ((_DWORD)v28 * (_DWORD)v29)
    {
      v37 = a3;
      *(float *)v34.i32 = 1.0 - v37;
      v38 = (float32x4_t)vdupq_lane_s32(v34, 0);
      v39 = (__int32 *)v44;
      v40 = (__int32 *)v45;
      do
      {
        v35.i32[0] = *v39;
        v41 = *v40++;
        v36.i32[0] = v41;
        v36 = vmlaq_f32(vmulq_n_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v36.f32))), v37), v38, vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v35))));
        v42 = (int16x8_t)vcvtq_s32_f32(v36);
        *(int16x4_t *)v42.i8 = vmovn_s32((int32x4_t)v42);
        v35 = (uint8x8_t)vmovn_s16(v42);
        *v39++ = v35.i32[0];
      }
      while (v39 < (__int32 *)&v44[4 * (v28 * v29)]);
    }
    Image = CGBitmapContextCreateImage(c);
    CGContextRelease(c);
    CGContextRelease(v30);
    objc_msgSend(MEMORY[0x1E0DC3870], "imageWithCGImage:scale:orientation:", Image, objc_msgSend(v31, "imageOrientation"), v14);
    v26 = (id)objc_claimAutoreleasedReturnValue();
    CGImageRelease(Image);
    free(v44);
    free(v45);
    CGColorSpaceRelease(space);
  }

  return v26;
}

void sub_1B7394570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float _NTKHue2RGB(float a1, float a2, float a3)
{
  float v3;

  if (a3 < 0.0)
    a3 = a3 + 1.0;
  if (a3 > 1.0)
    a3 = a3 + -1.0;
  if (a3 < 0.16667)
  {
    v3 = (float)(a2 - a1) * 6.0;
    return a1 + (float)(v3 * a3);
  }
  if (a3 >= 0.5)
  {
    if (a3 < 0.66667)
    {
      v3 = (float)(a2 - a1) * (float)(0.66667 - a3);
      a3 = 6.0;
      return a1 + (float)(v3 * a3);
    }
    return a1;
  }
  return a2;
}

float32x2_t *_NTKNewSubdividedPath@<X0>(float32x2_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  float32x2_t *v5;
  uint64_t v6;
  float32x2_t *v7;
  float32x2_t v8;
  uint64_t v9;
  float32x2_t v10;
  uint64_t v11;

  v3 = result[1].u32[0];
  v4 = 2 * v3;
  *(_DWORD *)(a2 + 8) = 2 * v3;
  *(_DWORD *)(a2 + 12) = 2 * v3;
  if ((int)v3 <= 0)
  {
    *(_QWORD *)a2 = 0;
  }
  else
  {
    v5 = result;
    result = (float32x2_t *)malloc_type_malloc(8 * (2 * v3), 0x100004000313F17uLL);
    v6 = 0;
    *(_QWORD *)a2 = result;
    v7 = result + 1;
    do
    {
      v8 = *(float32x2_t *)(*(_QWORD *)v5 + 8 * v6);
      if (v3 - 1 == v6)
        v9 = 0;
      else
        v9 = v6 + 1;
      v10 = vmul_f32(vadd_f32(v8, *(float32x2_t *)(*(_QWORD *)v5 + 8 * v9)), (float32x2_t)0x3F0000003F000000);
      v7[-1] = v8;
      *v7 = v10;
      v7 += 2;
      ++v6;
    }
    while (v3 != v6);
    v11 = 0;
    __asm { FMOV            V1.2S, #0.25 }
    do
    {
      result[v11] = vmul_f32(vadd_f32(vmla_f32(result[((int)v11 + 1) % v4], (float32x2_t)0x4000000040000000, result[v11]), result[(v4 - 1 + (int)v11) % v4]), _D1);
      v11 += 2;
    }
    while (v11 < v4);
  }
  return result;
}

void sub_1B7394EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _AddWidgetMigration(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  objc_class *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;

  v13 = (objc_class *)MEMORY[0x1E0C94578];
  v14 = a7;
  v15 = a6;
  v16 = a5;
  v17 = a4;
  v18 = a3;
  v21 = a2;
  v19 = a1;
  v20 = (void *)objc_msgSend([v13 alloc], "initWithExtensionBundleIdentifier:containerBundleIdentifier:kind:intent:", v17, v16, v15, 0);

  objc_msgSend(v19, "setObject:forKeyedSubscript:", v20, v18);
  objc_msgSend(v21, "setObject:forKeyedSubscript:", v14, v18);

}

void sub_1B7395708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1B7395934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

id NTKSnapshotForFace(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  NTKSnapshotMappedImageCache();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dailySnapshotKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "imageForKey:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id NTKUnadornedSnapshotForFace(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  NTKSnapshotMappedImageCache();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "unadornedSnapshotKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "imageForKey:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void NTKCFDictionarySetInt(__CFDictionary *a1, const void *a2, int a3)
{
  CFNumberRef v5;
  int valuePtr;

  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

BOOL x_power_of_two(uint64_t a1)
{
  return (a1 & (a1 - 1)) == 0;
}

uint64_t x_align_to(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = a2 - 1 + a1;
  if ((a2 & (a2 - 1)) != 0)
    return v2 / a2 * a2;
  else
    return v2 & -(uint64_t)a2;
}

__CFDictionary *NTKBGRASurfacePropertiesForSize(char a1, double a2, double a3)
{
  __CFDictionary *Mutable;
  float v7;
  unint64_t v8;
  float v9;
  unint64_t v10;
  int AlignedBytesPerRow;
  const void *v12;
  __CFDictionary *v13;
  int v14;
  int v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFDictionaryRef plane_dict;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CFDictionaryRef v30;
  CFArrayRef v31;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  if (NTKBGRASurfacePropertiesForSize_onceToken != -1)
    dispatch_once(&NTKBGRASurfacePropertiesForSize_onceToken, &__block_literal_global_60);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = a2;
  v8 = llroundf(v7);
  v9 = a3;
  v10 = llroundf(v9);
  if ((a1 & 2) != 0 && NTKBGRASurfacePropertiesForSize_deviceSupportsExtendedColor)
  {
    if ((a1 & 1) != 0)
    {
      v16 = (4 * v8 + 255) & 0xFFFFFFFFFFFFFF00;
      v17 = (_QWORD *)MEMORY[0x1E0C85AD8];
      v18 = *MEMORY[0x1E0C85AD8] - 1;
      v19 = v18 + v16 * v10;
      v20 = v19 / *MEMORY[0x1E0C85AD8] * *MEMORY[0x1E0C85AD8];
      v21 = v19 & -*MEMORY[0x1E0C85AD8];
      if ((*MEMORY[0x1E0C85AD8] & v18) != 0)
        v22 = v20;
      else
        v22 = v21;
      plane_dict = create_plane_dict(v8, v10, v16, 0, v22, 4);
      v24 = (v8 + 255) & 0xFFFFFFFFFFFFFF00;
      v25 = *v17 - 1;
      v26 = v25 + v24 * v10;
      v27 = v26 / *v17 * *v17;
      v28 = v26 & -*v17;
      if ((*v17 & v25) != 0)
        v29 = v27;
      else
        v29 = v28;
      v30 = create_plane_dict(v8, v10, v24, v22, v29, 1);
      values[0] = plane_dict;
      values[1] = v30;
      v31 = CFArrayCreate(0, (const void **)values, 2, MEMORY[0x1E0C9B378]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CBC158], v31);
      CFRelease(v31);
      CFRelease(plane_dict);
      CFRelease(v30);
      NTKCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBC1E0], v8);
      NTKCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBC008], v10);
      NTKCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBEE0], v29 + v22);
      v12 = (const void *)*MEMORY[0x1E0CBC070];
      v13 = Mutable;
      v14 = 1647534392;
    }
    else
    {
      AlignedBytesPerRow = CGBitmapGetAlignedBytesPerRow();
      NTKCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBC1E0], v8);
      NTKCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBC008], v10);
      NTKCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF08], AlignedBytesPerRow);
      NTKCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBEE0], AlignedBytesPerRow * v10);
      NTKCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF00], 4);
      v12 = (const void *)*MEMORY[0x1E0CBC070];
      v13 = Mutable;
      v14 = 1999843442;
    }
  }
  else
  {
    v15 = CGBitmapGetAlignedBytesPerRow();
    NTKCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBC1E0], v8);
    NTKCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBC008], v10);
    NTKCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF08], v15);
    NTKCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBEE0], v15 * v10);
    NTKCFDictionarySetInt(Mutable, (const void *)*MEMORY[0x1E0CBBF00], 4);
    v12 = (const void *)*MEMORY[0x1E0CBC070];
    v13 = Mutable;
    v14 = 1111970369;
  }
  NTKCFDictionarySetInt(v13, v12, v14);
  return Mutable;
}

CFDictionaryRef create_plane_dict(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  void *v8;
  CFDictionaryRef v9;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t valuePtr;
  void *values[7];
  void *keys[8];

  keys[7] = *(void **)MEMORY[0x1E0C80C00];
  v17 = a2;
  valuePtr = a1;
  v15 = a4;
  v16 = a3;
  v13 = 1;
  v14 = a5;
  v12 = a6;
  v6 = (void *)*MEMORY[0x1E0CBC140];
  keys[0] = *(void **)MEMORY[0x1E0CBC178];
  keys[1] = v6;
  v7 = (void *)*MEMORY[0x1E0CBC160];
  keys[2] = *(void **)MEMORY[0x1E0CBC098];
  keys[3] = v7;
  v8 = (void *)*MEMORY[0x1E0CBC110];
  keys[4] = *(void **)MEMORY[0x1E0CBC168];
  keys[5] = v8;
  keys[6] = *(void **)MEMORY[0x1E0CBC090];
  values[0] = CFNumberCreate(0, kCFNumberCFIndexType, &valuePtr);
  values[1] = CFNumberCreate(0, kCFNumberCFIndexType, &v17);
  values[2] = CFNumberCreate(0, kCFNumberCFIndexType, &v16);
  values[3] = CFNumberCreate(0, kCFNumberCFIndexType, &v15);
  values[4] = CFNumberCreate(0, kCFNumberCFIndexType, &v14);
  values[5] = CFNumberCreate(0, kCFNumberCFIndexType, &v13);
  values[6] = CFNumberCreate(0, kCFNumberCFIndexType, &v12);
  v9 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 7; ++i)
    CFRelease(values[i]);
  return v9;
}

id NTKRenderSnapshotAndTextureFromWindow(void *a1, char a2, _QWORD *a3)
{
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CGFloat v11;
  double v12;
  double v13;
  NSObject *v14;
  void *v15;
  void *v16;
  const __CFDictionary *v17;
  __IOSurface *v18;
  int v19;
  CGImage *v20;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  void *v28;
  CATransform3D buf;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  objc_msgSend(v5, "bounds");
  v7 = v6;
  v9 = v8;
  objc_msgSend(v5, "contentScaleFactor");
  v11 = v10;
  v12 = v10 * v7;
  v13 = v10 * v9;
  objc_msgSend(v5, "_contextId");
  _NTKLoggingObjectForDomain(4, (uint64_t)"NTKLoggingDomainSnapshot");
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.m11) = 0;
    _os_log_impl(&dword_1B72A3000, v14, OS_LOG_TYPE_DEFAULT, "Rendering snapshot from window.", (uint8_t *)&buf, 2u);
  }

  v15 = (void *)MEMORY[0x1BCCA7FA8]();
  CATransform3DMakeScale(&buf, v11, v11, v11);
  objc_msgSend(MEMORY[0x1E0CD2728], "mainDisplay");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v16, "name");

  NTKBGRASurfacePropertiesForSize(a2, v12, v13);
  v17 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v18 = IOSurfaceCreate(v17);

  if (!v18)
  {
    _NTKLoggingObjectForDomain(4, (uint64_t)"NTKLoggingDomainSnapshot");
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      NTKRenderSnapshotAndTextureFromWindow_cold_2();

    goto LABEL_16;
  }
  IOSurfaceLock(v18, 0, 0);
  v19 = CARenderServerRenderDisplayClientListWithTransformList();
  IOSurfaceUnlock(v18, 0, 0);
  if (!v19)
  {
    _NTKLoggingObjectForDomain(4, (uint64_t)"NTKLoggingDomainSnapshot");
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      NTKRenderSnapshotAndTextureFromWindow_cold_3();

    CFRelease(v18);
LABEL_16:
    v24 = 0;
    goto LABEL_17;
  }
  v20 = (CGImage *)_UICreateCGImageFromIOSurfaceWithOptions();
  if (a3)
  {
    if ((a2 & 2) != 0)
      v21 = 555;
    else
      v21 = 81;
    v22 = (id)objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v21, (unint64_t)v12, (unint64_t)v13, 0);
    objc_msgSend(off_1E6BCA700, "sharedDevice");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)objc_msgSend(v23, "newTextureWithDescriptor:iosurface:plane:", v22, v18, 0);

  }
  else
  {
    v24 = 0;
  }
  CFRelease(v18);
  if (v20)
  {
    v28 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3870]), "initWithCGImage:scale:orientation:", v20, 0, v11);
    CGImageRelease(v20);
    goto LABEL_20;
  }
LABEL_17:
  _NTKLoggingObjectForDomain(4, (uint64_t)"NTKLoggingDomainSnapshot");
  v27 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    NTKRenderSnapshotAndTextureFromWindow_cold_1();

  v28 = 0;
LABEL_20:
  objc_autoreleasePoolPop(v15);
  if (a3)
    *a3 = objc_retainAutorelease(v24);

  return v28;
}

id NTKRenderSnapshotFromWindow(void *a1, char a2)
{
  return NTKRenderSnapshotAndTextureFromWindow(a1, a2, 0);
}

id NTKCropHorizontalPaddingFromSnapshot(void *a1)
{
  id v1;
  void *v2;
  id v3;
  CGImage *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  unint64_t Width;
  unint64_t Height;
  CGContext *v14;
  CGContext *v15;
  void *Data;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  void *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;
  void *v30;
  id v31;
  NSObject *v32;
  _QWORD v33[4];
  id v34;
  double v35;
  double v36;
  double v37;
  _QWORD aBlock[6];
  __int128 v39;
  void *v40;
  CGRect v41;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = objc_retainAutorelease(v1);
    v4 = (CGImage *)objc_msgSend(v3, "CGImage");
    objc_msgSend(v3, "scale");
    if (v5 != 0.0)
    {
      v6 = v5;
      objc_msgSend(v3, "size");
      v9 = v8;
      v10 = v7;
      if (v8 != *MEMORY[0x1E0C9D820] || v7 != *(double *)(MEMORY[0x1E0C9D820] + 8))
      {
        Width = CGImageGetWidth(v4);
        Height = CGImageGetHeight(v4);
        v14 = CGBitmapContextCreate(0, Width, Height, 8uLL, Width, 0, 7u);
        if (!v14)
        {
          _NTKLoggingObjectForDomain(59, (uint64_t)"NTKLoggingDomainComplicationSnapshotRenderer");
          v18 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_ERROR))
            NTKCropHorizontalPaddingFromSnapshot_cold_1();
          v22 = 0;
          goto LABEL_33;
        }
        v15 = v14;
        v41.size.width = (double)Width;
        v41.size.height = (double)Height;
        v41.origin.x = 0.0;
        v41.origin.y = 0.0;
        CGContextDrawImage(v14, v41, v4);
        Data = CGBitmapContextGetData(v15);
        v17 = MEMORY[0x1E0C809B0];
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 3221225472;
        aBlock[2] = __NTKCropHorizontalPaddingFromSnapshot_block_invoke;
        aBlock[3] = &__block_descriptor_72_e8_B16__0Q8l;
        aBlock[4] = Height;
        aBlock[5] = Width;
        v39 = xmmword_1B755E4A0;
        v40 = Data;
        v18 = (uint64_t)_Block_copy(aBlock);
        if (Width)
        {
          v19 = 0;
          while (((*(uint64_t (**)(uint64_t, unint64_t))(v18 + 16))(v18, v19) & 1) == 0)
          {
            if (Width == ++v19)
              goto LABEL_12;
          }
          v20 = Width - 1;
          v21 = Width - 1;
          if (Width - 1 < v19)
            goto LABEL_23;
        }
        else
        {
LABEL_12:
          v19 = 0;
          v20 = Width - 1;
        }
        v21 = v20;
        while (((*(uint64_t (**)(uint64_t, unint64_t))(v18 + 16))(v18, v21) & 1) == 0)
        {
          if (--v21 < v19)
          {
            v21 = v20;
            break;
          }
        }
LABEL_23:
        CGContextRelease(v15);
        v22 = 0;
        if (v21 - v19 != -1 && v21 - v19 + 1 != Width)
        {
          objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          CLKSizeRoundForDevice();
          v26 = v25;
          v28 = v27;

          v22 = 0;
          if (v26 != 0.0 && v28 != 0.0)
          {
            v29 = objc_alloc_init(MEMORY[0x1E0DC3830]);
            objc_msgSend(v29, "setOpaque:", 0);
            objc_msgSend(v29, "setScale:", v6);
            v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3828]), "initWithSize:format:", v29, v26, v28);
            v33[0] = v17;
            v33[1] = 3221225472;
            v33[2] = __NTKCropHorizontalPaddingFromSnapshot_block_invoke_2;
            v33[3] = &unk_1E6BD25E8;
            v34 = v3;
            v35 = -(double)v19 / v6;
            v36 = v9;
            v37 = v10;
            objc_msgSend(v30, "imageWithActions:", v33);
            v31 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            if (objc_msgSend(v31, "CGImage"))
            {
              v22 = v31;
            }
            else
            {
              _NTKLoggingObjectForDomain(59, (uint64_t)"NTKLoggingDomainComplicationSnapshotRenderer");
              v32 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                NTKCropHorizontalPaddingFromSnapshot_cold_2();

              v22 = 0;
            }

          }
        }
LABEL_33:

        goto LABEL_18;
      }
    }
  }
  v22 = 0;
LABEL_18:

  return v22;
}

uint64_t NTKCanDeviceSnapshotsAsASTC()
{
  return 1;
}

id _NTKCachedSnapshotPath()
{
  if (_NTKCachedSnapshotPath_onceToken != -1)
    dispatch_once(&_NTKCachedSnapshotPath_onceToken, &__block_literal_global_74);
  return (id)_NTKCachedSnapshotPath_snapshotPath;
}

id _NTKCachedComplicationSnapshotPath()
{
  if (_NTKCachedComplicationSnapshotPath_onceToken != -1)
    dispatch_once(&_NTKCachedComplicationSnapshotPath_onceToken, &__block_literal_global_81);
  return (id)_NTKCachedComplicationSnapshotPath_snapshotPath;
}

id _NTKCachedSnapshotPathForFace(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  _NTKCachedSnapshotPath();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dailySnapshotKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "stringByAppendingPathComponent:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringByAppendingPathExtension:", CFSTR("astc"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id NTKCachedSnapshotForFace(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  const __CFArray *ImagesFromPath;
  void *v6;
  NSObject *v7;
  void *v8;
  const void *ValueAtIndex;
  void *v10;
  void *v11;
  uint64_t v12;
  CFTypeRef v14[2];

  v1 = a1;
  _NTKCachedSnapshotPathForFace(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "fileExistsAtPath:", v2);

  if (v4)
  {
    v14[0] = 0;
    v14[1] = 0;
    ImagesFromPath = (const __CFArray *)CPBitmapCreateImagesFromPath();
    _NTKLoggingObjectForDomain(4, (uint64_t)"NTKLoggingDomainSnapshot");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      NTKCachedSnapshotForFace_cold_1((uint64_t)v2, v14, v7);

    if (v14[0])
      CFRelease(v14[0]);
    +[NTKFaceSnapshotContext currentContext](NTKFaceSnapshotContext, "currentContext");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v1, "snapshotContext:isStaleRelativeToContext:", 0, v8) & 1) != 0 || !ImagesFromPath)
    {
      v12 = 0;
      v6 = 0;
      if (!ImagesFromPath)
      {
LABEL_13:

        goto LABEL_14;
      }
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(ImagesFromPath, 0);
      v10 = (void *)MEMORY[0x1E0DC3870];
      objc_msgSend(v1, "device");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "screenScale");
      objc_msgSend(v10, "imageWithCGImage:scale:orientation:", ValueAtIndex, 0);
      v12 = objc_claimAutoreleasedReturnValue();

    }
    CFRelease(ImagesFromPath);
    v6 = (void *)v12;
    goto LABEL_13;
  }
  v6 = 0;
LABEL_14:

  return v6;
}

id NTKCacheSnapshotOfFace(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v10;
  void *v11;
  id v12;
  const __CFAllocator *Default;
  CFArrayRef v14;
  void *v15;
  void *v16;
  id v17;
  int v18;
  int v19;
  int v20;
  NSObject *v21;
  NSObject *v22;
  int *v23;
  char *v24;
  const __CFArray *ImagesFromPath;
  const __CFArray *v26;
  const void *ValueAtIndex;
  const void *v28;
  double v29;
  double v30;
  uint64_t v31;
  void *v33;
  void *v34;
  _QWORD v35[2];
  uint8_t buf[4];
  id v37;
  __int16 v38;
  _BYTE v39[14];
  __int16 v40;
  uint64_t v41;
  void *values[2];

  values[1] = *(void **)MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = 0;
  if (v3 && a2)
  {
    v5 = a2;
    _NTKCachedSnapshotPath();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    _NTKCachedSnapshotPathForFace(v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    +[NTKFaceSnapshotContext currentContext](NTKFaceSnapshotContext, "currentContext");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "fileExistsAtPath:isDirectory:", v6, 0);

    if ((v10 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v6, 1, 0, 0);

    }
    v12 = objc_retainAutorelease(v3);
    values[0] = (void *)objc_msgSend(v12, "CGImage");
    Default = CFAllocatorGetDefault();
    v14 = CFArrayCreate(Default, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
    objc_msgSend(v15, "encodeObject:forKey:", v8, CFSTR("context"));
    objc_msgSend(v15, "encodedData");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v35[1] = 0;
    if (CPBitmapWriteImagesToPath())
    {
      v33 = v6;
      v34 = v8;
      v35[0] = 65541;
      v17 = objc_retainAutorelease(v7);
      v18 = open((const char *)objc_msgSend(v17, "UTF8String"), 0);
      v19 = v18;
      if (v18 < 0)
      {
        _NTKLoggingObjectForDomain(24, (uint64_t)"NTKLoggingDomainCompanionApp");
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          NTKCacheSnapshotOfFace_cold_1((uint64_t)v17, v22);
      }
      else
      {
        v20 = ffsctl(v18, 0xC0084A44uLL, v35, 0);
        _NTKLoggingObjectForDomain(24, (uint64_t)"NTKLoggingDomainCompanionApp");
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = v21;
        if (v20)
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            v23 = __error();
            v24 = strerror(*v23);
            *(_DWORD *)buf = 138413058;
            v37 = v17;
            v38 = 1024;
            *(_DWORD *)v39 = v20;
            *(_WORD *)&v39[4] = 2080;
            *(_QWORD *)&v39[6] = v24;
            v40 = 2048;
            v41 = v35[0];
            _os_log_error_impl(&dword_1B72A3000, v22, OS_LOG_TYPE_ERROR, "Failed to mark %@ as purgeable %d (%s) (flags 0x%llx)", buf, 0x26u);
          }
        }
        else if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          v37 = v17;
          v38 = 2048;
          *(_QWORD *)v39 = v35[0];
          _os_log_impl(&dword_1B72A3000, v22, OS_LOG_TYPE_DEFAULT, "Marked %@ purgeable with flags 0x%llx", buf, 0x16u);
        }
      }

      close(v19);
      ImagesFromPath = (const __CFArray *)CPBitmapCreateImagesFromPath();
      if (ImagesFromPath)
      {
        v26 = ImagesFromPath;
        ValueAtIndex = CFArrayGetValueAtIndex(ImagesFromPath, 0);
        v6 = v33;
        if (ValueAtIndex)
        {
          v28 = ValueAtIndex;
          objc_msgSend(v12, "scale");
          v30 = v29;
          v31 = objc_msgSend(v12, "imageOrientation");
          objc_msgSend(MEMORY[0x1E0DC3870], "imageWithCGImage:scale:orientation:", v28, v31, v30);
          v4 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v4 = 0;
        }
        CFRelease(v26);
      }
      else
      {
        v4 = 0;
        v6 = v33;
      }
      v8 = v34;
    }
    else
    {
      v4 = 0;
    }
    CFRelease(v14);

  }
  return v4;
}

id NTKSecondaryForegroundGrayColor()
{
  if (NTKSecondaryForegroundGrayColor_onceToken != -1)
    dispatch_once(&NTKSecondaryForegroundGrayColor_onceToken, &__block_literal_global_56);
  return (id)NTKSecondaryForegroundGrayColor_color;
}

id NTKForegroundColor(uint64_t a1)
{
  id v1;
  id v2;
  void *v3;
  id v5;
  id v6;

  v5 = 0;
  v6 = 0;
  NTKFaceColorNameAndCollection(a1, &v6, &v5);
  v1 = v6;
  v2 = v5;
  +[NTKFaceColorPalette colorWithName:inDomain:](NTKFaceColorPalette, "colorWithName:inDomain:", v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id NTKDFaceFromPayloadData(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  dispatch_semaphore_t v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD v14[4];
  NSObject *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  void (*v22)(uint64_t);
  id v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v5 = a1;
  v6 = a2;
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = __Block_byref_object_copy__18;
  v28 = __Block_byref_object_dispose__18;
  v29 = 0;
  if (v5)
  {
    v18 = 0;
    v19 = &v18;
    v20 = 0x3032000000;
    v21 = __Block_byref_object_copy__18;
    v22 = __Block_byref_object_dispose__18;
    v23 = 0;
    v7 = dispatch_semaphore_create(0);
    objc_msgSend(MEMORY[0x1E0C944B0], "deviceForNRDeviceUUID:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __NTKDFaceFromPayloadData_block_invoke;
    v14[3] = &unk_1E6BD2698;
    v16 = &v24;
    v17 = &v18;
    v9 = v7;
    v15 = v9;
    NTKDCreateFaceFromData(v5, v8, 0, v14, 0);
    dispatch_semaphore_wait(v9, 0xFFFFFFFFFFFFFFFFLL);
    v10 = (void *)v19[5];
    if (v10)
      *a3 = objc_retainAutorelease(v10);

    _Block_object_dispose(&v18, 8);
    v11 = (void *)v25[5];
  }
  else
  {
    v11 = 0;
  }
  v12 = v11;
  _Block_object_dispose(&v24, 8);

  return v12;
}

void sub_1B7398BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

id NTKDFaceConfigurationFromPayloadData(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;

  if (a1)
  {
    v3 = (void *)MEMORY[0x1E0CB36D8];
    v4 = a2;
    objc_msgSend(v3, "JSONObjectWithData:options:error:", a1, 0, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C944B0], "deviceForNRDeviceUUID:", v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    _NTKLoggingObjectForDomain(5, (uint64_t)"NTKLoggingDomainSync");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      NTKDFaceConfigurationFromPayloadData_cold_1((uint64_t)v5, v7);

    +[NTKFace faceWithJSONObjectRepresentation:forDevice:](NTKFace, "faceWithJSONObjectRepresentation:forDevice:", v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v8, "configuration");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id _SyncZIPArchivist()
{
  if (_SyncZIPArchivist_onceToken != -1)
    dispatch_once(&_SyncZIPArchivist_onceToken, &__block_literal_global_57);
  return (id)_SyncZIPArchivist__archivist;
}

id NTKDFaceResourceDirectoryFromPayloadData(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  dispatch_semaphore_t v6;
  void *v7;
  NSObject *v8;
  _QWORD v10[4];
  NSObject *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = a1;
  if (!v1)
    goto LABEL_4;
  NSTemporaryDirectory();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "UUIDString");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringByAppendingPathComponent:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = dispatch_semaphore_create(0);
  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  _SyncZIPArchivist();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __NTKDFaceResourceDirectoryFromPayloadData_block_invoke;
  v10[3] = &unk_1E6BD26E0;
  v12 = &v13;
  v8 = v6;
  v11 = v8;
  objc_msgSend(v7, "unzipData:toPath:completionHandler:", v1, v5, v10);

  dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
  LODWORD(v7) = *((unsigned __int8 *)v14 + 24);

  _Block_object_dispose(&v13, 8);
  if (!(_DWORD)v7)
  {

LABEL_4:
    v5 = 0;
  }

  return v5;
}

void sub_1B7398F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id NTKDOrderedUUIDsFromPayloadData(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  void *v11;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v13 = v1;
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v13, 0, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_opt_class();
    NTKValidateArray(v3, v4);
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v15;
      v8 = *MEMORY[0x1E0CB2C88];
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v15 != v7)
            objc_enumerationMutation(v5);
          v10 = *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i);
          v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v10);
          if (!v11)
            objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", v8, CFSTR("invalid UUID string: %@"), v10);
          objc_msgSend(v2, "addObject:", v11);

        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v6);
    }

    v1 = v13;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_1B73990F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  void *v19;
  id v20;
  NSObject *v21;

  if (a2 == 1)
  {
    v20 = objc_begin_catch(exception_object);
    _NTKLoggingObjectForDomain(5, (uint64_t)"NTKLoggingDomainSync");
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v20, "reason");
      objc_claimAutoreleasedReturnValue();
      NTKDOrderedUUIDsFromPayloadData_cold_1();
    }

    objc_end_catch();
    JUMPOUT(0x1B73990A0);
  }
  _Unwind_Resume(exception_object);
}

id NTKDSelectedUUIDFromPayloadData(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = (objc_class *)MEMORY[0x1E0CB3940];
    v2 = a1;
    v3 = (void *)objc_msgSend([v1 alloc], "initWithData:encoding:", v2, 4);

    if (v3)
      v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v3);
    else
      v4 = 0;

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

id NTKDClientSampleDataFromPayloadData(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v1, 0);
    objc_msgSend(v2, "setDecodingFailurePolicy:", 0);
    v3 = (void *)MEMORY[0x1E0C99E60];
    v4 = objc_opt_class();
    v5 = objc_opt_class();
    v6 = objc_opt_class();
    v7 = objc_opt_class();
    objc_msgSend(v3, "setWithObjects:", v4, v5, v6, v7, objc_opt_class(), 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "decodeObjectOfClasses:forKey:", v8, *MEMORY[0x1E0CB2CD0]);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_1B73993B8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id NTKDClientSampleTemplateFromPayloadData(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v1, 0);
    objc_msgSend(v2, "setDecodingFailurePolicy:", 0);
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", objc_opt_class(), 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "decodeObjectOfClasses:forKey:", v3, *MEMORY[0x1E0CB2CD0]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1B7399528(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id NTKDComplicationDescriptorsFromPayloadData(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v1, 0);
    objc_msgSend(v2, "setDecodingFailurePolicy:", 0);
    v3 = (void *)MEMORY[0x1E0C99E60];
    v4 = objc_opt_class();
    objc_msgSend(v3, "setWithObjects:", v4, objc_opt_class(), 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "decodeObjectOfClasses:forKey:", v5, *MEMORY[0x1E0CB2CD0]);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

void sub_1B73996A8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

id NTKDPayloadDataFromFace(void *a1)
{
  return NTKDDataFromFace(a1, 0);
}

id NTKDPayloadDataFromFaceConfiguration(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "JSONObjectRepresentation");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    _NTKLoggingObjectForDomain(5, (uint64_t)"NTKLoggingDomainSync");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      NTKDPayloadDataFromFaceConfiguration_cold_1((uint64_t)v3, (uint64_t)v2, v4);

    objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v3, 0, 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id NTKDPayloadDataFromFaceResourceDirectory(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  _SyncZIPArchivist();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "zippedDataForPath:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id NTKDPayloadDataFromOrderedUUIDs(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v1, "count"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = v2;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * i), "UUIDString", (_QWORD)v12);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v9);

        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v6);
    }

    objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v3, 0, 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id NTKDPayloadDataFromSelectedUUID(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "UUIDString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dataUsingEncoding:", 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id NTKDPayloadDataFromComplicationSampleData(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  objc_msgSend(v1, "setEncodesTemplatesAsPaths:", 0);
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v1, 1, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setEncodesTemplatesAsPaths:", 1);

  return v2;
}

uint64_t NTKDPayloadDataFromComplicationTemplate(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", a1, 1, 0);
}

uint64_t NTKDPayloadDataFromComplicationDescriptors(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", a1, 1, 0);
}

uint64_t OUTLINED_FUNCTION_2_4(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(_QWORD *)(a2 + 4) = result;
  return result;
}

const __CFString *NTKSolarWaypointLocalizedStringKeyForType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("SOLAR_CUSTOM");
  else
    return off_1E6BD2700[a1 - 1];
}

void sub_1B739A0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B739A304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B739AD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B739BAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B739BC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void NTKBuildPathElement(void *a1, uint64_t a2)
{
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  NTKBezierPathElement *v8;
  id v9;

  v9 = a1;
  if (objc_msgSend(v9, "count"))
  {
    objc_msgSend(v9, "lastObject");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "endPoint");
    v5 = v4;
    v7 = v6;

  }
  else
  {
    v5 = *MEMORY[0x1E0C9D538];
    v7 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  }
  v8 = -[NTKBezierPathElement initWithStartPoint:pathElement:]([NTKBezierPathElement alloc], "initWithStartPoint:pathElement:", a2, v5, v7);
  objc_msgSend(v9, "addObject:", v8);

}

void sub_1B739E24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B739FCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void _imageForAsset(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  double v6;
  unint64_t v7;
  double v8;
  _QWORD v9[4];
  id v10;
  id v11;
  double v12;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    v6 = 768.0 / (double)(unint64_t)objc_msgSend(v3, "pixelWidth");
    v7 = objc_msgSend(v3, "pixelHeight");
    if (v6 >= 768.0 / (double)v7)
      v8 = 768.0 / (double)v7;
    else
      v8 = v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = ___imageForAsset_block_invoke;
    v9[3] = &unk_1E6BD2910;
    v10 = v3;
    v12 = v8;
    v11 = v5;
    +[NTKCompanionResourceDirectoryEditor _imageDataForAsset:completion:](NTKCompanionResourceDirectoryEditor, "_imageDataForAsset:completion:", v10, v9);

  }
  else
  {
    (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
  }

}

void ___imageForAsset_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  id v6;
  NTKCompanionImageDataScaler *v7;
  _QWORD v8[4];
  id v9;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  v7 = -[NTKCompanionImageDataScaler initWithSize:crop:data:orientation:outputSize:]([NTKCompanionImageDataScaler alloc], "initWithSize:crop:data:orientation:outputSize:", v6, a3, (double)(unint64_t)objc_msgSend(v5, "pixelWidth"), (double)(unint64_t)objc_msgSend(*(id *)(a1 + 32), "pixelHeight"), 0.0, 0.0, (double)(unint64_t)objc_msgSend(*(id *)(a1 + 32), "pixelWidth"), (double)(unint64_t)objc_msgSend(*(id *)(a1 + 32), "pixelHeight"), *(double *)(a1 + 48) * (double)(unint64_t)objc_msgSend(*(id *)(a1 + 32), "pixelWidth"), *(double *)(a1 + 48) * (double)(unint64_t)objc_msgSend(*(id *)(a1 + 32), "pixelHeight"));

  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___imageForAsset_block_invoke_2;
  v8[3] = &unk_1E6BD01C8;
  v9 = *(id *)(a1 + 40);
  -[NTKCompanionImageDataScaler cropAndScaleWithCompletion:](v7, "cropAndScaleWithCompletion:", v8);

}

void ___imageForAsset_block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v3;

  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0DC3870], "imageWithData:scale:", a2, 1.0);
    a2 = objc_claimAutoreleasedReturnValue();
  }
  v3 = (id)a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1B73A1D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B73A3990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  _Block_object_dispose(&a57, 8);
  _Block_object_dispose((const void *)(v57 - 224), 8);
  _Block_object_dispose((const void *)(v57 - 176), 8);
  _Unwind_Resume(a1);
}

void _watchAppListUpdated(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  _QWORD block[4];
  id v5;

  v2 = a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___watchAppListUpdated_block_invoke;
  block[3] = &unk_1E6BCD5F0;
  v5 = v2;
  v3 = v2;
  dispatch_async(MEMORY[0x1E0C80D38], block);

}

void sub_1B73A4520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B73A4DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___watchAppListUpdated_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_reloadInstallingAppsOnPhoneAndWatch");
}

BOOL _createArchive(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  uint64_t v34;
  _BOOL8 v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  id v58;
  id v59;
  id v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[128];
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v57 = a2;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v59 = v3;
  v60 = (id)objc_claimAutoreleasedReturnValue();
  v56 = v4;
  objc_msgSend(v4, "enumeratorAtPath:", v3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v68 = 0u;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
  v58 = v5;
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v66;
    v9 = *MEMORY[0x1E0CB2B18];
    v10 = *MEMORY[0x1E0CB2B20];
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v66 != v8)
          objc_enumerationMutation(v5);
        v12 = *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8 * i);
        objc_msgSend(v5, "fileAttributes");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v13, "objectForKeyedSubscript:", v9);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v14, "isEqualToString:", v10);

        v5 = v58;
        if (v15)
          objc_msgSend(v58, "skipDescendants");
        objc_msgSend(v59, "stringByAppendingPathComponent:", v12);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v60, "addObject:", v16);

      }
      v7 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
    }
    while (v7);
  }
  v17 = objc_retainAutorelease(v57);
  v18 = objc_msgSend(v17, "cStringUsingEncoding:", 4);
  if (!v18)
  {
    _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
    v38 = objc_claimAutoreleasedReturnValue();
    v37 = v56;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      _createArchive_cold_1(v38, v39, v40, v41, v42, v43, v44, v45);
    goto LABEL_30;
  }
  v19 = v18;
  v20 = v60;
  v21 = objc_msgSend(v60, "count");
  v57 = &v55;
  v55 = v21;
  MEMORY[0x1E0C80A78](v21, v22, v23);
  v26 = (char *)&v55 - v25;
  if (v24 >= 0x200)
    v27 = 512;
  else
    v27 = v24;
  bzero((char *)&v55 - v25, v27);
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v28 = v20;
  v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v61, v69, 16);
  if (v29)
  {
    v30 = v29;
    v31 = 0;
    v32 = *(_QWORD *)v62;
    while (2)
    {
      for (j = 0; j != v30; ++j)
      {
        if (*(_QWORD *)v62 != v32)
          objc_enumerationMutation(v28);
        v34 = objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v61 + 1) + 8 * j)), "cStringUsingEncoding:", 4);
        *(_QWORD *)&v26[8 * v31 + 8 * j] = v34;
        if (!v34)
        {
          _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
          v36 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            _createArchive_cold_3();

          v35 = 0;
          goto LABEL_27;
        }
      }
      v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v61, v69, 16);
      v31 += j;
      if (v30)
        continue;
      break;
    }
  }

  if (!objc_msgSend(objc_retainAutorelease(v59), "cStringUsingEncoding:", 4))
  {
    _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
    v38 = objc_claimAutoreleasedReturnValue();
    v47 = os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
    v37 = v56;
    if (v47)
      _createArchive_cold_2(v38, v48, v49, v50, v51, v52, v53, v54);
LABEL_30:

    v35 = 0;
    goto LABEL_31;
  }
  v35 = create_zip(v19, (uint64_t)v26, v55) == 0;
LABEL_27:
  v37 = v56;
LABEL_31:

  return v35;
}

void _LayoutConstants_16(void *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X8>)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;

  v5 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_24);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_24);
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v8 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_24);
    if (v8 == v5)
    {
      v9 = objc_msgSend(v5, "version");
      v10 = _LayoutConstants___previousCLKDeviceVersion_24;

      if (v9 == v10)
        goto LABEL_6;
    }
    else
    {

    }
  }
  v11 = objc_storeWeak(&_LayoutConstants___cachedDevice_24, v5);
  _LayoutConstants___previousCLKDeviceVersion_24 = objc_msgSend(v5, "version");

  ___LayoutConstants_block_invoke_21(v12, v5);
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_24);
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (a2 == 12)
  {
    v14 = &_LayoutConstants___constantsGraphicExtraLarge_0;
  }
  else
  {
    if (a2 != 10)
    {
      _NTKLoggingObjectForDomain(18, (uint64_t)"NTKLoggingDomainComplication");
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        _LayoutConstants_cold_1(a2, v13);

    }
    v14 = &_LayoutConstants___constantsGraphicCircular_0;
  }
  v15 = v14[1];
  *a3 = *v14;
  a3[1] = v15;
  v16 = v14[3];
  a3[2] = v14[2];
  a3[3] = v16;

}

void sub_1B73A855C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t _NTKCTinCanSettings_HandleSettingsChanged(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_handlePrefsChanged");
}

void sub_1B73A9D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B73AB4F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void NTKBundleComplicationMigrationServiceEnsureLookupDirectory()
{
  void *v0;
  void *v1;
  int v2;
  void *v3;
  int v4;
  void *v5;
  void *v6;
  BOOL v7;
  unsigned __int8 v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  NTKBundleComplicationMigrationServiceLookupDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 0;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "fileExistsAtPath:isDirectory:", v0, &v8);

  v9 = *MEMORY[0x1E0CB2AD8];
  v10[0] = *MEMORY[0x1E0CB2AE0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v8;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v2)
    v7 = v4 == 0;
  else
    v7 = 1;
  if (v7)
    objc_msgSend(v5, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v0, 1, v3, 0);
  else
    objc_msgSend(v5, "setAttributes:ofItemAtPath:error:", v3, v0, 0);

}

id NTKBundleComplicationMigrationServiceGetLookupVersion(void *a1)
{
  id v1;
  const char *v2;
  ssize_t v3;
  size_t v4;
  uint8_t *v5;
  const char *v6;
  ssize_t v7;
  void *v8;
  NSObject *v9;
  int *v10;
  char *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  NTKBundleComplicationMigrationServiceLookupPathForDevice(a1);
  v1 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v2 = (const char *)objc_msgSend(v1, "UTF8String");
  v3 = getxattr(v2, (const char *)_NTKBundleComplicationMigrationServiceLookupVersionKey, 0, 0, 0, 0);
  if (v3 == -1)
  {
    v8 = 0;
    goto LABEL_12;
  }
  v4 = v3;
  v5 = &buf[-((MEMORY[0x1E0C80A78]() + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = (const char *)objc_msgSend(objc_retainAutorelease(v1), "UTF8String");
  v7 = getxattr(v6, (const char *)_NTKBundleComplicationMigrationServiceLookupVersionKey, v5, v4, 0, 0);
  if (v7 == -1)
  {
    _NTKLoggingObjectForDomain(56, (uint64_t)"NTKLoggingDomainBundleComplicationMigration");
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = __error();
      v11 = strerror(*v10);
      *(_DWORD *)buf = 136315394;
      v17 = "NSString * _Nullable NTKBundleComplicationMigrationServiceGetLookupVersion(CLKDevice *__strong _Nonnull)";
      v18 = 2080;
      v19 = v11;
      v12 = "%s: Failed to read xattr, %s";
      v13 = v9;
      v14 = 22;
LABEL_10:
      _os_log_impl(&dword_1B72A3000, v13, OS_LOG_TYPE_DEFAULT, v12, buf, v14);
    }
LABEL_11:

    v8 = 0;
    goto LABEL_12;
  }
  if (v7 != v4)
  {
    _NTKLoggingObjectForDomain(56, (uint64_t)"NTKLoggingDomainBundleComplicationMigration");
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v17 = "NSString * _Nullable NTKBundleComplicationMigrationServiceGetLookupVersion(CLKDevice *__strong _Nonnull)";
      v12 = "%s: xattr build version length changed between reads, must have been a concurrent write";
      v13 = v9;
      v14 = 12;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithBytes:length:encoding:", v5, v4, 4);
LABEL_12:

  return v8;
}

BOOL NTKBundleComplicationMigrationServiceSetLookupVersion(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  const void *v6;
  size_t v7;
  id v8;
  const char *v9;
  int v10;
  NSObject *v11;

  v3 = a2;
  NTKBundleComplicationMigrationServiceLookupPathForDevice(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_retainAutorelease(v3);
  v6 = (const void *)objc_msgSend(v5, "cStringUsingEncoding:", 4);
  v7 = objc_msgSend(v5, "lengthOfBytesUsingEncoding:", 4);

  v8 = objc_retainAutorelease(v4);
  v9 = (const char *)objc_msgSend(v8, "UTF8String");
  v10 = setxattr(v9, (const char *)_NTKBundleComplicationMigrationServiceLookupVersionKey, v6, v7, 0, 0);
  if (v10)
  {
    _NTKLoggingObjectForDomain(56, (uint64_t)"NTKLoggingDomainBundleComplicationMigration");
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      NTKBundleComplicationMigrationServiceSetLookupVersion_cold_1((uint64_t)v8, v11);

  }
  return v10 == 0;
}

void sub_1B73AF6DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73AF958(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73AFBD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73AFFB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73B059C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73B075C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73B1574(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73B1830(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73B2130(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73B23EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double FaceSize()
{
  id WeakRetained;
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;

  os_unfair_lock_lock((os_unfair_lock_t)&FaceSize___lock);
  WeakRetained = objc_loadWeakRetained(&FaceSize___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v1 = WeakRetained;
  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_loadWeakRetained(&FaceSize___cachedDevice);
  if (v2 != v3)
  {

LABEL_5:
    objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak(&FaceSize___cachedDevice, v7);

    v8 = objc_loadWeakRetained(&FaceSize___cachedDevice);
    FaceSize___previousCLKDeviceVersion = objc_msgSend(v8, "version");

    objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    __FaceSize_block_invoke((uint64_t)v9, v9);

    goto LABEL_6;
  }
  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "version");
  v6 = FaceSize___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&FaceSize___lock);
  return *(double *)&FaceSize__FaceSize_0;
}

void sub_1B73B3BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  id *v27;

  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B73B66DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1B73B72BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t CLKLocaleNumberSystemFromNumeralOption(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 0xE)
    return 0;
  return result;
}

uint64_t NTKNumeralOptionFromCLKLocaleNumberSystem(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 0xE)
    return 0;
  return result;
}

id NTKDActiveDeviceUUID()
{
  void *v0;
  void *v1;

  NTKDActiveDevice();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "valueForProperty:", *MEMORY[0x1E0D51730]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id NTKDActiveDevice()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  if (NTKDActiveDevice_onceToken != -1)
    dispatch_once(&NTKDActiveDevice_onceToken, &__block_literal_global_67);
  v0 = (void *)NTKDActiveDevice___registry;
  objc_msgSend(MEMORY[0x1E0D51838], "activePairedDeviceSelectorBlock");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "getAllDevicesWithArchivedAltAccountDevicesMatching:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "firstObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void NTKDPromptToRaiseRadar(void *a1, void *a2, void *a3)
{
  NTKDPromptToRaiseRadarWithAdditionalFiles(a1, a2, a3, 1, MEMORY[0x1E0C9AA60], 1);
}

void NTKDPromptToRaiseRadarWithAdditionalFiles(void *a1, void *a2, void *a3, char a4, void *a5, char a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  _QWORD block[4];
  id v18;
  id v19;
  id v20;
  id v21;
  char v22;
  char v23;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a5;
  if (NTKInternalBuild(v14, v15))
  {
    dispatch_get_global_queue(33, 0);
    v16 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __NTKDPromptToRaiseRadarWithAdditionalFiles_block_invoke;
    block[3] = &unk_1E6BD3000;
    v22 = a6;
    v18 = v11;
    v19 = v12;
    v23 = a4;
    v20 = v14;
    v21 = v13;
    dispatch_async(v16, block);

  }
}

uint64_t NTKIsBridgeInstalled()
{
  void *v0;
  id v1;
  NSObject *v2;
  void *v3;
  uint64_t v4;
  id v6;

  v6 = 0;
  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CA5870]), "initWithBundleIdentifier:allowPlaceholder:error:", CFSTR("com.apple.Bridge"), 0, &v6);
  v1 = v6;
  if (!v0)
  {
    _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      NTKIsBridgeInstalled_cold_1();

  }
  objc_msgSend(v0, "applicationState");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isInstalled");

  return v4;
}

id _SharedZIPArchivist()
{
  if (_SharedZIPArchivist_onceToken != -1)
    dispatch_once(&_SharedZIPArchivist_onceToken, &__block_literal_global_32_0);
  return (id)_SharedZIPArchivist__archivist;
}

void NTKDCreateFaceFromData(void *a1, void *a2, char a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v28;
  void *v29;
  _QWORD v30[4];
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  char v37;
  _QWORD aBlock[4];
  id v39;

  v8 = a1;
  v9 = a2;
  v10 = a4;
  v11 = a5;
  v29 = v11;
  if (v11)
  {
    v12 = v11;
  }
  else
  {
    _SharedZIPArchivist();
    v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  v28 = v12;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __NTKDCreateFaceFromData_block_invoke;
  aBlock[3] = &unk_1E6BD3048;
  v15 = v10;
  v39 = v15;
  v16 = _Block_copy(aBlock);
  NSTemporaryDirectory();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "UUIDString");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stringByAppendingPathComponent:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v13, "removeItemAtPath:error:", v20, 0);
  objc_msgSend(v13, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v20, 1, 0, 0);
  v30[0] = v14;
  v30[1] = 3221225472;
  v30[2] = __NTKDCreateFaceFromData_block_invoke_35;
  v30[3] = &unk_1E6BD30E0;
  v31 = v20;
  v32 = v13;
  v37 = a3;
  v35 = v15;
  v36 = v16;
  v33 = v9;
  v34 = v8;
  v21 = v8;
  v22 = v16;
  v23 = v15;
  v24 = v9;
  v25 = v13;
  v26 = v20;
  objc_msgSend(v28, "unzipData:toPath:completionHandler:", v21, v26, v30);

}

id NTKDDataFromFace(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  id v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = v4;
    }
    else
    {
      _SharedZIPArchivist();
      v6 = (id)objc_claimAutoreleasedReturnValue();
    }
    v8 = v6;
    v9 = (void *)MEMORY[0x1E0CB36D8];
    objc_msgSend(v3, "JSONObjectRepresentation");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v31 = 0;
    objc_msgSend(v9, "dataWithJSONObject:options:error:", v10, 0, &v31);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v31;

    if (v12)
    {
      _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        NTKDDataFromFace_cold_1(v3, (uint64_t)v12, v13);

    }
    NSTemporaryDirectory();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "UUIDString");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stringByAppendingPathComponent:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    v30 = 0;
    objc_msgSend(v18, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v17, 1, 0, &v30);
    v19 = v30;
    if (v19)
    {
      _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v27 = objc_msgSend(v3, "faceStyle");
        *(_DWORD *)buf = 134218498;
        v33 = v27;
        v34 = 2114;
        v35 = v17;
        v36 = 2114;
        v37 = v19;
        _os_log_error_impl(&dword_1B72A3000, v20, OS_LOG_TYPE_ERROR, "Failed to create directory at path to backup face data. Face style: %lu - bundle location: %{public}@ - error: %{public}@", buf, 0x20u);
      }

    }
    objc_msgSend(v17, "stringByAppendingPathComponent:", CFSTR("face.json"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "writeToFile:atomically:", v21, 1);

    objc_msgSend(v3, "resourceDirectory");
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v22)
    {

      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "stringByAppendingPathComponent:", CFSTR("Resources"));
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = 0;
      objc_msgSend(v23, "copyItemAtPath:toPath:error:", v22, v24, &v29);
      v19 = v29;

      if (v19)
      {
        _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
        v25 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          v28 = objc_msgSend(v3, "faceStyle");
          *(_DWORD *)buf = 134218498;
          v33 = v28;
          v34 = 2114;
          v35 = v22;
          v36 = 2114;
          v37 = v19;
          _os_log_error_impl(&dword_1B72A3000, v25, OS_LOG_TYPE_ERROR, "Failed to link resource path for face. Face style: %lu - resource Path: %{public}@ - error: %{public}@", buf, 0x20u);
        }

      }
    }
    objc_msgSend(v8, "zippedDataForPath:", v17);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "removeItemAtPath:error:", v17, 0);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void NTKDUpdateLastDateActivityPerformedForIdentifier(uint64_t a1)
{
  __CFString *key;

  objc_msgSend(CFSTR("DateOfLastActivity_"), "stringByAppendingString:", a1);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0C99D68], "date"), CFSTR("com.apple.NanoTimeKit.daemon"));

}

void NTKDPerformIfMinimumIntervalHasElapsed(void *a1, void *a2, double a3)
{
  id v5;
  void (**v6)(_QWORD);
  __CFString *v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  id v15;
  __int16 v16;
  double v17;
  __int16 v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  objc_msgSend(CFSTR("DateOfLastActivity_"), "stringByAppendingString:", v5);
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)CFPreferencesCopyAppValue(v7, CFSTR("com.apple.NanoTimeKit.daemon"));
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    v8 = 0;
  }
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v9;
  if (v8 && (objc_msgSend(v9, "timeIntervalSinceDate:", v8), v11 <= a3))
  {
    _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 138412802;
      v15 = v5;
      v16 = 2048;
      v17 = a3;
      v18 = 2112;
      v19 = v8;
      _os_log_impl(&dword_1B72A3000, v13, OS_LOG_TYPE_DEFAULT, "not performing activity for identifier %@ because minimum interval %g has not elapsed since last performed (%@)", (uint8_t *)&v14, 0x20u);
    }

  }
  else
  {
    _NTKLoggingObjectForDomain(1, (uint64_t)"NTKLoggingDomainDaemon");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 138412802;
      v15 = v5;
      v16 = 2048;
      v17 = a3;
      v18 = 2112;
      v19 = v8;
      _os_log_impl(&dword_1B72A3000, v12, OS_LOG_TYPE_DEFAULT, "performing activity for identifier %@ because minimum interval %g has elapsed since last performed (%@)", (uint8_t *)&v14, 0x20u);
    }

    v6[2](v6);
    NTKDUpdateLastDateActivityPerformedForIdentifier((uint64_t)v5);
  }

}

void NTKDTransactionBegin(void *a1)
{
  NTKDTransactionBeginWithPostfix(a1, 0);
}

void NTKDTransactionBeginWithPostfix(void *a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[6];

  v3 = a2;
  v5 = a1;
  _TransactionQueue();
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __NTKDTransactionBeginWithPostfix_block_invoke;
  block[3] = &unk_1E6BCD778;
  block[4] = v5;
  block[5] = v3;
  dispatch_sync(v4, block);

}

id _TransactionQueue()
{
  if (_TransactionQueue_onceToken != -1)
    dispatch_once(&_TransactionQueue_onceToken, &__block_literal_global_117);
  return (id)_TransactionQueue___queue;
}

void NTKDTransactionEnd(void *a1)
{
  NTKDTransactionEndWithPostfix(a1, 0);
}

void NTKDTransactionEndWithPostfix(void *a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[6];

  v3 = a2;
  v5 = a1;
  _TransactionQueue();
  v4 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __NTKDTransactionEndWithPostfix_block_invoke;
  block[3] = &unk_1E6BCD778;
  block[4] = v5;
  block[5] = v3;
  dispatch_sync(v4, block);

}

id _TransactionsByReason()
{
  if (_TransactionsByReason_onceToken != -1)
    dispatch_once(&_TransactionsByReason_onceToken, &__block_literal_global_120);
  return (id)_TransactionsByReason___transactions;
}

uint64_t NTKProtoSharedCollectionsReadFrom(void *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  NTKProtoPigmentCollection *v17;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(NTKProtoPigmentCollection);
        objc_msgSend(a1, "addCollections:", v17);
        if (!PBReaderPlaceMark() || (NTKProtoPigmentCollectionReadFrom((uint64_t)v17, a2) & 1) == 0)
        {

          return 0;
        }
        PBReaderRecallMark();

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t NTKUpNextWalletPassStyleFeature()
{
  return objc_msgSend(MEMORY[0x1E0D84300], "featureWithName:featureType:", CFSTR("walletPassStyle"), 1);
}

uint64_t NTKUpNextWalletDisplayedPassFeature()
{
  return objc_msgSend(MEMORY[0x1E0D84300], "featureWithName:featureType:", CFSTR("walletDisplayedPass"), 0);
}

void sub_1B73BDCD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B73BDD88(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

uint64_t _handleAppConduitApplicationsChangedNotification_0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_loadApps");
}

void sub_1B73C0BC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73C13A0(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

id _disabledLayerActions_0()
{
  if (_disabledLayerActions_onceToken_0 != -1)
    dispatch_once(&_disabledLayerActions_onceToken_0, &__block_literal_global_72);
  return (id)_disabledLayerActions__dictionary_0;
}

void ___disabledLayerActions_block_invoke_0()
{
  void *v0;
  uint64_t v1;
  void *v2;
  _QWORD v3[7];
  _QWORD v4[8];

  v4[7] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = CFSTR("transform");
  v3[1] = CFSTR("borderColor");
  v4[0] = v0;
  v4[1] = v0;
  v3[2] = CFSTR("borderWidth");
  v3[3] = CFSTR("backgroundColor");
  v4[2] = v0;
  v4[3] = v0;
  v3[4] = CFSTR("foregroundColor");
  v3[5] = CFSTR("opacity");
  v4[4] = v0;
  v4[5] = v0;
  v3[6] = CFSTR("cornerRadius");
  v4[6] = v0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, v3, 7);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)_disabledLayerActions__dictionary_0;
  _disabledLayerActions__dictionary_0 = v1;

}

void sub_1B73C29E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B73C2A84(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void ___disabledLayerActions_block_invoke_1()
{
  void *v0;
  uint64_t v1;
  void *v2;
  _QWORD v3[11];
  _QWORD v4[12];

  v4[11] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E38], "null");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v3[0] = CFSTR("affineTransform");
  v3[1] = CFSTR("backgroundColor");
  v4[0] = v0;
  v4[1] = v0;
  v3[2] = CFSTR("bounds");
  v3[3] = CFSTR("contentsMultiplyColor");
  v4[2] = v0;
  v4[3] = v0;
  v3[4] = CFSTR("hidden");
  v3[5] = CFSTR("instanceCount");
  v4[4] = v0;
  v4[5] = v0;
  v3[6] = CFSTR("instanceDelay");
  v3[7] = CFSTR("instanceTransform");
  v4[6] = v0;
  v4[7] = v0;
  v3[8] = CFSTR("opacity");
  v3[9] = CFSTR("position");
  v4[8] = v0;
  v4[9] = v0;
  v3[10] = CFSTR("transform");
  v4[10] = v0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v4, v3, 11);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)_disabledLayerActions__dictionary_1;
  _disabledLayerActions__dictionary_1 = v1;

}

void sub_1B73C375C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

__n128 _LayoutConstants_17@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_26);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_26);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_26);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_26, obj);
    _LayoutConstants___previousCLKDeviceVersion_26 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_23(v9, obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_26;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_26);
  v10 = *(_OWORD *)&qword_1EF1738F8;
  *(_OWORD *)(a2 + 32) = xmmword_1EF1738E8;
  *(_OWORD *)(a2 + 48) = v10;
  *(_QWORD *)(a2 + 64) = qword_1EF173908;
  v11 = *(_OWORD *)&qword_1EF1738D8;
  *(_OWORD *)a2 = _LayoutConstants___constants_5;
  *(_OWORD *)(a2 + 16) = v11;

  return result;
}

void sub_1B73C5970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _LayoutConstants_18(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_27);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_27);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_27);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_LayoutConstants___cachedDevice_27, v1);
    _LayoutConstants___previousCLKDeviceVersion_27 = objc_msgSend(v1, "version");

    ___LayoutConstants_block_invoke_24(v8, v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _LayoutConstants___previousCLKDeviceVersion_27;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_27);
  v9 = *(double *)&_LayoutConstants___constants_0_5;

  return v9;
}

void sub_1B73C84E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B73C8564(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

const __CFString *NTKRemoteComplicationStocksClientIdentifier(void *a1)
{
  if (objc_msgSend(a1, "nrDeviceVersion") >> 16 <= 6)
    return CFSTR("com.apple.stocks.watchapp.watchextension");
  else
    return CFSTR("com.apple.stocks.watchapp");
}

void sub_1B73CCA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B73CCC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void NTKCCAnalyticsIncrement(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  const __CFString *v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  v4 = CFSTR("eventName");
  v5[0] = a1;
  v1 = (void *)MEMORY[0x1E0C99D80];
  v2 = a1;
  objc_msgSend(v1, "dictionaryWithObjects:forKeys:count:", v5, &v4, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  AnalyticsSendEvent();
}

int *NTKSpectrumGetOverlayGradientTable()
{
  return &NTKSpectrumGetOverlayGradientTable_s_overlayGradientTable;
}

void sub_1B73CED04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _NTKCustomWorldCityAbbreviationsStore_HandleStoreChanged(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_handlePrefsChanged");
}

void _LayoutConstants_19(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_30);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_30);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_30);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_30, obj);
    _LayoutConstants___previousCLKDeviceVersion_30 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_27(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_30;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_30);
  v10 = *(_OWORD *)&qword_1EF173A48;
  *(_OWORD *)a2 = _LayoutConstants___constants_6;
  *(_OWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 32) = qword_1EF173A58;

}

uint64_t OUTLINED_FUNCTION_2_6(void *a1, const char *a2)
{
  return objc_msgSend(a1, "fallbackVisit");
}

void _LayoutConstants_20(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_31);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_31);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_31);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_31, obj);
    _LayoutConstants___previousCLKDeviceVersion_31 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_28(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_31;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_31);
  v10 = *(_OWORD *)&qword_1EF173AA0;
  *(_OWORD *)a2 = _LayoutConstants___constants_7;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = xmmword_1EF173AB0;
  *(_QWORD *)(a2 + 48) = qword_1EF173AC0;

}

void sub_1B73D5A38(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void _LayoutConstants_21(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_32);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_32);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_32);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_32, obj);
    _LayoutConstants___previousCLKDeviceVersion_32 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_29(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_32;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_32);
  v10 = *(_OWORD *)&qword_1EF173AF0;
  *(_OWORD *)a2 = _LayoutConstants___constants_8;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = xmmword_1EF173B00;
  *(_QWORD *)(a2 + 48) = qword_1EF173B10;

}

void sub_1B73D6898(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1B73D74EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL NTKProtoCollectionBySlotReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  NTKProtoPigmentCollection *v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(NTKProtoPigmentCollection **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v18 = objc_alloc_init(NTKProtoPigmentCollection);
    objc_storeStrong((id *)(a1 + 8), v18);
    if (!PBReaderPlaceMark() || (NTKProtoPigmentCollectionReadFrom((uint64_t)v18, a2) & 1) == 0)
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t _UpdateCollectionIfNecessary(id *a1)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  NTKEditOptionCollection *v10;
  uint64_t v11;
  void *v12;

  v2 = *a1;
  objc_msgSend(v2, "options");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "firstObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    objc_msgSend(v2, "options");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)objc_msgSend(v6, "mutableCopy");

    objc_msgSend(v4, "device");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    +[NTKKaleidoscopeAssetOption optionWithAsset:forDevice:](NTKKaleidoscopeCustomAssetOption, "optionWithAsset:forDevice:", 1000, v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "insertObject:atIndex:", v9, 0);

    v10 = [NTKEditOptionCollection alloc];
    v11 = objc_msgSend(v2, "mode");
    objc_msgSend(v2, "localizedName");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *a1 = -[NTKEditOptionCollection initWithEditMode:localizedName:options:collectionType:](v10, "initWithEditMode:localizedName:options:collectionType:", v11, v12, v7, objc_msgSend(v2, "collectionType"));

    v5 = 0;
  }

  return v5;
}

void sub_1B73D9208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B73D9300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B73D93F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B73DC554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

float NTKSmoothstep(float a1, float a2, float a3)
{
  float v3;

  v3 = (float)(a3 - a1) / (float)(a2 - a1);
  if (v3 < 0.0)
    v3 = 0.0;
  if (v3 > 1.0)
    v3 = 1.0;
  return (float)(v3 * v3) * (float)((float)(v3 * -2.0) + 3.0);
}

double NTKHourMinuteSecondsTotalSecondsForTime(double *a1, double *a2, double *a3, uint64_t a4, void *a5)
{
  double v8;
  double v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  v11 = 0;
  v12 = 0;
  objc_msgSend(a5, "getHour:minute:second:nanosecond:fromDate:", &v14, &v13, &v12, &v11, a4);
  v8 = (double)v11 / 1000000000.0 + (double)v12;
  v9 = (double)v13;
  if (a3)
    *a3 = v8;
  result = v8 + v9 * 60.0;
  if (a2)
    *a2 = result;
  if (a1)
  {
    result = result + (double)(v14 % 12) * 60.0 * 60.0;
    *a1 = result;
  }
  return result;
}

void sub_1B73DDD58(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1B73DE25C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 144));
  _Block_object_dispose((const void *)(v3 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1B73DE8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  id *v26;
  uint64_t v27;

  objc_destroyWeak(v26);
  _Block_object_dispose(&a26, 8);
  objc_destroyWeak((id *)(v27 - 104));
  _Unwind_Resume(a1);
}

void sub_1B73DEB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B73DFAB8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1B73DFE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t NTKCUpNextDataSourcesViewControllerClass()
{
  return objc_opt_self();
}

uint64_t NTKCompanionMonogramEntryViewControllerClass()
{
  return objc_opt_self();
}

NTKCubicColorCurveElement *NTKCubicColorCurveElementCreate(double a1)
{
  NTKCubicColorCurveElement *v2;

  v2 = objc_alloc_init(NTKCubicColorCurveElement);
  -[NTKCubicColorCurveElement setFraction:](v2, "setFraction:", a1);
  __asm { FMOV            V0.4S, #1.0 }
  CLKUIConvertToRGBfFromXRSRGBf();
  -[NTKCubicColorCurveElement setColor:](v2, "setColor:");
  return v2;
}

double NTKCircularAnalogDialViewDefaultViewOptions@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  _LayoutConstants_22(a1, &v5);
  *(_QWORD *)a2 = 0;
  result = *(double *)&v5;
  v4 = v6;
  *(_OWORD *)(a2 + 8) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  return result;
}

void _LayoutConstants_22(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_35);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_35);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_35);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_35, obj);
    _LayoutConstants___previousCLKDeviceVersion_35 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_32(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_35;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_35);
  v10 = *(_OWORD *)&qword_1EF173C30;
  *a2 = _LayoutConstants___constants_9;
  a2[1] = v10;
  a2[2] = xmmword_1EF173C40;

}

uint64_t NTKNowPlayingTintColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "systemBlueColor");
}

uint64_t NTKNowPlayingTintColorHeadline()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "systemBlueColor");
}

id NTKNowPlayingTintColorBody()
{
  if (NTKNowPlayingTintColorBody_onceToken != -1)
    dispatch_once(&NTKNowPlayingTintColorBody_onceToken, &__block_literal_global_91);
  return (id)NTKNowPlayingTintColorBody__color;
}

id NTKNowPlayingTintColorBody2()
{
  if (NTKNowPlayingTintColorBody2_onceToken != -1)
    dispatch_once(&NTKNowPlayingTintColorBody2_onceToken, &__block_literal_global_1);
  return (id)NTKNowPlayingTintColorBody2__color;
}

uint64_t NTKNowPlayingPlatterBackgroundColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
}

void sub_1B73E3210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B73E62BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1B73E64C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B73E746C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t (*a19)(uint64_t a1), void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t (*a25)(uint64_t a1),void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  id v60;
  void *v61;
  NSObject *v62;
  void *v63;
  int v64;
  void *v65;
  id v66;
  id *v67;
  void *v68;
  int v69;
  id v70;
  id v71;

  if (a2 == 1)
  {
    v60 = objc_begin_catch(exc_buf);
    objc_msgSend(v60, "reason");
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    _NTKLoggingObjectForDomain(43, (uint64_t)"NTKLoggingDomainGreenfield");
    v62 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      __65__NTKGreenfieldUtilities_decodeWatchFaceFromUrl_completionBlock___block_invoke_cold_2();

    objc_msgSend(v60, "name");
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    v64 = objc_msgSend(v63, "isEqualToString:", CFSTR("NTKGreenfieldUtilitiesDecodingException"));

    if (v64)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "greenfield_decodeWatchFaceErrorWithCode:message:", 1, v61);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      a24 = v58;
      a25 = __65__NTKGreenfieldUtilities_decodeWatchFaceFromUrl_completionBlock___block_invoke_120;
      a26 = &unk_1E6BCE3C8;
      v66 = *(id *)(v55 + 40);
      a27 = (uint64_t)v65;
      a28 = (uint64_t)v66;
      v67 = (id *)&a23;
    }
    else
    {
      objc_msgSend(v60, "name");
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      v69 = objc_msgSend(v68, "isEqualToString:", CFSTR("NTKGreenfieldUtilitiesIncompatibleDeviceException"));

      if (!v69)
        objc_exception_throw(objc_retainAutorelease(v60));
      objc_msgSend(MEMORY[0x1E0CB35C8], "greenfield_addWatchFaceErrorWithCode:message:", 11, v61);
      v65 = (void *)objc_claimAutoreleasedReturnValue();
      a18 = v58;
      a19 = __65__NTKGreenfieldUtilities_decodeWatchFaceFromUrl_completionBlock___block_invoke_2_121;
      a20 = &unk_1E6BCE3C8;
      v70 = *(id *)(v55 + 40);
      a21 = (uint64_t)v65;
      a22 = (uint64_t)v70;
      v67 = (id *)&a17;
    }
    v71 = v65;
    dispatch_async(MEMORY[0x1E0C80D38], v67);

    objc_end_catch();
    if (!v56)
      JUMPOUT(0x1B73E71B0);
    JUMPOUT(0x1B73E71A8);
  }
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose((const void *)(v57 - 240), 8);
  _Unwind_Resume(exc_buf);
}

void sub_1B73E8A1C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x258], 8);
  _Unwind_Resume(a1);
}

double _LayoutConstants_23@<D0>(_OWORD *a1@<X8>)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  double result;
  __int128 v19;

  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_36);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_36);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "device");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_36);
  if (v5 != v6)
  {

LABEL_5:
    objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "device");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak(&_LayoutConstants___cachedDevice_36, v12);

    v13 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_36);
    _LayoutConstants___previousCLKDeviceVersion_36 = objc_msgSend(v13, "version");

    objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "device");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    ___LayoutConstants_block_invoke_33((uint64_t)v15, v15);

    goto LABEL_6;
  }
  objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "device");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "version");
  v10 = _LayoutConstants___previousCLKDeviceVersion_36;

  if (v9 != v10)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_36);
  v16 = *(_OWORD *)&qword_1EF173CD8;
  a1[2] = xmmword_1EF173CC8;
  a1[3] = v16;
  v17 = *(_OWORD *)&qword_1EF173CF8;
  a1[4] = xmmword_1EF173CE8;
  a1[5] = v17;
  result = *(double *)&_LayoutConstants_layoutConstants_0;
  v19 = xmmword_1EF173CB8;
  *a1 = _LayoutConstants_layoutConstants_0;
  a1[1] = v19;
  return result;
}

void sub_1B73E9C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B73EA718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B73EAB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B73EB08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id NTKNoHighlightFullScreenTapImage(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_noHighlightFullscreenImage___lock);
  WeakRetained = objc_loadWeakRetained(&_noHighlightFullscreenImage___cachedDevice);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v4 = objc_loadWeakRetained(&_noHighlightFullscreenImage___cachedDevice);
    if (v4 == v1)
    {
      v5 = objc_msgSend(v1, "version");
      v6 = _noHighlightFullscreenImage___previousCLKDeviceVersion;

      if (v5 == v6)
        goto LABEL_6;
    }
    else
    {

    }
  }
  v7 = objc_storeWeak(&_noHighlightFullscreenImage___cachedDevice, v1);
  _noHighlightFullscreenImage___previousCLKDeviceVersion = objc_msgSend(v1, "version");

  ___noHighlightFullscreenImage_block_invoke(v8, v1);
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_noHighlightFullscreenImage___lock);
  if (_noHighlightFullscreenImage_onceToken != -1)
    dispatch_once(&_noHighlightFullscreenImage_onceToken, &__block_literal_global_72_1);
  v9 = (id)_noHighlightFullscreenImage___image;

  return v9;
}

id NTKNoHighlightDialTapImage(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_noHighlightDialImage___lock);
  WeakRetained = objc_loadWeakRetained(&_noHighlightDialImage___cachedDevice);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v4 = objc_loadWeakRetained(&_noHighlightDialImage___cachedDevice);
    if (v4 == v1)
    {
      v5 = objc_msgSend(v1, "version");
      v6 = _noHighlightDialImage___previousCLKDeviceVersion;

      if (v5 == v6)
        goto LABEL_6;
    }
    else
    {

    }
  }
  v7 = objc_storeWeak(&_noHighlightDialImage___cachedDevice, v1);
  _noHighlightDialImage___previousCLKDeviceVersion = objc_msgSend(v1, "version");

  ___noHighlightDialImage_block_invoke(v8, v1);
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_noHighlightDialImage___lock);
  if (_noHighlightDialImage_onceToken != -1)
    dispatch_once(&_noHighlightDialImage_onceToken, &__block_literal_global_81_0);
  v9 = (id)_noHighlightDialImage___image;

  return v9;
}

void ___noHighlightFullscreenImage_block_invoke(uint64_t a1, void *a2)
{
  objc_class *v2;
  id v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  void *v10;
  id v11;

  v2 = (objc_class *)MEMORY[0x1E0DC3828];
  v3 = a2;
  v4 = [v2 alloc];
  objc_msgSend(v3, "screenBounds");
  v6 = v5;
  v8 = v7;

  v11 = (id)objc_msgSend(v4, "initWithSize:", v6, v8);
  objc_msgSend(v11, "imageWithActions:", &__block_literal_global_69);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = (void *)_noHighlightFullscreenImage___image;
  _noHighlightFullscreenImage___image = v9;

}

void ___noHighlightFullscreenImage_block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)MEMORY[0x1E0DC3658];
  v3 = a2;
  objc_msgSend(v2, "colorWithWhite:alpha:", 0.0, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setFill");

  v5 = (void *)MEMORY[0x1E0DC3508];
  objc_msgSend(v3, "format");
  v7 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "bounds");
  objc_msgSend(v5, "bezierPathWithRect:");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "fill");

}

void ___noHighlightFullscreenImage_block_invoke_3()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v0 = *MEMORY[0x1E0C93E68];
  objc_msgSend(MEMORY[0x1E0CB3828], "mainQueue");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObserverForName:object:queue:usingBlock:", v0, 0, v1, &__block_literal_global_76);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)_noHighlightFullscreenImage_notifyToken;
  _noHighlightFullscreenImage_notifyToken = v2;

}

void ___noHighlightFullscreenImage_block_invoke_4()
{
  void *v0;

  v0 = (void *)_noHighlightFullscreenImage___image;
  _noHighlightFullscreenImage___image = 0;

}

void ___noHighlightDialImage_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v2 = a2;
  +[NTKAnalogUtilities dialSizeForDevice:](NTKAnalogUtilities, "dialSizeForDevice:", v2);
  v4 = v3;
  objc_msgSend(MEMORY[0x1E0DC3830], "preferredFormat");
  v10 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "screenScale");
  v6 = v5;

  objc_msgSend(v10, "setScale:", v6);
  objc_msgSend(v10, "setPreferredRange:", 2);
  v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3828]), "initWithSize:", v4, v4);
  objc_msgSend(v7, "imageWithActions:", &__block_literal_global_80_1);
  v8 = objc_claimAutoreleasedReturnValue();
  v9 = (void *)_noHighlightDialImage___image;
  _noHighlightDialImage___image = v8;

}

void ___noHighlightDialImage_block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)MEMORY[0x1E0DC3658];
  v3 = a2;
  objc_msgSend(v2, "colorWithWhite:alpha:", 1.0, 0.0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setFill");

  v5 = (void *)MEMORY[0x1E0DC3508];
  objc_msgSend(v3, "format");
  v7 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "bounds");
  objc_msgSend(v5, "bezierPathWithOvalInRect:");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "fill");

}

void ___noHighlightDialImage_block_invoke_3()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v0 = *MEMORY[0x1E0C93E68];
  objc_msgSend(MEMORY[0x1E0CB3828], "mainQueue");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObserverForName:object:queue:usingBlock:", v0, 0, v1, &__block_literal_global_82_0);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)_noHighlightDialImage_notifyToken;
  _noHighlightDialImage_notifyToken = v2;

}

void ___noHighlightDialImage_block_invoke_4()
{
  void *v0;

  v0 = (void *)_noHighlightDialImage___image;
  _noHighlightDialImage___image = 0;

}

id NTKMoveNonGradientTextColor()
{
  if (NTKMoveNonGradientTextColor_onceToken != -1)
    dispatch_once(&NTKMoveNonGradientTextColor_onceToken, &__block_literal_global_94);
  return (id)NTKMoveNonGradientTextColor___color;
}

id NTKMoveGradientLightColor()
{
  if (NTKMoveGradientLightColor_onceToken != -1)
    dispatch_once(&NTKMoveGradientLightColor_onceToken, &__block_literal_global_1_0);
  return (id)NTKMoveGradientLightColor___color;
}

id NTKMoveGradientDarkColor()
{
  if (NTKMoveGradientDarkColor_onceToken != -1)
    dispatch_once(&NTKMoveGradientDarkColor_onceToken, &__block_literal_global_2_0);
  return (id)NTKMoveGradientDarkColor___color;
}

id NTKMoveAdjustmentButtonBackgroundColor()
{
  if (NTKMoveAdjustmentButtonBackgroundColor_onceToken != -1)
    dispatch_once(&NTKMoveAdjustmentButtonBackgroundColor_onceToken, &__block_literal_global_3_2);
  return (id)NTKMoveAdjustmentButtonBackgroundColor___color;
}

id NTKExerciseNonGradientTextColor()
{
  if (NTKExerciseNonGradientTextColor_onceToken != -1)
    dispatch_once(&NTKExerciseNonGradientTextColor_onceToken, &__block_literal_global_4_2);
  return (id)NTKExerciseNonGradientTextColor___color;
}

id NTKExerciseGradientLightColor()
{
  if (NTKExerciseGradientLightColor_onceToken != -1)
    dispatch_once(&NTKExerciseGradientLightColor_onceToken, &__block_literal_global_5_1);
  return (id)NTKExerciseGradientLightColor___color;
}

id NTKExerciseGradientDarkColor()
{
  if (NTKExerciseGradientDarkColor_onceToken != -1)
    dispatch_once(&NTKExerciseGradientDarkColor_onceToken, &__block_literal_global_6);
  return (id)NTKExerciseGradientDarkColor___color;
}

id NTKExerciseAdjustmentButtonBackgroundColor()
{
  if (NTKExerciseAdjustmentButtonBackgroundColor_onceToken != -1)
    dispatch_once(&NTKExerciseAdjustmentButtonBackgroundColor_onceToken, &__block_literal_global_7_0);
  return (id)NTKExerciseAdjustmentButtonBackgroundColor___color;
}

id NTKStandNonGradientTextColor()
{
  if (NTKStandNonGradientTextColor_onceToken != -1)
    dispatch_once(&NTKStandNonGradientTextColor_onceToken, &__block_literal_global_8_1);
  return (id)NTKStandNonGradientTextColor___color;
}

id NTKStandGradientLightColor()
{
  if (NTKStandGradientLightColor_onceToken != -1)
    dispatch_once(&NTKStandGradientLightColor_onceToken, &__block_literal_global_9);
  return (id)NTKStandGradientLightColor___color;
}

id NTKStandGradientDarkColor()
{
  if (NTKStandGradientDarkColor_onceToken != -1)
    dispatch_once(&NTKStandGradientDarkColor_onceToken, &__block_literal_global_10_1);
  return (id)NTKStandGradientDarkColor___color;
}

id NTKStandAdjustmentButtonBackgroundColor()
{
  if (NTKStandAdjustmentButtonBackgroundColor_onceToken != -1)
    dispatch_once(&NTKStandAdjustmentButtonBackgroundColor_onceToken, &__block_literal_global_11_0);
  return (id)NTKStandAdjustmentButtonBackgroundColor___color;
}

id NTKPausedGradientLightColor()
{
  if (NTKPausedGradientLightColor_onceToken != -1)
    dispatch_once(&NTKPausedGradientLightColor_onceToken, &__block_literal_global_12);
  return (id)NTKPausedGradientLightColor___color;
}

id NTKPausedGradientDarkColor()
{
  if (NTKPausedGradientDarkColor_onceToken != -1)
    dispatch_once(&NTKPausedGradientDarkColor_onceToken, &__block_literal_global_13);
  return (id)NTKPausedGradientDarkColor___color;
}

id NTKPausedNonGradientTextColor()
{
  if (NTKPausedNonGradientTextColor_onceToken != -1)
    dispatch_once(&NTKPausedNonGradientTextColor_onceToken, &__block_literal_global_14_1);
  return (id)NTKPausedNonGradientTextColor___color;
}

void dispatch_metrics(void *a1)
{
  void *v1;
  char v2;
  NSObject *v3;
  dispatch_block_t block;

  block = a1;
  objc_msgSend(MEMORY[0x1E0DC3470], "sharedApplication");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isRunningTest");

  if ((v2 & 1) == 0)
  {
    dispatch_get_global_queue(17, 0);
    v3 = objc_claimAutoreleasedReturnValue();
    dispatch_async(v3, block);

  }
}

void NTKSubmitSelectedFace(void *a1)
{
  id v1;
  id v2;
  _QWORD v3[4];
  id v4;

  v1 = a1;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __NTKSubmitSelectedFace_block_invoke;
  v3[3] = &unk_1E6BCD5F0;
  v4 = v1;
  v2 = v1;
  dispatch_metrics(v3);

}

void NTKSubmitClockFacesValidation(char a1)
{
  _QWORD v1[4];
  char v2;

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = __NTKSubmitClockFacesValidation_block_invoke;
  v1[3] = &__block_descriptor_33_e5_v8__0l;
  v2 = a1;
  dispatch_metrics(v1);
}

void NTKSubmitSyncMessage(void *a1)
{
  id v1;
  id v2;
  _QWORD v3[4];
  id v4;

  v1 = a1;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __NTKSubmitSyncMessage_block_invoke;
  v3[3] = &unk_1E6BCD5F0;
  v4 = v1;
  v2 = v1;
  dispatch_metrics(v3);

}

void NTKSubmitSyncSession(void *a1)
{
  id v1;
  id v2;
  _QWORD v3[4];
  id v4;

  v1 = a1;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __NTKSubmitSyncSession_block_invoke;
  v3[3] = &unk_1E6BCD5F0;
  v4 = v1;
  v2 = v1;
  dispatch_metrics(v3);

}

void NTKSubmitFaceSupportMessage(void *a1)
{
  id v1;
  void *v2;
  _QWORD v3[4];
  id v4;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __NTKSubmitFaceSupportMessage_block_invoke;
    v3[3] = &unk_1E6BCD5F0;
    v4 = v1;
    dispatch_metrics(v3);

  }
}

void NTKSubmitComplicationDescriptorCount(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v3 = a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __NTKSubmitComplicationDescriptorCount_block_invoke;
  v5[3] = &unk_1E6BD09B0;
  v6 = v3;
  v7 = a2;
  v4 = v3;
  dispatch_metrics(v5);

}

void NTKSubmitSwiftUIBundleAndFamily(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v3 = a1;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __NTKSubmitSwiftUIBundleAndFamily_block_invoke;
  v5[3] = &unk_1E6BD09B0;
  v6 = v3;
  v7 = a2;
  v4 = v3;
  dispatch_metrics(v5);

}

void NTKSubmitError(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __NTKSubmitError_block_invoke;
    v6[3] = &unk_1E6BCD778;
    v7 = v4;
    v8 = v3;
    dispatch_metrics(v6);

  }
}

uint64_t _isFirstPartyComplicationBundleID(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  v2 = v1;
  if (_isFirstPartyComplicationBundleID_onceToken == -1)
  {
    if (!v1)
    {
LABEL_6:
      v3 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    dispatch_once(&_isFirstPartyComplicationBundleID_onceToken, &__block_literal_global_95);
    if (!v2)
      goto LABEL_6;
  }
  if ((objc_msgSend((id)_isFirstPartyComplicationBundleID_firstPartyComplicationBundleID, "containsObject:", v2) & 1) == 0)
    goto LABEL_6;
  v3 = 1;
LABEL_7:

  return v3;
}

void ___isFirstPartyComplicationBundleID_block_invoke()
{
  uint64_t v0;
  void *v1;
  NSObject *v2;
  uint8_t buf[4];
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0C99E60], "setWithObjects:", CFSTR("com.apple.nanotimekit.internal"), CFSTR("com.apple.weather.watchapp"), CFSTR("com.apple.weather"), CFSTR("com.apple.ActivityMonitorApp"), CFSTR("com.apple.private.NanoTimer"), CFSTR("com.apple.NanoCalendar"), CFSTR("com.apple.nanotimekit.battery"), CFSTR("com.apple.NanoWorldClock"), CFSTR("com.apple.DateComplicationsHost"), CFSTR("com.apple.nanotimekit.astronomy"), CFSTR("com.apple.NanoCompass.watchkitapp"), CFSTR("com.apple.MobileSMS"), CFSTR("com.apple.SessionTrackerApp"), CFSTR("com.apple.NanoMusic"), CFSTR("com.apple.Mind"), CFSTR("com.apple.nanotimekit.controls"), CFSTR("com.apple.nanotimekit.time"),
    CFSTR("com.apple.stocks.watchapp"),
    CFSTR("com.apple.NanoPhone"),
    CFSTR("com.apple.NanoReminders"),
    CFSTR("com.apple.HeartRate"),
    CFSTR("com.apple.NanoMail"),
    CFSTR("com.apple.NanoMaps"),
    CFSTR("com.apple.shortcuts.watch"),
    CFSTR("com.apple.NanoSleep.watchkitapp"),
    CFSTR("com.apple.NanoRemote"),
    CFSTR("com.apple.nanonews"),
    CFSTR("com.apple.DeepBreathing"),
    CFSTR("com.apple.Depth"),
    CFSTR("com.apple.HearingApp"),
    CFSTR("com.apple.Home"),
    CFSTR("com.apple.Maps"),
    CFSTR("com.apple.Music"),
    CFSTR("com.apple.NanoAlarm"),
    CFSTR("com.apple.NanoBooks"),
    CFSTR("com.apple.NanoCalculator.watchkitapp"),
    CFSTR("com.apple.NanoCamera"),
    CFSTR("com.apple.NanoHeartRhythm"),
    CFSTR("com.apple.NanoHome"),
    CFSTR("com.apple.NanoMedications"),
    CFSTR("com.apple.NanoMenstrualCycles"),
    CFSTR("com.apple.NanoNowPlaying"),
    CFSTR("com.apple.NanoOxygenSaturation.watchkitapp"),
    CFSTR("com.apple.NanoPassbook"),
    CFSTR("com.apple.NanoRadio"),
    CFSTR("com.apple.NanoStopwatch"),
    CFSTR("com.apple.NanoTips"),
    CFSTR("com.apple.Research.watchkitapp"),
    CFSTR("com.apple.SessionTrackerApp"),
    CFSTR("com.apple.VoiceMemos"),
    CFSTR("com.apple.findmy.finddevices"),
    CFSTR("com.apple.findmy.finditems"),
    CFSTR("com.apple.findmy.findpeople"),
    CFSTR("com.apple.healthstudies.watchkitapp"),
    CFSTR("com.apple.mobilecal"),
    CFSTR("com.apple.mobilemail"),
    CFSTR("com.apple.mobilephone"),
    CFSTR("com.apple.mobiletimer"),
    CFSTR("com.apple.nanotimekit.cellular"),
    CFSTR("com.apple.nanotimekit.siri"),
    CFSTR("com.apple.podcasts"));
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_isFirstPartyComplicationBundleID_firstPartyComplicationBundleID;
  _isFirstPartyComplicationBundleID_firstPartyComplicationBundleID = v0;

  _NTKLoggingObjectForDomain(29, (uint64_t)"NTKLoggingDomainMetrics");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v4 = _isFirstPartyComplicationBundleID_firstPartyComplicationBundleID;
    _os_log_impl(&dword_1B72A3000, v2, OS_LOG_TYPE_DEFAULT, "NTKCoreAnalyticsUtilities did create firstPartyComplicationBundleID: %@", buf, 0xCu);
  }

}

__CFString *NTKFirstPartyDistributionMechanism(void *a1)
{
  id v1;
  __CFString *v2;
  NSObject *v3;
  int v5;
  __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (NTKFirstPartyDistributionMechanism_onceToken != -1)
    dispatch_once(&NTKFirstPartyDistributionMechanism_onceToken, &__block_literal_global_158);
  if (objc_msgSend(v1, "length"))
  {
    if (objc_msgSend((id)NTKFirstPartyDistributionMechanism_firstPartyDistributionMechanismSet, "containsObject:", v1))v2 = (__CFString *)v1;
    else
      v2 = CFSTR("ntk_third_party");
  }
  else
  {
    v2 = CFSTR("ntk_unknown");
  }
  _NTKLoggingObjectForDomain(29, (uint64_t)"NTKLoggingDomainMetrics");
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v5 = 138412290;
    v6 = v2;
    _os_log_impl(&dword_1B72A3000, v3, OS_LOG_TYPE_DEFAULT, "NTKCoreAnalyticsUtilities did set firstPartyDistributionMechanism: %@", (uint8_t *)&v5, 0xCu);
  }

  return v2;
}

void NTKSubmitAnalyticsForSharedFace(void *a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a1;
  objc_msgSend(a2, "faceForSharing");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __NTKSubmitAnalyticsForSharedFace_block_invoke;
    v5[3] = &unk_1E6BCD778;
    v6 = v3;
    v7 = v4;
    dispatch_metrics(v5);

  }
}

void sub_1B73EDC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void _NTKSubmitAnalyticsForShareFaceComplications(void *a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __CFString *v9;
  uint64_t i;
  void *v11;
  void *v12;
  uint64_t v13;
  __CFString *v14;
  uint64_t v15;
  __CFString *v16;
  __CFString *v17;
  void *v18;
  id v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  id v25;
  __CFString *v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v20 = a2;
  v19 = a3;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v22;
    v9 = CFSTR("ntk_unknown");
    while (1)
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v22 != v8)
          objc_enumerationMutation(v5);
        v11 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        if (objc_msgSend(v11, "complicationType") == 31 || !objc_msgSend(v11, "complicationType"))
        {
          objc_msgSend(v11, "appIdentifier");
          v15 = objc_claimAutoreleasedReturnValue();
          v16 = (__CFString *)v15;
          if (v15)
            v17 = (__CFString *)v15;
          else
            v17 = CFSTR("ntk_unknown");
          v14 = v17;

          v9 = v16;
        }
        else
        {
          objc_msgSend(v11, "appIdentifier");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "length");

          if (!v13)
            goto LABEL_15;
          objc_msgSend(v11, "appIdentifier");
          v14 = (__CFString *)objc_claimAutoreleasedReturnValue();
        }

        v9 = v14;
LABEL_15:
        if ((-[__CFString isEqualToString:](v9, "isEqualToString:", CFSTR("com.apple.nanotimekit.off")) & 1) == 0)
        {
          if ((_isFirstPartyComplicationBundleID(v9) & 1) == 0)
          {

            v9 = CFSTR("ntk_third_party");
          }
          v25 = v19;
          v26 = v9;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v26, &v25, 1);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          AnalyticsSendEvent();

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v21, v27, 16);
      if (!v7)
        goto LABEL_23;
    }
  }
  v9 = CFSTR("ntk_unknown");
LABEL_23:

}

id _NTKSubmitCommonAnalyticsForAddFaceAndEarlyExitEvents(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  __CFString *v11;
  __CFString *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;
  int v28;
  id v30;
  NSObject *oslog;
  id v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD v44[4];
  id v45;
  id v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v32 = a2;
  v34 = v3;
  v35 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v3, "watchFace");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (v33)
  {
    objc_msgSend(v3, "distributionMechanism");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    NTKFirstPartyDistributionMechanism(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "setObject:forKeyedSubscript:", v5, CFSTR("firstPartyDistributionMechanism"));

    objc_msgSend(v34, "scannedCodeIdentifier");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v6, "length");

    if (v7)
    {
      objc_msgSend(v34, "scannedCodeIdentifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "setObject:forKeyedSubscript:", v8, CFSTR("scannedCodeIdentifier"));

    }
    else
    {
      objc_msgSend(v35, "setObject:forKeyedSubscript:", CFSTR("ntk_unknown"), CFSTR("scannedCodeIdentifier"));
    }
    NTKAnalyticsValueForFace(v33);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)v9;
    v11 = CFSTR("ntk_unknown");
    if (v9)
      v11 = (__CFString *)v9;
    v12 = v11;

    oslog = v12;
    objc_msgSend(v35, "setObject:forKeyedSubscript:", v12, CFSTR("faceStyle"));
    v53 = 0;
    v54 = &v53;
    v55 = 0x2020000000;
    v56 = 0;
    v49 = 0;
    v50 = &v49;
    v51 = 0x2020000000;
    v52 = 0;
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 3221225472;
    v44[2] = ___NTKSubmitCommonAnalyticsForAddFaceAndEarlyExitEvents_block_invoke;
    v44[3] = &unk_1E6BD49D0;
    v45 = v33;
    v47 = &v49;
    v48 = &v53;
    v30 = v32;
    v46 = v30;
    v39 = v45;
    objc_msgSend(v45, "enumerateVisibleComplicationSlotsForCurrentConfigurationWithBlock:", v44);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v50[3]);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "setObject:forKeyedSubscript:", v13, CFSTR("numberOfThirdPartyComplications"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v54[3] - v50[3]);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "setObject:forKeyedSubscript:", v14, CFSTR("numberOfFirstPartyComplications"));

    objc_msgSend(v34, "purchasedComplicationsItemIds");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "skippedComplicationsItemIds");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v38, "count"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "setObject:forKeyedSubscript:", v16, CFSTR("numberOfPurchasedComplications"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v15, "count"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "setObject:forKeyedSubscript:", v17, CFSTR("numberOfSkippedComplications"));

    objc_msgSend(v34, "complicationSlotToIdMapping");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v37 = (void *)objc_opt_new();
    v36 = (void *)objc_opt_new();
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    objc_msgSend(v18, "allValues");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v40, v57, 16);
    if (v20)
    {
      v21 = *(_QWORD *)v41;
      do
      {
        for (i = 0; i != v20; ++i)
        {
          if (*(_QWORD *)v41 != v21)
            objc_enumerationMutation(v19);
          v23 = *(_QWORD *)(*((_QWORD *)&v40 + 1) + 8 * i);
          objc_msgSend(v18, "allKeysForObject:", v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v24, "firstObject");
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v39, "complicationForSlot:", v25);
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v15, "containsObject:", v23))
          {
            if (v26 && (objc_msgSend(v37, "containsObject:", v26) & 1) == 0)
              objc_msgSend(v37, "addObject:", v26);
          }
          else
          {
            v27 = objc_msgSend(v38, "containsObject:", v23);
            if (v26)
              v28 = v27;
            else
              v28 = 0;
            if (v28 == 1
              && (objc_msgSend(v36, "containsObject:", v26) & 1) == 0
              && -1171354717 * arc4random() <= 0x1745D174)
            {
              objc_msgSend(v36, "addObject:", v26);
            }
          }

        }
        v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v40, v57, 16);
      }
      while (v20);
    }

    _NTKSubmitAnalyticsForShareFaceComplications(v37, v30, CFSTR("firstPartySkippedComplications"));
    _NTKSubmitAnalyticsForShareFaceComplications(v36, v30, CFSTR("firstPartyPurchasedComplications"));

    _Block_object_dispose(&v49, 8);
    _Block_object_dispose(&v53, 8);
  }
  else
  {
    _NTKLoggingObjectForDomain(29, (uint64_t)"NTKLoggingDomainMetrics");
    oslog = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
      _NTKSubmitCommonAnalyticsForAddFaceAndEarlyExitEvents_cold_1((uint64_t)v32, v3, oslog);
  }

  return v35;
}

void sub_1B73EE608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

void NTKSubmitAnalyticsForAddSharedFace(void *a1)
{
  id v1;
  id v2;
  _QWORD v3[4];
  id v4;

  v1 = a1;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __NTKSubmitAnalyticsForAddSharedFace_block_invoke;
  v3[3] = &unk_1E6BCD5F0;
  v4 = v1;
  v2 = v1;
  dispatch_metrics(v3);

}

void NTKSubmitAnalyticsForExitAddSharedFaceFlow(void *a1)
{
  id v1;
  id v2;
  _QWORD v3[4];
  id v4;

  v1 = a1;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __NTKSubmitAnalyticsForExitAddSharedFaceFlow_block_invoke;
  v3[3] = &unk_1E6BCD5F0;
  v4 = v1;
  v2 = v1;
  dispatch_metrics(v3);

}

void NTKSubmitAnalyticsForErrorAddFaceFlow(void *a1)
{
  id v1;
  id v2;
  _QWORD v3[4];
  id v4;

  v1 = a1;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __NTKSubmitAnalyticsForErrorAddFaceFlow_block_invoke;
  v3[3] = &unk_1E6BCD5F0;
  v4 = v1;
  v2 = v1;
  dispatch_metrics(v3);

}

double NTKUpNextUnitRectForFrameInBounds(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v13;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;

  v15.origin.x = a5;
  v15.origin.y = a6;
  v15.size.width = a7;
  v15.size.height = a8;
  if (CGRectIsEmpty(v15))
    return *MEMORY[0x1E0C9D648];
  v16.origin.x = a5;
  v16.origin.y = a6;
  v16.size.width = a7;
  v16.size.height = a8;
  if (CGRectIsNull(v16))
    return *MEMORY[0x1E0C9D648];
  v17.origin.x = a5;
  v17.origin.y = a6;
  v17.size.width = a7;
  v17.size.height = a8;
  CGRectGetMinY(v17);
  v18.origin.x = a5;
  v18.origin.y = a6;
  v18.size.width = a7;
  v18.size.height = a8;
  CGRectGetHeight(v18);
  v19.origin.x = a5;
  v19.origin.y = a6;
  v19.size.width = a7;
  v19.size.height = a8;
  v13 = a1 / CGRectGetWidth(v19);
  v20.origin.x = a5;
  v20.origin.y = a6;
  v20.size.width = a7;
  v20.size.height = a8;
  CGRectGetHeight(v20);
  v21.origin.x = a5;
  v21.origin.y = a6;
  v21.size.width = a7;
  v21.size.height = a8;
  CGRectGetWidth(v21);
  return v13;
}

double NTKUpNextThumbnailSize()
{
  void *v0;
  void *v1;
  uint64_t v2;
  double result;

  +[CLKRenderingContext sharedRenderingContext](NTKFaceViewRenderingContext, "sharedRenderingContext");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "device");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "sizeClass");

  result = 53.5;
  if (!v2)
    return 46.0;
  return result;
}

id NTKCellClassForStyle(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return (id)objc_opt_class();
}

double NTKSuggestedHeaderImageSizeForStyle(unint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;

  v3 = a2;
  objc_msgSend(NTKCellClassForStyle(a1), "suggestedHeaderImageSizeForDevice:", v3);
  v5 = v4;

  return v5;
}

double NTKSuggestedBodyImageSizeForStyle(unint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;

  v3 = a2;
  objc_msgSend(NTKCellClassForStyle(a1), "suggestedBodyImageSizeForDevice:", v3);
  v5 = v4;

  return v5;
}

void NTKUpNextFileRadarWithData(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  char v6;
  id v7;
  NSObject *v8;
  id v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (NTKInternalBuild(v1, v2))
  {
    v3 = (void *)MEMORY[0x1E0C99E98];
    NTKUpNextDiagnosticLogsFileName();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "fileURLWithPath:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      v9 = 0;
      v6 = objc_msgSend(v1, "writeToURL:atomically:encoding:error:", v5, 1, 4, &v9);
      v7 = v9;
      if ((v6 & 1) != 0)
      {
        v10[0] = v5;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 1);
        v8 = objc_claimAutoreleasedReturnValue();
        NTKDPromptToRaiseRadarWithAdditionalFiles(CFSTR("Siri Face Radar"), CFSTR("Additional diagnostic logs were collected from your watch. Tap 'OK' to continue raising the radar. (Internal alert only.)"), CFSTR("Supergreen: <Descriptive Title>"), 0, v8, 0);
LABEL_8:

        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
    }
    _NTKLoggingObjectForDomain(0, (uint64_t)"NTKLoggingDomainDefault");
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      NTKUpNextFileRadarWithData_cold_1((uint64_t)v7, v8);
    goto LABEL_8;
  }
LABEL_9:

}

id NTKUpNextDiagnosticLogsFileName()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (NTKUpNextDiagnosticLogsFileName_onceToken != -1)
    dispatch_once(&NTKUpNextDiagnosticLogsFileName_onceToken, &__block_literal_global_96);
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  NSTemporaryDirectory();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend((id)NTKUpNextDiagnosticLogsFileName_FileNameFormatter, "stringFromDate:", v0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("upnext_%@.log"), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringByAppendingPathComponent:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

CGFloat NTKUpNextMakeScaleTransformWithBoundsAndScale@<D0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D4>)
{
  double Height;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CGFloat result;
  CGAffineTransform v14;
  CGAffineTransform v15;

  Height = CGRectGetHeight(*(CGRect *)&a2);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  CGAffineTransformMakeTranslation((CGAffineTransform *)a1, 0.0, Height * 0.5);
  v9 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v14.a = *(_OWORD *)a1;
  *(_OWORD *)&v14.c = v9;
  *(_OWORD *)&v14.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformScale(&v15, &v14, a3, a3);
  v10 = *(_OWORD *)&v15.c;
  *(_OWORD *)a1 = *(_OWORD *)&v15.a;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v15.tx;
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v14.a = *(_OWORD *)a1;
  *(_OWORD *)&v14.c = v11;
  *(_OWORD *)&v14.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformTranslate(&v15, &v14, 0.0, -(Height * 0.5));
  v12 = *(_OWORD *)&v15.c;
  *(_OWORD *)a1 = *(_OWORD *)&v15.a;
  *(_OWORD *)(a1 + 16) = v12;
  result = v15.tx;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v15.tx;
  return result;
}

uint64_t getImageOrientation(CGImageSource *a1)
{
  const __CFDictionary *v1;
  uint64_t v2;
  const __CFDictionary *v3;
  const __CFNumber *Value;
  unsigned int valuePtr;

  v1 = CGImageSourceCopyPropertiesAtIndex(a1, 0, 0);
  v2 = 1;
  if (v1)
  {
    v3 = v1;
    Value = (const __CFNumber *)CFDictionaryGetValue(v1, (const void *)*MEMORY[0x1E0CBCFF0]);
    valuePtr = 1;
    if (Value)
    {
      if (CFNumberGetValue(Value, kCFNumberIntType, &valuePtr))
        v2 = valuePtr;
      else
        v2 = 1;
    }
    CFRelease(v3);
  }
  return v2;
}

void sub_1B73F446C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B73F4B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B73F5B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B73F7238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;

  _Block_object_dispose(&a47, 8);
  _Block_object_dispose((const void *)(v47 - 224), 8);
  _Block_object_dispose((const void *)(v47 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1B73F7B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B73F8B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1B73F8E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1B73F99C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a19);
  objc_destroyWeak(a9);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

void sub_1B73FC3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B73FD6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1B73FE344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B73FEEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B73FF100(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B74009C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7401114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7401900(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B74026C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B74027C0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1B74028E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1B7402A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

_SlotDescriptor *NTKMultiFamilyComplicationSlotDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[_SlotDescriptor descriptorWithComplicationFamilies:complicationTypesRankedList:allowedComplicationTypes:](_SlotDescriptor, "descriptorWithComplicationFamilies:complicationTypesRankedList:allowedComplicationTypes:", a1, a3, a2);
}

void sub_1B7402E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t NTKComplicationStringIsForNoImageGroupIdentifier(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqual:", CFSTR("com.apple.NanoSettings")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("com.apple.nanotimekit.off")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("com.apple.nanotimekit.astronomy")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("com.apple.nanotimekit.controls")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("com.apple.nanotimekit.internal")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("com.apple.nanotimekit.contacts")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("com.apple.nanotimekit.time")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("com.apple.DateComplicationsHost")) & 1) != 0
    || (objc_msgSend(v1, "isEqual:", CFSTR("com.apple.nanotimekit.personalization")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    v2 = objc_msgSend(v1, "isEqual:", CFSTR("com.apple.nanotimekit.siri"));
  }

  return v2;
}

void sub_1B7404E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74065C8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void _LayoutConstants_24(void *a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  id v15;

  v5 = a1;
  v15 = v5;
  if (a2)
  {
    v6 = v5;
    os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstantsExtraLarge___lock_1);
    WeakRetained = objc_loadWeakRetained(&_LayoutConstantsExtraLarge___cachedDevice_1);
    if (WeakRetained)
    {
      v8 = WeakRetained;
      v9 = objc_loadWeakRetained(&_LayoutConstantsExtraLarge___cachedDevice_1);
      if (v9 == v6)
      {
        v10 = objc_msgSend(v6, "version");
        v11 = _LayoutConstantsExtraLarge___previousCLKDeviceVersion_1;

        if (v10 == v11)
        {
LABEL_8:
          os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstantsExtraLarge___lock_1);
          v14 = *(_OWORD *)&qword_1EF174160;
          *a3 = _LayoutConstantsExtraLarge___constants_0;
          a3[1] = v14;
          a3[2] = xmmword_1EF174170;

          goto LABEL_9;
        }
      }
      else
      {

      }
    }
    v12 = objc_storeWeak(&_LayoutConstantsExtraLarge___cachedDevice_1, v6);
    _LayoutConstantsExtraLarge___previousCLKDeviceVersion_1 = objc_msgSend(v6, "version");

    ___LayoutConstantsExtraLarge_block_invoke_1(v13, v6);
    goto LABEL_8;
  }
  _LayoutConstantsModularSmall_0(v5, a3);
LABEL_9:

}

double _ModularSmallFontSize(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  float v14;
  double v15;

  v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&_ModularSmallFontSize___lock);
  WeakRetained = objc_loadWeakRetained(&_ModularSmallFontSize___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v5 = WeakRetained;
  v6 = objc_loadWeakRetained(&_ModularSmallFontSize___cachedDevice);
  if (v6 != v3)
  {

LABEL_5:
    v9 = objc_storeWeak(&_ModularSmallFontSize___cachedDevice, v3);
    _ModularSmallFontSize___previousCLKDeviceVersion = objc_msgSend(v3, "version");

    ___ModularSmallFontSize_block_invoke(v10, (uint64_t)v3);
    goto LABEL_6;
  }
  v7 = objc_msgSend(v3, "version");
  v8 = _ModularSmallFontSize___previousCLKDeviceVersion;

  if (v7 != v8)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_ModularSmallFontSize___lock);
  v11 = (void *)_ModularSmallFontSize_sizes;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "objectForKeyedSubscript:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "floatValue");
  v15 = v14;

  return v15;
}

void _LayoutConstantsModularSmall_0(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstantsModularSmall___lock_0);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstantsModularSmall___cachedDevice_0);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstantsModularSmall___cachedDevice_0);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstantsModularSmall___cachedDevice_0, obj);
    _LayoutConstantsModularSmall___previousCLKDeviceVersion_0 = objc_msgSend(obj, "version");

    ___LayoutConstantsModularSmall_block_invoke_0(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstantsModularSmall___previousCLKDeviceVersion_0;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstantsModularSmall___lock_0);
  v10 = *(_OWORD *)&qword_1EF1741A8;
  *a2 = _LayoutConstantsModularSmall___constants_0;
  a2[1] = v10;
  a2[2] = xmmword_1EF1741B8;

}

void _LayoutConstants_25(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;

  v5 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_40);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_40);
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v8 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_40);
    if (v8 == v5)
    {
      v9 = objc_msgSend(v5, "version");
      v10 = _LayoutConstants___previousCLKDeviceVersion_40;

      if (v9 == v10)
        goto LABEL_6;
    }
    else
    {

    }
  }
  v11 = objc_storeWeak(&_LayoutConstants___cachedDevice_40, v5);
  _LayoutConstants___previousCLKDeviceVersion_40 = objc_msgSend(v5, "version");

  ___LayoutConstants_block_invoke_37(v12, v5);
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_40);
  *(_QWORD *)(a3 + 80) = 0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  if (a2 == 12)
  {
    v14 = &_LayoutConstants___constantsGraphicExtraLarge_3;
  }
  else
  {
    if (a2 != 10)
    {
      _NTKLoggingObjectForDomain(18, (uint64_t)"NTKLoggingDomainComplication");
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        _LayoutConstants_cold_1(a2, v13);

    }
    v14 = &_LayoutConstants___constantsGraphicCircular_3;
  }
  v15 = v14[3];
  *(_OWORD *)(a3 + 32) = v14[2];
  *(_OWORD *)(a3 + 48) = v15;
  *(_OWORD *)(a3 + 64) = v14[4];
  *(_QWORD *)(a3 + 80) = *((_QWORD *)v14 + 10);
  v16 = v14[1];
  *(_OWORD *)a3 = *v14;
  *(_OWORD *)(a3 + 16) = v16;

}

void sub_1B7408DDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

id NTKVictoryTransitionTimingFunction()
{
  if (NTKVictoryTransitionTimingFunction_onceToken != -1)
    dispatch_once(&NTKVictoryTransitionTimingFunction_onceToken, &__block_literal_global_100);
  return (id)NTKVictoryTransitionTimingFunction__function;
}

__n128 _LayoutConstantsCircular@<Q0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstantsCircular___lock);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstantsCircular___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstantsCircular___cachedDevice);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstantsCircular___cachedDevice, obj);
    _LayoutConstantsCircular___previousCLKDeviceVersion = objc_msgSend(obj, "version");

    ___LayoutConstantsCircular_block_invoke(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstantsCircular___previousCLKDeviceVersion;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstantsCircular___lock);
  v10 = *(_OWORD *)&qword_1EF1743F8;
  a2[2] = xmmword_1EF1743E8;
  a2[3] = v10;
  a2[4] = xmmword_1EF174408;
  v11 = *(_OWORD *)&qword_1EF1743D8;
  *a2 = _LayoutConstantsCircular___constantsGraphicCircular;
  a2[1] = v11;

  return result;
}

void sub_1B740C2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B740C318(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

double NTKWorldClock_DayOfYearForDate(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  double v9;

  v1 = (objc_class *)MEMORY[0x1E0C99D48];
  v2 = a1;
  v3 = [v1 alloc];
  v4 = (void *)objc_msgSend(v3, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
  objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setTimeZone:", v5);

  objc_msgSend(v4, "components:fromDate:", 4, v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setMonth:", 1);
  objc_msgSend(v6, "setDay:", 1);
  objc_msgSend(v6, "setHour:", 0);
  objc_msgSend(v6, "setMinute:", 0);
  objc_msgSend(v6, "setSecond:", 0);
  objc_msgSend(v4, "dateFromComponents:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "components:fromDate:toDate:options:", 128, v7, v2, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = (double)objc_msgSend(v8, "second") / 86400.0 + 1.0;
  return v9;
}

double NTKWorldClock_MapPointForLocationOnMap(double a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;

  v5 = a5 + a3 * (a2 + 180.0) / 360.0;
  v6 = -0.0;
  if (v5 < 0.0)
    v6 = a3;
  v7 = v5 + v6;
  if (v7 <= a3)
    a3 = 0.0;
  return v7 - a3;
}

double NTKWorldClock_DegreesFromRadians(double a1)
{
  return a1 * 57.2957795;
}

double NTKWorldClock_RadiansFromDegrees(double a1)
{
  return a1 * 0.0174532925;
}

long double NTKWorldClock_SolarDeclination(double a1)
{
  return sin((a1 + 284.0) * 0.98630137 * 0.0174532925) * 23.45;
}

double NTKWorldClock_HourAngle(double a1)
{
  return (a1 + -12.0) * 15.0;
}

id NTKWorldClock_NightMaskPathForDayOfYear(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  long double v12;
  long double v13;
  double v14;
  double *v15;
  uint64_t i;
  double v17;
  double v18;
  long double v19;
  void *v20;
  double *v21;
  double *v22;
  uint64_t v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  size_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double *v36;
  uint64_t v37;
  double v39;
  long double __y;
  uint64_t v41;
  _QWORD v42[2];

  v3 = MEMORY[0x1E0C80A78](a1, a2, a3);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = v3;
  v42[0] = *MEMORY[0x1E0C80C00];
  v13 = sin((v3 + 284.0) * 0.98630137 * 0.0174532925) * 23.45;
  v39 = (modf(v12, &__y) * 24.0 + -12.0) * 15.0;
  v14 = tan(v13 * 0.0174532925);
  v15 = (double *)&v41;
  for (i = -180; i != 181; ++i)
  {
    v17 = (double)i;
    v18 = 90.0;
    if (v14 != 0.0)
    {
      v19 = cos((v39 + v17) * 0.0174532925);
      v18 = atan(-v19 / v14) * 57.2957795;
    }
    *(v15 - 1) = v18;
    *v15 = v17;
    v15 += 2;
  }
  objc_msgSend(MEMORY[0x1E0DC3508], "bezierPath");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = (double *)malloc_type_malloc(0x1690uLL, 0x1000040451B5BE8uLL);
  v22 = v21;
  v23 = 0x1FFFFFFFFFFFFD2ELL;
  do
  {
    v24 = &v21[v23];
    v25 = v7 + v11 * (*(double *)&v42[v23 + 1] + 180.0) / 360.0;
    v26 = -0.0;
    if (v25 < 0.0)
      v26 = v11;
    v27 = v25 + v26;
    if (v27 <= v11)
      v28 = 0.0;
    else
      v28 = v11;
    v29 = v27 - v28;
    v30 = v5 + v9 * (90.0 - *(double *)&v42[v23]) / 180.0;
    if (v30 < 0.0)
      v30 = 0.0;
    if (v30 > v9)
      v30 = v9;
    v24[722] = v29;
    v24[723] = v30;
    v23 += 2;
  }
  while (v23 * 8);
  v31 = *v21;
  v32 = 2;
  v33 = 720;
  v34 = *v21;
  while (1)
  {
    v35 = v34;
    v34 = v21[v32];
    if (v34 < v35)
      break;
    v32 += 2;
    v33 -= 2;
    if (!(v33 * 8))
      goto LABEL_21;
  }
  v36 = (double *)malloc_type_malloc(0x1690uLL, 0x5F2F6196uLL);
  __memcpy_chk();
  memcpy(&v36[v33], v22, v32 * 8);
  free(v22);
  v31 = *v36;
  v22 = v36;
LABEL_21:
  objc_msgSend(v20, "moveToPoint:", v31, v22[1], *(_QWORD *)&v39, 0x3F91DF46A2529D39);
  v37 = 0x1FFFFFFFFFFFFD30;
  do
  {
    objc_msgSend(v20, "addLineToPoint:", v22[v37 + 722], v22[v37 + 723]);
    v37 += 2;
  }
  while (v37 * 8);
  free(v22);
  return v20;
}

double _LayoutConstants_26(void *a1, uint64_t a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  __int128 *v11;
  NSObject *v12;
  double v13;

  v3 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_41);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_41);
  if (WeakRetained)
  {
    v5 = WeakRetained;
    v6 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_41);
    if (v6 == v3)
    {
      v7 = objc_msgSend(v3, "version");
      v8 = _LayoutConstants___previousCLKDeviceVersion_41;

      if (v7 == v8)
        goto LABEL_6;
    }
    else
    {

    }
  }
  v9 = objc_storeWeak(&_LayoutConstants___cachedDevice_41, v3);
  _LayoutConstants___previousCLKDeviceVersion_41 = objc_msgSend(v3, "version");

  ___LayoutConstants_block_invoke_38(v10, v3);
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_41);
  if (a2 == 10)
  {
LABEL_12:
    v11 = &_LayoutConstants___constantsGraphicCircular_4;
    goto LABEL_13;
  }
  if (a2 != 12)
  {
    _NTKLoggingObjectForDomain(18, (uint64_t)"NTKLoggingDomainComplication");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      _LayoutConstants_cold_1(a2, v12);

    goto LABEL_12;
  }
  v11 = &_LayoutConstants___constantsGraphicExtraLarge_4;
LABEL_13:
  v13 = *(double *)v11;

  return v13;
}

BOOL NTKWidgetVisibilityFromComplicationVisibility(_BOOL8 result)
{
  if (result != 2)
    return result == 1;
  return result;
}

id NTKArgonExtractorBasePath()
{
  void *v0;
  void *v1;
  NSObject *v2;
  int v4;
  void *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  BSCurrentUserDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("/Library/NanoTimeKit/FaceSupport/ExtractedBundles/"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 138412290;
    v5 = v1;
    _os_log_impl(&dword_1B72A3000, v2, OS_LOG_TYPE_DEFAULT, "Extracting to %@", (uint8_t *)&v4, 0xCu);
  }

  return v1;
}

id NTKArgonExtractorBuildVersion()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t buf[4];
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  NTKBuildVersion();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (NTKInternalBuild(v0, v1))
  {
    NTKBootSessionUUID();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "UUIDString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v0, v3);
    v4 = objc_claimAutoreleasedReturnValue();

    v0 = (void *)v4;
  }
  _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v8 = v0;
    _os_log_impl(&dword_1B72A3000, v5, OS_LOG_TYPE_DEFAULT, "Argon build directory is %@", buf, 0xCu);
  }

  return v0;
}

void sub_1B741280C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B7412B1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double _roundToEvenInt(double a1)
{
  return (double)(int)(vcvtpd_s64_f64(a1) & 0xFFFFFFFE);
}

void sub_1B741408C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t invokeBlockForArchiveEvent_0(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t (**v9)(void *, uint64_t, void *, uint64_t);
  void *v10;
  uint64_t v11;

  v8 = (void *)MEMORY[0x1BCCA7FA8]();
  v9 = (uint64_t (**)(void *, uint64_t, void *, uint64_t))_Block_copy(a1);
  if (v9)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = v9[2](v9, a2, v10, a4);

  }
  else
  {
    v11 = 0;
  }

  objc_autoreleasePoolPop(v8);
  return v11;
}

void _LayoutConstants_27(void *a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  id v5;
  id v6;
  id WeakRetained;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  id v15;

  v5 = a1;
  v15 = v5;
  if (a2)
  {
    v6 = v5;
    os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstantsExtraLarge___lock_3);
    WeakRetained = objc_loadWeakRetained(&_LayoutConstantsExtraLarge___cachedDevice_3);
    if (WeakRetained)
    {
      v8 = WeakRetained;
      v9 = objc_loadWeakRetained(&_LayoutConstantsExtraLarge___cachedDevice_3);
      if (v9 == v6)
      {
        v10 = objc_msgSend(v6, "version");
        v11 = _LayoutConstantsExtraLarge___previousCLKDeviceVersion_3;

        if (v10 == v11)
        {
LABEL_8:
          os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstantsExtraLarge___lock_3);
          v14 = xmmword_1EF174528;
          *a3 = _LayoutConstantsExtraLarge_constants;
          a3[1] = v14;
          a3[2] = xmmword_1EF174538;

          goto LABEL_9;
        }
      }
      else
      {

      }
    }
    v12 = objc_storeWeak(&_LayoutConstantsExtraLarge___cachedDevice_3, v6);
    _LayoutConstantsExtraLarge___previousCLKDeviceVersion_3 = objc_msgSend(v6, "version");

    ___LayoutConstantsExtraLarge_block_invoke_4(v13, v6);
    goto LABEL_8;
  }
  _LayoutConstantsModularSmall_1(v5, a3);
LABEL_9:

}

void sub_1B741815C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void _LayoutConstantsModularSmall_1(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstantsModularSmall___lock_1);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstantsModularSmall___cachedDevice_1);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstantsModularSmall___cachedDevice_1);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstantsModularSmall___cachedDevice_1, obj);
    _LayoutConstantsModularSmall___previousCLKDeviceVersion_1 = objc_msgSend(obj, "version");

    ___LayoutConstantsModularSmall_block_invoke_1(v9, obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstantsModularSmall___previousCLKDeviceVersion_1;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstantsModularSmall___lock_1);
  v10 = *(_OWORD *)&qword_1EF174570;
  *a2 = _LayoutConstantsModularSmall_constants;
  a2[1] = v10;
  a2[2] = xmmword_1EF174580;

}

void sub_1B7418FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void _LayoutConstants_28(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  __int128 *v14;
  uint64_t *v15;
  id v16;
  uint64_t v17;

  v5 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_42);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_42);
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v8 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_42);
    if (v8 == v5)
    {
      v9 = objc_msgSend(v5, "version");
      v10 = _LayoutConstants___previousCLKDeviceVersion_42;

      if (v9 == v10)
        goto LABEL_6;
    }
    else
    {

    }
  }
  v11 = objc_storeWeak(&_LayoutConstants___cachedDevice_42, v5);
  _LayoutConstants___previousCLKDeviceVersion_42 = objc_msgSend(v5, "version");

  ___LayoutConstants_block_invoke_40(v12, v5);
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_42);
  *(_QWORD *)(a3 + 24) = 0;
  if (a2 == 12)
  {
    v14 = &_LayoutConstants___constantsGraphicExtraLarge_5;
  }
  else
  {
    if (a2 != 10)
    {
      _NTKLoggingObjectForDomain(18, (uint64_t)"NTKLoggingDomainComplication");
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        _LayoutConstants_cold_1(a2, v13);

    }
    v14 = &_LayoutConstants___constantsGraphicCircular_5;
  }
  *(_OWORD *)a3 = *v14;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)v14 + 2);
  v15 = (uint64_t *)(v14 + 2);
  v16 = *((id *)v14 + 3);
  v17 = *v15;
  *(_QWORD *)(a3 + 24) = v16;
  *(_QWORD *)(a3 + 32) = v17;

}

void sub_1B74192E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B7419544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B7419634(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

id NTKFaceArgonSupportCreateAttachmentWithImageData(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  char v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  NSObject *v16;
  id v18;
  id v19;
  _QWORD v20[2];
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1;
  NSTemporaryDirectory();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByAppendingPathComponent:", v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = 0;
  v7 = objc_msgSend(v4, "writeToFile:options:error:", v6, 1, &v19);

  v8 = v19;
  if ((v7 & 1) != 0)
  {
    v9 = *MEMORY[0x1E0CEC530];
    v10 = *MEMORY[0x1E0CEC7F0];
    v20[0] = *MEMORY[0x1E0CEC7F8];
    v20[1] = v10;
    v21[0] = v9;
    v21[1] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, v20, 2);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = (void *)MEMORY[0x1E0CEC718];
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v6);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v8;
    objc_msgSend(v12, "attachmentWithIdentifier:URL:options:error:", v3, v13, v11, &v18);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = v18;

    if (!v14)
    {
      _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
      v16 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        NTKFaceArgonSupportCreateAttachmentWithImageData_cold_1();

    }
  }
  else
  {
    _NTKLoggingObjectForDomain(39, (uint64_t)"NTKLoggingDomainArgon");
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      NTKFaceArgonSupportCreateAttachmentWithImageData_cold_2();
    v14 = 0;
    v15 = v8;
  }

  return v14;
}

void sub_1B741BA74(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 232), 8);
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1B741C7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B741CB94(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1B741CD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B741DE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B741EABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _LayoutConstants_29(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_43);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_43);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_43);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_LayoutConstants___cachedDevice_43, v1);
    _LayoutConstants___previousCLKDeviceVersion_43 = objc_msgSend(v1, "version");

    ___LayoutConstants_block_invoke_41(v8, (uint64_t)v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _LayoutConstants___previousCLKDeviceVersion_43;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_43);
  v9 = *(double *)&_LayoutConstants___constants_0_6;

  return v9;
}

void sub_1B741FA30(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B741FA50(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1B741FA00);
}

void sub_1B741FAEC(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B741FB0C(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1B741FAC0);
}

void sub_1B741FF40(_Unwind_Exception *exception_object, int a2)
{
  id v2;
  NSObject *v3;

  if (a2)
  {
    if (a2 == 2)
    {
      v2 = objc_begin_catch(exception_object);
      _NTKLoggingObjectForDomain(46, (uint64_t)"NTKLoggingDomainPigment");
      v3 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        -[NTKPigmentPreferenceManager setAutoSelectedPigments:forCollectionName:].cold.1((uint64_t)v2, v3);

      objc_end_catch();
      JUMPOUT(0x1B741FEE0);
    }
    objc_begin_catch(exception_object);
    JUMPOUT(0x1B741FEE4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74201B0(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B74201D0(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1B7420178);
}

void sub_1B74202B8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B74202D8(void *a1)
{
  objc_begin_catch(a1);
  JUMPOUT(0x1B7420290);
}

uint64_t NTKProtoPigmentCollectionReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  NTKProtoPigmentCollectionConfig *v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  BOOL v33;
  uint64_t v34;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(NTKProtoPigmentCollectionConfig);
        objc_storeStrong((id *)(a1 + 16), v17);
        if (PBReaderPlaceMark() && (NTKProtoPigmentCollectionConfigReadFrom(v17, a2) & 1) != 0)
          goto LABEL_33;
        goto LABEL_59;
      case 2u:
        PBReaderReadString();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = *(void **)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v19;

        goto LABEL_57;
      case 3u:
        v17 = objc_alloc_init(NTKProtoPigment);
        objc_storeStrong((id *)(a1 + 32), v17);
        goto LABEL_28;
      case 4u:
        v17 = objc_alloc_init(NTKProtoPigment);
        objc_msgSend((id)a1, "addItems:", v17);
        goto LABEL_28;
      case 5u:
        v17 = objc_alloc_init(NTKProtoPigment);
        objc_msgSend((id)a1, "addDefaultGalleryColors:", v17);
LABEL_28:
        if (!PBReaderPlaceMark() || (NTKProtoPigmentReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_59;
        goto LABEL_33;
      case 6u:
        v17 = objc_alloc_init(NTKProtoPigmentCollection);
        objc_msgSend((id)a1, "addCollections:", v17);
        if (PBReaderPlaceMark() && (NTKProtoPigmentCollectionReadFrom(v17, a2) & 1) != 0)
        {
LABEL_33:
          PBReaderRecallMark();

LABEL_57:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_59:

        return 0;
      case 7u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 60) |= 1u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_51:
        v33 = v23 != 0;
        v34 = 56;
        goto LABEL_56;
      case 8u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                v29 = 0;
                goto LABEL_55;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v29 = 0;
LABEL_55:
        v33 = v29 != 0;
        v34 = 57;
LABEL_56:
        *(_BYTE *)(a1 + v34) = v33;
        goto LABEL_57;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_57;
    }
  }
}

void sub_1B7422C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

void _LayoutConstants_30(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  __int128 *v14;
  void *v15;

  v5 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_44);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_44);
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v8 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_44);
    if (v8 == v5)
    {
      v9 = objc_msgSend(v5, "version");
      v10 = _LayoutConstants___previousCLKDeviceVersion_44;

      if (v9 == v10)
        goto LABEL_6;
    }
    else
    {

    }
  }
  v11 = objc_storeWeak(&_LayoutConstants___cachedDevice_44, v5);
  _LayoutConstants___previousCLKDeviceVersion_44 = objc_msgSend(v5, "version");

  ___LayoutConstants_block_invoke_42(v12, v5);
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_44);
  *(_QWORD *)(a3 + 24) = 0;
  if (a2 == 12)
  {
    v14 = &_LayoutConstants___constantsGraphicExtraLarge_6;
  }
  else
  {
    if (a2 != 10)
    {
      _NTKLoggingObjectForDomain(18, (uint64_t)"NTKLoggingDomainComplication");
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        _LayoutConstants_cold_1(a2, v13);

    }
    v14 = &_LayoutConstants___constantsGraphicCircular_6;
  }
  *(_OWORD *)a3 = *v14;
  v15 = (void *)*((_QWORD *)v14 + 3);
  *(_QWORD *)(a3 + 16) = *((_QWORD *)v14 + 2);
  *(_QWORD *)(a3 + 24) = v15;
  *(_OWORD *)(a3 + 32) = v14[2];

}

void sub_1B7422F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B7424978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B7424B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _LayoutConstants_31(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_45);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_45);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_45);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_LayoutConstants___cachedDevice_45, v1);
    _LayoutConstants___previousCLKDeviceVersion_45 = objc_msgSend(v1, "version");

    ___LayoutConstants_block_invoke_43(v8, (uint64_t)v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _LayoutConstants___previousCLKDeviceVersion_45;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_45);
  v9 = *(double *)&_LayoutConstants___constants_0_7;

  return v9;
}

void sub_1B7426858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void NTKFaceLibraryPageSizeForZoomLevel(uint64_t a1)
{
  void *v2;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "screenBounds");

  NTKFaceLibraryPageWidthForZoomLevel(a1);
}

double NTKFaceLibraryPageWidthForZoomLevel(uint64_t a1)
{
  double v1;
  void *v3;
  double v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v6 = 0u;
  _LayoutConstants_32(v3, (uint64_t)&v6);
  switch(a1)
  {
    case 0:
      objc_msgSend(v3, "screenBounds");
      v1 = v4;
      break;
    case 1:
      v1 = *(double *)&v7;
      break;
    case 2:
    case 3:
      v1 = *(double *)&v8;
      break;
    case 4:
      v1 = *((double *)&v9 + 1);
      break;
    default:
      break;
  }

  return v1;
}

void _LayoutConstants_32(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_46);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_46);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_46);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_46, obj);
    _LayoutConstants___previousCLKDeviceVersion_46 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_44(v9, obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_46;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_46);
  v10 = unk_1EF174830;
  *(_OWORD *)(a2 + 32) = xmmword_1EF174820;
  *(_OWORD *)(a2 + 48) = v10;
  *(_OWORD *)(a2 + 64) = xmmword_1EF174840;
  *(_QWORD *)(a2 + 80) = qword_1EF174850;
  v11 = *(_OWORD *)&qword_1EF174810;
  *(_OWORD *)a2 = _LayoutConstants___constants_10;
  *(_OWORD *)(a2 + 16) = v11;

}

double NTKFaceLibraryPageSpacingForZoomLevel(uint64_t a1)
{
  double v1;
  void *v3;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double v9;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = 0.0;
  v7 = 0u;
  v8 = 0u;
  v6 = 0u;
  memset(v5, 0, sizeof(v5));
  _LayoutConstants_32(v3, (uint64_t)v5);
  switch(a1)
  {
    case 0:
      v1 = *((double *)v5 + 1);
      break;
    case 1:
    case 2:
      v1 = v9;
      break;
    case 3:
      v1 = *((double *)&v6 + 1);
      break;
    case 4:
      v1 = *(double *)&v8;
      break;
    default:
      break;
  }

  return v1;
}

double NTKFaceLibraryPageVerticalOffsetForZoomLevel(uint64_t a1)
{
  void *v2;
  double v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  v5 = 0u;
  _LayoutConstants_32(v2, (uint64_t)&v5);
  if ((unint64_t)(a1 - 2) < 2)
  {
    v3 = *(double *)&v8;
  }
  else if (a1 == 4)
  {
    v3 = *((double *)&v9 + 1);
  }
  else
  {
    v3 = 0.0;
    if (a1 == 1)
      v3 = *((double *)&v6 + 1);
  }

  return v3;
}

double NTKFaceLibraryPageScaleForZoomLevel(uint64_t a1)
{
  double v2;

  v2 = NTKFaceLibraryPageWidthForZoomLevel(0);
  return NTKFaceLibraryPageWidthForZoomLevel(a1) / v2;
}

double NTKFaceFullscreenKeylineFrame()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "screenBounds");
  v2 = v1;
  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  _LayoutConstants_32(v0, (uint64_t)&v7);
  v3 = *(double *)&v8;
  NTKFaceEditingFullscreenKeylineMargin();
  NTKKeylineWidth();
  v4 = NTKFaceEditingFullscreenKeylineMargin();
  v5 = v3 + (v4 + NTKKeylineWidth()) * 2.0;

  return (v2 - v5) * 0.5;
}

uint64_t NTKFaceLibraryTabEditorEnabled()
{
  return 1;
}

double NTKFaceLibraryGalleryTransitionDisappearScale()
{
  return 0.5;
}

void sub_1B7427E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7428788(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

double NTKWhistlerBezelCircularViewFontSize(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&NTKWhistlerBezelCircularViewFontSize___lock);
  WeakRetained = objc_loadWeakRetained(&NTKWhistlerBezelCircularViewFontSize___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&NTKWhistlerBezelCircularViewFontSize___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&NTKWhistlerBezelCircularViewFontSize___cachedDevice, v1);
    NTKWhistlerBezelCircularViewFontSize___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    __NTKWhistlerBezelCircularViewFontSize_block_invoke(v8, (uint64_t)v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = NTKWhistlerBezelCircularViewFontSize___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&NTKWhistlerBezelCircularViewFontSize___lock);
  v9 = *(double *)&NTKWhistlerBezelCircularViewFontSize_fontSize;

  return v9;
}

double NTKWhistlerBezelCircularViewDefaultCenterAngle()
{
  return 0.0;
}

double NTKWhistlerBezelCircularViewDefaultTracking()
{
  return 30.0;
}

double NTKWhistlerBezelCircularViewDefaultTrackingArabic()
{
  return 0.0;
}

double NTKWhistlerBezelCircularViewDefaultMaxAngularWidth()
{
  return 2.96705973;
}

double NTKWhistlerBezelCircularViewDefaultAngularWidthPadding()
{
  return 0.0872664626;
}

id _NTKRegisteredDisplayClasses()
{
  if (_NTKRegisteredDisplayClasses_onceToken != -1)
    dispatch_once(&_NTKRegisteredDisplayClasses_onceToken, &__block_literal_global_110);
  return (id)_NTKRegisteredDisplayClasses_displayClasses;
}

id NTKComplicationDisplayClassForTemplateAndFamily(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  id v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  _NTKRegisteredDisplayClasses();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v9, "handlesComplicationTemplate:", v3, (_QWORD)v12)
          && ((objc_opt_respondsToSelector() & 1) == 0 || (objc_msgSend(v9, "supportsComplicationFamily:", a2) & 1) != 0))
        {
          v10 = v9;
          goto LABEL_13;
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v6)
        continue;
      break;
    }
  }
  v10 = 0;
LABEL_13:

  return v10;
}

void sub_1B742CAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B742D048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B742D388(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id NTKCaliforniaMulticolorColor(void *a1, double a2)
{
  float v2;
  int v3;
  int v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = a2;
  v3 = (int)(float)(fminf(fmaxf(v2, 0.0), 1.0) * 12.0);
  v4 = (v3 + 1) % 12;
  v5 = v3;
  v6 = a1;
  objc_msgSend(v6, "digitColorAtIndex:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "digitColorAtIndex:", v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  CLKUIInterpolateBetweenColors();
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void sub_1B742E3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1B742F368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose(&STACK[0x420], 8);
  _Unwind_Resume(a1);
}

void sub_1B7430294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _disabledDataSourcesDidChange(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "reloadSpecifiers");
}

void sub_1B7431A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B7432658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t _handleDaemonDidLaunchNotification_0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_register");
}

void sub_1B743490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B743565C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double NTKColorFaceViewSelectedKeylineInnerPadding(void *a1)
{
  double v2[7];

  _LayoutConstants_33(a1, (uint64_t)v2);
  return v2[0];
}

void _LayoutConstants_33(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_47);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_47);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_47);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_47, obj);
    _LayoutConstants___previousCLKDeviceVersion_47 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_45(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_47;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_47);
  v10 = *(_OWORD *)&qword_1EF174908;
  *(_OWORD *)a2 = _LayoutConstants___constants_11;
  *(_OWORD *)(a2 + 16) = v10;
  *(_OWORD *)(a2 + 32) = xmmword_1EF174918;
  *(_QWORD *)(a2 + 48) = qword_1EF174928;

}

double NTKColorFaceViewDeselectedKeylineInnerPadding(void *a1)
{
  _BYTE v2[8];
  double v3;

  _LayoutConstants_33(a1, (uint64_t)v2);
  return v3;
}

double NTKColorFaceViewEdgeGapNormal(void *a1)
{
  _BYTE v2[16];
  double v3;

  _LayoutConstants_33(a1, (uint64_t)v2);
  return v3;
}

double NTKColorFaceViewEdgeGapEditing(void *a1)
{
  _BYTE v2[24];
  double v3;

  _LayoutConstants_33(a1, (uint64_t)v2);
  return v3;
}

double NTKColorFaceViewEdgeGapDeselected(void *a1)
{
  _BYTE v2[32];
  double v3;

  _LayoutConstants_33(a1, (uint64_t)v2);
  return v3;
}

double NTKColorFaceViewEdgeGapSelected(void *a1)
{
  _BYTE v2[40];
  double v3;

  _LayoutConstants_33(a1, (uint64_t)v2);
  return v3;
}

double NTKColorFaceViewLisaKeylineGap(void *a1)
{
  _BYTE v2[48];
  double v3;

  _LayoutConstants_33(a1, (uint64_t)v2);
  return v3;
}

uint64_t OUTLINED_FUNCTION_4_1(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void OUTLINED_FUNCTION_7_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_1B743E900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1B743F25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1B743FAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _richCircularEmptyImage(double a1, double a2, CGFloat a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  void *v16;
  _QWORD v18[3];
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  UIGraphicsBeginImageContextWithOptions(*(CGSize *)&a1, 0, a3);
  objc_msgSend(MEMORY[0x1E0C944D0], "systemFontOfSize:weight:design:", *MEMORY[0x1E0C940A8], a2, *MEMORY[0x1E0DC1448]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "CLKFontWithAlternativePunctuation");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  NTKClockFaceLocalizedString(CFSTR("SIGNATURE_SUBDIAL_NO_DATA"), CFSTR("--"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0DC1290], "defaultParagraphStyle");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = (void *)objc_msgSend(v9, "mutableCopy");

  objc_msgSend(v10, "setAlignment:", 1);
  v11 = *MEMORY[0x1E0DC1138];
  v18[0] = *MEMORY[0x1E0DC1178];
  v18[1] = v11;
  v19[0] = v10;
  v19[1] = v7;
  v18[2] = *MEMORY[0x1E0DC1140];
  objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v19[2] = v12;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 3);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "sizeWithAttributes:", v13);
  *(float *)&v14 = (a1 - v14) * 0.5;
  *(float *)&v15 = (a1 - v15) * 0.5;
  objc_msgSend(v8, "drawAtPoint:withAttributes:", v13, ceilf(*(float *)&v14), ceilf(*(float *)&v15));
  UIGraphicsGetImageFromCurrentImageContext();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  UIGraphicsEndImageContext();

  return v16;
}

void _LayoutConstants_34(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_48);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_48);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_48);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_48, obj);
    _LayoutConstants___previousCLKDeviceVersion_48 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_46(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_48;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_48);
  v10 = *(_OWORD *)&qword_1EF174A08;
  a2[4] = xmmword_1EF1749F8;
  a2[5] = v10;
  v11 = unk_1EF174A28;
  a2[6] = xmmword_1EF174A18;
  a2[7] = v11;
  v12 = *(_OWORD *)&qword_1EF1749C8;
  *a2 = _LayoutConstants_constants_2;
  a2[1] = v12;
  v13 = *(_OWORD *)&qword_1EF1749E8;
  a2[2] = xmmword_1EF1749D8;
  a2[3] = v13;

}

void sub_1B7443F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id NTKUniqueIDForNTKPhoto(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  void *v7;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  CGRect v18;
  CGRect v19;

  v1 = a1;
  v2 = (void *)MEMORY[0x1E0CD1698];
  objc_msgSend(v1, "localIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "uuidFromLocalIdentifier:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "modificationDate");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "timeIntervalSince1970");
  objc_msgSend(v4, "stringByAppendingFormat:", CFSTR("-%ld"), (uint64_t)v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "originalCrop");
  x = v18.origin.x;
  y = v18.origin.y;
  width = v18.size.width;
  height = v18.size.height;
  if (CGRectIsEmpty(v18))
  {
    objc_msgSend(v1, "crop");
    x = v12;
    y = v13;
    width = v14;
    height = v15;
  }
  v19.origin.x = x;
  v19.origin.y = y;
  v19.size.width = width;
  v19.size.height = height;
  if (!CGRectIsEmpty(v19))
  {
    objc_msgSend(v7, "stringByAppendingFormat:", CFSTR("-((%05.1f-%05.1f)-(%05.1f,%05.1f))"), *(_QWORD *)&x, *(_QWORD *)&y, *(_QWORD *)&width, *(_QWORD *)&height);
    v16 = objc_claimAutoreleasedReturnValue();

    v7 = (void *)v16;
  }

  return v7;
}

id _NTKTrueAlbumNameForAssetCollection(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v11[2];

  v11[1] = *MEMORY[0x1E0C80C00];
  v1 = (void *)MEMORY[0x1E0CD13B8];
  objc_msgSend(a1, "npto_uuid");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "UUIDString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "localIdentifierWithUUID:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = (void *)MEMORY[0x1E0CD13B8];
  v11[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v11, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "fetchAssetCollectionsWithLocalIdentifiers:options:", v6, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  v8 = 0;
  if (objc_msgSend(v7, "count") == 1)
  {
    objc_msgSend(v7, "firstObject");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "localizedTitle");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v8;
}

id NTKAlbumNameForLocalIdentifier(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  id v21;
  id obj;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
    v5 = 4;
  else
    v5 = 1;
  v6 = objc_alloc(MEMORY[0x1E0D515F8]);
  objc_msgSend(v4, "nrDevice");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v6, "initWithCollectionTarget:device:", v5, v7);

  if (v3)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    objc_msgSend(v8, "assetCollections");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v9 = (id)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    if (v9)
    {
      v21 = v4;
      v10 = *(_QWORD *)v24;
      while (2)
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v10)
            objc_enumerationMutation(obj);
          v12 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
          v13 = (void *)MEMORY[0x1E0CD13B8];
          objc_msgSend(v12, "npto_uuid");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "UUIDString");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "localIdentifierWithUUID:", v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "isEqualToString:", v3);

          if (v17)
          {
            v9 = v12;
            goto LABEL_15;
          }
        }
        v9 = (id)objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
        if (v9)
          continue;
        break;
      }
LABEL_15:
      v4 = v21;
    }

    if (!v9)
      goto LABEL_20;
  }
  else
  {
    objc_msgSend(v8, "assetCollections");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "anyObject");
    v9 = (id)objc_claimAutoreleasedReturnValue();

    if (!v9)
    {
LABEL_20:
      objc_msgSend(v9, "localizedTitle");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_21;
    }
  }
  _NTKTrueAlbumNameForAssetCollection(v9);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v19)
    goto LABEL_20;
LABEL_21:

  return v19;
}

void sub_1B7445988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL NTKPhotosUpdateLegibility(void *a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NTKCachedPhoto *v8;
  uint64_t v9;
  char v10;
  char v11;
  void *v12;
  _BOOL8 v13;
  __int128 v15;
  uint64_t v16;
  id obj;
  uint64_t v18;
  _QWORD v19[5];
  NTKCachedPhoto *v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint8_t buf[4];
  void *v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v28 = &v27;
  v29 = 0x2020000000;
  v30 = 0;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  obj = a1;
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
  if (v1)
  {
    v18 = *(_QWORD *)v24;
    *(_QWORD *)&v2 = 138412290;
    v15 = v2;
    v3 = MEMORY[0x1E0C809B0];
    do
    {
      v4 = 0;
      v16 = v1;
      do
      {
        if (*(_QWORD *)v24 != v18)
          objc_enumerationMutation(obj);
        v5 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v4);
        if (objc_msgSend(v5, "isMissingAnalysis", v15))
        {
          _NTKLoggingObjectForDomain(17, (uint64_t)"NTKLoggingDomainMigration");
          v6 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v5, "localIdentifier");
            v7 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = v15;
            v32 = v7;
            _os_log_impl(&dword_1B72A3000, v6, OS_LOG_TYPE_DEFAULT, "  ** photo %@ needs more analysis", buf, 0xCu);

          }
          v8 = -[NTKCachedPhoto initWithPhoto:]([NTKCachedPhoto alloc], "initWithPhoto:", v5);
          if (-[NTKCachedPhoto load](v8, "load"))
          {
            v9 = 0;
            v10 = 1;
            do
            {
              v11 = v10;
              v12 = (void *)MEMORY[0x1E0C944B0];
              v19[0] = v3;
              v19[1] = 3221225472;
              v19[2] = __NTKPhotosUpdateLegibility_block_invoke;
              v19[3] = &unk_1E6BD60F8;
              v19[4] = v5;
              v22 = v9;
              v20 = v8;
              v21 = &v27;
              objc_msgSend(v12, "enumerateSizeClasses:", v19);

              v10 = 0;
              v9 = 1;
            }
            while ((v11 & 1) != 0);
          }

          v1 = v16;
        }
        ++v4;
      }
      while (v4 != v1);
      v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v33, 16);
    }
    while (v1);
  }

  v13 = *((_BYTE *)v28 + 24) != 0;
  _Block_object_dispose(&v27, 8);

  return v13;
}

void sub_1B7446594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

id NTKCloneResourceDirectoryForReader(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  NTKPhotosCreateResourceDirectory();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v1, "count"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v19 = v1;
    v4 = v1;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v21;
      while (2)
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v21 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * i);
          objc_msgSend(v9, "imageURL");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          NTKPhotosLinkURL(v10, v2);
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          if (!v11)
            goto LABEL_15;
          objc_msgSend(v9, "setImageURL:", v11);
          if (objc_msgSend(v9, "isIris"))
          {
            objc_msgSend(v9, "irisVideoURL");
            v12 = (void *)objc_claimAutoreleasedReturnValue();

            if (v12)
            {
              objc_msgSend(v9, "irisVideoURL");
              v13 = (void *)objc_claimAutoreleasedReturnValue();
              NTKPhotosLinkURL(v13, v2);
              v14 = objc_claimAutoreleasedReturnValue();

              v11 = (void *)v14;
              if (!v14)
              {
LABEL_15:
                objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
                v17 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v17, "removeItemAtPath:error:", v2, 0);

                goto LABEL_18;
              }
            }
          }
          objc_msgSend(v9, "encodeAsDictionary");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "addObject:", v15);

        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        if (v6)
          continue;
        break;
      }
    }

    if ((NTKPhotosWriteImageListWithVersionForAssetCollection(v3, 1, 0, v2) & 1) != 0)
    {
      v16 = v2;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v4 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "removeItemAtPath:error:", v2, 0);
LABEL_18:

      v16 = 0;
    }
    v1 = v19;

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

id NTKPhotosCreateResourceDirectory()
{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v11;

  NTKNewUniqueTeporaryResourceDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0;
  objc_msgSend(v1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v0, 1, 0, &v11);
  v2 = v11;

  if (v2)
  {
    _NTKLoggingObjectForDomain(6, (uint64_t)"NTKLoggingDomainPhoto");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      NTKPhotosCreateResourceDirectory_cold_1((uint64_t)v0, v3, v4, v5, v6, v7, v8, v9);

    v0 = 0;
  }

  return v0;
}

id NTKPhotosLinkURL(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  NSObject *v14;
  void *v15;
  char v16;
  void *v17;
  NSObject *v18;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1;
  TCCAccessPreflight();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)MEMORY[0x1E0CB3940];
  v7 = objc_retainAutorelease(v4);
  v8 = objc_msgSend(v7, "fileSystemRepresentation");

  objc_msgSend(v6, "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "lastPathComponent");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringByAppendingPathComponent:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v21 = 0;
  objc_msgSend(v5, "copyItemAtPath:toPath:error:", v9, v11, &v21);
  v12 = v21;
  if (v12)
  {
    v13 = v12;
    _NTKLoggingObjectForDomain(6, (uint64_t)"NTKLoggingDomainPhoto");
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      v25 = v9;
      v26 = 2112;
      v27 = v11;
      v28 = 2112;
      v29 = v13;
      _os_log_error_impl(&dword_1B72A3000, v14, OS_LOG_TYPE_ERROR, "NTKPhotosLinkURL(%@, %@): error %@", buf, 0x20u);
    }

LABEL_10:
    v17 = 0;
    goto LABEL_11;
  }
  v22 = *MEMORY[0x1E0CB2AD8];
  v23 = *MEMORY[0x1E0CB2AE0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = 0;
  v16 = objc_msgSend(v5, "setAttributes:ofItemAtPath:error:", v15, v11, &v20);
  v13 = v20;

  if ((v16 & 1) == 0)
  {
    _NTKLoggingObjectForDomain(6, (uint64_t)"NTKLoggingDomainPhoto");
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      v25 = v9;
      v26 = 2112;
      v27 = v11;
      v28 = 2112;
      v29 = v13;
      _os_log_error_impl(&dword_1B72A3000, v18, OS_LOG_TYPE_ERROR, "NTKPhotosLinkURL(%@, %@): cannot set class D on destination: error %@", buf, 0x20u);
    }

    objc_msgSend(v5, "removeItemAtPath:error:", v11, 0);
    goto LABEL_10;
  }
  objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v11, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:

  return v17;
}

uint64_t NTKPhotosWriteImageList(void *a1, void *a2)
{
  return NTKPhotosWriteImageListWithVersionForAssetCollection(a1, 1, 0, a2);
}

id NTKPhotosConvertSidecar(void *a1)
{
  return _convertSidecarForFaceStyle(a1, 22);
}

id _convertSidecarForFaceStyle(void *a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  id v17;
  void *v19;
  uint8_t buf[4];
  id v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  _NTKLoggingObjectForDomain(6, (uint64_t)"NTKLoggingDomainPhoto");
  v4 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v21 = v3;
    v22 = 2048;
    v23 = a2;
    _os_log_impl(&dword_1B72A3000, v4, OS_LOG_TYPE_DEFAULT, "NTKConvertSidecarForFaceStyle(%@, %lu)", buf, 0x16u);
  }

  +[NTKPhotosReader readerForResourceDirectory:](NTKPhotosReader, "readerForResourceDirectory:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    if (a2 == 22)
      NTKPhotosUpdateLegibility(v5);
    objc_msgSend(v6, "firstObject");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7)
    {
      NTKPhotosCreateResourceDirectory();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v8)
      {
        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "imageURL");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        NTKPhotosLinkURL(v10, v8);
        v11 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v11)
          goto LABEL_16;
        if (a2 == 22)
        {
          if (objc_msgSend(v7, "isIris"))
          {
            objc_msgSend(v7, "irisVideoURL");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            NTKPhotosLinkURL(v12, v8);
            v13 = (void *)objc_claimAutoreleasedReturnValue();

            if (!v13)
              goto LABEL_16;
          }
        }
        objc_msgSend(v7, "encodeAsDictionary");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = v14;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v19, 1);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = NTKPhotosWriteImageListWithVersionForAssetCollection(v15, 1, 0, v8);

        if ((v16 & 1) != 0)
        {
          v17 = v8;
        }
        else
        {
LABEL_16:
          objc_msgSend(v9, "removeItemAtPath:error:", v8, 0);
          v17 = 0;
        }

      }
      else
      {
        v17 = 0;
      }

    }
    else
    {
      v17 = 0;
    }

  }
  else
  {
    v17 = 0;
  }

  return v17;
}

id NTKKaleidoscopeConvertSidecar(void *a1)
{
  return _convertSidecarForFaceStyle(a1, 23);
}

uint64_t NTKPhotosWriteImageListWithVersionForAssetCollection(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  void *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v9 = a1;
  v10 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v11, CFSTR("version"));

  objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, CFSTR("imageList"));
  if (v7)
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v7, CFSTR("assetCollection"));
  objc_msgSend(v8, "stringByAppendingPathComponent:", CFSTR("Images.plist"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  _NTKLoggingObjectForDomain(6, (uint64_t)"NTKLoggingDomainPhoto");
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v23 = 138412290;
    v24 = v12;
    _os_log_impl(&dword_1B72A3000, v13, OS_LOG_TYPE_DEFAULT, "writing image list to path %@", (uint8_t *)&v23, 0xCu);
  }

  v14 = objc_msgSend(v10, "writeToFile:atomically:", v12, 0);
  if ((v14 & 1) == 0)
  {
    _NTKLoggingObjectForDomain(6, (uint64_t)"NTKLoggingDomainPhoto");
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      NTKPhotosWriteImageListWithVersionForAssetCollection_cold_1((uint64_t)v12, v15, v16, v17, v18, v19, v20, v21);

  }
  return v14;
}

uint64_t NTKPhotosWriteImageListForAssetCollection(void *a1, void *a2, void *a3)
{
  return NTKPhotosWriteImageListWithVersionForAssetCollection(a1, 1, a2, a3);
}

uint64_t NTKPhotosWriteImageListWithVersion(void *a1, uint64_t a2, void *a3)
{
  return NTKPhotosWriteImageListWithVersionForAssetCollection(a1, a2, 0, a3);
}

void NTKPhotosDefaultCropForAsset(void *a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v4, "pixelWidth");
  objc_msgSend(v4, "pixelHeight");

  objc_msgSend(v3, "screenBounds");
}

void NTKPhotosDefaultCropForImage(void *a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  CGFloat v6;
  CGAffineTransform v7;

  v3 = a2;
  v4 = a1;
  objc_msgSend(v4, "scale");
  v6 = v5;
  objc_msgSend(v4, "size");

  CGAffineTransformMakeScale(&v7, v6, v6);
  objc_msgSend(v3, "screenBounds");

}

id NTKPhotosAspectFilledImageFromImage(void *a1, double a2, double a3)
{
  id v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  void *v13;
  id v14;
  void *v15;
  _QWORD v17[4];
  id v18;
  double v19;
  double v20;
  double v21;
  double v22;

  v5 = a1;
  objc_msgSend(v5, "size");
  v7 = a2 / v6;
  objc_msgSend(v5, "size");
  if (v7 < a3 / v8)
    v7 = a3 / v8;
  objc_msgSend(v5, "size");
  v10 = v9 * v7;
  objc_msgSend(v5, "size");
  v12 = v11 * v7;
  v13 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3828]), "initWithSize:", a2, a3);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = __NTKPhotosAspectFilledImageFromImage_block_invoke;
  v17[3] = &unk_1E6BCD640;
  v18 = v5;
  v19 = (a2 - v10) * 0.5;
  v20 = (a3 - v12) * 0.5;
  v21 = v10;
  v22 = v12;
  v14 = v5;
  objc_msgSend(v13, "imageWithActions:", v17);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

id NTKPHAssetsForLocalIdentifiers(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithFormat:", CFSTR("(mediaType = %ld) && ((playbackStyle = %ld) || (playbackStyle = %ld))"), 1, 1, 3);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setPredicate:", v3);

  objc_msgSend(MEMORY[0x1E0CB3928], "sortDescriptorWithKey:ascending:", CFSTR("creationDate"), 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v21[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setSortDescriptors:", v5);

  v20 = *MEMORY[0x1E0CD1A18];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v20, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addFetchPropertySets:", v6);

  objc_msgSend(MEMORY[0x1E0CD1390], "fetchAssetsWithLocalIdentifiers:options:", v1, v2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v7, "count"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v16;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v16 != v12)
          objc_enumerationMutation(v9);
        objc_msgSend(v8, "addObject:", *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * v13++));
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    }
    while (v11);
  }

  return v8;
}

BOOL NTKPhotosIsSyncedAlbumPhotosFace(void *a1)
{
  return _isPhotosFaceWithContentOption(a1, 0);
}

BOOL _isPhotosFaceWithContentOption(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  _BOOL8 v6;

  v3 = a1;
  if (objc_msgSend(v3, "faceStyle") == 22)
  {
    objc_msgSend(v3, "selectedOptionsForCustomEditModes");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKey:", &unk_1E6C9F988);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    objc_opt_class();
    v6 = (objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v5, "photosContent") == a2;

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

BOOL NTKPhotosIsCustomPhotosFace(void *a1)
{
  return _isPhotosFaceWithContentOption(a1, 1);
}

BOOL NTKPhotosIsMemoryPhotosFace(void *a1)
{
  return _isPhotosFaceWithContentOption(a1, 2);
}

uint64_t NTKPhotosDeviceHasPhotosFaceCapability(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(MEMORY[0x1E0C944B0], "nrDeviceForNRDeviceUUID:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("B2183583-3631-471B-AE16-57C389570AA3"));
  v3 = objc_msgSend(v1, "supportsCapability:", v2);

  return v3;
}

uint64_t NTKPhotosDeviceHasPhotosFaceMemoryCapability(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(MEMORY[0x1E0C944B0], "nrDeviceForNRDeviceUUID:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("B88B6795-0FF5-4FCB-82FA-07E09D904414"));
  v3 = objc_msgSend(v1, "supportsCapability:", v2);

  return v3;
}

BOOL NTKPhotosFaceHasPhotos(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _BOOL8 v4;

  v1 = a1;
  if (objc_msgSend(v1, "faceStyle") == 22)
  {
    objc_msgSend(v1, "resourceDirectory");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    +[NTKPhotosReader readerForResourceDirectory:](NTKPhotosReader, "readerForResourceDirectory:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    v4 = objc_msgSend(v3, "count") != 0;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t NTKCGImagePropertyOrientationToUIImageOrientation(int a1)
{
  if ((a1 - 2) > 6)
    return 0;
  else
    return qword_1B755ED78[a1 - 2];
}

uint64_t NTKUIImageOrientationToCGImagePropertyOrientation(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return 1;
  else
    return dword_1B755ED58[a1 - 1];
}

CGImageSource *NTKPhotosUIImageOrientation(CGImageSource *result)
{
  CGImageSource *v1;
  const __CFNumber *Value;
  int v3;
  int valuePtr;

  if (result)
  {
    result = CGImageSourceCopyPropertiesAtIndex(result, 0, 0);
    if (result)
    {
      v1 = result;
      Value = (const __CFNumber *)CFDictionaryGetValue(result, (const void *)*MEMORY[0x1E0CBCFF0]);
      valuePtr = 1;
      if (Value && CFNumberGetValue(Value, kCFNumberIntType, &valuePtr))
      {
        v3 = valuePtr;
        CFRelease(v1);
        if ((v3 - 2) <= 6)
          return (CGImageSource *)qword_1B755ED78[v3 - 2];
      }
      else
      {
        CFRelease(v1);
      }
      return 0;
    }
  }
  return result;
}

id NTKPhotosImageForPhoto(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "imageURL");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  NTKPhotosImageForURL(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id NTKPhotosImageForURL(void *a1)
{
  id v1;
  id v2;
  void *v3;
  const __CFData *v4;
  id v5;
  CGImageSourceRef v6;
  CGImageSource *v7;
  const __CFDictionary *v8;
  CGImageRef ImageAtIndex;
  CGImageRef v10;
  void *v11;
  id v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc(MEMORY[0x1E0C99D50]);
    objc_msgSend(v1, "path");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 0;
    v4 = (const __CFData *)objc_msgSend(v2, "initWithContentsOfFile:options:error:", v3, 8, &v13);
    v5 = v13;

    if (v4)
    {
      v6 = CGImageSourceCreateWithData(v4, 0);
      if (!v6)
      {
        v11 = 0;
LABEL_14:

        goto LABEL_15;
      }
      v7 = v6;
      v14 = *MEMORY[0x1E0CBD240];
      v15[0] = MEMORY[0x1E0C9AAA0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
      v8 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v7, 0, v8);
      if (ImageAtIndex)
      {
        v10 = ImageAtIndex;
        v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3870]), "initWithCGImage:scale:orientation:", ImageAtIndex, NTKPhotosUIImageOrientation(v7), 1.0);
        CFRelease(v10);
      }
      else
      {
        v11 = 0;
      }
      CFRelease(v7);
    }
    else
    {
      _NTKLoggingObjectForDomain(6, (uint64_t)"NTKLoggingDomainPhoto");
      v8 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
        NTKPhotosImageForURL_cold_1(v1, (uint64_t)v5, v8);
      v11 = 0;
    }

    goto LABEL_14;
  }
  v5 = 0;
  v11 = 0;
LABEL_15:

  return v11;
}

uint64_t NTKPhotosIsPHAssetIris(void *a1)
{
  id v1;
  void *v2;
  uint64_t IsPlayable;

  v1 = a1;
  if (objc_msgSend(v1, "isPhotoIris"))
  {
    objc_msgSend(v1, "photoIrisProperties");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "photoIrisVisibilityState");
    objc_msgSend(v1, "hasAdjustments");
    IsPlayable = PHVideoComplementVisibilityStateIsPlayable();

  }
  else
  {
    IsPlayable = 0;
  }

  return IsPlayable;
}

uint64_t NTKImagePresentationTransform@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  __int128 v5;
  double v6;
  double v7;
  double v8;
  double v9;

  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  switch(result)
  {
    case 0:
      *(_QWORD *)a4 = 0x3FF0000000000000;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0x3FF0000000000000;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 40) = 0;
      return result;
    case 1:
      v6 = (double)a2;
      v7 = (double)a3;
      *(_QWORD *)a4 = 0xBFF0000000000000;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0xBFF0000000000000;
      goto LABEL_13;
    case 2:
      v8 = (double)a2;
      *(_OWORD *)(a4 + 8) = xmmword_1B755ED30;
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      goto LABEL_10;
    case 3:
      v9 = (double)a3;
      *(_OWORD *)(a4 + 8) = xmmword_1B755ED40;
      goto LABEL_8;
    case 4:
      v9 = (double)a2;
      *(_QWORD *)a4 = 0xBFF0000000000000;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0x3FF0000000000000;
LABEL_8:
      *(double *)(a4 + 32) = v9;
      break;
    case 5:
      v8 = (double)a3;
      *(_QWORD *)a4 = 0x3FF0000000000000;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)(a4 + 24) = 0xBFF0000000000000;
LABEL_10:
      *(double *)(a4 + 40) = v8;
      break;
    case 6:
      __asm { FMOV            V0.2D, #1.0; jumptable 00000001B7447BEC case 6 }
      *(_OWORD *)(a4 + 8) = _Q0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 40) = 0;
      *(_QWORD *)(a4 + 24) = 0;
      break;
    case 7:
      v6 = (double)a3;
      v7 = (double)a2;
      __asm { FMOV            V2.2D, #-1.0 }
      *(_OWORD *)(a4 + 8) = _Q2;
LABEL_13:
      *(double *)(a4 + 32) = v6;
      *(double *)(a4 + 40) = v7;
      break;
    default:
      v4 = MEMORY[0x1E0C9BAA8];
      v5 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
      *(_OWORD *)a4 = *MEMORY[0x1E0C9BAA8];
      *(_OWORD *)(a4 + 16) = v5;
      *(_OWORD *)(a4 + 32) = *(_OWORD *)(v4 + 32);
      break;
  }
  return result;
}

double NTKImagePresentationSize(float64x2_t *a1, double a2, double a3)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&vabsq_f64(vmlaq_n_f64(vmulq_n_f64(a1[1], a3), *a1, a2));
  return result;
}

double NTKPhotosVideoDimensions(void *a1)
{
  void *v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;

  objc_msgSend(a1, "tracksWithMediaType:", *MEMORY[0x1E0C8A808]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "firstObject");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(v2, "naturalSize");
    v4 = v3;
    v6 = v5;
    objc_msgSend(v2, "preferredTransform");
    v7 = fabs(v6 * v10 + v9 * v4);
  }
  else
  {
    v7 = *MEMORY[0x1E0C9D820];
  }

  return v7;
}

void NTKPhotosConfirmMemoryWasViewed(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  char v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD block[4];
  NSObject *v8;
  uint8_t buf[4];
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  _NTKLoggingObjectForDomain(6, (uint64_t)"NTKLoggingDomainPhoto");
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v10 = v1;
    _os_log_impl(&dword_1B72A3000, v2, OS_LOG_TYPE_DEFAULT, "NTKPhotosConfirmMemoryWasViewed(%@)", buf, 0xCu);
  }

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "unlockedSinceBoot");

  if ((v4 & 1) != 0)
  {
    dispatch_get_global_queue(0, 0);
    v5 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __NTKPhotosConfirmMemoryWasViewed_block_invoke;
    block[3] = &unk_1E6BCD5F0;
    v8 = v1;
    dispatch_async(v5, block);

    v6 = v8;
  }
  else
  {
    _NTKLoggingObjectForDomain(6, (uint64_t)"NTKLoggingDomainPhoto");
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v10 = v1;
      _os_log_impl(&dword_1B72A3000, v6, OS_LOG_TYPE_DEFAULT, "Phone is before first unlock: ignoring confirmation that memory %@ was viewed", buf, 0xCu);
    }
  }

}

void sub_1B7448104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t NTKPhotosCanEncodeHEIC()
{
  if (NTKPhotosCanEncodeHEIC_onceToken != -1)
    dispatch_once(&NTKPhotosCanEncodeHEIC_onceToken, &__block_literal_global_291);
  return NTKPhotosCanEncodeHEIC_isSupported;
}

uint64_t _handleSettingsChanged(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_handlePrefsChanged");
}

void sub_1B7448640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id NTKLocationComponentStrings(void *a1)
{
  return NTKLocationComponentStringsShowSecondsAndLatLongTitle(a1, 1, 0);
}

id NTKLocationComponentStringsShowSeconds(void *a1)
{
  return NTKLocationComponentStringsShowSecondsAndLatLongTitle(a1, 1, 0);
}

id NTKLocationComponentStringsShowSecondsAndLatLongTitle(void *a1, int a2, int a3)
{
  id v5;
  void *v6;
  double v7;
  void *v8;
  double v9;
  void *v10;
  void *v11;
  __CFString *v12;
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "coordinate");
    CoordinateComponentString(1, a2, a3, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "coordinate");
    CoordinateComponentString(0, a2, a3, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = CFSTR("NTKLocationComponentLatitudeKey");
    v14[1] = CFSTR("NTKLocationComponentLongitudeKey");
    v15[0] = v8;
    v15[1] = v10;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, v14, 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    if (a2)
      v12 = CFSTR("LOCATION_UNKNOWN_POSITION");
    else
      v12 = CFSTR("LOCATION_UNKNOWN_POSITION_NO_SECONDS");
    NTKClockFaceLocalizedString(v12, CFSTR("unknown lat/lng"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v16[0] = CFSTR("NTKLocationComponentLatitudeKey");
    v16[1] = CFSTR("NTKLocationComponentLongitudeKey");
    v17[0] = v8;
    v17[1] = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, v16, 2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v11;
}

id CoordinateComponentString(int a1, int a2, int a3, double a4)
{
  char v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  __CFString *v13;
  __CFString *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  __CFString *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;

  v6 = a1;
  v7 = (uint64_t)a4;
  v8 = (a4 - (double)(uint64_t)a4) * 60.0;
  v9 = -v8;
  if (v8 >= 0.0)
    v9 = (a4 - (double)(uint64_t)a4) * 60.0;
  v10 = (uint64_t)v9;
  v11 = (v9 - (double)(uint64_t)v9) * 60.0;
  if (v7 >= 0)
    v12 = (uint64_t)a4;
  else
    v12 = -v7;
  if (a1)
  {
    if (a4 < 0.0)
    {
      v13 = CFSTR("LOCATION_POSITION_SOUTH");
      v14 = CFSTR("south coordinate label");
    }
    else
    {
      v13 = CFSTR("LOCATION_POSITION_NORTH");
      v14 = CFSTR("north coordinate label");
    }
  }
  else if (a4 < 0.0)
  {
    v13 = CFSTR("LOCATION_POSITION_WEST");
    v14 = CFSTR("west coordinate label");
  }
  else
  {
    v13 = CFSTR("LOCATION_POSITION_EAST");
    v14 = CFSTR("east coordinate label");
  }
  NTKClockFaceLocalizedString(v13, v14);
  v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());

  v16 = v15;
  v17 = (void *)MEMORY[0x1E0CB37F0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v12);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "localizedStringFromNumber:numberStyle:", v18, 0);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = (void *)MEMORY[0x1E0CB37F0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v10);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "localizedStringFromNumber:numberStyle:", v21, 0);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  v23 = (void *)MEMORY[0x1E0CB37F0];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v11);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "localizedStringFromNumber:numberStyle:", v24, 0);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  if ((v6 & 1) != 0)
    v26 = CFSTR("LATITUDE");
  else
    v26 = CFSTR("LONGITUDE");
  NTKClockFaceLocalizedString(v26, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (((a2 ^ 1) & 1) != 0 || (a3 & 1) != 0)
  {
    if (((a3 ^ 1) & 1) != 0 || (a2 & 1) != 0)
    {
      if (((a2 ^ 1 | a3 ^ 1) & 1) != 0)
      {
        NTKClockFaceLocalizedString(CFSTR("LOCATION_POSITION_FORMAT_NO_SECONDS"), CFSTR("latitude/longitude dm with direction format string"));
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = objc_alloc(MEMORY[0x1E0CB3940]);
        v34 = v16;
        v35 = 0;
        goto LABEL_24;
      }
      NTKClockFaceLocalizedString(CFSTR("LOCATION_POSITION_FORMAT_WITH_LATLONG_TITLE"), CFSTR("latitude/longitude dms with direction format string"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_alloc(MEMORY[0x1E0CB3940]);
      v38 = v16;
      v39 = 0;
      v36 = v25;
    }
    else
    {
      NTKClockFaceLocalizedString(CFSTR("LOCATION_POSITION_FORMAT_WITH_LATLONG_TITLE_NO_SECONDS"), CFSTR("latitude/longitude dm with direction format string"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_alloc(MEMORY[0x1E0CB3940]);
      v36 = v16;
      v38 = 0;
    }
    v31 = objc_msgSend(v30, "initWithFormat:", v28, v27, v19, v22, v36, v38, v39);
    goto LABEL_27;
  }
  NTKClockFaceLocalizedString(CFSTR("LOCATION_POSITION_FORMAT"), CFSTR("latitude/longitude dms with direction format string"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = objc_alloc(MEMORY[0x1E0CB3940]);
  v35 = v16;
  v37 = 0;
  v34 = v25;
LABEL_24:
  v31 = objc_msgSend(v29, "initWithFormat:", v28, v19, v22, v34, v35, v37, v39);
LABEL_27:
  v32 = (void *)v31;

  return v32;
}

__CFString *NTKLocationNameForPlacemark(void *a1, void *a2)
{
  void *v2;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  __CFString *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  v4 = a1;
  v5 = a2;
  v6 = v5;
  if (!v4)
  {
    NTKClockFaceLocalizedString(CFSTR("LOCATION_UNKNOWN_POSITION_NAME"), CFSTR("unknown lat/lng"));
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
    goto LABEL_30;
  }
  if (!v5)
  {
    v12 = &stru_1E6BDC918;
    goto LABEL_30;
  }
  v7 = objc_alloc_init(MEMORY[0x1E0C99E10]);
  objc_msgSend(v6, "locality");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v8, "length"))
    goto LABEL_6;
  objc_msgSend(v6, "administrativeArea");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v9, "length");

  if (v2)
  {
    objc_msgSend(v6, "locality");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v8);
LABEL_6:

  }
  objc_msgSend(v6, "locality");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "length");
  if (v11
    && (objc_msgSend(v6, "administrativeArea"),
        v2 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v2, "length")))
  {

  }
  else
  {
    objc_msgSend(v6, "inlandWater");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = objc_msgSend(v13, "length");

    if (v11)
    if (!v14)
      goto LABEL_17;
    objc_msgSend(v6, "inlandWater");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v10);
  }

LABEL_17:
  objc_msgSend(v6, "administrativeArea");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "length");

  if (v16)
  {
    objc_msgSend(v6, "administrativeArea");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v17);

  }
  objc_msgSend(v6, "country");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "length");

  if (v19)
  {
    objc_msgSend(v6, "country");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v20);

  }
  if (!objc_msgSend(v7, "count"))
  {
    objc_msgSend(v6, "ocean");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "length");

    if (v22)
    {
      objc_msgSend(v6, "ocean");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "addObject:", v23);

    }
  }
  if ((unint64_t)objc_msgSend(v7, "count") < 2)
  {
    if (objc_msgSend(v7, "count") == 1)
    {
      objc_msgSend(v7, "firstObject");
      v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v12 = &stru_1E6BDC918;
    }
  }
  else
  {
    NTKClockFaceLocalizedString(CFSTR("LOCATION_LOCALITY_MULTIPLE_FORMAT"), CFSTR("multiple locality items"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v7, "objectAtIndexedSubscript:", 0);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "objectAtIndexedSubscript:", 1);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "localizedStringWithFormat:", v24, v26, v27);
    v12 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
LABEL_30:

  return v12;
}

double _smallRectSwatchSize()
{
  if (_smallRectSwatchSize_onceToken != -1)
    dispatch_once(&_smallRectSwatchSize_onceToken, &__block_literal_global_11_1);
  return *(double *)&_smallRectSwatchSize_size_0;
}

double _largeRectSwatchSize()
{
  if (_largeRectSwatchSize_onceToken != -1)
    dispatch_once(&_largeRectSwatchSize_onceToken, &__block_literal_global_12_0);
  return *(double *)&_largeRectSwatchSize_size_0;
}

uint64_t ___smallCircleSwatchSize_block_invoke()
{
  uint64_t result;
  double v1;

  result = NTKCScreenStyle();
  v1 = 36.0;
  if (result == 1)
    v1 = 42.3333333;
  _smallCircleSwatchSize_size_0 = *(_QWORD *)&v1;
  _smallCircleSwatchSize_size_1 = *(_QWORD *)&v1;
  return result;
}

double ___largeCircleSwatchSize_block_invoke()
{
  double result;

  result = dbl_1B755EDD0[NTKCScreenStyle() == 1];
  _largeCircleSwatchSize_size_0 = *(_QWORD *)&result;
  _largeCircleSwatchSize_size_1 = *(_QWORD *)&result;
  return result;
}

uint64_t ___smallRectSwatchSize_block_invoke()
{
  uint64_t result;
  double v1;

  result = NTKCScreenStyle();
  v1 = 62.0;
  if (result == 1)
    v1 = 71.3333333;
  _smallRectSwatchSize_size_0 = *(_QWORD *)&v1;
  _smallRectSwatchSize_size_1 = *(_QWORD *)&v1;
  return result;
}

uint64_t ___largeRectSwatchSize_block_invoke()
{
  uint64_t result;
  double v1;

  result = NTKCScreenStyle();
  v1 = 116.0;
  if (result == 1)
    v1 = 113.333333;
  _largeRectSwatchSize_size_0 = *(_QWORD *)&dbl_1B755EDD0[result == 1];
  _largeRectSwatchSize_size_1 = *(_QWORD *)&v1;
  return result;
}

double ___shortLargeRectSwatchSize_block_invoke()
{
  double v0;
  double v1;
  double result;

  v0 = _largeRectSwatchSize();
  _smallRectSwatchSize();
  result = v1 * 0.6;
  _shortLargeRectSwatchSize_size_0 = *(_QWORD *)&v0;
  *(double *)&_shortLargeRectSwatchSize_size_1 = v1 * 0.6;
  return result;
}

void sub_1B744AED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B744B27C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

const __CFString *NTKStringForUpNextSection(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 5)
    return CFSTR("all day");
  else
    return off_1E6BD62F8[a1 + 1];
}

__CFString *NTKIdentifierForUpNextSection(uint64_t a1)
{
  id *v1;
  __CFString *result;

  switch(a1)
  {
    case 0:
      v1 = (id *)MEMORY[0x1E0D843A0];
      goto LABEL_8;
    case 1:
      return CFSTR("defaultSectionIdentifier_historic");
    case 2:
      v1 = (id *)MEMORY[0x1E0D843D8];
      goto LABEL_8;
    case 3:
      v1 = (id *)MEMORY[0x1E0D84408];
      goto LABEL_8;
    case 4:
      v1 = (id *)MEMORY[0x1E0D84400];
LABEL_8:
      result = (__CFString *)*v1;
      break;
    default:
      result = (__CFString *)0;
      break;
  }
  return result;
}

uint64_t NTKStringForIndexPath(void *a1)
{
  void *v1;
  id v2;
  unint64_t v3;
  const __CFString *v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v3 = objc_msgSend(v2, "upNextSection") + 1;
  if (v3 > 5)
    v4 = CFSTR("all day");
  else
    v4 = off_1E6BD62F8[v3];
  v5 = objc_msgSend(v2, "element");

  return objc_msgSend(v1, "stringWithFormat:", CFSTR("%@ - %lu"), v4, v5);
}

void *NTKOrderedUpNextSections()
{
  return &unk_1E6CAA030;
}

id NTKSectionPathFromIndexPath(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  NTKIdentifierForUpNextSection(objc_msgSend(v1, "section"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_alloc(MEMORY[0x1E0D84388]);
  v4 = objc_msgSend(v1, "item");

  v5 = (void *)objc_msgSend(v3, "initWithSectionName:element:", v2, v4);
  return v5;
}

uint64_t NTKSectionForSectionIdentifier(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("defaultSectionIdentifier_historic")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0D843A0]) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0D84408]) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0D84400]) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", *MEMORY[0x1E0D843D8]))
  {
    v2 = 2;
  }
  else
  {
    v2 = -1;
  }

  return v2;
}

void sub_1B744C664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1B744C8F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B744DF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1B744E6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7452594(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B745356C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7453A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id OUTLINED_FUNCTION_6_2(id a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_7_1()
{
  return objc_opt_class();
}

void OUTLINED_FUNCTION_10_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void _LayoutConstants_35(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t *v14;

  v5 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_50);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_50);
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v8 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_50);
    if (v8 == v5)
    {
      v9 = objc_msgSend(v5, "version");
      v10 = _LayoutConstants___previousCLKDeviceVersion_50;

      if (v9 == v10)
        goto LABEL_6;
    }
    else
    {

    }
  }
  v11 = objc_storeWeak(&_LayoutConstants___cachedDevice_50, v5);
  _LayoutConstants___previousCLKDeviceVersion_50 = objc_msgSend(v5, "version");

  ___LayoutConstants_block_invoke_48(v12, v5);
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_50);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (a2 == 12)
  {
    v14 = &_LayoutConstants___constantsGraphicExtraLarge_7;
  }
  else
  {
    if (a2 != 10)
    {
      _NTKLoggingObjectForDomain(18, (uint64_t)"NTKLoggingDomainComplication");
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        _LayoutConstants_cold_1(a2, v13);

    }
    v14 = &_LayoutConstants___constantsGraphicCircular_7;
  }
  __copy_assignment_8_8_t0w8_s8_s16(a3, (uint64_t)v14);

}

void sub_1B7454138(_Unwind_Exception *a1)
{
  uint64_t v1;

  __destructor_8_s8_s16(v1);
  _Unwind_Resume(a1);
}

void __destructor_8_s8_s16(uint64_t a1)
{

}

void sub_1B74543C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void __copy_assignment_8_8_t0w8_s8_s16(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  objc_storeStrong((id *)(a1 + 8), *(id *)(a2 + 8));
  objc_storeStrong((id *)(a1 + 16), *(id *)(a2 + 16));
}

void sub_1B7454DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1B7455004(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1B74564C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _LayoutConstants_36(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_51);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_51);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_51);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_LayoutConstants___cachedDevice_51, v1);
    _LayoutConstants___previousCLKDeviceVersion_51 = objc_msgSend(v1, "version");

    ___LayoutConstants_block_invoke_49(v8, v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _LayoutConstants___previousCLKDeviceVersion_51;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_51);
  v9 = *(double *)&_LayoutConstants___constants_0_9;

  return v9;
}

void sub_1B74581E8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void _LayoutConstants_37(void *a1@<X0>, void *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_52);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_52);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_52);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_52, obj);
    _LayoutConstants___previousCLKDeviceVersion_52 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_50(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_52;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_52);
  memcpy(a2, &_LayoutConstants__constants_1, 0x1F0uLL);

}

void sub_1B745B0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B745B2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id NTKWorldClockCityAbbreviation(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[4];
  id v20;

  v1 = a1;
  +[NTKCustomWorldCityAbbreviationsStore sharedInstance](NTKCustomWorldCityAbbreviationsStore, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "customAbbreviations");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "alCityId");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringValue");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
    objc_msgSend(v1, "alCityId");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringValue");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "localizedStringForKey:value:table:", v8, &stru_1E6BDC918, CFSTR("WorldClock"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (v6 && objc_msgSend(v6, "length") && !objc_msgSend(v8, "isEqualToString:", v6))
      goto LABEL_14;

    objc_msgSend(v1, "name");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "uppercaseStringWithLocale:", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3500], "uppercaseLetterCharacterSet");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "invertedSet");
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v8, "componentsSeparatedByCharactersInSet:", v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)objc_msgSend(v13, "count") >= 2)
    {
      v14 = (void *)objc_opt_new();
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = __NTKWorldClockCityAbbreviation_block_invoke;
      v19[3] = &unk_1E6BCD930;
      v15 = v14;
      v20 = v15;
      objc_msgSend(v13, "enumerateObjectsUsingBlock:", v19);
      if ((unint64_t)objc_msgSend(v15, "count") > 1)
      {
        objc_msgSend(v15, "componentsJoinedByString:", &stru_1E6BDC918);
        v6 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_13:
LABEL_14:

        goto LABEL_15;
      }

    }
    v16 = objc_msgSend(v8, "length");
    if (v16 >= 3)
      v17 = 3;
    else
      v17 = v16;
    objc_msgSend(v8, "substringToIndex:", v17);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_13;
  }
LABEL_15:

  return v6;
}

uint64_t _handleSignificantTimeChangeNotification(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_logNotificationReceiptWithName:", _DarwinNotificationReceiptName);
}

void sub_1B745F77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B745F90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7460638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B7461654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id NTKTrackedPhotosServerInterface()
{
  if (NTKTrackedPhotosServerInterface_onceToken != -1)
    dispatch_once(&NTKTrackedPhotosServerInterface_onceToken, &__block_literal_global_125);
  return (id)NTKTrackedPhotosServerInterface_interface;
}

double _LargeModularLayoutConstants(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LargeModularLayoutConstants___lock);
  WeakRetained = objc_loadWeakRetained(&_LargeModularLayoutConstants___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_LargeModularLayoutConstants___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_LargeModularLayoutConstants___cachedDevice, v1);
    _LargeModularLayoutConstants___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    ___LargeModularLayoutConstants_block_invoke(v8, (uint64_t)v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _LargeModularLayoutConstants___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LargeModularLayoutConstants___lock);
  v9 = *(double *)&_LargeModularLayoutConstants___constants_0;

  return v9;
}

void sub_1B74656B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id NTKFaceBundleStringFromFaceStyle(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  _NTKStringFromFaceStyleDict();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _NTKStringFromFaceStyleDict()
{
  if (_NTKStringFromFaceStyleDict_onceToken != -1)
    dispatch_once(&_NTKStringFromFaceStyleDict_onceToken, &__block_literal_global_127);
  return (id)_NTKStringFromFaceStyleDict_dictionary;
}

BOOL NTKFaceBundleGetFaceStyleFromString(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  if (_NTKFaceStyleFromStringDict_onceToken != -1)
    dispatch_once(&_NTKFaceStyleFromStringDict_onceToken, &__block_literal_global_810);
  objc_msgSend((id)_NTKFaceStyleFromStringDict_dictionary, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
    *a2 = objc_msgSend(v4, "integerValue");

  return v5 != 0;
}

id NTKFaceBundleStringFromCustomEditMode(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  _NTKStringFromEditModeDict();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _NTKStringFromEditModeDict()
{
  if (_NTKStringFromEditModeDict_onceToken != -1)
    dispatch_once(&_NTKStringFromEditModeDict_onceToken, &__block_literal_global_813);
  return (id)_NTKStringFromEditModeDict_dictionary;
}

BOOL NTKFaceBundleGetCustomEditModeFromString(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  if (_NTKEditModeFromStringDict_onceToken != -1)
    dispatch_once(&_NTKEditModeFromStringDict_onceToken, &__block_literal_global_830);
  objc_msgSend((id)_NTKEditModeFromStringDict_dictionary, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
    *a2 = objc_msgSend(v4, "integerValue");

  return v5 != 0;
}

id NTKFaceBundleStringFromComplicationType(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  _NTKStringFromComplicationTypeDict();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _NTKStringFromComplicationTypeDict()
{
  if (_NTKStringFromComplicationTypeDict_onceToken != -1)
    dispatch_once(&_NTKStringFromComplicationTypeDict_onceToken, &__block_literal_global_831);
  return (id)_NTKStringFromComplicationTypeDict_dictionary;
}

BOOL NTKFaceBundleGetComplicationTypeFromString(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  if (_NTKComplicationTypeFromStringDict_onceToken != -1)
    dispatch_once(&_NTKComplicationTypeFromStringDict_onceToken, &__block_literal_global_979);
  objc_msgSend((id)_NTKComplicationTypeFromStringDict_dictionary, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
    *a2 = objc_msgSend(v4, "unsignedIntegerValue");

  return v5 != 0;
}

id NTKFaceBundleStringFromDateStyle(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  _NTKStringFromDateStyleDict();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _NTKStringFromDateStyleDict()
{
  if (_NTKStringFromDateStyleDict_onceToken != -1)
    dispatch_once(&_NTKStringFromDateStyleDict_onceToken, &__block_literal_global_980);
  return (id)_NTKStringFromDateStyleDict_dictionary;
}

BOOL NTKFaceBundleGetDateStyleFromString(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  if (_NTKDateStyleFromStringDict_onceToken != -1)
    dispatch_once(&_NTKDateStyleFromStringDict_onceToken, &__block_literal_global_985);
  objc_msgSend((id)_NTKDateStyleFromStringDict_dictionary, "objectForKeyedSubscript:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
    *a2 = objc_msgSend(v4, "unsignedIntegerValue");

  return v5 != 0;
}

id NTKFaceBundleStringFromComplicationSlot(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  _NTKStringFromComplicationSlotDict();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id _NTKStringFromComplicationSlotDict()
{
  if (_NTKStringFromComplicationSlotDict_onceToken != -1)
    dispatch_once(&_NTKStringFromComplicationSlotDict_onceToken, &__block_literal_global_986);
  return (id)_NTKStringFromComplicationSlotDict_dictionary;
}

BOOL NTKFaceBundleGetComplicationSlotFromString(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  _NTKComplicationSlotFromStringDict();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
    *a2 = objc_retainAutorelease(v5);

  return v5 != 0;
}

id _NTKComplicationSlotFromStringDict()
{
  if (_NTKComplicationSlotFromStringDict_onceToken != -1)
    dispatch_once(&_NTKComplicationSlotFromStringDict_onceToken, &__block_literal_global_1015);
  return (id)_NTKComplicationSlotFromStringDict_dictionary;
}

id NTKFaceBundleComplicationSlotFromString(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  _NTKComplicationSlotFromStringDict();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKeyedSubscript:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id _DictionaryByReversingDictionary(void *a1)
{
  id v1;
  void *v2;
  id v3;
  _QWORD v5[4];
  id v6;

  v1 = a1;
  v2 = (void *)objc_opt_new();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___DictionaryByReversingDictionary_block_invoke;
  v5[3] = &unk_1E6BCE190;
  v3 = v2;
  v6 = v3;
  objc_msgSend(v1, "enumerateKeysAndObjectsUsingBlock:", v5);

  return v3;
}

uint64_t NTKDeviceSupportsFaceColorMappingAndDistinctFaceColorValues(void *a1)
{
  id v1;
  int AppBooleanValue;
  uint64_t v3;
  int v4;
  NSObject *v5;
  Boolean keyExistsAndHasValidFormat;
  uint8_t buf[4];
  _BOOL4 v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("FaceColorMappingEnabled"), CFSTR("com.apple.NanoTimeKit.face"), &keyExistsAndHasValidFormat);
  v3 = AppBooleanValue != 0;
  if (keyExistsAndHasValidFormat)
  {
    v4 = AppBooleanValue;
    CLKLoggingObjectForDomain();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v9 = v4 != 0;
      _os_log_impl(&dword_1B72A3000, v5, OS_LOG_TYPE_DEFAULT, "OVERRIDE NTKDeviceSupportsFaceColorMappingAndDistinctFaceColorValues: %i", buf, 8u);
    }
  }
  else
  {
    v5 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("21EB4560-EFA0-46AA-B75C-401D30C5BBF1"));
    v3 = objc_msgSend(v1, "supportsCapability:", v5);
  }

  return v3;
}

uint64_t NTKDefaultFaceColorForDeviceCollection(void *a1, uint64_t a2)
{
  id v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = NTKDeviceSupportsFaceColorMappingAndDistinctFaceColorValues(v3);
  v5 = 102;
  switch(objc_msgSend(v3, "collectionType"))
  {
    case 3:
      objc_msgSend(v3, "materialType");
      v6 = v4 == 0;
      v7 = 100;
      goto LABEL_14;
    case 4:
      v8 = objc_msgSend(v3, "materialType");
      v9 = 1001;
      if (v8 != 8)
        v9 = 1002;
      if (v8 == 10)
        v9 = 1000;
      if (v4)
        v5 = v9;
      else
        v5 = 101;
      break;
    case 5:
      break;
    case 6:
      v5 = 103;
      break;
    case 8:
      v6 = v4 == 0;
      v7 = 53;
LABEL_14:
      if (v6)
        v5 = v7;
      else
        v5 = 1000;
      break;
    default:
      if (objc_msgSend(v3, "materialType") == 14)
      {
        v5 = 6;
      }
      else if (objc_msgSend(v3, "materialType") == 15)
      {
        v5 = 75;
      }
      else
      {
        v5 = a2;
      }
      break;
  }

  return v5;
}

id _LocalizedColorFallingBackToColor(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  v1 = a1;
  objc_msgSend(v1, "stringByAppendingString:", CFSTR("_COMPANION"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  NTKCompanionClockFaceLocalizedString(v2, CFSTR("color"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    NTKClockFaceLocalizedString(v1, CFSTR("color"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v3)
    {
      NTKClockFaceLocalizedString(CFSTR("EDIT_MODE_LABEL_COLOR"), CFSTR("color"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  v4 = v3;

  return v4;
}

id NTKSensitiveLocalizedKeyForKey(void *a1)
{
  return a1;
}

id _EnumValueRange(unint64_t a1, unint64_t a2)
{
  unint64_t v3;
  void *i;
  void *v5;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", a2 - a1);
  for (i = (void *)objc_claimAutoreleasedReturnValue(); v3 <= a2; ++v3)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(i, "addObject:", v5);

  }
  return i;
}

void sub_1B74686F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B74693E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id NTKNewToFortuneColors()
{
  if (NTKNewToFortuneColors_onceToken != -1)
    dispatch_once(&NTKNewToFortuneColors_onceToken, &__block_literal_global_546);
  return (id)NTKNewToFortuneColors_fortuneColors;
}

id NTKNewToElectricColors()
{
  if (NTKNewToElectricColors_onceToken != -1)
    dispatch_once(&NTKNewToElectricColors_onceToken, &__block_literal_global_532);
  return (id)NTKNewToElectricColors_electricColors;
}

id NTKNewToEmperorColors()
{
  if (NTKNewToEmperorColors_onceToken != -1)
    dispatch_once(&NTKNewToEmperorColors_onceToken, &__block_literal_global_548);
  return (id)NTKNewToEmperorColors_emperorColors;
}

id NTKNewToGloryColors()
{
  if (NTKNewToGloryColors_onceToken != -1)
    dispatch_once(&NTKNewToGloryColors_onceToken, &__block_literal_global_534);
  return (id)NTKNewToGloryColors_gloryColors;
}

id NTKNewToGloryEColors()
{
  if (NTKNewToGloryEColors_onceToken != -1)
    dispatch_once(&NTKNewToGloryEColors_onceToken, &__block_literal_global_535);
  return (id)NTKNewToGloryEColors_gloryEColors;
}

id NTKNewToGraceColors()
{
  if (NTKNewToGraceColors_onceToken != -1)
    dispatch_once(&NTKNewToGraceColors_onceToken, &__block_literal_global_536);
  return (id)NTKNewToGraceColors_graceColors;
}

id NTKNewToGraceEColors()
{
  if (NTKNewToGraceEColors_onceToken != -1)
    dispatch_once(&NTKNewToGraceEColors_onceToken, &__block_literal_global_538);
  return (id)NTKNewToGraceEColors_graceColors;
}

id NTKNewToHunterColors()
{
  if (NTKNewToHunterColors_onceToken != -1)
    dispatch_once(&NTKNewToHunterColors_onceToken, &__block_literal_global_540);
  return (id)NTKNewToHunterColors_hunterColors;
}

id NTKNewToHunterEColors()
{
  if (NTKNewToHunterEColors_onceToken != -1)
    dispatch_once(&NTKNewToHunterEColors_onceToken, &__block_literal_global_542);
  return (id)NTKNewToHunterEColors_hunterEColors;
}

id NTKDistinctSportPlusAndEditionColors()
{
  if (NTKDistinctSportPlusAndEditionColors_onceToken != -1)
    dispatch_once(&NTKDistinctSportPlusAndEditionColors_onceToken, &__block_literal_global_544);
  return (id)NTKDistinctSportPlusAndEditionColors_distinctCollectionColors;
}

void NTKFaceColorNameAndCollection(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  __CFString **v10;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  id v14;
  id v15;

  v6 = CFSTR("seasons");
  v7 = CFSTR("seasons.fall2016");
  v8 = v7;
  v9 = 0;
  if (a1 > 999)
  {
    if (a1 == 1000)
    {
LABEL_9:
      v10 = ntk_seasons_spring2015_gold;
    }
    else if (a1 == 1001)
    {
LABEL_8:
      v10 = ntk_seasons_spring2015_goldRose;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      if (a1 != 1002)
        goto LABEL_102;
      v10 = ntk_seasons_spring2015_goldYellow;
    }
LABEL_99:
    v9 = *v10;
    if (v9)
    {
      v14 = 0;
      v15 = 0;
      +[NTKPigmentEditOption parseFullname:collectionName:optionName:fraction:](NTKPigmentEditOption, "parseFullname:collectionName:optionName:fraction:", v9, &v15, &v14, 0);
      v11 = (__CFString *)v15;
      v12 = (__CFString *)v14;
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  else
  {
    v10 = ntk_seasons_spring2015_pink;
    v11 = 0;
    v12 = 0;
    switch(a1)
    {
      case 0:
        goto LABEL_99;
      case 1:
        v10 = ntk_seasons_spring2015_purple;
        goto LABEL_99;
      case 2:
        v10 = ntk_seasons_spring2015_blue;
        goto LABEL_99;
      case 3:
        v10 = ntk_seasons_spring2015_green;
        goto LABEL_99;
      case 4:
        v10 = ntk_seasons_spring2016_yellow;
        goto LABEL_99;
      case 5:
        v10 = ntk_seasons_spring2015_lightOrange;
        goto LABEL_99;
      case 6:
        v10 = ntk_seasons_fall2015_red;
        goto LABEL_99;
      case 7:
        v10 = ntk_seasons_spring2015_white;
        goto LABEL_99;
      case 8:
        v10 = ntk_seasons_fall2015_orange;
        goto LABEL_99;
      case 9:
        v10 = ntk_seasons_fall2015_turquoise;
        goto LABEL_99;
      case 10:
        v10 = ntk_seasons_fall2015_midnightBlue;
        goto LABEL_99;
      case 11:
        v10 = ntk_seasons_fall2015_lavender;
        goto LABEL_99;
      case 12:
        v10 = ntk_seasons_fall2015_vintageRose;
        goto LABEL_99;
      case 13:
        v10 = ntk_seasons_fall2015_walnut;
        goto LABEL_99;
      case 14:
        v10 = ntk_seasons_fall2015_stone;
        goto LABEL_99;
      case 15:
        v10 = ntk_seasons_fall2015_antiqueWhite;
        goto LABEL_99;
      case 16:
        v10 = ntk_seasons_fall2015_lightBlue;
        goto LABEL_99;
      case 17:
        v10 = ntk_seasons_spring2016_mint;
        goto LABEL_99;
      case 18:
        v10 = ntk_seasons_spring2019_lilac;
        goto LABEL_99;
      case 19:
        v10 = ntk_seasons_spring2016_royalBlue;
        goto LABEL_99;
      case 20:
        v10 = ntk_seasons_spring2016_lightPink;
        goto LABEL_99;
      case 21:
        v10 = ntk_seasons_spring2016_apricot;
        goto LABEL_99;
      case 22:
        v10 = ntk_seasons_fall2016_oceanBlue;
        goto LABEL_99;
      case 23:
        v11 = v7;
        v9 = 0;
        v12 = CFSTR("cocoa");
        break;
      case 24:
        v11 = v6;
        v9 = 0;
        v12 = CFSTR("iceWhite");
        break;
      case 25:
        v10 = ntk_seasons_fall2017_pinkSand;
        goto LABEL_99;
      case 26:
        v13 = v6;
        goto LABEL_109;
      case 27:
        v10 = ntk_seasons_spring2017_pebble;
        goto LABEL_99;
      case 28:
        v10 = ntk_seasons_spring2017_azure;
        goto LABEL_99;
      case 29:
        v10 = ntk_seasons_spring2017_camellia;
        goto LABEL_99;
      case 30:
        v10 = ntk_seasons_summer2017_mistBlue;
        goto LABEL_99;
      case 31:
        v10 = ntk_seasons_summer2017_flamingo;
        goto LABEL_99;
      case 32:
        v10 = ntk_seasons_summer2017_pollen;
        goto LABEL_99;
      case 33:
        v10 = ntk_seasons_fall2017_softWhite;
        goto LABEL_99;
      case 34:
        v10 = ntk_seasons_fall2017_blueCobalt;
        goto LABEL_99;
      case 35:
        v10 = ntk_seasons_fall2017_darkOlive;
        goto LABEL_99;
      case 36:
        v10 = ntk_seasons_fall2017_violet;
        goto LABEL_99;
      case 37:
        v10 = ntk_seasons_fall2017_roseRed;
        goto LABEL_99;
      case 38:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 104:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
        break;
      case 39:
        v10 = ntk_seasons_fall2017_flash;
        goto LABEL_99;
      case 40:
        v10 = ntk_seasons_winter2017_darkTeal;
        goto LABEL_99;
      case 41:
        v10 = ntk_seasons_fall2017_electricPink;
        goto LABEL_99;
      case 42:
        v10 = ntk_seasons_spring2018_peach;
        goto LABEL_99;
      case 43:
        v10 = ntk_seasons_spring2018_denimBlue;
        goto LABEL_99;
      case 44:
        v10 = ntk_seasons_spring2018_flashLight;
        goto LABEL_99;
      case 45:
        v10 = ntk_seasons_fall2019_clementine;
        goto LABEL_99;
      case 46:
        v10 = ntk_seasons_winter2018_mellowYellow;
        goto LABEL_99;
      case 47:
        v10 = ntk_seasons_fall2018_stormGray;
        goto LABEL_99;
      case 48:
        v10 = ntk_seasons_winter2018_pacificGreen;
        goto LABEL_99;
      case 49:
        v10 = ntk_seasons_fall2018_blueHorizon;
        goto LABEL_99;
      case 50:
        v10 = ntk_seasons_fall2018_indigo;
        goto LABEL_99;
      case 51:
        v10 = ntk_seasons_fall2018_lavenderGray;
        goto LABEL_99;
      case 52:
        v10 = ntk_seasons_winter2018_hibiscus;
        goto LABEL_99;
      case 53:
      case 101:
        goto LABEL_8;
      case 54:
        v10 = ntk_seasons_spring2019_papaya;
        goto LABEL_99;
      case 55:
        v10 = ntk_seasons_summer2019_canaryYellow;
        goto LABEL_99;
      case 56:
        v10 = ntk_seasons_spring2019_spearmint;
        goto LABEL_99;
      case 57:
        v10 = ntk_seasons_spring2019_cerulean;
        goto LABEL_99;
      case 58:
        v10 = ntk_seasons_spring2019_delftBlue;
        goto LABEL_99;
      case 59:
        v10 = ntk_seasons_summer2019_dragonFruit;
        goto LABEL_99;
      case 60:
        v10 = ntk_seasons_fall2019_pineGreen;
        goto LABEL_99;
      case 61:
        v10 = ntk_seasons_fall2019_lemonCream;
        goto LABEL_99;
      case 62:
        v10 = ntk_seasons_fall2019_alaskanBlue;
        goto LABEL_99;
      case 63:
        v10 = ntk_seasons_winter2019_pomegranate;
        goto LABEL_99;
      case 64:
        v10 = ntk_seasons_winter2019_khaki;
        goto LABEL_99;
      case 65:
        v10 = ntk_seasons_winter2019_beryl;
        goto LABEL_99;
      case 66:
        v10 = ntk_seasons_fall2019_camel;
        goto LABEL_99;
      case 67:
        v10 = ntk_seasons_summer2020_seaFoam;
        goto LABEL_99;
      case 68:
        v10 = ntk_seasons_spring2020_surfBlue;
        goto LABEL_99;
      case 69:
        v10 = ntk_seasons_spring2020_cactus;
        goto LABEL_99;
      case 70:
        v10 = ntk_seasons_summer2020_linenBlue;
        goto LABEL_99;
      case 71:
        v10 = ntk_seasons_spring2020_grapefruit;
        goto LABEL_99;
      case 72:
        v10 = ntk_seasons_spring2020_neonPink;
        goto LABEL_99;
      case 73:
        v10 = ntk_seasons_summer2020_coastalGray;
        goto LABEL_99;
      case 74:
        v10 = ntk_seasons_fall2020_pinkCitrus;
        goto LABEL_99;
      case 75:
        v10 = ntk_seasons_fall2020_deepNavy;
        goto LABEL_99;
      case 76:
        v10 = ntk_seasons_fall2020_cyprusGreen;
        goto LABEL_99;
      case 77:
        v10 = ntk_seasons_fall2020_cream;
        goto LABEL_99;
      case 78:
        v10 = ntk_seasons_fall2020_kumquat;
        goto LABEL_99;
      case 79:
        v10 = ntk_seasons_fall2020_northernBlue;
        goto LABEL_99;
      case 80:
        v10 = ntk_seasons_fall2020_plum;
        goto LABEL_99;
      case 81:
        v10 = ntk_seasons_summer2021_electricOrange;
        goto LABEL_99;
      case 82:
        v10 = ntk_seasons_spring2021_sunflower;
        goto LABEL_99;
      case 83:
        v10 = ntk_seasons_spring2021_pistachio;
        goto LABEL_99;
      case 84:
        v10 = ntk_seasons_summer2021_cloudBlue;
        goto LABEL_99;
      case 85:
        v10 = ntk_seasons_spring2021_abyss;
        goto LABEL_99;
      case 86:
        v10 = ntk_seasons_spring2021_seaSalt;
        goto LABEL_99;
      case 87:
        v10 = ntk_seasons_summer2021_olive;
        goto LABEL_99;
      case 88:
        v10 = ntk_seasons_spring2021_mallardGreen;
        goto LABEL_99;
      case 100:
        goto LABEL_9;
      case 102:
        v10 = ntk_zeus_orange;
        goto LABEL_99;
      case 103:
        v10 = ntk_victory_volt;
        goto LABEL_99;
      case 105:
        v10 = ntk_seasons_black;
        goto LABEL_99;
      case 200:
        v10 = ntk_special_multicolor;
        goto LABEL_99;
      case 201:
        +[NTKUpNextFace pigmentFaceDomain](NTKUpNextFace, "pigmentFaceDomain");
        v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v9 = 0;
        v12 = CFSTR("siri");
        break;
      case 202:
        +[NTKUpNextFace pigmentFaceDomain](NTKUpNextFace, "pigmentFaceDomain");
        v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_109:
        v11 = v13;
        v9 = 0;
        v12 = CFSTR("gray");
        break;
      default:
        v11 = 0;
        v12 = 0;
        break;
    }
  }
LABEL_102:
  if (a2)
    *a2 = objc_retainAutorelease(v12);
  if (a3)
    *a3 = objc_retainAutorelease(v11);

}

id NTKFaceColorName(uint64_t a1)
{
  id v2;

  v2 = 0;
  NTKFaceColorNameAndCollection(a1, &v2, 0);
  return v2;
}

id NTKFaceColorCollectionName(uint64_t a1)
{
  id v2;

  v2 = 0;
  NTKFaceColorNameAndCollection(a1, 0, &v2);
  return v2;
}

id NTKFaceColorNameForDuotones(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v9;
  id v10;
  id v11;
  id v12;

  v11 = 0;
  v12 = 0;
  NTKFaceColorNameAndCollection(a1, &v12, &v11);
  v3 = v12;
  v4 = v11;
  v9 = 0;
  v10 = 0;
  NTKFaceColorNameAndCollection(a2, &v10, &v9);
  v5 = v10;
  v6 = v9;
  ntk_duotone((uint64_t)v4, (uint64_t)v3, v6, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

__CFString *NUNIAstronomyVistaNameForValue(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E6BD7EF0[a1];
}

uint64_t NUNIAstronomyVistaValueForName(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("earth")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("luna")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("orrery")))
  {
    v2 = 2;
  }
  else
  {
    v2 = -1;
  }

  return v2;
}

__CFString *NUNIAstronomyVistaNameLocalizationKeyForValue(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E6BD7ED8[a1];
}

id _NTKNewToGraceEVictoryColors(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_NTKNewToGraceEVictoryColors___lock);
  WeakRetained = objc_loadWeakRetained(&_NTKNewToGraceEVictoryColors___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_NTKNewToGraceEVictoryColors___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_NTKNewToGraceEVictoryColors___cachedDevice, v1);
    _NTKNewToGraceEVictoryColors___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    ___NTKNewToGraceEVictoryColors_block_invoke();
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _NTKNewToGraceEVictoryColors___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_NTKNewToGraceEVictoryColors___lock);
  v8 = (id)_NTKNewToGraceEVictoryColors_victoryGraceEColors;

  return v8;
}

id _NTKNewToHunterVictoryColors(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_NTKNewToHunterVictoryColors___lock);
  WeakRetained = objc_loadWeakRetained(&_NTKNewToHunterVictoryColors___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_NTKNewToHunterVictoryColors___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_NTKNewToHunterVictoryColors___cachedDevice, v1);
    _NTKNewToHunterVictoryColors___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    ___NTKNewToHunterVictoryColors_block_invoke();
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _NTKNewToHunterVictoryColors___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_NTKNewToHunterVictoryColors___lock);
  v8 = (id)_NTKNewToHunterVictoryColors_victoryHunterColors;

  return v8;
}

id _NTKNewToHunterEVictoryColors(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_NTKNewToHunterEVictoryColors___lock);
  WeakRetained = objc_loadWeakRetained(&_NTKNewToHunterEVictoryColors___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_NTKNewToHunterEVictoryColors___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_NTKNewToHunterEVictoryColors___cachedDevice, v1);
    _NTKNewToHunterEVictoryColors___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    ___NTKNewToHunterEVictoryColors_block_invoke();
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _NTKNewToHunterEVictoryColors___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_NTKNewToHunterEVictoryColors___lock);
  v8 = (id)_NTKNewToHunterEVictoryColors_victoryHunterEColors;

  return v8;
}

id PerformSelectorWithArgument(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    objc_msgSend(a1, "performSelector:withObject:", a2, a3);
  else
    objc_msgSend(a1, "performSelector:", a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

id PerformSelectorWithName(void *a1, NSString *a2)
{
  id v3;
  void *v4;

  v3 = a1;
  objc_msgSend(v3, "performSelector:", NSSelectorFromString(a2));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t NTKInterpolatedColorPalette_noArgumentMethodImplementation(void *a1, const char *a2)
{
  return objc_msgSend(a1, "interpolatedColorFromSelector:parameter:", a2, 0);
}

uint64_t NTKInterpolatedColorPalette_singleArgumentMethodImplementation(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "interpolatedColorFromSelector:parameter:", a2, a3);
}

uint64_t NTKProtoPigmentCollectionConfigReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  NTKProtoMigration *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  void *v51;
  BOOL v52;
  uint64_t v53;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_69;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 48;
        goto LABEL_69;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_69;
      case 4u:
        PBReaderReadString();
        v20 = (NTKProtoMigration *)objc_claimAutoreleasedReturnValue();
        if (v20)
          objc_msgSend(a1, "addDefaultGalleryColorNames:", v20);
        goto LABEL_67;
      case 5u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        a1[80] |= 4u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_73:
        v52 = v23 != 0;
        v53 = 74;
        goto LABEL_90;
      case 6u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        a1[80] |= 2u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if (v32 < 0)
            {
              v27 += 7;
              v14 = v28++ >= 9;
              if (v14)
              {
                v29 = 0;
                goto LABEL_77;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v29 = 0;
LABEL_77:
        v52 = v29 != 0;
        v53 = 73;
        goto LABEL_90;
      case 7u:
        v33 = 0;
        v34 = 0;
        v35 = 0;
        a1[80] |= 8u;
        while (2)
        {
          v36 = *v3;
          v37 = *(_QWORD *)(a2 + v36);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v37);
            *(_QWORD *)(a2 + v36) = v37 + 1;
            v35 |= (unint64_t)(v38 & 0x7F) << v33;
            if (v38 < 0)
            {
              v33 += 7;
              v14 = v34++ >= 9;
              if (v14)
              {
                v35 = 0;
                goto LABEL_81;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v35 = 0;
LABEL_81:
        v52 = v35 != 0;
        v53 = 75;
        goto LABEL_90;
      case 8u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        a1[80] |= 0x10u;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v43 + 1;
            v41 |= (unint64_t)(v44 & 0x7F) << v39;
            if (v44 < 0)
            {
              v39 += 7;
              v14 = v40++ >= 9;
              if (v14)
              {
                v41 = 0;
                goto LABEL_85;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v41 = 0;
LABEL_85:
        v52 = v41 != 0;
        v53 = 76;
        goto LABEL_90;
      case 9u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 56;
        goto LABEL_69;
      case 0xAu:
        v45 = 0;
        v46 = 0;
        v47 = 0;
        a1[80] |= 1u;
        while (2)
        {
          v48 = *v3;
          v49 = *(_QWORD *)(a2 + v48);
          if (v49 == -1 || v49 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v49);
            *(_QWORD *)(a2 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v14 = v46++ >= 9;
              if (v14)
              {
                v47 = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v47 = 0;
LABEL_89:
        v52 = v47 != 0;
        v53 = 72;
LABEL_90:
        a1[v53] = v52;
        goto LABEL_91;
      case 0xBu:
        PBReaderReadString();
        v20 = (NTKProtoMigration *)objc_claimAutoreleasedReturnValue();
        if (v20)
          objc_msgSend(a1, "addExclusions:", v20);
        goto LABEL_67;
      case 0xCu:
        v20 = objc_alloc_init(NTKProtoMigration);
        objc_msgSend(a1, "addMigration:", v20);
        if (PBReaderPlaceMark() && NTKProtoMigrationReadFrom((uint64_t)v20, a2))
        {
          PBReaderRecallMark();
LABEL_67:

LABEL_91:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 0xDu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
LABEL_69:
        v51 = *(void **)&a1[v18];
        *(_QWORD *)&a1[v18] = v17;

        goto LABEL_91;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_91;
    }
  }
}

void sub_1B747B910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B747E4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B747ECD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1B747EF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B747F0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B747F718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_1B747FBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id duotone(uint64_t a1, uint64_t a2)
{
  return +[NTKPigmentEditOption duotoneNameWithName:otherName:](NTKPigmentEditOption, "duotoneNameWithName:otherName:", a1, a2);
}

id _MakeFont(uint64_t a1)
{
  void *v1;
  void *v2;

  if (a1)
    objc_msgSend(MEMORY[0x1E0C944D0], "systemFontOfSize:weight:design:");
  else
    objc_msgSend(MEMORY[0x1E0C944D0], "systemFontOfSize:weight:");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "CLKFontWithAlternativePunctuation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id _ViewClassForComplicationType(uint64_t a1)
{
  if (a1 != 14 && a1)
    return 0;
  objc_opt_class();
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1B7484BA8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1B7485E9C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1B74874C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  id *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

id NTKColorMonogramComplicationFontForCharacterCount(uint64_t a1, void *a2, int a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  double v15;
  double v16;
  void *v17;

  v5 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&NTKColorMonogramComplicationFontForCharacterCount___lock);
  WeakRetained = objc_loadWeakRetained(&NTKColorMonogramComplicationFontForCharacterCount___cachedDevice);
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v8 = objc_loadWeakRetained(&NTKColorMonogramComplicationFontForCharacterCount___cachedDevice);
    if (v8 == v5)
    {
      v9 = objc_msgSend(v5, "version");
      v10 = NTKColorMonogramComplicationFontForCharacterCount___previousCLKDeviceVersion;

      if (v9 == v10)
        goto LABEL_6;
    }
    else
    {

    }
  }
  v11 = objc_storeWeak(&NTKColorMonogramComplicationFontForCharacterCount___cachedDevice, v5);
  NTKColorMonogramComplicationFontForCharacterCount___previousCLKDeviceVersion = objc_msgSend(v5, "version");

  __NTKColorMonogramComplicationFontForCharacterCount_block_invoke(v12, (uint64_t)v5);
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&NTKColorMonogramComplicationFontForCharacterCount___lock);
  v13 = &NTKColorMonogramComplicationFontForCharacterCount__large;
  v14 = &NTKColorMonogramComplicationFontForCharacterCount__medium;
  if (a1 != 2)
    v14 = &NTKColorMonogramComplicationFontForCharacterCount__small;
  if (a1 != 1)
    v13 = v14;
  v15 = *(double *)v13;
  v16 = *MEMORY[0x1E0DC1448];
  if (a3)
    objc_msgSend(MEMORY[0x1E0C944D0], "systemFontOfSize:weight:design:", *MEMORY[0x1E0C940A8], v15, v16);
  else
    objc_msgSend(MEMORY[0x1E0C944D0], "systemFontOfSize:weight:", v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

id NTKActivityBackgroundPlatterColor()
{
  if (NTKActivityBackgroundPlatterColor_onceToken != -1)
    dispatch_once(&NTKActivityBackgroundPlatterColor_onceToken, &__block_literal_global_376);
  return (id)NTKActivityBackgroundPlatterColor_color;
}

void _LayoutConstantsMedium(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstantsMedium___lock);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstantsMedium___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstantsMedium___cachedDevice);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstantsMedium___cachedDevice, obj);
    _LayoutConstantsMedium___previousCLKDeviceVersion = objc_msgSend(obj, "version");

    ___LayoutConstantsMedium_block_invoke(v9, obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstantsMedium___previousCLKDeviceVersion;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstantsMedium___lock);
  v10 = unk_1EF175858;
  *(_OWORD *)(a2 + 96) = xmmword_1EF175848;
  *(_OWORD *)(a2 + 112) = v10;
  *(_OWORD *)(a2 + 128) = xmmword_1EF175868;
  *(_QWORD *)(a2 + 144) = qword_1EF175878;
  v11 = *(_OWORD *)&qword_1EF175818;
  *(_OWORD *)(a2 + 32) = xmmword_1EF175808;
  *(_OWORD *)(a2 + 48) = v11;
  v12 = *(_OWORD *)&qword_1EF175838;
  *(_OWORD *)(a2 + 64) = xmmword_1EF175828;
  *(_OWORD *)(a2 + 80) = v12;
  v13 = *(_OWORD *)&qword_1EF1757F8;
  *(_OWORD *)a2 = _LayoutConstantsMedium___mediumConstants;
  *(_OWORD *)(a2 + 16) = v13;

}

void _LayoutConstantsSmall(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstantsSmall___lock_0);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstantsSmall___cachedDevice_0);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstantsSmall___cachedDevice_0);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstantsSmall___cachedDevice_0, obj);
    _LayoutConstantsSmall___previousCLKDeviceVersion_0 = objc_msgSend(obj, "version");

    ___LayoutConstantsSmall_block_invoke_0(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstantsSmall___previousCLKDeviceVersion_0;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstantsSmall___lock_0);
  v10 = unk_1EF175908;
  *(_OWORD *)(a2 + 96) = xmmword_1EF1758F8;
  *(_OWORD *)(a2 + 112) = v10;
  *(_OWORD *)(a2 + 128) = xmmword_1EF175918;
  *(_QWORD *)(a2 + 144) = qword_1EF175928;
  v11 = *(_OWORD *)&qword_1EF1758C8;
  *(_OWORD *)(a2 + 32) = xmmword_1EF1758B8;
  *(_OWORD *)(a2 + 48) = v11;
  v12 = *(_OWORD *)&qword_1EF1758E8;
  *(_OWORD *)(a2 + 64) = xmmword_1EF1758D8;
  *(_OWORD *)(a2 + 80) = v12;
  v13 = *(_OWORD *)&qword_1EF1758A8;
  *(_OWORD *)a2 = _LayoutConstantsSmall___smallConstants;
  *(_OWORD *)(a2 + 16) = v13;

}

void _LayoutConstants_38(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_54);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_54);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_54);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_54, obj);
    _LayoutConstants___previousCLKDeviceVersion_54 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_52(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_54;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_54);
  v10 = *(_OWORD *)&qword_1EF1759D0;
  *a2 = _LayoutConstants___constants_12;
  a2[1] = v10;
  a2[2] = xmmword_1EF1759E0;

}

void sub_1B748BDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

void sub_1B748C234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B748F1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B748F6C4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

__n128 _LayoutConstantsModularSmall_2@<Q0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstantsModularSmall___lock_2);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstantsModularSmall___cachedDevice_2);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstantsModularSmall___cachedDevice_2);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstantsModularSmall___cachedDevice_2, obj);
    _LayoutConstantsModularSmall___previousCLKDeviceVersion_2 = objc_msgSend(obj, "version");

    ___LayoutConstantsModularSmall_block_invoke_2(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstantsModularSmall___previousCLKDeviceVersion_2;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstantsModularSmall___lock_2);
  v10 = *(_OWORD *)&qword_1EF175AA8;
  a2[2] = xmmword_1EF175A98;
  a2[3] = v10;
  a2[4] = xmmword_1EF175AB8;
  v11 = *(_OWORD *)&qword_1EF175A88;
  *a2 = _LayoutConstantsModularSmall_constants_0;
  a2[1] = v11;

  return result;
}

void sub_1B7495DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B7496FA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id NTKAstronomyComplicationForegroundColor(uint64_t a1)
{
  uint64_t v2;

  if (NTKAstronomyComplicationForegroundColor_onceToken != -1)
    dispatch_once(&NTKAstronomyComplicationForegroundColor_onceToken, &__block_literal_global_139);
  if (a1 >= 3)
    v2 = 0;
  else
    v2 = a1;
  return (id)NTKAstronomyComplicationForegroundColor_complicationColors[v2];
}

int *_NTKAstronomyLayoutForDevice(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_NTKAstronomyLayoutForDevice___lock);
  WeakRetained = objc_loadWeakRetained(&_NTKAstronomyLayoutForDevice___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_NTKAstronomyLayoutForDevice___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_NTKAstronomyLayoutForDevice___cachedDevice, v1);
    _NTKAstronomyLayoutForDevice___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    ___NTKAstronomyLayoutForDevice_block_invoke(v8, (uint64_t)v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _NTKAstronomyLayoutForDevice___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_NTKAstronomyLayoutForDevice___lock);

  return &_NTKAstronomyLayoutForDevice_constants;
}

void sub_1B7498BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B7498C68(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

id _NTKAstronomyFaceViewLocalizedNow()
{
  if (_NTKAstronomyFaceViewLocalizedNow_onceToken != -1)
    dispatch_once(&_NTKAstronomyFaceViewLocalizedNow_onceToken, &__block_literal_global_366);
  return (id)_NTKAstronomyFaceViewLocalizedNow_nowString;
}

void sub_1B749A0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _NTKAstronomyComplicationShadowColor(uint64_t a1)
{
  uint64_t v2;

  if (_NTKAstronomyComplicationShadowColor_onceToken != -1)
    dispatch_once(&_NTKAstronomyComplicationShadowColor_onceToken, &__block_literal_global_371);
  if (a1 >= 3)
    v2 = 0;
  else
    v2 = a1;
  return (id)_NTKAstronomyComplicationShadowColor_complicationColors[v2];
}

void sub_1B749B334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B749B610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B749BB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *NTKTimeFormatWithAstronomyVistaBetweenNowAndOverrideDate(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  double v11;
  __CFString *v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  id v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  uint64_t v29;
  __CFString *v30;

  v5 = (void *)MEMORY[0x1E0C99D48];
  v6 = a3;
  v7 = a2;
  objc_msgSend(v5, "currentCalendar");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  NTKRoundDateDownToNearestSecond(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  NTKRoundDateDownToNearestSecond(v6);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "timeIntervalSinceDate:", v9);
  if (v11 == 0.0)
  {
    v12 = &stru_1E6BDC918;
    goto LABEL_27;
  }
  v13 = v11;
  v14 = (void *)objc_opt_new();
  objc_msgSend(v14, "setUnitsStyle:", 3);
  objc_msgSend(v14, "setMaximumUnitCount:", 2);
  objc_msgSend(v14, "setFormattingContext:", 2);
  objc_msgSend(v8, "startOfDayForDate:", v9);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "dateByAddingUnit:value:toDate:options:", 16, 1, v9, 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "startOfDayForDate:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v15, "timeIntervalSinceDate:", v9);
  v19 = v18;
  objc_msgSend(v17, "timeIntervalSinceDate:", v9);
  v21 = v20;
  v22 = v9;
  switch(a1)
  {
    case 2:
      v23 = v14;
      if (fabs(v13) >= 31536000.0)
        v24 = 4;
      else
        v24 = 20;
      goto LABEL_18;
    case 1:
LABEL_8:
      if (v13 <= v19 || v13 >= v21)
      {
        objc_msgSend(v14, "setAllowedUnits:", 16);
        if (v13 >= v19)
          v25 = v15;
        else
          v25 = v17;
        v26 = v25;

        v22 = v26;
        break;
      }
      v23 = v14;
      v24 = 48;
      goto LABEL_18;
    case 0:
      if (fabs(v13) < 3600.0)
      {
        v23 = v14;
        v24 = 112;
LABEL_18:
        objc_msgSend(v23, "setAllowedUnits:", v24);
        break;
      }
      goto LABEL_8;
  }
  objc_msgSend(v14, "stringFromDate:toDate:", v22, v10);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if (_NTKAstronomyUseAllUppercaseText_onceToken != -1)
    dispatch_once(&_NTKAstronomyUseAllUppercaseText_onceToken, &__block_literal_global_372);
  if (_NTKAstronomyUseAllUppercaseText_useAllUppercaseText == 1)
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "uppercaseStringWithLocale:", v28);
    v29 = objc_claimAutoreleasedReturnValue();

    v27 = (void *)v29;
  }
  if (v13 <= 0.0)
  {
    v30 = v27;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("+%@"), v27);
    v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  v12 = v30;

LABEL_27:
  return v12;
}

void sub_1B749D1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id NTKSharedWidgetComplicationProvider(uint64_t a1)
{
  return +[NTKCompanionWidgetComplicationManager instanceForDevice:](NTKCompanionWidgetComplicationManager, "instanceForDevice:", a1);
}

double _LayoutConstants_39(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_55);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_55);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_55);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_LayoutConstants___cachedDevice_55, v1);
    _LayoutConstants___previousCLKDeviceVersion_55 = objc_msgSend(v1, "version");

    ___LayoutConstants_block_invoke_53(v8, (uint64_t)v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _LayoutConstants___previousCLKDeviceVersion_55;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_55);
  v9 = *(double *)&_LayoutConstants___constants_0_11;

  return v9;
}

void sub_1B749F1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B749FA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B74A01F0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1B74A0C48(_Unwind_Exception *exception_object, int a2)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  void *v5;

  if (a2 == 1)
  {
    v3 = objc_begin_catch(exception_object);
    _NTKLoggingObjectForDomain(18, (uint64_t)"NTKLoggingDomainComplication");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      -[NTKComplicationNoContentImageFileCache init].cold.1((uint64_t)v3, v4);

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "removeItemAtPath:error:", v2, 0);

    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_claimAutoreleasedReturnValue();

    objc_end_catch();
    JUMPOUT(0x1B74A0B54);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B74A16B8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1B74A193C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _PathToComplicationNoContentImageArchive()
{
  if (_NTKComplicationNoContentImagesCacheDirectory_onceToken != -1)
    dispatch_once(&_NTKComplicationNoContentImagesCacheDirectory_onceToken, &__block_literal_global_141);
  return objc_msgSend((id)_NTKComplicationNoContentImagesCacheDirectory___path, "stringByAppendingPathComponent:", CFSTR("NoContentImages.archive"));
}

void sub_1B74A1C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _LayoutConstants_40(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_56);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_56);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_56);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_LayoutConstants___cachedDevice_56, v1);
    _LayoutConstants___previousCLKDeviceVersion_56 = objc_msgSend(v1, "version");

    CLKValueForDeviceMetrics();
    _LayoutConstants__constants_0_3 = v8;
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _LayoutConstants___previousCLKDeviceVersion_56;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_56);
  v9 = *(double *)&_LayoutConstants__constants_0_3;

  return v9;
}

id NTKMusicTintColor()
{
  if (NTKMusicTintColor_onceToken != -1)
    dispatch_once(&NTKMusicTintColor_onceToken, &__block_literal_global_142);
  return (id)NTKMusicTintColor__color;
}

id NTKMusicTintColorHeadline()
{
  if (NTKMusicTintColorHeadline_onceToken != -1)
    dispatch_once(&NTKMusicTintColorHeadline_onceToken, &__block_literal_global_2_1);
  return (id)NTKMusicTintColorHeadline__color;
}

id NTKMusicTintColorBody()
{
  if (NTKMusicTintColorBody_onceToken != -1)
    dispatch_once(&NTKMusicTintColorBody_onceToken, &__block_literal_global_3_4);
  return (id)NTKMusicTintColorBody__color;
}

id NTKMusicTintColorBody2()
{
  if (NTKMusicTintColorBody2_onceToken != -1)
    dispatch_once(&NTKMusicTintColorBody2_onceToken, &__block_literal_global_4_3);
  return (id)NTKMusicTintColorBody2__color;
}

uint64_t NTKMusicPlatterBackgroundColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "whiteColor");
}

void sub_1B74A43D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74A4A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__n128 _LayoutConstants_41@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_57);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_57);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_57);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_57, obj);
    _LayoutConstants___previousCLKDeviceVersion_57 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_54(v9, obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_57;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_57);
  v10 = *(_OWORD *)&dword_1EF175DF0;
  *(_OWORD *)(a2 + 64) = xmmword_1EF175DE0;
  *(_OWORD *)(a2 + 80) = v10;
  *(_QWORD *)(a2 + 96) = qword_1EF175E00;
  v11 = unk_1EF175DB0;
  *(_OWORD *)a2 = _LayoutConstants___constants_13;
  *(_OWORD *)(a2 + 16) = v11;
  v12 = *(_OWORD *)&qword_1EF175DD0;
  *(_OWORD *)(a2 + 32) = xmmword_1EF175DC0;
  *(_OWORD *)(a2 + 48) = v12;

  return result;
}

void sub_1B74A86D4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void sub_1B74A8DEC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1B74AA460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74AADBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74AB37C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1B74AD9FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id ntk_duotone(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;

  v7 = a4;
  v8 = a3;
  +[NTKPigmentEditOption fullnameWithCollectionName:optionName:](NTKPigmentEditOption, "fullnameWithCollectionName:optionName:", a1, a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  +[NTKPigmentEditOption fullnameWithCollectionName:optionName:](NTKPigmentEditOption, "fullnameWithCollectionName:optionName:", v8, v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  +[NTKPigmentEditOption duotoneNameWithName:otherName:](NTKPigmentEditOption, "duotoneNameWithName:otherName:", v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

id NTKStartOfDayForDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v1 = (void *)MEMORY[0x1E0C99D48];
    v2 = a1;
    objc_msgSend(v1, "currentCalendar");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "startOfDayForDate:", v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = 0;
  }
  return v4;
}

id NTKStartOfNextDayForDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v1 = (void *)MEMORY[0x1E0C99D48];
    v2 = a1;
    objc_msgSend(v1, "currentCalendar");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "dateByAddingUnit:value:toDate:options:", 16, 1, v2, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "startOfDayForDate:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = 0;
  }
  return v5;
}

id NTKStartOfPreviousDayForDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;

  if (a1)
  {
    v1 = (void *)MEMORY[0x1E0C99D48];
    v2 = a1;
    objc_msgSend(v1, "currentCalendar");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "dateByAddingUnit:value:toDate:options:", 16, -1, v2, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "startOfDayForDate:", v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v5 = 0;
  }
  return v5;
}

id NTKStartOfNthDayForDate(void *a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;

  if (a1)
  {
    v3 = (void *)MEMORY[0x1E0C99D48];
    v4 = a1;
    objc_msgSend(v3, "currentCalendar");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "dateByAddingUnit:value:toDate:options:", 16, a2, v4, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "startOfDayForDate:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

double NTKPercentageOfDayDoneForDateWithStartAndEnd(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = v7;
  v9 = 0.0;
  if (v5)
  {
    if (v6)
    {
      if (v7)
      {
        objc_msgSend(v6, "timeIntervalSinceReferenceDate");
        v11 = v10;
        objc_msgSend(v8, "timeIntervalSinceReferenceDate");
        v13 = v12;
        objc_msgSend(v5, "timeIntervalSinceReferenceDate");
        if (v13 - v11 > 0.0)
          v9 = (v14 - v11) / (v13 - v11);
      }
    }
  }

  return v9;
}

double NTKPercentageOfDayDoneForDate(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  double v4;

  if (!a1)
    return 0.0;
  v1 = a1;
  NTKStartOfDayForDate(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  NTKStartOfNextDayForDate(v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = NTKPercentageOfDayDoneForDateWithStartAndEnd(v1, v2, v3);

  return v4;
}

id NTKEndOfDayForDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v7;
  double v8;

  if (!a1)
    return 0;
  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  v8 = 0.0;
  objc_msgSend(v3, "rangeOfUnit:startDate:interval:forDate:", 16, &v7, &v8, v2);

  v4 = v7;
  objc_msgSend(v4, "dateByAddingTimeInterval:", v8 + -1.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

uint64_t NTKNumberOfUnitsInRange(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (void *)MEMORY[0x1E0C99D48];
  v4 = a2;
  objc_msgSend(v3, "currentCalendar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "startDate");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v5, "ordinalityOfUnit:inUnit:forDate:", 2, a1, v6);

  objc_msgSend(v4, "endDate");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = objc_msgSend(v5, "ordinalityOfUnit:inUnit:forDate:", 2, a1, v8);
  if (v9 - v7 <= 1)
    v10 = 1;
  else
    v10 = v9 - v7;

  return v10;
}

BOOL NTKIsDateAfter5PM(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "component:fromDate:", 32, v2);

  return v4 > 16;
}

id NTKDateFor5PMOnDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v7;
  double v8;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  v8 = 0.0;
  objc_msgSend(v3, "rangeOfUnit:startDate:interval:forDate:", 16, &v7, &v8, v2);

  v4 = v7;
  objc_msgSend(v4, "dateByAddingTimeInterval:", v8 + -25200.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id NTKDateForNext5PMFromDate(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (NTKIsDateAfter5PM(v1))
  {
    v3 = objc_alloc_init(MEMORY[0x1E0C99D78]);
    objc_msgSend(v3, "setDay:", 1);
    objc_msgSend(v2, "dateByAddingComponents:toDate:options:", v3, v1, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    NTKDateFor5PMOnDate(v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    NTKDateFor5PMOnDate(v1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

id NTKDateFor9AMOnDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v7;
  double v8;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  v8 = 0.0;
  objc_msgSend(v3, "rangeOfUnit:startDate:interval:forDate:", 16, &v7, &v8, v2);

  v4 = v7;
  objc_msgSend(v4, "dateByAddingTimeInterval:", v8 + -54000.0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

uint64_t NTK12HourTimeFrom24HourTime(uint64_t a1)
{
  if (a1 % 12)
    return a1 % 12;
  else
    return 12;
}

uint64_t NTKDateHourIn12HourTime(void *a1)
{
  uint64_t v1;

  v1 = NTKDateHourIn24HourTime(a1);
  if (v1 % 12)
    return v1 % 12;
  else
    return 12;
}

uint64_t NTKDateHourIn24HourTime(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "components:fromDate:", 32, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_msgSend(v4, "hour");
  return v5;
}

uint64_t NTKMinuteForDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "components:fromDate:", 64, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_msgSend(v4, "minute");
  return v5;
}

uint64_t NTKDayForDate(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "component:fromDate:", 16, v2);

  return v4;
}

void NTKSetIdealizedDate(id obj)
{
  objc_storeStrong((id *)&__overrideIdealizedDate, obj);
}

id NTKIdealizedDate()
{
  id v0;
  uint64_t v1;
  void *v2;
  void *v3;

  if (NTKIdealizedDate_onceToken != -1)
    dispatch_once(&NTKIdealizedDate_onceToken, &__block_literal_global_146);
  if (__overrideIdealizedDate)
  {
    v0 = (id)__overrideIdealizedDate;
  }
  else
  {
    CLKForcedTime();
    v1 = objc_claimAutoreleasedReturnValue();
    v2 = (void *)v1;
    v3 = (void *)__idealizedDate;
    if (v1)
      v3 = (void *)v1;
    v0 = v3;

  }
  return v0;
}

void _UpdateIdealizedDate()
{
  id v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)CFPreferencesCopyAppValue(CFSTR("IdealizedDateOverride"), CFSTR("com.apple.NanoTimeKit.face"));
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v0 = v5;
    v1 = (void *)__idealizedDate;
    __idealizedDate = (uint64_t)v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    +[CLKDate unmodifiedDate](NTKDate, "unmodifiedDate");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "dateBySettingHour:minute:second:ofDate:options:", 10, 9, 30, v2, 0);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)__idealizedDate;
    __idealizedDate = v3;

  }
}

id NTKNilOrDateOverrideInDemoMode()
{
  if (NTKNilOrDateOverrideInDemoMode_onceToken != -1)
    dispatch_once(&NTKNilOrDateOverrideInDemoMode_onceToken, &__block_literal_global_8_2);
  return (id)NTKNilOrDateOverrideInDemoMode___date;
}

id NTKAddDaysToDate(void *a1, uint64_t a2)
{
  objc_class *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;

  if (a1)
  {
    v3 = (objc_class *)MEMORY[0x1E0C99D78];
    v4 = a1;
    v5 = objc_alloc_init(v3);
    objc_msgSend(v5, "setDay:", a2);
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "dateByAddingComponents:toDate:options:", v5, v4, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

void sub_1B74B1F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B74B1FA0(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void sub_1B74B28EC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_1B74B2FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void _LayoutConstants_42(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_59);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_59);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_59);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_59, obj);
    _LayoutConstants___previousCLKDeviceVersion_59 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_56(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_59;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_59);
  v10 = unk_1EF175F50;
  *(_OWORD *)a2 = _LayoutConstants___constants_14;
  *(_OWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 32) = qword_1EF175F60;

}

void sub_1B74B3AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;
  id *v21;
  uint64_t v22;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak((id *)(v22 - 88));
  _Unwind_Resume(a1);
}

double _LayoutConstants_43(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_60);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_60);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_60);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_LayoutConstants___cachedDevice_60, v1);
    _LayoutConstants___previousCLKDeviceVersion_60 = objc_msgSend(v1, "version");

    ___LayoutConstants_block_invoke_57(v8, (uint64_t)v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _LayoutConstants___previousCLKDeviceVersion_60;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_60);
  v9 = *(double *)&_LayoutConstants___constants_0_12;

  return v9;
}

void sub_1B74B4C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

const __CFString *_appendStringBasedOnPromotedSection(int a1)
{
  if (a1)
    return 0;
  else
    return CFSTR("all");
}

id _peopleComplicationForContact(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v3 = a1;
  v4 = a2;
  +[NTKPeopleComplicationContactsCache sharedCache](NTKPeopleComplicationContactsCache, "sharedCache");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__46;
  v18 = __Block_byref_object_dispose__46;
  v19 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___peopleComplicationForContact_block_invoke;
  v10[3] = &unk_1E6BD8FC8;
  v13 = &v14;
  v6 = v3;
  v11 = v6;
  v7 = v4;
  v12 = v7;
  objc_msgSend(v5, "checkValidityOfContact:block:", v6, v10);
  v8 = (id)v15[5];

  _Block_object_dispose(&v14, 8);
  return v8;
}

void sub_1B74B4F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___peopleComplicationForContact_block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  NTKPeopleComplication *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;

  v25 = a3;
  v9 = a4;
  v10 = a5;
  v11 = -[NTKComplication initWithComplicationType:]([NTKPeopleComplication alloc], "initWithComplicationType:", 37);
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

  objc_msgSend(*(id *)(a1 + 32), "identifier");
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v16 = *(void **)(v15 + 40);
  *(_QWORD *)(v15 + 40) = v14;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) + 64), a4);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40) + 56), a3);
  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v18 = *(void **)(v17 + 48);
  *(_QWORD *)(v17 + 48) = v10;
  v19 = v10;

  v20 = *(_QWORD *)(a1 + 40);
  v21 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  objc_msgSend(v21, "_generateUniqueIdentifier");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v22;
  if (v20)
  {
    objc_msgSend(v22, "stringByAppendingString:", *(_QWORD *)(a1 + 40));
    v24 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "setUniqueIdentifier:", v24);

    v19 = (id)v24;
  }
  else
  {
    objc_msgSend(v21, "setUniqueIdentifier:", v22);
  }

}

id _peopleComplicationsForContacts(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t buf[4];
  void *v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = v3;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v17;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v7);
        _peopleComplicationForContact(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v11), v4);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (v12)
        {
          objc_msgSend(v5, "addObject:", v12, (_QWORD)v16);
          objc_msgSend(v12, "fullName");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "addObject:", v13);

        }
        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
    }
    while (v9);
  }

  _NTKLoggingObjectForDomain(18, (uint64_t)"NTKLoggingDomainComplication");
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v21 = v6;
    _os_log_impl(&dword_1B72A3000, v14, OS_LOG_TYPE_DEFAULT, "People Complication: Created people complications with names: %@", buf, 0xCu);
  }

  return v5;
}

void sub_1B74B5580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74B5D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B74B61B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74B84DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_1B74B8B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id NTKFacesArrayGalleryCollectionLoadQueue()
{
  void *v0;
  uint64_t *v1;
  id v2;

  if (NTKFacesArrayGalleryCollectionLoadQueue_onceToken != -1)
    dispatch_once(&NTKFacesArrayGalleryCollectionLoadQueue_onceToken, &__block_literal_global_150);
  objc_opt_class();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v0);
  v1 = &NTKFacesArrayGalleryCollectionLoadQueue_primaryQueue;
  if (!NTKFacesArrayGalleryCollectionLoadQueue_usePrimaryQueue)
    v1 = &NTKFacesArrayGalleryCollectionLoadQueue_secondaryQueue;
  v2 = (id)*v1;
  NTKFacesArrayGalleryCollectionLoadQueue_usePrimaryQueue ^= 1u;
  objc_sync_exit(v0);

  return v2;
}

void sub_1B74BAA6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B74BABC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B74BAC48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B74BAE38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B74BB020(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B74BB0A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B74BB134(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B74BB4B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id getObjectType(objc_property *a1, _BYTE *a2)
{
  const char *Attributes;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  void *v10;
  size_t v11;
  int v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  char *__stringp[2];

  __stringp[1] = *(char **)MEMORY[0x1E0C80C00];
  Attributes = property_getAttributes(a1);
  v4 = strlen(Attributes);
  MEMORY[0x1E0C80A78](v4, v5, v6);
  __stringp[0] = strcpy((char *)__stringp - ((v7 + 16) & 0xFFFFFFFFFFFFFFF0), Attributes);
  v8 = strsep(__stringp, ",");
  if (v8)
  {
    v9 = v8;
    v10 = 0;
    while (1)
    {
      v11 = strlen(v9);
      if (v11)
      {
        v12 = *v9;
        v13 = v11 - 4;
        if (v11 < 4 || v12 != 84)
          goto LABEL_8;
        if (v9[1] == 64)
          break;
      }
LABEL_10:
      v9 = strsep(__stringp, ",");
      if (!v9)
        return v10;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v9, objc_msgSend(MEMORY[0x1E0CB3940], "defaultCStringEncoding"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "substringWithRange:", 3, v13);
    v15 = objc_claimAutoreleasedReturnValue();

    v12 = *v9;
    v10 = (void *)v15;
LABEL_8:
    if (v12 == 68)
      *a2 = 1;
    goto LABEL_10;
  }
  v10 = 0;
  return v10;
}

void sub_1B74BC910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _LayoutConstants_44(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_64);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_64);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_64);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_LayoutConstants___cachedDevice_64, v1);
    _LayoutConstants___previousCLKDeviceVersion_64 = objc_msgSend(v1, "version");

    ___LayoutConstants_block_invoke_61(v8, (uint64_t)v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _LayoutConstants___previousCLKDeviceVersion_64;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_64);
  v9 = *(double *)&_LayoutConstants___constants_0_13;

  return v9;
}

void sub_1B74C03D4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1B74C319C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B74C3788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B74C4488(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1B74C5830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _MaxFaceDataMode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = 1;
  if (a1 != 1 && a2 != 1)
  {
    v2 = 3;
    v3 = 2;
    v4 = 5;
    v5 = a2 == 4 || a1 == 4;
    v6 = 4;
    if (!v5)
      v6 = 0;
    if (a2 == 5)
      v6 = 5;
    if (a1 != 5)
      v4 = v6;
    if (a2 == 2)
      v4 = 2;
    if (a1 != 2)
      v3 = v4;
    if (a2 == 3)
      v3 = 3;
    if (a1 != 3)
      return v3;
  }
  return v2;
}

id _LegacyControllerClasses()
{
  if (_LegacyControllerClasses_onceToken != -1)
    dispatch_once(&_LegacyControllerClasses_onceToken, &__block_literal_global_162);
  return (id)_LegacyControllerClasses___classes;
}

void sub_1B74C7470(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  id *v5;
  uint64_t v6;

  objc_destroyWeak(v5);
  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v6 - 80));
  objc_destroyWeak((id *)(v6 - 72));
  _Unwind_Resume(a1);
}

void sub_1B74C863C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B74CA988(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B74CB138(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B74CD594(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___cachedCurrentBundle_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0CB34D0], "bundleForClass:", objc_opt_class());
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)_cachedCurrentBundle___bundle;
  _cachedCurrentBundle___bundle = v0;

}

uint64_t _handleDaemonDidLaunchNotification_1(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_register");
}

void sub_1B74CEA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  id *v44;
  uint64_t v45;

  objc_destroyWeak(v44);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose((const void *)(v45 - 200), 8);
  _Block_object_dispose((const void *)(v45 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1B74CF188(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

double _LayoutConstants_45@<D0>(uint64_t a1@<X8>)
{
  id WeakRetained;
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  __int128 v12;
  double result;

  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_67);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_67);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_67);
  if (v4 != v5)
  {

LABEL_5:
    objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak(&_LayoutConstants___cachedDevice_67, v9);

    v10 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_67);
    _LayoutConstants___previousCLKDeviceVersion_67 = objc_msgSend(v10, "version");

    objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    ___LayoutConstants_block_invoke_63((uint64_t)v11, v11);

    goto LABEL_6;
  }
  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "version");
  v8 = _LayoutConstants___previousCLKDeviceVersion_67;

  if (v7 != v8)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_67);
  v12 = *(_OWORD *)&qword_1EF176228;
  *(_OWORD *)a1 = _LayoutConstants_layoutConstants_1;
  *(_OWORD *)(a1 + 16) = v12;
  result = *(double *)&xmmword_1EF176238;
  *(_OWORD *)(a1 + 32) = xmmword_1EF176238;
  *(_QWORD *)(a1 + 48) = qword_1EF176248;
  return result;
}

id _PerformSelectorWithArgument(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    objc_msgSend(a1, "performSelector:withObject:", a2, a3);
  else
    objc_msgSend(a1, "performSelector:", a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t NTKMultiInterpolatedColorPalette_noArgumentMethodImplementation(void *a1, const char *a2)
{
  return objc_msgSend(a1, "interpolatedColorFromSelector:parameter:", a2, 0);
}

uint64_t NTKMultiInterpolatedColorPalette_singleArgumentMethodImplementation(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "interpolatedColorFromSelector:parameter:", a2, a3);
}

id NTKUpNextPhotosContent(void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  objc_class *v11;
  id v12;
  id v13;
  void *v14;

  v11 = (objc_class *)MEMORY[0x1E0D842D8];
  v12 = a1;
  v13 = objc_alloc_init(v11);
  objc_msgSend(v13, "setStyle:", 2);
  objc_msgSend(v13, "setOverrideBodyImage:", v12);

  objc_msgSend(v13, "setImageFocusRect:", a3, a4, a5, a6);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setObject:forKey:", v14, CFSTR("NTKUpNextWantsFullScreenPhotoContent"));

  return v13;
}

void sub_1B74D3454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__n128 _LayoutConstants_46@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_68);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_68);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_68);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_68, obj);
    _LayoutConstants___previousCLKDeviceVersion_68 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_64(v9, obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_68;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_68);
  v10 = *(_OWORD *)&qword_1EF176348;
  *(_OWORD *)(a2 + 128) = xmmword_1EF176338;
  *(_OWORD *)(a2 + 144) = v10;
  *(_QWORD *)(a2 + 160) = qword_1EF176358;
  v11 = unk_1EF176308;
  *(_OWORD *)(a2 + 64) = xmmword_1EF1762F8;
  *(_OWORD *)(a2 + 80) = v11;
  v12 = *(_OWORD *)&qword_1EF176328;
  *(_OWORD *)(a2 + 96) = xmmword_1EF176318;
  *(_OWORD *)(a2 + 112) = v12;
  v13 = unk_1EF1762C8;
  *(_OWORD *)a2 = _LayoutConstants___constants_15;
  *(_OWORD *)(a2 + 16) = v13;
  v14 = *(_OWORD *)&qword_1EF1762E8;
  *(_OWORD *)(a2 + 32) = xmmword_1EF1762D8;
  *(_OWORD *)(a2 + 48) = v14;

  return result;
}

void _LayoutConstants_47(void *a1@<X0>, void *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_69);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_69);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_69);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_69, obj);
    _LayoutConstants___previousCLKDeviceVersion_69 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_65(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_69;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_69);
  memcpy(a2, &_LayoutConstants___constants_16, 0x118uLL);

}

double _LayoutConstants_48(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  double v8;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_70);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_70);
  if (WeakRetained)
  {
    v3 = WeakRetained;
    v4 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_70);
    if (v4 == v1)
    {
      v5 = objc_msgSend(v1, "version");
      v6 = _LayoutConstants___previousCLKDeviceVersion_70;

      if (v5 == v6)
        goto LABEL_7;
    }
    else
    {

    }
  }
  v7 = objc_storeWeak(&_LayoutConstants___cachedDevice_70, v1);
  _LayoutConstants___previousCLKDeviceVersion_70 = objc_msgSend(v1, "version");

  _LayoutConstants_constants_0_9 = 0x4018000000000000;
  _LayoutConstants_constants_1_10 = 0x4018000000000000;
  if (objc_msgSend(v1, "deviceCategory") != 1)
    _LayoutConstants_constants_0_9 = 0x4022000000000000;
LABEL_7:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_70);
  v8 = *(double *)&_LayoutConstants_constants_0_9;

  return v8;
}

uint64_t NTKFaceGalleryNavigationTitleTextColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "systemBlueColor");
}

uint64_t NTKFaceGalleryAddButtonBackgroundColor()
{
  return objc_msgSend(MEMORY[0x1E0DC3658], "colorWithWhite:alpha:", 0.4, 1.0);
}

id NTKFaceGalleryDescriptionTextFont()
{
  void *WeakRetained;

  os_unfair_lock_lock((os_unfair_lock_t)&NTKFaceGalleryDescriptionTextFont_lock);
  WeakRetained = objc_loadWeakRetained(&NTKFaceGalleryDescriptionTextFont_cachedFont);
  if (!WeakRetained)
  {
    objc_msgSend(MEMORY[0x1E0DC1350], "preferredFontForTextStyle:", *MEMORY[0x1E0DC4AB8]);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak(&NTKFaceGalleryDescriptionTextFont_cachedFont, WeakRetained);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&NTKFaceGalleryDescriptionTextFont_lock);
  return WeakRetained;
}

void NTKFaceGalleryApplyColorToNavigationItemWithAppearance(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v5 = a2;
  v6 = a1;
  v15 = (id)objc_msgSend(a3, "copy");
  objc_msgSend(v15, "titleTextAttributes");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v7, "mutableCopy");

  v9 = *MEMORY[0x1E0DC1140];
  objc_msgSend(v8, "setObject:forKey:", v6, *MEMORY[0x1E0DC1140]);
  objc_msgSend(v15, "setTitleTextAttributes:", v8);
  objc_msgSend(v15, "backButtonAppearance");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "normal");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "titleTextAttributes");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = (void *)objc_msgSend(v12, "mutableCopy");

  objc_msgSend(v13, "setObject:forKey:", v6, v9);
  objc_msgSend(v10, "normal");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setTitleTextAttributes:", v13);

  objc_msgSend(v15, "setBackButtonAppearance:", v10);
  objc_msgSend(v5, "setStandardAppearance:", v15);

}

double NTKUtilityComplicationHeight(void *a1)
{
  _BYTE v2[8];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

void _LayoutConstants_49(void *a1@<X0>, void *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_71);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_71);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_71);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_71, obj);
    _LayoutConstants___previousCLKDeviceVersion_71 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_66(v9, obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_71;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_71);
  memcpy(a2, &_LayoutConstants___constants_17, 0x158uLL);

}

double NTKUtilityComplicationCircularDiameter(void *a1)
{
  _BYTE v2[48];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

double NTKUtilityComplicationRingStrokeWidth(void *a1)
{
  _BYTE v2[56];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

double NTKUtilityComplicationCurvedUpperOffset(void *a1)
{
  _BYTE v2[264];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

double NTKUtilityComplicationCurvedLowerOffset(void *a1)
{
  _BYTE v2[272];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

double NTKUtilityComplicationRingForegroundAlpha(void *a1)
{
  _BYTE v2[64];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

double NTKUtilityComplicationRingBackgroundAlpha(void *a1)
{
  _BYTE v2[72];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

double NTKUtilityComplicationSelectedMaxHeight(void *a1)
{
  _BYTE v2[88];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

double NTKUtilityComplicationNormalForegroundAlpha()
{
  return 0.7;
}

double NTKUtilityComplicationEditingForegroundAlpha()
{
  return 1.0;
}

double NTKUtilityComplicationHighlightCornerRadius(void *a1)
{
  _BYTE v2[152];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

double NTKUtilityComplicationHighlightPadding(void *a1)
{
  id v1;
  double v2;
  uint64_t v4;
  _BYTE v5[120];
  double v6;

  v1 = a1;
  _LayoutConstants_49(v1, v5);
  v2 = v6;
  _LayoutConstants_49(v1, &v4);

  return v2;
}

double NTKUtilityComplicationCurvedBuffer(void *a1)
{
  _BYTE v2[280];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

double NTKUtilityComplicationFontSize(void *a1)
{
  double v2[43];

  _LayoutConstants_49(a1, v2);
  return v2[0];
}

double NTKUtilityComplicationBezelAngularPadding(void *a1)
{
  _BYTE v2[336];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

double NTKUtilityComplicationBottomCenterCurvedRadius(void *a1)
{
  _BYTE v2[208];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

double NTKUtilityComplicationLabelImagePadding(void *a1)
{
  _BYTE v2[96];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

double NTKUtilityComplicationBottomCenterAngularWidth(void *a1)
{
  _BYTE v2[240];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

double NTKUtilityTouchEdgeInsetsForPlacementAndDevice(char a1, void *a2)
{
  id v3;
  double v4;
  _BYTE v6[160];
  _BYTE v7[160];
  _BYTE v8[168];
  double v9;

  v3 = a2;
  _LayoutConstants_49(v3, v8);
  v4 = v9;
  if ((a1 & 2) != 0)
  {
    _LayoutConstants_49(v3, v7);
  }
  else if ((a1 & 8) != 0)
  {
    _LayoutConstants_49(v3, v6);
  }

  return v4;
}

id NTKUtilityComplicationPlatterColor()
{
  if (NTKUtilityComplicationPlatterColor_onceToken != -1)
    dispatch_once(&NTKUtilityComplicationPlatterColor_onceToken, &__block_literal_global_160);
  return (id)NTKUtilityComplicationPlatterColor_color;
}

id _UtilityPlatterBackgroundTemplateImage(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_UtilityPlatterBackgroundTemplateImage___lock);
  WeakRetained = objc_loadWeakRetained(&_UtilityPlatterBackgroundTemplateImage___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&_UtilityPlatterBackgroundTemplateImage___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&_UtilityPlatterBackgroundTemplateImage___cachedDevice, v1);
    _UtilityPlatterBackgroundTemplateImage___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    ___UtilityPlatterBackgroundTemplateImage_block_invoke(v8, v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = _UtilityPlatterBackgroundTemplateImage___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_UtilityPlatterBackgroundTemplateImage___lock);
  v9 = (id)_UtilityPlatterBackgroundTemplateImage_backgroundImage;

  return v9;
}

void sub_1B74E101C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B74E122C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

BOOL NTKUtilityComplicationCurvedPointInside(int a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  double v27;
  _BOOL4 v28;
  double v30;

  if (a1)
    v20 = a12;
  else
    v20 = a10;
  v30 = v20;
  if (a1)
    v21 = a10;
  else
    v21 = a12;
  if (a1)
    v22 = a8;
  else
    v22 = a7;
  if (a1)
    v23 = a7;
  else
    v23 = a8;
  v24 = a2 - a5;
  v25 = a3 - a6;
  v26 = atan2(a3 - a6, a2 - a5);
  v27 = sqrt(v24 * v24 + v25 * v25);
  v28 = v26 >= v22 - a11;
  if (v26 > a13 + v23)
    v28 = 0;
  if (v27 < a4 - v21)
    v28 = 0;
  return v27 <= v30 + a4 && v28;
}

double NTKUtilityComplicationCurvedPlatterInsets(void *a1)
{
  _BYTE v2[304];
  double v3;

  _LayoutConstants_49(a1, v2);
  return v3;
}

void sub_1B74E66F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
  id *v16;
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

__n128 _LayoutConstants_50@<Q0>(uint64_t a1@<X8>)
{
  id WeakRetained;
  _QWORD *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  unint64_t v17;
  __int128 v18;
  __n128 result;

  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_72);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_72);
  v3 = (_QWORD *)&unk_1EF176000;
  if (WeakRetained)
  {
    v4 = WeakRetained;
    objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "device");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    v7 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_72);
    if (v6 == v7)
    {
      objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "device");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "version");
      v11 = _LayoutConstants___previousCLKDeviceVersion_72;

      v3 = &unk_1EF176000;
      if (v10 == v11)
        goto LABEL_8;
    }
    else
    {

    }
  }
  objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "device");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeWeak(&_LayoutConstants___cachedDevice_72, v13);

  v14 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_72);
  v3[233] = objc_msgSend(v14, "version");

  objc_msgSend(MEMORY[0x1E0C94510], "sharedRenderingContext");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "device");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  _LayoutConstants_layoutConstants_2 = xmmword_1B755FFD0;
  qword_1EF176700 = 0x4038000000000000;
  xmmword_1EF176710 = xmmword_1B755FFE0;
  unk_1EF176720 = xmmword_1B755FFF0;
  v17 = objc_msgSend(v16, "deviceCategory");
  if (v17 <= 4)
    qword_1EF176708 = qword_1B7560000[v17];

LABEL_8:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_72);
  v18 = unk_1EF176720;
  *(_OWORD *)(a1 + 32) = xmmword_1EF176710;
  *(_OWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 64) = qword_1EF176730;
  result = *(__n128 *)&qword_1EF176700;
  *(_OWORD *)a1 = _LayoutConstants_layoutConstants_2;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _handleAppConduitApplicationsChangedNotification_1(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_fetchInstalledApps");
}

void sub_1B74EB15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74EB880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74ECB00(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

id NTKSpectrumCreateCircularMaskLayer()
{
  void *v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0DC3508], "bezierPathWithOvalInRect:");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CD2840], "layer");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_retainAutorelease(v0);
  objc_msgSend(v1, "setPath:", objc_msgSend(v2, "CGPath"));

  return v1;
}

id NTKSpectrumAddCircularMaskToImage(void *a1)
{
  id v1;
  double v2;
  CGFloat v3;
  double width;
  double height;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  CGSize v12;

  v1 = a1;
  objc_msgSend(v1, "scale");
  v3 = v2;
  objc_msgSend(v1, "size");
  width = v12.width;
  height = v12.height;
  UIGraphicsBeginImageContextWithOptions(v12, 1, v3);
  v6 = (void *)objc_opt_new();
  v7 = objc_retainAutorelease(v1);
  v8 = objc_msgSend(v7, "CGImage");

  objc_msgSend(v6, "setContents:", v8);
  objc_msgSend(v6, "setFrame:", *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8), width, height);
  NTKSpectrumCreateCircularMaskLayer();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setMask:", v9);

  objc_msgSend(v6, "renderInContext:", UIGraphicsGetCurrentContext());
  UIGraphicsGetImageFromCurrentImageContext();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  UIGraphicsEndImageContext();

  return v10;
}

double denormalizeIfNecessary(void *a1, double a2, double a3, double a4, double a5)
{
  double v5;

  v5 = a2;
  if (a4 <= 1.0 && a5 <= 1.0)
    return a2 * NTKPhotosVideoDimensions(a1);
  return v5;
}

id compositionAssetForVideo(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  CMTime v8;
  CMTime start;
  CMTime duration;
  CMTimeRange v11;

  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C8B268]);
  v3 = *MEMORY[0x1E0C8A808];
  objc_msgSend(v2, "addMutableTrackWithMediaType:preferredTrackID:", *MEMORY[0x1E0C8A808], 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "tracksWithMediaType:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "firstObject");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    if (v1)
      objc_msgSend(v1, "duration");
    else
      memset(&duration, 0, sizeof(duration));
    start = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    CMTimeRangeMake(&v11, &start, &duration);
    CMTimeMake(&v8, 0, 1);
    objc_msgSend(v4, "insertTimeRange:ofTrack:atTime:error:", &v11, v6, &v8, 0);
  }
  else
  {

    v2 = 0;
  }

  return v2;
}

id cropCompositionFor(void *a1, void *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8)
{
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  double b;
  double a;
  double d;
  double c;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  unint64_t v31;
  NSObject *v32;
  __int128 v33;
  double x;
  double y;
  double width;
  double height;
  double v38;
  void *v39;
  void *v40;
  void *v41;
  CGFloat v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  float v47;
  __int128 v50;
  CMTime v52;
  CMTime v53;
  CMTimeRange v54;
  CMTime duration;
  CMTimeRange v56;
  CGAffineTransform v57;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v60;
  CGAffineTransform v61;
  CGAffineTransform v62;
  CGAffineTransform v63;
  CGAffineTransform v64;
  void *v65;
  _QWORD v66[2];
  CGRect v67;
  CGRect v68;

  v66[1] = *MEMORY[0x1E0C80C00];
  v13 = a1;
  v14 = a2;
  objc_msgSend(v13, "tracks");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v15, "count") != 1
    || (objc_msgSend(v13, "tracks"),
        v16 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v16, "objectAtIndexedSubscript:", 0),
        v17 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v17, "mediaType"),
        v18 = (void *)objc_claimAutoreleasedReturnValue(),
        v19 = *MEMORY[0x1E0C8A808],
        (objc_msgSend(v18, "isEqualToString:", *MEMORY[0x1E0C8A808]) & 1) == 0))
  {
    cropCompositionFor_cold_2();
  }

  objc_msgSend(v14, "tracksWithMediaType:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v20, "objectAtIndex:", 0);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  v22 = v21;
  v23 = v22;
  memset(&v64, 0, sizeof(v64));
  if (v22)
  {
    objc_msgSend(v22, "preferredTransform");
    b = v64.b;
    a = v64.a;
    d = v64.d;
    c = v64.c;
  }
  else
  {
    d = 0.0;
    c = 0.0;
    b = 0.0;
    a = 0.0;
  }
  if (a == 1.0 && b == 0.0 && c == 0.0 && d == 1.0)
  {
    *(_OWORD *)&v64.tx = 0uLL;
  }
  else if (a == 0.0 && b == -1.0 && c == 1.0 && d == 0.0)
  {
    v64.tx = 0.0;
    objc_msgSend(v23, "naturalSize");
    v64.ty = v28;
  }
  else if (a == -1.0 && b == 0.0 && c == 0.0 && d == -1.0)
  {
    objc_msgSend(v23, "naturalSize");
    v64.tx = v29;
    objc_msgSend(v23, "naturalSize");
    v64.ty = v30;
  }
  else if (a == 0.0 && b == 1.0 && c == -1.0 && d == 0.0)
  {
    objc_msgSend(v23, "naturalSize");
    *(_OWORD *)&v64.tx = v31;
  }
  else
  {
    _NTKLoggingObjectForDomain(6, (uint64_t)"NTKLoggingDomainPhoto");
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      cropCompositionFor_cold_1(&v64);

    v33 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    *(_OWORD *)&v64.a = *MEMORY[0x1E0C9BAA8];
    *(_OWORD *)&v64.c = v33;
    *(_OWORD *)&v64.tx = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  }

  v62 = v64;
  CGAffineTransformInvert(&v63, &v62);
  v67.origin.x = a3;
  v67.origin.y = a4;
  v67.size.width = a5;
  v67.size.height = a6;
  v68 = CGRectApplyAffineTransform(v67, &v63);
  x = v68.origin.x;
  y = v68.origin.y;
  width = v68.size.width;
  height = v68.size.height;
  if (a7 / a5 >= a8 / a6)
    v38 = a7 / a5;
  else
    v38 = a8 / a6;
  v60 = v64;
  memset(&v62, 0, sizeof(v62));
  CGAffineTransformMakeTranslation(&v62, -a3, -a4);
  memset(&v61, 0, sizeof(v61));
  CGAffineTransformMakeScale(&v61, v38, v38);
  t1 = v64;
  t2 = v62;
  CGAffineTransformConcat(&v60, &t1, &t2);
  t2 = v60;
  v57 = v61;
  CGAffineTransformConcat(&t1, &t2, &v57);
  v60 = t1;
  objc_msgSend(v13, "tracks");
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v39, "objectAtIndexedSubscript:", 0);
  v40 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C8B298], "videoCompositionLayerInstructionWithAssetTrack:", v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  *(_OWORD *)&t1.a = *MEMORY[0x1E0CA2E68];
  v50 = *(_OWORD *)&t1.a;
  t1.c = *(CGFloat *)(MEMORY[0x1E0CA2E68] + 16);
  v42 = t1.c;
  objc_msgSend(v41, "setCropRectangle:atTime:", &t1, x, y, width, height);
  t1 = v60;
  *(_OWORD *)&t2.a = v50;
  t2.c = v42;
  objc_msgSend(v41, "setTransform:atTime:", &t1, &t2);
  objc_msgSend(MEMORY[0x1E0C8B290], "videoCompositionInstruction");
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
    objc_msgSend(v13, "duration");
  else
    memset(&duration, 0, sizeof(duration));
  *(_OWORD *)&t1.a = v50;
  t1.c = v42;
  CMTimeRangeMake(&v56, (CMTime *)&t1, &duration);
  v54 = v56;
  objc_msgSend(v43, "setTimeRange:", &v54);
  v66[0] = v41;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v66, 1);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "setLayerInstructions:", v44);

  objc_msgSend(MEMORY[0x1E0C8B288], "videoComposition");
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "setRenderSize:", a7, a8);
  v65 = v43;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v65, 1);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v45, "setInstructions:", v46);

  objc_msgSend(v40, "nominalFrameRate");
  CMTimeMakeWithSeconds(&v53, (float)(1.0 / v47), objc_msgSend(v40, "naturalTimeScale"));
  v52 = v53;
  objc_msgSend(v45, "setFrameDuration:", &v52);

  return v45;
}

void sub_1B74F0FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B74F1D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _BlackcombBackgroundAlphaForEditMode(unint64_t a1)
{
  double result;

  if (a1 > 0xF)
    return 0.2;
  result = 1.0;
  if (((1 << a1) & 0x8401) == 0)
    return 0.2;
  return result;
}

double _BlackcombContentAlphaForEditMode(uint64_t a1)
{
  double result;

  result = 0.2;
  if (a1 != 15)
    result = 1.0;
  if (!a1)
    return 1.0;
  return result;
}

double _BlackcombHandsAlphaForEditMode(uint64_t a1)
{
  BOOL v1;
  double result;

  v1 = a1 == 15 || a1 == 0;
  result = 0.2;
  if (v1)
    return 1.0;
  return result;
}

void sub_1B74F50F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t NTKProtoPigmentReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t result;
  void *v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  BOOL v46;
  uint64_t v47;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
          goto LABEL_42;
        case 2u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
          goto LABEL_42;
        case 3u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + *v4))
          {
            v22 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v22 = 0;
          }
          *(_DWORD *)(a1 + 32) = v22;
          continue;
        case 4u:
          v23 = 0;
          v24 = 0;
          v25 = 0;
          *(_BYTE *)(a1 + 52) |= 4u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            v28 = v27 + 1;
            if (v27 == -1 || v28 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v28;
              v25 |= (unint64_t)(v29 & 0x7F) << v23;
              if (v29 < 0)
              {
                v23 += 7;
                v15 = v24++ >= 9;
                if (v15)
                {
                  v25 = 0;
                  goto LABEL_53;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v25 = 0;
LABEL_53:
          v46 = v25 != 0;
          v47 = 49;
          goto LABEL_62;
        case 5u:
          v30 = 0;
          v31 = 0;
          v32 = 0;
          *(_BYTE *)(a1 + 52) |= 8u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v35;
              v32 |= (unint64_t)(v36 & 0x7F) << v30;
              if (v36 < 0)
              {
                v30 += 7;
                v15 = v31++ >= 9;
                if (v15)
                {
                  v32 = 0;
                  goto LABEL_57;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v32 = 0;
LABEL_57:
          v46 = v32 != 0;
          v47 = 50;
          goto LABEL_62;
        case 6u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 8;
          goto LABEL_42;
        case 8u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 16;
LABEL_42:
          v38 = *(void **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;

          continue;
        case 9u:
          v39 = 0;
          v40 = 0;
          v41 = 0;
          *(_BYTE *)(a1 + 52) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        v44 = v43 + 1;
        if (v43 == -1 || v44 > *(_QWORD *)(a2 + *v4))
          break;
        v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v44;
        v41 |= (unint64_t)(v45 & 0x7F) << v39;
        if ((v45 & 0x80) == 0)
          goto LABEL_59;
        v39 += 7;
        v15 = v40++ >= 9;
        if (v15)
        {
          v41 = 0;
          goto LABEL_61;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_59:
      if (*(_BYTE *)(a2 + *v5))
        v41 = 0;
LABEL_61:
      v46 = v41 != 0;
      v47 = 48;
LABEL_62:
      *(_BYTE *)(a1 + v47) = v46;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

double NTKLargeElementScaleForBreathingFraction(double a1)
{
  return fmin(a1, 1.0) * -0.06 + 1.0;
}

double NTKScaleForBreathingFraction(double a1, double a2)
{
  return 1.0 - fmin(a1, 1.0) * (1.0 - a2);
}

double NTKSmallElementScaleForBreathingFraction(double a1)
{
  return fmin(a1, 1.0) * -0.1 + 1.0;
}

double NTKScaleForRubberBandingFraction(double a1)
{
  return fmin(a1, 1.0) * -0.15 + 1.0;
}

double NTKAlphaForRubberBandingFraction(double a1)
{
  return fmin(a1, 1.0) * -0.5 + 1.0;
}

double NTKFaceEditingTabsTextSize()
{
  void *v0;
  double v1;
  __int128 v3;
  double v4;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _LayoutConstants_51(v0, &v3);
  v1 = v4;

  return v1;
}

void _LayoutConstants_51(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_73);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_73);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_73);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_73, obj);
    _LayoutConstants___previousCLKDeviceVersion_73 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_67(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_73;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_73);
  v10 = *(_OWORD *)&qword_1EF176820;
  a2[4] = xmmword_1EF176810;
  a2[5] = v10;
  v11 = *(_OWORD *)&qword_1EF176840;
  a2[6] = xmmword_1EF176830;
  a2[7] = v11;
  v12 = *(_OWORD *)&qword_1EF1767E0;
  *a2 = _LayoutConstants___constants_18;
  a2[1] = v12;
  v13 = *(_OWORD *)&qword_1EF176800;
  a2[2] = xmmword_1EF1767F0;
  a2[3] = v13;

}

double NTKFaceEditingSwatchDiameter()
{
  void *v0;
  double v1;
  double v3[16];

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _LayoutConstants_51(v0, v3);
  v1 = v3[0];

  return v1;
}

double NTKFaceEditingSwatchSpacing()
{
  void *v0;
  double v1;
  __int128 v3;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _LayoutConstants_51(v0, &v3);
  v1 = *((double *)&v3 + 1);

  return v1;
}

double NTKFaceEditingFullscreenKeylineMargin()
{
  void *v0;
  double v1;
  double v2;
  __int128 v4;
  double v5;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _LayoutConstants_51(v0, &v4);
  v1 = v5;
  v2 = v1 + NTKKeylineWidth() * 0.5;

  return v2;
}

double NTKFaceEditingKeylineLabelInsets()
{
  void *v0;
  __int128 v2;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _LayoutConstants_51(v0, &v2);

  return 0.0;
}

id NTKFaceEditingKeylineLabelFont()
{
  void *v0;
  void *v1;
  int v2;
  void *v3;
  void *v4;
  double *v5;
  double v6;
  void *v7;
  void *v8;
  _OWORD v10[3];
  uint64_t v11;
  _OWORD v12[3];
  uint64_t v13;

  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "objectForKey:", *MEMORY[0x1E0C997E8]);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("he"));
  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
  {
    _LayoutConstants_51(v3, v12);
    v5 = (double *)&v13;
  }
  else
  {
    _LayoutConstants_51(v3, v10);
    v5 = (double *)&v11;
  }
  v6 = *v5;

  objc_msgSend(MEMORY[0x1E0C944D0], "systemFontOfSize:weight:", v6, *MEMORY[0x1E0DC1428]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "CLKFontWithAlternativePunctuation");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

double NTKFaceEditingKeylineLabelContainerSizeForText(void *a1)
{
  id v1;
  double v2;

  v1 = a1;
  NTKFaceEditingKeylineLabelInsets();
  v2 = NTKFaceEditingKeylineLabelSizeForText(v1);

  return v2 + 2.5 + 2.5;
}

double NTKFaceEditingKeylineLabelSizeForText(void *a1)
{
  void *v1;
  id v2;
  id v3;
  id WeakRetained;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  void *v18;
  void *v19;
  double v20;
  double v21;
  uint64_t v23;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v1 = (void *)MEMORY[0x1E0C944B0];
  v2 = a1;
  objc_msgSend(v1, "currentDevice");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  os_unfair_lock_lock((os_unfair_lock_t)&NTKFaceEditingKeylineLabelSizeForText___lock);
  WeakRetained = objc_loadWeakRetained(&NTKFaceEditingKeylineLabelSizeForText___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v5 = WeakRetained;
  v6 = objc_loadWeakRetained(&NTKFaceEditingKeylineLabelSizeForText___cachedDevice);
  if (v3 != v6)
  {

LABEL_5:
    v9 = objc_storeWeak(&NTKFaceEditingKeylineLabelSizeForText___cachedDevice, v3);
    NTKFaceEditingKeylineLabelSizeForText___previousCLKDeviceVersion = objc_msgSend(v3, "version");

    objc_msgSend(v3, "screenCornerRadius");
    v11 = v10;
    v12 = NTKFaceEditingScreenBottomAlignedKeylineLabelBottomPadding();
    NTKFaceEditingKeylineLabelSizeForText_paddingAdjustment = sqrt(v11 * v11 - (v11 - v12) * (v11 - v12));
    goto LABEL_6;
  }
  v7 = objc_msgSend(v3, "version");
  v8 = NTKFaceEditingKeylineLabelSizeForText___previousCLKDeviceVersion;

  if (v7 != v8)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&NTKFaceEditingKeylineLabelSizeForText___lock);
  if (objc_msgSend(v3, "deviceCategory") == 1 || objc_msgSend(v3, "deviceCategory") == 2)
  {
    objc_msgSend(v3, "screenCornerRadius");
    v14 = v13;
  }
  else
  {
    objc_msgSend(v3, "screenCornerRadius");
    v14 = v15 * 1.528665;
  }
  objc_msgSend(v3, "screenBounds");
  v17 = v16 + (v14 - *(double *)&NTKFaceEditingKeylineLabelSizeForText_paddingAdjustment) * -2.0;
  NTKFaceEditingKeylineLabelInsets();
  v23 = *MEMORY[0x1E0DC1138];
  NTKFaceEditingKeylineLabelFont();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v24[0] = v18;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, &v23, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "boundingRectWithSize:options:attributes:context:", 3, v19, 0, v17 + -2.5 + -2.5, 1.79769313e308);
  v21 = v20;

  return ceil(v21);
}

double NTKFaceEditingScreenBottomAlignedKeylineLabelBottomPadding()
{
  void *v0;
  double v1;
  _OWORD v3[5];
  double v4;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _LayoutConstants_51(v0, v3);
  v1 = v4;

  return v1;
}

double NTKFaceEditingComplicationKeylineInsets()
{
  void *v0;
  double v1;
  _OWORD v3[5];
  double v4;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _LayoutConstants_51(v0, v3);
  v1 = v4;

  return v1;
}

double NTKFaceEditingFullscreenTabMargin()
{
  void *v0;
  double v1;
  __int128 v3;
  double v4;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _LayoutConstants_51(v0, &v3);
  v1 = v4;

  return v1;
}

double NTKFaceEditingScreenBottomAlignedKeylineLabelSpacing()
{
  return 2.0;
}

double NTKKeylineCornerRadiusSmall()
{
  void *v0;
  double v1;
  _OWORD v3[4];
  double v4;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _LayoutConstants_51(v0, v3);
  v1 = v4;

  return v1;
}

double NTKKeylineCornerRadiusLarge()
{
  void *v0;
  double v1;
  _OWORD v3[4];
  double v4;

  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  _LayoutConstants_51(v0, v3);
  v1 = v4;

  return v1;
}

id NTKFaceEditingInterpolatedCircularDialPathForDevice(void *a1, double a2)
{
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  double v21;
  double v22;

  v2 = a1;
  objc_msgSend(v2, "screenBounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v22 = v9;
  CLKSizeCenteredInRectForDevice();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  objc_msgSend(v2, "screenCornerRadius");
  v21 = v18;

  if (a2 >= 1.0)
  {
    objc_msgSend(MEMORY[0x1E0DC3508], "bezierPathWithOvalInRect:", v11, v13, v15, v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (a2 <= 0.0)
    {
      objc_msgSend(MEMORY[0x1E0DC3508], "bezierPathWithRoundedRect:cornerRadius:", v22, v4, v6, v8, v21);
    }
    else
    {
      CLKInterpolateBetweenFloatsClipped();
      CLKInterpolateBetweenRects();
      objc_msgSend(MEMORY[0x1E0DC3508], "_bezierPathWithArcRoundedRect:cornerRadius:", *(_QWORD *)&a2);
    }
    v19 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v19;
}

id NTKComplicationStoreServerInterface()
{
  if (NTKComplicationStoreServerInterface_onceToken != -1)
    dispatch_once(&NTKComplicationStoreServerInterface_onceToken, &__block_literal_global_163);
  return (id)NTKComplicationStoreServerInterface_interface;
}

id NTKComplicationStoreClientInterface()
{
  if (NTKComplicationStoreClientInterface_onceToken != -1)
    dispatch_once(&NTKComplicationStoreClientInterface_onceToken, &__block_literal_global_56_1);
  return (id)NTKComplicationStoreClientInterface_interface;
}

void sub_1B74F99D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B74F9B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B74F9C2C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1B74FA1D0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1B74FA44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B74FA730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B74FBF78(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1B74FCE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74FD190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B74FD4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74FD7E8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1B74FDD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74FE1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74FE418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B74FF0B4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1B74FF600(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1B74FF978(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1B74FFD90(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

id _NTKArgonCloudKitClientError(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v8 = *MEMORY[0x1E0CB3388];
    v9[0] = v3;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, &v8, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", NTKArgonCloudKitClientErrorDomain, a1, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void OUTLINED_FUNCTION_1_7(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

void OUTLINED_FUNCTION_4_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x20u);
}

uint64_t OUTLINED_FUNCTION_7_2(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

id NTKUpNextStocksContent(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  id v13;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  v10 = a1;
  NTKClockFaceLocalizedString(CFSTR("UP_NEXT_STOCK_FORMAT"), CFSTR("%1$@ %2$@"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C94540], "textProviderWithFormat:", v11, v10, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v12, "finalize");
  objc_msgSend(v9, "finalize");

  objc_msgSend(v8, "finalize");
  v13 = objc_alloc_init(MEMORY[0x1E0D842D8]);
  objc_msgSend(v13, "setHeaderTextProvider:", v12);
  objc_msgSend(v13, "setDescription1TextProvider:", v8);

  objc_msgSend(v13, "setTintColor:", v7);
  objc_msgSend(v13, "setTintColorAffectsHeader:", 1);
  objc_msgSend(v13, "setStyle:", 1);

  return v13;
}

void sub_1B7506B34(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t NTKFaceLibraryMaxFaceCountForDevice(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  int v4;

  v1 = (objc_class *)MEMORY[0x1E0CB3A28];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithUUIDString:", CFSTR("069990E1-4702-480F-86A8-334D7AA738B0"));
  v4 = objc_msgSend(v2, "supportsCapability:", v3);

  if (v4)
    return 50;
  else
    return 36;
}

id NTKHomeDirectory()
{
  if (NTKHomeDirectory_onceToken != -1)
    dispatch_once(&NTKHomeDirectory_onceToken, &__block_literal_global_165);
  return (id)NTKHomeDirectory___path;
}

id NTKMainBundleDependentCacheDirectory()
{
  if (NTKMainBundleDependentCacheDirectory_onceToken != -1)
    dispatch_once(&NTKMainBundleDependentCacheDirectory_onceToken, &__block_literal_global_52);
  return (id)NTKMainBundleDependentCacheDirectory___path;
}

id NTKActiveFaceSnapshotPath()
{
  void *v0;
  void *v1;

  NTKCacheDirectory();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("ActiveFaceSnapshot@2x.png"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void NTKEnumerateComplicationStates(void *a1)
{
  void (**v1)(id, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    v2 = objc_msgSend(&unk_1E6CAA768, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    if (v2)
    {
      v3 = v2;
      v4 = *(_QWORD *)v7;
      do
      {
        v5 = 0;
        do
        {
          if (*(_QWORD *)v7 != v4)
            objc_enumerationMutation(&unk_1E6CAA768);
          v1[2](v1, objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "integerValue"));
        }
        while (v3 != v5);
        v3 = objc_msgSend(&unk_1E6CAA768, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
      }
      while (v3);
    }
  }

}

uint64_t _NTKBundleIDSourceForDevice(void *a1)
{
  if (!a1)
    return 1;
  if (objc_msgSend(a1, "isRunningGraceOrLater"))
    return 1;
  return 2;
}

__CFString *NTKFaceStyleDescription(uint64_t a1)
{
  unint64_t v1;
  __CFString *v2;

  v1 = NTKEffectiveFaceStyleForFaceStyle(a1);
  if (v1 < 0x2C && ((0xFFFFFFF77FFuLL >> v1) & 1) != 0)
  {
    v2 = off_1E6BDB838[v1];
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("style%d"), v1);
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

uint64_t NTKFaceStyleForString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  if (NTKFaceStyleForString_onceToken != -1)
    dispatch_once(&NTKFaceStyleForString_onceToken, &__block_literal_global_146);
  objc_msgSend((id)NTKFaceStyleForString___faceStyleFromString, "objectForKey:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
    v4 = objc_msgSend(v2, "integerValue");
  else
    v4 = -1;

  return v4;
}

id NTKLocalizedNameForFaceStyle(uint64_t a1)
{
  uint64_t v1;

  v1 = NTKEffectiveFaceStyleForFaceStyle(a1);
  return NTKTitleCaseLocalizedNameForFaceStyle(v1);
}

id NTKTitleCaseLocalizedNameForFaceStyle(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v1 = NTKEffectiveFaceStyleForFaceStyle(a1);
  v2 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("FACE_STYLE_%@"), v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "stringByAppendingString:", CFSTR("_IN_TITLE_CASE"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  NTKFaceStyleDescription(v1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  NTKClockFaceLocalizedString(v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t _NTKCollectionSpecificIndexForFace(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = (void *)MEMORY[0x1E0C944B0];
  v2 = a1;
  objc_msgSend(v1, "currentDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  _NTKCollectionSpecificFaceStylesForDevice(v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "faceDescriptor");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v4, "indexOfObject:", v5);
  return v6;
}

id _NTKCollectionSpecificFaceStylesForDevice(void *a1)
{
  id v1;
  NTKFaceDescriptor *v2;
  NTKFaceDescriptor *v3;
  NTKFaceDescriptor *v4;
  NTKFaceDescriptor *v5;
  NTKFaceDescriptor *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  NTKFaceDescriptor *v16;
  NTKFaceDescriptor *v17;
  NTKFaceDescriptor *v18;
  NTKFaceDescriptor *v19;
  NTKFaceDescriptor *v20;
  NTKFaceDescriptor *v21;
  NTKFaceDescriptor *v22;
  NTKFaceDescriptor *v23;
  uint64_t v24;
  NTKFaceDescriptor *v25;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD v31[4];
  _QWORD v32[5];
  _QWORD v33[5];
  _QWORD v34[5];
  _QWORD v35[14];

  v35[12] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (NTKShowHardwareSpecificFaces())
  {
    if (objc_msgSend(v1, "deviceCategory") != 1)
    {
      NTKFaceDescriptorFromBundleIdentifier(CFSTR("com.apple.NTKPoodleFaceBundle"));
      v2 = (NTKFaceDescriptor *)objc_claimAutoreleasedReturnValue();
      v35[0] = v2;
      NTKFaceDescriptorFromBundleIdentifier(CFSTR("com.apple.NTKHadesFaceBundle"));
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      v35[1] = v30;
      NTKFaceDescriptorFromBundleIdentifier(CFSTR("com.apple.NTKSecretariatFaceBundle"));
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v35[2] = v29;
      NTKFaceDescriptorFromBundleIdentifier(CFSTR("com.apple.NTKBellonaFaceBundle"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      v35[3] = v28;
      NTKFaceDescriptorFromBundleIdentifier(CFSTR("com.apple.NTKSquallFaceBundle"));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v35[4] = v27;
      v17 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 42);
      v35[5] = v17;
      v18 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 14);
      v35[6] = v18;
      v19 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 35);
      v35[7] = v19;
      v20 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 19);
      v35[8] = v20;
      v21 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 219);
      v35[9] = v21;
      v22 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 20);
      v35[10] = v22;
      v23 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 220);
      v35[11] = v23;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v35, 12);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_17:
      goto LABEL_18;
    }
    v2 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 14);
    v34[0] = v2;
    v3 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 19);
    v34[1] = v3;
    v4 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 219);
    v34[2] = v4;
    v5 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 20);
    v34[3] = v5;
    v6 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 220);
    v34[4] = v6;
    v7 = (void *)MEMORY[0x1E0C99D20];
    v8 = v34;
    goto LABEL_15;
  }
  if (objc_msgSend(v1, "collectionType") == 5)
  {
    v9 = (void *)objc_opt_new();
    if (objc_msgSend(v1, "deviceCategory") != 1)
    {
      NTKFaceDescriptorFromBundleIdentifier(CFSTR("com.apple.NTKPoodleFaceBundle"));
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v33[0] = v10;
      NTKFaceDescriptorFromBundleIdentifier(CFSTR("com.apple.NTKHadesFaceBundle"));
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v33[1] = v11;
      NTKFaceDescriptorFromBundleIdentifier(CFSTR("com.apple.NTKSecretariatFaceBundle"));
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v33[2] = v12;
      NTKFaceDescriptorFromBundleIdentifier(CFSTR("com.apple.NTKBellonaFaceBundle"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v33[3] = v13;
      NTKFaceDescriptorFromBundleIdentifier(CFSTR("com.apple.NTKSquallFaceBundle"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v33[4] = v14;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v33, 5);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "addObjectsFromArray:", v15);

      if (objc_msgSend(v1, "isZeusBlack"))
      {
        v16 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 42);
        objc_msgSend(v9, "addObject:", v16);

      }
    }
    v2 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 14);
    objc_msgSend(v9, "addObject:", v2);
    goto LABEL_17;
  }
  if (objc_msgSend(v1, "supportsVictoryFaces"))
  {
    v24 = objc_msgSend(v1, "deviceCategory");
    v25 = [NTKFaceDescriptor alloc];
    if (v24 == 1)
    {
      v2 = -[NTKFaceDescriptor initWithFaceStyle:](v25, "initWithFaceStyle:", 19);
      v31[0] = v2;
      v3 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 219);
      v31[1] = v3;
      v4 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 20);
      v31[2] = v4;
      v5 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 220);
      v31[3] = v5;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v31, 4);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_16:

      goto LABEL_17;
    }
    v2 = -[NTKFaceDescriptor initWithFaceStyle:](v25, "initWithFaceStyle:", 35);
    v32[0] = v2;
    v3 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 19);
    v32[1] = v3;
    v4 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 219);
    v32[2] = v4;
    v5 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 20);
    v32[3] = v5;
    v6 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 220);
    v32[4] = v6;
    v7 = (void *)MEMORY[0x1E0C99D20];
    v8 = v32;
LABEL_15:
    objc_msgSend(v7, "arrayWithObjects:count:", v8, 5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_16;
  }
  v9 = (void *)MEMORY[0x1E0C9AA60];
LABEL_18:

  return v9;
}

uint64_t NTKAddableSortFaces(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v3 = a2;
  objc_msgSend(a1, "name");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "name");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v4, "localizedStandardCompare:", v5);
  return v6;
}

BOOL NTKFaceIsCollectionSpecific(void *a1)
{
  return _NTKCollectionSpecificIndexForFace(a1) != 0x7FFFFFFFFFFFFFFFLL;
}

NTKFaceDescriptor *NTKFaceDescriptorFromFaceStyle(uint64_t a1)
{
  NTKFaceDescriptor *v1;

  if (a1 == 44)
    v1 = 0;
  else
    v1 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", a1);
  return v1;
}

NTKFaceDescriptor *NTKFaceDescriptorFromBundleIdentifier(void *a1)
{
  id v1;
  NTKFaceDescriptor *v2;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
    v2 = -[NTKFaceDescriptor initWithBundleIdentifier:]([NTKFaceDescriptor alloc], "initWithBundleIdentifier:", v1);
  else
    v2 = 0;

  return v2;
}

id _NTKAllAvailableFaceDescriptorsForDevice(void *a1)
{
  id v1;
  uint64_t v2;
  NSObject *v3;
  NTKFaceDescriptor *v4;
  NTKFaceDescriptor *v5;
  NTKFaceDescriptor *v6;
  NTKFaceDescriptor *v7;
  NTKFaceDescriptor *v8;
  NTKFaceDescriptor *v9;
  NTKFaceDescriptor *v10;
  NTKFaceDescriptor *v11;
  void *v12;
  void *v13;
  id v14;
  NTKFaceDescriptor *v15;
  void *v16;
  NTKFaceDescriptor *v17;
  void *v18;
  NTKFaceDescriptor *v19;
  NTKFaceDescriptor *v20;
  NTKFaceDescriptor *v21;
  NTKFaceDescriptor *v22;
  void *v23;
  NTKFaceDescriptor *v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  void *v35;
  NTKFaceDescriptor *v37;
  NTKFaceDescriptor *v38;
  NTKFaceDescriptor *v39;
  NTKFaceDescriptor *v40;
  NTKFaceDescriptor *v41;
  NTKFaceDescriptor *v42;
  NTKFaceDescriptor *v43;
  NTKFaceDescriptor *v44;
  NTKFaceDescriptor *v45;
  NTKFaceDescriptor *v46;
  NTKFaceDescriptor *v47;
  NTKFaceDescriptor *v48;
  NTKFaceDescriptor *v49;
  NTKFaceDescriptor *v50;
  NTKFaceDescriptor *v51;
  NTKFaceDescriptor *v52;
  NTKFaceDescriptor *v53;
  NTKFaceDescriptor *v54;
  NTKFaceDescriptor *v55;
  NTKFaceDescriptor *v56;
  void *v57;
  NTKFaceDescriptor *v58;
  NTKFaceDescriptor *v59;
  NTKFaceDescriptor *v60;
  NTKFaceDescriptor *v61;
  NTKFaceDescriptor *v62;
  NTKFaceDescriptor *v63;
  NTKFaceDescriptor *v64;
  NTKFaceDescriptor *v65;
  NTKFaceDescriptor *v66;
  NTKFaceDescriptor *v67;
  NTKFaceDescriptor *v68;
  NTKFaceDescriptor *v69;
  NTKFaceDescriptor *v70;
  NTKFaceDescriptor *v71;
  NTKFaceDescriptor *v72;
  void *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _QWORD v78[4];
  id v79;
  _BYTE v80[128];
  _QWORD v81[7];
  _QWORD v82[43];

  v82[41] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (NTKInternalBuild(v1, v2) && (CLKRunningInProcess() & 1) == 0)
  {
    _NTKLoggingObjectForDomain(23, (uint64_t)"NTKLoggingDomainFace");
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
      _NTKAllAvailableFaceDescriptorsForDevice_cold_1(v3);

  }
  _NTKCollectionSpecificFaceStylesForDevice(v1);
  v73 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 16);
  v82[0] = v71;
  v69 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 216);
  v82[1] = v69;
  v68 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 17);
  v82[2] = v68;
  v67 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 217);
  v82[3] = v67;
  v66 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 2);
  v82[4] = v66;
  v65 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 202);
  v82[5] = v65;
  v64 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 3);
  v82[6] = v64;
  v63 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 203);
  v82[7] = v63;
  v62 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 23);
  v82[8] = v62;
  v61 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 223);
  v82[9] = v61;
  v60 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 10);
  v82[10] = v60;
  v59 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 210);
  v82[11] = v59;
  v58 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 4);
  v82[12] = v58;
  v56 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 6);
  v82[13] = v56;
  v55 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 18);
  v82[14] = v55;
  v54 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 218);
  v82[15] = v54;
  v53 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 22);
  v82[16] = v53;
  v52 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 26);
  v82[17] = v52;
  v51 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 33);
  v82[18] = v51;
  v50 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 233);
  v82[19] = v50;
  v49 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 25);
  v82[20] = v49;
  v48 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 1);
  v82[21] = v48;
  v47 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 201);
  v82[22] = v47;
  v46 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 21);
  v82[23] = v46;
  v45 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 221);
  v82[24] = v45;
  v44 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 8);
  v82[25] = v44;
  v43 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 7);
  v82[26] = v43;
  v42 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 0);
  v82[27] = v42;
  v41 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 200);
  v82[28] = v41;
  v40 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 12);
  v82[29] = v40;
  v39 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 212);
  v82[30] = v39;
  v38 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 27);
  v82[31] = v38;
  v37 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 227);
  v82[32] = v37;
  v4 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 32);
  v82[33] = v4;
  v5 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 232);
  v82[34] = v5;
  v6 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 31);
  v82[35] = v6;
  v7 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 231);
  v82[36] = v7;
  v8 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 28);
  v82[37] = v8;
  v9 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 228);
  v82[38] = v9;
  v10 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 37);
  v82[39] = v10;
  v11 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 38);
  v82[40] = v11;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v82, 41);
  v57 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  +[NTKFaceBundleManager sharedManager](NTKFaceBundleManager, "sharedManager");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v78[0] = MEMORY[0x1E0C809B0];
  v78[1] = 3221225472;
  v78[2] = ___NTKAllAvailableFaceDescriptorsForDevice_block_invoke_2;
  v78[3] = &unk_1E6BCE7D8;
  v14 = v12;
  v79 = v14;
  objc_msgSend(v13, "enumerateFaceBundlesOnDevice:withBlock:", v1, v78);

  if ((objc_msgSend(v1, "isExplorer") & 1) != 0 || NTKShowHardwareSpecificFaces())
  {
    v15 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 24);
    objc_msgSend(v57, "arrayByAddingObject:", v15);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    v17 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 224);
    objc_msgSend(v16, "arrayByAddingObject:", v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v18 = v57;
  }
  if (objc_msgSend(v1, "deviceCategory") != 1)
  {
    v72 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 34);
    v81[0] = v72;
    v70 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 30);
    v81[1] = v70;
    v19 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 29);
    v81[2] = v19;
    v20 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 41);
    v81[3] = v20;
    v21 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 36);
    v81[4] = v21;
    v22 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 39);
    v81[5] = v22;
    v23 = v18;
    v24 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 40);
    v81[6] = v24;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v81, 7);
    v25 = v14;
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "arrayByAddingObjectsFromArray:", v26);
    v27 = objc_claimAutoreleasedReturnValue();

    v14 = v25;
    v18 = (void *)v27;
  }
  v28 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v28, "addObjectsFromArray:", v73);
  objc_msgSend(v28, "addObjectsFromArray:", v18);
  objc_msgSend(v28, "addObjectsFromArray:", v14);
  v29 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v30 = v28;
  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v74, v80, 16);
  if (v31)
  {
    v32 = v31;
    v33 = *(_QWORD *)v75;
    do
    {
      for (i = 0; i != v32; ++i)
      {
        if (*(_QWORD *)v75 != v33)
          objc_enumerationMutation(v30);
        v35 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * i);
        if (objc_msgSend(v35, "isAvailableForDevice:", v1))
          objc_msgSend(v29, "addObject:", v35);
      }
      v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v74, v80, 16);
    }
    while (v32);
  }

  return v29;
}

id NTKFaceDescriptorsNeedingPrewarm(void *a1)
{
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  void *v12;
  int v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "deviceCategory") == 1)
  {
    v2 = (void *)MEMORY[0x1E0C9AA60];
  }
  else
  {
    v3 = _NTKAllAvailableFaceDescriptorsForDevice(v1);
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v16 != v8)
            objc_enumerationMutation(v5);
          v10 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
          v11 = NTKEffectiveFaceStyleForFaceStyle(objc_msgSend(v10, "faceStyle", (_QWORD)v15));
          if (v11 == 234 || v11 == 44)
          {
            objc_msgSend(v10, "bundleIdentifier");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v13 = objc_msgSend(v12, "isEqualToString:", CFSTR("com.apple.NTKSnowglobeFaceBundle"));

            if (v13)
              objc_msgSend(v4, "addObject:", v10);
          }
        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v7);
    }

    v2 = (void *)objc_msgSend(v4, "copy");
  }

  return v2;
}

id NTKDefaultLibraryFaceDescriptors(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  __CFString *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  NTKFaceDescriptor *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)objc_opt_new();
  if (!objc_msgSend(v1, "isTinker"))
  {
    if (objc_msgSend(v1, "collectionType") != 6)
    {
      v5 = objc_msgSend(v1, "collectionType");
      v6 = objc_msgSend(v1, "deviceCategory");
      if (v5 == 5)
      {
        if (v6 == 4)
          v4 = CFSTR("com.apple.NTKSquallFaceBundle");
        else
          v4 = CFSTR("com.apple.NTKBellonaFaceBundle");
      }
      else if (v6 == 4)
      {
        v4 = CFSTR("com.apple.NTKFoghornFaceBundle");
      }
      else if (objc_msgSend(v1, "productFamilyType") == 5)
      {
        v4 = CFSTR("com.apple.NTKKuiperFaceBundle");
      }
      else if (objc_msgSend(v1, "productFamilyType") == 14)
      {
        v4 = CFSTR("com.apple.NTKKapacitorFaceBundle");
      }
      else
      {
        v7 = objc_msgSend(v1, "materialType") - 3;
        if (v7 > 0xE)
          v4 = CFSTR("com.apple.NTKCrosswindFaceBundle");
        else
          v4 = off_1E6BDB998[v7];
      }
      goto LABEL_20;
    }
    goto LABEL_6;
  }
  NTKFaceDescriptorFromBundleIdentifier(CFSTR("com.apple.NTKSnowglobeFaceBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v3);

  if (objc_msgSend(v1, "collectionType") == 6)
  {
LABEL_6:
    v4 = CFSTR("com.apple.NTKMagmaFaceBundle");
    goto LABEL_20;
  }
  if (objc_msgSend(v1, "collectionType") != 5)
    goto LABEL_21;
  v4 = CFSTR("com.apple.NTKPoodleFaceBundle");
LABEL_20:
  NTKFaceDescriptorFromBundleIdentifier(v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "addObject:", v8);

LABEL_21:
  v9 = (void *)objc_opt_new();
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v10 = v2;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v12; ++i)
      {
        if (*(_QWORD *)v19 != v13)
          objc_enumerationMutation(v10);
        v15 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
        if (objc_msgSend(v15, "isAvailableForDevice:", v1, (_QWORD)v18))
          objc_msgSend(v9, "addObject:", v15);
      }
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v12);
  }

  if (!objc_msgSend(v9, "count"))
  {
    v16 = -[NTKFaceDescriptor initWithFaceStyle:]([NTKFaceDescriptor alloc], "initWithFaceStyle:", 4);
    objc_msgSend(v9, "addObject:", v16);

  }
  return v9;
}

uint64_t _NTKDefaultLibrarySelectedFace(void *a1)
{
  id v1;
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  v2 = objc_msgSend(v1, "isTinker");
  v3 = objc_msgSend(v1, "collectionType");
  if (!v2)
  {
    if (v3 == 5)
    {
      v6 = 0;
      goto LABEL_14;
    }
    v7 = objc_msgSend(v1, "collectionType");
    v8 = objc_msgSend(v1, "deviceCategory");
    if (v7 == 6)
    {
      v6 = v8 == 1;
      goto LABEL_14;
    }
    if (v8 != 1)
    {
      if (objc_msgSend(v1, "materialType") == 9 || objc_msgSend(v1, "materialType") == 12)
      {
        v6 = 4;
        goto LABEL_14;
      }
      v4 = objc_msgSend(v1, "materialType") == 13;
      v5 = 3;
      goto LABEL_4;
    }
LABEL_13:
    v6 = 2;
    goto LABEL_14;
  }
  if (v3 == 5)
    goto LABEL_13;
  v4 = objc_msgSend(v1, "collectionType") == 6;
  v5 = 1;
LABEL_4:
  if (v4)
    v6 = v5 + 1;
  else
    v6 = v5;
LABEL_14:

  return v6;
}

uint64_t NTKDefaultLibrarySelectedFace(void *a1)
{
  id v1;
  id WeakRetained;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v1 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&NTKDefaultLibrarySelectedFace___lock);
  WeakRetained = objc_loadWeakRetained(&NTKDefaultLibrarySelectedFace___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v3 = WeakRetained;
  v4 = objc_loadWeakRetained(&NTKDefaultLibrarySelectedFace___cachedDevice);
  if (v4 != v1)
  {

LABEL_5:
    v7 = objc_storeWeak(&NTKDefaultLibrarySelectedFace___cachedDevice, v1);
    NTKDefaultLibrarySelectedFace___previousCLKDeviceVersion = objc_msgSend(v1, "version");

    NTKDefaultLibrarySelectedFace_defaultLibrarySelectedFace = _NTKDefaultLibrarySelectedFace(v1);
    goto LABEL_6;
  }
  v5 = objc_msgSend(v1, "version");
  v6 = NTKDefaultLibrarySelectedFace___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&NTKDefaultLibrarySelectedFace___lock);
  v8 = NTKDefaultLibrarySelectedFace_defaultLibrarySelectedFace;

  return v8;
}

id NTKNewToFortuneFaceStyles()
{
  if (NTKNewToFortuneFaceStyles_onceToken != -1)
    dispatch_once(&NTKNewToFortuneFaceStyles_onceToken, &__block_literal_global_379);
  return (id)NTKNewToFortuneFaceStyles___fortuneStyles;
}

id NTKNewToGloryFaceStyles()
{
  if (NTKNewToGloryFaceStyles_onceToken != -1)
    dispatch_once(&NTKNewToGloryFaceStyles_onceToken, &__block_literal_global_382);
  return (id)NTKNewToGloryFaceStyles___newStyles;
}

id NTKNewToGloryFFaceStyles()
{
  if (NTKNewToGloryFFaceStyles_onceToken != -1)
    dispatch_once(&NTKNewToGloryFFaceStyles_onceToken, &__block_literal_global_385);
  return (id)NTKNewToGloryFFaceStyles___newStyles;
}

id NTKNewToGraceFaceStyles()
{
  if (NTKNewToGraceFaceStyles_onceToken != -1)
    dispatch_once(&NTKNewToGraceFaceStyles_onceToken, &__block_literal_global_388);
  return (id)NTKNewToGraceFaceStyles___newStyles;
}

id NTKMigratableFaceStyles()
{
  if (NTKMigratableFaceStyles_onceToken != -1)
    dispatch_once(&NTKMigratableFaceStyles_onceToken, &__block_literal_global_391);
  return (id)NTKMigratableFaceStyles___migratableStyles;
}

uint64_t NTKComplicationFamilyIsPublic(unint64_t a1)
{
  return (a1 < 0xD) & (0x1FDFu >> a1);
}

const __CFString *NTKComplicationFamilyDescription(uint64_t a1)
{
  const __CFString *result;

  if (*MEMORY[0x1E0C93E90] == a1)
    return CFSTR("circular-medium");
  result = CFSTR("modular-large");
  switch(a1)
  {
    case 0:
      result = CFSTR("modular-small");
      break;
    case 1:
      return result;
    case 2:
      result = CFSTR("utilitarian-small");
      break;
    case 3:
      result = CFSTR("utilitarian-large");
      break;
    case 4:
      result = CFSTR("circular-small");
      break;
    case 5:
LABEL_7:
      result = CFSTR("unknown family");
      break;
    case 6:
      result = CFSTR("utilitarian-small-flat");
      break;
    case 7:
      result = CFSTR("extra-large");
      break;
    case 8:
      result = CFSTR("signature-corner");
      break;
    case 9:
      result = CFSTR("signature-bezel");
      break;
    case 10:
      result = CFSTR("signature-circular");
      break;
    case 11:
      result = CFSTR("signature-rectangular");
      break;
    case 12:
      result = CFSTR("signature-extra-large");
      break;
    default:
      switch(a1)
      {
        case 'd':
          result = CFSTR("date");
          break;
        case 'e':
          result = CFSTR("monogram");
          break;
        case 'f':
          result = CFSTR("zeus-upper");
          break;
        case 'g':
          result = CFSTR("zeus-lower");
          break;
        case 'h':
          result = CFSTR("util-large-narrow");
          break;
        default:
          goto LABEL_7;
      }
      break;
  }
  return result;
}

id _NTKBundleIDToComplicationTypesMappingCompanion()
{
  if (_NTKBundleIDToComplicationTypesMappingCompanion_onceToken != -1)
    dispatch_once(&_NTKBundleIDToComplicationTypesMappingCompanion_onceToken, &__block_literal_global_432);
  return (id)_NTKBundleIDToComplicationTypesMappingCompanion_bundleIDToComplicationTypesMapping;
}

id _NTKComplicationTypesToBundleIDMappingCompanion()
{
  if (_NTKComplicationTypesToBundleIDMappingCompanion_onceToken != -1)
    dispatch_once(&_NTKComplicationTypesToBundleIDMappingCompanion_onceToken, &__block_literal_global_645_0);
  return (id)_NTKComplicationTypesToBundleIDMappingCompanion_complicationTypesTobundleIDMapping;
}

id _NTKComplicationTypesToBundleIDMappingGizmo()
{
  id WeakRetained;
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;

  os_unfair_lock_lock((os_unfair_lock_t)&_NTKComplicationTypesToBundleIDMappingGizmo___lock);
  WeakRetained = objc_loadWeakRetained(&_NTKComplicationTypesToBundleIDMappingGizmo___cachedDevice);
  if (!WeakRetained)
    goto LABEL_5;
  v1 = WeakRetained;
  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_loadWeakRetained(&_NTKComplicationTypesToBundleIDMappingGizmo___cachedDevice);
  if (v2 != v3)
  {

LABEL_5:
    objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak(&_NTKComplicationTypesToBundleIDMappingGizmo___cachedDevice, v7);

    v8 = objc_loadWeakRetained(&_NTKComplicationTypesToBundleIDMappingGizmo___cachedDevice);
    _NTKComplicationTypesToBundleIDMappingGizmo___previousCLKDeviceVersion = objc_msgSend(v8, "version");

    objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    ___NTKComplicationTypesToBundleIDMappingGizmo_block_invoke();

    goto LABEL_6;
  }
  objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "version");
  v6 = _NTKComplicationTypesToBundleIDMappingGizmo___previousCLKDeviceVersion;

  if (v5 != v6)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_NTKComplicationTypesToBundleIDMappingGizmo___lock);
  return (id)_NTKComplicationTypesToBundleIDMappingGizmo_complicationTypesTobundleIDMapping;
}

id NTKComplicationTypesToBundleIDMappingForDevice(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (v1 && !objc_msgSend(v1, "isRunningGraceOrLater"))
  {
    _NTKComplicationTypesToBundleIDMappingCompanion();
    v3 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    _NTKComplicationTypesToBundleIDMappingGizmo();
    v3 = objc_claimAutoreleasedReturnValue();
  }
  v4 = (void *)v3;

  return v4;
}

id NTKComplicationTypesForDeviceWithBundleID(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  NTKBundleIDToComplicationTypesMappingForDevice(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

double NTKDefaultCornerComplicationScaleForFullscreenOpaqueFaceForDevice()
{
  return 0.9;
}

id NTKRestrictedComplicationsForDevice(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  NTKBundleIDToComplicationTypesMappingForDevice(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_alloc_init(MEMORY[0x1E0CB3788]);
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v22 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        if (NTKIsSystemAppRestricted(v9))
        {
          objc_msgSend(v4, "objectForKey:", v9);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = 0u;
          v18 = 0u;
          v19 = 0u;
          v20 = 0u;
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
          if (v11)
          {
            v12 = v11;
            v13 = *(_QWORD *)v18;
            do
            {
              for (j = 0; j != v12; ++j)
              {
                if (*(_QWORD *)v18 != v13)
                  objc_enumerationMutation(v10);
                objc_msgSend(v3, "addIndex:", objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * j), "unsignedIntegerValue"));
              }
              v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
            }
            while (v12);
          }

        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v6);
  }

  if ((objc_msgSend(v1, "isEcgPhoneComplicationEnabled") & 1) == 0)
    objc_msgSend(v3, "addIndex:", 46);
  if ((objc_msgSend(v1, "isRadioPhoneComplicationEnabled") & 1) == 0)
    objc_msgSend(v3, "addIndex:", 35);
  v15 = (void *)objc_msgSend(v3, "copy");

  return v15;
}

uint64_t NTKIsValidSingleComplicationType(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  if (!a1)
    return 1;
  NTKAllComplicationTypes();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "containsIndex:", a1);

  return v3;
}

id NTKAllComplicationTypes()
{
  if (NTKAllComplicationTypes_onceToken != -1)
    dispatch_once(&NTKAllComplicationTypes_onceToken, &__block_literal_global_1066);
  return (id)NTKAllComplicationTypes_allTypes;
}

uint64_t NTKEnumerateComplicationTypes(void *a1, const char *a2)
{
  return objc_msgSend(a1, "enumerateIndexesUsingBlock:", a2);
}

__CFString *NTKComplicationTypeDescription(void *a1)
{
  id v1;
  void *v2;
  __CFString *v3;
  void *v4;
  _QWORD v6[4];
  __CFString *v7;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "count") && (objc_msgSend(v2, "containsIndex:", 0) & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __NTKComplicationTypeDescription_block_invoke;
    v6[3] = &unk_1E6BD1F60;
    v3 = v4;
    v7 = v3;
    objc_msgSend(v2, "enumerateIndexesUsingBlock:", v6);

  }
  else
  {
    v3 = CFSTR("Off");
  }

  return v3;
}

uint64_t NTKPrintableComplicationType(uint64_t a1)
{
  if (((a1 != 0) & NTKIsValidSingleComplicationType(a1)) != 0)
    return a1;
  else
    return -1;
}

id _NTKClockFaceLocalizedStringForKeyWithFallback(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v5)
    goto LABEL_5;
  NTKClockFaceLocalizedString(v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "isEqualToString:", v5))
  {

LABEL_5:
    NTKClockFaceLocalizedString(v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (!v8)
    goto LABEL_5;
LABEL_6:

  return v8;
}

id _NTKCompanionClockFaceLocalizedStringForKeyWithFallback(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v5)
    goto LABEL_5;
  NTKCompanionClockFaceLocalizedString(v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "isEqualToString:", v5))
  {

LABEL_5:
    NTKCompanionClockFaceLocalizedString(v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  if (!v8)
    goto LABEL_5;
LABEL_6:

  return v8;
}

id _NTKComplicationTypeLocalizedLabelTextFromTypeKey(void *a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "hasPrefix:", CFSTR("HIDDEN_"));
  v6 = (void *)MEMORY[0x1E0CB3940];
  if (v5)
  {
    objc_msgSend(v3, "substringFromIndex:", objc_msgSend(CFSTR("HIDDEN_"), "length"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringWithFormat:", CFSTR("FALL_HIDDEN_COMPLICATION_TYPE_EDIT_LABEL_%@"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
LABEL_3:
      objc_msgSend(v8, "stringByAppendingString:", v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("COMPLICATION_TYPE_EDIT_LABEL_%@"), v3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
      goto LABEL_3;
  }
  v9 = 0;
LABEL_6:
  objc_msgSend(v9, "stringByAppendingString:", CFSTR("_COMPANION"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringByAppendingString:", CFSTR("_COMPANION"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  _NTKCompanionClockFaceLocalizedStringForKeyWithFallback(v10, v11, CFSTR("Editing label for complication type"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v12)
  {
    v14 = v12;
  }
  else
  {
    _NTKClockFaceLocalizedStringForKeyWithFallback(v9, v8, CFSTR("Editing label for complication type"));
    v14 = (id)objc_claimAutoreleasedReturnValue();
  }
  v15 = v14;

  return v15;
}

__CFString *_NTKComplicationTypeLocalizedLabelText(uint64_t a1, void *a2)
{
  id v3;
  __CFString *v4;
  const __CFString *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  int v9;

  v3 = a2;
  v4 = 0;
  v5 = CFSTR("Connectivity");
  v6 = CFSTR("Internal: Lux Viewer");
  switch(a1)
  {
    case 0:
      v4 = CFSTR("OFF");
      goto LABEL_50;
    case 1:
      v4 = CFSTR("DATE");
      goto LABEL_50;
    case 2:
      v4 = CFSTR("ALARM");
      goto LABEL_50;
    case 3:
      v4 = CFSTR("TIMER");
      goto LABEL_50;
    case 4:
      v4 = CFSTR("STOPWATCH");
      goto LABEL_50;
    case 5:
      v4 = CFSTR("WORLD_CLOCK");
      goto LABEL_50;
    case 6:
      v4 = CFSTR("FINDMY");
      goto LABEL_50;
    case 7:
      v4 = CFSTR("WELLNESS");
      goto LABEL_50;
    case 8:
      v4 = CFSTR("NEXT_EVENT");
      goto LABEL_50;
    case 10:
      v4 = CFSTR("WEATHER");
      goto LABEL_50;
    case 11:
      v4 = CFSTR("MOON_PHASE");
      goto LABEL_50;
    case 12:
      v4 = CFSTR("SUNRISE");
      goto LABEL_50;
    case 13:
      v4 = CFSTR("BATTERY");
      goto LABEL_50;
    case 14:
      v4 = CFSTR("MONOGRAM");
      goto LABEL_50;
    case 15:
      v4 = CFSTR("HEARTRATE");
      goto LABEL_50;
    case 16:
      v4 = CFSTR("LUNAR_DATE");
      goto LABEL_50;
    case 17:
      v4 = CFSTR("MUSIC");
      goto LABEL_50;
    case 18:
      v4 = CFSTR("WORKOUT");
      goto LABEL_50;
    case 19:
      objc_msgSend(MEMORY[0x1E0C944B0], "currentDevice");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("2A51E7B3-1B80-4981-9F09-F725BC3A8065"));
      v9 = objc_msgSend(v7, "supportsCapability:", v8);

      if (v9)
        v4 = CFSTR("MIND");
      else
        v4 = CFSTR("HUMMINGBIRD");
      goto LABEL_50;
    case 20:
      v4 = CFSTR("REMINDERS");
      goto LABEL_50;
    case 21:
      v4 = CFSTR("REMOTE");
      goto LABEL_50;
    case 22:
      v4 = CFSTR("WEATHER_CONDITIONS");
      goto LABEL_50;
    case 23:
      v4 = CFSTR("MESSAGES");
      goto LABEL_50;
    case 24:
      v4 = CFSTR("PHONE");
      goto LABEL_50;
    case 25:
      v4 = CFSTR("MAPS");
      goto LABEL_50;
    case 26:
      v4 = CFSTR("NEWS");
      goto LABEL_50;
    case 27:
      v4 = CFSTR("MAIL");
      goto LABEL_50;
    case 28:
      v4 = CFSTR("HOME");
      goto LABEL_50;
    case 29:
      v4 = CFSTR("SIRI");
      goto LABEL_50;
    case 32:
      goto LABEL_51;
    case 33:
      v4 = CFSTR("TIN_CAN");
      goto LABEL_50;
    case 34:
      v4 = CFSTR("NOW_PLAYING");
      goto LABEL_50;
    case 35:
      v4 = CFSTR("RADIO");
      goto LABEL_50;
    case 36:
      v4 = CFSTR("WEATHER_AIR_QUALITY");
      goto LABEL_50;
    case 37:
      v4 = CFSTR("PEOPLE");
      goto LABEL_50;
    case 38:
      v4 = CFSTR("SOLAR");
      goto LABEL_50;
    case 39:
      v4 = CFSTR("ASTRONOMY_EARTH");
      goto LABEL_50;
    case 40:
      v4 = CFSTR("ASTRONOMY_LUNA");
      goto LABEL_50;
    case 41:
      v4 = CFSTR("ASTRONOMY_ORRERY");
      goto LABEL_50;
    case 42:
      v4 = CFSTR("PODCAST");
      goto LABEL_50;
    case 43:
      v4 = CFSTR("WEATHER_UV_INDEX");
      goto LABEL_50;
    case 44:
      v4 = CFSTR("WEATHER_WIND");
      goto LABEL_50;
    case 45:
      v4 = CFSTR("DIGITAL_TIME");
      goto LABEL_50;
    case 46:
      v4 = CFSTR("ECG");
      goto LABEL_50;
    case 50:
      goto LABEL_52;
    case 52:
      v6 = CFSTR("Internal: Watch Build Vers");
      goto LABEL_52;
    case 53:
      v6 = CFSTR("Internal: Phone Build Vers");
      goto LABEL_52;
    case 57:
      v4 = CFSTR("DIGITAL_TIME_NO_SEC");
      goto LABEL_50;
    case 58:
      v6 = CFSTR("Internal: Nits Viewer");
      goto LABEL_52;
    default:
LABEL_50:
      _NTKComplicationTypeLocalizedLabelTextFromTypeKey(v4, v3);
      v5 = (const __CFString *)objc_claimAutoreleasedReturnValue();
LABEL_51:
      v6 = (__CFString *)v5;
LABEL_52:

      return v6;
  }
}

__CFString *NTKComplicationTypeLocalizedLabelText(uint64_t a1)
{
  return _NTKComplicationTypeLocalizedLabelText(a1, 0);
}

__CFString *NTKComplicationTypeRichLocalizedLabelText(uint64_t a1)
{
  return _NTKComplicationTypeLocalizedLabelText(a1, CFSTR("_RICH"));
}

const __CFString *NTKComplicationDuetIdentifier(unint64_t a1)
{
  if (a1 <= 0x2C)
  {
    if (((1 << a1) & 0x181000400400) != 0)
      return CFSTR("com.apple.weather.watchapp");
    if (a1 == 17)
      return CFSTR("com.apple.NanoMusic");
    if (a1 == 20)
      return CFSTR("com.apple.reminders");
  }
  if (a1 == 8)
    return CFSTR("com.apple.glances.NanoCalendar");
  else
    return 0;
}

id NTKComplicationTypeLocalizedLabelTextFromTypeKey(void *a1)
{
  return _NTKComplicationTypeLocalizedLabelTextFromTypeKey(a1, 0);
}

BOOL NTKIsRichComplicationFamily(uint64_t a1)
{
  return (unint64_t)(a1 - 8) < 5;
}

id NTKLocalizedNameForCustomEditMode(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = a1 - 1;
  if ((unint64_t)(a1 - 1) <= 0x12 && ((0x77601u >> v1) & 1) != 0)
  {
    -[__CFString stringByAppendingString:](off_1E6BDBBE0[v1], "stringByAppendingString:", CFSTR("_COMPANION"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    NTKCompanionClockFaceLocalizedString(v3, CFSTR("edit mode"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void NTKEnumerateDateStyles(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  unint64_t v5;
  int v6;
  _QWORD v7[2];
  uint64_t (*v8)(uint64_t);
  void *v9;
  id v10;
  unsigned __int8 v11;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v8 = __NTKEnumerateDateStyles_block_invoke;
  v9 = &unk_1E6BDB4B8;
  v4 = v3;
  v10 = v4;
  v11 = 0;
  v5 = 1;
  do
  {
    if ((v5 & a1) != 0)
    {
      ((void (*)(_QWORD *, unint64_t, unsigned __int8 *))v8)(v7, v5, &v11);
      v6 = v11;
    }
    else
    {
      v6 = 0;
    }
    if (v5 > 0x800)
      break;
    v5 *= 2;
  }
  while (!v6);

}

uint64_t NTKComplicationAnimationForDates(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = 0;
  if (v3 && v4)
  {
    if ((objc_msgSend(v3, "isEqualToDate:", v4) & 1) != 0)
    {
      v6 = 0;
    }
    else
    {
      objc_msgSend(v3, "laterDate:", v5);
      v7 = (id)objc_claimAutoreleasedReturnValue();
      if (v7 == v3)
        v6 = 2;
      else
        v6 = 1;

    }
  }

  return v6;
}

uint64_t NTKIsPPTDevice()
{
  if (NTKIsPPTDevice_onceToken != -1)
    dispatch_once(&NTKIsPPTDevice_onceToken, &__block_literal_global_914);
  return NTKIsPPTDevice_isPPTDevice;
}

uint64_t NTKIsUnitTests()
{
  void *v0;
  void *v1;
  uint64_t v2;

  objc_msgSend(MEMORY[0x1E0CB3898], "processInfo");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "processName");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("xctest"));

  return v2;
}

__CFString *NTKReportingValueForFace(void *a1)
{
  id v1;
  uint64_t v2;
  __CFString *v3;

  v1 = a1;
  v2 = objc_msgSend(v1, "faceStyle");
  v3 = 0;
  switch(v2)
  {
    case 0:
      v3 = CFSTR("utility");
      break;
    case 1:
      v3 = CFSTR("simple");
      break;
    case 2:
      v3 = CFSTR("chronograph");
      break;
    case 3:
      v3 = CFSTR("color");
      break;
    case 4:
      v3 = CFSTR("modular");
      break;
    case 5:
      v3 = CFSTR("photo");
      break;
    case 6:
      v3 = CFSTR("motion");
      break;
    case 7:
      v3 = CFSTR("timelapse");
      break;
    case 8:
      v3 = CFSTR("solar");
      break;
    case 9:
      v3 = CFSTR("astronomy");
      break;
    case 10:
      v3 = CFSTR("mickey");
      break;
    case 11:
    case 15:
      break;
    case 12:
      v3 = CFSTR("xlarge");
      break;
    case 13:
      v3 = CFSTR("album");
      break;
    case 14:
      v3 = CFSTR("zeus");
      break;
    case 16:
      v3 = CFSTR("activity-analog");
      break;
    case 17:
      v3 = CFSTR("activity-digital");
      break;
    case 18:
      v3 = CFSTR("numerals");
      break;
    case 19:
      v3 = CFSTR("victory-analog");
      break;
    case 20:
      v3 = CFSTR("victory-digital");
      break;
    case 21:
      v3 = CFSTR("up-next");
      break;
    case 22:
      v3 = CFSTR("photos");
      break;
    case 23:
      v3 = CFSTR("kaleidoscope");
      break;
    case 24:
      v3 = CFSTR("explorer");
      break;
    case 25:
      v3 = CFSTR("infinity");
      break;
    case 26:
      v3 = CFSTR("pride");
      break;
    case 27:
      v3 = CFSTR("breathe");
      break;
    case 28:
      v3 = CFSTR("smoke");
      break;
    case 29:
      v3 = CFSTR("whistler-digital");
      break;
    case 30:
      v3 = CFSTR("whistler-analog");
      break;
    case 31:
      v3 = CFSTR("metallic");
      break;
    case 32:
      v3 = CFSTR("fire-water");
      break;
    case 33:
      v3 = CFSTR("pride-analog");
      break;
    case 34:
      v3 = CFSTR("whistler-subdials");
      break;
    case 35:
      v3 = CFSTR("olympus");
      break;
    case 36:
      v3 = CFSTR("sidereal");
      break;
    case 37:
      v3 = CFSTR("big-numerals-digital");
      break;
    case 38:
      v3 = CFSTR("big-numerals-analog");
      break;
    case 39:
      v3 = CFSTR("california");
      break;
    case 40:
      v3 = CFSTR("blackcomb");
      break;
    case 41:
      v3 = CFSTR("spectrum-analog");
      break;
    case 42:
      v3 = CFSTR("whitetank");
      break;
    case 43:
      v3 = CFSTR("schooltime");
      break;
    case 44:
      objc_msgSend(v1, "bundleIdentifier");
      v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      switch(v2)
      {
        case 200:
          v3 = CFSTR("utility-r");
          break;
        case 201:
          v3 = CFSTR("simple-r");
          break;
        case 202:
          v3 = CFSTR("chronograph-r");
          break;
        case 203:
          v3 = CFSTR("color-r");
          break;
        case 210:
          v3 = CFSTR("mickey-r");
          break;
        case 212:
          v3 = CFSTR("xlarge-r");
          break;
        case 216:
          v3 = CFSTR("activity-analog-r");
          break;
        case 217:
          v3 = CFSTR("activity-digital-r");
          break;
        case 218:
          v3 = CFSTR("numerals-r");
          break;
        case 219:
          v3 = CFSTR("victory-analog-r");
          break;
        case 220:
          v3 = CFSTR("victory-digital-r");
          break;
        case 221:
          v3 = CFSTR("up-next-r");
          break;
        case 223:
          v3 = CFSTR("kaleidoscope-r");
          break;
        case 224:
          v3 = CFSTR("explorer-r");
          break;
        case 227:
          v3 = CFSTR("breathe-r");
          break;
        case 228:
          v3 = CFSTR("smoke-r");
          break;
        case 231:
          v3 = CFSTR("metallic-r");
          break;
        case 232:
          v3 = CFSTR("fire-water-r");
          break;
        case 233:
          v3 = CFSTR("pride-analog-r");
          break;
        default:
          goto LABEL_65;
      }
      break;
  }
LABEL_65:

  return v3;
}

id NTKAnalyticsValueForFace(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (objc_msgSend(v1, "faceStyle") == 44)
    objc_msgSend(v1, "analyticsIdentifier");
  else
    NTKReportingValueForFace(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

const __CFString *_NTKReportingValueForComplicationType(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x38)
    return CFSTR("Unknown Complication");
  else
    return off_1E6BDBC78[a1 - 1];
}

id NTKReportingValueForComplication(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v1 = a1;
  _NTKReportingValueForComplicationType(objc_msgSend(v1, "complicationType"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "complication");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    +[NTKBundleComplicationManager sharedManager](NTKBundleComplicationManager, "sharedManager");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_msgSend(v4, "dataSourceClassForBundleComplication:", v1);

    objc_msgSend(v5, "legacyNTKComplicationType");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v6;
    if (v6)
    {
      _NTKReportingValueForComplicationType(objc_msgSend(v6, "unsignedIntegerValue"));
      v8 = v2;
      v2 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(v3, "bundleIdentifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v8, "length"))
      {
        objc_msgSend(v2, "stringByAppendingString:", v8);
        v9 = objc_claimAutoreleasedReturnValue();

        v2 = (void *)v9;
      }
    }

  }
  return v2;
}

uint64_t NTKComplicationTypeV2fromV1Encoding(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  result = 0;
  if (a1 >= 0x8000)
  {
    if (a1 < 0x400000)
    {
      v21 = 21;
      v22 = 22;
      if (a1 != 0x200000)
        v22 = 0;
      if (a1 != 0x100000)
        v21 = v22;
      v23 = 19;
      v24 = 20;
      if (a1 != 0x80000)
        v24 = 0;
      if (a1 != 0x40000)
        v23 = v24;
      if (a1 < 0x100000)
        v21 = v23;
      v25 = 16;
      v26 = 17;
      v27 = 18;
      if (a1 != 0x20000)
        v27 = 0;
      if (a1 != 0x10000)
        v26 = v27;
      if (a1 != 0x8000)
        v25 = v26;
      if (a1 < 0x40000)
        return v25;
      else
        return v21;
    }
    else
    {
      v3 = 31;
      if (a1 != 0x40000000)
        v3 = 0;
      if (a1 == 0x10000000)
        v4 = 29;
      else
        v4 = v3;
      v5 = 28;
      if (a1 != 0x8000000)
        v5 = 0;
      if (a1 == 0x4000000)
        v6 = 27;
      else
        v6 = v5;
      if (a1 <= 0xFFFFFFF)
        v7 = v6;
      else
        v7 = v4;
      v8 = 26;
      if (a1 != 0x2000000)
        v8 = 0;
      if (a1 == 0x1000000)
        v9 = 25;
      else
        v9 = v8;
      v10 = 23;
      v11 = 24;
      if (a1 != 0x800000)
        v11 = 0;
      if (a1 != 0x400000)
        v10 = v11;
      if (a1 <= 0xFFFFFF)
        v12 = v10;
      else
        v12 = v9;
      if (a1 <= 0x3FFFFFF)
        return v12;
      else
        return v7;
    }
  }
  else
  {
    if (a1 > 255)
    {
      v13 = 14;
      v14 = 15;
      if (a1 != 0x4000)
        v14 = 0;
      if (a1 != 0x2000)
        v13 = v14;
      v15 = 12;
      v16 = 13;
      if (a1 != 4096)
        v16 = 0;
      if (a1 != 2048)
        v15 = v16;
      if (a1 < 0x2000)
        v13 = v15;
      v17 = 9;
      v18 = 10;
      v19 = 11;
      if (a1 != 1024)
        v19 = 0;
      if (a1 != 512)
        v18 = v19;
      if (a1 != 256)
        v17 = v18;
      v20 = a1 <= 2047;
    }
    else
    {
      if (a1 <= 15)
      {
        switch(a1)
        {
          case 1:
          case 2:
            result = a1;
            break;
          case 4:
            result = 3;
            break;
          case 8:
            result = 4;
            break;
          default:
            return result;
        }
        return result;
      }
      v13 = 7;
      v28 = 8;
      if (a1 != 128)
        v28 = 0;
      if (a1 != 64)
        v13 = v28;
      v17 = 5;
      v29 = 6;
      if (a1 != 32)
        v29 = 0;
      if (a1 != 16)
        v17 = v29;
      v20 = a1 <= 63;
    }
    if (v20)
      return v17;
    else
      return v13;
  }
}

id NTKLauncherIconComplicationTypes()
{
  if (NTKLauncherIconComplicationTypes_onceToken != -1)
    dispatch_once(&NTKLauncherIconComplicationTypes_onceToken, &__block_literal_global_1068);
  return (id)NTKLauncherIconComplicationTypes_launcherIcons;
}

id NTKAllRegularComplicationTypes()
{
  if (NTKAllRegularComplicationTypes_onceToken != -1)
    dispatch_once(&NTKAllRegularComplicationTypes_onceToken, &__block_literal_global_1069);
  return (id)NTKAllRegularComplicationTypes_allRegular;
}

id NTKAllSmallComplicationTypes()
{
  if (NTKAllSmallComplicationTypes_onceToken != -1)
    dispatch_once(&NTKAllSmallComplicationTypes_onceToken, &__block_literal_global_1074);
  return (id)NTKAllSmallComplicationTypes_allRegular;
}

id NTKAllCircularMediumComplicationTypes()
{
  if (NTKAllCircularMediumComplicationTypes_onceToken != -1)
    dispatch_once(&NTKAllCircularMediumComplicationTypes_onceToken, &__block_literal_global_1077);
  return (id)NTKAllCircularMediumComplicationTypes_results;
}

id NTKAllSignatureBezelTypes()
{
  if (NTKAllSignatureBezelTypes_onceToken != -1)
    dispatch_once(&NTKAllSignatureBezelTypes_onceToken, &__block_literal_global_1080);
  return (id)NTKAllSignatureBezelTypes_results;
}

id NTKAllSimpleTextComplicationTypes()
{
  if (NTKAllSimpleTextComplicationTypes_onceToken != -1)
    dispatch_once(&NTKAllSimpleTextComplicationTypes_onceToken, &__block_literal_global_1081);
  return (id)NTKAllSimpleTextComplicationTypes_results;
}

id NTKAllExtendedSignatureCircularTypes()
{
  if (NTKAllExtendedSignatureCircularTypes_onceToken != -1)
    dispatch_once(&NTKAllExtendedSignatureCircularTypes_onceToken, &__block_literal_global_1084);
  return (id)NTKAllExtendedSignatureCircularTypes_results;
}

id NTKAllSignatureRectangularTypes()
{
  if (NTKAllSignatureRectangularTypes_onceToken != -1)
    dispatch_once(&NTKAllSignatureRectangularTypes_onceToken, &__block_literal_global_1085);
  return (id)NTKAllSignatureRectangularTypes_results;
}

id NTKAllExtraLargeComplicationTypes()
{
  if (NTKAllExtraLargeComplicationTypes_onceToken != -1)
    dispatch_once(&NTKAllExtraLargeComplicationTypes_onceToken, &__block_literal_global_1088);
  return (id)NTKAllExtraLargeComplicationTypes_results;
}

id NTKAllGraphicExtraLargeComplicationTypes()
{
  if (NTKAllGraphicExtraLargeComplicationTypes_onceToken != -1)
    dispatch_once(&NTKAllGraphicExtraLargeComplicationTypes_onceToken, &__block_literal_global_1091);
  return (id)NTKAllGraphicExtraLargeComplicationTypes_results;
}

id NTKAllLargeComplicationTypes()
{
  if (NTKAllLargeComplicationTypes_onceToken != -1)
    dispatch_once(&NTKAllLargeComplicationTypes_onceToken, &__block_literal_global_1094);
  return (id)NTKAllLargeComplicationTypes_allLarge;
}

id NTKAllUtilityLargeComplicationTypes()
{
  if (NTKAllUtilityLargeComplicationTypes_onceToken != -1)
    dispatch_once(&NTKAllUtilityLargeComplicationTypes_onceToken, &__block_literal_global_1098);
  return (id)NTKAllUtilityLargeComplicationTypes_allUtilityLarge;
}

id NTKAllLargeNonLegacyComplicationTypes()
{
  if (NTKAllLargeNonLegacyComplicationTypes_onceToken != -1)
    dispatch_once(&NTKAllLargeNonLegacyComplicationTypes_onceToken, &__block_literal_global_1099);
  return (id)NTKAllLargeNonLegacyComplicationTypes_allLargeNonLegacy;
}

id NTKUpNextDataSourceSupressingComplicationTypes()
{
  if (NTKUpNextDataSourceSupressingComplicationTypes_onceToken != -1)
    dispatch_once(&NTKUpNextDataSourceSupressingComplicationTypes_onceToken, &__block_literal_global_1103);
  return (id)NTKUpNextDataSourceSupressingComplicationTypes_hideDuplicatesOnSupergreen;
}

id NTKNewToFortuneComplicationTypes()
{
  if (NTKNewToFortuneComplicationTypes_onceToken != -1)
    dispatch_once(&NTKNewToFortuneComplicationTypes_onceToken, &__block_literal_global_1104);
  return (id)NTKNewToFortuneComplicationTypes_fortune;
}

id NTKNewToGloryComplicationTypes()
{
  if (NTKNewToGloryComplicationTypes_onceToken != -1)
    dispatch_once(&NTKNewToGloryComplicationTypes_onceToken, &__block_literal_global_1106);
  return (id)NTKNewToGloryComplicationTypes_glory;
}

id NTKAllUtilitySmallFlatComplicationTypes()
{
  if (NTKAllUtilitySmallFlatComplicationTypes_onceToken != -1)
    dispatch_once(&NTKAllUtilitySmallFlatComplicationTypes_onceToken, &__block_literal_global_1108);
  return (id)NTKAllUtilitySmallFlatComplicationTypes_utilitySmallFlat;
}

id NTKAllUtilityLargeNarrowComplicationTypes()
{
  if (NTKAllUtilityLargeNarrowComplicationTypes_onceToken != -1)
    dispatch_once(&NTKAllUtilityLargeNarrowComplicationTypes_onceToken, &__block_literal_global_1110);
  return (id)NTKAllUtilityLargeNarrowComplicationTypes_utilityLargeNarrow;
}

id NTKUtilityComplicationCircularTypes()
{
  if (NTKUtilityComplicationCircularTypes_onceToken != -1)
    dispatch_once(&NTKUtilityComplicationCircularTypes_onceToken, &__block_literal_global_1112_0);
  return (id)NTKUtilityComplicationCircularTypes_utilityComplicationCircularTypes;
}

id NTKWrappedNoneComplicationType()
{
  if (NTKWrappedNoneComplicationType_onceToken != -1)
    dispatch_once(&NTKWrappedNoneComplicationType_onceToken, &__block_literal_global_1114);
  return (id)NTKWrappedNoneComplicationType_none;
}

id NTKWrappedDateComplicationType()
{
  if (NTKWrappedDateComplicationType_onceToken != -1)
    dispatch_once(&NTKWrappedDateComplicationType_onceToken, &__block_literal_global_1115);
  return (id)NTKWrappedDateComplicationType_date;
}

uint64_t NTKIsInternalDebuggingEnabled(uint64_t a1, uint64_t a2)
{
  if (NTKInternalBuild(a1, a2) && NTKIsInternalDebuggingEnabled_onceToken != -1)
    dispatch_once(&NTKIsInternalDebuggingEnabled_onceToken, &__block_literal_global_1116);
  return NTKIsInternalDebuggingEnabled_isEnabled;
}

const __CFString *NTKFaceDataModeDescription(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("notSet");
  else
    return off_1E6BDBE40[a1 - 1];
}

uint64_t NTKIsScreenOn()
{
  return __NTKIsScreenOn;
}

void NTKSetScreenOn(int a1)
{
  id v1;

  if (__NTKIsScreenOn != a1)
  {
    __NTKIsScreenOn = a1;
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v1 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "postNotificationName:object:", CFSTR("NTKFaceScreenOnDidChangeNotification"), 0);

  }
}

id NTKCarbonaraWidgetIntentWithHomeIdentifier(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = (void *)MEMORY[0x1E0CB34D0];
  v2 = a1;
  objc_msgSend(v1, "bundleWithPath:", CFSTR("/System/Library/PrivateFrameworks/HomeEnergyUI.framework"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CBDB38], "_defaultSchemaForBundle:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "intentWithName:", CFSTR("ConfigurationIntent"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "_setLaunchId:", CFSTR("com.apple.NanoHome"));
  objc_msgSend(v5, "setValue:forKey:", v2, CFSTR("homeIdentifier"));

  INIntentWithTypedIntent();
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id NTKCarbonaraWidgetIntent()
{
  return NTKCarbonaraWidgetIntentWithHomeIdentifier(0);
}

id NTKFaceColorPalette_PerformFallbackPropertyAccessor(void *a1, void *a2, void *a3)
{
  unsigned __int8 *v5;
  id v6;
  id v7;
  NSString *v8;
  int v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v14;

  v5 = a1;
  v6 = a3;
  v7 = a2;
  if (objc_msgSend(v5, "isTritium"))
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), CFSTR("tritium_"), v7);
  else
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("_%@"), v7, v14);
  v8 = (NSString *)objc_claimAutoreleasedReturnValue();

  v9 = objc_msgSend(v5, "isTritium");
  if (v5 && v5[8])
  {
    v5[8] = 0;
    v10 = (void *)*((_QWORD *)v5 + 9);
    *((_QWORD *)v5 + 9) = 0;

  }
  NTKFaceColorPalette_ExecuteWithSelectorName(v5, v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 && v5[8] != v9)
  {
    v5[8] = v9;
    v12 = (void *)*((_QWORD *)v5 + 9);
    *((_QWORD *)v5 + 9) = 0;

  }
  if (v11)
  {
    objc_msgSend(v6, "setColor:", v11);
    objc_msgSend(v6, "setFallbackMethodName:", v8);
  }

  return v11;
}

id colorWithName(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0DC3658], "colorNamed:inBundle:compatibleWithTraitCollection:", v5, v6, 0);
    v8 = objc_claimAutoreleasedReturnValue();
    v9 = (void *)v8;
    if (v7 && v8)
    {
      objc_msgSend(v7, "setPathLocation:", v5);
      objc_msgSend(v7, "setBundleLocation:", v6);
      objc_msgSend(v7, "setColor:", v9);
    }
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id colorEntryName(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  v5 = a1;
  v6 = a2;
  if (!v6)
  {
    v8 = v5;
    if (v8)
      goto LABEL_7;
    goto LABEL_5;
  }
  if (!v5)
  {
LABEL_5:
    v7 = v6;
    goto LABEL_6;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@"), v5, v6);
  v7 = (id)objc_claimAutoreleasedReturnValue();
LABEL_6:
  v8 = v7;
LABEL_7:
  if (a3)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@.%@"), v8, CFSTR("tritium"));
    v9 = objc_claimAutoreleasedReturnValue();

    v8 = (id)v9;
  }

  return v8;
}

id NTKFaceColorPalette_ExecuteWithSelectorName(void *a1, NSString *a2)
{
  id v3;
  SEL v4;
  void *v5;

  v3 = a1;
  v4 = NSSelectorFromString(a2);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    ((void (*)(id, SEL))objc_msgSend(v3, "methodForSelector:", v4))(v3, v4);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id NTKFaceColorPalette_DefaultPropertAccessor(void *a1, const char *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  NSStringFromSelector(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForKey:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

__n128 _LayoutConstants_52@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;

  v5 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_74);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_74);
  if (WeakRetained)
  {
    v7 = WeakRetained;
    v8 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_74);
    if (v8 == v5)
    {
      v9 = objc_msgSend(v5, "version");
      v10 = _LayoutConstants___previousCLKDeviceVersion_74;

      if (v9 == v10)
        goto LABEL_6;
    }
    else
    {

    }
  }
  v11 = objc_storeWeak(&_LayoutConstants___cachedDevice_74, v5);
  _LayoutConstants___previousCLKDeviceVersion_74 = objc_msgSend(v5, "version");

  ___LayoutConstants_block_invoke_68(v12, v5);
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_74);
  *(_QWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  if (a2 == 12)
  {
    v14 = &_LayoutConstants___constantsGraphicExtraLarge_9;
  }
  else
  {
    if (a2 != 10)
    {
      _NTKLoggingObjectForDomain(18, (uint64_t)"NTKLoggingDomainComplication");
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        _LayoutConstants_cold_1(a2, v13);

    }
    v14 = &_LayoutConstants___constantsGraphicCircular_9;
  }
  v15 = v14[5];
  *(_OWORD *)(a3 + 64) = v14[4];
  *(_OWORD *)(a3 + 80) = v15;
  *(_QWORD *)(a3 + 96) = *((_QWORD *)v14 + 12);
  v16 = v14[1];
  *(_OWORD *)a3 = *v14;
  *(_OWORD *)(a3 + 16) = v16;
  v17 = v14[3];
  *(_OWORD *)(a3 + 32) = v14[2];
  *(_OWORD *)(a3 + 48) = v17;

  return result;
}

void sub_1B7510A58(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t isLibraryAvailable(uint64_t result, uint64_t a2)
{
  if (result)
    return objc_msgSend(MEMORY[0x1E0C944B0], "NRDeviceIsRunningDaytonaOrLater:", a2);
  return result;
}

void sub_1B7512EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *sectnameForStyle(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("__VictoryFont2");
  if (a1 != 1)
    v1 = 0;
  if (a1)
    return v1;
  else
    return CFSTR("__VictoryFont1");
}

void _LayoutConstants_53(void *a1@<X0>, uint64_t a2@<X8>)
{
  id WeakRetained;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  __int128 v10;
  id obj;

  obj = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_LayoutConstants___lock_75);
  WeakRetained = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_75);
  if (!WeakRetained)
    goto LABEL_5;
  v4 = WeakRetained;
  v5 = objc_loadWeakRetained(&_LayoutConstants___cachedDevice_75);
  if (v5 != obj)
  {

LABEL_5:
    v8 = objc_storeWeak(&_LayoutConstants___cachedDevice_75, obj);
    _LayoutConstants___previousCLKDeviceVersion_75 = objc_msgSend(obj, "version");

    ___LayoutConstants_block_invoke_69(v9, (uint64_t)obj);
    goto LABEL_6;
  }
  v6 = objc_msgSend(obj, "version");
  v7 = _LayoutConstants___previousCLKDeviceVersion_75;

  if (v6 != v7)
    goto LABEL_5;
LABEL_6:
  os_unfair_lock_unlock((os_unfair_lock_t)&_LayoutConstants___lock_75);
  v10 = *(_OWORD *)&qword_1EF176C88;
  *(_OWORD *)a2 = _LayoutConstants___constants_19;
  *(_OWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 32) = qword_1EF176C98;

}

id NTKCBundleLocalizedString(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  __CFString *(*v12)(uint64_t, void *, uint64_t);
  void *v13;
  id v14;
  id v15;

  v3 = a1;
  v4 = a2;
  NTKCDefaultValueLocalizedString(v3, CFSTR("NanoTimeKitCompanion"), v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v6)
  {
    v10 = MEMORY[0x1E0C809B0];
    v11 = 3221225472;
    v12 = __NTKCBundleLocalizedString_block_invoke;
    v13 = &unk_1E6BDC200;
    v7 = v3;
    v14 = v7;
    v15 = v4;
    v8 = _Block_copy(&v10);
    (*((void (**)(void *, _QWORD, _QWORD))v8 + 2))(v8, MEMORY[0x1E0C9AA60], 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v6)
      v6 = (void *)objc_msgSend(v7, "copy", v10, v11, v12, v13);
  }

  return v6;
}

id NTKCCustomizationLocalizedFormat(void *a1, uint64_t a2, uint64_t a3)
{
  return NTKCDefaultValueLocalizedString(a1, CFSTR("NTKCustomizationFormats"), a3, 1);
}

uint64_t NTKCScreenStyle()
{
  if (NTKCScreenStyle_onceToken != -1)
    dispatch_once(&NTKCScreenStyle_onceToken, &__block_literal_global_171);
  return NTKCScreenStyle_style;
}

double NTKCSecondHandCenterOffset()
{
  if (NTKCSecondHandCenterOffset_onceToken != -1)
    dispatch_once(&NTKCSecondHandCenterOffset_onceToken, &__block_literal_global_38_0);
  return *(double *)&NTKCSecondHandCenterOffset_offset_0;
}

id NTKCImageNamed(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v1 = (void *)MEMORY[0x1E0DC3870];
  v2 = a1;
  NTKCBundle();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "imageNamed:inBundle:compatibleWithTraitCollection:", v2, v3, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

double NTKCScreenEdgeMargin()
{
  if (NTKCScreenEdgeMargin_onceToken != -1)
    dispatch_once(&NTKCScreenEdgeMargin_onceToken, &__block_literal_global_40_0);
  return *(double *)&NTKCScreenEdgeMargin_margin;
}

id NTKCSeparatorColor()
{
  if (NTKCSeparatorColor_onceToken != -1)
    dispatch_once(&NTKCSeparatorColor_onceToken, &__block_literal_global_41_0);
  return (id)NTKCSeparatorColor_color;
}

id NTKCActiveColor()
{
  if (NTKCActiveColor_onceToken != -1)
    dispatch_once(&NTKCActiveColor_onceToken, &__block_literal_global_45);
  return (id)NTKCActiveColor_color;
}

id NTKCOutlineColor(int a1)
{
  if (a1)
    NTKCActiveColor();
  else
    NTKCSeparatorColor();
  return (id)objc_claimAutoreleasedReturnValue();
}

id NTKCActionColor()
{
  if (NTKCActionColor_onceToken != -1)
    dispatch_once(&NTKCActionColor_onceToken, &__block_literal_global_46_1);
  return (id)NTKCActionColor_color;
}

id NTKCRemoveColor()
{
  if (NTKCRemoveColor_onceToken != -1)
    dispatch_once(&NTKCRemoveColor_onceToken, &__block_literal_global_47_0);
  return (id)NTKCRemoveColor_color;
}

id NTKCBlankAppIconImage()
{
  if (NTKCBlankAppIconImage_onceToken != -1)
    dispatch_once(&NTKCBlankAppIconImage_onceToken, &__block_literal_global_48_0);
  return (id)NTKCBlankAppIconImage_blankIcon;
}

void sub_1B7518BBC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v2);
  objc_destroyWeak(v3);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 112));
  _Unwind_Resume(a1);
}

Swift::Bool __swiftcall NTKComplicationProvider.isComplicationAvailable(_:for:)(NTKComplication _, Swift::OpaquePointer a2)
{
  void *v2;
  Class isa;
  uint64_t v4;
  NSString *uniqueIdentifier;
  NSString *v6;
  void *v7;
  unsigned __int8 v8;

  isa = _.super.super.isa;
  v4 = *((_QWORD *)_._uniqueIdentifier + 2);
  if (v4)
  {
    uniqueIdentifier = _._uniqueIdentifier;
    sub_1B752FF34();
    v6 = uniqueIdentifier + 4;
    do
    {
      ++v6;
      sub_1B752FE14();
      sub_1B752FF1C();
      sub_1B752FF40();
      sub_1B752FF4C();
      sub_1B752FF28();
      --v4;
    }
    while (v4);
  }
  sub_1B7519608();
  v7 = (void *)sub_1B752FDCC();
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v2, sel_isComplicationAvailable_forFamilies_, isa, v7);

  return v8;
}

unint64_t sub_1B7519608()
{
  unint64_t result;

  result = qword_1EF171DA0;
  if (!qword_1EF171DA0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF171DA0);
  }
  return result;
}

void type metadata accessor for NTKComplicationType()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_1EF171DA8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1EF171DA8);
  }
}

uint64_t sub_1B7519698(uint64_t a1)
{
  return sub_1B7519738(a1, qword_1EF176D98);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_1B7519714(uint64_t a1)
{
  return sub_1B7519738(a1, qword_1EF176DB0);
}

uint64_t sub_1B7519738(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1B752FD3C();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_1B752FD30();
}

id static NTKNanoHomeWidgetItemFactory.currentLocationEnergyWidgetItem(complicationFamily:sectionIdentifier:)(uint64_t a1)
{
  objc_class *v2;
  uint64_t (*v3)(uint64_t);
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;

  v2 = (objc_class *)sub_1B752FC4C();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D514B0];
  v4 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  sub_1B752FC10();
  v5 = sub_1B752FBEC();
  v7 = v6;
  sub_1B752FCB8();
  sub_1B752FC94();
  v8 = sub_1B751AC64(v4, v5, v7, a1, v3, &qword_1EF171E00, MEMORY[0x1E0D514A0]);
  if (v8)
  {
    v9 = v8;
    v10 = objc_allocWithZone((Class)NTKHomeWidgetItem);
    v11 = v9;
    swift_bridgeObjectRetain();
    v12 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v10, sel_initWithSectionIdentifier_, v12);

    v14 = (void *)sub_1B752FDA8();
    objc_msgSend(v13, sel_setLocalizedName_, v14);

    objc_msgSend(v13, sel_setWidgetComplication_, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = 0;
  }

  return v13;
}

id static NTKNanoHomeWidgetItemFactory.homeSpecificEnergyWidgetItem(energyIntent:complicationFamily:sectionIdentifier:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;

  sub_1B752FC40();
  if (v4)
  {
    sub_1B752FCB8();
    sub_1B752FC88();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B752FCB8();
    sub_1B752FC94();
  }
  sub_1B752FC10();
  v5 = a1;
  v6 = sub_1B752FBEC();
  v8 = sub_1B751AC64(v5, v6, v7, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D514B0], &qword_1EF171E00, MEMORY[0x1E0D514A0]);
  if (v8)
  {
    v9 = v8;
    v10 = objc_allocWithZone((Class)NTKHomeWidgetItem);
    v11 = v9;
    swift_bridgeObjectRetain();
    v12 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v10, sel_initWithSectionIdentifier_, v12);

    v14 = (void *)sub_1B752FDA8();
    objc_msgSend(v13, sel_setLocalizedName_, v14);

    objc_msgSend(v13, sel_setWidgetComplication_, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = 0;
  }

  return v13;
}

id static NTKNanoHomeWidgetItemFactory.electricityUsageWidgetItem(usageIntent:complicationFamily:sectionIdentifier:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;

  sub_1B752FCDC();
  if (v4)
  {
    sub_1B752FCB8();
    sub_1B752FCAC();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B752FCB8();
    sub_1B752FC7C();
  }
  sub_1B752FC10();
  v5 = a1;
  v6 = sub_1B752FBE0();
  v8 = sub_1B751AC64(v5, v6, v7, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D51528], &qword_1EF171DF8, MEMORY[0x1E0D51518]);
  if (v8)
  {
    v9 = v8;
    v10 = objc_allocWithZone((Class)NTKHomeWidgetItem);
    v11 = v9;
    swift_bridgeObjectRetain();
    v12 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v10, sel_initWithSectionIdentifier_, v12);

    v14 = (void *)sub_1B752FDA8();
    objc_msgSend(v13, sel_setLocalizedName_, v14);

    objc_msgSend(v13, sel_setWidgetComplication_, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = 0;
  }

  return v13;
}

id static NTKNanoHomeWidgetItemFactory.electricityRatesWidgetItem(ratesIntent:complicationFamily:sectionIdentifier:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;

  sub_1B752FCC4();
  if (v4)
  {
    sub_1B752FCB8();
    sub_1B752FCA0();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B752FCB8();
    sub_1B752FC70();
  }
  sub_1B752FC10();
  v5 = a1;
  v6 = sub_1B752FBD4();
  v8 = sub_1B751AC64(v5, v6, v7, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D51510], &qword_1EF171DF0, MEMORY[0x1E0D51500]);
  if (v8)
  {
    v9 = v8;
    v10 = objc_allocWithZone((Class)NTKHomeWidgetItem);
    v11 = v9;
    swift_bridgeObjectRetain();
    v12 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v10, sel_initWithSectionIdentifier_, v12);

    v14 = (void *)sub_1B752FDA8();
    objc_msgSend(v13, sel_setLocalizedName_, v14);

    objc_msgSend(v13, sel_setWidgetComplication_, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = 0;
  }

  return v13;
}

id static NTKNanoHomeWidgetItemFactory.smartStackWidgetItem(complicationFamily:sectionIdentifier:)(uint64_t a1)
{
  objc_class *v2;
  uint64_t (*v3)(uint64_t);
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;

  v2 = (objc_class *)sub_1B752FD18();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D51570];
  v4 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  sub_1B752FC10();
  v5 = sub_1B752FBC8();
  v7 = v6;
  sub_1B752FCB8();
  sub_1B752FC64();
  v8 = sub_1B751AC64(v4, v5, v7, a1, v3, &qword_1EF171DE8, MEMORY[0x1E0D51568]);
  if (v8)
  {
    v9 = v8;
    v10 = objc_allocWithZone((Class)NTKHomeWidgetItem);
    v11 = v9;
    swift_bridgeObjectRetain();
    v12 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v10, sel_initWithSectionIdentifier_, v12);

    v14 = (void *)sub_1B752FDA8();
    objc_msgSend(v13, sel_setLocalizedName_, v14);

    objc_msgSend(v13, sel_setWidgetComplication_, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = 0;
  }

  return v13;
}

id static NTKNanoHomeWidgetItemFactory.accessoryWidgetItem(accessoryIntent:complicationFamily:sectionIdentifier:)(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;

  sub_1B752FC10();
  v4 = a1;
  v5 = sub_1B752FC04();
  v7 = v6;
  sub_1B752FB8C();
  v8 = sub_1B751AC64(v4, v5, v7, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D51428], &qword_1EF171DE0, MEMORY[0x1E0D51418]);
  if (v8)
  {
    v9 = v8;
    v10 = objc_allocWithZone((Class)NTKHomeWidgetItem);
    v11 = v9;
    swift_bridgeObjectRetain();
    v12 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v10, sel_initWithSectionIdentifier_, v12);

    v14 = (void *)sub_1B752FDA8();
    objc_msgSend(v13, sel_setLocalizedName_, v14);

    objc_msgSend(v13, sel_setWidgetComplication_, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = 0;
  }

  return v13;
}

id static NTKNanoHomeWidgetItemFactory.sceneWidgetItem(sceneIntent:complicationFamily:sectionIdentifier:)(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;

  sub_1B752FC10();
  v4 = a1;
  v5 = sub_1B752FBBC();
  v7 = v6;
  sub_1B752FBA4();
  v8 = sub_1B751AC64(v4, v5, v7, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D51440], &qword_1EF171DD8, MEMORY[0x1E0D51430]);
  if (v8)
  {
    v9 = v8;
    v10 = objc_allocWithZone((Class)NTKHomeWidgetItem);
    v11 = v9;
    swift_bridgeObjectRetain();
    v12 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v10, sel_initWithSectionIdentifier_, v12);

    v14 = (void *)sub_1B752FDA8();
    objc_msgSend(v13, sel_setLocalizedName_, v14);

    objc_msgSend(v13, sel_setWidgetComplication_, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = 0;
  }

  return v13;
}

id NTKNanoHomeWidgetItemFactory.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id NTKNanoHomeWidgetItemFactory.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id NTKNanoHomeWidgetItemFactory.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_1B751AB6C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t), unint64_t *a10, uint64_t a11)
{
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;

  v11 = sub_1B751AC64(a1, a2, a3, a6, a9, a10, a11);
  if (!v11)
    return 0;
  v12 = v11;
  v13 = objc_allocWithZone((Class)NTKHomeWidgetItem);
  v14 = v12;
  swift_bridgeObjectRetain();
  v15 = (void *)sub_1B752FDA8();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v13, sel_initWithSectionIdentifier_, v15);

  v17 = (void *)sub_1B752FDA8();
  objc_msgSend(v16, sel_setLocalizedName_, v17);

  objc_msgSend(v16, sel_setWidgetComplication_, v14);
  return v16;
}

id sub_1B751AC64(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  _QWORD v30[4];
  _QWORD v31[4];
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;

  v14 = a5(0);
  v33 = v14;
  v34 = sub_1B751B1DC(a6, a5, a7);
  v32[0] = a1;
  v15 = a1;
  v16 = 0;
  if ((sub_1B751F26C(a2, a3, a4) & 1) != 0)
  {
    sub_1B752FC34();
    sub_1B752FC28();
    __swift_project_boxed_opaque_existential_1Tm(v32, v14);
    sub_1B752FB50();
    __swift_project_boxed_opaque_existential_1Tm(v32, v33);
    swift_getDynamicType();
    sub_1B752FB44();
    v17 = objc_allocWithZone(MEMORY[0x1E0CBD738]);
    v18 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1Tm(v31, v31[3]);
    v19 = sub_1B752FFD0();
    __swift_project_boxed_opaque_existential_1Tm(v30, v30[3]);
    v20 = objc_msgSend(v17, sel_initWithAppBundleIdentifier_linkAction_linkActionMetadata_, v18, v19, sub_1B752FFD0());
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v30);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
    v21 = v20;
    v22 = (void *)sub_1B752FDA8();
    objc_msgSend(v21, sel__setLaunchId_, v22);

    sub_1B752FC1C();
    sub_1B752FC28();
    v23 = objc_allocWithZone(MEMORY[0x1E0C94578]);
    v24 = v21;
    swift_bridgeObjectRetain();
    v25 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v26 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v27 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v28 = objc_msgSend(v23, sel_initWithExtensionBundleIdentifier_containerBundleIdentifier_kind_intent_, v25, v26, v27, v24);

    v16 = objc_msgSend((id)objc_opt_self(), sel_complicationWithDescriptor_, v28);
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
  return v16;
}

id _s11NanoTimeKit28NTKNanoHomeWidgetItemFactoryC08launcherfG018complicationFamily17sectionIdentifierSo07NTKHomefG0CSgSo015CLKComplicationK0V_SStFZ_0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;

  sub_1B752FC10();
  v2 = sub_1B752FBF8();
  LOBYTE(a1) = sub_1B751F26C(v2, v3, a1);
  swift_bridgeObjectRelease();
  v4 = 0;
  if ((a1 & 1) != 0)
  {
    sub_1B752FC34();
    sub_1B752FC1C();
    sub_1B752FC28();
    sub_1B752FBF8();
    v5 = objc_allocWithZone(MEMORY[0x1E0C94578]);
    v6 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v7 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v8 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v5, sel_initWithExtensionBundleIdentifier_containerBundleIdentifier_kind_intent_, v6, v7, v8, 0);

    v10 = objc_msgSend((id)objc_opt_self(), sel_complicationWithDescriptor_, v9);
    sub_1B752FCB8();
    v11 = v10;
    sub_1B752FC58();
    v12 = objc_allocWithZone((Class)NTKHomeWidgetItem);
    v13 = v11;
    swift_bridgeObjectRetain();
    v14 = (void *)sub_1B752FDA8();
    swift_bridgeObjectRelease();
    v4 = objc_msgSend(v12, sel_initWithSectionIdentifier_, v14);

    v15 = (void *)sub_1B752FDA8();
    objc_msgSend(v4, sel_setLocalizedName_, v15);

    objc_msgSend(v4, sel_setWidgetComplication_, v13);
    swift_bridgeObjectRelease();

  }
  return v4;
}

uint64_t type metadata accessor for NTKNanoHomeWidgetItemFactory()
{
  return objc_opt_self();
}

_QWORD *__swift_project_boxed_opaque_existential_1Tm(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1B751B1DC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1BCCA8650](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static NTKNanoHomeIntentsUtilities.pickableEnergyForecastIntents(home:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1B751B268;
  return sub_1B752FE74();
}

uint64_t sub_1B751B268(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_1B751B3E4(void *a1, void *aBlock)
{
  _QWORD *v2;
  _QWORD *v4;

  v2[2] = a1;
  v2[3] = _Block_copy(aBlock);
  a1;
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = sub_1B751B44C;
  return sub_1B752FE74();
}

uint64_t sub_1B751B44C()
{
  uint64_t *v0;
  void (**v1)(_QWORD, _QWORD);
  void *v2;
  void *v3;
  uint64_t v5;

  v1 = *(void (***)(_QWORD, _QWORD))(*v0 + 24);
  v2 = *(void **)(*v0 + 16);
  v5 = *v0;
  swift_task_dealloc();

  sub_1B752FC4C();
  v3 = (void *)sub_1B752FDCC();
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, void *))v1)[2](v1, v3);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t static NTKNanoHomeIntentsUtilities.pickableElectricityUsageIntents(home:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1B751C000;
  return sub_1B752FE8C();
}

uint64_t sub_1B751B65C(void *a1, void *aBlock)
{
  _QWORD *v2;
  _QWORD *v4;

  v2[2] = a1;
  v2[3] = _Block_copy(aBlock);
  a1;
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = sub_1B751B6C4;
  return sub_1B752FE8C();
}

uint64_t sub_1B751B6C4()
{
  uint64_t *v0;
  void (**v1)(_QWORD, _QWORD);
  void *v2;
  void *v3;
  uint64_t v5;

  v1 = *(void (***)(_QWORD, _QWORD))(*v0 + 24);
  v2 = *(void **)(*v0 + 16);
  v5 = *v0;
  swift_task_dealloc();

  sub_1B752FCE8();
  v3 = (void *)sub_1B752FDCC();
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, void *))v1)[2](v1, v3);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t static NTKNanoHomeIntentsUtilities.pickableElectricityRatesIntents(home:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_1B751C000;
  return sub_1B752FE80();
}

uint64_t sub_1B751B8D4(void *a1, void *aBlock)
{
  _QWORD *v2;
  _QWORD *v4;

  v2[2] = a1;
  v2[3] = _Block_copy(aBlock);
  a1;
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = sub_1B751B93C;
  return sub_1B752FE80();
}

uint64_t sub_1B751B93C()
{
  uint64_t *v0;
  void (**v1)(_QWORD, _QWORD);
  void *v2;
  void *v3;
  uint64_t v5;

  v1 = *(void (***)(_QWORD, _QWORD))(*v0 + 24);
  v2 = *(void **)(*v0 + 16);
  v5 = *v0;
  swift_task_dealloc();

  sub_1B752FCD0();
  v3 = (void *)sub_1B752FDCC();
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, void *))v1)[2](v1, v3);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t static NTKNanoHomeIntentsUtilities.pickableActionSetIntents(home:)()
{
  return sub_1B752FE68();
}

uint64_t static NTKNanoHomeIntentsUtilities.pickableAccessoryIntents(home:room:)()
{
  return sub_1B752FE5C();
}

id NTKNanoHomeIntentsUtilities.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id NTKNanoHomeIntentsUtilities.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id NTKNanoHomeIntentsUtilities.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for NTKNanoHomeIntentsUtilities()
{
  return objc_opt_self();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1BCCA8638]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1B751BBF8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1B751C004;
  return ((uint64_t (*)(void *, void *))((char *)&dword_1EF171E50 + dword_1EF171E50))(v2, v3);
}

uint64_t sub_1B751BC68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1B751C004;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1EF171FF8 + dword_1EF171FF8))(v2, v3, v4);
}

uint64_t sub_1B751BCE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1B751C004;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EF172000 + dword_1EF172000))(a1, v4, v5, v6);
}

uint64_t sub_1B751BD6C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1B751C004;
  return ((uint64_t (*)(void *, void *))((char *)&dword_1EF171E70 + dword_1EF171E70))(v2, v3);
}

uint64_t sub_1B751BDE0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1B751C004;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EF172000 + dword_1EF172000))(a1, v4, v5, v6);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1B751BE94()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_1B751BF00;
  return ((uint64_t (*)(void *, void *))((char *)&dword_1EF171E90 + dword_1EF171E90))(v2, v3);
}

uint64_t sub_1B751BF00()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t objectdestroy_6Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B751BF7C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1B751C004;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EF172000 + dword_1EF172000))(a1, v4, v5, v6);
}

uint64_t sub_1B751C008()
{
  uint64_t result;

  result = sub_1B751E19C(MEMORY[0x1E0DEE9D8]);
  qword_1EF171EB0 = result;
  return result;
}

uint64_t static CrownAssertionHandler.tokens.getter()
{
  if (qword_1EF171D98 != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B751C098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char v25;
  uint64_t v27;

  v27 = a1;
  v3 = sub_1B752FB80();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5, v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10, v11);
  v13 = (char *)&v27 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171EB8);
  MEMORY[0x1E0C80A78](v14, v15, v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1B752FD6C();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21, v22);
  v24 = (uint64_t *)((char *)&v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1B751C2C4();
  *v24 = sub_1B752FE38();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v20 + 104))(v24, *MEMORY[0x1E0DEF740], v19);
  v25 = sub_1B752FD78();
  (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(v24, v19);
  if ((v25 & 1) == 0)
  {
    __break(1u);
LABEL_8:
    swift_once();
    goto LABEL_6;
  }
  sub_1B751C300(v27, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v18, 1, v3) == 1)
  {
    sub_1B752FB74();
    sub_1B751C348((uint64_t)v18);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v18, v3);
  }
  if (qword_1EF171D98 != -1)
    goto LABEL_8;
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v8, a2, v3);
  swift_beginAccess();
  sub_1B751C858((uint64_t)v13, v8);
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v13, v3);
}

unint64_t sub_1B751C2C4()
{
  unint64_t result;

  result = qword_1EF171EC0;
  if (!qword_1EF171EC0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF171EC0);
  }
  return result;
}

uint64_t sub_1B751C300(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171EB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B751C348(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171EB8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B751C4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  uint64_t v16;
  uint64_t v17;

  v3 = sub_1B752FB80();
  v17 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (sub_1B751E564(&qword_1EF171EF0, MEMORY[0x1E0CB09C8]),
        v8 = sub_1B752FD90(),
        v9 = -1 << *(_BYTE *)(a2 + 32),
        v10 = v8 & ~v9,
        ((*(_QWORD *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0))
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v17 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 16);
    do
    {
      v13(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v3);
      sub_1B751E564(&qword_1EF171EF8, MEMORY[0x1E0CB09D0]);
      v14 = sub_1B752FD9C();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v3);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

id CrownAssertionHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id CrownAssertionHandler.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CrownAssertionHandler();
  return objc_msgSendSuper2(&v2, sel_init);
}

id CrownAssertionHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CrownAssertionHandler();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B751C760(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_1B752FFF4();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B751D090(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1B751C858(uint64_t a1, char *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  char v23;
  void (*v24)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v26;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v3 = v2;
  v6 = sub_1B752FB80();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  sub_1B751E564(&qword_1EF171EF0, MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v32 = a2;
  v13 = sub_1B752FD90();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  v15 = v13 & ~v14;
  v16 = v12;
  v17 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    v28 = v2;
    v29 = a1;
    v30 = ~v14;
    v18 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v31 = v18;
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v18 + 16);
    while (1)
    {
      v21 = v16;
      v22 = v20;
      v20(v11, *(_QWORD *)(v16 + 48) + v19 * v15, v6);
      sub_1B751E564(&qword_1EF171EF8, MEMORY[0x1E0CB09D0]);
      v23 = sub_1B752FD9C();
      v24 = *(void (**)(char *, uint64_t))(v31 + 8);
      v24(v11, v6);
      if ((v23 & 1) != 0)
        break;
      v15 = (v15 + 1) & v30;
      v16 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v17 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v28;
        a1 = v29;
        v7 = v31;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v24(v32, v6);
    v22(v29, *(_QWORD *)(*v28 + 48) + v19 * v15, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v26 = v32;
    v20(v11, v32, v6);
    v33 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B751D1B0((uint64_t)v11, v15, isUniquelyReferenced_nonNull_native);
    *v3 = v33;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v26, v6);
    return 1;
  }
}

uint64_t sub_1B751CAAC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171F08);
  result = sub_1B752FEEC();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = sub_1B752FFF4();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B751CD2C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v1 = v0;
  v2 = sub_1B752FB80();
  v38 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3, v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171F00);
  v8 = sub_1B752FEEC();
  v9 = v8;
  if (*(_QWORD *)(v7 + 16))
  {
    v10 = 1 << *(_BYTE *)(v7 + 32);
    v11 = *(_QWORD *)(v7 + 56);
    v37 = (_QWORD *)(v7 + 56);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & v11;
    v35 = v0;
    v36 = (unint64_t)(v10 + 63) >> 6;
    v14 = v8 + 56;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v16 << 6);
      }
      else
      {
        v20 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v20 >= v36)
          goto LABEL_33;
        v21 = v37[v20];
        ++v16;
        if (!v21)
        {
          v16 = v20 + 1;
          if (v20 + 1 >= v36)
            goto LABEL_33;
          v21 = v37[v16];
          if (!v21)
          {
            v16 = v20 + 2;
            if (v20 + 2 >= v36)
              goto LABEL_33;
            v21 = v37[v16];
            if (!v21)
            {
              v22 = v20 + 3;
              if (v22 >= v36)
              {
LABEL_33:
                swift_release();
                v1 = v35;
                v34 = 1 << *(_BYTE *)(v7 + 32);
                if (v34 > 63)
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v34;
                *(_QWORD *)(v7 + 16) = 0;
                break;
              }
              v21 = v37[v22];
              if (!v21)
              {
                while (1)
                {
                  v16 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_39;
                  if (v16 >= v36)
                    goto LABEL_33;
                  v21 = v37[v16];
                  ++v22;
                  if (v21)
                    goto LABEL_23;
                }
              }
              v16 = v22;
            }
          }
        }
LABEL_23:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v16 << 6);
      }
      v23 = v7;
      v24 = *(_QWORD *)(v38 + 72);
      v25 = *(_QWORD *)(v7 + 48) + v24 * v19;
      v26 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 32);
      v26(v6, v25, v2);
      sub_1B751E564(&qword_1EF171EF0, MEMORY[0x1E0CB09C8]);
      result = sub_1B752FD90();
      v27 = -1 << *(_BYTE *)(v9 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v14 + 8 * v29);
        }
        while (v33 == -1);
        v17 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v9 + 48) + v17 * v24, v6, v2);
      ++*(_QWORD *)(v9 + 16);
      v7 = v23;
    }
  }
  result = swift_release();
  *v1 = v9;
  return result;
}

uint64_t sub_1B751D090(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1B751CAAC();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1B751D3A4();
      goto LABEL_14;
    }
    sub_1B751D75C();
  }
  v8 = *v3;
  result = sub_1B752FFF4();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = sub_1B752FFDC();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_1B751D1B0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = sub_1B752FB80();
  v7 = *(_QWORD *)(v6 - 8);
  v10.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8, v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(*v3 + 16);
  v14 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v14 > v13 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_1B751CD2C();
  }
  else
  {
    if (v14 > v13)
    {
      sub_1B751D538();
      goto LABEL_12;
    }
    sub_1B751D9BC();
  }
  v15 = *v3;
  sub_1B751E564(&qword_1EF171EF0, MEMORY[0x1E0CB09C8]);
  v16 = sub_1B752FD90();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v12, *(_QWORD *)(v15 + 48) + v19 * a2, v6);
      sub_1B751E564(&qword_1EF171EF8, MEMORY[0x1E0CB09D0]);
      v21 = sub_1B752FD9C();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6, v10);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_1B752FFDC();
  __break(1u);
  return result;
}

void *sub_1B751D3A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171F08);
  v2 = *v0;
  v3 = sub_1B752FEE0();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1B751D538()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  uint64_t v12;
  unint64_t v13;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = sub_1B752FB80();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171F00);
  v8 = *v0;
  v9 = sub_1B752FEE0();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v1 = v10;
    return result;
  }
  v27 = v1;
  result = (void *)(v9 + 56);
  v12 = v8 + 56;
  v13 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 56 + 8 * v13)
    result = memmove(result, (const void *)(v8 + 56), 8 * v13);
  v15 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v16 = 1 << *(_BYTE *)(v8 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v8 + 56);
  v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v23 >= v19)
      goto LABEL_28;
    v24 = *(_QWORD *)(v12 + 8 * v23);
    ++v15;
    if (!v24)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v19)
        goto LABEL_28;
      v24 = *(_QWORD *)(v12 + 8 * v15);
      if (!v24)
      {
        v15 = v23 + 2;
        if (v23 + 2 >= v19)
          goto LABEL_28;
        v24 = *(_QWORD *)(v12 + 8 * v15);
        if (!v24)
          break;
      }
    }
LABEL_27:
    v18 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_12:
    v22 = *(_QWORD *)(v3 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v7, *(_QWORD *)(v8 + 48) + v22, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v22, v7, v2);
  }
  v25 = v23 + 3;
  if (v25 >= v19)
  {
LABEL_28:
    result = (void *)swift_release();
    v1 = v27;
    goto LABEL_30;
  }
  v24 = *(_QWORD *)(v12 + 8 * v25);
  if (v24)
  {
    v15 = v25;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v15 >= v19)
      goto LABEL_28;
    v24 = *(_QWORD *)(v12 + 8 * v15);
    ++v25;
    if (v24)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1B751D75C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171F08);
  result = sub_1B752FEEC();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = sub_1B752FFF4();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1B751D9BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;

  v1 = v0;
  v2 = sub_1B752FB80();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171F00);
  v9 = sub_1B752FEEC();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v33 = v0;
  v34 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v35 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_24;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v21 >= v35)
      goto LABEL_33;
    v22 = *(_QWORD *)(v34 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v22 = *(_QWORD *)(v34 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v35)
          goto LABEL_33;
        v22 = *(_QWORD *)(v34 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_23:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_24:
    v24 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v7, *(_QWORD *)(v8 + 48) + v24 * v20, v2);
    sub_1B751E564(&qword_1EF171EF0, MEMORY[0x1E0CB09C8]);
    result = sub_1B752FD90();
    v25 = -1 << *(_BYTE *)(v10 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v15 + 8 * v27);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v24, v7, v2);
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v35)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v33;
    goto LABEL_35;
  }
  v22 = *(_QWORD *)(v34 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v35)
      goto LABEL_33;
    v22 = *(_QWORD *)(v34 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1B751DCDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t *v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = sub_1B752FB80();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  sub_1B751E564(&qword_1EF171EF0, MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v27 = a1;
  v12 = sub_1B752FD90();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v25 = v2;
    v26 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v6 + 72);
    v28 = v6;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    while (1)
    {
      v17(v10, *(_QWORD *)(v11 + 48) + v16 * v14, v5);
      sub_1B751E564(&qword_1EF171EF8, MEMORY[0x1E0CB09D0]);
      v18 = sub_1B752FD9C();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v5);
      if ((v18 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v19 = 1;
        a2 = v26;
        v6 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v19, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    v20 = v25;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = *v20;
    v29 = *v20;
    *v20 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B751D538();
      v22 = v29;
    }
    v6 = v28;
    a2 = v26;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 32))(v26, *(_QWORD *)(v22 + 48) + v16 * v14, v5);
    sub_1B751DF0C(v14);
    *v20 = v29;
    swift_bridgeObjectRelease();
    v19 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v19 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v19, 1, v5);
}

void sub_1B751DF0C(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  void (*v28)(char *, unint64_t, uint64_t);
  unint64_t v29;
  uint64_t v30;

  v3 = sub_1B752FB80();
  v30 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4, v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *v1 + 56;
  v10 = -1 << *(_BYTE *)(*v1 + 32);
  v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(_QWORD *)(v9 + 8 * (v11 >> 6))) != 0)
  {
    v27 = v1;
    v12 = ~v10;
    swift_retain();
    v13 = sub_1B752FED4();
    if ((*(_QWORD *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      v29 = (v13 + 1) & v12;
      v14 = *(_QWORD *)(v30 + 72);
      v28 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
      do
      {
        v15 = v9;
        v16 = v14;
        v17 = v14 * v11;
        v28(v7, *(_QWORD *)(v8 + 48) + v14 * v11, v3);
        sub_1B751E564(&qword_1EF171EF0, MEMORY[0x1E0CB09C8]);
        v18 = sub_1B752FD90();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v3);
        v19 = v18 & v12;
        if (a1 >= (uint64_t)v29)
        {
          if (v19 < v29 || a1 < (uint64_t)v19)
          {
LABEL_4:
            v9 = v15;
            v14 = v16;
            goto LABEL_5;
          }
        }
        else if (v19 < v29 && a1 < (uint64_t)v19)
        {
          goto LABEL_4;
        }
        v22 = v16 * a1;
        v9 = v15;
        if (v16 * a1 < v17
          || (v14 = v16, *(_QWORD *)(v8 + 48) + v16 * a1 >= (unint64_t)(*(_QWORD *)(v8 + 48) + v17 + v16)))
        {
          swift_arrayInitWithTakeFrontToBack();
          goto LABEL_21;
        }
        a1 = v11;
        if (v22 != v17)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_21:
          v14 = v16;
          a1 = v11;
        }
LABEL_5:
        v11 = (v11 + 1) & v12;
      }
      while (((*(_QWORD *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    *(_QWORD *)(v9 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    swift_release();
    v1 = v27;
  }
  else
  {
    *(_QWORD *)(v9 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v23 = *v1;
  v24 = *(_QWORD *)(*v1 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v23 + 16) = v26;
    ++*(_DWORD *)(v23 + 36);
  }
}

uint64_t sub_1B751E19C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v2 = sub_1B752FB80();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9, v10);
  v12 = (char *)&v23 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171EB8);
  MEMORY[0x1E0C80A78](v13, v14, v15);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 16);
  sub_1B751E564(&qword_1EF171EF0, MEMORY[0x1E0CB09C8]);
  v24 = sub_1B752FE08();
  if (v18)
  {
    v19 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v23 = *(_QWORD *)(v3 + 72);
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v20(v17, v19, v2);
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v21(v17, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v17, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v7, v17, v2);
      sub_1B751C858((uint64_t)v12, v7);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
      v19 += v23;
      if (!--v18)
        goto LABEL_7;
    }
  }
  else
  {
    v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v21(v17, 1, 1, v2);
  }
  return v24;
}

uint64_t sub_1B751E360(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  char v15;
  _BYTE v17[24];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171EB8);
  MEMORY[0x1E0C80A78](v2, v3, v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_1B752FD6C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9, v10);
  v12 = (uint64_t *)&v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1B751C2C4();
  *v12 = sub_1B752FE38();
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v8 + 104))(v12, *MEMORY[0x1E0DEF740], v7);
  v13 = sub_1B752FD78();
  (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v12, v7);
  if ((v13 & 1) != 0)
  {
    if (qword_1EF171D98 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  swift_beginAccess();
  v14 = qword_1EF171EB0;
  swift_bridgeObjectRetain();
  v15 = sub_1B751C4A0(a1, v14);
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
    swift_beginAccess();
    sub_1B751DCDC(a1, (uint64_t)v6);
    swift_endAccess();
    sub_1B751C348((uint64_t)v6);
  }
  return v15 & 1;
}

uint64_t type metadata accessor for CrownAssertionHandler()
{
  return objc_opt_self();
}

uint64_t method lookup function for CrownAssertionHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CrownAssertionHandler.takeCrownAssertion(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50))();
}

uint64_t dispatch thunk of CrownAssertionHandler.relinquishCrownAssertion(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58))();
}

uint64_t sub_1B751E564(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1B752FB80();
    result = MEMORY[0x1BCCA8650](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B751E5A4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = result;
  v3 = 0;
  v15 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = sub_1B751C760(&v14, *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t NTKNanoHomeWidgetFactory.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t NTKNanoHomeWidgetFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NTKNanoHomeWidgetFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for NTKNanoHomeWidgetFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1B751E740(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1B751E810(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1B751F58C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1B751F58C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t sub_1B751E810(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1B752FEBC();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1B751E9C8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1B752FF10();
  if (!v8)
  {
    sub_1B752FF7C();
    __break(1u);
LABEL_17:
    result = sub_1B752FFB8();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1B751E9C8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1B751EA5C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B751EC34(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1B751EC34(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1B751EA5C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1B751EBD0(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1B752FF04();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1B752FF7C();
      __break(1u);
LABEL_10:
      v2 = sub_1B752FDC0();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1B752FFB8();
    __break(1u);
LABEL_14:
    result = sub_1B752FF7C();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1B751EBD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171FA8);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1B751EC34(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171FA8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1B752FFB8();
  __break(1u);
  return result;
}

uint64_t sub_1B751ED80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171F08);
    v3 = sub_1B752FEF8();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    v7 = ~(-1 << *(_BYTE *)(v3 + 32));
    while (1)
    {
      v8 = *(_QWORD *)(v6 + 8 * v4);
      result = sub_1B752FFF4();
      v10 = result & v7;
      v11 = (result & (unint64_t)v7) >> 6;
      v12 = *(_QWORD *)(v5 + 8 * v11);
      v13 = 1 << (result & v7);
      v14 = *(_QWORD *)(v3 + 48);
      if ((v13 & v12) != 0)
      {
        while (*(_QWORD *)(v14 + 8 * v10) != v8)
        {
          v10 = (v10 + 1) & v7;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
        *(_QWORD *)(v14 + 8 * v10) = v8;
        v15 = *(_QWORD *)(v3 + 16);
        v16 = __OFADD__(v15, 1);
        v17 = v15 + 1;
        if (v16)
        {
          __break(1u);
          return result;
        }
        *(_QWORD *)(v3 + 16) = v17;
      }
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1B751EE8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int128 v39;

  v2 = sub_1B752FCF4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4, v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171FB0);
  inited = swift_initStackObject();
  v39 = xmmword_1B7560780;
  *(_OWORD *)(inited + 16) = xmmword_1B7560780;
  *(_QWORD *)(inited + 32) = 8;
  v9 = sub_1B751ED80(inited);
  swift_setDeallocating();
  v10 = swift_initStackObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B7560790;
  *(_OWORD *)(v10 + 32) = xmmword_1B75607A0;
  *(_QWORD *)(v10 + 48) = 12;
  sub_1B751ED80(v10);
  swift_setDeallocating();
  v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = v39;
  *(_QWORD *)(v11 + 32) = 11;
  v36 = sub_1B751ED80(v11);
  swift_setDeallocating();
  v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_1B75607B0;
  *(_OWORD *)(v12 + 32) = xmmword_1B75607C0;
  *(_QWORD *)(v12 + 48) = 3;
  *(_QWORD *)(v12 + 56) = 104;
  v35 = sub_1B751ED80(v12);
  swift_setDeallocating();
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v38 = v9;
    v14 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v15 = v3;
    v16 = *(_QWORD *)(v3 + 72);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    v18 = *MEMORY[0x1E0D51540];
    LODWORD(v39) = *MEMORY[0x1E0D51530];
    v37 = *MEMORY[0x1E0D51548];
    v34 = *MEMORY[0x1E0D51538];
    v31 = a1;
    swift_bridgeObjectRetain();
    v19 = MEMORY[0x1E0DEE9E8];
    v32 = v15;
    do
    {
      v17(v7, v14, v2);
      v20 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v7, v2);
      if (v20 == v18 || v20 == (_DWORD)v39 || v20 == v37 || v20 == v34)
      {
        v21 = swift_bridgeObjectRetain();
        v19 = sub_1B751E5A4(v21, v19);
      }
      else
      {
        if (qword_1EF171D90 != -1)
          swift_once();
        v22 = sub_1B752FD3C();
        __swift_project_value_buffer(v22, (uint64_t)qword_1EF176DB0);
        v23 = sub_1B752FD24();
        v24 = sub_1B752FE20();
        v33 = v23;
        v25 = v23;
        v26 = v24;
        if (os_log_type_enabled(v25, v24))
        {
          v27 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v27 = 0;
          v28 = v26;
          v29 = v27;
          _os_log_impl(&dword_1B72A3000, v33, v28, "Unhandled or unknown family! Missing mapping to CLKComplicationFamily!", v27, 2u);
          MEMORY[0x1BCCA86C8](v29, -1, -1);
        }

        v15 = v32;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v2);
      }
      v14 += v16;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = MEMORY[0x1E0DEE9E8];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_1B751F26C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;

  sub_1B752FD0C();
  v6 = sub_1B752FD00();
  v7 = sub_1B751EE8C(v6);
  result = swift_bridgeObjectRelease();
  if (*(_QWORD *)(v7 + 16))
  {
    v9 = 0;
    v10 = v7 + 56;
    v11 = 1 << *(_BYTE *)(v7 + 32);
    v12 = -1;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    v13 = v12 & *(_QWORD *)(v7 + 56);
    v14 = (unint64_t)(v11 + 63) >> 6;
    while (1)
    {
      if (v13)
      {
        v15 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v16 = v15 | (v9 << 6);
      }
      else
      {
        v17 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_34;
        }
        if (v17 >= v14)
          goto LABEL_30;
        v18 = *(_QWORD *)(v10 + 8 * v17);
        ++v9;
        if (!v18)
        {
          v9 = v17 + 1;
          if (v17 + 1 >= v14)
            goto LABEL_30;
          v18 = *(_QWORD *)(v10 + 8 * v9);
          if (!v18)
          {
            v9 = v17 + 2;
            if (v17 + 2 >= v14)
              goto LABEL_30;
            v18 = *(_QWORD *)(v10 + 8 * v9);
            if (!v18)
            {
              v9 = v17 + 3;
              if (v17 + 3 >= v14)
                goto LABEL_30;
              v18 = *(_QWORD *)(v10 + 8 * v9);
              if (!v18)
              {
                v9 = v17 + 4;
                if (v17 + 4 >= v14)
                  goto LABEL_30;
                v18 = *(_QWORD *)(v10 + 8 * v9);
                if (!v18)
                {
                  v19 = v17 + 5;
                  if (v19 >= v14)
                  {
LABEL_30:
                    swift_release();
                    return 0;
                  }
                  v18 = *(_QWORD *)(v10 + 8 * v19);
                  if (!v18)
                  {
                    while (1)
                    {
                      v9 = v19 + 1;
                      if (__OFADD__(v19, 1))
                        break;
                      if (v9 >= v14)
                        goto LABEL_30;
                      v18 = *(_QWORD *)(v10 + 8 * v9);
                      ++v19;
                      if (v18)
                        goto LABEL_25;
                    }
                    __break(1u);
                    return result;
                  }
                  v9 = v19;
                }
              }
            }
          }
        }
LABEL_25:
        v13 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v9 << 6);
      }
      if (*(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) == a3)
      {
        swift_release();
        return 1;
      }
    }
  }
  swift_bridgeObjectRelease();
  if (qword_1EF171D90 != -1)
LABEL_34:
    swift_once();
  v20 = sub_1B752FD3C();
  __swift_project_value_buffer(v20, (uint64_t)qword_1EF176DB0);
  swift_bridgeObjectRetain_n();
  v21 = sub_1B752FD24();
  v22 = sub_1B752FE20();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v25 = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain();
    sub_1B751E740(a1, a2, &v25);
    sub_1B752FEB0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B72A3000, v21, v22, "Failed to generate list of supported complication slot families for NanoHome widget kind: %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCA86C8](v24, -1, -1);
    MEMORY[0x1BCCA86C8](v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 0;
}

uint64_t sub_1B751F58C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_1B751F5CC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172048);
  v2 = (_QWORD *)sub_1B752FFAC();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = sub_1B75203B0((uint64_t)v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1B751F6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];

  v24 = a2;
  v3 = sub_1B752FD48();
  v27 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1B752FD60();
  v25 = *(_QWORD *)(v8 - 8);
  v26 = v8;
  MEMORY[0x1E0C80A78](v8, v9, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172060);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x1E0C80A78](v13, v16, v17);
  sub_1B7522044(0, (unint64_t *)&qword_1EF171EC0);
  v18 = (void *)sub_1B752FE38();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
  v19 = (*(unsigned __int8 *)(v14 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v20 + v19, (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  aBlock[4] = sub_1B75220E0;
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B751F990;
  aBlock[3] = &block_descriptor_22;
  v21 = _Block_copy(aBlock);
  sub_1B752FD54();
  v28 = MEMORY[0x1E0DEE9D8];
  sub_1B752212C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172070);
  sub_1B7522174();
  sub_1B752FEC8();
  MEMORY[0x1BCCA6400](0, v12, v7, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v26);
  return swift_release();
}

uint64_t sub_1B751F928(uint64_t a1)
{
  objc_msgSend((id)objc_opt_self(), sel_anyComplicationOfType_, a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172060);
  return sub_1B752FDE4();
}

uint64_t sub_1B751F990(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_1B751F9BC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  _QWORD *v5;
  id v6;
  uint64_t v8;
  id v9;
  void *v10;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172058);
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v10 = a2;
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    v9 = a2;
    sub_1B7521FFC((uint64_t)&v10, v8);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1B751FB90(void *a1, void *a2, void *aBlock)
{
  _QWORD *v3;
  id v6;
  id v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t);

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = _Block_copy(aBlock);
  v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EF172018 + dword_1EF172018);
  v6 = a1;
  v7 = a2;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_1B751FC24;
  return v10((uint64_t)v6, (uint64_t)v7);
}

uint64_t sub_1B751FC24(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD);

  v3 = *v1;
  v5 = *(void **)(*v1 + 16);
  v4 = *(void **)(*v1 + 24);
  v6 = *v1;
  swift_task_dealloc();

  if (a1)
  {
    sub_1B7522044(0, &qword_1EF172020);
    sub_1B7522044(0, &qword_1EF172028);
    sub_1B7521F9C();
    v7 = (void *)sub_1B752FD84();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  v8 = *(void (***)(_QWORD, _QWORD))(v3 + 32);
  ((void (**)(_QWORD, void *))v8)[2](v8, v7);

  _Block_release(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

NTKBundleComplicationMigrationTypeLookupGenerator __swiftcall NTKBundleComplicationMigrationTypeLookupGenerator.init()()
{
  return (NTKBundleComplicationMigrationTypeLookupGenerator)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

id NTKBundleComplicationMigrationTypeLookupGenerator.init()()
{
  objc_super v1;

  v1.super_class = (Class)NTKBundleComplicationMigrationTypeLookupGenerator;
  return objc_msgSendSuper2(&v1, sel_init);
}

uint64_t type metadata accessor for NTKBundleComplicationMigrationTypeLookupGenerator(uint64_t a1)
{
  return sub_1B7522044(a1, &qword_1EF171FE0);
}

uint64_t sub_1B751FDA8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_1B751FDDC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1B751C004;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_1EF171FE8 + dword_1EF171FE8))(v2, v3, v4);
}

uint64_t sub_1B751FE54(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1B751FE64(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1B751FE98(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_1B751C004;
  return v6();
}

uint64_t sub_1B751FEF0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1B751C004;
  return v7();
}

uint64_t sub_1B751FF48(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1B751BF00;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EF172000 + dword_1EF172000))(a1, v4, v5, v6);
}

uint64_t sub_1B751FFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1B752FDFC();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1B752FDF0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1B7520110(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B752FDD8();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1B7520110(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF171E48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B7520150(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1B75201B4;
  return v6(a1);
}

uint64_t sub_1B75201B4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1B7520200()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B7520224(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1B751BF00;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EF172008 + dword_1EF172008))(a1, v4);
}

_QWORD *sub_1B7520294(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172080);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1B7520BBC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_BYTE **sub_1B75203A0(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

unint64_t sub_1B75203B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1B752FE98();
  return sub_1B7520900(a1, v2);
}

uint64_t sub_1B75203E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172048);
    v2 = sub_1B752FFA0();
    v18 = v2;
    sub_1B752FF58();
    v3 = sub_1B752FF70();
    if (v3)
    {
      v4 = v3;
      sub_1B7522044(0, &qword_1EF172020);
      do
      {
        swift_dynamicCast();
        sub_1B7522044(0, &qword_1EF172028);
        swift_dynamicCast();
        v2 = v18;
        v12 = *(_QWORD *)(v18 + 16);
        if (*(_QWORD *)(v18 + 24) <= v12)
        {
          sub_1B7520630(v12 + 1, 1);
          v2 = v18;
        }
        result = sub_1B752FE98();
        v6 = v2 + 64;
        v7 = -1 << *(_BYTE *)(v2 + 32);
        v8 = result & ~v7;
        v9 = v8 >> 6;
        if (((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          v10 = __clz(__rbit64((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v13 = 0;
          v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v15 = v9 == v14;
            if (v9 == v14)
              v9 = 0;
            v13 |= v15;
            v16 = *(_QWORD *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(_QWORD *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        v11 = 8 * v10;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + v11) = v17;
        *(_QWORD *)(*(_QWORD *)(v2 + 56) + v11) = v4;
        ++*(_QWORD *)(v2 + 16);
        v4 = sub_1B752FF70();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E0];
  }
  return v2;
}

uint64_t sub_1B7520630(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172048);
  v6 = sub_1B752FF94();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      v33 = v31;
      v34 = v32;
    }
    result = sub_1B752FE98();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t sub_1B7520900(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1B7522044(0, &qword_1EF172020);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = sub_1B752FEA4();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = sub_1B752FEA4();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

id sub_1B7520A18()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172048);
  v2 = *v0;
  v3 = sub_1B752FF88();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_1B7520BBC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1B752FFB8();
  __break(1u);
  return result;
}

_QWORD *sub_1B7520CA4()
{
  unint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;

  v0 = 0;
  v1 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    if (v0 > 0x38 || ((1 << v0) & 0x1C1000080000001) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v1 = sub_1B7520294(0, v1[2] + 1, 1, v1);
      v3 = v1[2];
      v2 = v1[3];
      if (v3 >= v2 >> 1)
        v1 = sub_1B7520294((_QWORD *)(v2 > 1), v3 + 1, 1, v1);
      v1[2] = v3 + 1;
      v1[v3 + 4] = v0;
    }
    ++v0;
  }
  while (v0 != 59);
  return v1;
}

uint64_t sub_1B7520D78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 144) = a1;
  *(_QWORD *)(v2 + 152) = a2;
  return swift_task_switch();
}

_QWORD *sub_1B7520D90()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;

  v1 = sub_1B751F5CC(MEMORY[0x1E0DEE9D8]);
  if (qword_1EF171D88 != -1)
    swift_once();
  v2 = sub_1B752FD3C();
  *(_QWORD *)(v0 + 160) = __swift_project_value_buffer(v2, (uint64_t)qword_1EF176D98);
  v3 = sub_1B752FD24();
  v4 = sub_1B752FE2C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1B72A3000, v3, v4, "TypeLookupGenerator: Generating NTKComplicationType lookup...", v5, 2u);
    MEMORY[0x1BCCA86C8](v5, -1, -1);
  }

  result = sub_1B7520CA4();
  *(_QWORD *)(v0 + 168) = result;
  v7 = result[2];
  *(_QWORD *)(v0 + 176) = v7;
  if (v7)
  {
    *(_QWORD *)(v0 + 184) = v1;
    *(_QWORD *)(v0 + 192) = 0;
    if (result[2])
    {
      v8 = result[4];
      *(_QWORD *)(v0 + 200) = v8;
      v9 = sub_1B752FD24();
      v10 = sub_1B752FE2C();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = swift_slowAlloc();
        *(_DWORD *)v11 = 134217984;
        *(_QWORD *)(v11 + 4) = v8;
        _os_log_impl(&dword_1B72A3000, v9, v10, "TypeLookupGenerator: type %lu", (uint8_t *)v11, 0xCu);
        MEMORY[0x1BCCA86C8](v11, -1, -1);
      }

      v12 = swift_task_alloc();
      *(_QWORD *)(v0 + 208) = v12;
      *(_QWORD *)(v12 + 16) = v8;
      v13 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 216) = v13;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172038);
      *v13 = v0;
      v13[1] = sub_1B7521034;
      return (_QWORD *)sub_1B752FFC4();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v14 = sub_1B752FD24();
    v15 = sub_1B752FE2C();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1B72A3000, v14, v15, "TypeLookupGenerator: Finished generating NTKComplicationType lookup", v16, 2u);
      MEMORY[0x1BCCA86C8](v16, -1, -1);
    }

    return (_QWORD *)(*(uint64_t (**)(unint64_t))(v0 + 8))(v1);
  }
  return result;
}

uint64_t sub_1B7521034()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_1B7521090()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = *(void **)(v0 + 120);
  *(_QWORD *)(v0 + 224) = v1;
  if (v1)
  {
    v2 = MEMORY[0x1BCCA640C](v1);
    *(_QWORD *)(v0 + 232) = v2;
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v0 + 240) = v3;
    if (v3)
    {
      v4 = (void *)objc_opt_self();
      *(_QWORD *)(v0 + 256) = *(_QWORD *)(v0 + 184);
      *(_QWORD *)(v0 + 264) = 0;
      *(_QWORD *)(v0 + 248) = v4;
      v5 = *(_QWORD *)(v0 + 224);
      *(_QWORD *)(v0 + 272) = *(_QWORD *)(*(_QWORD *)(v0 + 232) + 32);
      v6 = objc_msgSend(v4, sel_requestWithComplication_family_device_, v5);
      *(_QWORD *)(v0 + 280) = v6;
      v7 = v6;
      v8 = sub_1B752FD24();
      v9 = sub_1B752FE2C();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = swift_slowAlloc();
        v11 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v10 = 138412290;
        *(_QWORD *)(v10 + 4) = v7;
        *v11 = v7;

        _os_log_impl(&dword_1B72A3000, v8, v9, "TypeLookupGenerator: request %@", (uint8_t *)v10, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172040);
        swift_arrayDestroy();
        MEMORY[0x1BCCA86C8](v11, -1, -1);
        MEMORY[0x1BCCA86C8](v10, -1, -1);
      }
      else
      {

        v8 = v7;
      }
      v25 = *(void **)(v0 + 144);

      *(_QWORD *)(v0 + 56) = v0 + 128;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1B7521474;
      v26 = swift_continuation_init();
      *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
      v27 = (_QWORD *)(v0 + 80);
      v27[1] = 0x40000000;
      v27[2] = sub_1B751F9BC;
      v27[3] = &block_descriptor;
      v27[4] = v26;
      objc_msgSend(v25, sel_processRequest_completion_, v7, v27);
      swift_continuation_await();
      return;
    }
    v12 = *(_QWORD *)(v0 + 184);
    v13 = *(void **)(v0 + 224);
    swift_bridgeObjectRelease();

  }
  else
  {
    v12 = *(_QWORD *)(v0 + 184);
  }
  v14 = *(_QWORD *)(v0 + 192) + 1;
  if (v14 == *(_QWORD *)(v0 + 176))
  {
    swift_bridgeObjectRelease();
    v15 = sub_1B752FD24();
    v16 = sub_1B752FE2C();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1B72A3000, v15, v16, "TypeLookupGenerator: Finished generating NTKComplicationType lookup", v17, 2u);
      MEMORY[0x1BCCA86C8](v17, -1, -1);
    }

    (*(void (**)(uint64_t))(v0 + 8))(v12);
  }
  else
  {
    *(_QWORD *)(v0 + 184) = v12;
    *(_QWORD *)(v0 + 192) = v14;
    v18 = *(_QWORD *)(v0 + 168);
    if (v14 >= *(_QWORD *)(v18 + 16))
    {
      __break(1u);
    }
    else
    {
      v19 = *(_QWORD *)(v18 + 8 * v14 + 32);
      *(_QWORD *)(v0 + 200) = v19;
      v20 = sub_1B752FD24();
      v21 = sub_1B752FE2C();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc();
        *(_DWORD *)v22 = 134217984;
        *(_QWORD *)(v22 + 4) = v19;
        _os_log_impl(&dword_1B72A3000, v20, v21, "TypeLookupGenerator: type %lu", (uint8_t *)v22, 0xCu);
        MEMORY[0x1BCCA86C8](v22, -1, -1);
      }

      v23 = swift_task_alloc();
      *(_QWORD *)(v0 + 208) = v23;
      *(_QWORD *)(v23 + 16) = v19;
      v24 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 216) = v24;
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172038);
      *v24 = v0;
      v24[1] = sub_1B7521034;
      sub_1B752FFC4();
    }
  }
}

uint64_t sub_1B7521474()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 288) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

void sub_1B75214D4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  char v15;
  uint64_t v16;
  _BOOL8 v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;

  v1 = *(void **)(v0 + 128);
  if (!v1)
  {

    v12 = *(_QWORD **)(v0 + 256);
    goto LABEL_23;
  }
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = objc_allocWithZone((Class)NTKBundleComplicationMigrationTypeLookupKey);
  v6 = v1;
  v7 = objc_msgSend(v5, sel_initWithComplicationType_family_, v4, v2);
  if ((v3 & 0xC000000000000001) != 0)
  {
    if (*(uint64_t *)(v0 + 256) < 0)
      v8 = *(_QWORD *)(v0 + 256);
    else
      v8 = v3 & 0xFFFFFFFFFFFFFF8;
    v9 = v6;
    v10 = sub_1B752FF64();
    if (__OFADD__(v10, 1))
      goto LABEL_18;
    v11 = sub_1B75203E0(v8, v10 + 1);
  }
  else
  {
    v13 = v6;
    v11 = *(_QWORD *)(v0 + 256);
  }
  v5 = (_QWORD *)(v0 + 136);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v0 + 136) = v11;
  v10 = sub_1B75203B0((uint64_t)v7);
  v16 = *(_QWORD *)(v11 + 16);
  v17 = (v15 & 1) == 0;
  v18 = __OFADD__(v16, v17);
  v19 = v16 + v17;
  if (v18)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  LOBYTE(v3) = v15;
  if (*(_QWORD *)(v11 + 24) >= v19)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_15;
LABEL_19:
    v23 = v10;
    sub_1B7520A18();
    v10 = v23;
    v12 = (_QWORD *)*v5;
    if ((v3 & 1) != 0)
      goto LABEL_16;
LABEL_20:
    v12[(v10 >> 6) + 8] |= 1 << v10;
    v24 = 8 * v10;
    *(_QWORD *)(v12[6] + v24) = v7;
    *(_QWORD *)(v12[7] + v24) = v6;
    v25 = v12[2];
    v18 = __OFADD__(v25, 1);
    v26 = v25 + 1;
    if (v18)
    {
      __break(1u);
      goto LABEL_37;
    }
    v12[2] = v26;
    v27 = v7;
    goto LABEL_22;
  }
  sub_1B7520630(v19, isUniquelyReferenced_nonNull_native);
  v10 = sub_1B75203B0((uint64_t)v7);
  if ((v3 & 1) != (v20 & 1))
  {
    sub_1B7522044(0, &qword_1EF172020);
    sub_1B752FFE8();
    return;
  }
LABEL_15:
  v12 = (_QWORD *)*v5;
  if ((v3 & 1) == 0)
    goto LABEL_20;
LABEL_16:
  v21 = v12[7];
  v22 = 8 * v10;

  *(_QWORD *)(v21 + v22) = v6;
LABEL_22:
  v28 = *(void **)(v0 + 280);
  swift_bridgeObjectRelease();

LABEL_23:
  v29 = *(_QWORD *)(v0 + 264) + 1;
  if (v29 != *(_QWORD *)(v0 + 240))
  {
    *(_QWORD *)(v0 + 256) = v12;
    *(_QWORD *)(v0 + 264) = v29;
    v35 = *(void **)(v0 + 248);
    v36 = *(_QWORD *)(v0 + 224);
    *(_QWORD *)(v0 + 272) = *(_QWORD *)(*(_QWORD *)(v0 + 232) + 8 * v29 + 32);
    v37 = objc_msgSend(v35, sel_requestWithComplication_family_device_, v36);
    *(_QWORD *)(v0 + 280) = v37;
    v38 = v37;
    v39 = sub_1B752FD24();
    v40 = sub_1B752FE2C();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc();
      v42 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v41 = 138412290;
      *(_QWORD *)(v41 + 4) = v38;
      *v42 = v38;

      _os_log_impl(&dword_1B72A3000, v39, v40, "TypeLookupGenerator: request %@", (uint8_t *)v41, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172040);
      swift_arrayDestroy();
      MEMORY[0x1BCCA86C8](v42, -1, -1);
      MEMORY[0x1BCCA86C8](v41, -1, -1);
    }
    else
    {

      v39 = v38;
    }
    v50 = *(void **)(v0 + 144);

    *(_QWORD *)(v0 + 56) = v0 + 128;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1B7521474;
    v51 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
    v52 = (_QWORD *)(v0 + 80);
    v52[1] = 0x40000000;
    v52[2] = sub_1B751F9BC;
    v52[3] = &block_descriptor;
    v52[4] = v51;
    objc_msgSend(v50, sel_processRequest_completion_, v38, v52);
    swift_continuation_await();
    return;
  }
  v30 = *(void **)(v0 + 224);
  swift_bridgeObjectRelease();

  v31 = *(_QWORD *)(v0 + 192) + 1;
  if (v31 == *(_QWORD *)(v0 + 176))
  {
    swift_bridgeObjectRelease();
    v32 = sub_1B752FD24();
    v33 = sub_1B752FE2C();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1B72A3000, v32, v33, "TypeLookupGenerator: Finished generating NTKComplicationType lookup", v34, 2u);
      MEMORY[0x1BCCA86C8](v34, -1, -1);
    }

    (*(void (**)(_QWORD *))(v0 + 8))(v12);
    return;
  }
  *(_QWORD *)(v0 + 184) = v12;
  *(_QWORD *)(v0 + 192) = v31;
  v43 = *(_QWORD *)(v0 + 168);
  if (v31 >= *(_QWORD *)(v43 + 16))
  {
LABEL_37:
    __break(1u);
    return;
  }
  v44 = *(_QWORD *)(v43 + 8 * v31 + 32);
  *(_QWORD *)(v0 + 200) = v44;
  v45 = sub_1B752FD24();
  v46 = sub_1B752FE2C();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = swift_slowAlloc();
    *(_DWORD *)v47 = 134217984;
    *(_QWORD *)(v47 + 4) = v44;
    _os_log_impl(&dword_1B72A3000, v45, v46, "TypeLookupGenerator: type %lu", (uint8_t *)v47, 0xCu);
    MEMORY[0x1BCCA86C8](v47, -1, -1);
  }

  v48 = swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v48;
  *(_QWORD *)(v48 + 16) = v44;
  v49 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v49;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172038);
  *v49 = v0;
  v49[1] = sub_1B7521034;
  sub_1B752FFC4();
}

void sub_1B7521A84()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;

  v2 = *(void **)(v0 + 280);
  v1 = *(void **)(v0 + 288);
  swift_willThrow();
  v3 = v2;
  v4 = v1;
  v5 = v3;
  v6 = v1;
  v7 = sub_1B752FD24();
  v8 = sub_1B752FE20();
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(NSObject **)(v0 + 280);
  v10 = *(void **)(v0 + 288);
  if (v9)
  {
    v12 = swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v12 = 138412546;
    *(_QWORD *)(v12 + 4) = v11;
    *v13 = v11;

    *(_WORD *)(v12 + 12) = 2112;
    v14 = v10;
    v15 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v12 + 14) = v15;
    v13[1] = v15;

    _os_log_impl(&dword_1B72A3000, v7, v8, "TypeLookupGenerator: Error fetching request %@: %@", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172040);
    swift_arrayDestroy();
    MEMORY[0x1BCCA86C8](v13, -1, -1);
    MEMORY[0x1BCCA86C8](v12, -1, -1);

  }
  else
  {

    v11 = v7;
  }

  v16 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 264) + 1;
  if (v17 == *(_QWORD *)(v0 + 240))
  {
    v18 = *(void **)(v0 + 224);
    swift_bridgeObjectRelease();

    v19 = *(_QWORD *)(v0 + 192) + 1;
    if (v19 == *(_QWORD *)(v0 + 176))
    {
      swift_bridgeObjectRelease();
      v20 = sub_1B752FD24();
      v21 = sub_1B752FE2C();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v22 = 0;
        _os_log_impl(&dword_1B72A3000, v20, v21, "TypeLookupGenerator: Finished generating NTKComplicationType lookup", v22, 2u);
        MEMORY[0x1BCCA86C8](v22, -1, -1);
      }

      (*(void (**)(uint64_t))(v0 + 8))(v16);
    }
    else
    {
      *(_QWORD *)(v0 + 184) = v16;
      *(_QWORD *)(v0 + 192) = v19;
      v31 = *(_QWORD *)(v0 + 168);
      if (v19 >= *(_QWORD *)(v31 + 16))
      {
        __break(1u);
      }
      else
      {
        v32 = *(_QWORD *)(v31 + 8 * v19 + 32);
        *(_QWORD *)(v0 + 200) = v32;
        v33 = sub_1B752FD24();
        v34 = sub_1B752FE2C();
        if (os_log_type_enabled(v33, v34))
        {
          v35 = swift_slowAlloc();
          *(_DWORD *)v35 = 134217984;
          *(_QWORD *)(v35 + 4) = v32;
          _os_log_impl(&dword_1B72A3000, v33, v34, "TypeLookupGenerator: type %lu", (uint8_t *)v35, 0xCu);
          MEMORY[0x1BCCA86C8](v35, -1, -1);
        }

        v36 = swift_task_alloc();
        *(_QWORD *)(v0 + 208) = v36;
        *(_QWORD *)(v36 + 16) = v32;
        v37 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 216) = v37;
        __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172038);
        *v37 = v0;
        v37[1] = sub_1B7521034;
        sub_1B752FFC4();
      }
    }
  }
  else
  {
    *(_QWORD *)(v0 + 256) = v16;
    *(_QWORD *)(v0 + 264) = v17;
    v23 = *(void **)(v0 + 248);
    v24 = *(_QWORD *)(v0 + 224);
    *(_QWORD *)(v0 + 272) = *(_QWORD *)(*(_QWORD *)(v0 + 232) + 8 * v17 + 32);
    v25 = objc_msgSend(v23, sel_requestWithComplication_family_device_, v24);
    *(_QWORD *)(v0 + 280) = v25;
    v26 = v25;
    v27 = sub_1B752FD24();
    v28 = sub_1B752FE2C();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v30 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v29 = 138412290;
      *(_QWORD *)(v29 + 4) = v26;
      *v30 = v26;

      _os_log_impl(&dword_1B72A3000, v27, v28, "TypeLookupGenerator: request %@", (uint8_t *)v29, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172040);
      swift_arrayDestroy();
      MEMORY[0x1BCCA86C8](v30, -1, -1);
      MEMORY[0x1BCCA86C8](v29, -1, -1);
    }
    else
    {

      v27 = v26;
    }
    v38 = *(void **)(v0 + 144);

    *(_QWORD *)(v0 + 56) = v0 + 128;
    *(_QWORD *)(v0 + 16) = v0;
    *(_QWORD *)(v0 + 24) = sub_1B7521474;
    v39 = swift_continuation_init();
    *(_QWORD *)(v0 + 80) = MEMORY[0x1E0C809B0];
    v40 = (_QWORD *)(v0 + 80);
    v40[1] = 0x40000000;
    v40[2] = sub_1B751F9BC;
    v40[3] = &block_descriptor;
    v40[4] = v39;
    objc_msgSend(v38, sel_processRequest_completion_, v26, v40);
    swift_continuation_await();
  }
}

unint64_t sub_1B7521F9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF172030;
  if (!qword_1EF172030)
  {
    v1 = sub_1B7522044(255, &qword_1EF172020);
    result = MEMORY[0x1BCCA8650](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1EF172030);
  }
  return result;
}

uint64_t sub_1B7521FF4(uint64_t a1)
{
  uint64_t v1;

  return sub_1B751F6D4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B7521FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172050);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B7522044(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1B752207C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172060);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1B75220E0()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF172060);
  return sub_1B751F928(*(_QWORD *)(v0 + 16));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_1B752212C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF172068;
  if (!qword_1EF172068)
  {
    v1 = sub_1B752FD48();
    result = MEMORY[0x1BCCA8650](MEMORY[0x1E0DEF510], v1);
    atomic_store(result, (unint64_t *)&qword_1EF172068);
  }
  return result;
}

unint64_t sub_1B7522174()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF172078;
  if (!qword_1EF172078)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF172070);
    result = MEMORY[0x1BCCA8650](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EF172078);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1BCCA8644](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1B7522204()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self();
}

void NTKArgonExtractorReportExtractionFailure_cold_1()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[14];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = v0;
  OUTLINED_FUNCTION_2(&dword_1B72A3000, v1, (uint64_t)v1, "Making temp directory at %@ failed - %@", v2);
  OUTLINED_FUNCTION_1();
}

void NTKCleanUpForBridgeRemoval_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_1B72A3000, a2, a3, "error removing NTK cache directory: %@", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void NTKCleanUpForBridgeRemoval_cold_2(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_1B72A3000, a2, a3, "error removing NTK home directory: %@", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

uint64_t __getNSSComplicationDataSourceClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return +[NTKPhoto decodeFromDictionary:forResourceDirectory:].cold.1(v0);
}

void _LayoutConstants_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = 136315394;
  v3 = "const LayoutConstants _LayoutConstants(CLKDevice *__strong, CLKComplicationFamily)";
  v4 = 2048;
  v5 = a1;
  _os_log_error_impl(&dword_1B72A3000, a2, OS_LOG_TYPE_ERROR, "Unhandled complication family in %s constants: %ld", (uint8_t *)&v2, 0x16u);
}

void create_zip_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_3_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_6(&dword_1B72A3000, v0, v1, "%s, error in archive_read_disk_open(): %d, %s", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_2();
}

void create_zip_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_3_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_6(&dword_1B72A3000, v0, v1, "%s, error in archive_write_open_filename(): %d, %s", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_2();
}

void extract_zip_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_3_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_6(&dword_1B72A3000, v0, v1, "%s, error in archive_read_next_header(): %d, %s", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_2();
}

void extract_zip_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_0_1(&dword_1B72A3000, v0, v1, "%s, error: absolute path name in archive: %s", v2, v3, v4, v5, 2u);
}

void extract_zip_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_0_1(&dword_1B72A3000, v0, v1, "%s, error: file name too long %s", v2, v3, v4, v5, 2u);
}

void extract_zip_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_3_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_6(&dword_1B72A3000, v0, v1, "%s, error in archive_read_data_block(): %d, %s", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_2();
}

void extract_zip_cold_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_3_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_6(&dword_1B72A3000, v0, v1, "%s, error in archive_write_data_block(): %d, %s", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_2();
}

void extract_zip_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_3_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_6(&dword_1B72A3000, v0, v1, "%s, error in archive_write_header(): %d, %s", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_2();
}

void extract_zip_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_3_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_6(&dword_1B72A3000, v0, v1, "%s, error in archive_read_open_filename(): %d, %s", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_2_2();
}

void __getINAppInfoClass_block_invoke_cold_1()
{
  abort_report_np();
  __NTKGPUIsEnabled_block_invoke_cold_1();
}

void NTKRaiseInternalException_cold_1(void *a1, NSObject *a2)
{
  uint64_t v3;
  uint8_t v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  objc_msgSend(objc_retainAutorelease(a1), "UTF8String");
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_0_4(&dword_1B72A3000, a2, v3, "Internal exception: %s", v4);
  OUTLINED_FUNCTION_4();
}

void _NTKGenerateSimulatedCrash_cold_2(void *a1, NSObject *a2)
{
  uint64_t v3;
  uint8_t v4[24];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  objc_msgSend(objc_retainAutorelease(a1), "UTF8String");
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_0_4(&dword_1B72A3000, a2, v3, "Simulated exception: %s", v4);
  OUTLINED_FUNCTION_4();
}

void NTKCanAddWatchFace_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_5(&dword_1B72A3000, v0, v1, "NTKCanAddWatchFace: Can't add watchface because watchFace is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5_1();
}

void NTKCanAddWatchFace_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_5(&dword_1B72A3000, v0, v1, "NTKCanAddWatchFace: Can't add watchface because nrDevice is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5_1();
}

void NTKCanAddWatchFace_cold_3(void *a1, NSObject *a2)
{
  void *v4;
  id v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = (void *)objc_opt_class();
  v5 = v4;
  objc_msgSend(a1, "device");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 138412546;
  v8 = v4;
  v9 = 2112;
  v10 = v6;
  _os_log_error_impl(&dword_1B72A3000, a2, OS_LOG_TYPE_ERROR, "NTKCanAddWatchFace: Can't add watchface because [watchface class]:%@ isRestrictedForDevice:%@", (uint8_t *)&v7, 0x16u);

}

void NTKCanAddWatchFace_cold_4(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  NTKFaceStyleDescription(objc_msgSend(a1, "faceStyle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_0_4(&dword_1B72A3000, a2, v4, "NTKCanAddWatchFace: Can't add watchface because watchface:%@ isn't available", v5);

  OUTLINED_FUNCTION_4();
}

void NTKCanAddWatchFace_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_5(&dword_1B72A3000, v0, v1, "NTKCanAddWatchFace: Can't add watchface because library is full", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5_1();
}

void NTKCanAddWatchFace_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_5(&dword_1B72A3000, v0, v1, "NTKCanAddWatchFace: Can't add watchface because face must be singular", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5_1();
}

void NTKCanAddWatchFace_cold_7(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  OUTLINED_FUNCTION_0_4(&dword_1B72A3000, a3, (uint64_t)a3, "NTKCanAddWatchFace: Can't add watchface because complication:%@ needs OS Update", (uint8_t *)a2);

}

void NTKCanAddWatchFace_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_5(&dword_1B72A3000, v0, v1, "NTKCanAddWatchFace: Can't add watchface because library hasn't loaded", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5_1();
}

void NTKCanAddWatchFace_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_0_4(&dword_1B72A3000, v0, v1, "NTKCanAddWatchFace: Can't add watchface because face descriptor:%@ isn't compatible with hardware", v2);
}

void NTKCanAddWatchFace_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_5(&dword_1B72A3000, v0, v1, "NTKCanAddWatchFace: Can't add watchface because canCustomizeNRDevice returned false", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5_1();
}

void NTKCanAddWatchFace_cold_11()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_5(&dword_1B72A3000, v0, v1, "NTKCanAddWatchFace: Can't add watchface because watchFace is not valid configuration", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5_1();
}

void NTKBundleComplicationDataSourceClassesFromBundle_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_1B72A3000, a2, OS_LOG_TYPE_ERROR, "No principal class provided for bundle: %@", (uint8_t *)&v2, 0xCu);
}

void NTKRenderSnapshotAndTextureFromWindow_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_5(&dword_1B72A3000, v0, v1, "Failed to create CGI image from CA render server buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5_1();
}

void NTKRenderSnapshotAndTextureFromWindow_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_5(&dword_1B72A3000, v0, v1, "Failed to get IOSurface", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5_1();
}

void NTKRenderSnapshotAndTextureFromWindow_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_5(&dword_1B72A3000, v0, v1, "Failed to render", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5_1();
}

void NTKCropHorizontalPaddingFromSnapshot_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_5(&dword_1B72A3000, v0, v1, "unable to create bitmap context for snapshot", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5_1();
}

void NTKCropHorizontalPaddingFromSnapshot_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_2();
  OUTLINED_FUNCTION_5(&dword_1B72A3000, v0, v1, "cropped image is invalid, CGImage is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_5_1();
}

void NTKCachedSnapshotForFace_cold_1(uint64_t a1, _QWORD *a2, NSObject *a3)
{
  _BYTE v3[24];

  *(_DWORD *)v3 = 138412546;
  *(_QWORD *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2112;
  *(_QWORD *)&v3[14] = *a2;
  OUTLINED_FUNCTION_0_0(&dword_1B72A3000, (uint64_t)a2, a3, "File %@ couldn't get plist %@", *(_QWORD *)v3, *(_QWORD *)&v3[8], *(_QWORD *)&v3[16]);
  OUTLINED_FUNCTION_1();
}

void NTKCachedSnapshotForFace_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_0(&dword_1B72A3000, v0, v1, "File %@ couldn't unarchive snapshot %@");
  OUTLINED_FUNCTION_1();
}

void NTKCachedSnapshotForFace_cold_3()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_0(&dword_1B72A3000, v0, v1, "File %@ couldn't be removed %@");
  OUTLINED_FUNCTION_1();
}

void NTKCachedSnapshotForFace_cold_4()
{
  os_log_t v0;
  uint8_t v1[24];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_10();
  _os_log_fault_impl(&dword_1B72A3000, v0, OS_LOG_TYPE_FAULT, "File %@ exception while reading, removing… %@", v1, 0x16u);
  OUTLINED_FUNCTION_1();
}

void NTKCacheSnapshotOfFace_cold_1(uint64_t a1, NSObject *a2)
{
  int *v4;
  char *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = __error();
  v5 = strerror(*v4);
  v6 = 138412546;
  v7 = a1;
  v8 = 2080;
  v9 = v5;
  _os_log_error_impl(&dword_1B72A3000, a2, OS_LOG_TYPE_ERROR, "can't open %@ : %s\n", (uint8_t *)&v6, 0x16u);
}

void NTKDFaceConfigurationFromPayloadData_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138543362;
  v3 = a1;
  _os_log_debug_impl(&dword_1B72A3000, a2, OS_LOG_TYPE_DEBUG, "payload json data: %{public}@", (uint8_t *)&v2, 0xCu);
}

void NTKDOrderedUUIDsFromPayloadData_cold_1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_2_4(v1, v2, 5.7779e-34);
  OUTLINED_FUNCTION_0_6(&dword_1B72A3000, v3, v4, "Unable to convert payload data to array of UUIDS: %@", v5);

  OUTLINED_FUNCTION_2_0();
}

void NTKDClientSampleDataFromPayloadData_cold_1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_2_4(v1, v2, 5.7779e-34);
  OUTLINED_FUNCTION_0_6(&dword_1B72A3000, v3, v4, "Unable to convert payload data to NTKComplicationSampleData: %@", v5);

  OUTLINED_FUNCTION_2_0();
}

void NTKDClientSampleTemplateFromPayloadData_cold_1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_2_4(v1, v2, 5.7779e-34);
  OUTLINED_FUNCTION_0_6(&dword_1B72A3000, v3, v4, "Unable to convert payload data to CLKComplicationTemplate: %@", v5);

  OUTLINED_FUNCTION_2_0();
}

void NTKDComplicationDescriptorsFromPayloadData_cold_1()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  os_log_t v4;
  uint8_t *v5;

  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_2_4(v1, v2, 5.7779e-34);
  OUTLINED_FUNCTION_0_6(&dword_1B72A3000, v3, v4, "Unable to convert payload data to NSArray<CLKComplicationDescriptor>: %@", v5);

  OUTLINED_FUNCTION_2_0();
}

void NTKDPayloadDataFromFaceConfiguration_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 138543618;
  v4 = a1;
  v5 = 2114;
  v6 = a2;
  _os_log_debug_impl(&dword_1B72A3000, log, OS_LOG_TYPE_DEBUG, "payload json data: %{public}@ - face %{public}@", (uint8_t *)&v3, 0x16u);
}

void _createArchive_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_1B72A3000, a1, a3, "%s: destination zip archive cannot be nil", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void _createArchive_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_1B72A3000, a1, a3, "%s: source directory cannot be nil", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void _createArchive_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_0_1(&dword_1B72A3000, v0, v1, "%s: invalid (nil) filename in %@", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void NTKBundleComplicationMigrationServiceSetLookupVersion_cold_1(uint64_t a1, NSObject *a2)
{
  int *v4;
  char *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = __error();
  v5 = strerror(*v4);
  v6 = 138412546;
  v7 = a1;
  v8 = 2080;
  v9 = v5;
  _os_log_error_impl(&dword_1B72A3000, a2, OS_LOG_TYPE_ERROR, "Failed to set xattr on %@: %s", (uint8_t *)&v6, 0x16u);
}

void NTKIsBridgeInstalled_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_0(&dword_1B72A3000, v0, v1, "Couldn't find bridge record - %@", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void NTKDDataFromFace_cold_1(void *a1, uint64_t a2, NSObject *a3)
{
  uint8_t v5[12];
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "faceStyle");
  OUTLINED_FUNCTION_3_0();
  v6 = 2114;
  v7 = a2;
  _os_log_error_impl(&dword_1B72A3000, a3, OS_LOG_TYPE_ERROR, "Failed to archive face to json data. Face style: %lu - error: %{public}@", v5, 0x16u);
}

void NTKFaceBundleClassesFromBundle_cold_1(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3 = 138412290;
  v4 = a1;
  OUTLINED_FUNCTION_0_4(&dword_1B72A3000, a2, a3, "No principal class provided for bundle: %@", (uint8_t *)&v3);
}

void _NTKSubmitCommonAnalyticsForAddFaceAndEarlyExitEvents_cold_1(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a2, "distributionMechanism");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 138412802;
  v7 = 0;
  v8 = 2112;
  v9 = a1;
  v10 = 2112;
  v11 = v5;
  _os_log_error_impl(&dword_1B72A3000, a3, OS_LOG_TYPE_ERROR, "_NTKSubmitCommonAnalyticsForAddFaceAndEarlyExitEvents face is nil: %@, shareMetricName: %@, distributionMechanism: %@", (uint8_t *)&v6, 0x20u);

}

void NTKUpNextFileRadarWithData_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl(&dword_1B72A3000, a2, OS_LOG_TYPE_ERROR, "Unable to write log file: %@", (uint8_t *)&v2, 0xCu);
}

void NTKFaceArgonSupportCreateAttachmentWithImageData_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_0(&dword_1B72A3000, v0, v1, "Could not make image attachment for %@ - %@");
  OUTLINED_FUNCTION_1();
}

void NTKFaceArgonSupportCreateAttachmentWithImageData_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_0(&dword_1B72A3000, v0, v1, "Could not write to file %@ - %@");
  OUTLINED_FUNCTION_1();
}

void NTKPhotosCreateResourceDirectory_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_1B72A3000, a2, a3, "NTKPhotosCreateResourceDirectory: cannot create path at %@", a5, a6, a7, a8, 2u);
}

void NTKPhotosWriteImageListWithVersionForAssetCollection_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_1B72A3000, a2, a3, "NTKPhotosWriteImageListForAssetCollection: cannot write the image list to %@", a5, a6, a7, a8, 2u);
}

void NTKPhotosImageForURL_cold_1(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "path");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 138412546;
  v7 = v5;
  v8 = 2112;
  v9 = a2;
  _os_log_error_impl(&dword_1B72A3000, a3, OS_LOG_TYPE_ERROR, "NTKPhotosImageForURL: Failed to get file for image %@, error = %@", (uint8_t *)&v6, 0x16u);

}

void cropCompositionFor_cold_1(_OWORD *a1)
{
  __int128 v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGAffineTransform v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = a1[1];
  *(_OWORD *)&v9.a = *a1;
  *(_OWORD *)&v9.c = v1;
  *(_OWORD *)&v9.tx = a1[2];
  NSStringFromCGAffineTransform(&v9);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_3(&dword_1B72A3000, v3, v4, "naturalPreferredTransform: unrecognized preferred transform (%@). The resulting video may be (part) black\n", v5, v6, v7, v8, LOBYTE(v9.a));

}

void cropCompositionFor_cold_2()
{
  __assert_rtn("cropCompositionFor", "NTKCompanionIrisVideoExportSession.m", 244, "(composition.tracks.count == 1) && [composition.tracks[0].mediaType isEqualToString:AVMediaTypeVideo]");
}

void _NTKAllAvailableFaceDescriptorsForDevice_cold_1(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_1B72A3000, log, OS_LOG_TYPE_FAULT, "Invalid_NanoTimeKit_API_Use: A non-whitelisted process was loading _all_ faces. Please try to use other APIs to keep memory footprints down.", v1, 2u);
}

uint64_t sub_1B752FB44()
{
  return MEMORY[0x1E0C905B8]();
}

uint64_t sub_1B752FB50()
{
  return MEMORY[0x1E0C90688]();
}

uint64_t sub_1B752FB5C()
{
  return MEMORY[0x1E0CB0930]();
}

uint64_t sub_1B752FB68()
{
  return MEMORY[0x1E0CB0958]();
}

uint64_t sub_1B752FB74()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t sub_1B752FB80()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_1B752FB8C()
{
  return MEMORY[0x1E0D51420]();
}

uint64_t sub_1B752FB98()
{
  return MEMORY[0x1E0D51428]();
}

uint64_t sub_1B752FBA4()
{
  return MEMORY[0x1E0D51438]();
}

uint64_t sub_1B752FBB0()
{
  return MEMORY[0x1E0D51440]();
}

uint64_t sub_1B752FBBC()
{
  return MEMORY[0x1E0D51448]();
}

uint64_t sub_1B752FBC8()
{
  return MEMORY[0x1E0D51450]();
}

uint64_t sub_1B752FBD4()
{
  return MEMORY[0x1E0D51458]();
}

uint64_t sub_1B752FBE0()
{
  return MEMORY[0x1E0D51460]();
}

uint64_t sub_1B752FBEC()
{
  return MEMORY[0x1E0D51468]();
}

uint64_t sub_1B752FBF8()
{
  return MEMORY[0x1E0D51470]();
}

uint64_t sub_1B752FC04()
{
  return MEMORY[0x1E0D51478]();
}

uint64_t sub_1B752FC10()
{
  return MEMORY[0x1E0D51480]();
}

uint64_t sub_1B752FC1C()
{
  return MEMORY[0x1E0D51488]();
}

uint64_t sub_1B752FC28()
{
  return MEMORY[0x1E0D51490]();
}

uint64_t sub_1B752FC34()
{
  return MEMORY[0x1E0D51498]();
}

uint64_t sub_1B752FC40()
{
  return MEMORY[0x1E0D514A8]();
}

uint64_t sub_1B752FC4C()
{
  return MEMORY[0x1E0D514B0]();
}

uint64_t sub_1B752FC58()
{
  return MEMORY[0x1E0D514B8]();
}

uint64_t sub_1B752FC64()
{
  return MEMORY[0x1E0D514C0]();
}

uint64_t sub_1B752FC70()
{
  return MEMORY[0x1E0D514C8]();
}

uint64_t sub_1B752FC7C()
{
  return MEMORY[0x1E0D514D0]();
}

uint64_t sub_1B752FC88()
{
  return MEMORY[0x1E0D514D8]();
}

uint64_t sub_1B752FC94()
{
  return MEMORY[0x1E0D514E0]();
}

uint64_t sub_1B752FCA0()
{
  return MEMORY[0x1E0D514E8]();
}

uint64_t sub_1B752FCAC()
{
  return MEMORY[0x1E0D514F0]();
}

uint64_t sub_1B752FCB8()
{
  return MEMORY[0x1E0D514F8]();
}

uint64_t sub_1B752FCC4()
{
  return MEMORY[0x1E0D51508]();
}

uint64_t sub_1B752FCD0()
{
  return MEMORY[0x1E0D51510]();
}

uint64_t sub_1B752FCDC()
{
  return MEMORY[0x1E0D51520]();
}

uint64_t sub_1B752FCE8()
{
  return MEMORY[0x1E0D51528]();
}

uint64_t sub_1B752FCF4()
{
  return MEMORY[0x1E0D51550]();
}

uint64_t sub_1B752FD00()
{
  return MEMORY[0x1E0D51558]();
}

uint64_t sub_1B752FD0C()
{
  return MEMORY[0x1E0D51560]();
}

uint64_t sub_1B752FD18()
{
  return MEMORY[0x1E0D51570]();
}

uint64_t sub_1B752FD24()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_1B752FD30()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t sub_1B752FD3C()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_1B752FD48()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t sub_1B752FD54()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t sub_1B752FD60()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t sub_1B752FD6C()
{
  return MEMORY[0x1E0DEF748]();
}

uint64_t sub_1B752FD78()
{
  return MEMORY[0x1E0DEF778]();
}

uint64_t sub_1B752FD84()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1B752FD90()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_1B752FD9C()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1B752FDA8()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1B752FDB4()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1B752FDC0()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1B752FDCC()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1B752FDD8()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_1B752FDE4()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t sub_1B752FDF0()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t sub_1B752FDFC()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t sub_1B752FE08()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_1B752FE14()
{
  return MEMORY[0x1E0CB1C10]();
}

uint64_t sub_1B752FE20()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1B752FE2C()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t sub_1B752FE38()
{
  return MEMORY[0x1E0DEF8E8]();
}

uint64_t sub_1B752FE44()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t sub_1B752FE50()
{
  return MEMORY[0x1E0C93E40]();
}

uint64_t sub_1B752FE5C()
{
  return MEMORY[0x1E0D51578]();
}

uint64_t sub_1B752FE68()
{
  return MEMORY[0x1E0D51580]();
}

uint64_t sub_1B752FE74()
{
  return MEMORY[0x1E0D51588]();
}

uint64_t sub_1B752FE80()
{
  return MEMORY[0x1E0D51598]();
}

uint64_t sub_1B752FE8C()
{
  return MEMORY[0x1E0D515A8]();
}

uint64_t sub_1B752FE98()
{
  return MEMORY[0x1E0DEFCD8]();
}

uint64_t sub_1B752FEA4()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t sub_1B752FEB0()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1B752FEBC()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1B752FEC8()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_1B752FED4()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_1B752FEE0()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_1B752FEEC()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_1B752FEF8()
{
  return MEMORY[0x1E0DEC260]();
}

uint64_t sub_1B752FF04()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1B752FF10()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1B752FF1C()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_1B752FF28()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_1B752FF34()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_1B752FF40()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_1B752FF4C()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_1B752FF58()
{
  return MEMORY[0x1E0DECB40]();
}

uint64_t sub_1B752FF64()
{
  return MEMORY[0x1E0DECB80]();
}

uint64_t sub_1B752FF70()
{
  return MEMORY[0x1E0DECBB8]();
}

uint64_t sub_1B752FF7C()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1B752FF88()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1B752FF94()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1B752FFA0()
{
  return MEMORY[0x1E0DECD48]();
}

uint64_t sub_1B752FFAC()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1B752FFB8()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1B752FFC4()
{
  return MEMORY[0x1E0DF0DD0]();
}

uint64_t sub_1B752FFD0()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t sub_1B752FFDC()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_1B752FFE8()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1B752FFF4()
{
  return MEMORY[0x1E0DEDEF0]();
}

void AAArchiveStreamCancel(AAArchiveStream s)
{
  MEMORY[0x1E0DDE368](s);
}

int AAArchiveStreamClose(AAArchiveStream s)
{
  return MEMORY[0x1E0DDE370](s);
}

ssize_t AAArchiveStreamProcess(AAArchiveStream istream, AAArchiveStream ostream, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return MEMORY[0x1E0DDE378](istream, ostream, msg_data, msg_proc, flags, *(_QWORD *)&n_threads);
}

int AAArchiveStreamReadHeader(AAArchiveStream s, AAHeader *header)
{
  return MEMORY[0x1E0DDE388](s, header);
}

int AAByteStreamClose(AAByteStream s)
{
  return MEMORY[0x1E0DDE3B0](s);
}

AAArchiveStream AACustomArchiveStreamOpen(void)
{
  return (AAArchiveStream)MEMORY[0x1E0DDE3E0]();
}

void AACustomArchiveStreamSetCancelProc(AAArchiveStream s, AAArchiveStreamCancelProc proc)
{
  MEMORY[0x1E0DDE3E8](s, proc);
}

void AACustomArchiveStreamSetCloseProc(AAArchiveStream s, AAArchiveStreamCloseProc proc)
{
  MEMORY[0x1E0DDE3F0](s, proc);
}

void AACustomArchiveStreamSetData(AAArchiveStream s, void *data)
{
  MEMORY[0x1E0DDE3F8](s, data);
}

void AACustomArchiveStreamSetWriteBlobProc(AAArchiveStream s, AAArchiveStreamWriteBlobProc proc)
{
  MEMORY[0x1E0DDE400](s, proc);
}

void AACustomArchiveStreamSetWriteHeaderProc(AAArchiveStream s, AAArchiveStreamWriteHeaderProc proc)
{
  MEMORY[0x1E0DDE408](s, proc);
}

AAArchiveStream AADecodeArchiveInputStreamOpen(AAByteStream stream, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return (AAArchiveStream)MEMORY[0x1E0DDE410](stream, msg_data, msg_proc, flags, *(_QWORD *)&n_threads);
}

AAArchiveStream AAExtractArchiveOutputStreamOpen(const char *dir, void *msg_data, AAEntryMessageProc msg_proc, AAFlagSet flags, int n_threads)
{
  return (AAArchiveStream)MEMORY[0x1E0DDE428](dir, msg_data, msg_proc, flags, *(_QWORD *)&n_threads);
}

AAFieldKeySet AAFieldKeySetCreateWithString(const char *s)
{
  return (AAFieldKeySet)MEMORY[0x1E0DDE430](s);
}

void AAFieldKeySetDestroy(AAFieldKeySet key_set)
{
  MEMORY[0x1E0DDE438](key_set);
}

int AAFieldKeySetSerialize(AAFieldKeySet key_set, size_t capacity, char *s)
{
  return MEMORY[0x1E0DDE440](key_set, capacity, s);
}

AAByteStream AAFileStreamOpenWithPath(const char *path, int open_flags, mode_t open_mode)
{
  return (AAByteStream)MEMORY[0x1E0DDE450](path, *(_QWORD *)&open_flags, open_mode);
}

int AAHeaderGetFieldString(AAHeader header, uint32_t i, size_t capacity, char *value, size_t *length)
{
  return MEMORY[0x1E0DDE470](header, *(_QWORD *)&i, capacity, value, length);
}

int AAHeaderGetFieldUInt(AAHeader header, uint32_t i, uint64_t *value)
{
  return MEMORY[0x1E0DDE478](header, *(_QWORD *)&i, value);
}

int AAHeaderGetKeyIndex(AAHeader header, AAFieldKey key)
{
  return MEMORY[0x1E0DDE480](header, *(_QWORD *)key.skey);
}

uint64_t AAHeaderGetPayloadSize(AAHeader header)
{
  return MEMORY[0x1E0DDE488](header);
}

uint64_t AAVerifyDirectoryArchiveOutputStreamOpen()
{
  return MEMORY[0x1E0DDE4C0]();
}

AEAContext AEAContextCreateWithEncryptedStream(AAByteStream encrypted_stream)
{
  return (AEAContext)MEMORY[0x1E0DDE508](encrypted_stream);
}

void AEAContextDestroy(AEAContext context)
{
  MEMORY[0x1E0DDE518](context);
}

int AEAContextSetFieldBlob(AEAContext context, AEAContextField field, AEAContextFieldRepresentation representation, const uint8_t *buf, size_t buf_size)
{
  return MEMORY[0x1E0DDE528](context, *(_QWORD *)&field, *(_QWORD *)&representation, buf, buf_size);
}

AAByteStream AEADecryptionInputStreamOpen(AAByteStream encrypted_stream, AEAContext context, AAFlagSet flags, int n_threads)
{
  return (AAByteStream)MEMORY[0x1E0DDE538](encrypted_stream, context, flags, *(_QWORD *)&n_threads);
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1E0D15420]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

uint64_t AudioServicesPlaySystemSoundWithOptions()
{
  return MEMORY[0x1E0C92160]();
}

uint64_t BOMCopierCopyWithOptions()
{
  return MEMORY[0x1E0D034A8]();
}

uint64_t BOMCopierFree()
{
  return MEMORY[0x1E0D034B8]();
}

uint64_t BOMCopierNew()
{
  return MEMORY[0x1E0D034C0]();
}

uint64_t BPSApplyStyleToNavBarOptions()
{
  return MEMORY[0x1E0D03550]();
}

uint64_t BPSApplyStyleToToolbar()
{
  return MEMORY[0x1E0D03558]();
}

uint64_t BPSBackgroundColor()
{
  return MEMORY[0x1E0D03560]();
}

uint64_t BPSBridgeTintColor()
{
  return MEMORY[0x1E0D03568]();
}

uint64_t BPSCellHightlightColor()
{
  return MEMORY[0x1E0D03570]();
}

uint64_t BPSDetailTextColor()
{
  return MEMORY[0x1E0D03578]();
}

uint64_t BPSDeviceHasCapabilityForString()
{
  return MEMORY[0x1E0D03580]();
}

uint64_t BPSForegroundColor()
{
  return MEMORY[0x1E0D03588]();
}

uint64_t BPSScreenValueGetRelevantValue()
{
  return MEMORY[0x1E0D035B8]();
}

uint64_t BPSSeparatorColor()
{
  return MEMORY[0x1E0D035C0]();
}

uint64_t BPSSetupTintColor()
{
  return MEMORY[0x1E0D035D0]();
}

uint64_t BPSTextColor()
{
  return MEMORY[0x1E0D035E0]();
}

uint64_t BSCurrentUserDirectory()
{
  return MEMORY[0x1E0D01178]();
}

uint64_t BSDispatchMain()
{
  return MEMORY[0x1E0D01208]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  CFTimeInterval result;

  MEMORY[0x1E0CD2388]();
  return result;
}

uint64_t CARenderServerRenderDisplayClientListWithTransformList()
{
  return MEMORY[0x1E0CD25A8]();
}

CATransform3D *__cdecl CATransform3DMakeAffineTransform(CATransform3D *__return_ptr retstr, CGAffineTransform *m)
{
  return (CATransform3D *)MEMORY[0x1E0CD2630](retstr, m);
}

CATransform3D *__cdecl CATransform3DMakeRotation(CATransform3D *__return_ptr retstr, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  return (CATransform3D *)MEMORY[0x1E0CD2638](retstr, angle, x, y, z);
}

CATransform3D *__cdecl CATransform3DMakeScale(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return (CATransform3D *)MEMORY[0x1E0CD2640](retstr, sx, sy, sz);
}

CATransform3D *__cdecl CATransform3DMakeTranslation(CATransform3D *__return_ptr retstr, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return (CATransform3D *)MEMORY[0x1E0CD2648](retstr, tx, ty, tz);
}

CATransform3D *__cdecl CATransform3DRotate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  return (CATransform3D *)MEMORY[0x1E0CD2658](retstr, t, angle, x, y, z);
}

CATransform3D *__cdecl CATransform3DScale(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return (CATransform3D *)MEMORY[0x1E0CD2668](retstr, t, sx, sy, sz);
}

CATransform3D *__cdecl CATransform3DTranslate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return (CATransform3D *)MEMORY[0x1E0CD2678](retstr, t, tx, ty, tz);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80328](data, *(_QWORD *)&len, md);
}

uint64_t CDCircularMediumComplicationDiameter()
{
  return off_1E6BC92B8();
}

uint64_t CDCircularSmallComplicationDiameter()
{
  return off_1E6BC92C0();
}

uint64_t CDColorizeMeterProgress()
{
  return off_1E6BC92C8();
}

uint64_t CDCornerComplicationKeylineInnerRadius()
{
  return off_1E6BC92D0();
}

uint64_t CDCornerComplicationKeylineSize()
{
  return off_1E6BC92D8();
}

uint64_t CDCornerComplicationSize()
{
  return off_1E6BC92E0();
}

uint64_t CDGenerateMeterBackgroundGradientColors()
{
  return off_1E6BC92E8();
}

uint64_t CDGenerateMeterLayersOnLayer()
{
  return off_1E6BC92F0();
}

uint64_t CDGraphicCircularScaledComplicationDiameter()
{
  return off_1E6BC92F8();
}

uint64_t CDGraphicExtraLargeComplicationContentDiameter()
{
  return off_1E6BC9300();
}

uint64_t CDGraphicLargeRectangularComplicationCornerRadius()
{
  return off_1E6BC9308();
}

uint64_t CDGraphicLargeRectangularComplicationInset()
{
  return off_1E6BC9310();
}

uint64_t CDGraphicLargeRectangularComplicationLargeImageHeight()
{
  return off_1E6BC9318();
}

uint64_t CDGraphicLargeRectangularComplicationSize()
{
  return off_1E6BC9320();
}

uint64_t CDGraphicSubdialComplicationContentDiameter()
{
  return off_1E6BC9328();
}

uint64_t CDGraphicSubdialComplicationDiameter()
{
  return off_1E6BC9330();
}

uint64_t CDGraphicSubdialComplicationDistanceFromCenter()
{
  return off_1E6BC9338();
}

uint64_t CDGraphicSubdialComplicationEditingInset()
{
  return off_1E6BC9340();
}

uint64_t CDRichComplicationProgressFillStyleIsMetered()
{
  return off_1E6BC9348();
}

uint64_t CDShowGossamerUI()
{
  return off_1E6BC9350();
}

uint64_t CDTemplicateComplicationShouldPerformFullFade()
{
  return off_1E6BC9358();
}

uint64_t CDWidgetGroupNestedContentDiameter()
{
  return off_1E6BC9360();
}

uint64_t CDWidgetGroupSafeAreaInsets()
{
  return off_1E6BC9368();
}

uint64_t CDWidgetGroupSquareContentCornerRadius()
{
  return off_1E6BC9370();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFAllocatorRef CFAllocatorGetDefault(void)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CC0]();
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
  MEMORY[0x1E0C988F0](center, observer);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1E0C98A50](applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

SInt32 CFUserNotificationDisplayAlert(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags)
{
  return MEMORY[0x1E0C995C8](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, alternateButtonTitle, timeout);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BA90](retstr, t1, t2);
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return MEMORY[0x1E0C9BAA0](t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAB0](retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD0](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF0](retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BB00](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return (void *)MEMORY[0x1E0C9BB70](context);
}

uint64_t CGBitmapGetAlignedBytesPerRow()
{
  return MEMORY[0x1E0C9BB98]();
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CGColorRef CGColorCreateCopy(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x1E0C9BC80](color);
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  return MEMORY[0x1E0C9BCD8](color1, color2);
}

void CGColorRelease(CGColorRef color)
{
  MEMORY[0x1E0C9BD60](color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

void CGContextAddArc(CGContextRef c, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, int clockwise)
{
  MEMORY[0x1E0C9BFB0](c, *(_QWORD *)&clockwise, x, y, radius, startAngle, endAngle);
}

void CGContextAddEllipseInRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9BFC8](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9BFD0](c, x, y);
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
  MEMORY[0x1E0C9BFD8](c, path);
}

void CGContextBeginPath(CGContextRef c)
{
  MEMORY[0x1E0C9C000](c);
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C020](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextClip(CGContextRef c)
{
  MEMORY[0x1E0C9C028](c);
}

void CGContextClipToMask(CGContextRef c, CGRect rect, CGImageRef mask)
{
  MEMORY[0x1E0C9C030](c, mask, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextClosePath(CGContextRef c)
{
  MEMORY[0x1E0C9C048](c);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
  MEMORY[0x1E0C9C050](c, transform);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextDrawLinearGradient(CGContextRef c, CGGradientRef gradient, CGPoint startPoint, CGPoint endPoint, CGGradientDrawingOptions options)
{
  MEMORY[0x1E0C9C198](c, gradient, *(_QWORD *)&options, (__n128)startPoint, *(__n128 *)&startPoint.y, (__n128)endPoint, *(__n128 *)&endPoint.y);
}

void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
{
  MEMORY[0x1E0C9C1A0](c, page);
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
  MEMORY[0x1E0C9C1B8](c, *(_QWORD *)&mode);
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C210](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFillPath(CGContextRef c)
{
  MEMORY[0x1E0C9C218](c);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9C330](c, x, y);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x1E0C9C340](c);
}

void CGContextResetClip(CGContextRef c)
{
  MEMORY[0x1E0C9C360](c);
}

void CGContextRestoreGState(CGContextRef c)
{
  MEMORY[0x1E0C9C370](c);
}

void CGContextRotateCTM(CGContextRef c, CGFloat angle)
{
  MEMORY[0x1E0C9C380](c, angle);
}

void CGContextSaveGState(CGContextRef c)
{
  MEMORY[0x1E0C9C388](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  MEMORY[0x1E0C9C390](c, sx, sy);
}

void CGContextSetAllowsAntialiasing(CGContextRef c, BOOL allowsAntialiasing)
{
  MEMORY[0x1E0C9C398](c, allowsAntialiasing);
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
  MEMORY[0x1E0C9C3C8](c, *(_QWORD *)&mode);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
  MEMORY[0x1E0C9C480](c, width);
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A0](c, red, green, blue, alpha);
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C508](c, color);
}

void CGContextStrokeEllipseInRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C560](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextStrokePath(CGContextRef c)
{
  MEMORY[0x1E0C9C570](c);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1E0C9C5D8](provider);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C5F0](data);
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C600](info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
  MEMORY[0x1E0C9C638](provider);
}

void CGFontRelease(CGFontRef font)
{
  MEMORY[0x1E0C9C8E0](font);
}

CGGradientRef CGGradientCreateWithColorComponents(CGColorSpaceRef space, const CGFloat *components, const CGFloat *locations, size_t count)
{
  return (CGGradientRef)MEMORY[0x1E0C9CA80](space, components, locations, count);
}

void CGGradientRelease(CGGradientRef gradient)
{
  MEMORY[0x1E0C9CAC0](gradient);
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CB80](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(_QWORD *)&bitmapInfo, provider);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1E0C9CBA8](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

BOOL CGImageDestinationCopyImageSource(CGImageDestinationRef idst, CGImageSourceRef isrc, CFDictionaryRef options, CFErrorRef *err)
{
  return MEMORY[0x1E0CBC320](idst, isrc, options, err);
}

CFArrayRef CGImageDestinationCopyTypeIdentifiers(void)
{
  return (CFArrayRef)MEMORY[0x1E0CBC328]();
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC338](data, type, count, options);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC348](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1E0C9CC08](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9CC38](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

CGMutableImageMetadataRef CGImageMetadataCreateMutable(void)
{
  return (CGMutableImageMetadataRef)MEMORY[0x1E0CBC3C0]();
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC530](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

CGImageRef CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC588](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC590](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC5C0](url, options);
}

CFStringRef CGImageSourceGetType(CGImageSourceRef isrc)
{
  return (CFStringRef)MEMORY[0x1E0CBC618](isrc);
}

CGPDFDocumentRef CGPDFDocumentCreateWithProvider(CGDataProviderRef provider)
{
  return (CGPDFDocumentRef)MEMORY[0x1E0C9CF58](provider);
}

CGPDFPageRef CGPDFDocumentGetPage(CGPDFDocumentRef document, size_t pageNumber)
{
  return (CGPDFPageRef)MEMORY[0x1E0C9CFA0](document, pageNumber);
}

CGRect CGPDFPageGetBoxRect(CGPDFPageRef page, CGPDFBox box)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D090](page, *(_QWORD *)&box);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

void CGPathAddArc(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, BOOL clockwise)
{
  MEMORY[0x1E0C9D280](path, m, clockwise, x, y, radius, startAngle, endAngle);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

void CGPathAddPath(CGMutablePathRef path1, const CGAffineTransform *m, CGPathRef path2)
{
  MEMORY[0x1E0C9D2B8](path1, m, path2);
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
  MEMORY[0x1E0C9D2E8](path, info, function);
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x1E0C9D310](path);
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return MEMORY[0x1E0C9D318](path, m, eoFill, (__n128)point, *(__n128 *)&point.y);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

CGPathRef CGPathCreateWithEllipseInRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3C0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3D0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, cornerWidth, cornerHeight);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

void CGPathRelease(CGPathRef path)
{
  MEMORY[0x1E0C9D498](path);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1E0C9D550]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D558]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D600]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x1E0C9D610]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D630]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

uint64_t CLKAlterRect()
{
  return MEMORY[0x1E0C93E50]();
}

uint64_t CLKBuildVersion()
{
  return MEMORY[0x1E0C93E58]();
}

uint64_t CLKCeilForDevice()
{
  return MEMORY[0x1E0C93E60]();
}

uint64_t CLKCompanionDisplayDate()
{
  return MEMORY[0x1E0C93E70]();
}

uint64_t CLKComplicationFamilyDescription()
{
  return MEMORY[0x1E0C93E98]();
}

uint64_t CLKComplicationFamilyFromString()
{
  return MEMORY[0x1E0C93EA0]();
}

uint64_t CLKComplicationGraphicExtraLargeCircularScalingFactor()
{
  return MEMORY[0x1E0C93EB0]();
}

uint64_t CLKCompressFraction()
{
  return MEMORY[0x1E0C93EB8]();
}

uint64_t CLKContrastRatioForColors()
{
  return MEMORY[0x1E0C93EC0]();
}

uint64_t CLKDegreesToRadians()
{
  return MEMORY[0x1E0C93ED0]();
}

uint64_t CLKDeviceCategoryForSizeClass()
{
  return MEMORY[0x1E0C93ED8]();
}

uint64_t CLKDialDiameterForDeviceWithRoundingBehavior()
{
  return MEMORY[0x1E0C93EF0]();
}

uint64_t CLKEqualObjects()
{
  return MEMORY[0x1E0C93EF8]();
}

uint64_t CLKFloatEqualsFloat()
{
  return MEMORY[0x1E0C93F00]();
}

uint64_t CLKFloorForDevice()
{
  return MEMORY[0x1E0C93F08]();
}

uint64_t CLKForcedTime()
{
  return MEMORY[0x1E0C93F10]();
}

uint64_t CLKFormatTimeIntervalSeconds()
{
  return MEMORY[0x1E0C93F18]();
}

uint64_t CLKFrameFromCenterBoundsAndTransform()
{
  return MEMORY[0x1E0C93F20]();
}

uint64_t CLKHourMinuteSecondAnglesForTime()
{
  return MEMORY[0x1E0C93F28]();
}

uint64_t CLKInternalBuild()
{
  return MEMORY[0x1E0C93F30]();
}

uint64_t CLKInterpolateBetweenColors()
{
  return MEMORY[0x1E0C93F38]();
}

uint64_t CLKInterpolateBetweenFloatsClipped()
{
  return MEMORY[0x1E0C93F40]();
}

uint64_t CLKInterpolateBetweenFloatsUnclipped()
{
  return MEMORY[0x1E0C93F48]();
}

uint64_t CLKInterpolateBetweenPoints()
{
  return MEMORY[0x1E0C93F50]();
}

uint64_t CLKInterpolateBetweenRects()
{
  return MEMORY[0x1E0C93F58]();
}

uint64_t CLKInterpolateBetweenSizes()
{
  return MEMORY[0x1E0C93F60]();
}

uint64_t CLKInterpolateBetweenTransform()
{
  return MEMORY[0x1E0C93F68]();
}

uint64_t CLKIsBlackColor()
{
  return MEMORY[0x1E0C93F70]();
}

uint64_t CLKIsBridge()
{
  return MEMORY[0x1E0C93F78]();
}

uint64_t CLKIsClockFaceApp()
{
  return MEMORY[0x1E0C93F80]();
}

uint64_t CLKIsCurrentLocaleCJK()
{
  return MEMORY[0x1E0C93F88]();
}

uint64_t CLKIsCurrentLocaleNonLatin()
{
  return MEMORY[0x1E0C93F90]();
}

uint64_t CLKIsFaceSnapshotService()
{
  return MEMORY[0x1E0C93F98]();
}

uint64_t CLKIsNTKDaemon()
{
  return MEMORY[0x1E0C93FA0]();
}

uint64_t CLKIsNTKXCTests()
{
  return MEMORY[0x1E0C93FA8]();
}

uint64_t CLKKernValueForDesignSpecTrackingValue()
{
  return MEMORY[0x1E0C93FB0]();
}

uint64_t CLKLanguageIsTallScript()
{
  return MEMORY[0x1E0C93FB8]();
}

uint64_t CLKLargeDialDiameterForDevice()
{
  return MEMORY[0x1E0C93FC0]();
}

uint64_t CLKLayoutIsRTL()
{
  return MEMORY[0x1E0C93FC8]();
}

uint64_t CLKLocaleCurrentNumberSystem()
{
  return MEMORY[0x1E0C93FD0]();
}

uint64_t CLKLocaleIs24HourMode()
{
  return MEMORY[0x1E0C93FD8]();
}

uint64_t CLKLocaleNumberSystemForFirstLanguage()
{
  return MEMORY[0x1E0C93FE0]();
}

uint64_t CLKLocaleNumberSystemIdentifier()
{
  return MEMORY[0x1E0C93FE8]();
}

uint64_t CLKLoggingObjectForDomain()
{
  return MEMORY[0x1E0C93FF8]();
}

uint64_t CLKMapFractionIntoRange()
{
  return MEMORY[0x1E0C94000]();
}

uint64_t CLKNormalizeAngle()
{
  return MEMORY[0x1E0C94008]();
}

uint64_t CLKPixelAlignRectForDevice()
{
  return MEMORY[0x1E0C94010]();
}

uint64_t CLKPointRoundForDevice()
{
  return MEMORY[0x1E0C94018]();
}

uint64_t CLKRectCenteredAboutPointForDevice()
{
  return MEMORY[0x1E0C94028]();
}

uint64_t CLKRectCenteredIntegralRectForDevice()
{
  return MEMORY[0x1E0C94030]();
}

uint64_t CLKRectCenteredXInRectForDevice()
{
  return MEMORY[0x1E0C94038]();
}

uint64_t CLKRectCenteredYInRectForDevice()
{
  return MEMORY[0x1E0C94040]();
}

uint64_t CLKRectEqualsRect()
{
  return MEMORY[0x1E0C94048]();
}

uint64_t CLKRectGetCenter()
{
  return MEMORY[0x1E0C94050]();
}

uint64_t CLKRectIntegralForDevice()
{
  return MEMORY[0x1E0C94058]();
}

uint64_t CLKRemovesPunctuationFromWeekdayDay()
{
  return MEMORY[0x1E0C94070]();
}

uint64_t CLKReverseInterpolateFromFloats()
{
  return MEMORY[0x1E0C94078]();
}

uint64_t CLKRoundDateDownToNearestHour()
{
  return MEMORY[0x1E0C94080]();
}

uint64_t CLKRoundDateDownToNearestMinute()
{
  return MEMORY[0x1E0C94088]();
}

uint64_t CLKRoundDateDownToNearestSecond()
{
  return MEMORY[0x1E0C94090]();
}

uint64_t CLKRoundDateToMinuteGranularity()
{
  return MEMORY[0x1E0C94098]();
}

uint64_t CLKRoundForDevice()
{
  return MEMORY[0x1E0C940A0]();
}

uint64_t CLKRunningInProcess()
{
  return MEMORY[0x1E0C940B0]();
}

uint64_t CLKSceneSizeForDevice()
{
  return MEMORY[0x1E0C940B8]();
}

uint64_t CLKSetCompanionDisplayDate()
{
  return MEMORY[0x1E0C940C0]();
}

uint64_t CLKSizeCenteredInRectForDevice()
{
  return MEMORY[0x1E0C940C8]();
}

uint64_t CLKSizeEqualsSize()
{
  return MEMORY[0x1E0C940D0]();
}

uint64_t CLKSizeForDeviceMetrics()
{
  return MEMORY[0x1E0C940D8]();
}

uint64_t CLKSizeRoundForDevice()
{
  return MEMORY[0x1E0C940E8]();
}

uint64_t CLKStringForComplicationFamily()
{
  return MEMORY[0x1E0C940F0]();
}

uint64_t CLKUIAssociatedNonAccentStyle()
{
  return off_1E6BC9AC8();
}

uint64_t CLKUICompareColorsByLightness()
{
  return off_1E6BC9AD0();
}

uint64_t CLKUIComputeImageAPL()
{
  return off_1E6BC9AD8();
}

uint64_t CLKUIComputePow2SubRect()
{
  return off_1E6BC9AE0();
}

uint64_t CLKUIConvertLABtoRGB()
{
  return off_1E6BC9AE8();
}

uint64_t CLKUIConvertRGBtoLAB()
{
  return off_1E6BC9AF0();
}

uint64_t CLKUIConvertToRGBfFromSRGB8_fast()
{
  return off_1E6BC9AF8();
}

uint64_t CLKUIConvertToRGBfFromUIColor()
{
  return off_1E6BC9B00();
}

uint64_t CLKUIConvertToRGBfFromUIColor_fast()
{
  return off_1E6BC9B08();
}

uint64_t CLKUIConvertToRGBfFromXRSRGBf()
{
  return off_1E6BC9B10();
}

uint64_t CLKUIConvertToSRGB8FromRGBf_fast()
{
  return off_1E6BC9B18();
}

uint64_t CLKUIConvertToSRGBfFromRGBf_fast()
{
  return off_1E6BC9B20();
}

uint64_t CLKUIConvertToUIColorFromRGBf()
{
  return off_1E6BC9B28();
}

uint64_t CLKUIConvertToUIColorFromRGBf_fast()
{
  return off_1E6BC9B30();
}

uint64_t CLKUIConvertToXRSRGBfFromRGBf()
{
  return off_1E6BC9B38();
}

uint64_t CLKUICurvedColoringLabelCenterSize()
{
  return off_1E6BC9B40();
}

uint64_t CLKUICurvedColoringLabelCornerSize()
{
  return off_1E6BC9B48();
}

uint64_t CLKUIDefaultAlternateComplicationColor()
{
  return off_1E6BC9B50();
}

uint64_t CLKUIDefaultComplicationBackgroundColor()
{
  return off_1E6BC9B58();
}

uint64_t CLKUIDefaultComplicationBackgroundColorWithNonAccentColor()
{
  return off_1E6BC9B60();
}

uint64_t CLKUIImageNamed()
{
  return off_1E6BC9B68();
}

uint64_t CLKUIImageNamedFromAssetBundleForDevice()
{
  return off_1E6BC9B70();
}

uint64_t CLKUIImageNamedFromBundleForDevice()
{
  return off_1E6BC9B78();
}

uint64_t CLKUIInterpolateBetweenColors()
{
  return off_1E6BC9B80();
}

uint64_t CLKUILightnessForColor()
{
  return off_1E6BC9B90();
}

uint64_t CLKUIMonochromeFiltersForStyle()
{
  return off_1E6BC9B98();
}

uint64_t CLKUIMonochromeFiltersForStyleWithTintedBackground()
{
  return off_1E6BC9BA0();
}

uint64_t CLKUIOrderedSuffixesForDevice()
{
  return off_1E6BC9BA8();
}

uint64_t CLKValueForDeviceMetrics()
{
  return MEMORY[0x1E0C94100]();
}

uint64_t CLKValueForLuxoDeviceMetrics()
{
  return MEMORY[0x1E0C94108]();
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  double v2;
  double v3;
  CLLocationCoordinate2D result;

  MEMORY[0x1E0C9E308](latitude, longitude);
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x1E0C9F310](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1E0C9F318](retstr, value, *(_QWORD *)&timescale);
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x1E0C9F330](retstr, *(_QWORD *)&preferredTimescale, seconds);
}

CMTimeRange *__cdecl CMTimeRangeMake(CMTimeRange *__return_ptr retstr, CMTime *start, CMTime *duration)
{
  return (CMTimeRange *)MEMORY[0x1E0C9F3E8](retstr, start, duration);
}

uint64_t CNStringContainsNonLatinCharacters()
{
  return MEMORY[0x1E0D13938]();
}

uint64_t CPBitmapCreateImagesFromPath()
{
  return MEMORY[0x1E0CFA1D0]();
}

uint64_t CPBitmapWriteImagesToPath()
{
  return MEMORY[0x1E0CFA1E0]();
}

CGFontRef CTFontCopyGraphicsFont(CTFontRef font, CTFontDescriptorRef *attributes)
{
  return (CGFontRef)MEMORY[0x1E0CA79C8](font, attributes);
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1E0CA7A70](descriptor, matrix, size);
}

CTFontDescriptorRef CTFontManagerCreateFontDescriptorFromData(CFDataRef data)
{
  return (CTFontDescriptorRef)MEMORY[0x1E0CA7D28](data);
}

CFArrayRef CTFontManagerCreateFontDescriptorsFromData(CFDataRef data)
{
  return (CFArrayRef)MEMORY[0x1E0CA7D30](data);
}

BOOL CTFontManagerRegisterFontsForURL(CFURLRef fontURL, CTFontManagerScope scope, CFErrorRef *error)
{
  return MEMORY[0x1E0CA7D48](fontURL, *(_QWORD *)&scope, error);
}

BOOL CTFontManagerRegisterGraphicsFont(CGFontRef font, CFErrorRef *error)
{
  return MEMORY[0x1E0CA7D50](font, error);
}

uint64_t CacheDeletePurgeSpaceWithInfo()
{
  return MEMORY[0x1E0D09B80]();
}

uint64_t FIUIChartAbsolutePositionForXPlaneValue()
{
  return MEMORY[0x1E0D221B0]();
}

uint64_t FIUIChartAbsolutePositionForYPlaneValue()
{
  return MEMORY[0x1E0D221B8]();
}

uint64_t FIUIChartRelativePositionForXPlaneValue()
{
  return MEMORY[0x1E0D221C0]();
}

uint64_t FIUIChartRelativePositionForYPlaneValue()
{
  return MEMORY[0x1E0D221C8]();
}

uint64_t FIUIChartXAxisFloatValue()
{
  return MEMORY[0x1E0D221D0]();
}

uint64_t HKRPShouldInstallOxygenSaturationWatchAppOnPairedWatch()
{
  return MEMORY[0x1E0D87BF0]();
}

uint64_t IMPerformSystem()
{
  return MEMORY[0x1E0D36708]();
}

uint64_t INIntentWithTypedIntent()
{
  return MEMORY[0x1E0CBD4A0]();
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBAF0](properties);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBD28](buffer, *(_QWORD *)&options, seed);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1E0CBBE88](buffer, *(_QWORD *)&options, seed);
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1E0DE2B80]();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return MEMORY[0x1E0D4E4A0]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x1E0D4E4D0]();
}

uint64_t NPSHasCompletedInitialSync()
{
  return MEMORY[0x1E0D51608]();
}

uint64_t NRVersionIsGreaterThanOrEqual()
{
  return MEMORY[0x1E0D51810]();
}

NSArray *__cdecl NSAllMapTableKeys(NSMapTable *table)
{
  return (NSArray *)MEMORY[0x1E0CB2850](table);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB2C00]();
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

uint64_t NSRequestConcreteImplementation()
{
  return MEMORY[0x1E0CB3158]();
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromCGAffineTransform(CGAffineTransform *transform)
{
  return (NSString *)MEMORY[0x1E0DC32D8](transform);
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  return (NSString *)MEMORY[0x1E0DC32E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return (NSString *)MEMORY[0x1E0DC32F0]((__n128)size, *(__n128 *)&size.height);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1E0CB3220](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

uint64_t NTKMonochromeFilterForStyle()
{
  return off_1E6BC9FD8();
}

uint64_t NUNIAstronomyClampLatitude()
{
  return MEMORY[0x1E0D518A0]();
}

uint64_t NUNILocalizedString()
{
  return MEMORY[0x1E0D518A8]();
}

uint64_t NUNIMoonImageForPhaseNumber()
{
  return MEMORY[0x1E0D518B0]();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1E0D82C10]();
}

uint64_t PBDataWriterWriteFloatField()
{
  return MEMORY[0x1E0D82C50]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1E0D82C98]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1E0D82CB0]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1E0D82CE0]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1E0D82D00]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1E0D82D10]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1E0D82D28]();
}

uint64_t PHVideoComplementVisibilityStateIsPlayable()
{
  return MEMORY[0x1E0CD1E90]();
}

uint64_t RELocalApplicationIdentifierForRemoteApplication()
{
  return MEMORY[0x1E0D843E0]();
}

uint64_t RERemoteApplicationIdentifierForLocalApplication()
{
  return MEMORY[0x1E0D843F0]();
}

uint64_t REUISampleRelevanceProviderForSamplePosition()
{
  return MEMORY[0x1E0D84438]();
}

uint64_t REUpNextDemoShiftTopItems()
{
  return MEMORY[0x1E0D84418]();
}

uint64_t REUpNextDemoUserDefaults()
{
  return MEMORY[0x1E0D84420]();
}

uint64_t TCCAccessPreflight()
{
  return MEMORY[0x1E0DB0FF0]();
}

BOOL UIAccessibilityIsBoldTextEnabled(void)
{
  return MEMORY[0x1E0DC4530]();
}

BOOL UIAccessibilityIsReduceTransparencyEnabled(void)
{
  return MEMORY[0x1E0DC4550]();
}

uint64_t UICeilToScale()
{
  return MEMORY[0x1E0DC4880]();
}

uint64_t UICeilToViewScale()
{
  return MEMORY[0x1E0DC4888]();
}

NSComparisonResult UIContentSizeCategoryCompareToCategory(UIContentSizeCategory lhs, UIContentSizeCategory rhs)
{
  return MEMORY[0x1E0DC48E0](lhs, rhs);
}

BOOL UIContentSizeCategoryIsAccessibilityCategory(UIContentSizeCategory category)
{
  return MEMORY[0x1E0DC4910](category);
}

uint64_t UIDistanceBetweenPoints()
{
  return MEMORY[0x1E0DC4988]();
}

uint64_t UIFloorToViewScale()
{
  return MEMORY[0x1E0DC4A10]();
}

void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)
{
  MEMORY[0x1E0DC4BC0](opaque, (__n128)size, *(__n128 *)&size.height, scale);
}

void UIGraphicsEndImageContext(void)
{
  MEMORY[0x1E0DC4BD8]();
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return (CGContextRef)MEMORY[0x1E0DC4BE8]();
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return (UIImage *)MEMORY[0x1E0DC4BF0]();
}

NSData *__cdecl UIImageJPEGRepresentation(UIImage *image, CGFloat compressionQuality)
{
  return (NSData *)MEMORY[0x1E0DC4C58](image, compressionQuality);
}

NSData *__cdecl UIImagePNGRepresentation(UIImage *image)
{
  return (NSData *)MEMORY[0x1E0DC4C60](image);
}

uint64_t UIRectCenteredAboutPointScale()
{
  return MEMORY[0x1E0DC5240]();
}

uint64_t UIRectCenteredIntegralRectScale()
{
  return MEMORY[0x1E0DC5250]();
}

uint64_t UIRectCenteredRect()
{
  return MEMORY[0x1E0DC5258]();
}

uint64_t UIRectCenteredXInRectScale()
{
  return MEMORY[0x1E0DC5268]();
}

uint64_t UIRectCenteredYInRectScale()
{
  return MEMORY[0x1E0DC5278]();
}

void UIRectFill(CGRect rect)
{
  MEMORY[0x1E0DC5298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t UIRectInset()
{
  return MEMORY[0x1E0DC52B8]();
}

uint64_t UIRectInsetEdges()
{
  return MEMORY[0x1E0DC52C0]();
}

uint64_t UIRoundToScale()
{
  return MEMORY[0x1E0DC52E8]();
}

uint64_t UIRoundToScreenScale()
{
  return MEMORY[0x1E0DC52F0]();
}

uint64_t UISystemRootDirectory()
{
  return MEMORY[0x1E0DC53C8]();
}

uint64_t _AXSEnhanceTextLegibilityEnabled()
{
  return MEMORY[0x1E0DDD710]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CLKUILAB2RGB()
{
  return off_1E6BCC8F0();
}

uint64_t _CLKUIRGB2LAB()
{
  return off_1E6BCC8F8();
}

uint64_t _UIAppSetStatusBarHeight()
{
  return MEMORY[0x1E0DC56F8]();
}

uint64_t _UIAppSetStatusBarOrientation()
{
  return MEMORY[0x1E0DC5700]();
}

uint64_t _UICreateCGImageFromIOSurfaceWithOptions()
{
  return MEMORY[0x1E0DC57C0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

simd_float4 _simd_cos_f4(simd_float4 x)
{
  simd_float4 result;

  MEMORY[0x1E0C811C0]((__n128)x);
  return result;
}

simd_float4 _simd_sin_f4(simd_float4 x)
{
  simd_float4 result;

  MEMORY[0x1E0C81200]((__n128)x);
  return result;
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

uint64_t archive_entry_filetype()
{
  return MEMORY[0x1E0DE3DC0]();
}

uint64_t archive_entry_free()
{
  return MEMORY[0x1E0DE3DC8]();
}

uint64_t archive_entry_new()
{
  return MEMORY[0x1E0DE3DD0]();
}

uint64_t archive_entry_pathname()
{
  return MEMORY[0x1E0DE3DD8]();
}

uint64_t archive_entry_set_pathname()
{
  return MEMORY[0x1E0DE3E18]();
}

uint64_t archive_entry_sourcepath()
{
  return MEMORY[0x1E0DE3E48]();
}

uint64_t archive_error_string()
{
  return MEMORY[0x1E0DE3E60]();
}

uint64_t archive_read_close()
{
  return MEMORY[0x1E0DE3E78]();
}

uint64_t archive_read_data_block()
{
  return MEMORY[0x1E0DE3E88]();
}

uint64_t archive_read_disk_descend()
{
  return MEMORY[0x1E0DE3EA8]();
}

uint64_t archive_read_disk_new()
{
  return MEMORY[0x1E0DE3EB8]();
}

uint64_t archive_read_disk_open()
{
  return MEMORY[0x1E0DE3EC0]();
}

uint64_t archive_read_disk_set_standard_lookup()
{
  return MEMORY[0x1E0DE3ED0]();
}

uint64_t archive_read_extract()
{
  return MEMORY[0x1E0DE3EE0]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x1E0DE3EF8]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x1E0DE3F00]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x1E0DE3F08]();
}

uint64_t archive_read_next_header2()
{
  return MEMORY[0x1E0DE3F10]();
}

uint64_t archive_read_open_filename()
{
  return MEMORY[0x1E0DE3F28]();
}

uint64_t archive_read_support_filter_gzip()
{
  return MEMORY[0x1E0DE3F60]();
}

uint64_t archive_read_support_format_zip()
{
  return MEMORY[0x1E0DE3F90]();
}

uint64_t archive_write_close()
{
  return MEMORY[0x1E0DE3FC0]();
}

uint64_t archive_write_data()
{
  return MEMORY[0x1E0DE3FC8]();
}

uint64_t archive_write_data_block()
{
  return MEMORY[0x1E0DE3FD0]();
}

uint64_t archive_write_disk_new()
{
  return MEMORY[0x1E0DE3FD8]();
}

uint64_t archive_write_disk_set_options()
{
  return MEMORY[0x1E0DE3FE0]();
}

uint64_t archive_write_disk_set_standard_lookup()
{
  return MEMORY[0x1E0DE3FE8]();
}

uint64_t archive_write_free()
{
  return MEMORY[0x1E0DE4000]();
}

uint64_t archive_write_header()
{
  return MEMORY[0x1E0DE4008]();
}

uint64_t archive_write_new()
{
  return MEMORY[0x1E0DE4010]();
}

uint64_t archive_write_open_filename()
{
  return MEMORY[0x1E0DE4028]();
}

uint64_t archive_write_set_format_zip()
{
  return MEMORY[0x1E0DE4068]();
}

uint64_t archive_write_set_options()
{
  return MEMORY[0x1E0DE4070]();
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x1E0C81598](__x);
  return result;
}

long double atan(long double __x)
{
  long double result;

  MEMORY[0x1E0C81618](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1E0DE7A50](cls, name, imp, types);
}

objc_property_t *__cdecl class_copyPropertyList(Class cls, unsigned int *outCount)
{
  return (objc_property_t *)MEMORY[0x1E0DE7A80](cls, outCount);
}

Method class_getClassMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1E0DE7A98](cls, name);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1E0C82670](*(_QWORD *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

float cosf(float a1)
{
  float result;

  MEMORY[0x1E0C82B48](a1);
  return result;
}

int dgetrf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BD20](__m, __n, __a, __lda, __ipiv, __info);
}

int dgetri_(__CLPK_integer *__n, __CLPK_doublereal *__a, __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_doublereal *__work, __CLPK_integer *__lwork, __CLPK_integer *__info)
{
  return MEMORY[0x1E0C8BD30](__n, __a, __lda, __ipiv, __work, __lwork, __info);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C28](queue, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FE0](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1E0C83010]();
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1E0C83378](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C83448](a1, a2);
  return result;
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

uint64_t geo_isDayLightForLocation()
{
  return MEMORY[0x1E0D278F8]();
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

uint8_t *__cdecl getsectiondata(const mach_header_64 *mhp, const char *segname, const char *sectname, unint64_t *size)
{
  return (uint8_t *)MEMORY[0x1E0C837E0](mhp, segname, sectname, size);
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C83840](path, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C838F0](a1, a2);
  return result;
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

long double ldexp(long double __x, int __e)
{
  long double result;

  MEMORY[0x1E0C83B40](*(_QWORD *)&__e, __x);
  return result;
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C83C40](a1, a2);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void method_exchangeImplementations(Method m1, Method m2)
{
  MEMORY[0x1E0DE7B50](m1, m2);
}

long double modf(long double __x, long double *__y)
{
  long double result;

  MEMORY[0x1E0C841E0](__y, __x);
  return result;
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x1E0C84238](__rqtp, __rmtp);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1E0C84940]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x1E0C84948]();
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

int proc_pid_rusage(int pid, int flavor, rusage_info_t *buffer)
{
  return MEMORY[0x1E0C84C28](*(_QWORD *)&pid, *(_QWORD *)&flavor, buffer);
}

uint64_t proc_reset_footprint_interval()
{
  return MEMORY[0x1E0C84C68]();
}

const char *__cdecl property_getAttributes(objc_property_t property)
{
  return (const char *)MEMORY[0x1E0DE8068](property);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return (const char *)MEMORY[0x1E0DE8070](property);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84E90](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1E0C84E98](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EA0](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EB8](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EC0](a1);
}

int putchar(int a1)
{
  return MEMORY[0x1E0C84F50](*(_QWORD *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1E0C85040](a1, a2);
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x1E0C851A0]();
}

uint64_t sandbox_extension_issue_file()
{
  return MEMORY[0x1E0C851A8]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x1E0C851F8]();
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C853A0](path, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

float sinf(float a1)
{
  float result;

  MEMORY[0x1E0C85420](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

char *__cdecl stpncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C854F8](__dst, __src, __n);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1E0C85530](__dst, __src);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return (char *)MEMORY[0x1E0C855F0](__stringp, __delim);
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1E0DEEC38]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

sysdir_search_path_enumeration_state sysdir_get_next_search_path_enumeration(sysdir_search_path_enumeration_state state, char *path)
{
  return MEMORY[0x1E0C857B8](*(_QWORD *)&state, path);
}

uint64_t sysdir_start_search_path_enumeration_private()
{
  return MEMORY[0x1E0C857C8]();
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x1E0C857E8](__x);
  return result;
}

float tanf(float a1)
{
  float result;

  MEMORY[0x1E0C857F0](a1);
  return result;
}

uint64_t tcc_identity_create()
{
  return MEMORY[0x1E0DB1290]();
}

void vDSP_vdpsp(const double *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C458](__A, __IA, __C, __IC, __N);
}

void vDSP_vsbsm(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x1E0C8C848](__A, __IA, __B, __IB, __C, __D, __ID, __N);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return (xpc_object_t)MEMORY[0x1E0C85D80](activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85D90](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
  MEMORY[0x1E0C85D98](identifier, criteria, handler);
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
  MEMORY[0x1E0C85DB0](activity, criteria);
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1E0C85DB8](activity, state);
}

void xpc_activity_unregister(const char *identifier)
{
  MEMORY[0x1E0C85DD0](identifier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
  MEMORY[0x1E0C866E8](stream, targetq, handler);
}

