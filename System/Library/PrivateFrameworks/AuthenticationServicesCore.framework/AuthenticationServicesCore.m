void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

id OUTLINED_FUNCTION_2(id a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_3()
{
  uint64_t v0;

  return v0;
}

uint64_t isClientWithAuditTokenProperlyEntitled(__int128 *a1)
{
  __int128 v2;
  __int128 v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  __int128 v8;
  int v9;
  NSObject *v10;
  __int128 v12;
  __int128 v13;

  v2 = a1[1];
  v12 = *a1;
  v13 = v2;
  if ((WBSAuditTokenHasEntitlement() & 1) != 0
    || (v3 = a1[1], v12 = *a1, v13 = v3, WBSAuditTokenHasEntitlement()))
  {
    v4 = WBS_LOG_CHANNEL_PREFIXAuthorization();
    v5 = 1;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v12) = 0;
      v6 = "Client is properly entitled.";
LABEL_5:
      _os_log_impl(&dword_20E648000, v4, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v12, 2u);
    }
  }
  else
  {
    +[ASFeatureManager sharedManager](ASFeatureManager, "sharedManager", v12, v13);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = a1[1];
    v12 = *a1;
    v13 = v8;
    v9 = objc_msgSend(v7, "isClientEntitledForInternalTestingWithAuditToken:", &v12);

    v10 = WBS_LOG_CHANNEL_PREFIXAuthorization();
    v4 = v10;
    if (v9)
    {
      v5 = 1;
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        return v5;
      LOWORD(v12) = 0;
      v6 = "Client has internal testing entitlement.";
      goto LABEL_5;
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
      isClientWithAuditTokenProperlyEntitled_cold_1(v4);
    return 0;
  }
  return v5;
}

const __CFString *ASCAgentServiceName()
{
  return CFSTR("com.apple.AuthenticationServicesCore.AuthenticationServicesAgent");
}

void sub_20E64DD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_20E64FF78(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_20E6541B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void sub_20E656128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_20E6563CC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void __shouldRequireCABLEAuthenticatorConsentForSourceApplication_block_invoke()
{
  uint64_t v0;
  void *v1;

  objc_msgSend(MEMORY[0x24BDBCF20], "setWithObjects:", CFSTR("com.apple.BarcodeScanner"), CFSTR("com.apple.camera"), CFSTR("com.apple.springboard"), 0);
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)shouldRequireCABLEAuthenticatorConsentForSourceApplication_systemScannerApplications;
  shouldRequireCABLEAuthenticatorConsentForSourceApplication_systemScannerApplications = v0;

}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_2_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

id OUTLINED_FUNCTION_3_0(uint64_t a1, void *a2)
{
  return a2;
}

void OUTLINED_FUNCTION_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_11(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_13(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void sub_20E6585AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_20E6588A0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_20E658938(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20E65AA7C(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

id OUTLINED_FUNCTION_4_1(uint64_t a1, void *a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t OUTLINED_FUNCTION_7()
{
  uint64_t v0;

  return v0;
}

id descriptionForErrorCode(uint64_t a1)
{
  void *v2;

  v2 = 0;
  switch(a1)
  {
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 13:
      goto LABEL_3;
    case 7:
      if (+[ASCWebKitSPISupport shouldUseAlternateCredentialStore](ASCWebKitSPISupport, "shouldUseAlternateCredentialStore"))
      {
        goto LABEL_3;
      }
      if (biometryType_onceToken != -1)
        dispatch_once(&biometryType_onceToken, &__block_literal_global_3);
      v2 = (void *)objc_msgSend((id)biometryType_context, "biometryType");
      if (v2)
      {
LABEL_3:
        _WBSLocalizedString();
        v2 = (void *)objc_claimAutoreleasedReturnValue();
      }
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t __biometryType_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x24BDDA938]);
  v1 = (void *)biometryType_context;
  biometryType_context = (uint64_t)v0;

  return objc_msgSend((id)biometryType_context, "canEvaluatePolicy:error:", 1, 0);
}

uint64_t compareLoginChoices(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = a2;
  if (isSecurityKeyAssertionLoginChoice(v3) && objc_msgSend(v4, "loginChoiceKind") == 4)
    goto LABEL_6;
  if (objc_msgSend(v3, "loginChoiceKind") == 4 && isSecurityKeyAssertionLoginChoice(v4))
    goto LABEL_11;
  v5 = requestTypeForLoginChoice(v3);
  v6 = sortOrderForRequestType(v5);
  v7 = requestTypeForLoginChoice(v4);
  v8 = sortOrderForRequestType(v7);
  if (v6 < v8)
  {
LABEL_6:
    v9 = -1;
    goto LABEL_12;
  }
  if (v6 != v8)
  {
LABEL_11:
    v9 = 1;
    goto LABEL_12;
  }
  v9 = 0;
  if (v6 <= 3 && v6 != 2)
    v9 = objc_msgSend(v3, "compare:", v4);
LABEL_12:

  return v9;
}

uint64_t requestTypeForLoginChoice(void *a1)
{
  id v1;
  uint64_t v2;
  unint64_t v3;

  v1 = a1;
  v2 = 1;
  switch(objc_msgSend(v1, "loginChoiceKind"))
  {
    case 0:
      v2 = 2;
      break;
    case 2:
      if (objc_msgSend(v1, "isRegistrationRequest"))
        v2 = 4;
      else
        v2 = 8;
      break;
    case 3:
      v3 = objc_msgSend(v1, "credentialKind");
      if (v3 >= 3)
        goto LABEL_9;
      v2 = qword_20E6ED980[v3];
      break;
    case 4:
LABEL_9:
      v2 = 64;
      break;
    case 5:
      v2 = 128;
      break;
    case 6:
      v2 = 256;
      break;
    default:
      break;
  }

  return v2;
}

uint64_t __allowedCredentialsForSecurityKeyAssertionFromRequestContext_block_invoke(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = a2;
  objc_msgSend(v2, "transports");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v3, "count"))
    v4 = objc_msgSend(v2, "hasInternalTransport") ^ 1;
  else
    v4 = 0;

  return v4;
}

BOOL isSecurityKeyAssertionLoginChoice(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  v2 = objc_msgSend(v1, "loginChoiceKind") == 3 && objc_msgSend(v1, "credentialKind") == 1;

  return v2;
}

uint64_t sortOrderForRequestType(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = 9;
  if (a1 > 31)
  {
    v3 = 7;
    v4 = 8;
    if (a1 != 256)
      v4 = 9;
    if (a1 != 128)
      v3 = v4;
    v5 = 6;
    v6 = 4;
    if (a1 != 64)
      v6 = 9;
    if (a1 != 32)
      v5 = v6;
    if (a1 <= 127)
      return v5;
    else
      return v3;
  }
  else
  {
    switch(a1)
    {
      case 1:
        result = 3;
        break;
      case 2:
        result = 2;
        break;
      case 3:
      case 5:
      case 6:
      case 7:
        return result;
      case 4:
        result = 0;
        break;
      case 8:
        result = 1;
        break;
      default:
        if (a1 == 16)
          result = 5;
        break;
    }
  }
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

uint64_t ascCredentialRequestTypesAllPublicKey()
{
  return 60;
}

uint64_t ascCredentialRequestTypesAllPasskey()
{
  return 12;
}

uint64_t WBS_LOG_CHANNEL_PREFIXAuthenticationServicesAgent()
{
  if (WBS_LOG_CHANNEL_PREFIXAuthenticationServicesAgent_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXAuthenticationServicesAgent_onceToken, &__block_literal_global_8);
  return WBS_LOG_CHANNEL_PREFIXAuthenticationServicesAgent_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXAuthorization()
{
  if (WBS_LOG_CHANNEL_PREFIXAuthorization_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXAuthorization_onceToken, &__block_literal_global_3);
  return WBS_LOG_CHANNEL_PREFIXAuthorization_log;
}

uint64_t WBS_LOG_CHANNEL_PREFIXServiceLifecycle()
{
  if (WBS_LOG_CHANNEL_PREFIXServiceLifecycle_onceToken != -1)
    dispatch_once(&WBS_LOG_CHANNEL_PREFIXServiceLifecycle_onceToken, &__block_literal_global_7);
  return WBS_LOG_CHANNEL_PREFIXServiceLifecycle_log;
}

void sub_20E6663F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20E6665EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20E666C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getWBUFeatureManagerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v3 = 0;
  if (!WebUILibraryCore_frameworkLibrary)
  {
    v4 = xmmword_24C97FA40;
    v5 = 0;
    WebUILibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!WebUILibraryCore_frameworkLibrary)
    __getWBUFeatureManagerClass_block_invoke_cold_1(&v3);
  result = objc_getClass("WBUFeatureManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    __getWBUFeatureManagerClass_block_invoke_cold_2();
  getWBUFeatureManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t ASAllLoginChoiceClasses()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = (void *)MEMORY[0x24BDBCF20];
  v1 = objc_opt_class();
  v2 = objc_opt_class();
  v3 = objc_opt_class();
  v4 = objc_opt_class();
  v5 = objc_opt_class();
  v6 = objc_opt_class();
  return objc_msgSend(v0, "setWithObjects:", v1, v2, v3, v4, v5, v6, objc_opt_class(), 0);
}

uint64_t static ASCPublicKeyCredentialRegistrationExtensionInputs.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t sub_20E6672B8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;

  sub_20E6E9998();
  swift_allocObject();
  sub_20E6E998C();
  type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs();
  sub_20E66A8D4((unint64_t *)&unk_254A2DC70, v2, (uint64_t (*)(uint64_t))type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs, (uint64_t)&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionInputs);
  v3 = sub_20E6E9980();
  v5 = v4;
  swift_release();
  v6 = (void *)sub_20E6E9C68();
  v7 = (void *)sub_20E6EA1C0();
  objc_msgSend(a1, sel_encodeObject_forKey_, v6, v7);

  return sub_20E6673F4(v3, v5);
}

uint64_t type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs()
{
  return objc_opt_self();
}

uint64_t sub_20E6673F4(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

id ASCPublicKeyCredentialRegistrationExtensionInputs.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ASCPublicKeyCredentialRegistrationExtensionInputs.init(coder:)(a1);
}

id ASCPublicKeyCredentialRegistrationExtensionInputs.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  objc_super v37;
  unint64_t v38;
  void *v39;
  objc_super v40;
  uint64_t v41;
  char *v42;

  swift_getObjectType();
  sub_20E667A94();
  v3 = v1;
  v4 = sub_20E6EA448();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = sub_20E6E9C80();
    v8 = v7;

    sub_20E6E9974();
    swift_allocObject();
    sub_20E6E9968();
    sub_20E66A8D4(&qword_254A2DC80, v9, (uint64_t (*)(uint64_t))type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs, (uint64_t)&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionInputs);
    sub_20E6E995C();

    swift_release();
    v37.super_class = (Class)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs();
    v36 = v42;
    v37.receiver = objc_allocWithZone(v37.super_class);
    v17 = (char *)v37.receiver
        + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob;
    *((_BYTE *)v37.receiver
    + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob) = 2;
    v38 = v8;
    v39 = a1;
    v18 = (char *)v37.receiver
        + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf;
    *(_OWORD *)v18 = 0u;
    *((_OWORD *)v18 + 1) = 0u;
    *((_QWORD *)v18 + 4) = 0;
    *((_QWORD *)v18 + 5) = 1;
    v19 = &v36[OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob];
    swift_beginAccess();
    LOBYTE(v5) = *v19;
    swift_beginAccess();
    *v17 = (_BYTE)v5;
    v20 = (uint64_t *)&v36[OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf];
    swift_beginAccess();
    v35 = v6;
    v21 = *v20;
    v22 = v20[1];
    v24 = v20[2];
    v23 = v20[3];
    v25 = v20[4];
    v26 = v20[5];
    swift_beginAccess();
    v27 = *(_QWORD *)v18;
    v28 = *((_QWORD *)v18 + 1);
    v29 = *((_QWORD *)v18 + 2);
    v33 = *((_QWORD *)v18 + 4);
    v34 = *((_QWORD *)v18 + 3);
    v32 = *((_QWORD *)v18 + 5);
    *(_QWORD *)v18 = v21;
    *((_QWORD *)v18 + 1) = v22;
    *((_QWORD *)v18 + 2) = v24;
    *((_QWORD *)v18 + 3) = v23;
    *((_QWORD *)v18 + 4) = v25;
    *((_QWORD *)v18 + 5) = v26;
    sub_20E66A914(v21, v22, v24, v23, v25, v26);
    sub_20E66A9E8(v27, v28, v29, v34, v33, v32);
    v40 = v37;
    v30 = objc_msgSendSuper2(&v40, sel_init);

    sub_20E6673F4(v35, v38);
    swift_getObjectType();
    swift_deallocPartialClassInstance();
  }
  else
  {

    if (qword_254A2DBE8 != -1)
      swift_once();
    v10 = sub_20E6E9F50();
    __swift_project_value_buffer(v10, (uint64_t)qword_254A3ED50);
    v11 = sub_20E6E9F38();
    v12 = sub_20E6EA3E8();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v42 = (char *)v14;
      *(_DWORD *)v13 = 136446210;
      v15 = sub_20E6EA9E8();
      v41 = sub_20E66A2F8(v15, v16, (uint64_t *)&v42);
      sub_20E6EA4C0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20E648000, v11, v12, "Could not find encoded json for %{public}s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x212BC3A38](v14, -1, -1);
      MEMORY[0x212BC3A38](v13, -1, -1);
    }

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v30;
}

unint64_t sub_20E667A94()
{
  unint64_t result;

  result = qword_254A2F8B0;
  if (!qword_254A2F8B0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_254A2F8B0);
  }
  return result;
}

id ASCPublicKeyCredentialRegistrationExtensionInputs.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id ASCPublicKeyCredentialRegistrationExtensionInputs.init()()
{
  _BYTE *v0;
  char *v1;
  objc_super v3;

  v0[OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob] = 2;
  v1 = &v0[OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;
  *((_QWORD *)v1 + 5) = 1;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs();
  return objc_msgSendSuper2(&v3, sel_init);
}

void sub_20E667BD8(_QWORD *a1@<X8>)
{
  char *v1;
  _BYTE *v2;
  char *v3;
  char *v4;
  char *v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  objc_super v23;
  objc_super v25;

  v23.super_class = (Class)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs();
  v22 = v1;
  v23.receiver = objc_allocWithZone(v23.super_class);
  v2 = (char *)v23.receiver
     + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob;
  *((_BYTE *)v23.receiver
  + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob) = 2;
  v3 = (char *)v23.receiver
     + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf;
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 5) = 1;
  v4 = &v1[OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob];
  v5 = v1;
  swift_beginAccess();
  v6 = *v4;
  swift_beginAccess();
  *v2 = v6;
  v7 = (uint64_t *)&v5[OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf];
  swift_beginAccess();
  v8 = *v7;
  v9 = v7[1];
  v10 = v7[2];
  v11 = v7[3];
  v12 = v7[4];
  v13 = v7[5];
  swift_beginAccess();
  v15 = *(_QWORD *)v3;
  v14 = *((_QWORD *)v3 + 1);
  v16 = *((_QWORD *)v3 + 2);
  v20 = *((_QWORD *)v3 + 4);
  v21 = *((_QWORD *)v3 + 3);
  v19 = *((_QWORD *)v3 + 5);
  *(_QWORD *)v3 = v8;
  *((_QWORD *)v3 + 1) = v9;
  *((_QWORD *)v3 + 2) = v10;
  *((_QWORD *)v3 + 3) = v11;
  *((_QWORD *)v3 + 4) = v12;
  *((_QWORD *)v3 + 5) = v13;
  v17 = v22;
  sub_20E66A914(v8, v9, v10, v11, v12, v13);
  sub_20E66A9E8(v15, v14, v16, v21, v20, v19);
  v25 = v23;
  v18 = objc_msgSendSuper2(&v25, sel_init);

  a1[3] = v23.super_class;
  *a1 = v18;
}

BOOL sub_20E667E44()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;

  v1 = (_BYTE *)(v0
               + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob);
  swift_beginAccess();
  if (*v1 != 2)
    return 1;
  v2 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf;
  swift_beginAccess();
  return *(_QWORD *)(v2 + 40) != 1;
}

uint64_t sub_20E667F44()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BOOL8 v2;
  uint64_t v3;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob);
  swift_beginAccess();
  v2 = *v1 != 2;
  v3 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf;
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 40) == 1)
    return v2;
  else
    return 2;
}

uint64_t sub_20E667FC8()
{
  uint64_t v0;
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  swift_getObjectType();
  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob);
  swift_beginAccess();
  v2 = *v1;
  if (v2 == 2)
    return 0;
  if ((v2 & 1) != 0)
    v3 = 0x6572726566657270;
  else
    v3 = 0x6465726975716572;
  if ((v2 & 1) != 0)
    v4 = 0xE900000000000064;
  else
    v4 = 0xE800000000000000;
  v7[2] = v3;
  v7[3] = v4;
  v8 = xmmword_20E6ED9E0;
  v9 = xmmword_20E6ED9F0;
  v10 = 1;
  v11 = 0u;
  v12 = 0u;
  v13 = 1;
  LOBYTE(v7[0]) = 1;
  swift_bridgeObjectRetain();
  sub_20E66A9D4(0, 0xF000000000000000);
  v5 = ASCTAPExtensionInput.encode(for:)((char *)v7);
  sub_20E66AA3C(v3, v4, 2, 0, 0xF000000000000000);
  sub_20E66AA78(0, 0, 0, 0, 1);
  swift_bridgeObjectRelease();
  sub_20E66AA28(0, 0xF000000000000000);
  return v5;
}

double ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.toCTAP()@<D0>(uint64_t a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;
  double result;

  v2 = 0x6465726975716572;
  if (*v1)
    v2 = 0x6572726566657270;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xE900000000000064;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)&result = 2;
  *(_OWORD *)(a1 + 16) = xmmword_20E6ED9E0;
  *(_OWORD *)(a1 + 32) = xmmword_20E6ED9F0;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

uint64_t sub_20E668428@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1
               + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_20E668478(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2
               + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t sub_20E6684C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1
               + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t sub_20E668510(char *a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(v1
               + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t (*sub_20E668560())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_20E6685A4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = (uint64_t *)(*a1
                 + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  *a2 = *v3;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  return sub_20E66A914(v4, v5, v6, v7, v8, v9);
}

uint64_t sub_20E668608(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = (uint64_t *)(*a2
                 + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf);
  swift_beginAccess();
  v9 = *v8;
  v10 = v8[1];
  v11 = v8[2];
  v14 = v8[4];
  v15 = v8[3];
  v13 = v8[5];
  *v8 = v2;
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  v8[4] = v6;
  v8[5] = v7;
  sub_20E66A914(v2, v3, v4, v5, v6, v7);
  return sub_20E66A9E8(v9, v10, v11, v15, v14, v13);
}

uint64_t sub_20E6686D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  return sub_20E66A914(v4, v5, v6, v7, v8, v9);
}

uint64_t sub_20E668730(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;

  v2 = *((_QWORD *)a1 + 2);
  v12 = *(__int128 *)((char *)a1 + 24);
  v13 = *a1;
  v3 = *((_QWORD *)a1 + 5);
  v4 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf);
  swift_beginAccess();
  v5 = *v4;
  v6 = v4[1];
  v7 = v4[2];
  v8 = v4[3];
  v9 = v4[4];
  v10 = v4[5];
  *(_OWORD *)v4 = v13;
  v4[2] = v2;
  *(_OWORD *)(v4 + 3) = v12;
  v4[5] = v3;
  return sub_20E66A9E8(v5, v6, v7, v8, v9, v10);
}

uint64_t (*sub_20E6687B4())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

BOOL static ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.hash(into:)()
{
  return sub_20E6EA994();
}

uint64_t sub_20E668844()
{
  _BYTE *v0;

  if (*v0)
    return 0x6572726566657270;
  else
    return 0x6465726975716572;
}

uint64_t sub_20E668884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E66BF80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E6688A8()
{
  return 0;
}

void sub_20E6688B4(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_20E6688C0()
{
  sub_20E66AB24();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6688E8()
{
  sub_20E66AB24();
  return sub_20E6EA9DC();
}

uint64_t sub_20E668910()
{
  return 0;
}

void sub_20E66891C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_20E668928()
{
  sub_20E66AB68();
  return sub_20E6EA9D0();
}

uint64_t sub_20E668950()
{
  sub_20E66AB68();
  return sub_20E6EA9DC();
}

uint64_t sub_20E668978@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_20E6689A4()
{
  sub_20E66ABAC();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6689CC()
{
  sub_20E66ABAC();
  return sub_20E6EA9DC();
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DC98);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DCA0);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DCA8);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E66AB24();
  sub_20E6EA9C4();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_20E66AB68();
    sub_20E6EA82C();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_20E66ABAC();
    sub_20E6EA82C();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.hashValue.getter()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DCC8);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8]();
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DCD0);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DCD8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E66AB24();
  v11 = v33;
  sub_20E6EA9AC();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_20E6EA820();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_20E6EA640();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DCE0);
    *v21 = &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement;
    sub_20E6EA79C();
    sub_20E6EA634();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1Tm(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_20E66AB68();
    sub_20E6EA790();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_20E66ABAC();
    v22 = v6;
    sub_20E6EA790();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1Tm(v24);
}

BOOL sub_20E668F64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_20E668F7C()
{
  return sub_20E6EA994();
}

uint64_t sub_20E668FA4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.init(from:)(a1, a2);
}

uint64_t sub_20E668FB8(_QWORD *a1)
{
  return ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.encode(to:)(a1);
}

void ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.supportRequirement.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.supportRequirement.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.supportRequirement.modify())()
{
  return nullsub_1;
}

AuthenticationServicesCore::ASCPublicKeyCredentialRegistrationExtensionInputs::LargeBlob __swiftcall ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.init(supportRequirement:)(AuthenticationServicesCore::ASCPublicKeyCredentialRegistrationExtensionInputs::LargeBlob supportRequirement)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)supportRequirement.supportRequirement;
  return supportRequirement;
}

uint64_t sub_20E669004()
{
  return 1;
}

uint64_t sub_20E66900C()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

uint64_t sub_20E66904C()
{
  return sub_20E6EA994();
}

uint64_t sub_20E669070()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

unint64_t sub_20E6690AC()
{
  return 0xD000000000000012;
}

uint64_t sub_20E6690C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E66C07C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_20E6690F0()
{
  sub_20E66ABF0();
  return sub_20E6EA9D0();
}

uint64_t sub_20E669118()
{
  sub_20E66ABF0();
  return sub_20E6EA9DC();
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DCE8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E66ABF0();
  sub_20E6EA9C4();
  v10 = v7;
  sub_20E66AC34();
  sub_20E6EA88C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DD00);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E66ABF0();
  sub_20E6EA9AC();
  if (!v2)
  {
    sub_20E66AC78();
    sub_20E6EA7FC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_20E669358@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.init(from:)(a1, a2);
}

uint64_t sub_20E66936C(_QWORD *a1)
{
  return ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.encode(to:)(a1);
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.shouldCheckForSupport.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.inputValues.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_20E66A954(v2, v3, v4, v5);
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.perCredentialInputValues.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.init(shouldCheckForSupport:inputValues:perCredentialInputValues:)@<Q0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result;
  __int128 v5;

  *(_BYTE *)a4 = a1;
  result = *(__n128 *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a4 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a4 + 24) = v5;
  *(_QWORD *)(a4 + 40) = a3;
  return result;
}

BOOL sub_20E6693BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20E6693D0()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

uint64_t sub_20E669414()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

unint64_t sub_20E669454()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6C61567475706E69;
  if (*v0 != 1)
    v1 = 0xD000000000000018;
  if (*v0)
    return v1;
  else
    return 0xD000000000000015;
}

uint64_t sub_20E6694BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E66C100(a1, a2);
  *a3 = result;
  return result;
}

void sub_20E6694E0(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_20E6694EC()
{
  sub_20E66ACBC();
  return sub_20E6EA9D0();
}

uint64_t sub_20E669514()
{
  sub_20E66ACBC();
  return sub_20E6EA9DC();
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DD10);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v16 = v1[2];
  v17 = v8;
  v9 = v1[3];
  v14 = v1[4];
  v15 = v9;
  v13 = v1[5];
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E66ACBC();
  sub_20E6EA9C4();
  LOBYTE(v18) = 0;
  sub_20E6EA880();
  if (!v2)
  {
    v18 = v17;
    v19 = v16;
    v10 = v13;
    v20 = v15;
    v21 = v14;
    v22 = 1;
    sub_20E66AD00();
    sub_20E6EA868();
    v18 = v10;
    v22 = 2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E660);
    sub_20E66AE10((unint64_t *)&unk_254A2DD30, (uint64_t (*)(void))sub_20E66AD88, (uint64_t (*)(void))sub_20E66AD00, MEMORY[0x24BEE04C0]);
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  char v32;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DD40);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E66ACBC();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  LOBYTE(v27) = 0;
  v9 = sub_20E6EA7F0();
  v32 = 1;
  sub_20E66ADCC();
  sub_20E6EA7D8();
  v31 = v9;
  v10 = v27;
  v22 = v28;
  v11 = v29;
  v12 = v30;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E660);
  v24 = v12;
  v32 = 2;
  v25 = v11;
  v26 = v10;
  v13 = v10;
  v14 = v22;
  sub_20E66A954(v13, v22, v11, v12);
  sub_20E66AE10((unint64_t *)&unk_254A2DD50, (uint64_t (*)(void))sub_20E66AE8C, (uint64_t (*)(void))sub_20E66ADCC, MEMORY[0x24BEE04E0]);
  sub_20E6EA7D8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v31 & 1;
  v17 = v26;
  v16 = v27;
  v19 = v24;
  v18 = v25;
  sub_20E66A954(v26, v14, v25, v24);
  swift_bridgeObjectRetain();
  sub_20E66AAA8(v17, v14, v18, v19);
  *(_BYTE *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v17;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v16;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  sub_20E66AAA8(v17, v14, v18, v19);
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E6699A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.init(from:)(a1, a2);
}

uint64_t sub_20E6699BC(_QWORD *a1)
{
  return ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.encode(to:)(a1);
}

uint64_t sub_20E6699D0()
{
  _BYTE *v0;

  if (*v0)
    return 6713968;
  else
    return 0x6F6C42656772616CLL;
}

uint64_t sub_20E669A08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E66C264(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E669A2C()
{
  sub_20E66AED0();
  return sub_20E6EA9D0();
}

uint64_t sub_20E669A54()
{
  sub_20E66AED0();
  return sub_20E6EA9DC();
}

id ASCPublicKeyCredentialRegistrationExtensionInputs.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_20E669AC8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  __int128 *v10;
  __int128 v11;
  _BYTE v13[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DD60);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E66AED0();
  sub_20E6EA9C4();
  v9 = (_BYTE *)(v3
               + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob);
  swift_beginAccess();
  LOBYTE(v14) = *v9;
  v17 = 0;
  sub_20E66AF14();
  sub_20E6EA868();
  if (!v2)
  {
    v10 = (__int128 *)(v3
                     + OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf);
    swift_beginAccess();
    v11 = v10[1];
    v14 = *v10;
    v15 = v11;
    v16 = v10[2];
    v13[15] = 1;
    sub_20E66AF58();
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

id ASCPublicKeyCredentialRegistrationExtensionInputs.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ASCPublicKeyCredentialRegistrationExtensionInputs.init(from:)(a1);
}

id ASCPublicKeyCredentialRegistrationExtensionInputs.init(from:)(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  id v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  objc_class *v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  _BYTE *v29;
  __int128 v30;
  objc_super v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;

  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DD80);
  v3 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = &v1[OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob];
  v1[OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob] = 2;
  v7 = &v1[OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf];
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_QWORD *)v7 + 4) = 0;
  *((_QWORD *)v7 + 5) = 1;
  v9 = a1[3];
  v8 = (id)a1[4];
  v38 = a1;
  __swift_project_boxed_opaque_existential_1Tm(a1, v9);
  sub_20E66AED0();
  v29 = v1;
  v27 = v5;
  v10 = v30;
  sub_20E6EA9AC();
  if (v10)
  {
    v14 = v29;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v38);
    sub_20E66A9E8(*(_QWORD *)v7, *((_QWORD *)v7 + 1), *((_QWORD *)v7 + 2), *((_QWORD *)v7 + 3), *((_QWORD *)v7 + 4), *((_QWORD *)v7 + 5));

    type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v37 = 0;
    sub_20E66AF9C();
    v11 = v27;
    v12 = v28;
    sub_20E6EA7D8();
    v13 = v33;
    swift_beginAccess();
    *v6 = v13;
    v32 = 1;
    sub_20E66AFE0();
    sub_20E6EA7D8();
    v30 = v33;
    v16 = v34;
    v26 = v35;
    v17 = v36;
    swift_beginAccess();
    v18 = *(_QWORD *)v7;
    v19 = *((_QWORD *)v7 + 1);
    v20 = *((_QWORD *)v7 + 2);
    v21 = *((_QWORD *)v7 + 3);
    v22 = *((_QWORD *)v7 + 4);
    v23 = *((_QWORD *)v7 + 5);
    *(_OWORD *)v7 = v30;
    *((_QWORD *)v7 + 2) = v16;
    *(_OWORD *)(v7 + 24) = v26;
    *((_QWORD *)v7 + 5) = v17;
    sub_20E66A9E8(v18, v19, v20, v21, v22, v23);
    v24 = v29;

    v25 = (objc_class *)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs();
    v31.receiver = v24;
    v31.super_class = v25;
    v8 = objc_msgSendSuper2(&v31, sel_init);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v12);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v38);
  }
  return v8;
}

id sub_20E669F20@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  id result;

  v5 = objc_allocWithZone((Class)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs());
  result = ASCPublicKeyCredentialRegistrationExtensionInputs.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_20E669F70(_QWORD *a1)
{
  return sub_20E669AC8(a1);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_20E669FA8()
{
  sub_20E66A8D4(&qword_254A2DEB8, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE388);
  return sub_20E6EA940();
}

uint64_t sub_20E669FEC()
{
  sub_20E66A8D4(&qword_254A2DEB8, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE388);
  return sub_20E6EA934();
}

uint64_t sub_20E66A034()
{
  sub_20E66A8D4(&qword_254A2DEF0, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE3CC);
  return sub_20E6E9AE8();
}

id sub_20E66A078()
{
  id *v0;

  return *v0;
}

uint64_t sub_20E66A080@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_20E66A088(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_20E66A094()
{
  return sub_20E6EA1CC();
}

uint64_t sub_20E66A0A4()
{
  sub_20E66A8D4(&qword_254A2DEF0, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE3CC);
  return sub_20E6E9B24();
}

uint64_t sub_20E66A0E8()
{
  sub_20E66A8D4(&qword_254A2DEF0, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE3CC);
  return sub_20E6E9B00();
}

uint64_t sub_20E66A12C(void *a1)
{
  id v2;

  sub_20E66A8D4(&qword_254A2DEF0, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE3CC);
  v2 = a1;
  return sub_20E6E9AF4();
}

uint64_t sub_20E66A194()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_20E6EA478();

  return v2;
}

uint64_t sub_20E66A1C8()
{
  sub_20E66A8D4(&qword_254A2DEF0, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE3CC);
  return sub_20E6E9B18();
}

uint64_t sub_20E66A21C()
{
  sub_20E6EA988();
  sub_20E6EA178();
  return sub_20E6EA9A0();
}

_QWORD *sub_20E66A278@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_20E66A288()
{
  sub_20E66A8D4(&qword_254A2DEF0, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE3CC);
  return sub_20E6E9B0C();
}

BOOL sub_20E66A2E4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20E66A2F8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_20E66A3C8(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_20E66C394((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_20E66C394((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t sub_20E66A3C8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_20E6EA4CC();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_20E66A580(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_20E6EA664();
  if (!v8)
  {
    sub_20E6EA718();
    __break(1u);
LABEL_17:
    result = sub_20E6EA778();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_20E66A580(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_20E66A614(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_20E66A788(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_20E66A788(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_20E66A614(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_20E6DFDBC(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_20E6EA61C();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_20E6EA718();
      __break(1u);
LABEL_10:
      v2 = sub_20E6EA298();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_20E6EA778();
    __break(1u);
LABEL_14:
    result = sub_20E6EA718();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_20E66A788(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DE90);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_20E6EA778();
  __break(1u);
  return result;
}

uint64_t sub_20E66A8D4(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x212BC39A8](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20E66A914(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a6 != 1)
  {
    sub_20E66A954(a2, a3, a4, a5);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_20E66A954(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_20E66A990(result, a2);
    return sub_20E66A9D4(a3, a4);
  }
  return result;
}

uint64_t sub_20E66A990(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_20E66A9D4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_20E66A990(a1, a2);
  return a1;
}

uint64_t sub_20E66A9E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a6 != 1)
  {
    sub_20E66AAA8(a2, a3, a4, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_20E66AA28(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_20E6673F4(a1, a2);
  return a1;
}

uint64_t sub_20E66AA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    return sub_20E66AA28(a4, a5);
  }
  return result;
}

uint64_t sub_20E66AA78(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a5 != 1)
  {
    sub_20E66AAA8(result, a2, a3, a4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_20E66AAA8(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_20E6673F4(result, a2);
    return sub_20E66AA28(a3, a4);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x212BC3990]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_20E66AB24()
{
  unint64_t result;

  result = qword_254A2DCB0;
  if (!qword_254A2DCB0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EE1D4, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DCB0);
  }
  return result;
}

unint64_t sub_20E66AB68()
{
  unint64_t result;

  result = qword_254A2DCB8;
  if (!qword_254A2DCB8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EE184, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.PreferredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DCB8);
  }
  return result;
}

unint64_t sub_20E66ABAC()
{
  unint64_t result;

  result = qword_254A2DCC0;
  if (!qword_254A2DCC0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EE134, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.RequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DCC0);
  }
  return result;
}

unint64_t sub_20E66ABF0()
{
  unint64_t result;

  result = qword_254A2DCF0;
  if (!qword_254A2DCF0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EE0E4, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DCF0);
  }
  return result;
}

unint64_t sub_20E66AC34()
{
  unint64_t result;

  result = qword_254A2DCF8;
  if (!qword_254A2DCF8)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement);
    atomic_store(result, (unint64_t *)&qword_254A2DCF8);
  }
  return result;
}

unint64_t sub_20E66AC78()
{
  unint64_t result;

  result = qword_254A2DD08;
  if (!qword_254A2DD08)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement);
    atomic_store(result, (unint64_t *)&qword_254A2DD08);
  }
  return result;
}

unint64_t sub_20E66ACBC()
{
  unint64_t result;

  result = qword_254A2DD18;
  if (!qword_254A2DD18)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EE094, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DD18);
  }
  return result;
}

unint64_t sub_20E66AD00()
{
  unint64_t result;

  result = qword_254A2DD20;
  if (!qword_254A2DD20)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues);
    atomic_store(result, (unint64_t *)&qword_254A2DD20);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x212BC399C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_20E66AD88()
{
  unint64_t result;

  result = qword_254A2E5C0;
  if (!qword_254A2E5C0)
  {
    result = MEMORY[0x212BC39A8](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_254A2E5C0);
  }
  return result;
}

unint64_t sub_20E66ADCC()
{
  unint64_t result;

  result = qword_254A2DD48;
  if (!qword_254A2DD48)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues);
    atomic_store(result, (unint64_t *)&qword_254A2DD48);
  }
  return result;
}

uint64_t sub_20E66AE10(unint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_254A2E660);
    v10[0] = a2();
    v10[1] = a3();
    result = MEMORY[0x212BC39A8](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_20E66AE8C()
{
  unint64_t result;

  result = qword_254A2E5F0;
  if (!qword_254A2E5F0)
  {
    result = MEMORY[0x212BC39A8](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_254A2E5F0);
  }
  return result;
}

unint64_t sub_20E66AED0()
{
  unint64_t result;

  result = qword_254A2DD68;
  if (!qword_254A2DD68)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EE044, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DD68);
  }
  return result;
}

unint64_t sub_20E66AF14()
{
  unint64_t result;

  result = qword_254A2DD70;
  if (!qword_254A2DD70)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob);
    atomic_store(result, (unint64_t *)&qword_254A2DD70);
  }
  return result;
}

unint64_t sub_20E66AF58()
{
  unint64_t result;

  result = qword_254A2DD78;
  if (!qword_254A2DD78)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF);
    atomic_store(result, (unint64_t *)&qword_254A2DD78);
  }
  return result;
}

unint64_t sub_20E66AF9C()
{
  unint64_t result;

  result = qword_254A2DD88;
  if (!qword_254A2DD88)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob);
    atomic_store(result, (unint64_t *)&qword_254A2DD88);
  }
  return result;
}

unint64_t sub_20E66AFE0()
{
  unint64_t result;

  result = qword_254A2DD90;
  if (!qword_254A2DD90)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF);
    atomic_store(result, (unint64_t *)&qword_254A2DD90);
  }
  return result;
}

unint64_t sub_20E66B028()
{
  unint64_t result;

  result = qword_254A2DD98;
  if (!qword_254A2DD98)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement);
    atomic_store(result, (unint64_t *)&qword_254A2DD98);
  }
  return result;
}

uint64_t method lookup function for ASCPublicKeyCredentialRegistrationExtensionInputs()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.copy(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.hasAtLeastOneExtension.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.caBLEAuthenticatorMinimumRequirement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.cborForWebKit()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.largeBlob.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.largeBlob.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.largeBlob.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.prf.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.prf.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.prf.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionInputs.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob()
{
  return &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement()
{
  return &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement;
}

uint64_t initializeBufferWithCopyOfBuffer for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  if (v2 >> 60 != 15)
  {
    sub_20E6673F4(a1[1], v2);
    v3 = a1[4];
    if (v3 >> 60 != 15)
      sub_20E6673F4(a1[3], v3);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >> 60 == 15)
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    sub_20E66A990(v6, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v4;
    v7 = (uint64_t *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)v7;
    }
    else
    {
      v9 = *v7;
      sub_20E66A990(*v7, *(_QWORD *)(a2 + 32));
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v8;
    }
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (__int128 *)(a1 + 8);
  v5 = (__int128 *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) >> 60 == 15)
  {
    if (v6 >> 60 == 15)
    {
      v7 = *v5;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_16:
      *v4 = v7;
      goto LABEL_17;
    }
    v9 = *(_QWORD *)(a2 + 8);
    sub_20E66A990(v9, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v6;
    v10 = (_OWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *v10;
      goto LABEL_17;
    }
    v16 = *(_QWORD *)v10;
LABEL_12:
    sub_20E66A990(v16, v11);
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 32) = v11;
    goto LABEL_17;
  }
  if (v6 >> 60 != 15)
  {
    v12 = *(_QWORD *)(a2 + 8);
    sub_20E66A990(v12, *(_QWORD *)(a2 + 16));
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v6;
    sub_20E6673F4(v13, v14);
    v4 = (__int128 *)(a1 + 24);
    v15 = (uint64_t *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(a1 + 32) >> 60 == 15)
    {
      if (v11 >> 60 != 15)
      {
        v16 = *v15;
        goto LABEL_12;
      }
    }
    else
    {
      if (v11 >> 60 != 15)
      {
        v18 = *v15;
        sub_20E66A990(*v15, *(_QWORD *)(a2 + 32));
        v19 = *(_QWORD *)(a1 + 24);
        v20 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 24) = v18;
        *(_QWORD *)(a1 + 32) = v11;
        sub_20E6673F4(v19, v20);
        goto LABEL_17;
      }
      sub_20E66B4E0(a1 + 24);
    }
    v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
  sub_20E66B514((uint64_t *)(a1 + 8));
  v8 = v5[1];
  *v4 = *v5;
  v4[1] = v8;
LABEL_17:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_20E66B4E0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

uint64_t *sub_20E66B514(uint64_t *a1)
{
  destroy for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues(a1);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    sub_20E66B514((uint64_t *)(a1 + 8));
LABEL_4:
    v8 = v5[1];
    *v4 = *v5;
    v4[1] = v8;
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v7;
  sub_20E6673F4(v9, v6);
  v10 = (_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  if (v11 >> 60 != 15)
  {
    v12 = *(_QWORD *)(a2 + 32);
    if (v12 >> 60 != 15)
    {
      v13 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = *v10;
      *(_QWORD *)(a1 + 32) = v12;
      sub_20E6673F4(v13, v11);
      goto LABEL_10;
    }
    sub_20E66B4E0(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
LABEL_10:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF()
{
  return &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF;
}

uint64_t sub_20E66B704(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_20E66B70C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20E66B804 + 4 * byte_20E6EDA05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20E66B838 + 4 * byte_20E6EDA00[v4]))();
}

uint64_t sub_20E66B838(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E66B840(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E66B848);
  return result;
}

uint64_t sub_20E66B854(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E66B85CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20E66B860(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E66B868(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_20E66B874(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20E66B920 + 4 * byte_20E6EDA0A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20E66B940 + 4 * byte_20E6EDA0F[v4]))();
}

_BYTE *sub_20E66B920(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20E66B940(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E66B948(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E66B950(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E66B958(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E66B960(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_20E66B96C()
{
  return 0;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ASCABLERequestType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputsC9LargeBlobV18SupportRequirementOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20E66BA60 + 4 * byte_20E6EDA19[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20E66BA94 + 4 * byte_20E6EDA14[v4]))();
}

uint64_t sub_20E66BA94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E66BA9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E66BAA4);
  return result;
}

uint64_t sub_20E66BAB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E66BAB8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20E66BABC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E66BAC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.RequiredCodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.RequiredCodingKeys;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.PreferredCodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.PreferredCodingKeys;
}

unint64_t sub_20E66BB04()
{
  unint64_t result;

  result = qword_254A2DDA8;
  if (!qword_254A2DDA8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDDF4, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DDA8);
  }
  return result;
}

unint64_t sub_20E66BB4C()
{
  unint64_t result;

  result = qword_254A2DDB0;
  if (!qword_254A2DDB0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDEAC, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DDB0);
  }
  return result;
}

unint64_t sub_20E66BB94()
{
  unint64_t result;

  result = qword_254A2DDB8;
  if (!qword_254A2DDB8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDF64, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DDB8);
  }
  return result;
}

unint64_t sub_20E66BBDC()
{
  unint64_t result;

  result = qword_254A2DDC0;
  if (!qword_254A2DDC0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EE01C, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DDC0);
  }
  return result;
}

unint64_t sub_20E66BC24()
{
  unint64_t result;

  result = qword_254A2DDC8;
  if (!qword_254A2DDC8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDF8C, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DDC8);
  }
  return result;
}

unint64_t sub_20E66BC6C()
{
  unint64_t result;

  result = qword_254A2DDD0;
  if (!qword_254A2DDD0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDFB4, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DDD0);
  }
  return result;
}

unint64_t sub_20E66BCB4()
{
  unint64_t result;

  result = qword_254A2DDD8;
  if (!qword_254A2DDD8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDED4, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DDD8);
  }
  return result;
}

unint64_t sub_20E66BCFC()
{
  unint64_t result;

  result = qword_254A2DDE0;
  if (!qword_254A2DDE0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDEFC, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DDE0);
  }
  return result;
}

unint64_t sub_20E66BD44()
{
  unint64_t result;

  result = qword_254A2DDE8;
  if (!qword_254A2DDE8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDE1C, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DDE8);
  }
  return result;
}

unint64_t sub_20E66BD8C()
{
  unint64_t result;

  result = qword_254A2DDF0;
  if (!qword_254A2DDF0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDE44, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DDF0);
  }
  return result;
}

unint64_t sub_20E66BDD4()
{
  unint64_t result;

  result = qword_254A2DDF8;
  if (!qword_254A2DDF8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDD14, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.RequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DDF8);
  }
  return result;
}

unint64_t sub_20E66BE1C()
{
  unint64_t result;

  result = qword_254A2DE00;
  if (!qword_254A2DE00)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDD3C, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.RequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DE00);
  }
  return result;
}

unint64_t sub_20E66BE64()
{
  unint64_t result;

  result = qword_254A2DE08;
  if (!qword_254A2DE08)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDCC4, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.PreferredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DE08);
  }
  return result;
}

unint64_t sub_20E66BEAC()
{
  unint64_t result;

  result = qword_254A2DE10;
  if (!qword_254A2DE10)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDCEC, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.PreferredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DE10);
  }
  return result;
}

unint64_t sub_20E66BEF4()
{
  unint64_t result;

  result = qword_254A2DE18;
  if (!qword_254A2DE18)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDD64, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DE18);
  }
  return result;
}

unint64_t sub_20E66BF3C()
{
  unint64_t result;

  result = qword_254A2DE20;
  if (!qword_254A2DE20)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EDD8C, &type metadata for ASCPublicKeyCredentialRegistrationExtensionInputs.LargeBlob.SupportRequirement.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2DE20);
  }
  return result;
}

uint64_t sub_20E66BF80(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6465726975716572 && a2 == 0xE800000000000000;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6572726566657270 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20E66C07C(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000012 && a2 == 0x800000020E6F7320)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_20E66C100(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000015 && a2 == 0x800000020E6F7340 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C61567475706E69 && a2 == 0xEB00000000736575 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000020E6F7360)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_20E66C264(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F6C42656772616CLL && a2 == 0xE900000000000062;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6713968 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *__swift_project_boxed_opaque_existential_1Tm(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_20E66C394(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void type metadata accessor for ASCAuthorizationError(uint64_t a1)
{
  sub_20E66C530(a1, &qword_254A2DE98);
}

void type metadata accessor for AuthChallengeDisposition(uint64_t a1)
{
  sub_20E66C530(a1, &qword_254A2DEA0);
}

uint64_t sub_20E66C3FC()
{
  return sub_20E66A8D4(&qword_254A2DEA8, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE2A0);
}

uint64_t sub_20E66C42C()
{
  return sub_20E66A8D4(&qword_254A2DEB0, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE2CC);
}

uint64_t sub_20E66C45C()
{
  return sub_20E66A8D4(&qword_254A2DEB8, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE388);
}

uint64_t sub_20E66C48C()
{
  return sub_20E66A8D4(&qword_254A2DEC0, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE354);
}

uint64_t sub_20E66C4BC()
{
  return sub_20E66A8D4(&qword_254A2DEC8, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE310);
}

uint64_t sub_20E66C4EC()
{
  return sub_20E66A8D4(&qword_254A2DED0, 255, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_20E6EE474);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_20E66C530(a1, &qword_254A2DEF8);
}

void sub_20E66C530(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_20E66C574()
{
  return sub_20E66A8D4(&qword_254A2DED8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_20E6EE438);
}

unint64_t sub_20E66C5A8()
{
  unint64_t result;

  result = qword_254A2DEE0;
  if (!qword_254A2DEE0)
  {
    result = MEMORY[0x212BC39A8](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_254A2DEE0);
  }
  return result;
}

uint64_t sub_20E66C5EC()
{
  return sub_20E66A8D4(&qword_254A2DEE8, 255, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_20E6EE4B0);
}

uint64_t sub_20E66C61C()
{
  return sub_20E66A8D4(&qword_254A2DEF0, 255, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE3CC);
}

uint64_t *sub_20E66C668(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_20E66A990(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = a2[3];
    v10 = a2[4];
    sub_20E66A990(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    v11 = *(int *)(a3 + 28);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_20E6E9BC0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = *(int *)(a3 + 32);
    v16 = (uint64_t *)((char *)v4 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = *v17;
    v19 = v17[1];
    sub_20E66A990(*v17, v19);
    *v16 = v18;
    v16[1] = v19;
  }
  return v4;
}

uint64_t sub_20E66C748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_20E6673F4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_20E6673F4(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_20E6E9BC0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return sub_20E6673F4(*(_QWORD *)(a1 + *(int *)(a2 + 32)), *(_QWORD *)(a1 + *(int *)(a2 + 32) + 8));
}

uint64_t sub_20E66C7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_20E66A990(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  sub_20E66A990(v8, v9);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_20E6E9BC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = *(int *)(a3 + 32);
  v15 = (uint64_t *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v17 = *v16;
  v18 = v16[1];
  sub_20E66A990(*v16, v18);
  *v15 = v17;
  v15[1] = v18;
  return a1;
}

uint64_t sub_20E66C868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_20E66A990(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_20E6673F4(v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  sub_20E66A990(v10, v11);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  sub_20E6673F4(v12, v13);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_20E6E9BC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  v18 = *(int *)(a3 + 32);
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  sub_20E66A990(*v20, v22);
  v23 = *v19;
  v24 = v19[1];
  *v19 = v21;
  v19[1] = v22;
  sub_20E6673F4(v23, v24);
  return a1;
}

uint64_t sub_20E66C934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_20E6E9BC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 32)) = *(_OWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_20E66C9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_20E6673F4(v6, v7);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_20E6673F4(v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_20E6E9BC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = *(int *)(a3 + 32);
  v15 = *(_QWORD *)(a1 + v14);
  v16 = *(_QWORD *)(a1 + v14 + 8);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  sub_20E6673F4(v15, v16);
  return a1;
}

uint64_t sub_20E66CA64()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E66CA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_20E6E9BC0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_20E66CAF8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E66CB04(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_20E6E9BC0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ASCABLEAdvertisement()
{
  uint64_t result;

  result = qword_254A2DF60;
  if (!qword_254A2DF60)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_20E66CBBC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_20E6E9BC0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_20E66CC40()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t, uint64_t);
  uint64_t result;
  unint64_t v12;
  void (*v13)(unint64_t, char *, uint64_t);
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  v0 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v14 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DF78);
  v5 = sub_20E6E9BC0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_20E6EE500;
  sub_20E6E9BB4();
  v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  result = v10(v4, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v12 = v9 + v8;
    v13 = *(void (**)(unint64_t, char *, uint64_t))(v6 + 32);
    v13(v12, v4, v5);
    sub_20E6E9BB4();
    result = v10(v2, 1, v5);
    if ((_DWORD)result != 1)
    {
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v13)(v12 + v7, v2, v5);
      qword_254A3ECC0 = v9;
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_20E66CDD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  MEMORY[0x24BDAC7A8](v3);
  v4 = sub_20E6E9BC0();
  MEMORY[0x24BDAC7A8](v4);
  __asm { BR              X9 }
}

uint64_t sub_20E66CE90()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  os_log_type_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v27;

  if (BYTE6(v2) == 16)
  {
    v9 = sub_20E66D218(14, 15, v3, v2);
    sub_20E6A4A9C(v9, v10);
    sub_20E66D294(v11, v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v1) != 1)
    {
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
      v18(v4, v5, v1);
      *(_DWORD *)(v8 - 92) = sub_20E6E9CBC();
      *(_QWORD *)(v8 - 104) = sub_20E66D218(1, 10, v3, v2);
      v20 = v19;
      v21 = sub_20E66D218(11, 13, v3, v2);
      v23 = v22;
      v24 = type metadata accessor for ASCABLEAdvertisement();
      v18(v0 + *(int *)(v24 + 28), v4, v1);
      *(_BYTE *)v0 = *(_DWORD *)(v8 - 92);
      *(_QWORD *)(v0 + 8) = *(_QWORD *)(v8 - 104);
      *(_QWORD *)(v0 + 16) = v20;
      *(_QWORD *)(v0 + 24) = v21;
      *(_QWORD *)(v0 + 32) = v23;
      v25 = (uint64_t *)(v0 + *(int *)(v24 + 32));
      *v25 = v3;
      v25[1] = v2;
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v0, 0, 1, v24);
    }
    sub_20E66DEC4(v5);
    if (qword_254A2DBE8 != -1)
      swift_once();
    v12 = sub_20E6E9F50();
    __swift_project_value_buffer(v12, (uint64_t)qword_254A3ED50);
    v13 = sub_20E6E9F38();
    v14 = sub_20E6EA3E8();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_20E648000, v13, v14, "Could not decode caBLE server URL", v15, 2u);
      MEMORY[0x212BC3A38](v15, -1, -1);
    }
  }
  else
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v16 = sub_20E6E9F50();
    __swift_project_value_buffer(v16, (uint64_t)qword_254A3ED50);
    sub_20E66A990(v3, v2);
    v13 = sub_20E6E9F38();
    v17 = sub_20E6EA3E8();
    if (os_log_type_enabled(v13, v17))
    {
      *(_DWORD *)swift_slowAlloc() = 134217984;
      __asm { BR              X11 }
    }
    sub_20E6673F4(v3, v2);
  }
  sub_20E6673F4(v3, v2);

  v27 = type metadata accessor for ASCABLEAdvertisement();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v0, 1, 1, v27);
}

uint64_t sub_20E66D218(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_20E66D228 + dword_20E66D284[a4 >> 62]))();
}

uint64_t sub_20E66D23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (BYTE6(a4) <= a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (a2 + 1 < a1)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x20E66D284);
  }
  return sub_20E6E9C50();
}

uint64_t sub_20E66D294@<X0>(unsigned __int16 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[6];
  unint64_t v35;
  uint64_t v36;

  v4 = a1;
  v36 = *MEMORY[0x24BDAC8D0];
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDA0);
  MEMORY[0x24BDAC7A8](v30);
  v5 = sub_20E6EA13C();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_20E6EA064();
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v31 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_20E6EA1FC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v4 > 0xFF)
  {
    sub_20E6EA1F0();
    v17 = sub_20E6EA1D8();
    v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v20 = v19;
    v18(v11, v8);
    if (v20 >> 60 != 15)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DE90);
      v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_20E6EE510;
      *(_WORD *)(v21 + 32) = a1;
      *(_BYTE *)(v21 + 34) = 0;
      v34[5] = v17;
      v35 = v20;
      v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E160);
      v34[3] = v22;
      v34[4] = sub_20E66DF04();
      v34[0] = v21;
      __swift_project_boxed_opaque_existential_1Tm(v34, v22);
      swift_bridgeObjectRetain();
      v29[1] = v20;
      v29[2] = v17;
      sub_20E66A9D4(v17, v20);
      sub_20E6E9C44();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
      swift_bridgeObjectRelease();
      v23 = v35;
      sub_20E66DF50();
      sub_20E6EA04C();
      __asm { BR              X10 }
    }
    __break(1u);
    JUMPOUT(0x20E66DA2CLL);
  }
  if (qword_254A2DBA0 != -1)
    swift_once();
  v12 = qword_254A3ECC0;
  v13 = a1;
  if (*(_QWORD *)(qword_254A3ECC0 + 16) <= (unint64_t)a1)
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v24 = sub_20E6E9F50();
    __swift_project_value_buffer(v24, (uint64_t)qword_254A3ED50);
    v25 = sub_20E6E9F38();
    v26 = sub_20E6EA3F4();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v27 = 33554688;
      LOWORD(v34[0]) = a1;
      sub_20E6EA4C0();
      _os_log_impl(&dword_20E648000, v25, v26, "Found unknown reserved caBLE URL: %hu", v27, 6u);
      MEMORY[0x212BC3A38](v27, -1, -1);
    }

    v28 = sub_20E6E9BC0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a2, 1, 1, v28);
  }
  else
  {
    v14 = sub_20E6E9BC0();
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 16))(a2, v12+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v13, v14);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
}

uint64_t sub_20E66DA3C@<X0>(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, unsigned __int16 a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  int v53;
  void (*v54)(char *, char *, uint64_t);
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;

  v56 = a7;
  v57 = a5;
  v55 = a3;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_20E6E9BC0();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v50 - v19;
  sub_20E66D294(a6, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_20E66DEC4((uint64_t)v13);
    if (qword_254A2DBE8 != -1)
      swift_once();
    v21 = sub_20E6E9F50();
    __swift_project_value_buffer(v21, (uint64_t)qword_254A3ED50);
    v22 = sub_20E6E9F38();
    v23 = sub_20E6EA3E8();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_20E648000, v22, v23, "Could not decode caBLE server URL", v24, 2u);
      MEMORY[0x212BC3A38](v24, -1, -1);
    }
    sub_20E6673F4(a4, v57);
    sub_20E6673F4(a2, v55);

    v25 = type metadata accessor for ASCABLEAdvertisement();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v56, 1, 1, v25);
  }
  else
  {
    v54 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v54(v20, v13, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v14);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DE90);
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_20E6EE520;
    *(_BYTE *)(v27 + 32) = a1;
    v28 = sub_20E677310(v27);
    v53 = a1;
    v29 = v28;
    v51 = a2;
    v31 = v30;
    swift_bridgeObjectRelease();
    v60 = v29;
    v61 = v31;
    sub_20E66A990(v29, v31);
    v52 = v20;
    v32 = a4;
    v33 = v55;
    sub_20E66A990(a2, v55);
    sub_20E676D00(a2, v33);
    sub_20E6673F4(a2, v33);
    sub_20E6673F4(v29, v31);
    v34 = v60;
    v35 = v61;
    v58 = v60;
    v59 = v61;
    sub_20E66A990(v60, v61);
    v50 = v18;
    v36 = v57;
    sub_20E66A990(v32, v57);
    sub_20E676D00(v32, v36);
    sub_20E6673F4(v32, v36);
    sub_20E6673F4(v34, v35);
    v37 = v58;
    v38 = v59;
    sub_20E6A4E08();
    v40 = v39;
    v41 = v56;
    v42 = v33;
    v44 = v43;
    v60 = v37;
    v61 = v38;
    sub_20E66A990(v37, v38);
    sub_20E676D00(v40, v44);
    sub_20E6673F4(v40, v44);
    sub_20E6673F4(v37, v38);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v52, v14);
    v45 = v60;
    v46 = v61;
    *(_BYTE *)v41 = v53;
    *(_QWORD *)(v41 + 8) = v51;
    *(_QWORD *)(v41 + 16) = v42;
    v47 = v57;
    *(_QWORD *)(v41 + 24) = v32;
    *(_QWORD *)(v41 + 32) = v47;
    v48 = type metadata accessor for ASCABLEAdvertisement();
    v54((char *)(v41 + *(int *)(v48 + 28)), v50, v14);
    v49 = (uint64_t *)(v41 + *(int *)(v48 + 32));
    *v49 = v45;
    v49[1] = v46;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v41, 0, 1, v48);
  }
}

void sub_20E66DE20(uint64_t *a1, unsigned __int8 *a2)
{
  char v4;
  char v5;
  uint64_t v6;

  if (*(unsigned __int8 *)a1 == *a2)
  {
    sub_20E6B0F54(a1[1], a1[2]);
    if ((v4 & 1) != 0)
    {
      sub_20E6B0F54(a1[3], a1[4]);
      if ((v5 & 1) != 0)
      {
        v6 = type metadata accessor for ASCABLEAdvertisement();
        if ((MEMORY[0x212BC2394]((char *)a1 + *(int *)(v6 + 28), &a2[*(int *)(v6 + 28)]) & 1) != 0)
          sub_20E6B0F54(*(uint64_t *)((char *)a1 + *(int *)(v6 + 32)), *(uint64_t *)((char *)a1 + *(int *)(v6 + 32) + 8));
      }
    }
  }
}

uint64_t sub_20E66DEC4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_20E66DF04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254A2DF70;
  if (!qword_254A2DF70)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_254A2E160);
    result = MEMORY[0x212BC39A8](MEMORY[0x24BDCFBE0], v1);
    atomic_store(result, (unint64_t *)&qword_254A2DF70);
  }
  return result;
}

unint64_t sub_20E66DF50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254A2E620;
  if (!qword_254A2E620)
  {
    v1 = sub_20E6EA13C();
    result = MEMORY[0x212BC39A8](MEMORY[0x24BDC6AE8], v1);
    atomic_store(result, (unint64_t *)&qword_254A2E620);
  }
  return result;
}

uint64_t sub_20E66DF98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  __int128 v16;
  __int128 v17[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0B8);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v3);
  sub_20E67BCC0(a1, (uint64_t)&v15[-v6], &qword_254A2E0B8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0C0);
  if (!swift_dynamicCast())
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    sub_20E67BD44((uint64_t)v17, &qword_254A2E0C8);
    v17[0] = xmmword_20E6EE5A0;
    *(_QWORD *)((char *)&v16 + 7) = 0;
    *(_QWORD *)&v16 = 0;
    sub_20E67BCC0(a1, (uint64_t)v5, &qword_254A2E0B8);
    v7 = sub_20E6767B0(&v19, &v16, 0);
    v8 = v19;
    if (v7)
    {
      if (v7 <= 0)
      {
        sub_20E6E9C38();
        goto LABEL_6;
      }
    }
    else
    {
      v10 = *((_QWORD *)&v19 + 1);
      *(_QWORD *)((char *)&v19 + 7) = 0;
      *(_QWORD *)&v19 = 0;
      if (!v20 || (v11 = *(_QWORD *)(v8 + 16), v10 == v11))
      {
LABEL_6:
        swift_bridgeObjectRelease();
        sub_20E67BD44(a1, &qword_254A2E0B8);
        return *(_QWORD *)&v17[0];
      }
      if ((v10 & 0x8000000000000000) != 0)
LABEL_26:
        __break(1u);
      if (v10 < *(_QWORD *)(v8 + 16))
      {
        LOBYTE(v12) = 0;
        v13 = v20 - 1;
        v14 = v11 - 1;
        do
        {
          *((_BYTE *)&v19 + v12) = *(_BYTE *)(v8 + v10 + 32);
          v12 = v12 + 1;
          if ((v12 & 0x100) != 0)
            goto LABEL_24;
          if (v12 == 14)
          {
            *(_QWORD *)&v16 = v19;
            DWORD2(v16) = DWORD2(v19);
            WORD6(v16) = WORD6(v19);
            sub_20E6E9C44();
            if (!v13 || v14 == v10)
              goto LABEL_6;
            LOBYTE(v12) = 0;
          }
          else if (v14 == v10 || !v13)
          {
            *(_QWORD *)&v16 = v19;
            DWORD2(v16) = DWORD2(v19);
            WORD6(v16) = WORD6(v19);
            sub_20E6E9C44();
            goto LABEL_6;
          }
          ++v10;
          --v13;
        }
        while (v10 < *(_QWORD *)(v8 + 16));
      }
      __break(1u);
LABEL_24:
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
  sub_20E6789E8(v17, (uint64_t)&v19);
  __swift_project_boxed_opaque_existential_1Tm(&v19, v21);
  sub_20E6E9A64();
  sub_20E67BD44(a1, &qword_254A2E0B8);
  v17[0] = v16;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v19);
  return *(_QWORD *)&v17[0];
}

uint64_t sub_20E66E2A8(uint64_t a1, unint64_t a2)
{
  __int128 v3[2];
  uint64_t v4;
  __int128 v5;
  _QWORD v6[4];
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  *(_QWORD *)&v5 = a1;
  *((_QWORD *)&v5 + 1) = a2;
  sub_20E66A990(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E150);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0C0);
  if (!swift_dynamicCast())
  {
    v4 = 0;
    memset(v3, 0, sizeof(v3));
    sub_20E67BD44((uint64_t)v3, &qword_254A2E0C8);
    __asm { BR              X10 }
  }
  sub_20E6789E8(v3, (uint64_t)v6);
  __swift_project_boxed_opaque_existential_1Tm(v6, v6[3]);
  sub_20E6E9A64();
  sub_20E6673F4(v7, v8);
  v3[0] = v5;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
  return *(_QWORD *)&v3[0];
}

uint64_t sub_20E66E890()
{
  uint64_t result;
  uint64_t v1;

  result = sub_20E677310((uint64_t)&unk_24C97FAC8);
  qword_254A2DF80 = result;
  *(_QWORD *)algn_254A2DF88 = v1;
  return result;
}

unint64_t ASCABLEAuthenticator.AuthenticatorError.init(rawValue:)(unint64_t a1)
{
  return sub_20E67745C(a1);
}

unint64_t static ASCABLEAuthenticator.AuthenticatorError._nsErrorDomain.getter()
{
  return 0xD000000000000042;
}

uint64_t sub_20E66E8F0()
{
  sub_20E6EA988();
  sub_20E6EA178();
  return sub_20E6EA9A0();
}

void sub_20E66E950(char a1)
{
  sub_20E6EA988();
  __asm { BR              X10 }
}

uint64_t sub_20E66E998()
{
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E66EA20()
{
  sub_20E67BB80();
  return sub_20E6E9A7C();
}

void sub_20E66EA58(uint64_t a1, char a2)
{
  sub_20E6EA988();
  __asm { BR              X10 }
}

uint64_t sub_20E66EA9C()
{
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

unint64_t sub_20E66EB24@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_20E67745C(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_20E66EB54()
{
  sub_20E67BB80();
  return sub_20E6E9A94();
}

uint64_t sub_20E66EB7C()
{
  sub_20E67BB80();
  return sub_20E6E9A88();
}

unint64_t sub_20E66EBA8()
{
  return 0xD000000000000042;
}

uint64_t sub_20E66EBC4()
{
  sub_20E67BB80();
  return sub_20E6E9A70();
}

uint64_t ASCABLEAuthenticator.__allocating_init(caBLEURL:)(uint64_t a1)
{
  objc_class *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_20E6E9BC0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_allocWithZone(v1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBB218]), sel_init);
  v9 = objc_allocWithZone((Class)type metadata accessor for ASCABLEAuthenticator());
  sub_20E6705C4((uint64_t)v6, v8);
  v11 = v10;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v11;
}

uint64_t ASCABLEAuthenticator.init(caBLEURL:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = sub_20E6E9BC0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBB218]), sel_init);
  v7 = objc_allocWithZone((Class)type metadata accessor for ASCABLEAuthenticator());
  sub_20E6705C4((uint64_t)v5, v6);
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v9;
}

id sub_20E66F004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_completionHandler);
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_completionHandler);
  *v3 = a1;
  v3[1] = a2;
  swift_retain();
  sub_20E67BADC(v4);
  sub_20E670F00(0);
  return objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_powerLogger), sel_logAuthenticationStartedEventIfNeeded);
}

void sub_20E66F118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = sub_20E6E9B3C();
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

void sub_20E66F170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  id v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v1 = sub_20E6EA430();
  v27 = *(_QWORD *)(v1 - 8);
  v28 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v26 = (uint64_t *)((char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = sub_20E677310((uint64_t)&unk_24C97FBC8);
  v5 = v4;
  v29 = v0;
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_cryptographyManager);
  sub_20E66A990(v3, v4);
  v7 = sub_20E677310((uint64_t)&unk_24C97FBF0);
  v9 = v8;
  v30 = v7;
  v31 = v8;
  sub_20E66A990(v3, v5);
  sub_20E66A990(v7, v9);
  sub_20E676D00(v3, v5);
  sub_20E6673F4(v3, v5);
  sub_20E6673F4(v7, v9);
  sub_20E6673F4(v3, v5);
  v11 = v30;
  v10 = v31;
  sub_20E688688(v30, v31);
  v13 = v12;
  v15 = v14;
  v32 = v12;
  v33 = v14;
  v16 = v6 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseTransportCipher;
  swift_beginAccess();
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DFA0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17) == 1)
  {
    __break(1u);
  }
  else
  {
    sub_20E6774A8();
    v18 = sub_20E6E9F8C();
    v20 = v19;
    swift_endAccess();
    sub_20E6673F4(v11, v10);
    sub_20E6673F4(v13, v15);
    v21 = *(void **)(v29 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_webSocket);
    if (v21)
    {
      v23 = v26;
      v22 = v27;
      *v26 = v18;
      v23[1] = v20;
      v24 = v28;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v22 + 104))(v23, *MEMORY[0x24BDD00C0], v28);
      *(_QWORD *)(swift_allocObject() + 16) = v21;
      v25 = v21;
      sub_20E66A990(v18, v20);
      sub_20E6EA424();
      swift_release();
      (*(void (**)(uint64_t *, uint64_t))(v22 + 8))(v23, v24);
      sub_20E6673F4(v3, v5);
      sub_20E6673F4(v18, v20);

    }
    else
    {
      sub_20E6673F4(v3, v5);
      sub_20E6673F4(v18, v20);
    }
  }
}

void sub_20E66F610(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  id v28;
  Swift::String v29;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  void *v74;
  id v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[7];
  char v97;
  _OWORD v98[14];
  char v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _OWORD v107[2];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char v113;
  _OWORD v114[7];
  _OWORD v115[7];
  _BYTE v116[224];
  _BYTE v117[224];

  v3 = v2;
  v6 = sub_20E6EA430();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    objc_opt_self();
    v10 = swift_dynamicCastObjCClass();
    if (!v10)
    {
      objc_opt_self();
      v37 = swift_dynamicCastObjCClass();
      if (!v37)
      {
        v39 = qword_254A2DBE8;
        swift_unknownObjectRetain();
        if (v39 != -1)
          swift_once();
        v40 = sub_20E6E9F50();
        __swift_project_value_buffer(v40, (uint64_t)qword_254A3ED50);
        swift_unknownObjectRetain_n();
        v41 = sub_20E6E9F38();
        v42 = sub_20E6EA3E8();
        if (os_log_type_enabled(v41, v42))
        {
          v43 = (uint8_t *)swift_slowAlloc();
          v44 = swift_slowAlloc();
          v86 = v44;
          *(_DWORD *)v43 = 136315138;
          swift_getObjectType();
          v45 = sub_20E6EA9E8();
          *(_QWORD *)&v100 = sub_20E66A2F8(v45, v46, &v86);
          sub_20E6EA4C0();
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_20E648000, v41, v42, "Received credential with unexpected type: %s", v43, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x212BC3A38](v44, -1, -1);
          MEMORY[0x212BC3A38](v43, -1, -1);

        }
        else
        {

          swift_unknownObjectRelease_n();
        }
        sub_20E674BD4(7);
        goto LABEL_44;
      }
      v38 = (void *)v37;
      v84 = v7;
      swift_unknownObjectRetain_n();
      sub_20E6B8900(v38, (uint64_t)v117);
      sub_20E67B910((uint64_t)v117, (uint64_t)v98, &qword_254A2DFB0);
      sub_20E67B910((uint64_t)v98, (uint64_t)&v100, &qword_254A2DFB0);
      if (sub_20E677518((uint64_t)&v100) == 1)
      {
        __break(1u);
LABEL_46:
        __break(1u);
        return;
      }
      v85 = v3;
      v114[6] = v106;
      v115[0] = v107[0];
      *(_OWORD *)((char *)v115 + 9) = *(_OWORD *)((char *)v107 + 9);
      v114[2] = v102;
      v114[3] = v103;
      v114[4] = v104;
      v114[5] = v105;
      v114[0] = v100;
      v114[1] = v101;
      sub_20E67B910((uint64_t)v98, (uint64_t)v116, &qword_254A2DFB0);
      sub_20E677530((uint64_t)v116);
      sub_20E6B98E8();
      v48 = v47;
      v50 = v49;
      v83 = v6;
      v51 = sub_20E677310((uint64_t)&unk_24C97FC40);
      v53 = v52;
      v86 = v51;
      v87 = v52;
      sub_20E66A990(v51, v52);
      sub_20E66A990(v48, v50);
      sub_20E676D00(v48, v50);
      sub_20E6673F4(v48, v50);
      sub_20E6673F4(v51, v53);
      sub_20E6673F4(v48, v50);
      swift_unknownObjectRelease();
      sub_20E677654((uint64_t)v98);
      v94 = v105;
      v95 = v106;
      v96[0] = v107[0];
      *(_OWORD *)((char *)v96 + 9) = *(_OWORD *)((char *)v107 + 9);
      v90 = v101;
      v91 = v102;
      v92 = v103;
      v93 = v104;
      v55 = v86;
      v54 = v87;
      LOBYTE(v86) = 0;
      v87 = v55;
      v88 = v54;
      v89 = v100;
      sub_20E66A990(v55, v54);
      sub_20E677880((uint64_t)&v86);
LABEL_35:
      v62 = *(_QWORD *)(v85 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_cryptographyManager);
      sub_20E66A990(v55, v54);
      sub_20E66A990(v55, v54);
      v63 = sub_20E677310((uint64_t)&unk_24C97FC68);
      v65 = v64;
      v86 = v63;
      v87 = v64;
      sub_20E66A990(v55, v54);
      sub_20E66A990(v63, v65);
      sub_20E676D00(v55, v54);
      sub_20E6673F4(v55, v54);
      sub_20E6673F4(v63, v65);
      sub_20E6673F4(v55, v54);
      v66 = v86;
      v80 = v87;
      sub_20E688688(v86, v87);
      v81 = v67;
      v82 = v68;
      *(_QWORD *)&v100 = v67;
      *((_QWORD *)&v100 + 1) = v68;
      v69 = v62 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseTransportCipher;
      swift_beginAccess();
      v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DFA0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48))(v69, 1, v70) != 1)
      {
        sub_20E6774A8();
        v71 = sub_20E6E9F8C();
        v73 = v72;
        swift_endAccess();
        sub_20E6673F4(v66, v80);
        sub_20E6673F4(v81, v82);
        sub_20E6673F4(v55, v54);
        v74 = *(void **)(v85 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_webSocket);
        if (v74)
        {
          *v9 = v71;
          v9[1] = v73;
          (*(void (**)(uint64_t *, _QWORD, uint64_t))(v84 + 104))(v9, *MEMORY[0x24BDD00C0], v83);
          *(_QWORD *)(swift_allocObject() + 16) = v74;
          v75 = v74;
          sub_20E66A990(v71, v73);
          sub_20E6EA424();
          swift_release();
          (*(void (**)(uint64_t *, uint64_t))(v84 + 8))(v9, v83);
          objc_msgSend(*(id *)(v85 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_powerLogger), sel_logAuthenticationFinishedEventIfNeeded);
          sub_20E6673F4(v55, v54);

        }
        else
        {
          if (qword_254A2DBE8 != -1)
            swift_once();
          v76 = sub_20E6E9F50();
          __swift_project_value_buffer(v76, (uint64_t)qword_254A3ED50);
          v77 = sub_20E6E9F38();
          v78 = sub_20E6EA3E8();
          if (os_log_type_enabled(v77, v78))
          {
            v79 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v79 = 0;
            _os_log_impl(&dword_20E648000, v77, v78, "Could not send ctap response without a valid socket", v79, 2u);
            MEMORY[0x212BC3A38](v79, -1, -1);
          }

          sub_20E674BD4(0);
          sub_20E6673F4(v55, v54);
        }
        sub_20E6673F4(v71, v73);
LABEL_44:
        swift_unknownObjectRelease();
        return;
      }
      goto LABEL_46;
    }
    v11 = (void *)v10;
    sub_20E67B910(v3 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentCTAPCommand, (uint64_t)v116, &qword_254A2DFC0);
    sub_20E67B910((uint64_t)v116, (uint64_t)v117, &qword_254A2DFC0);
    if (sub_20E677974((uint64_t)v117) != 1)
    {
      sub_20E677988((uint64_t)v117, (uint64_t)v114);
      v12 = sub_20E6779C4((uint64_t)v114);
      v13 = nullsub_1(v114);
      if (v12 == 1)
      {
        v14 = *(_QWORD *)(v13 + 32);
        if (v14 && *(_QWORD *)(v14 + 16))
          LOBYTE(v12) = 2;
        v84 = v7;
        v85 = v3;
        v15 = *(unsigned __int8 *)(v3
                                 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_usedMagicCredentialID);
        v83 = v6;
        if (v15 == 1)
        {
          v16 = (void *)objc_opt_self();
          swift_unknownObjectRetain_n();
          sub_20E67800C((uint64_t)v116, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E6779CC);
          v17 = objc_msgSend(v16, sel_magicCredentialID);
          v18 = sub_20E6E9C80();
          v20 = v19;

        }
        else
        {
          swift_unknownObjectRetain_n();
          sub_20E67800C((uint64_t)v116, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E6779CC);
          v18 = 0;
          v20 = 0xF000000000000000;
        }
        swift_unknownObjectRetain();
        sub_20E6B856C(v11, v12, v18, v20, (uint64_t)&v100);
        v98[12] = v111;
        v98[13] = v112;
        v99 = v113;
        v98[8] = v107[1];
        v98[9] = v108;
        v98[10] = v109;
        v98[11] = v110;
        v98[4] = v104;
        v98[5] = v105;
        v98[6] = v106;
        v98[7] = v107[0];
        v98[0] = v100;
        v98[1] = v101;
        v98[2] = v102;
        v98[3] = v103;
        sub_20E677C9C((uint64_t)&v100);
        v56 = sub_20E6BB12C();
        v58 = v57;
        v59 = sub_20E677310((uint64_t)&unk_24C97FC18);
        v61 = v60;
        v86 = v59;
        v87 = v60;
        sub_20E66A990(v59, v60);
        sub_20E66A990(v56, v58);
        sub_20E676D00(v56, v58);
        sub_20E6673F4(v56, v58);
        sub_20E6673F4(v59, v61);
        sub_20E6673F4(v56, v58);
        swift_unknownObjectRelease();
        sub_20E677E54((uint64_t)&v100);
        sub_20E67800C((uint64_t)v116, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E678088);
        v96[4] = v110;
        v96[5] = v111;
        v96[6] = v112;
        v96[0] = v107[0];
        v96[1] = v107[1];
        v96[2] = v108;
        v96[3] = v109;
        v92 = v103;
        v93 = v104;
        v94 = v105;
        v95 = v106;
        v89 = v100;
        v90 = v101;
        v55 = v86;
        v54 = v87;
        LOBYTE(v86) = 0;
        v87 = v55;
        v88 = v54;
        v97 = v113;
        v91 = v102;
        sub_20E66A990(v55, v54);
        sub_20E678360((uint64_t)&v86);
        goto LABEL_35;
      }
    }
    v32 = qword_254A2DBE8;
    swift_unknownObjectRetain_n();
    if (v32 != -1)
      swift_once();
    v33 = sub_20E6E9F50();
    __swift_project_value_buffer(v33, (uint64_t)qword_254A3ED50);
    v34 = sub_20E6E9F38();
    v35 = sub_20E6EA3E8();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_20E648000, v34, v35, "Received getAssertion response to non-getAssertion command", v36, 2u);
      MEMORY[0x212BC3A38](v36, -1, -1);
    }

    sub_20E674BD4(0);
    swift_unknownObjectRelease_n();
  }
  else
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v21 = sub_20E6E9F50();
    __swift_project_value_buffer(v21, (uint64_t)qword_254A3ED50);
    v22 = a2;
    v23 = a2;
    v24 = sub_20E6E9F38();
    v25 = sub_20E6EA3E8();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v86 = v27;
      *(_DWORD *)v26 = 136315138;
      if (a2)
      {
        swift_getErrorValue();
        v28 = a2;
        v29 = Error.loggerDescription()();
        countAndFlagsBits = v29._countAndFlagsBits;
        object = v29._object;

      }
      else
      {
        object = (void *)0xE500000000000000;
        countAndFlagsBits = 0x3E6C696E3CLL;
      }
      *(_QWORD *)&v100 = sub_20E66A2F8(countAndFlagsBits, (unint64_t)object, &v86);
      sub_20E6EA4C0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20E648000, v24, v25, "Transaction failed: %s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x212BC3A38](v27, -1, -1);
      MEMORY[0x212BC3A38](v26, -1, -1);
    }
    else
    {

    }
    sub_20E674BD4(7);
  }
}

uint64_t sub_20E670498(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20E6704C4 + 4 * byte_20E6EE5CA[a1]))(1701602409, 0xE400000000000000);
}

unint64_t sub_20E6704C4()
{
  return 0xD000000000000010;
}

void sub_20E670524(char *a1)
{
  sub_20E67C6C4(*a1);
}

void sub_20E670530()
{
  char *v0;

  sub_20E66E950(*v0);
}

void sub_20E670538(uint64_t a1)
{
  char *v1;

  sub_20E67CA44(a1, *v1);
}

void sub_20E670540(uint64_t a1)
{
  char *v1;

  sub_20E66EA58(a1, *v1);
}

uint64_t sub_20E670548@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_20E67896C();
  *a1 = result;
  return result;
}

uint64_t sub_20E670574@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_20E670498(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_20E67059C()
{
  qword_254A3ECC8 = (uint64_t)&unk_24C97FD28;
}

void sub_20E6705B0()
{
  qword_254A3ECD0 = (uint64_t)&unk_24C97FD50;
}

void sub_20E6705C4(uint64_t a1, void *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  objc_class *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void *v44;
  char *v45;
  id v46;
  void *v47;
  void *v48;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  void *v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  objc_super v62;
  _QWORD v63[28];
  _BYTE v64[224];
  uint64_t v65[8];
  uint64_t v66;

  v61 = a1;
  v58 = a2;
  v66 = sub_20E6E9BC0();
  v3 = *(_QWORD *)(v66 - 8);
  MEMORY[0x24BDAC7A8](v66);
  v59 = (char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t)&v2[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_advertisement];
  v6 = type metadata accessor for ASCABLEAdvertisement();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v55 = v5;
  v7(v5, 1, 1, v6);
  v54 = OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_webSocket;
  *(_QWORD *)&v2[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_webSocket] = 0;
  sub_20E6EA1CC();
  sub_20E6EA1CC();
  v8 = sub_20E67BE44(0, &qword_254A2E198);
  v56 = v2;
  v9 = v2;
  v49[0] = v8;
  v10 = (void *)sub_20E6EA418();
  v11 = objc_allocWithZone(MEMORY[0x24BE08738]);
  v12 = (void *)sub_20E6EA1C0();
  swift_bridgeObjectRelease();
  v13 = (void *)sub_20E6EA1C0();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v11, sel_initWithEnvironmentName_namedDelegatePort_queue_, v12, v13, v10);

  if (!v14)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    return;
  }
  v51 = OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_apsConnection;
  *(_QWORD *)&v9[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_apsConnection] = v14;
  v15 = (uint64_t *)&v9[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_completionHandler];
  *v15 = 0;
  v15[1] = 0;
  v52 = v15;
  v16 = OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_powerLogger;
  v17 = objc_msgSend(objc_allocWithZone((Class)_ASCABLEPowerLogger), sel_init);
  v53 = v16;
  *(_QWORD *)&v9[v16] = v17;
  v18 = (uint64_t)&v9[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentCTAPCommand];
  sub_20E67BE7C((uint64_t)v64);
  v50 = v18;
  sub_20E67B910((uint64_t)v64, v18, &qword_254A2DFC0);
  v19 = OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_networkPathMonitor;
  sub_20E6EA010();
  swift_allocObject();
  v20 = sub_20E6EA004();
  v49[1] = v19;
  *(_QWORD *)&v9[v19] = v20;
  v9[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_usedMagicCredentialID] = 0;
  v9[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentState] = 0;
  v57 = v3;
  v21 = (uint64_t)v59;
  v22 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v59, v61, v66);
  v23 = v60;
  sub_20E68BAC0(v21, (uint64_t)v65);
  if (!v23)
  {
    v35 = sub_20E6883F4(v65[2], v65[3], v65[0], v65[1]);
    sub_20E67BEAC(v65);
    *(_QWORD *)&v9[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_cryptographyManager] = v35;
    v36 = v58;
    *(_QWORD *)&v9[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_bluetoothAdvertiser] = v58;
    v37 = objc_allocWithZone((Class)type metadata accessor for ASCABLEAuthenticator.APSWrapper());
    v38 = v36;
    v39 = objc_msgSend(v37, sel_init);
    *(_QWORD *)&v9[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_apsWrapper] = v39;

    v40 = (objc_class *)type metadata accessor for ASCABLEAuthenticator();
    v62.receiver = v9;
    v62.super_class = v40;
    v41 = (char *)objc_msgSendSuper2(&v62, sel_init);
    v42 = *(_QWORD *)&v41[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_apsWrapper];
    if (v42)
    {
      v43 = v41;
      swift_unknownObjectWeakAssign();
      v44 = *(void **)&v43[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_apsConnection];
      v45 = v43;
      objc_msgSend(v44, sel_setDelegate_, v42);
      v46 = v44;
      v47 = (void *)sub_20E6EA334();
      objc_msgSend(v46, sel__setEnabledTopics_, v47);

      v48 = (void *)sub_20E6EA418();
      sub_20E6E9FF8();

      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v22, v66);
      return;
    }
    goto LABEL_13;
  }
  if (qword_254A2DBE8 != -1)
    swift_once();
  v24 = sub_20E6E9F50();
  __swift_project_value_buffer(v24, (uint64_t)qword_254A3ED50);
  v25 = v23;
  v26 = sub_20E6E9F38();
  v27 = sub_20E6EA3E8();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    v60 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v28 = 138412290;
    v29 = sub_20E6E9B3C();
    v63[0] = v29;
    v22 = v61;
    sub_20E6EA4C0();
    v30 = v60;
    *v60 = v29;

    _os_log_impl(&dword_20E648000, v26, v27, "Could not decode caBLE url: %@", v28, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F160);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v30, -1, -1);
    MEMORY[0x212BC3A38](v28, -1, -1);
  }
  else
  {

  }
  v31 = v66;
  v32 = v57;
  v33 = v58;

  sub_20E6785D4();
  swift_allocError();
  *v34 = 2;
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v22, v31);
  sub_20E67BD44(v55, &qword_254A2E330);

  sub_20E67BADC(*v52);
  sub_20E67B910(v50, (uint64_t)v63, &qword_254A2DFC0);
  sub_20E67800C((uint64_t)v63, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E678088);

  swift_release();
  type metadata accessor for ASCABLEAuthenticator();
  swift_deallocPartialClassInstance();
}

void sub_20E670C18(char a1)
{
  void *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _DWORD *v6;
  id v7;

  if (qword_254A2DBE8 != -1)
    swift_once();
  v3 = sub_20E6E9F50();
  __swift_project_value_buffer(v3, (uint64_t)qword_254A3ED50);
  v7 = v1;
  v4 = sub_20E6E9F38();
  v5 = sub_20E6EA3D0();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (_DWORD *)swift_slowAlloc();
    swift_slowAlloc();
    *v6 = 136315394;
    __asm { BR              X10 }
  }

}

void sub_20E670F00(char a1)
{
  NSObject *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  int v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  void *v54;
  _QWORD *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  os_log_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  id v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_t v80;
  uint64_t aBlock;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, void *, void *, uint64_t, uint64_t);
  void *v84;
  void (*v85)(void *, void *, uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
  MEMORY[0x24BDAC7A8](v3);
  v79 = (uint64_t)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for CableRequest.AllocationRequest(0);
  MEMORY[0x24BDAC7A8](v77);
  v78 = (uint64_t)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_20E6EA094();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CableRequest(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v73 - v14;
  v16 = *((_BYTE *)&v1->isa + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentState);
  *((_BYTE *)&v1->isa + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentState) = 1;
  sub_20E670C18(v16);
  v80 = v1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, *(uint64_t *)((char *)&v1->isa+ OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_cryptographyManager)+ OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_tunnelID, v6);
  sub_20E6EA070();
  v17 = aBlock;
  v18 = v82;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_20E6DD910(v17, v18, a1, (uint64_t)v15);
  v19 = v18;
  v20 = (uint64_t)v15;
  sub_20E6673F4(v17, v19);
  sub_20E67BD04(&qword_254A2E178, type metadata accessor for CableRequest, (uint64_t)&unk_20E6F3FEC);
  v29 = sub_20E6E9E90();
  v31 = v30;
  v32 = (uint64_t)v13;
  v33 = objc_allocWithZone(MEMORY[0x24BE30368]);
  v34 = (void *)sub_20E6EA1C0();
  v35 = (void *)sub_20E6E9C68();
  sub_20E6673F4(v29, v31);
  v36 = objc_msgSend(v33, sel_initWithPushTopic_protoData_, v34, v35);

  if (v36)
  {
    v37 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    if (v37)
    {
      v38 = v37;
      v39 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v85 = sub_20E67BCB8;
      v86 = v39;
      aBlock = MEMORY[0x24BDAC760];
      v82 = 1107296256;
      v83 = sub_20E671A18;
      v84 = &block_descriptor_32;
      v40 = _Block_copy(&aBlock);
      v41 = v36;
      swift_release();
      objc_msgSend(v41, sel_setCompletionBlock_, v40);
      _Block_release(v40);

      if (qword_254A2DBE8 != -1)
        swift_once();
      v42 = sub_20E6E9F50();
      __swift_project_value_buffer(v42, (uint64_t)qword_254A3ED50);
      v43 = v32;
      sub_20E67BDC4((uint64_t)v15, v32, type metadata accessor for CableRequest);
      v44 = sub_20E6E9F38();
      v45 = sub_20E6EA400();
      if (!os_log_type_enabled(v44, (os_log_type_t)v45))
      {
        sub_20E67BE08(v43, type metadata accessor for CableRequest);

LABEL_37:
        objc_msgSend(v38, sel_sendMessage_, v41);

        sub_20E67BE08((uint64_t)v15, type metadata accessor for CableRequest);
        return;
      }
      v74 = v45;
      v80 = v44;
      v46 = (uint8_t *)swift_slowAlloc();
      v73 = swift_slowAlloc();
      aBlock = v73;
      *(_DWORD *)v46 = 136315138;
      v47 = v79;
      sub_20E67BCC0(v43, v79, &qword_254A2E170);
      v48 = type metadata accessor for CableRequest.OneOf_Request(0);
      v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48))(v47, 1, v48);
      v75 = v41;
      v76 = v38;
      if (v49 == 1)
      {
        sub_20E67BD44(v47, &qword_254A2E170);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          v61 = v78;
          sub_20E67BD80(v47, v78, type metadata accessor for CableRequest.AllocationRequest);
          v62 = v77;
          goto LABEL_30;
        }
        sub_20E67BE08(v47, type metadata accessor for CableRequest.OneOf_Request);
      }
      v61 = v78;
      sub_20E6E9DD0();
      v62 = v77;
      *(_OWORD *)(v61 + *(int *)(v77 + 20)) = xmmword_20E6EE5B0;
      *(_BYTE *)(v61 + *(int *)(v62 + 24)) = 2;
LABEL_30:
      v63 = (uint64_t *)(v61 + *(int *)(v62 + 20));
      v64 = v63[1];
      if (v64 >> 60 == 15)
        v65 = 0;
      else
        v65 = *v63;
      if (v64 >> 60 == 15)
        v66 = 0xC000000000000000;
      else
        v66 = v63[1];
      sub_20E66A9D4(*v63, v64);
      sub_20E67BE08(v61, type metadata accessor for CableRequest.AllocationRequest);
      sub_20E6DE828(v65, v66);
      v87 = v67;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
      sub_20E67BC78((unint64_t *)&qword_254A2E110, (uint64_t *)&unk_254A2EE80, MEMORY[0x24BEE12B0]);
      v68 = sub_20E6EA184();
      v70 = v69;
      swift_bridgeObjectRelease();
      sub_20E6673F4(v65, v66);
      v87 = sub_20E66A2F8(v68, v70, &aBlock);
      sub_20E6EA4C0();
      swift_bridgeObjectRelease();
      sub_20E67BE08(v43, type metadata accessor for CableRequest);
      v71 = v80;
      _os_log_impl(&dword_20E648000, v80, (os_log_type_t)v74, "Requesting server allocation with tunnelID \"%s\"", v46, 0xCu);
      v72 = v73;
      swift_arrayDestroy();
      MEMORY[0x212BC3A38](v72, -1, -1);
      MEMORY[0x212BC3A38](v46, -1, -1);

      v41 = v75;
      v38 = v76;
      goto LABEL_37;
    }
    if (qword_254A2DBE8 != -1)
      swift_once();
    v56 = sub_20E6E9F50();
    __swift_project_value_buffer(v56, (uint64_t)qword_254A3ED50);
    v57 = sub_20E6E9F38();
    v58 = sub_20E6EA3E8();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v59 = 0;
      _os_log_impl(&dword_20E648000, v57, v58, "Could not retrieve shared FTMessageDelivery_APS", v59, 2u);
      MEMORY[0x212BC3A38](v59, -1, -1);
    }

    sub_20E6785D4();
    v54 = (void *)swift_allocError();
    *v60 = 1;
    swift_willThrow();

  }
  else
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v50 = sub_20E6E9F50();
    __swift_project_value_buffer(v50, (uint64_t)qword_254A3ED50);
    v51 = sub_20E6E9F38();
    v52 = sub_20E6EA3E8();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_20E648000, v51, v52, "Could not encode protobuf message", v53, 2u);
      MEMORY[0x212BC3A38](v53, -1, -1);
    }

    sub_20E6785D4();
    v54 = (void *)swift_allocError();
    *v55 = 1;
    swift_willThrow();
  }
  sub_20E67BE08(v20, type metadata accessor for CableRequest);
  if (qword_254A2DBE8 != -1)
    swift_once();
  v21 = sub_20E6E9F50();
  __swift_project_value_buffer(v21, (uint64_t)qword_254A3ED50);
  v22 = v54;
  v23 = v54;
  v24 = sub_20E6E9F38();
  v25 = sub_20E6EA3E8();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    aBlock = v27;
    *(_DWORD *)v26 = 136315138;
    swift_getErrorValue();
    v28 = Error.loggerDescription()();
    v87 = sub_20E66A2F8(v28._countAndFlagsBits, (unint64_t)v28._object, &aBlock);
    sub_20E6EA4C0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20E648000, v24, v25, "Could not encode allocation request: %s", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v27, -1, -1);
    MEMORY[0x212BC3A38](v26, -1, -1);
  }
  else
  {

  }
  sub_20E674BD4(3);

}

void sub_20E6718FC(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;

  v8 = a5 + 16;
  swift_beginAccess();
  v9 = MEMORY[0x212BC3AEC](v8);
  if (v9)
  {
    v10 = v9;
    sub_20E6793A0(a1, a2, a3);
  }
  else
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v11 = sub_20E6E9F50();
    __swift_project_value_buffer(v11, (uint64_t)qword_254A3ED50);
    v10 = sub_20E6E9F38();
    v12 = sub_20E6EA400();
    if (os_log_type_enabled(v10, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_20E648000, v10, v12, "caBLE authenticator was deinitialized while waiting for allocate server response", v13, 2u);
      MEMORY[0x212BC3A38](v13, -1, -1);
    }
  }

}

uint64_t sub_20E671A18(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  void (*v8)(void *, void *, uint64_t, uint64_t);
  uint64_t v9;
  id v10;
  id v11;

  v8 = *(void (**)(void *, void *, uint64_t, uint64_t))(a1 + 32);
  if (a5)
    v9 = sub_20E6EA154();
  else
    v9 = 0;
  swift_retain();
  v10 = a2;
  v11 = a3;
  v8(a2, a3, a4, v9);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_20E671ACC(uint64_t a1, unint64_t a2, unsigned __int16 a3)
{
  char *v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  unsigned __int16 v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint8_t *v28;
  uint8_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t aBlock;
  uint64_t v54;
  void (*v55)(uint64_t, void *);
  void *v56;
  void (*v57)(void *);
  uint64_t v58;

  v4 = v3;
  v52 = a2;
  v50 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E330);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v46 - v10;
  v12 = type metadata accessor for ASCABLEAdvertisement();
  v51 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_20E6EA0AC();
  MEMORY[0x24BDAC7A8](v15);
  v16 = sub_20E6EA094();
  v48 = *(_QWORD *)(v16 - 8);
  v49 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_254A2DBE8 != -1)
    swift_once();
  v19 = sub_20E6E9F50();
  __swift_project_value_buffer(v19, (uint64_t)qword_254A3ED50);
  v20 = sub_20E6E9F38();
  v21 = sub_20E6EA3D0();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v47 = v11;
    v23 = a3;
    v24 = v12;
    v25 = v9;
    v26 = v14;
    v27 = v4;
    v28 = v22;
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_20E648000, v20, v21, "Starting Bluetooth advertisement", v22, 2u);
    v29 = v28;
    v4 = v27;
    v14 = v26;
    v9 = v25;
    v12 = v24;
    a3 = v23;
    v11 = v47;
    MEMORY[0x212BC3A38](v29, -1, -1);
  }

  sub_20E6EA0A0();
  sub_20E6EA088();
  sub_20E6EA070();
  v31 = aBlock;
  v30 = v54;
  (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v49);
  sub_20E66A990(v31, v30);
  v32 = v50;
  v33 = v52;
  sub_20E66A990(v50, v52);
  sub_20E66DA3C(0, v31, v30, v32, v33, a3, (uint64_t)v11);
  v34 = v51;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v11, 1, v12) == 1)
  {
    sub_20E67BD44((uint64_t)v11, &qword_254A2E330);
    sub_20E674BD4(3);
    return sub_20E6673F4(v31, v30);
  }
  else
  {
    sub_20E67BD80((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ASCABLEAdvertisement);
    sub_20E67BDC4((uint64_t)v14, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ASCABLEAdvertisement);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v9, 0, 1, v12);
    v36 = (uint64_t)&v4[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_advertisement];
    swift_beginAccess();
    sub_20E67BAEC((uint64_t)v9, v36);
    swift_endAccess();
    v37 = sub_20E685694((uint64_t)v14);
    if (v38 >> 60 == 15)
    {
      sub_20E674BD4(3);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      v41 = *(void **)&v4[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_bluetoothAdvertiser];
      v42 = (void *)sub_20E6E9C68();
      objc_msgSend(v41, sel_setFidoPayloadData_, v42);

      v43 = swift_allocObject();
      *(_QWORD *)(v43 + 16) = v4;
      v57 = sub_20E67BB34;
      v58 = v43;
      aBlock = MEMORY[0x24BDAC760];
      v54 = 1107296256;
      v55 = sub_20E6C4F64;
      v56 = &block_descriptor;
      v44 = _Block_copy(&aBlock);
      v45 = v4;
      swift_release();
      objc_msgSend(v41, sel_activateWithCompletion_, v44);
      sub_20E66AA28(v39, v40);
      _Block_release(v44);
    }
    sub_20E6673F4(v31, v30);
    return sub_20E67BE08((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ASCABLEAdvertisement);
  }
}

void sub_20E671F78(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *oslog;
  uint64_t v12;

  if (a1)
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v2 = sub_20E6E9F50();
    __swift_project_value_buffer(v2, (uint64_t)qword_254A3ED50);
    v3 = a1;
    v4 = sub_20E6E9F38();
    v5 = sub_20E6EA3E8();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v7 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v6 = 138412290;
      v12 = sub_20E6E9B3C();
      sub_20E6EA4C0();
      *v7 = v12;

      _os_log_impl(&dword_20E648000, v4, v5, "Could not begin advertising: %@", v6, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F160);
      swift_arrayDestroy();
      MEMORY[0x212BC3A38](v7, -1, -1);
      MEMORY[0x212BC3A38](v6, -1, -1);
    }
    else
    {

    }
    sub_20E674BD4(5);
  }
  else
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v8 = sub_20E6E9F50();
    __swift_project_value_buffer(v8, (uint64_t)qword_254A3ED50);
    oslog = sub_20E6E9F38();
    v9 = sub_20E6EA3D0();
    if (os_log_type_enabled(oslog, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_20E648000, oslog, v9, "Started advertising", v10, 2u);
      MEMORY[0x212BC3A38](v10, -1, -1);
    }

  }
}

void sub_20E6721D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  char *v25;
  uint64_t inited;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  objc_class *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void *v62;
  char *v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  uint64_t (**v65)(uint64_t, uint64_t);
  uint64_t v66;
  _QWORD v67[3];
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD v77[2];
  uint64_t v78;

  v67[2] = a8;
  v67[1] = a7;
  v74 = a6;
  v69 = a1;
  v70 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_20E6E9BC0();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v67[0] = (char *)v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v68 = (char *)v67 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v71 = (char *)v67 - v17;
  v18 = sub_20E6E9A04();
  v72 = *(_QWORD *)(v18 - 8);
  v73 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E6E99F8();
  sub_20E6E99EC();
  swift_bridgeObjectRetain();
  sub_20E6E99D4();
  *(_QWORD *)&v77[0] = 0;
  *((_QWORD *)&v77[0] + 1) = 0xE000000000000000;
  sub_20E6EA610();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v77[0] = 0xD000000000000016;
  *((_QWORD *)&v77[0] + 1) = 0x800000020E6F7940;
  sub_20E6EA280();
  sub_20E6EA280();
  sub_20E6EA280();
  sub_20E6E99E0();
  v74 = v20;
  sub_20E6E99C8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_20E67BD44((uint64_t)v10, &qword_253E8D1D0);
    if (qword_254A2DBE8 != -1)
      swift_once();
    v21 = sub_20E6E9F50();
    __swift_project_value_buffer(v21, (uint64_t)qword_254A3ED50);
    v22 = sub_20E6E9F38();
    v23 = sub_20E6EA3E8();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_20E648000, v22, v23, "Could not determine relay URL", v24, 2u);
      MEMORY[0x212BC3A38](v24, -1, -1);
    }

    sub_20E674BD4(4);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v73);
  }
  else
  {
    v25 = v71;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v71, v10, v11);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E130);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20E6EE520;
    strcpy((char *)(inited + 32), "Authorization");
    *(_WORD *)(inited + 46) = -4864;
    strcpy((char *)v77, "AccessToken ");
    BYTE13(v77[0]) = 0;
    HIWORD(v77[0]) = -5120;
    sub_20E6EA280();
    v27 = *((_QWORD *)&v77[0] + 1);
    *(_QWORD *)(inited + 48) = *(_QWORD *)&v77[0];
    *(_QWORD *)(inited + 56) = v27;
    v28 = sub_20E6A5760(inited);
    v29 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v30 = (uint64_t)v68;
    v29(v68, v25, v11);
    v31 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v32 = objc_msgSend(v31, sel_ephemeralSessionConfiguration);
    v33 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_, v32);

    v34 = (objc_class *)type metadata accessor for ASWebSocket();
    memset(v77, 0, sizeof(v77));
    v78 = 0;
    v35 = objc_allocWithZone(v34);
    v36 = v70;
    swift_bridgeObjectRetain();
    v37 = sub_20E6C863C(v30, (uint64_t)&unk_24C97FE70, v28, v33, v69, v36, (uint64_t)v77);

    v38 = OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_webSocket;
    v39 = v75;
    v40 = *(void **)(v75 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_webSocket);
    *(_QWORD *)(v75 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_webSocket) = v37;

    v41 = *(_QWORD *)(v39 + v38);
    if (v41)
    {
      v42 = v12;
      *(_QWORD *)(v41 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_delegate + 8) = &off_24C980CA0;
      swift_unknownObjectWeakAssign();
      v43 = (char *)v67[0];
      if (qword_254A2DBE8 != -1)
        swift_once();
      v44 = sub_20E6E9F50();
      __swift_project_value_buffer(v44, (uint64_t)qword_254A3ED50);
      v29(v43, v25, v11);
      swift_bridgeObjectRetain();
      v45 = sub_20E6E9F38();
      v46 = sub_20E6EA400();
      v47 = v46;
      if (os_log_type_enabled(v45, v46))
      {
        v48 = v43;
        v49 = swift_slowAlloc();
        v70 = swift_slowAlloc();
        *(_QWORD *)&v77[0] = v70;
        *(_DWORD *)v49 = 136315394;
        sub_20E67BD04(&qword_254A2E138, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        LODWORD(v69) = v47;
        v50 = sub_20E6EA8B0();
        v76 = sub_20E66A2F8(v50, v51, (uint64_t *)v77);
        sub_20E6EA4C0();
        swift_bridgeObjectRelease();
        v52 = v48;
        v53 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
        v53((uint64_t)v52, v11);
        *(_WORD *)(v49 + 12) = 2080;
        swift_bridgeObjectRetain();
        v54 = sub_20E6EA160();
        v55 = v11;
        v57 = v56;
        swift_bridgeObjectRelease();
        v58 = v54;
        v39 = v75;
        v76 = sub_20E66A2F8(v58, v57, (uint64_t *)v77);
        sub_20E6EA4C0();
        swift_bridgeObjectRelease_n();
        v11 = v55;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_20E648000, v45, (os_log_type_t)v69, "Connecting to relay at %s, headers: %s", (uint8_t *)v49, 0x16u);
        v59 = v70;
        swift_arrayDestroy();
        MEMORY[0x212BC3A38](v59, -1, -1);
        MEMORY[0x212BC3A38](v49, -1, -1);

      }
      else
      {
        v53 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
        v53((uint64_t)v43, v11);

        swift_bridgeObjectRelease_n();
      }
      v60 = *(char **)(v39 + v38);
      if (v60)
      {
        v61 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v62 = *(void **)&v60[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_webSocketTask];
        v63 = v60;
        swift_retain();
        objc_msgSend(v62, sel_resume);
        v64 = (uint64_t (*)(uint64_t, uint64_t))swift_allocObject();
        *((_QWORD *)v64 + 2) = v63;
        *((_QWORD *)v64 + 3) = sub_20E67BA94;
        *((_QWORD *)v64 + 4) = v61;
        v65 = (uint64_t (**)(uint64_t, uint64_t))&v63[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_connectionCompletionHandler];
        v66 = *(_QWORD *)&v63[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_connectionCompletionHandler];
        *v65 = sub_20E67BAD0;
        v65[1] = v64;
        sub_20E67BADC(v66);
        v53((uint64_t)v71, v11);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v74, v73);
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void sub_20E6729A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  NSObject *v11;
  char v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t countAndFlagsBits;
  void *object;
  void *v22;
  uint64_t v23;

  v5 = a3 + 16;
  if (qword_254A2DBE8 != -1)
    swift_once();
  v6 = sub_20E6E9F50();
  __swift_project_value_buffer(v6, (uint64_t)qword_254A3ED50);
  v7 = sub_20E6E9F38();
  v8 = sub_20E6EA3D0();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_20E648000, v7, v8, "Authenticator opened socket connection.", v9, 2u);
    MEMORY[0x212BC3A38](v9, -1, -1);
  }

  swift_beginAccess();
  v10 = MEMORY[0x212BC3AEC](v5);
  if (v10)
  {
    v11 = v10;
    if (a2 && (a1 == 0x6261632E6F646966 && a2 == 0xEA0000000000656CLL || (sub_20E6EA8EC() & 1) != 0))
    {
      v12 = *((_BYTE *)&v11->isa + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentState);
      *((_BYTE *)&v11->isa + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentState) = 3;
      sub_20E670C18(v12);
    }
    else
    {
      swift_bridgeObjectRetain_n();
      v15 = sub_20E6E9F38();
      v16 = sub_20E6EA3E8();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        v18 = swift_slowAlloc();
        v23 = v18;
        *(_DWORD *)v17 = 136315138;
        if (a2)
        {
          swift_bridgeObjectRetain_n();
          __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1A0);
          if ((swift_dynamicCast() & 1) != 0)
          {
            swift_getErrorValue();
            v19 = Error.loggerDescription()();
            countAndFlagsBits = v19._countAndFlagsBits;
            object = v19._object;

            swift_bridgeObjectRelease();
          }
          else
          {
            sub_20E6EA6B8();
            swift_bridgeObjectRelease();
            countAndFlagsBits = 0;
            object = (void *)0xE000000000000000;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          object = (void *)0xE500000000000000;
          countAndFlagsBits = 0x3E6C696E3CLL;
        }
        sub_20E66A2F8(countAndFlagsBits, (unint64_t)object, &v23);
        sub_20E6EA4C0();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_20E648000, v15, v16, "Received socket connection with unexpected protocol: %s", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x212BC3A38](v18, -1, -1);
        MEMORY[0x212BC3A38](v17, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_20E674BD4(4);
    }
  }
  else
  {
    v11 = sub_20E6E9F38();
    v13 = sub_20E6EA400();
    if (os_log_type_enabled(v11, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_20E648000, v11, v13, "Client was deinitialized while waiting for initial connection.", v14, 2u);
      MEMORY[0x212BC3A38](v14, -1, -1);
    }
  }

}

void sub_20E672D9C(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint8_t *v44;
  void *v45;
  uint64_t *v46;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v3 = v2;
  v52 = a1;
  v5 = sub_20E6EA430();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v50 = (uint64_t *)((char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E330);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ASCABLEAdvertisement();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_254A2DBE8 != -1)
    swift_once();
  v15 = sub_20E6E9F50();
  v53 = __swift_project_value_buffer(v15, (uint64_t)qword_254A3ED50);
  v16 = sub_20E6E9F38();
  v17 = sub_20E6EA3D0();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    v51 = v12;
    v19 = v11;
    v20 = a2;
    v21 = v6;
    v22 = v14;
    v23 = v5;
    v24 = v3;
    v25 = v18;
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_20E648000, v16, v17, "Received handshake", v18, 2u);
    v26 = v25;
    v3 = v24;
    v5 = v23;
    v14 = v22;
    v6 = v21;
    a2 = v20;
    v11 = v19;
    v12 = v51;
    MEMORY[0x212BC3A38](v26, -1, -1);
  }

  v27 = v3 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_advertisement;
  swift_beginAccess();
  sub_20E67BCC0(v27, (uint64_t)v10, &qword_254A2E330);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_20E67BD44((uint64_t)v10, &qword_254A2E330);
    v28 = sub_20E6E9F38();
    v29 = sub_20E6EA3E8();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_20E648000, v28, v29, "Tried to perform Noise handshake without an advertisement.", v30, 2u);
      MEMORY[0x212BC3A38](v30, -1, -1);
    }

    sub_20E674BD4(0);
  }
  else
  {
    sub_20E67BD80((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ASCABLEAdvertisement);
    v51 = v3;
    v31 = (uint64_t *)&v14[*(int *)(v11 + 32)];
    v32 = *v31;
    v33 = v31[1];
    sub_20E66A990(*v31, v33);
    v34 = sub_20E68595C(v32, v33);
    v36 = v35;
    sub_20E6673F4(v32, v33);
    v37 = sub_20E6860F4(v52, a2, v34, v36);
    v52 = v36;
    v39 = v38;
    v40 = sub_20E6E9F38();
    v41 = sub_20E6EA3D0();
    if (os_log_type_enabled(v40, (os_log_type_t)v41))
    {
      v42 = v37;
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_20E648000, v40, (os_log_type_t)v41, "Finishing handshake", v43, 2u);
      v44 = v43;
      v37 = v42;
      MEMORY[0x212BC3A38](v44, -1, -1);
    }

    v45 = *(void **)(v51 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_webSocket);
    if (v45)
    {
      v46 = v50;
      *v50 = v37;
      v46[1] = v39;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v6 + 104))(v46, *MEMORY[0x24BDD00C0], v5);
      *(_QWORD *)(swift_allocObject() + 16) = v45;
      v47 = v45;
      v48 = v37;
      v49 = v47;
      sub_20E66A990(v48, v39);
      sub_20E6EA424();
      swift_release();
      (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v46, v5);

      sub_20E6733A4();
      sub_20E6673F4(v48, v39);
      sub_20E6673F4(v34, v52);
      sub_20E67BE08((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for ASCABLEAdvertisement);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_20E6733A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  char v15;
  id v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;

  v1 = sub_20E6EA430();
  v27 = *(_QWORD *)(v1 - 8);
  v28 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (uint64_t *)((char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_254A2DBB8 != -1)
    swift_once();
  v4 = qword_254A3ECD0;
  v5 = qword_254A2DBA8;
  swift_bridgeObjectRetain();
  if (v5 != -1)
    swift_once();
  v7 = qword_254A2DF80;
  v6 = *(_QWORD *)algn_254A2DF88;
  sub_20E66A990(qword_254A2DF80, *(unint64_t *)algn_254A2DF88);
  v8 = sub_20E6A5650((uint64_t)&unk_24C97FE20);
  if (qword_254A2DBB0 != -1)
    swift_once();
  v9 = swift_bridgeObjectRetain();
  v10 = sub_20E673A34(v9);
  swift_bridgeObjectRelease();
  v29 = xmmword_20E6EE5B0;
  v30 = &unk_24C97FDE0;
  v31 = v4;
  v32 = v7;
  v33 = v6;
  v34 = v8;
  v35 = 0;
  v36 = 1;
  v37 = 0;
  v38 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_20E66A990(v7, v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_20E6869EC(&v29);
  v12 = v11;
  v26 = v13;
  v14 = *(void **)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_webSocket);
  if (v14)
  {
    v15 = *(_BYTE *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentState);
    *(_BYTE *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentState) = 4;
    v16 = v14;
    sub_20E670C18(v15);
    v25 = v8;
    v17 = v26;
    *v3 = v12;
    v3[1] = v17;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v27 + 104))(v3, *MEMORY[0x24BDD00C0], v28);
    *(_QWORD *)(swift_allocObject() + 16) = v16;
    v18 = v16;
    sub_20E66A990(v12, v17);
    sub_20E6EA424();
    swift_release();
    (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v3, v28);

    sub_20E6673F4(v12, v17);
    sub_20E66AA28(0, 0xF000000000000000);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20E6673F4(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20E6673F4(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = v11;
    if (qword_254A2DBE8 != -1)
      swift_once();
    v20 = sub_20E6E9F50();
    __swift_project_value_buffer(v20, (uint64_t)qword_254A3ED50);
    v21 = sub_20E6E9F38();
    v22 = sub_20E6EA3E8();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_20E648000, v21, v22, "Could not send postHandshake without a valid socket", v23, 2u);
      MEMORY[0x212BC3A38](v23, -1, -1);
    }

    sub_20E674BD4(0);
    sub_20E6673F4(v19, v26);
    sub_20E66AA28(0, 0xF000000000000000);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20E6673F4(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20E6673F4(v7, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E673A34(uint64_t a1)
{
  int64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    sub_20E6760A4(0, v2, 0);
    __asm { BR              X9 }
  }
  return result;
}

uint64_t sub_20E673B5C(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  int *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_20E6760C0(0, v2, 0);
    result = v9;
    v4 = (int *)(a1 + 48);
    do
    {
      v6 = *v4;
      v4 += 6;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_20E6760C0(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_DWORD *)(result + 4 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_20E673C18(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v10 = MEMORY[0x24BEE4AF8];
    sub_20E6EA694();
    v4 = (uint64_t *)(a1 + 64);
    do
    {
      v6 = *(v4 - 2);
      v8 = *(v4 - 1);
      v7 = *v4;
      swift_bridgeObjectRetain();
      sub_20E66A990(v6, v8);
      swift_bridgeObjectRetain();
      sub_20E66A990(v6, v8);
      swift_bridgeObjectRetain();
      v9 = (void *)sub_20E6E9C68();
      if (v7)
      {
        v5 = (void *)sub_20E6EA334();
        swift_bridgeObjectRelease();
      }
      else
      {
        v5 = 0;
      }
      objc_msgSend(objc_allocWithZone((Class)ASCPublicKeyCredentialDescriptor), sel_initWithCredentialID_transports_, v9, v5);
      sub_20E6673F4(v6, v8);
      swift_bridgeObjectRelease();

      sub_20E6673F4(v6, v8);
      swift_bridgeObjectRelease();
      sub_20E6EA67C();
      sub_20E6EA6A0();
      sub_20E6EA6AC();
      sub_20E6EA688();
      v4 += 5;
      --v2;
    }
    while (v2);
    return v10;
  }
  return result;
}

void sub_20E673D94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _BYTE *v22;

  v3 = v2;
  v4 = sub_20E686BD4(a1, a2, 1);
  v6 = v4;
  v7 = v5;
  v8 = (v5 >> 60) & 3;
  if (!(_DWORD)v8)
  {
    sub_20E66A990(v4, v5);
    sub_20E674264(v6, v7);
    sub_20E67BA54(v6, v7);
LABEL_10:
    sub_20E67BA54(v6, v7);
    return;
  }
  if ((_DWORD)v8 == 1)
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v9 = sub_20E6E9F50();
    __swift_project_value_buffer(v9, (uint64_t)qword_254A3ED50);
    v10 = sub_20E6E9F38();
    v11 = sub_20E6EA3E8();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_20E648000, v10, v11, "Unexpectedly received caBLE update message from client. Ignoring.", v12, 2u);
      MEMORY[0x212BC3A38](v12, -1, -1);
    }

    goto LABEL_10;
  }
  if (qword_254A2DBE8 != -1)
    swift_once();
  v13 = sub_20E6E9F50();
  __swift_project_value_buffer(v13, (uint64_t)qword_254A3ED50);
  v14 = sub_20E6E9F38();
  v15 = sub_20E6EA400();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_20E648000, v14, v15, "Received shutdown message from client", v16, 2u);
    MEMORY[0x212BC3A38](v16, -1, -1);
  }

  v17 = *(void **)(v3 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_webSocket);
  if (v17)
  {
    v18 = qword_254A2DBF8;
    v22 = v17;
    if (v18 != -1)
      swift_once();
    __swift_project_value_buffer(v13, (uint64_t)qword_254A3ED68);
    v19 = sub_20E6E9F38();
    v20 = sub_20E6EA400();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_20E648000, v19, v20, "Asked to close socket", v21, 2u);
      MEMORY[0x212BC3A38](v21, -1, -1);
    }

    v22[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_isConnected] = 0;
    objc_msgSend(*(id *)&v22[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_webSocketTask], sel_cancelWithCloseCode_reason_, 1000, 0);

  }
}

void sub_20E674264(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  void (*v13)(void *, _QWORD);
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _OWORD v20[9];
  _OWORD v21[13];
  uint64_t v22;
  _BYTE v23[224];
  _BYTE v24[224];
  _BYTE v25[224];
  _BYTE v26[224];
  _BYTE v27[224];
  _QWORD v28[28];
  _QWORD v29[28];

  v3 = v2;
  sub_20E69D13C(a1, a2, (uint64_t)v29);
  sub_20E677988((uint64_t)v29, (uint64_t)v24);
  sub_20E677988((uint64_t)v24, (uint64_t)v25);
  nullsub_1(v25);
  v4 = v2 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentCTAPCommand;
  sub_20E67B910(v3 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentCTAPCommand, (uint64_t)v26, &qword_254A2DFC0);
  sub_20E67B910((uint64_t)v25, v4, &qword_254A2DFC0);
  sub_20E67800C((uint64_t)v26, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E678088);
  sub_20E67B910(v4, (uint64_t)v27, &qword_254A2DFC0);
  sub_20E67B910((uint64_t)v27, (uint64_t)v28, &qword_254A2DFC0);
  if (sub_20E677974((uint64_t)v28) == 1)
  {
    __break(1u);
  }
  else
  {
    sub_20E677988((uint64_t)v28, (uint64_t)v23);
    if (sub_20E6779C4((uint64_t)v23) == 1)
    {
      v5 = (_OWORD *)nullsub_1(v23);
      v6 = v5[7];
      v20[6] = v5[6];
      v20[7] = v6;
      v20[8] = v5[8];
      v7 = v5[3];
      v20[2] = v5[2];
      v20[3] = v7;
      v8 = v5[5];
      v20[4] = v5[4];
      v20[5] = v8;
      v9 = v5[1];
      v20[0] = *v5;
      v20[1] = v9;
      sub_20E67B910((uint64_t)v27, (uint64_t)v21, &qword_254A2DFC0);
      sub_20E67B9CC((uint64_t)v21);
      v10 = (void *)sub_20E674710((uint64_t *)v20);
      sub_20E67800C((uint64_t)v27, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E678088);
    }
    else
    {
      v11 = nullsub_1(v23);
      v21[10] = *(_OWORD *)(v11 + 160);
      v21[11] = *(_OWORD *)(v11 + 176);
      v21[12] = *(_OWORD *)(v11 + 192);
      v22 = *(_QWORD *)(v11 + 208);
      v21[6] = *(_OWORD *)(v11 + 96);
      v21[7] = *(_OWORD *)(v11 + 112);
      v21[8] = *(_OWORD *)(v11 + 128);
      v21[9] = *(_OWORD *)(v11 + 144);
      v21[2] = *(_OWORD *)(v11 + 32);
      v21[3] = *(_OWORD *)(v11 + 48);
      v21[4] = *(_OWORD *)(v11 + 64);
      v21[5] = *(_OWORD *)(v11 + 80);
      v21[0] = *(_OWORD *)v11;
      v21[1] = *(_OWORD *)(v11 + 16);
      v10 = sub_20E678A28((uint64_t *)v21);
    }
    v12 = (uint64_t *)(v3 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_completionHandler);
    v13 = *(void (**)(void *, _QWORD))(v3
                                                + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_completionHandler);
    if (v13)
    {
      sub_20E67BA44(*(_QWORD *)(v3 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_completionHandler));
      v14 = v10;
      v13(v10, 0);

      v15 = *v12;
      *v12 = 0;
      v12[1] = 0;
      sub_20E67BADC(v15);

      sub_20E67BADC((uint64_t)v13);
    }
    else
    {
      if (qword_254A2DBE8 != -1)
        swift_once();
      v16 = sub_20E6E9F50();
      __swift_project_value_buffer(v16, (uint64_t)qword_254A3ED50);
      v17 = sub_20E6E9F38();
      v18 = sub_20E6EA3E8();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_20E648000, v17, v18, "Could not complete command without completionHandler", v19, 2u);
        MEMORY[0x212BC3A38](v19, -1, -1);
      }

      sub_20E674BD4(0);
    }
  }
}

uint64_t sub_20E674710(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  id v29;
  id v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  v3 = a1[1];
  v49 = *a1;
  v4 = a1[2];
  v5 = a1[3];
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[7];
  v44 = a1[8];
  v45 = a1[9];
  v42 = a1[10];
  v43 = a1[11];
  v39 = a1[6];
  v40 = a1[12];
  v37 = a1[14];
  v38 = a1[13];
  v35 = a1[16];
  v36 = a1[15];
  v34 = a1[17];
  v9 = objc_msgSend(objc_allocWithZone((Class)ASCCredentialRequestContext), sel_initWithRequestTypes_, 8);
  objc_msgSend(v9, sel_setIsCABLEAuthenticatorRequest_, 1);
  if (v6 && *(_QWORD *)(v6 + 16) && (v10 = sub_20E698CCC(30325, 0xE200000000000000), (v11 & 1) != 0))
  {
    if (*(_BYTE *)(*(_QWORD *)(v6 + 56) + v10))
      v12 = 0x6465726975716572;
    else
      v12 = 0;
    v13 = 0xE800000000000000;
    if (!*(_BYTE *)(*(_QWORD *)(v6 + 56) + v10))
      v13 = 0;
    v46 = v13;
    v47 = v12;
    v48 = v3;
    if (!v7)
      goto LABEL_19;
  }
  else
  {
    v46 = 0;
    v47 = 0;
    v48 = v3;
    if (!v7)
    {
LABEL_19:
      v15 = 0;
      goto LABEL_20;
    }
  }
  v14 = swift_bridgeObjectRetain();
  v15 = sub_20E673C18(v14);
  result = swift_bridgeObjectRelease();
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    v33 = sub_20E6EA73C();
    result = swift_bridgeObjectRelease();
    if (v33 != 1)
      goto LABEL_20;
  }
  else if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
  {
    goto LABEL_20;
  }
  v41 = v8;
  if ((v15 & 0xC000000000000001) != 0)
  {
    v17 = v9;
    v18 = (id)MEMORY[0x212BC2E50](0, v15);
  }
  else
  {
    if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v17 = v9;
    v18 = *(id *)(v15 + 32);
  }
  v19 = v18;
  v20 = objc_msgSend(v18, sel_credentialID);

  v21 = sub_20E6E9C80();
  v23 = v22;

  v24 = objc_msgSend((id)objc_opt_self(), sel_magicCredentialID);
  v25 = sub_20E6E9C80();
  v27 = v26;

  sub_20E6B0F54(v21, v23);
  LOBYTE(v24) = v28;
  sub_20E6673F4(v25, v27);
  sub_20E6673F4(v21, v23);
  v8 = v41;
  v9 = v17;
  if ((v24 & 1) != 0)
  {
    *(_BYTE *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_usedMagicCredentialID) = 1;
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
LABEL_20:
  v29 = objc_allocWithZone((Class)ASCPublicKeyCredentialAssertionOptions);
  swift_bridgeObjectRetain();
  sub_20E66A990(v4, v5);
  swift_bridgeObjectRetain();
  v30 = sub_20E6755C0(1, v49, v48, v4, v5, v47, v46, v15);
  if (v8 != 2)
  {
    sub_20E677C30(v39, v8, v44, v45, v42);
    sub_20E677C6C(v38, v37, v36, v35, v34);
    v31 = sub_20E6A60BC();
    objc_msgSend(v30, sel_setExtensions_, v31);

    sub_20E6782F0(v39, v8, v44, v45, v42, v43, v40, v38, v37, v36, v35, v34, (void (*)(void))sub_20E66AA3C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E66AA78);
  }
  objc_msgSend(v9, sel_setPlatformKeyCredentialAssertionOptions_, v30);
  v32 = (void *)sub_20E6EA1C0();
  objc_msgSend(v9, sel_setRelyingPartyIdentifier_, v32);
  swift_bridgeObjectRelease();

  return (uint64_t)v9;
}

uint64_t sub_20E674B30(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v5 = MEMORY[0x24BEE4AF8];
    sub_20E6EA694();
    v4 = a1 + 32;
    do
    {
      v4 += 4;
      sub_20E6EA97C();
      sub_20E6EA67C();
      sub_20E6EA6A0();
      sub_20E6EA6AC();
      sub_20E6EA688();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

void sub_20E674BD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  void (*v17)(_QWORD, void *);
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _BYTE *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];

  v2 = v1;
  v29 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E330);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_254A2DBE8 != -1)
    swift_once();
  v6 = sub_20E6E9F50();
  __swift_project_value_buffer(v6, (uint64_t)qword_254A3ED50);
  v7 = sub_20E6E9F38();
  v8 = sub_20E6EA3E8();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v31[0] = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = sub_20E67BF0C(v29);
    v30 = sub_20E66A2F8(v11, v12, v31);
    sub_20E6EA4C0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20E648000, v7, v8, "caBLE transaction failed: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v10, -1, -1);
    MEMORY[0x212BC3A38](v9, -1, -1);
  }

  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_powerLogger), sel_logAuthenticationFinishedEventIfNeeded);
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_bluetoothAdvertiser), sel_invalidate);
  v13 = type metadata accessor for ASCABLEAdvertisement();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 1, 1, v13);
  v14 = v2 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_advertisement;
  swift_beginAccess();
  sub_20E67BAEC((uint64_t)v5, v14);
  swift_endAccess();
  v15 = *(_BYTE *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentState);
  *(_BYTE *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentState) = 0;
  sub_20E670C18(v15);
  v16 = (uint64_t *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_completionHandler);
  v17 = *(void (**)(_QWORD, void *))(v2
                                              + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_completionHandler);
  if (v17)
  {
    sub_20E6785D4();
    v18 = (void *)swift_allocError();
    *v19 = v29;
    swift_retain();
    v17(0, v18);
    sub_20E67BADC((uint64_t)v17);

    v20 = *v16;
  }
  else
  {
    v20 = 0;
  }
  *v16 = 0;
  v16[1] = 0;
  sub_20E67BADC(v20);
  v21 = OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_webSocket;
  v22 = *(void **)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_webSocket);
  if (v22)
  {
    v23 = qword_254A2DBF8;
    v24 = v22;
    if (v23 != -1)
      swift_once();
    __swift_project_value_buffer(v6, (uint64_t)qword_254A3ED68);
    v25 = sub_20E6E9F38();
    v26 = sub_20E6EA400();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_20E648000, v25, v26, "Asked to close socket", v27, 2u);
      MEMORY[0x212BC3A38](v27, -1, -1);
    }

    v24[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_isConnected] = 0;
    objc_msgSend(*(id *)&v24[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_webSocketTask], sel_cancelWithCloseCode_reason_, 1000, 0);

    v22 = *(void **)(v2 + v21);
  }
  *(_QWORD *)(v2 + v21) = 0;

}

uint64_t sub_20E674FAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;

  v2 = sub_20E6E9FD4();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_20E6EA028();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E6E9FEC();
  v10 = sub_20E6EA01C();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v11 = *(_QWORD *)(a1 + 16);
  if ((v10 & 1) != 0)
  {
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 32);
      swift_bridgeObjectRetain();
      return v12;
    }
    return 0;
  }
  if (!v11)
    return 0;
  v13 = *MEMORY[0x24BDDFED0];
  swift_bridgeObjectRetain();
  v14 = a1 + 40;
  while (1)
  {
    v12 = *(_QWORD *)(v14 - 8);
    swift_bridgeObjectRetain_n();
    sub_20E6E9FE0();
    if ((*(unsigned int (**)(char *, uint64_t))(v3 + 88))(v5, v2) == v13)
      break;
    v14 += 16;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_bridgeObjectRelease();
    if (!--v11)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  return v12;
}

id ASCABLEAuthenticator.__deallocating_deinit()
{
  char *v0;
  objc_super v2;

  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_bluetoothAdvertiser], sel_invalidate);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASCABLEAuthenticator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_20E6754E4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASCABLEAuthenticator.APSWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id ASCABLEAuthenticator.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ASCABLEAuthenticator.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_20E6755A0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_20E678DB4(a2, a3);
}

void sub_20E6755AC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_20E67901C(a2, a3);
}

void sub_20E6755B8(uint64_t a1, void *a2)
{
  sub_20E6791D0(a2);
}

id sub_20E6755C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  void *v9;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;

  v9 = v8;
  v15 = (void *)sub_20E6EA1C0();
  swift_bridgeObjectRelease();
  v16 = (void *)sub_20E6E9C68();
  if (!a7)
  {
    v17 = 0;
    if (a8)
      goto LABEL_3;
LABEL_5:
    v18 = 0;
    goto LABEL_6;
  }
  v17 = (void *)sub_20E6EA1C0();
  swift_bridgeObjectRelease();
  if (!a8)
    goto LABEL_5;
LABEL_3:
  sub_20E67BE44(0, &qword_254A2E118);
  v18 = (void *)sub_20E6EA334();
  swift_bridgeObjectRelease();
LABEL_6:
  v19 = objc_msgSend(v9, sel_initWithKind_relyingPartyIdentifier_clientDataHash_userVerificationPreference_allowedCredentials_, a1, v15, v16, v17, v18);
  sub_20E6673F4(a4, a5);

  return v19;
}

id sub_20E6756E8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v43;
  void *v44;
  id v45;

  if (a2 >> 60 == 15)
  {
    v39 = 0;
  }
  else
  {
    v39 = (void *)sub_20E6E9C68();
    sub_20E66AA28(a1, a2);
  }
  if (a4 >> 60 == 15)
  {
    v38 = 0;
  }
  else
  {
    v38 = (void *)sub_20E6E9C68();
    sub_20E66AA28(a3, a4);
  }
  if (a6 >> 60 == 15)
  {
    v37 = 0;
  }
  else
  {
    v37 = (void *)sub_20E6E9C68();
    sub_20E66AA28(a5, a6);
  }
  v43 = (void *)sub_20E6EA1C0();
  swift_bridgeObjectRelease();
  v41 = (void *)sub_20E6EA1C0();
  swift_bridgeObjectRelease();
  v40 = (void *)sub_20E6E9C68();
  v28 = (void *)sub_20E6EA1C0();
  swift_bridgeObjectRelease();
  sub_20E67BE44(0, &qword_254A2E120);
  v29 = (void *)sub_20E6EA334();
  swift_bridgeObjectRelease();
  v30 = (void *)sub_20E6EA1C0();
  swift_bridgeObjectRelease();
  if (a19)
  {
    v31 = (void *)sub_20E6EA1C0();
    swift_bridgeObjectRelease();
    v32 = a23;
    if (a20)
      goto LABEL_12;
LABEL_15:
    v33 = 0;
    v34 = a21;
    if (v32)
      goto LABEL_13;
LABEL_16:
    v35 = 0;
    goto LABEL_17;
  }
  v31 = 0;
  v32 = a23;
  if (!a20)
    goto LABEL_15;
LABEL_12:
  sub_20E67BE44(0, &qword_254A2E118);
  v33 = (void *)sub_20E6EA334();
  swift_bridgeObjectRelease();
  v34 = a21;
  if (!v32)
    goto LABEL_16;
LABEL_13:
  v35 = (void *)sub_20E6EA1C0();
  swift_bridgeObjectRelease();
LABEL_17:
  v45 = objc_msgSend(v44, sel_initWithChallenge_clientDataJSON_clientDataHash_relyingPartyIdentifier_userName_userIdentifier_userDisplayName_supportedAlgorithmIdentifiers_attestationPreference_userVerificationPreference_excludedCredentials_extensions_origin_, v39, v38, v37, v43, v41, v40, v28, v29, v30, v31, v33, v34, v35);

  sub_20E6673F4(a11, a12);
  return v45;
}

void sub_20E6759E0()
{
  __asm { BR              X11 }
}

_QWORD *sub_20E675A40@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

void sub_20E675CD0()
{
  __asm { BR              X12 }
}

uint64_t sub_20E675D30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, char *);
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = v2(&v6, (char *)&v6 + BYTE6(a1));
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v3 = v6;
  v3[1] = v5;
  return result;
}

uint64_t sub_20E675F04(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
    return a1(a3, a4 - a3);
  else
    return a1(0, 0);
}

uint64_t sub_20E675F50(uint64_t (*a1)(uint64_t, uint64_t))
{
  int *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_20E6E9BFC();
  v4 = *v1;
  v5 = v1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = sub_20E6E9A28();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v6 = result;
  result = sub_20E6E9A4C();
  v7 = v4 - result;
  if (__OFSUB__(v4, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v8 = v5 - v4;
  v9 = sub_20E6E9A40();
  if (v9 >= v8)
    v10 = v8;
  else
    v10 = v9;
  return a1(v6 + v7, v6 + v7 + v10);
}

char *sub_20E675FF8(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_20E6E9A28();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_20E6E9A4C();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_20E6E9A40();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_20E6760A4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_20E676114(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_20E6760C0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_20E67627C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_20E6760DC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_20E6763D8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_20E6760F8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_20E6765B8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_20E676114(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_253E8D190);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_20E6EA778();
  __break(1u);
  return result;
}

uint64_t sub_20E67627C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E128);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_20E6EA778();
  __break(1u);
  return result;
}

uint64_t sub_20E6763D8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E158);
  v10 = *(_QWORD *)(type metadata accessor for ASPasswordSignInEventCollector.SignInEvent() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for ASPasswordSignInEventCollector.SignInEvent() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_20E6EA778();
  __break(1u);
  return result;
}

uint64_t sub_20E6765B8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E148);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_20E6EA778();
  __break(1u);
  return result;
}

uint64_t sub_20E676720(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_20E6E9A28();
  if (!result || (result = sub_20E6E9A4C(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_20E6E9A40();
      return sub_20E6E9C44();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_20E6767B0(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  __int128 v25;
  uint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0D0);
  MEMORY[0x24BDAC7A8](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v7);
  sub_20E67BC78(&qword_254A2E0D8, &qword_254A2E0D0, MEMORY[0x24BDC6540]);
  sub_20E6EA310();
  v10 = *(_QWORD *)(v3 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0B8) + 36));
  result = sub_20E67BD44(v3, &qword_254A2E0B8);
  v12 = v31;
  v13 = v32;
  if (!a2)
    goto LABEL_6;
  if (!a3)
  {
LABEL_7:
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v10;
    return a3;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    if (!v10 || (--v10, v14 = *(_QWORD *)(v31 + 16), v32 == v14))
    {
LABEL_6:
      a3 = 0;
      goto LABEL_7;
    }
    if (v32 < v14)
    {
      v15 = v32 + 1;
      *a2 = *(_BYTE *)(v31 + 32 + v32);
      if (a3 == 1)
      {
        ++v13;
      }
      else
      {
        v16 = a3 - 2;
        if (a3 - 2 >= v14 + ~v13)
          v16 = v14 + ~v13;
        if (v16 >= v10)
          v16 = v10;
        v17 = v16 + 1;
        if (v17 <= 0x10 || (v18 = v13 + v12, ((unint64_t)&a2[-v13 - v12] & 0xFFFFFFFFFFFFFFF0) == 0x20))
        {
          v19 = 1;
          v20 = a2;
        }
        else
        {
          v21 = v17 & 0xF;
          if ((v17 & 0xF) == 0)
            v21 = 16;
          v22 = v17 - v21;
          v15 += v17 - v21;
          v20 = &a2[v17 - v21];
          v19 = v22 + 1;
          v10 -= v22;
          v23 = a2 + 1;
          v24 = (__int128 *)(v18 + 33);
          do
          {
            v25 = *v24++;
            *v23++ = v25;
            v22 -= 16;
          }
          while (v22);
        }
        v26 = 0;
        v27 = v20 + 1;
        v28 = v10 - 1;
        v29 = v19;
        while (1)
        {
          if (v10 == v26)
          {
            v10 = 0;
            v13 = v15 + v26;
            a3 = v19 + v26;
            goto LABEL_7;
          }
          v30 = v28;
          if (!(v15 - v14 + v26))
            break;
          ++v29;
          v27[v26] = *(_BYTE *)(v15 + v12 + 32 + v26);
          ++v26;
          --v28;
          if (!(v19 - a3 + v26))
          {
            v13 = v15 + v26;
            v10 = v30;
            goto LABEL_7;
          }
        }
        v13 = v14;
        v10 = v28;
        a3 = v29;
      }
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

void sub_20E6769F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X9 }
}

uint64_t sub_20E676A58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (v4 && v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)(v5 - 120) = v1;
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x20E676CD0);
  }
  *a1 = v2;
  a1[1] = v7;
  a1[2] = BYTE6(v7);
  return 0;
}

void sub_20E676D00(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_20E676D64
     + *((int *)qword_20E676F08 + (__swift_project_boxed_opaque_existential_1Tm(v3, MEMORY[0x24BDCDDE8])[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_20E676D74()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  sub_20E66A990(v1, v0);
  sub_20E6E9C44();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v3);
}

uint64_t sub_20E676F18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _BYTE v7[16];
  __int128 v8[2];
  uint64_t v9;
  _QWORD v10[6];

  v10[5] = *MEMORY[0x24BDAC8D0];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0B8);
  MEMORY[0x24BDAC7A8](v3);
  sub_20E67BCC0(a1, (uint64_t)&v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], &qword_254A2E0B8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0C0);
  if (!swift_dynamicCast())
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    sub_20E67BD44((uint64_t)v8, &qword_254A2E0C8);
    __asm { BR              X12 }
  }
  sub_20E6789E8(v8, (uint64_t)v10);
  v5 = __swift_project_boxed_opaque_existential_1Tm(v10, v10[3]);
  MEMORY[0x24BDAC7A8](v5);
  *(_QWORD *)&v7[-16] = v1;
  sub_20E6E9A64();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
}

uint64_t sub_20E677310(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E160);
  v10 = sub_20E67BC78((unint64_t *)&qword_254A2DF70, (uint64_t *)&unk_254A2E160, MEMORY[0x24BDCFBE0]);
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1Tm(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_20E690A10(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  return v5;
}

uint64_t sub_20E6773C0(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_20E6E9A58();
      swift_allocObject();
      sub_20E6E9A34();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_20E6E9C20();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

unint64_t sub_20E67745C(unint64_t result)
{
  if (result > 7)
    return 0;
  return result;
}

uint64_t type metadata accessor for ASCABLEAuthenticator()
{
  uint64_t result;

  result = qword_254A2E028;
  if (!qword_254A2E028)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_20E6774A8()
{
  unint64_t result;

  result = qword_254A2DFA8;
  if (!qword_254A2DFA8)
  {
    result = MEMORY[0x212BC39A8](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_254A2DFA8);
  }
  return result;
}

uint64_t sub_20E6774EC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_20E677510(uint64_t a1)
{
  uint64_t v1;

  return sub_20E6C7838(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_20E677518(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_20E677530(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 96);
  v12 = *(_OWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_BYTE *)(a1 + 136);
  swift_bridgeObjectRetain();
  sub_20E66A990(v2, v3);
  sub_20E66A990(v4, v5);
  sub_20E6777B4(v17, v16, v6, v7, v8, v15, v14, v13, v12, *((uint64_t *)&v12 + 1), v9, v10, (void (*)(void))sub_20E677614, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677630);
  return a1;
}

uint64_t sub_20E677614(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result != 3)
    return sub_20E66A9D4(a2, a3);
  return result;
}

uint64_t sub_20E677630(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (result != 3)
    return sub_20E66A954(a2, a3, a4, a5);
  return result;
}

uint64_t sub_20E677654(uint64_t a1)
{
  sub_20E6776B4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_BYTE *)(a1 + 136));
  return a1;
}

uint64_t sub_20E6776B4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    sub_20E6673F4(a3, a4);
    sub_20E6673F4(a5, a6);
    return sub_20E6777B4(a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
  }
  return result;
}

uint64_t sub_20E6777B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void (*a13)(void), uint64_t (*a14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;

  if (a12 != 3)
  {
    a13();
    return a14(a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t sub_20E677840(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result != 3)
    return sub_20E66AA28(a2, a3);
  return result;
}

uint64_t sub_20E67785C(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (result != 3)
    return sub_20E66AAA8(a2, a3, a4, a5);
  return result;
}

uint64_t sub_20E677880(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 112);
  v12 = *(_QWORD *)(a1 + 128);
  v11 = *(_OWORD *)(a1 + 136);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_BYTE *)(a1 + 160);
  sub_20E6673F4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease();
  sub_20E6673F4(v2, v3);
  sub_20E6673F4(v4, v5);
  sub_20E6777B4(v17, v16, v6, v7, v15, v14, v13, v12, v11, *((uint64_t *)&v11 + 1), v8, v9, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
  return a1;
}

uint64_t sub_20E677974(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 216);
  if (v1 > 1)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t sub_20E677988(uint64_t a1, uint64_t a2)
{
  __swift_memcpy217_8(a2, a1);
  return a2;
}

uint64_t sub_20E6779C4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216);
}

uint64_t sub_20E6779CC(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unsigned __int8 a28)
{
  if (a28 != 255)
    return sub_20E677A74(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28 & 1);
  return result;
}

uint64_t sub_20E677A74(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if ((a28 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    sub_20E66A990(a3, a4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_20E6782F0(a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, (void (*)(void))sub_20E677C30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677C6C);
  }
  else
  {
    sub_20E66A990(a1, a2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_20E66A990(a9, a10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return sub_20E6782F0(a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, (void (*)(void))sub_20E677C30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677C6C);
  }
}

uint64_t sub_20E677C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    return sub_20E66A9D4(a4, a5);
  }
  return result;
}

uint64_t sub_20E677C6C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a5 != 1)
  {
    sub_20E66A954(result, a2, a3, a4);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_20E677C9C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v12 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(_QWORD *)(a1 + 136);
  v18 = *(_QWORD *)(a1 + 160);
  v19 = *(_QWORD *)(a1 + 152);
  v16 = *(_QWORD *)(a1 + 176);
  v17 = *(_QWORD *)(a1 + 168);
  v14 = *(_QWORD *)(a1 + 192);
  v15 = *(_QWORD *)(a1 + 184);
  v13 = *(_OWORD *)(a1 + 200);
  v11 = *(_QWORD *)(a1 + 216);
  v9 = *(_BYTE *)(a1 + 224);
  sub_20E677DBC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_20E66A990(v2, v3);
  sub_20E66A990(v4, v5);
  sub_20E677E08(v12, v6, v7, v8);
  sub_20E6777B4(v21, v20, v19, v18, v17, v16, v15, v14, v13, *((uint64_t *)&v13 + 1), v11, v9, (void (*)(void))sub_20E677614, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677630);
  return a1;
}

uint64_t sub_20E677DBC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_20E66A990(a3, a4);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_20E677E08(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_20E66A990(a3, a4);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_20E677E54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a1 + 88);
  v8 = *(_QWORD *)(a1 + 96);
  v12 = *(_QWORD *)(a1 + 72);
  v20 = *(_QWORD *)(a1 + 144);
  v21 = *(_QWORD *)(a1 + 136);
  v18 = *(_QWORD *)(a1 + 160);
  v19 = *(_QWORD *)(a1 + 152);
  v16 = *(_QWORD *)(a1 + 176);
  v17 = *(_QWORD *)(a1 + 168);
  v14 = *(_QWORD *)(a1 + 192);
  v15 = *(_QWORD *)(a1 + 184);
  v13 = *(_OWORD *)(a1 + 200);
  v11 = *(_QWORD *)(a1 + 216);
  v9 = *(_BYTE *)(a1 + 224);
  sub_20E677F74(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_20E6673F4(v2, v3);
  sub_20E6673F4(v4, v5);
  sub_20E677FC0(v12, v6, v7, v8);
  sub_20E6777B4(v21, v20, v19, v18, v17, v16, v15, v14, v13, *((uint64_t *)&v13 + 1), v11, v9, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
  return a1;
}

uint64_t sub_20E677F74(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    sub_20E6673F4(a3, a4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_20E677FC0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    sub_20E6673F4(a3, a4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_20E67800C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 216);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    v4);
  return a1;
}

uint64_t sub_20E678088(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unsigned __int8 a28)
{
  if (a28 != 255)
    return sub_20E678130(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28 & 1);
  return result;
}

uint64_t sub_20E678130(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if ((a28 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    sub_20E6673F4(a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_20E6782F0(a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, (void (*)(void))sub_20E66AA3C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E66AA78);
  }
  else
  {
    sub_20E6673F4(a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20E6673F4(a9, a10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_20E6782F0(a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27, (void (*)(void))sub_20E66AA3C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E66AA78);
  }
}

uint64_t sub_20E6782F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void), uint64_t (*a14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result;

  if (a2 != 2)
  {
    a13();
    return a14(a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t sub_20E678360(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 168);
  v25 = *(_QWORD *)(a1 + 160);
  v22 = *(_QWORD *)(a1 + 184);
  v23 = *(_QWORD *)(a1 + 176);
  v20 = *(_QWORD *)(a1 + 200);
  v21 = *(_QWORD *)(a1 + 192);
  v18 = *(_QWORD *)(a1 + 216);
  v19 = *(_QWORD *)(a1 + 208);
  v17 = *(_OWORD *)(a1 + 224);
  v12 = *(_QWORD *)(a1 + 240);
  v11 = *(_BYTE *)(a1 + 248);
  sub_20E6673F4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_20E677F74(v2, v3, v4, v5);
  sub_20E6673F4(v6, v7);
  sub_20E6673F4(v8, v9);
  sub_20E677FC0(v16, v15, v14, v13);
  sub_20E6777B4(v25, v24, v23, v22, v21, v20, v19, v18, v17, *((uint64_t *)&v17 + 1), v12, v11, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
  return a1;
}

unint64_t sub_20E6784B4()
{
  unint64_t result;

  result = qword_254A2DFD8;
  if (!qword_254A2DFD8)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCABLEAuthenticator.AuthenticatorError, &type metadata for ASCABLEAuthenticator.AuthenticatorError);
    atomic_store(result, (unint64_t *)&qword_254A2DFD8);
  }
  return result;
}

unint64_t sub_20E6784FC()
{
  unint64_t result;

  result = qword_254A2DFE0;
  if (!qword_254A2DFE0)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCABLEAuthenticator.AuthenticatorError, &type metadata for ASCABLEAuthenticator.AuthenticatorError);
    atomic_store(result, (unint64_t *)&qword_254A2DFE0);
  }
  return result;
}

unint64_t sub_20E678544()
{
  unint64_t result;

  result = qword_254A2DFE8;
  if (!qword_254A2DFE8)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCABLEAuthenticator.AuthenticatorError, &type metadata for ASCABLEAuthenticator.AuthenticatorError);
    atomic_store(result, (unint64_t *)&qword_254A2DFE8);
  }
  return result;
}

unint64_t sub_20E67858C()
{
  unint64_t result;

  result = qword_254A2DFF0;
  if (!qword_254A2DFF0)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCABLEAuthenticator.AuthenticatorError, &type metadata for ASCABLEAuthenticator.AuthenticatorError);
    atomic_store(result, (unint64_t *)&qword_254A2DFF0);
  }
  return result;
}

unint64_t sub_20E6785D4()
{
  unint64_t result;

  result = qword_254A2E000;
  if (!qword_254A2E000)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCABLEAuthenticator.AuthenticatorError, &type metadata for ASCABLEAuthenticator.AuthenticatorError);
    atomic_store(result, (unint64_t *)&qword_254A2E000);
  }
  return result;
}

uint64_t sub_20E678618()
{
  return type metadata accessor for ASCABLEAuthenticator();
}

void sub_20E678620()
{
  unint64_t v0;

  sub_20E678744();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ASCABLEAuthenticator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ASCABLEAuthenticator.startWithCompletionHandler(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ASCABLEAuthenticator.sendExcludedCredentialMatchError()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ASCABLEAuthenticator.finishTransaction(credential:error:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

void sub_20E678744()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254A2E320)
  {
    type metadata accessor for ASCABLEAdvertisement();
    v0 = sub_20E6EA484();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254A2E320);
  }
}

ValueMetadata *type metadata accessor for ASCABLEAuthenticator.AuthenticatorError()
{
  return &type metadata for ASCABLEAuthenticator.AuthenticatorError;
}

uint64_t type metadata accessor for ASCABLEAuthenticator.APSWrapper()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for ASCABLEAuthenticator.CABLEState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCABLEAuthenticator.CABLEState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_20E6788A4 + 4 * byte_20E6EE5E3[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_20E6788D8 + 4 * byte_20E6EE5DE[v4]))();
}

uint64_t sub_20E6788D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6788E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6788E8);
  return result;
}

uint64_t sub_20E6788F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6788FCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_20E678900(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E678908(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCABLEAuthenticator.CABLEState()
{
  return &type metadata for ASCABLEAuthenticator.CABLEState;
}

unint64_t sub_20E678928()
{
  unint64_t result;

  result = qword_254A2E0B0;
  if (!qword_254A2E0B0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EE8A4, &type metadata for ASCABLEAuthenticator.CABLEState);
    atomic_store(result, (unint64_t *)&qword_254A2E0B0);
  }
  return result;
}

uint64_t sub_20E67896C()
{
  unint64_t v0;

  v0 = sub_20E6EA784();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_20E6789B4@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_20E67B63C(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 32));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
    a3[3] = v9;
  }
  return result;
}

uint64_t sub_20E6789E8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_20E678A00()
{
  return sub_20E6E9C44();
}

id sub_20E678A28(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  char *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[5];
  v34 = a1[4];
  v4 = a1[7];
  v33 = a1[6];
  v5 = a1[8];
  v6 = a1[9];
  v7 = a1[11];
  v31 = a1[10];
  v9 = a1[12];
  v8 = a1[13];
  v10 = a1[14];
  v40 = a1[15];
  v41 = a1[16];
  v39 = a1[17];
  v37 = a1[19];
  v38 = a1[18];
  v29 = a1[20];
  v30 = a1[21];
  v27 = a1[24];
  v28 = a1[23];
  v26 = a1[25];
  v24 = a1[22];
  v25 = a1[26];
  v36 = objc_msgSend(objc_allocWithZone((Class)ASCCredentialRequestContext), sel_initWithRequestTypes_, 4);
  objc_msgSend(v36, sel_setIsCABLEAuthenticatorRequest_, 1);
  swift_bridgeObjectRetain();
  v32 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v35 = v2;
  sub_20E66A990(v1, v2);
  sub_20E66A990(v5, v6);
  v11 = sub_20E673B5C(v9);
  swift_bridgeObjectRelease();
  v12 = sub_20E674B30(v11);
  swift_bridgeObjectRelease();
  if (v10 && *(_QWORD *)(v10 + 16) && (v13 = sub_20E698CCC(30325, 0xE200000000000000), (v14 & 1) != 0))
  {
    if (*(_BYTE *)(*(_QWORD *)(v10 + 56) + v13))
      v15 = 0x6465726975716572;
    else
      v15 = 0;
    if (*(_BYTE *)(*(_QWORD *)(v10 + 56) + v13))
      v16 = 0xE800000000000000;
    else
      v16 = 0;
    if (!v8)
      goto LABEL_11;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    if (!v8)
    {
LABEL_11:
      v17 = 0;
      goto LABEL_14;
    }
  }
  v18 = swift_bridgeObjectRetain();
  v17 = sub_20E673C18(v18);
  swift_bridgeObjectRelease();
LABEL_14:
  v19 = objc_allocWithZone((Class)ASCPublicKeyCredentialCreationOptions);
  v20 = sub_20E6756E8(0, 0xF000000000000000, 0, 0xF000000000000000, v1, v35, v34, v3, v33, v32, v5, v6, v31, v7, v12, 1701736302, 0xE400000000000000, v15, v16,
          v17,
          0,
          0,
          0);
  if (v41 != 2)
  {
    sub_20E677C30(v40, v41, v39, v38, v37);
    sub_20E677C6C(v24, v28, v27, v26, v25);
    v21 = sub_20E6A6274();
    objc_msgSend(v20, sel_setExtensions_, v21);

    sub_20E6782F0(v40, v41, v39, v38, v37, v29, v30, v24, v28, v27, v26, v25, (void (*)(void))sub_20E66AA3C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E66AA78);
  }
  objc_msgSend(v36, sel_setPlatformKeyCredentialCreationOptions_, v20);
  v22 = objc_msgSend(v20, sel_relyingPartyIdentifier);
  if (!v22)
  {
    sub_20E6EA1CC();
    v22 = (id)sub_20E6EA1C0();
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v36, sel_setRelyingPartyIdentifier_, v22);

  return v36;
}

void sub_20E678DB4(unint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  NSObject *v8;
  os_log_type_t v9;
  _DWORD *v10;

  v3 = v2;
  v4 = OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentState;
  v5 = v2[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentState];
  if (v5 >= 3)
  {
    if (v5 == 3)
      sub_20E672D9C(a1, a2);
    else
      sub_20E673D94(a1, a2);
  }
  else
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v6 = sub_20E6E9F50();
    __swift_project_value_buffer(v6, (uint64_t)qword_254A3ED50);
    v7 = v2;
    v8 = sub_20E6E9F38();
    v9 = sub_20E6EA3E8();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (_DWORD *)swift_slowAlloc();
      swift_slowAlloc();
      *v10 = 136315138;
      __asm { BR              X10 }
    }

    sub_20E674BD4(0);
  }
}

void sub_20E67901C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_254A2DBE8 != -1)
    swift_once();
  v4 = sub_20E6E9F50();
  __swift_project_value_buffer(v4, (uint64_t)qword_254A3ED50);
  swift_bridgeObjectRetain_n();
  v5 = sub_20E6E9F38();
  v6 = sub_20E6EA3E8();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v9 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_20E66A2F8(a1, a2, &v9);
    sub_20E6EA4C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_20E648000, v5, v6, "Unexpectedly received string frame: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v8, -1, -1);
    MEMORY[0x212BC3A38](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_20E674BD4(4);
}

void sub_20E6791D0(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;

  if (qword_254A2DBE8 != -1)
    swift_once();
  v2 = sub_20E6E9F50();
  __swift_project_value_buffer(v2, (uint64_t)qword_254A3ED50);
  v3 = a1;
  v4 = a1;
  v5 = sub_20E6E9F38();
  v6 = sub_20E6EA3E8();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue();
    v9 = Error.loggerDescription()();
    sub_20E66A2F8(v9._countAndFlagsBits, (unint64_t)v9._object, &v10);
    sub_20E6EA4C0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20E648000, v5, v6, "Networking error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v8, -1, -1);
    MEMORY[0x212BC3A38](v7, -1, -1);
  }
  else
  {

  }
  sub_20E674BD4(4);
}

void sub_20E6793A0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  Swift::String v39;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  Swift::String v63;
  uint64_t v64;
  void *v65;
  id v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  const char *v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint32_t v75;
  id v76;
  id v77;
  Swift::String v78;
  void *v79;
  void *v80;
  id v81;
  uint64_t v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  int v91;
  _BOOL4 v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint8_t *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v113;
  int v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint8_t *v126;
  uint8_t *v127;
  char *v128;
  uint64_t v129;
  id v130;
  _OWORD v131[2];
  uint64_t v132;
  uint64_t v133[11];
  id v134;

  v4 = v3;
  v129 = a3;
  v130 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E180);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CableResponse.AllocationResponse(0);
  v127 = *(uint8_t **)(v9 - 8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v124 = (uint64_t)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v121 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v125 = (uint64_t)&v121 - v15;
  v16 = sub_20E6E9DF4();
  MEMORY[0x24BDAC7A8](v16);
  v128 = (char *)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CableResponse(0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v126 = (uint8_t *)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v121 - v21;
  if (qword_254A2DBE8 != -1)
    swift_once();
  v23 = sub_20E6E9F50();
  __swift_project_value_buffer(v23, (uint64_t)qword_254A3ED50);
  v24 = sub_20E6E9F38();
  v25 = sub_20E6EA3D0();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    v123 = v18;
    v27 = v26;
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_20E648000, v24, v25, "Received server allocation response", v26, 2u);
    v28 = v27;
    v4 = v3;
    v18 = v123;
    MEMORY[0x212BC3A38](v28, -1, -1);
  }

  v29 = v129;
  if (v129)
  {
    v30 = v130;
    v31 = v130;
    v32 = v30;
    v33 = sub_20E6E9F38();
    v34 = sub_20E6EA3E8();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc();
      v36 = swift_slowAlloc();
      *(_QWORD *)&v131[0] = v36;
      *(_DWORD *)v35 = 134218242;
      v133[0] = v29;
      sub_20E6EA4C0();
      *(_WORD *)(v35 + 12) = 2080;
      if (v130)
      {
        v37 = v130;
        swift_getErrorValue();
        v38 = v37;
        v39 = Error.loggerDescription()();
        countAndFlagsBits = v39._countAndFlagsBits;
        object = v39._object;

      }
      else
      {
        countAndFlagsBits = 0x3E6C696E3CLL;
        object = (void *)0xE500000000000000;
      }
      v133[0] = sub_20E66A2F8(countAndFlagsBits, (unint64_t)object, (uint64_t *)v131);
      sub_20E6EA4C0();
      swift_bridgeObjectRelease();
      v66 = v130;

      _os_log_impl(&dword_20E648000, v33, v34, "Received unexpected resultCode from server: %ld, %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x212BC3A38](v36, -1, -1);
      MEMORY[0x212BC3A38](v35, -1, -1);

    }
    else
    {
      v50 = v130;

    }
LABEL_33:
    sub_20E674BD4(4);
    return;
  }
  if (!a1 || (v42 = (uint64_t)v14, objc_opt_self(), (v43 = swift_dynamicCastObjCClass()) == 0))
  {
    v51 = a1;
    v52 = v130;
    v53 = v130;
    v54 = v51;
    v55 = v52;
    v56 = sub_20E6E9F38();
    v57 = sub_20E6EA3E8();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = 0x3E6C696E3CLL;
      v59 = swift_slowAlloc();
      v60 = swift_slowAlloc();
      v133[0] = v60;
      *(_DWORD *)v59 = 136315394;
      v122 = v4;
      if (a1)
      {
        v134 = v54;
        sub_20E67BE44(0, &qword_254A2E188);
        v61 = v54;
        __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1A0);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v62 = *(void **)&v131[0];
          swift_getErrorValue();
          v63 = Error.loggerDescription()();
          v64 = v63._countAndFlagsBits;
          v65 = v63._object;

        }
        else
        {
          *(_QWORD *)&v131[0] = 0;
          *((_QWORD *)&v131[0] + 1) = 0xE000000000000000;
          v133[10] = (uint64_t)v61;
          sub_20E6EA6B8();

          v65 = (void *)*((_QWORD *)&v131[0] + 1);
          v64 = *(_QWORD *)&v131[0];
        }

      }
      else
      {
        v65 = (void *)0xE500000000000000;
        v64 = 0x3E6C696E3CLL;
      }
      *(_QWORD *)&v131[0] = sub_20E66A2F8(v64, (unint64_t)v65, v133);
      sub_20E6EA4C0();

      swift_bridgeObjectRelease();
      *(_WORD *)(v59 + 12) = 2080;
      if (v130)
      {
        v76 = v130;
        swift_getErrorValue();
        v77 = v76;
        v78 = Error.loggerDescription()();
        v79 = v78._object;
        v80 = v76;
        v58 = v78._countAndFlagsBits;

      }
      else
      {
        v79 = (void *)0xE500000000000000;
      }
      *(_QWORD *)&v131[0] = sub_20E66A2F8(v58, (unint64_t)v79, v133);
      sub_20E6EA4C0();
      swift_bridgeObjectRelease();
      v81 = v130;

      _os_log_impl(&dword_20E648000, v56, v57, "Received unexpected response from server: %s, %s", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x212BC3A38](v60, -1, -1);
      MEMORY[0x212BC3A38](v59, -1, -1);
    }
    else
    {

      v67 = v130;
    }

    goto LABEL_33;
  }
  v44 = (void *)v43;
  v130 = a1;
  v45 = objc_msgSend(v44, sel_protoResponse);
  if (!v45)
  {
    __break(1u);
    return;
  }
  v46 = v45;
  v47 = sub_20E6E9C80();
  v49 = v48;

  v133[0] = v47;
  v133[1] = v49;
  v132 = 0;
  memset(v131, 0, sizeof(v131));
  sub_20E6E9DE8();
  sub_20E67BD04(&qword_254A2E190, type metadata accessor for CableResponse, (uint64_t)&unk_20E6F3BB4);
  sub_20E6E9E9C();
  if (v22[*(int *)(v18 + 28)] != 1)
  {
    v82 = (uint64_t)v126;
    sub_20E67BDC4((uint64_t)v22, (uint64_t)v126, type metadata accessor for CableResponse);
    v68 = sub_20E6E9F38();
    v83 = sub_20E6EA3E8();
    if (!os_log_type_enabled(v68, v83))
    {
      sub_20E67BE08(v82, type metadata accessor for CableResponse);
      goto LABEL_49;
    }
    v70 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v70 = 134217984;
    if (*(_BYTE *)(v82 + *(int *)(v18 + 28)) == 5)
      v84 = 0;
    else
      v84 = *(unsigned __int8 *)(v82 + *(int *)(v18 + 28));
    sub_20E67BE08(v82, type metadata accessor for CableResponse);
    *(_QWORD *)&v131[0] = v84;
    sub_20E6EA4C0();
    v71 = "Allocation server returned error: %ld";
    v72 = v68;
    v73 = v83;
    v74 = v70;
    v75 = 12;
    goto LABEL_39;
  }
  sub_20E6DDBA4((uint64_t)v8);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v127 + 6))(v8, 1, v9) == 1)
  {
    sub_20E67BD44((uint64_t)v8, &qword_254A2E180);
    v68 = sub_20E6E9F38();
    v69 = sub_20E6EA3E8();
    if (!os_log_type_enabled(v68, v69))
    {
LABEL_49:

      sub_20E674BD4(4);
      sub_20E67BE08((uint64_t)v22, type metadata accessor for CableResponse);
      return;
    }
    v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v70 = 0;
    v71 = "Couldn't decode allocation response";
    v72 = v68;
    v73 = v69;
    v74 = v70;
    v75 = 2;
LABEL_39:
    _os_log_impl(&dword_20E648000, v72, v73, v71, v74, v75);
    MEMORY[0x212BC3A38](v70, -1, -1);
    goto LABEL_49;
  }
  v85 = (uint64_t)v8;
  v86 = v9;
  v87 = v125;
  sub_20E67BD80(v85, v125, type metadata accessor for CableResponse.AllocationResponse);
  v88 = v42;
  sub_20E67BDC4(v87, v42, type metadata accessor for CableResponse.AllocationResponse);
  v89 = sub_20E6E9F38();
  v90 = sub_20E6EA400();
  v91 = v90;
  v92 = os_log_type_enabled(v89, v90);
  v121 = v22;
  if (v92)
  {
    LODWORD(v129) = v91;
    v93 = (uint8_t *)swift_slowAlloc();
    v94 = swift_slowAlloc();
    v128 = (char *)v94;
    v127 = v93;
    *(_DWORD *)v93 = 136315138;
    *(_QWORD *)&v131[0] = v94;
    v95 = (uint64_t *)(v42 + *(int *)(v86 + 20));
    v96 = *v95;
    v97 = v95[1];
    v122 = v4;
    if (v97 >> 60 == 15)
      v98 = 0;
    else
      v98 = v96;
    if (v97 >> 60 == 15)
      v99 = 0xC000000000000000;
    else
      v99 = v97;
    v126 = v93 + 4;
    sub_20E66A9D4(v96, v97);
    sub_20E6DE828(v98, v99);
    v133[0] = v100;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
    sub_20E67BC78((unint64_t *)&qword_254A2E110, (uint64_t *)&unk_254A2EE80, MEMORY[0x24BEE12B0]);
    v101 = sub_20E6EA184();
    v103 = v102;
    swift_bridgeObjectRelease();
    v104 = v98;
    v4 = v122;
    sub_20E6673F4(v104, v99);
    v133[0] = sub_20E66A2F8(v101, v103, (uint64_t *)v131);
    v87 = v125;
    sub_20E6EA4C0();
    swift_bridgeObjectRelease();
    sub_20E67BE08(v88, type metadata accessor for CableResponse.AllocationResponse);
    v105 = v127;
    _os_log_impl(&dword_20E648000, v89, (os_log_type_t)v129, "Allocated relay with routingID: \"%s\"", v127, 0xCu);
    v106 = v128;
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v106, -1, -1);
    MEMORY[0x212BC3A38](v105, -1, -1);
  }
  else
  {
    sub_20E67BE08(v42, type metadata accessor for CableResponse.AllocationResponse);
  }

  v107 = v124;
  v108 = v87 + *(int *)(v86 + 24);
  if ((*(_BYTE *)(v108 + 4) & 1) != 0)
  {
    LOWORD(v109) = 0;
LABEL_59:
    v115 = (uint64_t *)(v87 + *(int *)(v86 + 20));
    v116 = v115[1];
    if (v116 >> 60 == 15)
      v117 = 0;
    else
      v117 = *v115;
    if (v116 >> 60 == 15)
      v118 = 0xC000000000000000;
    else
      v118 = v115[1];
    sub_20E66A9D4(*v115, v116);
    sub_20E671ACC(v117, v118, v109);
    sub_20E6673F4(v117, v118);
    v119 = *(_BYTE *)(v4 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentState);
    *(_BYTE *)(v4 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_currentState) = 2;
    sub_20E670C18(v119);

    sub_20E67BE08(v87, type metadata accessor for CableResponse.AllocationResponse);
    sub_20E67BE08((uint64_t)v121, type metadata accessor for CableResponse);
    return;
  }
  v109 = *(_DWORD *)v108;
  if (!HIWORD(*(_DWORD *)v108))
    goto LABEL_59;
  sub_20E67BDC4(v87, v124, type metadata accessor for CableResponse.AllocationResponse);
  v110 = sub_20E6E9F38();
  v111 = sub_20E6EA3E8();
  if (os_log_type_enabled(v110, v111))
  {
    v112 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v112 = 67109120;
    v113 = v107 + *(int *)(v86 + 24);
    if (*(_BYTE *)(v113 + 4))
      v114 = 0;
    else
      v114 = *(_DWORD *)v113;
    sub_20E67BE08(v107, type metadata accessor for CableResponse.AllocationResponse);
    LODWORD(v131[0]) = v114;
    sub_20E6EA4C0();
    _os_log_impl(&dword_20E648000, v110, v111, "Received invalid encodedDomain: %u", v112, 8u);
    MEMORY[0x212BC3A38](v112, -1, -1);
  }
  else
  {
    sub_20E67BE08(v107, type metadata accessor for CableResponse.AllocationResponse);
  }
  v120 = (uint64_t)v121;

  sub_20E674BD4(4);
  sub_20E67BE08(v87, type metadata accessor for CableResponse.AllocationResponse);
  sub_20E67BE08(v120, type metadata accessor for CableResponse);
}

void sub_20E67A370(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint8_t *v34;
  uint8_t *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  os_log_type_t v42;
  uint8_t *v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  unint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  _BOOL4 v95;
  unint64_t v96;
  uint8_t *v97;
  const char *v98;
  _BOOL4 v99;
  unint64_t v100;
  uint64_t isa;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t, uint64_t);
  char *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  id v138;
  NSObject *v139;
  __int128 v140;
  _OWORD v141[2];
  uint64_t v142;
  __int128 v143;
  __int128 v144;

  v2 = v1;
  v138 = a1;
  v129 = sub_20E6EA094();
  v128 = *(_QWORD *)(v129 - 8);
  MEMORY[0x24BDAC7A8](v129);
  v127 = (char *)&v121 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for CableRelayConnectionRequest(0);
  v134 = *(_QWORD *)(v135 - 8);
  v4 = MEMORY[0x24BDAC7A8](v135);
  v130 = (uint64_t)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v132 = (uint64_t)&v121 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E0E0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v131 = (uint64_t)&v121 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v133 = (uint64_t)&v121 - v13;
  v14 = sub_20E6E9DF4();
  MEMORY[0x24BDAC7A8](v14);
  v136 = (unint64_t)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CableRelayPushMessage(0);
  MEMORY[0x24BDAC7A8](v16);
  v137 = (uint64_t)&v121 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E330);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ASCABLEAdvertisement();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = ((char *)&v121 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_254A2DBE8 != -1)
    swift_once();
  v25 = sub_20E6E9F50();
  v26 = __swift_project_value_buffer(v25, (uint64_t)qword_254A3ED50);
  v27 = sub_20E6E9F38();
  v28 = sub_20E6EA400();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v139 = v26;
    v30 = v10;
    v31 = v16;
    v32 = v21;
    v33 = v24;
    v34 = v29;
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_20E648000, v27, v28, "Received relay push", v29, 2u);
    v35 = v34;
    v24 = v33;
    v21 = v32;
    v16 = v31;
    v10 = v30;
    v26 = v139;
    MEMORY[0x212BC3A38](v35, -1, -1);
  }

  v36 = MEMORY[0x212BC3AEC](v2+ OBJC_IVAR____TtCC26AuthenticationServicesCore20ASCABLEAuthenticatorP33_84AFAA0745E7F5997DD6543D9C2808DD10APSWrapper_authenticator);
  if (v36)
  {
    v37 = (char *)v36;
    v38 = v36 + OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_advertisement;
    swift_beginAccess();
    sub_20E67BCC0(v38, (uint64_t)v20, &qword_254A2E330);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
    {
      sub_20E67BD44((uint64_t)v20, &qword_254A2E330);
      v39 = sub_20E6E9F38();
      v40 = sub_20E6EA3E8();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v41 = 0;
        _os_log_impl(&dword_20E648000, v39, v40, "Unexpectedly received push without a valid advertisement", v41, 2u);
        MEMORY[0x212BC3A38](v41, -1, -1);
      }

      sub_20E674BD4(0);
      return;
    }
    sub_20E67BD80((uint64_t)v20, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for ASCABLEAdvertisement);
    if (v138)
    {
      v139 = v26;
      v126 = v21;
      *(_QWORD *)&v140 = 0x6675626F746F7270;
      *((_QWORD *)&v140 + 1) = 0xE800000000000000;
      v44 = v138;
      sub_20E6EA5BC();
      v138 = v44;
      v45 = objc_msgSend(v44, sel_userInfo);
      if (!v45)
      {
        __break(1u);
        return;
      }
      v46 = v45;
      v47 = sub_20E6EA154();

      if (*(_QWORD *)(v47 + 16))
      {
        v48 = sub_20E699A4C((uint64_t)v141);
        if ((v49 & 1) != 0)
        {
          sub_20E66C394(*(_QWORD *)(v47 + 56) + 32 * v48, (uint64_t)&v143);
        }
        else
        {
          v144 = 0u;
          v143 = 0u;
        }
      }
      else
      {
        v144 = 0u;
        v143 = 0u;
      }
      swift_bridgeObjectRelease();
      sub_20E67B954((uint64_t)v141);
      if (*((_QWORD *)&v144 + 1))
      {
        if ((swift_dynamicCast() & 1) != 0)
        {
          v141[0] = v140;
          *(_QWORD *)&v143 = 45;
          *((_QWORD *)&v143 + 1) = 0xE100000000000000;
          *(_QWORD *)&v140 = 43;
          *((_QWORD *)&v140 + 1) = 0xE100000000000000;
          v53 = sub_20E67B988();
          v54 = sub_20E6EA4E4();
          v56 = v55;
          swift_bridgeObjectRelease();
          *(_QWORD *)&v141[0] = v54;
          *((_QWORD *)&v141[0] + 1) = v56;
          *(_QWORD *)&v143 = 95;
          *((_QWORD *)&v143 + 1) = 0xE100000000000000;
          *(_QWORD *)&v140 = 47;
          *((_QWORD *)&v140 + 1) = 0xE100000000000000;
          v125 = v53;
          v57 = sub_20E6EA4E4();
          v59 = v58;
          swift_bridgeObjectRelease();
          v60 = sub_20E6EA25C();
          v61 = v60 & 3;
          if (v60 <= 0)
            v61 = -(-v60 & 3);
          if (v61 >= 1)
          {
            MEMORY[0x212BC2B08](61, 0xE100000000000000, 4 - v61);
            *(_QWORD *)&v141[0] = v57;
            *((_QWORD *)&v141[0] + 1) = v59;
            swift_bridgeObjectRetain();
            sub_20E6EA280();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v62 = sub_20E6E9C14();
          v64 = v63;
          swift_bridgeObjectRelease();
          if (v64 >> 60 != 15)
          {
            *(_QWORD *)&v143 = v62;
            *((_QWORD *)&v143 + 1) = v64;
            v142 = 0;
            memset(v141, 0, sizeof(v141));
            v124 = v62;
            sub_20E66A990(v62, v64);
            sub_20E6E9DE8();
            sub_20E67BD04((unint64_t *)&unk_254A2E100, type metadata accessor for CableRelayPushMessage, (uint64_t)&unk_20E6F31B4);
            v65 = v137;
            sub_20E6E9E9C();
            v136 = v64;
            v123 = v16;
            v70 = v65 + *(int *)(v16 + 20);
            v71 = v133;
            sub_20E67BCC0(v70, v133, (uint64_t *)&unk_254A2E0E0);
            v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v134 + 48);
            v73 = v135;
            v74 = v72(v71, 1, v135);
            sub_20E67BD44(v71, (uint64_t *)&unk_254A2E0E0);
            if (v74 == 1)
              goto LABEL_45;
            v75 = v131;
            sub_20E67BCC0(v70, v131, (uint64_t *)&unk_254A2E0E0);
            if (v72(v75, 1, v73) == 1)
            {
              v76 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
              v77 = v132;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v132, 1, 1, v76);
              *(_QWORD *)(v77 + *(int *)(v73 + 20)) = MEMORY[0x24BEE4AF8];
              sub_20E6E9DD0();
              *(_OWORD *)(v77 + *(int *)(v73 + 28)) = xmmword_20E6EE5B0;
              sub_20E67BD44(v75, (uint64_t *)&unk_254A2E0E0);
            }
            else
            {
              v77 = v132;
              sub_20E67BD80(v75, v132, type metadata accessor for CableRelayConnectionRequest);
            }
            v78 = *(_QWORD *)(v77 + *(int *)(v73 + 20));
            swift_bridgeObjectRetain();
            sub_20E67BE08(v77, type metadata accessor for CableRelayConnectionRequest);
            v79 = *(_QWORD *)(v78 + 16);
            swift_bridgeObjectRelease();
            if (!v79)
            {
LABEL_45:
              v82 = sub_20E6E9F38();
              v83 = sub_20E6EA3E8();
              if (os_log_type_enabled(v82, v83))
              {
                v84 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v84 = 0;
                _os_log_impl(&dword_20E648000, v82, v83, "Could not read IP address for relay", v84, 2u);
                MEMORY[0x212BC3A38](v84, -1, -1);
              }

              sub_20E674BD4(4);
              v85 = v124;
              v86 = v136;
              goto LABEL_57;
            }
            sub_20E67BCC0(v70, (uint64_t)v10, (uint64_t *)&unk_254A2E0E0);
            if (v72((uint64_t)v10, 1, v73) == 1)
            {
              v80 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
              v81 = v130;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v130, 1, 1, v80);
              *(_QWORD *)(v81 + *(int *)(v73 + 20)) = MEMORY[0x24BEE4AF8];
              sub_20E6E9DD0();
              *(_OWORD *)(v81 + *(int *)(v73 + 28)) = xmmword_20E6EE5B0;
              sub_20E67BD44((uint64_t)v10, (uint64_t *)&unk_254A2E0E0);
            }
            else
            {
              v81 = v130;
              sub_20E67BD80((uint64_t)v10, v130, type metadata accessor for CableRelayConnectionRequest);
            }
            v87 = *(_QWORD *)(v81 + *(int *)(v73 + 20));
            swift_bridgeObjectRetain();
            sub_20E67BE08(v81, type metadata accessor for CableRelayConnectionRequest);
            v88 = sub_20E674FAC(v87);
            v90 = v89;
            swift_bridgeObjectRelease();
            if (v90)
            {
              v91 = (uint64_t *)(v137 + *(int *)(v123 + 24));
              v92 = v91[1];
              if (v92 >> 60 != 15)
              {
                v135 = *v91;
                v134 = v88;
                isa = (uint64_t)v24[3].isa;
                v100 = (unint64_t)v24[4].isa;
                v130 = v92;
                sub_20E66A9D4(v135, v92);
                sub_20E66A990(isa, v100);
                sub_20E6DE828(isa, v100);
                v139 = v24;
                *(_QWORD *)&v141[0] = v102;
                v123 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
                sub_20E67BC78((unint64_t *)&qword_254A2E110, (uint64_t *)&unk_254A2EE80, MEMORY[0x24BEE12B0]);
                v133 = sub_20E6EA184();
                v132 = v103;
                swift_bridgeObjectRelease();
                sub_20E6673F4(isa, v100);
                v104 = *(_QWORD *)&v37[OBJC_IVAR____TtC26AuthenticationServicesCore20ASCABLEAuthenticator_cryptographyManager]
                     + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_tunnelID;
                v105 = v128;
                v106 = *(void (**)(char *, uint64_t, uint64_t))(v128 + 16);
                v131 = v90;
                v107 = v127;
                v108 = v129;
                v106(v127, v104, v129);
                sub_20E6EA070();
                v109 = v141[0];
                sub_20E6DE828(*(uint64_t *)&v141[0], *((uint64_t *)&v141[0] + 1));
                *(_QWORD *)&v141[0] = v110;
                v123 = sub_20E6EA184();
                v122 = v111;
                swift_bridgeObjectRelease();
                sub_20E6673F4(v109, *((unint64_t *)&v109 + 1));
                (*(void (**)(char *, uint64_t))(v105 + 8))(v107, v108);
                v112 = v130;
                *(_QWORD *)&v141[0] = sub_20E6E9C74();
                *((_QWORD *)&v141[0] + 1) = v113;
                *(_QWORD *)&v143 = 43;
                *((_QWORD *)&v143 + 1) = 0xE100000000000000;
                *(_QWORD *)&v140 = 45;
                *((_QWORD *)&v140 + 1) = 0xE100000000000000;
                v114 = sub_20E6EA4E4();
                v116 = v115;
                swift_bridgeObjectRelease();
                *(_QWORD *)&v141[0] = v114;
                *((_QWORD *)&v141[0] + 1) = v116;
                *(_QWORD *)&v143 = 47;
                *((_QWORD *)&v143 + 1) = 0xE100000000000000;
                *(_QWORD *)&v140 = 95;
                *((_QWORD *)&v140 + 1) = 0xE100000000000000;
                v117 = sub_20E6EA4E4();
                v119 = v118;
                swift_bridgeObjectRelease();
                v120 = v139;
                sub_20E6E9B54();
                sub_20E6721D8(v134, v131, v133, v132, v123, v122, v117, v119);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_20E66AA28(v135, v112);

                swift_bridgeObjectRelease();
                sub_20E66AA28(v124, v136);

                sub_20E67BE08(v137, type metadata accessor for CableRelayPushMessage);
                v69 = (uint64_t)v120;
                goto LABEL_37;
              }
              swift_bridgeObjectRelease();
              v93 = sub_20E6E9F38();
              v94 = sub_20E6EA3E8();
              v95 = os_log_type_enabled(v93, v94);
              v96 = v136;
              if (!v95)
                goto LABEL_56;
              v97 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v97 = 0;
              v98 = "Could not read access token for relay";
            }
            else
            {
              v93 = sub_20E6E9F38();
              v94 = sub_20E6EA3E8();
              v99 = os_log_type_enabled(v93, v94);
              v96 = v136;
              if (!v99)
              {
LABEL_56:

                sub_20E674BD4(4);
                v85 = v124;
                v86 = v96;
LABEL_57:
                sub_20E66AA28(v85, v86);

                sub_20E67BE08(v137, type metadata accessor for CableRelayPushMessage);
                goto LABEL_36;
              }
              v97 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v97 = 0;
              v98 = "Could not find usable IP address";
            }
            _os_log_impl(&dword_20E648000, v93, v94, v98, v97, 2u);
            MEMORY[0x212BC3A38](v97, -1, -1);
            goto LABEL_56;
          }
        }
      }
      else
      {
        sub_20E67BD44((uint64_t)&v143, (uint64_t *)&unk_254A2E0F0);
      }
      v66 = sub_20E6E9F38();
      v67 = sub_20E6EA3E8();
      if (os_log_type_enabled(v66, v67))
      {
        v68 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v68 = 0;
        _os_log_impl(&dword_20E648000, v66, v67, "Could not read protobuf payload", v68, 2u);
        MEMORY[0x212BC3A38](v68, -1, -1);
      }

      sub_20E674BD4(4);
    }
    else
    {
      v50 = sub_20E6E9F38();
      v51 = sub_20E6EA3E8();
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v52 = 0;
        _os_log_impl(&dword_20E648000, v50, v51, "Push unexpectedly had nil message", v52, 2u);
        MEMORY[0x212BC3A38](v52, -1, -1);
      }

      sub_20E674BD4(1);
    }

LABEL_36:
    v69 = (uint64_t)v24;
LABEL_37:
    sub_20E67BE08(v69, (uint64_t (*)(_QWORD))type metadata accessor for ASCABLEAdvertisement);
    return;
  }
  v139 = sub_20E6E9F38();
  v42 = sub_20E6EA3F4();
  if (os_log_type_enabled(v139, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v43 = 0;
    _os_log_impl(&dword_20E648000, v139, v42, "Authenticator is nil.", v43, 2u);
    MEMORY[0x212BC3A38](v43, -1, -1);
  }

}

uint64_t sub_20E67B63C(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0D0);
  v25 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v26 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0B8);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v24 - v14;
  result = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v24 - v17;
  v27 = result;
  if (a1)
  {
    v19 = a2 - (_QWORD)a1 - a3;
    if (__OFSUB__(a2 - (_QWORD)a1, a3))
    {
      __break(1u);
      return result;
    }
    v20 = &a1[a3];
    a1 = &v20[v19];
  }
  else
  {
    v20 = 0;
  }
  sub_20E67BCC0(a4, (uint64_t)&v24 - v17, &qword_254A2E0B8);
  sub_20E67BCC0((uint64_t)v18, (uint64_t)v15, &qword_254A2E0B8);
  v21 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v22 = swift_allocObject();
  sub_20E67B910((uint64_t)v18, v22 + v21, &qword_254A2E0B8);
  if (v20)
  {
    sub_20E67BCC0((uint64_t)v15, (uint64_t)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_254A2E0B8);
    sub_20E6767B0(&v29, v20, a1 - v20);
    v23 = v29;
    swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v26, v15, v28);
    sub_20E67BC78(&qword_254A2E0D8, &qword_254A2E0D0, MEMORY[0x24BDC6540]);
    sub_20E6EA310();
    swift_release();
    v23 = v29;
  }
  sub_20E67BD44((uint64_t)v15, &qword_254A2E0B8);
  return v23;
}

uint64_t sub_20E67B898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0B8) - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_deallocObject();
}

uint64_t sub_20E67B910(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_20E67B954(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

unint64_t sub_20E67B988()
{
  unint64_t result;

  result = qword_254A2F7E0;
  if (!qword_254A2F7E0)
  {
    result = MEMORY[0x212BC39A8](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_254A2F7E0);
  }
  return result;
}

uint64_t sub_20E67B9CC(uint64_t a1)
{
  sub_20E677A74(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_BYTE *)(a1 + 216));
  return a1;
}

uint64_t sub_20E67BA44(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_20E67BA54(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  v2 = (a2 >> 60) & 3;
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 != 1)
      return result;
    a2 &= 0xCFFFFFFFFFFFFFFFLL;
  }
  return sub_20E6673F4(result, a2);
}

uint64_t sub_20E67BA70()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_20E67BA94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_20E6729A4(a1, a2, v2);
}

uint64_t sub_20E67BA9C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t sub_20E67BAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_20E6C753C(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_20E67BADC(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_20E67BAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E330);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_20E67BB34(void *a1)
{
  sub_20E671F78(a1);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_20E67BB54()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void sub_20E67BB78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_20E66F118(a1, a2, *(_QWORD *)(v2 + 16));
}

unint64_t sub_20E67BB80()
{
  unint64_t result;

  result = qword_254A2E140;
  if (!qword_254A2E140)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCABLEAuthenticator.AuthenticatorError, &type metadata for ASCABLEAuthenticator.AuthenticatorError);
    atomic_store(result, (unint64_t *)&qword_254A2E140);
  }
  return result;
}

uint64_t sub_20E67BBC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[3];
  __int128 v5;

  v5 = *(_OWORD *)*(_QWORD *)(v2 + 16);
  v4[2] = &v5;
  return sub_20E675F04((uint64_t (*)(uint64_t, uint64_t))sub_20E67BC0C, (uint64_t)v4, a1, a2);
}

void sub_20E67BC0C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v7 = *(uint64_t **)(v3 + 16);
  v8 = *v7;
  v9 = v7[1];
  sub_20E66A990(*v7, v9);
  sub_20E6769F8(a3, a1, a2, v8, v9);
  *(_QWORD *)(a3 + 24) = v10;
}

uint64_t sub_20E67BC78(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x212BC39A8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_20E67BCB8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_20E6718FC(a1, a2, a3, a4, v4);
}

uint64_t sub_20E67BCC0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_20E67BD04(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x212BC39A8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20E67BD44(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_20E67BD80(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_20E67BDC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_20E67BE08(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_20E67BE44(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

double sub_20E67BE7C(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 208) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 216) = -1;
  return result;
}

uint64_t *sub_20E67BEAC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  v3 = a1[3];
  sub_20E6673F4(*a1, a1[1]);
  sub_20E6673F4(v2, v3);
  return a1;
}

uint64_t sub_20E67BF0C(uint64_t a1)
{
  return sub_20E67BF20(a1, (void (*)(void))sub_20E6785D4);
}

uint64_t sub_20E67BF20(uint64_t a1, void (*a2)(void))
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  id v6;

  a2();
  v2 = sub_20E6EA8BC();
  if (v2)
  {
    v3 = (void *)v2;
  }
  else
  {
    v3 = (void *)swift_allocError();
    *v4 = a1;
  }
  v5 = (void *)sub_20E6E9B3C();

  v6 = objc_msgSend(v5, sel_safari_privacyPreservingDescription);
  sub_20E6EA1CC();

  sub_20E6EA280();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_20E67C000(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6174614468747561;
    else
      v3 = 0x746D7453747461;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xE700000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6174614468747561;
      else
        v6 = 0x746D7453747461;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE700000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7630182;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE300000000000000;
  if (v3 != 7630182)
  {
LABEL_21:
    v8 = sub_20E6EA8EC();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_20E67C108(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 6777953;
  else
    v3 = 1701869940;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 6777953;
  else
    v5 = 1701869940;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_20E6EA8EC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_20E67C19C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 25705;
    else
      v3 = 0x726F70736E617274;
    if (v2 == 1)
      v4 = 0xE200000000000000;
    else
      v4 = 0xEA00000000007374;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 25705;
      else
        v6 = 0x726F70736E617274;
      if (v5 == 1)
        v7 = 0xE200000000000000;
      else
        v7 = 0xEA00000000007374;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1701869940;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1701869940)
  {
LABEL_21:
    v8 = sub_20E6EA8EC();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_20E67C294(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20E67C2E4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_20E67C344 + 4 * byte_20E6EE904[a2]))(1684104562);
}

uint64_t sub_20E67C344(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1684104562 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_20E6EA8EC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_20E67C3E8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x646E6F636573;
  else
    v3 = 0x7473726966;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x646E6F636573;
  else
    v5 = 0x7473726966;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_20E6EA8EC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_20E67C484(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000010;
  else
    v3 = 1818326629;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0x800000020E6F7110;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000010;
  else
    v5 = 1818326629;
  if ((a2 & 1) != 0)
    v6 = 0x800000020E6F7110;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_20E6EA8EC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_20E67C524(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000062;
  v3 = 0x6F6C42656772616CLL;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 6713968;
    else
      v5 = 0x6469707061;
    if (v4 == 1)
      v6 = 0xE300000000000000;
    else
      v6 = 0xE500000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6F6C42656772616CLL;
  v6 = 0xE900000000000062;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 6713968;
    else
      v3 = 0x6469707061;
    if (v7 == 1)
      v2 = 0xE300000000000000;
    else
      v2 = 0xE500000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_20E6EA8EC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_20E67C624(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 6713968;
  else
    v3 = 0x6F6C42656772616CLL;
  if (v2)
    v4 = 0xE900000000000062;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 6713968;
  else
    v5 = 0x6F6C42656772616CLL;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE900000000000062;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_20E6EA8EC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_20E67C6C4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_20E67C70C@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_20E67C778 + 4 * byte_20E6EE90D[a1]))(a2 - 5);
}

uint64_t sub_20E67C778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  if (a1 == a2 - 5 && v2 == 0x800000020E6F6F40)
    v3 = 1;
  else
    v3 = sub_20E6EA8EC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_20E67C820(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 25453;
  else
    v2 = 24935;
  if ((a2 & 1) != 0)
    v3 = 25453;
  else
    v3 = 24935;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_20E6EA8EC();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

void sub_20E67C884(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_20E67C8D0(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_20E67C970 + 4 * byte_20E6EE91B[a2]))(a3 + 1);
}

uint64_t sub_20E67C970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 + 1 && v3 == 0x800000020E6F6FE0)
    v4 = 1;
  else
    v4 = sub_20E6EA8EC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

void sub_20E67CA44(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_20E67CA7C()
{
  sub_20E6EA250();
  return swift_bridgeObjectRelease();
}

void sub_20E67CAF0(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_20E67CB34()
{
  sub_20E6EA250();
  return swift_bridgeObjectRelease();
}

void sub_20E67CBCC(uint64_t a1)
{
  sub_20E67CBF4(a1, (uint64_t)&unk_24C97FEA0, &qword_254A3ECF8);
}

void sub_20E67CBE0(uint64_t a1)
{
  sub_20E67CBF4(a1, (uint64_t)&unk_24C97FEC8, &qword_254A3ED00);
}

void sub_20E67CBF4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  id v8;

  v4 = sub_20E677310(a2);
  v6 = v5;
  v7 = (void *)sub_20E6E9C68();
  v8 = objc_msgSend((id)objc_opt_self(), sel_UUIDWithData_, v7);
  sub_20E6673F4(v4, v6);

  *a3 = v8;
}

unint64_t ASCABLEClient.ClientError.init(rawValue:)(unint64_t a1)
{
  return sub_20E681774(a1);
}

unint64_t static ASCABLEClient.ClientError._nsErrorDomain.getter()
{
  return 0xD000000000000034;
}

uint64_t sub_20E67CCAC()
{
  sub_20E684404();
  return sub_20E6E9A7C();
}

unint64_t sub_20E67CCE4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_20E681774(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_20E67CD14()
{
  sub_20E684404();
  return sub_20E6E9A94();
}

uint64_t sub_20E67CD3C()
{
  sub_20E684404();
  return sub_20E6E9A88();
}

unint64_t sub_20E67CD64()
{
  return 0xD000000000000034;
}

uint64_t sub_20E67CD80()
{
  sub_20E684404();
  return sub_20E6E9A70();
}

BOOL ASCABLEClient.OperationType.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

uint64_t sub_20E67CDE4()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

uint64_t sub_20E67CE28()
{
  return sub_20E6EA994();
}

uint64_t sub_20E67CE50()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

_QWORD *sub_20E67CE90@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 1 && *result != 0;
  *(_QWORD *)a2 = *result == 1;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_20E67CF88@<X0>(uint64_t a1@<X8>)
{
  return sub_20E68A454(a1);
}

uint64_t ASCABLEClient.__allocating_init(delegate:isRegistrationRequest:)(char *a1, int a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return ASCABLEClient.init(delegate:isRegistrationRequest:)(a1, a2);
}

uint64_t ASCABLEClient.init(delegate:isRegistrationRequest:)(char *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  objc_class *v27;
  id v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  char *v35;
  _OWORD v36[2];
  uint64_t v37;

  v35 = a1;
  v34 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E1A8);
  MEMORY[0x24BDAC7A8](v2);
  v33 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E1B0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_20E6EA124();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_20E6EA0AC();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_20E6EA094();
  v15 = *(_QWORD *)(v32 - 8);
  v16 = MEMORY[0x24BDAC7A8](v32);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v31 - v19;
  if (qword_254A2DBD0 != -1)
    swift_once();
  v21 = __swift_project_value_buffer(v11, (uint64_t)qword_254A2E3E0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v21, v11);
  sub_20E6EA088();
  sub_20E6EA118();
  v22 = v32;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v20, v32);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  v23 = sub_20E6EA100();
  v24 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v33, 1, 1, v23);
  type metadata accessor for ASCABLECryptographyManager();
  swift_allocObject();
  v25 = sub_20E6847FC((uint64_t)v18, (uint64_t)v6, v24);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v22);
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBB220]), sel_init);
  v27 = (objc_class *)type metadata accessor for ASCABLEClient();
  memset(v36, 0, sizeof(v36));
  v37 = 0;
  v28 = objc_allocWithZone(v27);
  v29 = sub_20E6817C0(v35, v25, v26, (uint64_t)v36, v34 & 1);
  swift_unknownObjectRelease();
  swift_release();

  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v29;
}

id sub_20E67D3A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v9 = (_QWORD *)(v5 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentRelyingPartyIdentifier);
  *v9 = a2;
  v9[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = v5 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentOperationType;
  *(_QWORD *)v10 = a1;
  *(_BYTE *)(v10 + 8) = 0;
  v11 = (_QWORD *)(v5 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_completionHandler);
  v12 = *(_QWORD *)(v5 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_completionHandler);
  *v11 = a4;
  v11[1] = a5;
  swift_retain();
  sub_20E67BADC(v12);
  sub_20E67DA30();
  return objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_powerLogger), sel_logAuthenticationStartedEventIfNeeded);
}

void sub_20E67D4F0()
{
  sub_20E681C44();
}

uint64_t sub_20E67D534(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_20E67D56C + 4 * byte_20E6EE932[a1]))(0xD000000000000011, 0x800000020E6F6FC0);
}

uint64_t sub_20E67D56C(uint64_t a1)
{
  return a1 + 1;
}

void sub_20E67D5F0(char *a1)
{
  sub_20E67C884(*a1);
}

uint64_t sub_20E67D5FC()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_20E6EA988();
  sub_20E67CAF0((uint64_t)v3, v1);
  return sub_20E6EA9A0();
}

void sub_20E67D640(uint64_t a1)
{
  char *v1;

  sub_20E67CAF0(a1, *v1);
}

uint64_t sub_20E67D648()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_20E6EA988();
  sub_20E67CAF0((uint64_t)v3, v1);
  return sub_20E6EA9A0();
}

uint64_t sub_20E67D688@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_20E6820CC();
  *a1 = result;
  return result;
}

uint64_t sub_20E67D6B4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_20E67D534(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_20E67D6DC(char a1)
{
  void *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _DWORD *v6;
  id v7;

  if (qword_254A2DBE8 != -1)
    swift_once();
  v3 = sub_20E6E9F50();
  __swift_project_value_buffer(v3, (uint64_t)qword_254A3ED50);
  v7 = v1;
  v4 = sub_20E6E9F38();
  v5 = sub_20E6EA3D0();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (_DWORD *)swift_slowAlloc();
    swift_slowAlloc();
    *v6 = 136315394;
    __asm { BR              X10 }
  }

}

void sub_20E67DA30()
{
  __asm { BR              X13 }
}

void sub_20E67DA94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  char v27;
  void *v28;

  v18 = sub_20E6EA8EC();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    v27 = *(_BYTE *)(v16 + v17);
    *(_BYTE *)(v16 + v17) = 2;
    sub_20E67D6DC(v27);
  }
  else
  {
    v19 = *(_BYTE *)(v16 + v17);
    *(_BYTE *)(v16 + v17) = 3;
    sub_20E67D6DC(v19);
    v20 = *(void **)(v16 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_bluetoothManager);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E340);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_20E6EEDE0;
    if (qword_254A2DBC0 != -1)
      swift_once();
    v22 = (void *)qword_254A3ECF8;
    *(_QWORD *)(v21 + 32) = qword_254A3ECF8;
    v23 = qword_254A2DBC8;
    v24 = v22;
    if (v23 != -1)
      swift_once();
    v25 = (void *)qword_254A3ED00;
    *(_QWORD *)(v21 + 40) = qword_254A3ED00;
    sub_20E6EA34C();
    sub_20E67BE44(0, &qword_254A2E378);
    v26 = v25;
    v28 = (void *)sub_20E6EA334();
    swift_bridgeObjectRelease();
    objc_msgSend(v20, sel_scanForPeripheralsWithServices_options_, v28, 0);

  }
}

void sub_20E67DC98(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  char **v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v2 = v1;
  if (qword_254A2DBE8 != -1)
    swift_once();
  v4 = sub_20E6E9F50();
  __swift_project_value_buffer(v4, (uint64_t)qword_254A3ED50);
  v5 = a1;
  v6 = sub_20E6E9F38();
  v7 = sub_20E6EA3D0();
  v8 = &selRef_checkBrowserEngineEntitlementForAuditToken_;
  if (os_log_type_enabled(v6, v7))
  {
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412546;
    v11 = v5;
    sub_20E6EA4C0();
    *v10 = v5;

    *(_WORD *)(v9 + 12) = 2048;
    objc_msgSend(v11, sel_state);

    sub_20E6EA4C0();
    _os_log_impl(&dword_20E648000, v6, v7, "%@ changed state to %ld", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F160);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v10, -1, -1);
    v12 = v9;
    v8 = &selRef_checkBrowserEngineEntitlementForAuditToken_;
    MEMORY[0x212BC3A38](v12, -1, -1);

  }
  else
  {

  }
  v13 = objc_msgSend(v5, v8[349]);
  v14 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentState);
  if (v13 == (id)5)
    __asm { BR              X13 }
  *(_BYTE *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentState) = 0;
  sub_20E67D6DC(v14);
}

void sub_20E67E020(uint64_t a1, void *a2)
{
  sub_20E682114(a2);
}

void sub_20E67E084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_20E682318(a2, a3);
}

void sub_20E67E090(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v5 = a3 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x212BC3AEC](v5);
  if (v6)
  {
    v7 = v6;
    if (a2 && (a1 == 0x6261632E6F646966 && a2 == 0xEA0000000000656CLL || (sub_20E6EA8EC() & 1) != 0))
    {
      sub_20E67E43C();
    }
    else
    {
      if (qword_254A2DBE8 != -1)
        swift_once();
      v11 = sub_20E6E9F50();
      __swift_project_value_buffer(v11, (uint64_t)qword_254A3ED50);
      swift_bridgeObjectRetain_n();
      v12 = sub_20E6E9F38();
      v13 = sub_20E6EA3E8();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        v15 = swift_slowAlloc();
        v17 = v15;
        *(_DWORD *)v14 = 136315138;
        if (a2)
        {
          v16 = a2;
        }
        else
        {
          a1 = 7104878;
          v16 = 0xE300000000000000;
        }
        swift_bridgeObjectRetain();
        sub_20E66A2F8(a1, v16, &v17);
        sub_20E6EA4C0();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_20E648000, v12, v13, "Received socket connection with unexpected protocol: %s", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x212BC3A38](v15, -1, -1);
        MEMORY[0x212BC3A38](v14, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_20E681C44();
    }
  }
  else
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v8 = sub_20E6E9F50();
    __swift_project_value_buffer(v8, (uint64_t)qword_254A3ED50);
    v7 = sub_20E6E9F38();
    v9 = sub_20E6EA400();
    if (os_log_type_enabled(v7, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_20E648000, v7, v9, "Client was deinitialized while waiting for initial connection.", v10, 2u);
      MEMORY[0x212BC3A38](v10, -1, -1);
    }
  }

}

void sub_20E67E43C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  char v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;

  v1 = v0;
  v2 = sub_20E6EA430();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E330);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ASCABLEAdvertisement();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_authenticatorAdvertisement;
  swift_beginAccess();
  sub_20E67BCC0(v13, (uint64_t)v8, &qword_254A2E330);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_20E67BD44((uint64_t)v8, &qword_254A2E330);
    if (qword_254A2DBE8 != -1)
      swift_once();
    v14 = sub_20E6E9F50();
    __swift_project_value_buffer(v14, (uint64_t)qword_254A3ED50);
    v15 = sub_20E6E9F38();
    v16 = sub_20E6EA3E8();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_20E648000, v15, v16, "Unexpectedly tried to perform initial handshake without an advertisement", v17, 2u);
      MEMORY[0x212BC3A38](v17, -1, -1);
    }

    sub_20E681C44();
  }
  else
  {
    sub_20E683B08((uint64_t)v8, (uint64_t)v12);
    v18 = *(void **)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_webSocket);
    if (v18)
    {
      v19 = *(_BYTE *)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentState);
      *(_BYTE *)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentState) = 5;
      v20 = v12;
      v21 = v18;
      sub_20E67D6DC(v19);
      v22 = *(int *)(v9 + 32);
      v40 = (uint64_t)v20;
      v23 = (uint64_t *)&v20[v22];
      v24 = *v23;
      v25 = v23[1];
      sub_20E66A990(*v23, v25);
      v26 = sub_20E68595C(v24, v25);
      v28 = v27;
      sub_20E6673F4(v24, v25);
      v29 = sub_20E685AB4(v26, v28);
      v35 = v34;
      *v5 = v29;
      v5[1] = v34;
      v36 = v29;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDD00C0], v2);
      *(_QWORD *)(swift_allocObject() + 16) = v21;
      v39 = v21;
      sub_20E66A990(v36, v35);
      sub_20E6EA424();
      swift_release();
      (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);

      sub_20E6673F4(v36, v35);
      sub_20E6673F4(v26, v28);
      v37 = v40;
    }
    else
    {
      if (qword_254A2DBE8 != -1)
        swift_once();
      v30 = sub_20E6E9F50();
      __swift_project_value_buffer(v30, (uint64_t)qword_254A3ED50);
      v31 = sub_20E6E9F38();
      v32 = sub_20E6EA3E8();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v33 = 0;
        _os_log_impl(&dword_20E648000, v31, v32, "Unexpectedly tried to perform initial handshake without web socket", v33, 2u);
        MEMORY[0x212BC3A38](v33, -1, -1);
      }

      sub_20E681C44();
      v37 = (uint64_t)v12;
    }
    sub_20E683B4C(v37);
  }
}

void sub_20E67E9CC()
{
  uint64_t v0;
  char v1;

  sub_20E686854();
  v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentState);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentState) = 6;
  sub_20E67D6DC(v1);
}

void sub_20E67EBB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  const char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  id v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v1 = v0;
  v2 = sub_20E6EA430();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_webSocket);
  if (v6)
  {
    if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentOperationType + 8) & 1) != 0)
    {
      v7 = qword_254A2DBE8;
      v60 = v6;
      if (v7 != -1)
        swift_once();
      v8 = sub_20E6E9F50();
      __swift_project_value_buffer(v8, (uint64_t)qword_254A3ED50);
      v9 = sub_20E6E9F38();
      v10 = sub_20E6EA3E8();
      if (!os_log_type_enabled(v9, v10))
        goto LABEL_20;
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      v12 = "Unexpectedly received postHandshake message without a current operation.";
LABEL_19:
      _os_log_impl(&dword_20E648000, v9, v10, v12, v11, 2u);
      MEMORY[0x212BC3A38](v11, -1, -1);
LABEL_20:

      sub_20E681C44();
      return;
    }
    v17 = *(_QWORD *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentOperationType);
    v18 = MEMORY[0x212BC3AEC](v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_delegate);
    if (!v18)
    {
      v24 = qword_254A2DBE8;
      v60 = v6;
      if (v24 != -1)
        swift_once();
      v25 = sub_20E6E9F50();
      __swift_project_value_buffer(v25, (uint64_t)qword_254A3ED50);
      v9 = sub_20E6E9F38();
      v10 = sub_20E6EA3E8();
      if (!os_log_type_enabled(v9, v10))
        goto LABEL_20;
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      v12 = "Delegate no longer exists.";
      goto LABEL_19;
    }
    v19 = (void *)v18;
    v20 = *(_QWORD *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_cryptographyManager);
    v21 = v6;
    sub_20E686E64((uint64_t)v65);
    v60 = v21;
    v73 = v68;
    v74 = v69;
    v75 = v70;
    v71 = v66;
    v72 = v67;
    v22 = sub_20E69B384();
    v59 = v19;
    if (v17)
    {
      if (v17 != 1)
      {
LABEL_28:
        v61 = v17;
        swift_bridgeObjectRetain();
        sub_20E6EA904();
        __break(1u);
        return;
      }
      v23 = &selRef_encodeGetAssertionCTAPCommandForAuthenticatorWithUserVerificationAvailability_authenticatorSupportedExtensions_;
    }
    else
    {
      v23 = &selRef_encodeMakeCredentialCTAPCommandForAuthenticatorWithUserVerificationAvailability_authenticatorSupportedExtensions_;
    }
    v58 = v20;
    swift_bridgeObjectRetain();
    v26 = (void *)sub_20E6EA334();
    swift_bridgeObjectRelease();
    v27 = objc_msgSend(v59, *v23, v22, v26);

    v28 = objc_msgSend(v27, sel_first);
    v29 = sub_20E6E9C80();
    v17 = v30;

    v31 = (uint64_t *)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_clientDataJSON);
    v32 = *(_QWORD *)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_clientDataJSON);
    v33 = *(_QWORD *)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_clientDataJSON + 8);
    *v31 = v29;
    v31[1] = v17;
    sub_20E66AA28(v32, v33);
    v57 = v27;
    v34 = objc_msgSend(v27, sel_second);
    if (v34)
    {
      v35 = v34;
      v36 = sub_20E6E9C80();
      v38 = v37;

      v39 = *(_BYTE *)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentState);
      *(_BYTE *)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentState) = 7;
      sub_20E67D6DC(v39);
      objc_msgSend(v59, sel_cableClientWillAuthenticate_, v1);
      sub_20E66A990(v36, v38);
      sub_20E66A990(v36, v38);
      v40 = sub_20E677310((uint64_t)&unk_24C980040);
      v42 = v41;
      v61 = v40;
      v62 = v41;
      sub_20E66A990(v36, v38);
      sub_20E66A990(v40, v42);
      sub_20E676D00(v36, v38);
      sub_20E6673F4(v36, v38);
      sub_20E6673F4(v40, v42);
      v56 = v38;
      sub_20E6673F4(v36, v38);
      v43 = v61;
      v17 = v62;
      sub_20E688688(v61, v62);
      v54 = v44;
      v63 = v44;
      v55 = v45;
      v64 = v45;
      v46 = v58 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseTransportCipher;
      swift_beginAccess();
      v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DFA0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v46, 1, v47) != 1)
      {
        sub_20E6774A8();
        v48 = sub_20E6E9F8C();
        v50 = v49;
        swift_endAccess();
        sub_20E6673F4(v43, v17);
        sub_20E6673F4(v54, v55);
        v51 = v56;
        sub_20E6673F4(v36, v56);
        v52 = v60;
        *v5 = v48;
        v5[1] = v50;
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDD00C0], v2);
        *(_QWORD *)(swift_allocObject() + 16) = v52;
        v53 = v52;
        sub_20E66A990(v48, v50);
        sub_20E6EA424();
        swift_release();
        (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);

        sub_20E6673F4(v36, v51);
        sub_20E6673F4(v48, v50);
        swift_unknownObjectRelease();
        sub_20E683A84(v65);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_28;
  }
  if (qword_254A2DBE8 != -1)
    swift_once();
  v13 = sub_20E6E9F50();
  __swift_project_value_buffer(v13, (uint64_t)qword_254A3ED50);
  v14 = sub_20E6E9F38();
  v15 = sub_20E6EA3E8();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_20E648000, v14, v15, "Unexpectedly received posthandshake message without a valid websocket.", v16, 2u);
    MEMORY[0x212BC3A38](v16, -1, -1);
  }

  sub_20E681C44();
}

void sub_20E67F4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;

  v3 = sub_20E686BD4(a1, a2, 1);
  v5 = v3;
  v6 = v4;
  v7 = (v4 >> 60) & 3;
  if (!(_DWORD)v7)
  {
    v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_clientDataJSON + 8);
    if (v12 >> 60 == 15
      || (*(_BYTE *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentOperationType + 8) & 1) != 0)
    {
      sub_20E66A990(v3, v4);
      if (qword_254A2DBE8 != -1)
        swift_once();
      v13 = sub_20E6E9F50();
      __swift_project_value_buffer(v13, (uint64_t)qword_254A3ED50);
      v14 = sub_20E6E9F38();
      v15 = sub_20E6EA3E8();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_20E648000, v14, v15, "Missing clientDataJSON or current operation type", v16, 2u);
        MEMORY[0x212BC3A38](v16, -1, -1);
      }

      sub_20E681C44();
      sub_20E67BA54(v5, v6);
    }
    else
    {
      v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_clientDataJSON);
      v22 = *(_QWORD *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentOperationType);
      sub_20E683A68(v3, v4);
      sub_20E66A9D4(v21, v12);
      sub_20E67FCDC(v5, v6, v21, v12, v22);
      sub_20E67BA54(v5, v6);
      sub_20E66AA28(v21, v12);
    }
    goto LABEL_21;
  }
  if ((_DWORD)v7 == 1)
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v8 = sub_20E6E9F50();
    __swift_project_value_buffer(v8, (uint64_t)qword_254A3ED50);
    v9 = sub_20E6E9F38();
    v10 = sub_20E6EA400();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_20E648000, v9, v10, "Received unsupported caBLE update message. Dropping.", v11, 2u);
      MEMORY[0x212BC3A38](v11, -1, -1);
    }

LABEL_21:
    sub_20E67BA54(v5, v6);
    return;
  }
  if (qword_254A2DBE8 != -1)
    swift_once();
  v17 = sub_20E6E9F50();
  __swift_project_value_buffer(v17, (uint64_t)qword_254A3ED50);
  v18 = sub_20E6E9F38();
  v19 = sub_20E6EA3E8();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_20E648000, v18, v19, "Unexpectedly received shutdown from authenticator.", v20, 2u);
    MEMORY[0x212BC3A38](v20, -1, -1);
  }

  sub_20E681C44();
}

void sub_20E67F9F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v1 = v0;
  v2 = sub_20E6EA430();
  v22 = *(_QWORD *)(v2 - 8);
  v23 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v4 = (uint64_t *)((char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_cryptographyManager);
  v6 = sub_20E677310((uint64_t)&unk_24C980068);
  v8 = v7;
  sub_20E688688(v6, v7);
  v10 = v9;
  v12 = v11;
  v24 = v9;
  v25 = v11;
  v13 = v5 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseTransportCipher;
  swift_beginAccess();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DFA0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14) == 1)
  {
    __break(1u);
  }
  else
  {
    sub_20E6774A8();
    v15 = sub_20E6E9F8C();
    v17 = v16;
    swift_endAccess();
    sub_20E6673F4(v6, v8);
    sub_20E6673F4(v10, v12);
    v18 = *(void **)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_webSocket);
    if (v18)
    {
      *v4 = v15;
      v4[1] = v17;
      v20 = v22;
      v19 = v23;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v22 + 104))(v4, *MEMORY[0x24BDD00C0], v23);
      *(_QWORD *)(swift_allocObject() + 16) = v18;
      v21 = v18;
      sub_20E66A990(v15, v17);
      sub_20E6EA424();
      swift_release();
      (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(v4, v19);
      sub_20E6673F4(v15, v17);

    }
    else
    {
      sub_20E6673F4(v15, v17);
    }
  }
}

void sub_20E67FCDC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  __int16 v23;
  __int16 v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  __int128 v31;
  unint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __CFString *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  __CFString *v55;
  id v56;
  id v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[25];
  __int128 v86;
  _BYTE v87[160];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _BYTE v91[25];
  __int128 v92;
  _BYTE v93[152];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  char v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  _OWORD v114[3];

  v6 = v5;
  if (!*(_QWORD *)(v5 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentRelyingPartyIdentifier + 8))
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v14 = sub_20E6E9F50();
    __swift_project_value_buffer(v14, (uint64_t)qword_254A3ED50);
    v15 = sub_20E6E9F38();
    v16 = sub_20E6EA3E8();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_20E648000, v15, v16, "Unexpectedly received authenticator response without a relying party identifier.", v17, 2u);
      MEMORY[0x212BC3A38](v17, -1, -1);
    }

    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  sub_20E66A990(a1, a2);
  sub_20E68458C(a1, a2);
  v13 = v12;
  sub_20E6673F4(a1, a2);
  if ((v13 & 0x100) == 0 && sub_20E6BD190(v13) == 3)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    sub_20E681C44();
    return;
  }
  if (a5 == 1)
  {
    v64 = a3;
    sub_20E66A990(a1, a2);
    sub_20E66A990(a1, a2);
    sub_20E66A990(a1, a2);
    sub_20E687B84(1, a1, a2);
    sub_20E6E9D40();
    swift_allocObject();
    sub_20E6E9D34();
    sub_20E683680();
    sub_20E6E9D1C();
    sub_20E6673F4(v70, v72);
    swift_release();
    v59 = *(_QWORD *)&v93[96];
    v61 = *(_QWORD *)&v93[88];
    v92 = *(_OWORD *)&v93[120];
    sub_20E66A990(a1, a2);
    sub_20E68458C(a1, a2);
    a5 = v18;
    sub_20E6673F4(a1, a2);
    if ((a5 & 0x100) == 0)
    {
      sub_20E6673F4(a1, a2);
      v51 = a5;
      LOBYTE(v86) = a5;
      *((_QWORD *)&v86 + 1) = a1;
      *(_QWORD *)v87 = a2;
      *(_QWORD *)&v87[8] = *(_QWORD *)v93;
      *(_OWORD *)&v87[16] = *(_OWORD *)&v93[8];
      v53 = *(_QWORD *)&v93[16];
      *(_OWORD *)&v87[32] = *(_OWORD *)&v93[24];
      *(_OWORD *)&v87[48] = *(_OWORD *)&v93[40];
      *(_OWORD *)&v87[64] = *(_OWORD *)&v93[56];
      *(_OWORD *)&v87[80] = *(_OWORD *)&v93[72];
      *(_OWORD *)&v87[96] = *(_OWORD *)&v93[88];
      *(_OWORD *)&v87[112] = *(_OWORD *)&v93[104];
      *(_OWORD *)&v87[128] = v92;
      *(_OWORD *)&v87[144] = *(_OWORD *)&v93[136];
      v88 = v94;
      v89 = v95;
      v90 = v96;
      *(_OWORD *)v91 = v97;
      *(_QWORD *)&v91[16] = v98;
      v91[24] = v99;
      v111 = v94;
      v110 = *(_OWORD *)&v93[136];
      v109 = v92;
      v108 = *(_OWORD *)&v93[104];
      v103 = *(_OWORD *)&v93[24];
      v102 = *(_OWORD *)&v93[8];
      v101 = *(_OWORD *)v87;
      v100 = v86;
      v107 = *(_OWORD *)&v93[88];
      v106 = *(_OWORD *)&v93[72];
      v105 = *(_OWORD *)&v93[56];
      v104 = *(_OWORD *)&v93[40];
      *(_OWORD *)((char *)v114 + 9) = *(_OWORD *)&v91[9];
      v114[0] = v97;
      v113 = v96;
      v112 = v95;
      if ((sub_20E680C50() - 1) >= 7u)
      {
        v52 = *(_QWORD *)&v93[24];
        if (*(_QWORD *)&v93[80])
        {
          sub_20E66A990(*(uint64_t *)&v93[88], *(unint64_t *)&v93[96]);
        }
        else
        {
          v59 = 0xC000000000000000;
          v61 = 0;
        }
        if (*(_QWORD *)&v93[8])
        {
          sub_20E66A990(*(uint64_t *)&v93[16], *(unint64_t *)&v93[24]);
        }
        else
        {
          v53 = 0;
          v52 = 0xC000000000000000;
        }
        if (v99 == 3)
        {
          sub_20E66A990(*(uint64_t *)&v93[40], *(unint64_t *)&v93[48]);
          sub_20E66A990(*(uint64_t *)&v93[56], *(unint64_t *)&v93[64]);
          v67 = 0;
        }
        else
        {
          v78 = *(_OWORD *)&v93[136];
          v79 = v94;
          *(_QWORD *)&v80 = v95;
          BYTE8(v80) = BYTE8(v95);
          v81 = v96;
          v82 = v97;
          *(_QWORD *)&v83 = v98;
          BYTE8(v83) = v99;
          sub_20E66A990(*(uint64_t *)&v93[40], *(unint64_t *)&v93[48]);
          sub_20E66A990(*(uint64_t *)&v93[56], *(unint64_t *)&v93[64]);
          v67 = sub_20E6A6620();
        }
        v56 = objc_allocWithZone((Class)ASCPlatformPublicKeyCredentialAssertion);
        sub_20E66A990(a3, a4);
        v32 = a4;
        v55 = CFSTR("cross-platform");
        v54 = (void *)sub_20E6EA1C0();
        swift_bridgeObjectRelease();
        v33 = (void *)sub_20E6E9C68();
        v34 = (void *)sub_20E6E9C68();
        v35 = (void *)sub_20E6E9C68();
        v36 = (void *)sub_20E6E9C68();
        sub_20E6673F4(v64, v32);
        v68 = (void *)sub_20E6E9C68();
        LOBYTE(v50) = 0;
        v37 = objc_msgSend(v56, sel_initWithRelyingPartyIdentifier_authenticatorData_signature_userHandle_rawClientDataJSON_credentialID_extensions_attachment_isExternal_, v54, v33, v34, v35, v36, v68, v67, v55, v50);

        sub_20E6673F4(v53, v52);
        sub_20E6673F4(v61, v59);
        sub_20E6673F4(*(uint64_t *)&v93[56], *(unint64_t *)&v93[64]);
        sub_20E6673F4(*(uint64_t *)&v93[40], *(unint64_t *)&v93[48]);

        sub_20E6815E4((uint64_t)v37, v6);
      }
      else
      {
        swift_bridgeObjectRelease();
        if (qword_254A2DBE8 != -1)
          swift_once();
        v19 = sub_20E6E9F50();
        __swift_project_value_buffer(v19, (uint64_t)qword_254A3ED50);
        sub_20E6836C4((uint64_t)&v86);
        v20 = sub_20E6E9F38();
        v21 = sub_20E6EA3E8();
        if (os_log_type_enabled(v20, v21))
        {
          v22 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v22 = 16777472;
          LOBYTE(v78) = v51;
          sub_20E6EA4C0();
          sub_20E678360((uint64_t)&v86);
          _os_log_impl(&dword_20E648000, v20, v21, "Received error from authenticator: %hhu", v22, 5u);
          MEMORY[0x212BC3A38](v22, -1, -1);
        }
        else
        {
          sub_20E678360((uint64_t)&v86);
        }

        sub_20E681C44();
      }
      sub_20E678360((uint64_t)&v86);
      return;
    }
    __break(1u);
    goto LABEL_51;
  }
  if (a5)
  {
LABEL_52:
    *(_QWORD *)&v100 = a5;
    sub_20E6EA904();
    __break(1u);
    return;
  }
  sub_20E66A990(a1, a2);
  sub_20E66A990(a1, a2);
  sub_20E66A990(a1, a2);
  sub_20E687B84(1, a1, a2);
  sub_20E6B940C(v92, *((unint64_t *)&v92 + 1), (uint64_t)v93);
  v65 = a3;
  v66 = a4;
  v84 = *(_OWORD *)&v93[96];
  *(_OWORD *)v85 = *(_OWORD *)&v93[112];
  *(_OWORD *)&v85[9] = *(_OWORD *)&v93[121];
  v80 = *(_OWORD *)&v93[32];
  v81 = *(_OWORD *)&v93[48];
  v82 = *(_OWORD *)&v93[64];
  v83 = *(_OWORD *)&v93[80];
  v78 = *(_OWORD *)v93;
  v79 = *(_OWORD *)&v93[16];
  sub_20E66A990(a1, a2);
  sub_20E68458C(a1, a2);
  v24 = v23;
  sub_20E6673F4(a1, a2);
  if ((v24 & 0x100) != 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  sub_20E6673F4(a1, a2);
  *(_OWORD *)&v87[104] = *(_OWORD *)&v93[96];
  *(_OWORD *)&v87[88] = *(_OWORD *)&v93[80];
  *(_OWORD *)&v87[40] = *(_OWORD *)&v93[32];
  *(_OWORD *)&v87[24] = *(_OWORD *)&v93[16];
  *(_OWORD *)&v87[120] = *(_OWORD *)&v93[112];
  *(_OWORD *)&v87[129] = *(_OWORD *)&v93[121];
  *(_OWORD *)&v87[56] = *(_OWORD *)&v93[48];
  LOBYTE(v86) = v24;
  *((_QWORD *)&v86 + 1) = a1;
  *(_QWORD *)v87 = a2;
  *(_OWORD *)&v87[72] = *(_OWORD *)&v93[64];
  *(_OWORD *)&v87[8] = *(_OWORD *)v93;
  v108 = *(_OWORD *)&v87[112];
  v109 = *(_OWORD *)&v87[128];
  LOBYTE(v110) = v93[136];
  v104 = *(_OWORD *)&v87[48];
  v105 = *(_OWORD *)&v87[64];
  v107 = *(_OWORD *)&v87[96];
  v106 = *(_OWORD *)&v87[80];
  v100 = v86;
  v101 = *(_OWORD *)v87;
  v103 = *(_OWORD *)&v87[32];
  v102 = *(_OWORD *)&v87[16];
  if ((sub_20E680BEC() - 1) >= 7u)
  {
    v74 = v80;
    v75 = v81;
    v76 = v82;
    v77 = v83;
    v71 = v78;
    v73 = *((_QWORD *)&v79 + 1);
    sub_20E6B8D40();
    v62 = v30;
    v63 = v29;
    v31 = v79;
    sub_20E677530((uint64_t)&v78);
    sub_20E66A990(v31, *((unint64_t *)&v31 + 1));
    ASCTAPAuthData.init(data:)(v31, *((uint64_t *)&v31 + 1));
    v38 = *((_QWORD *)&v74 + 1);
    v39 = v75;
    if ((unint64_t)v74 >> 60 == 15)
    {
      sub_20E6673F4(v71, *((unint64_t *)&v71 + 1));
      sub_20E6839EC(v73, v74, *((uint64_t *)&v74 + 1), v75, *((uint64_t *)&v75 + 1), v76);
      sub_20E66AA28(*((uint64_t *)&v76 + 1), v77);
      sub_20E683908((uint64_t)&v78);
      v38 = 0;
      v39 = 0xC000000000000000;
    }
    else
    {
      sub_20E66A990(*((uint64_t *)&v74 + 1), v75);
      sub_20E6673F4(v71, *((unint64_t *)&v71 + 1));
      sub_20E6839EC(v73, v74, *((uint64_t *)&v74 + 1), v75, *((uint64_t *)&v75 + 1), v76);
      sub_20E66AA28(*((uint64_t *)&v76 + 1), v77);
      sub_20E683908((uint64_t)&v78);
    }
    v60 = v39;
    v40 = v38;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E340);
    v41 = swift_allocObject();
    *(_OWORD *)(v41 + 16) = xmmword_20E6EEDE0;
    sub_20E67BE44(0, &qword_254A2E120);
    *(_QWORD *)(v41 + 32) = sub_20E6EA454();
    *(_QWORD *)(v41 + 40) = sub_20E6EA454();
    sub_20E6EA34C();
    v42 = 0;
    if (v85[24] != 3)
      v42 = sub_20E6A64B4();
    v58 = v42;
    v57 = objc_allocWithZone((Class)ASCPlatformPublicKeyCredentialRegistration);
    v43 = CFSTR("cross-platform");
    sub_20E66A990(a3, v66);
    v44 = (void *)sub_20E6EA1C0();
    swift_bridgeObjectRelease();
    v69 = (void *)sub_20E6E9C68();
    v45 = (void *)sub_20E6E9C68();
    sub_20E6673F4(v65, v66);
    v46 = (void *)sub_20E6E9C68();
    v47 = (void *)sub_20E6EA334();
    swift_bridgeObjectRelease();
    LOBYTE(v49) = 0;
    v48 = objc_msgSend(v57, sel_initWithRelyingPartyIdentifier_attestationObject_rawClientDataJSON_credentialID_transports_extensions_attachment_isExternal_, v44, v69, v45, v46, v47, v58, v43, v49);

    sub_20E6673F4(v40, v60);
    sub_20E6673F4(v63, v62);

    sub_20E6815E4((uint64_t)v48, v6);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_254A2DBE8 != -1)
      swift_once();
    v25 = sub_20E6E9F50();
    __swift_project_value_buffer(v25, (uint64_t)qword_254A3ED50);
    sub_20E683814((uint64_t)&v86);
    v26 = sub_20E6E9F38();
    v27 = sub_20E6EA3E8();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v28 = 16777472;
      sub_20E6EA4C0();
      sub_20E677880((uint64_t)&v86);
      _os_log_impl(&dword_20E648000, v26, v27, "Received error from authenticator: %hhu", v28, 5u);
      MEMORY[0x212BC3A38](v28, -1, -1);
    }
    else
    {
      sub_20E677880((uint64_t)&v86);
    }

    sub_20E681C44();
  }
  sub_20E677880((uint64_t)&v86);
}

uint64_t sub_20E680BEC()
{
  _BYTE *v0;
  uint64_t result;

  result = *v0;
  switch(*v0)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
      goto LABEL_5;
    case 5:
      result = 2;
      break;
    case 0x19:
      result = 3;
      break;
    case 0x22:
      result = 4;
      break;
    case 0x2F:
      result = 5;
      break;
    default:
      if ((_DWORD)result == 127)
        result = 6;
      else
LABEL_5:
        result = 7;
      break;
  }
  return result;
}

uint64_t sub_20E680C50()
{
  _BYTE *v0;
  uint64_t result;

  result = *v0;
  switch(*v0)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
      goto LABEL_5;
    case 5:
      result = 2;
      break;
    case 0x19:
      result = 3;
      break;
    case 0x22:
      result = 4;
      break;
    case 0x2F:
      result = 5;
      break;
    default:
      if ((_DWORD)result == 127)
        result = 6;
      else
LABEL_5:
        result = 7;
      break;
  }
  return result;
}

uint64_t sub_20E680CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v13 = a2;
  v12 = sub_20E6E9A04();
  v3 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E6E99F8();
  sub_20E6E99EC();
  type metadata accessor for ASCABLEAdvertisement();
  sub_20E6E9B54();
  sub_20E6E99D4();
  v16 = 0;
  v17 = 0xE000000000000000;
  sub_20E6EA610();
  swift_bridgeObjectRelease();
  v16 = 0x632F656C6261632FLL;
  v17 = 0xEF2F7463656E6E6FLL;
  sub_20E6DE828(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v14 = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
  sub_20E683634();
  sub_20E6EA184();
  swift_bridgeObjectRelease();
  sub_20E6EA280();
  swift_bridgeObjectRelease();
  sub_20E6EA280();
  sub_20E6EA070();
  v7 = v14;
  v8 = v15;
  sub_20E6DE828(v14, v15);
  v14 = v9;
  sub_20E6EA184();
  swift_bridgeObjectRelease();
  sub_20E6673F4(v7, v8);
  sub_20E6EA280();
  swift_bridgeObjectRelease();
  sub_20E6E99E0();
  sub_20E6E99C8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v12);
}

void sub_20E680EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E330);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_powerLogger), sel_logAuthenticationFinishedEventIfNeeded);
  v5 = *(_BYTE *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentState);
  *(_BYTE *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentState) = 0;
  sub_20E67D6DC(v5);
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_bluetoothManager), sel_stopScan);
  v6 = (_QWORD *)(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentRelyingPartyIdentifier);
  *v6 = 0;
  v6[1] = 0;
  swift_bridgeObjectRelease();
  v7 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentOperationType;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 8) = 1;
  v8 = type metadata accessor for ASCABLEAdvertisement();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
  v9 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_authenticatorAdvertisement;
  swift_beginAccess();
  sub_20E67BAEC((uint64_t)v4, v9);
  swift_endAccess();
  v10 = (_QWORD *)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_completionHandler);
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_completionHandler);
  *v10 = 0;
  v10[1] = 0;
  sub_20E67BADC(v11);
  v12 = OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_webSocket;
  v13 = *(void **)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_webSocket);
  if (v13)
  {
    v14 = qword_254A2DBF8;
    v15 = v13;
    if (v14 != -1)
      swift_once();
    v16 = sub_20E6E9F50();
    __swift_project_value_buffer(v16, (uint64_t)qword_254A3ED68);
    v17 = sub_20E6E9F38();
    v18 = sub_20E6EA400();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_20E648000, v17, v18, "Asked to close socket", v19, 2u);
      MEMORY[0x212BC3A38](v19, -1, -1);
    }

    v15[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_isConnected] = 0;
    objc_msgSend(*(id *)&v15[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_webSocketTask], sel_cancelWithCloseCode_reason_, 1000, 0);

    v13 = *(void **)(v1 + v12);
  }
  *(_QWORD *)(v1 + v12) = 0;

}

id ASCABLEClient.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ASCABLEClient.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ASCABLEClient.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASCABLEClient();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_20E6812E8()
{
  sub_20E683BD0();
}

void sub_20E6812F4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_20E6840B8(a2, a3);
}

void sub_20E681300(uint64_t a1, void *a2)
{
  sub_20E68426C(a2);
}

unint64_t sub_20E681308(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE20);
  v2 = sub_20E6EA76C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_20E67BCC0(v6, (uint64_t)&v15, &qword_254A2E370);
    v7 = v15;
    v8 = v16;
    result = sub_20E68143C(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_20E684528(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20E68143C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_20E6EA988();
  sub_20E6EA250();
  v4 = sub_20E6EA9A0();
  return sub_20E6814A0(a1, a2, v4);
}

unint64_t sub_20E6814A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v15;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_20E6EA8EC() & 1) == 0)
    {
      v12 = ~v5;
      i = (i + 1) & v12;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v13 = (_QWORD *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_20E6EA8EC() & 1) == 0)
        {
          for (i = (i + 1) & v12; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v12)
          {
            v15 = (_QWORD *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2)
              break;
            if ((sub_20E6EA8EC() & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

void sub_20E6815E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(uint64_t, _QWORD);
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  if (qword_254A2DBE8 != -1)
    swift_once();
  v4 = sub_20E6E9F50();
  __swift_project_value_buffer(v4, (uint64_t)qword_254A3ED50);
  v5 = sub_20E6E9F38();
  v6 = sub_20E6EA400();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_20E648000, v5, v6, "Transaction succeeded.", v7, 2u);
    MEMORY[0x212BC3A38](v7, -1, -1);
  }

  v8 = *(void (**)(uint64_t, _QWORD))(a2
                                              + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_completionHandler);
  if (v8)
  {
    swift_retain();
    v8(a1, 0);
    sub_20E67BADC((uint64_t)v8);
  }
  else
  {
    v9 = sub_20E6E9F38();
    v10 = sub_20E6EA3E8();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_20E648000, v9, v10, "Unexpectedly finished a transaction without a completion handler.", v11, 2u);
      MEMORY[0x212BC3A38](v11, -1, -1);
    }

  }
  sub_20E67F9F0();
  sub_20E680EE4();
}

unint64_t sub_20E681774(unint64_t result)
{
  if (result > 6)
    return 0;
  return result;
}

uint64_t type metadata accessor for ASCABLEClient()
{
  uint64_t result;

  result = qword_254A2E310;
  if (!qword_254A2E310)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_20E6817C0(char *a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  char *v28;
  double v29;
  double v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  id v39;
  uint64_t v40;
  objc_class *v41;
  id v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  int v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  objc_super v55;
  uint64_t v56;
  uint64_t v57;

  v48 = a5;
  v46 = a3;
  v47 = a4;
  v49 = a1;
  v7 = sub_20E6E9CEC();
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v50 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_20E6EA094();
  v53 = *(_QWORD *)(v9 - 8);
  v54 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_20E6EA100();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  v16 = &v5[OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentRelyingPartyIdentifier];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v17 = &v5[OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentOperationType];
  *(_QWORD *)v17 = 0;
  v17[8] = 1;
  *(_OWORD *)&v5[OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_clientDataJSON] = xmmword_20E6EE5B0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_webSocket] = 0;
  v18 = &v5[OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_authenticatorAdvertisement];
  v19 = type metadata accessor for ASCABLEAdvertisement();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = &v5[OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_completionHandler];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v21 = OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_powerLogger;
  v22 = objc_allocWithZone((Class)_ASCABLEPowerLogger);
  v23 = v5;
  *(_QWORD *)&v5[v21] = objc_msgSend(v22, sel_init);
  v24 = (uint64_t)&v23[OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_testDelegate];
  *(_QWORD *)(v24 + 32) = 0;
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  v23[OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentState] = 0;
  swift_unknownObjectWeakAssign();
  *(_QWORD *)&v23[OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_cryptographyManager] = a2;
  v44 = v13;
  v45 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_qrPublicKey, v12);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
  v49 = v11;
  v25(v11, a2 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_qrSymmetricKey, v54);
  v26 = qword_254A2DBA0;
  swift_retain();
  if (v26 != -1)
    swift_once();
  v27 = *(_QWORD *)(qword_254A3ECC0 + 16);
  if (v27 >= 0x100)
    goto LABEL_11;
  v28 = v50;
  sub_20E6E9CE0();
  sub_20E6E9CD4();
  v30 = v29;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v28, v52);
  if ((~*(_QWORD *)&v30 & 0x7FF0000000000000) != 0)
  {
    if (v30 > -9.22337204e18)
    {
      if (v30 < 9.22337204e18)
      {
        LODWORD(v52) = v48 & 1;
        v31 = v46;
        v51 = (uint64_t)v30;
        v32 = sub_20E6EA0E8();
        v34 = v33;
        v35 = v49;
        sub_20E6EA070();
        v37 = v56;
        v36 = v57;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v35, v54);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v45);
        v38 = &v23[OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_qrCodeStruct];
        *(_QWORD *)v38 = v32;
        *((_QWORD *)v38 + 1) = v34;
        *((_QWORD *)v38 + 2) = v37;
        *((_QWORD *)v38 + 3) = v36;
        v38[32] = v27;
        *((_QWORD *)v38 + 5) = v51;
        *((_WORD *)v38 + 24) = 0;
        v38[50] = v52;
        *(_QWORD *)&v23[OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_bluetoothManager] = v31;
        swift_beginAccess();
        v39 = v31;
        v40 = v47;
        sub_20E684538(v47, v24);
        swift_endAccess();

        v41 = (objc_class *)type metadata accessor for ASCABLEClient();
        v55.receiver = v23;
        v55.super_class = v41;
        v42 = objc_msgSendSuper2(&v55, sel_init);
        objc_msgSend(v39, sel_setDelegate_, v42);
        sub_20E67BD44(v40, &qword_254A2E350);
        return (uint64_t)v42;
      }
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_10:
  __break(1u);
LABEL_11:
  result = sub_20E6EA718();
  __break(1u);
  return result;
}

void sub_20E681C44()
{
  __asm { BR              X13 }
}

void sub_20E681CBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  void *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  void (*v17)(_QWORD, void *);
  id v18;
  void *v19;

  if (0x800000020E6F6FC0 == (v0 | 0x8000000000000000))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {
      if (qword_254A2DBE8 != -1)
        swift_once();
      v5 = sub_20E6E9F50();
      __swift_project_value_buffer(v5, (uint64_t)qword_254A3ED50);
      v6 = sub_20E6E9F38();
      v7 = sub_20E6EA3E8();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc();
        v9 = swift_slowAlloc();
        v19 = (void *)v9;
        *(_DWORD *)v8 = 136315138;
        v10 = sub_20E67BF20(v2, (void (*)(void))sub_20E683248);
        sub_20E66A2F8(v10, v11, (uint64_t *)&v19);
        sub_20E6EA4C0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_20E648000, v6, v7, "caBLE transaction failed: %s", v8, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x212BC3A38](v9, -1, -1);
        MEMORY[0x212BC3A38](v8, -1, -1);
      }

      v12 = *(_BYTE *)(v1 + v3);
      *(_BYTE *)(v1 + v3) = 8;
      sub_20E67D6DC(v12);
      switch(v2)
      {
        case 0:
        case 6:
          sub_20E683248();
          v13 = (void *)swift_allocError();
          *v14 = 0;
          goto LABEL_15;
        case 1:
          sub_20E683248();
          v13 = (void *)swift_allocError();
          v16 = 1;
          goto LABEL_13;
        case 2:
          sub_20E683248();
          v13 = (void *)swift_allocError();
          v16 = 2;
          goto LABEL_13;
        case 3:
          sub_20E683248();
          v13 = (void *)swift_allocError();
          v16 = 3;
LABEL_13:
          *v15 = v16;
          goto LABEL_15;
        case 4:
        case 5:
          type metadata accessor for ASCAuthorizationError(0);
          sub_20E681308(MEMORY[0x24BEE4AF8]);
          sub_20E67BD04(&qword_254A2DEF0, (uint64_t (*)(uint64_t))type metadata accessor for ASCAuthorizationError, (uint64_t)&unk_20E6EE3CC);
          sub_20E6E9B30();
          v13 = v19;
LABEL_15:
          v17 = *(void (**)(_QWORD, void *))(v1
                                                      + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_completionHandler);
          if (v17)
          {
            sub_20E67BA44(*(_QWORD *)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_completionHandler));
            v18 = v13;
            v17(0, v13);
            sub_20E67BADC((uint64_t)v17);

          }
          sub_20E680EE4();

          break;
        default:
          v19 = (void *)v2;
          sub_20E6EA904();
          __break(1u);
          break;
      }
    }
  }
}

uint64_t sub_20E6820CC()
{
  unint64_t v0;

  v0 = sub_20E6EA784();
  swift_bridgeObjectRelease();
  if (v0 >= 9)
    return 9;
  else
    return v0;
}

void sub_20E682114(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  Swift::String v10;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v13;

  if (qword_254A2DBE8 != -1)
    swift_once();
  v2 = sub_20E6E9F50();
  __swift_project_value_buffer(v2, (uint64_t)qword_254A3ED50);
  v3 = a1;
  v4 = a1;
  v5 = sub_20E6E9F38();
  v6 = sub_20E6EA3E8();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    if (a1)
    {
      swift_getErrorValue();
      v9 = a1;
      v10 = Error.loggerDescription()();
      countAndFlagsBits = v10._countAndFlagsBits;
      object = v10._object;

    }
    else
    {
      object = (void *)0xE500000000000000;
      countAndFlagsBits = 0x3E6C696E3CLL;
    }
    sub_20E66A2F8(countAndFlagsBits, (unint64_t)object, &v13);
    sub_20E6EA4C0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20E648000, v5, v6, "Unable to start BLE scanning: %s.", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v8, -1, -1);
    MEMORY[0x212BC3A38](v7, -1, -1);
  }
  else
  {

  }
  sub_20E681C44();
}

void sub_20E682318(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[30];

  v17[15] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  MEMORY[0x24BDAC7A8](v3);
  v17[12] = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_20E6E9BC0();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v17[10] = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v17[9] = (char *)v17 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E330);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v17[8] = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v17 - v13;
  v15 = type metadata accessor for ASCABLEAdvertisement();
  v17[13] = *(_QWORD *)(v15 - 8);
  v17[14] = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17[7] = OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentState;
  v16 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_currentState);
  v17[11] = v14;
  __asm { BR              X10 }
}

void sub_20E6824D8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  _QWORD *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  id v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  const char *v36;
  id v37;
  unint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t);
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t *boxed_opaque_existential_1;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  unint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  char *v90;
  uint64_t (*v91)(uint64_t, uint64_t);
  uint64_t (**v92)(uint64_t, uint64_t);
  uint64_t v93;

  v7 = sub_20E6EA8EC();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v8 = sub_20E6E9F50();
    v9 = __swift_project_value_buffer(v8, (uint64_t)qword_254A3ED50);
    v10 = v0;
    v11 = sub_20E6E9F38();
    v12 = sub_20E6EA3DC();
    v13 = os_log_type_enabled(v11, v12);
    *(_QWORD *)(v6 - 280) = v5;
    if (v13)
    {
      *(_QWORD *)(v6 - 272) = v9;
      v14 = swift_slowAlloc();
      *(_QWORD *)(v6 - 288) = v1;
      *(_QWORD *)(v6 - 296) = v4;
      v15 = (uint8_t *)v14;
      v16 = swift_slowAlloc();
      *(_QWORD *)(v6 - 304) = v3;
      v17 = (_QWORD *)v16;
      *(_DWORD *)v15 = 138412290;
      *(_QWORD *)(v6 - 128) = v10;
      v18 = v10;
      sub_20E6EA4C0();
      *v17 = v10;

      v9 = *(_QWORD *)(v6 - 272);
      _os_log_impl(&dword_20E648000, v11, v12, "Central manager discovered peripheral: %@", v15, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F160);
      swift_arrayDestroy();
      v19 = v17;
      v3 = *(_QWORD *)(v6 - 304);
      MEMORY[0x212BC3A38](v19, -1, -1);
      v20 = v15;
      v4 = *(_QWORD *)(v6 - 296);
      v1 = *(_QWORD *)(v6 - 288);
      MEMORY[0x212BC3A38](v20, -1, -1);

    }
    else
    {

    }
    v21 = *(_QWORD *)(v6 - 200);
    v22 = sub_20E6EA1CC();
    if (*(_QWORD *)(v21 + 16) && (v24 = sub_20E698CCC(v22, v23), (v25 & 1) != 0))
    {
      sub_20E66C394(*(_QWORD *)(v21 + 56) + 32 * v24, v6 - 128);
    }
    else
    {
      *(_OWORD *)(v6 - 128) = 0u;
      *(_OWORD *)(v6 - 112) = 0u;
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v6 - 104))
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E360);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v26 = *(_QWORD *)(v6 - 168);
        if (qword_254A2DBC8 == -1)
        {
          if (!*(_QWORD *)(v26 + 16))
            goto LABEL_24;
        }
        else
        {
          swift_once();
          if (!*(_QWORD *)(v26 + 16))
            goto LABEL_24;
        }
        v27 = (id)qword_254A3ED00;
        v28 = sub_20E699A7C((uint64_t)v27);
        if ((v29 & 1) != 0)
        {
          v30 = (uint64_t *)(*(_QWORD *)(v26 + 56) + 16 * v28);
          v32 = *v30;
          v31 = v30[1];
          sub_20E66A990(*v30, v31);
          swift_bridgeObjectRelease();

LABEL_28:
          v41 = *(_QWORD *)(v6 - 232);
          sub_20E684E38(v32, v31);
          v42 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v6 - 216) + 48))(v41, 1, *(_QWORD *)(v6 - 208));
          v43 = *(_QWORD *)(v6 - 224);
          if (v42 != 1)
          {
            *(_QWORD *)(v6 - 272) = v9;
            sub_20E683B08(v41, v1);
            sub_20E680CB4(v1, v43);
            v46 = *(_QWORD *)(v6 - 280);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v43, 1, v3) == 1)
            {
              sub_20E67BD44(v43, &qword_253E8D1D0);
              v47 = sub_20E6E9F38();
              v48 = sub_20E6EA3E8();
              if (os_log_type_enabled(v47, v48))
              {
                v49 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v49 = 0;
                _os_log_impl(&dword_20E648000, v47, v48, "Could not get URL from advertisement.", v49, 2u);
                MEMORY[0x212BC3A38](v49, -1, -1);
              }

              sub_20E681C44();
              sub_20E66AA28(v32, v31);
            }
            else
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v2, v43, v3);
              v50 = MEMORY[0x212BC3AEC](v4 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_delegate);
              if (v50)
              {
                v51 = (void *)v50;
                objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_bluetoothManager), sel_stopScan);
                v52 = *(_QWORD *)(v6 - 264);
                v53 = *(_BYTE *)(v4 + v52);
                *(_BYTE *)(v4 + v52) = 4;
                sub_20E67D6DC(v53);
                *(_QWORD *)(v6 - 288) = v1;
                v54 = *(_QWORD *)(v6 - 256);
                sub_20E684448(v1, v54);
                (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v6 - 216) + 56))(v54, 0, 1, *(_QWORD *)(v6 - 208));
                v55 = v4 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_authenticatorAdvertisement;
                swift_beginAccess();
                sub_20E67BAEC(v54, v55);
                swift_endAccess();
                objc_msgSend(v51, sel_cableClientWillConnect_, v4);
                v56 = v2;
                v57 = *(void (**)(uint64_t))(v46 + 16);
                v58 = *(_QWORD *)(v6 - 248);
                *(_QWORD *)(v6 - 200) = v56;
                v57(v58);
                v59 = objc_msgSend((id)objc_opt_self(), sel_ephemeralSessionConfiguration);
                v60 = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_, v59);

                v61 = v4 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_testDelegate;
                swift_beginAccess();
                sub_20E67BCC0(v61, v6 - 168, &qword_254A2E350);
                v62 = *(_QWORD *)(v6 - 144);
                *(_QWORD *)(v6 - 304) = v31;
                *(_QWORD *)(v6 - 312) = v32;
                if (v62)
                {
                  v63 = *(_QWORD *)(v6 - 136);
                  v64 = __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v6 - 168), v62);
                  *(_QWORD *)(v6 - 104) = v62;
                  *(_QWORD *)(v6 - 96) = *(_QWORD *)(v63 + 8);
                  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 - 128));
                  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(boxed_opaque_existential_1, v64, v62);
                  __swift_destroy_boxed_opaque_existential_1Tm(v6 - 168);
                }
                else
                {
                  sub_20E67BD44(v6 - 168, &qword_254A2E350);
                  *(_OWORD *)(v6 - 128) = 0u;
                  *(_OWORD *)(v6 - 112) = 0u;
                  *(_QWORD *)(v6 - 96) = 0;
                }
                v69 = sub_20E6A5760(MEMORY[0x24BEE4AF8]);
                v70 = objc_allocWithZone((Class)type metadata accessor for ASWebSocket());
                v71 = sub_20E6C863C(v58, (uint64_t)&unk_24C97FFE8, v69, v60, 0, 0, v6 - 128);

                v72 = OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_webSocket;
                v73 = *(void **)(v4 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_webSocket);
                *(_QWORD *)(v4 + OBJC_IVAR____TtC26AuthenticationServicesCore13ASCABLEClient_webSocket) = v71;

                v74 = *(_QWORD *)(v4 + v72);
                if (v74)
                {
                  *(_QWORD *)(v74 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_delegate + 8) = &off_24C980FA8;
                  swift_unknownObjectWeakAssign();
                  v75 = *(_QWORD *)(v6 - 240);
                  ((void (*)(uint64_t, _QWORD, uint64_t))v57)(v75, *(_QWORD *)(v6 - 200), v3);
                  v76 = sub_20E6E9F38();
                  v77 = v3;
                  v78 = sub_20E6EA400();
                  if (os_log_type_enabled(v76, v78))
                  {
                    v79 = (uint8_t *)swift_slowAlloc();
                    v80 = swift_slowAlloc();
                    *(_QWORD *)(v6 - 296) = v4;
                    v81 = v80;
                    *(_QWORD *)(v6 - 128) = v80;
                    *(_DWORD *)v79 = 136315138;
                    *(_QWORD *)(v6 - 208) = v79 + 4;
                    sub_20E67BD04(&qword_254A2E138, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
                    v82 = sub_20E6EA8B0();
                    *(_QWORD *)(v6 - 168) = sub_20E66A2F8(v82, v83, (uint64_t *)(v6 - 128));
                    sub_20E6EA4C0();
                    swift_bridgeObjectRelease();
                    v84 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 280) + 8);
                    v84(v75, v77);
                    _os_log_impl(&dword_20E648000, v76, v78, "Connecting to relay at %s", v79, 0xCu);
                    swift_arrayDestroy();
                    v85 = v81;
                    v4 = *(_QWORD *)(v6 - 296);
                    MEMORY[0x212BC3A38](v85, -1, -1);
                    MEMORY[0x212BC3A38](v79, -1, -1);
                  }
                  else
                  {
                    v84 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 280) + 8);
                    v84(v75, v77);
                  }

                  v86 = *(char **)(v4 + v72);
                  v87 = *(_QWORD *)(v6 - 200);
                  if (v86)
                  {
                    v88 = swift_allocObject();
                    swift_unknownObjectWeakInit();
                    v89 = *(void **)&v86[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_webSocketTask];
                    v90 = v86;
                    swift_retain();
                    objc_msgSend(v89, sel_resume);
                    v91 = (uint64_t (*)(uint64_t, uint64_t))swift_allocObject();
                    *((_QWORD *)v91 + 2) = v90;
                    *((_QWORD *)v91 + 3) = sub_20E6844B0;
                    *((_QWORD *)v91 + 4) = v88;
                    v92 = (uint64_t (**)(uint64_t, uint64_t))&v90[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_connectionCompletionHandler];
                    v93 = *(_QWORD *)&v90[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_connectionCompletionHandler];
                    *v92 = sub_20E67BAD0;
                    v92[1] = v91;
                    sub_20E67BADC(v93);
                    sub_20E66AA28(*(_QWORD *)(v6 - 312), *(_QWORD *)(v6 - 304));
                    swift_unknownObjectRelease();
                    v84(v87, v77);
                    sub_20E683B4C(*(_QWORD *)(v6 - 288));
                    swift_release();
                    return;
                  }
                }
                else
                {
                  __break(1u);
                }
                __break(1u);
                JUMPOUT(0x20E683100);
              }
              v66 = sub_20E6E9F38();
              v67 = sub_20E6EA3E8();
              if (os_log_type_enabled(v66, v67))
              {
                v68 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v68 = 0;
                _os_log_impl(&dword_20E648000, v66, v67, "Delegate no longer exists.", v68, 2u);
                MEMORY[0x212BC3A38](v68, -1, -1);
              }

              sub_20E681C44();
              sub_20E66AA28(v32, v31);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 280) + 8))(v2, v3);
            }
            sub_20E683B4C(v1);
            return;
          }
          sub_20E67BD44(v41, &qword_254A2E330);
          v33 = sub_20E6E9F38();
          v44 = sub_20E6EA400();
          if (os_log_type_enabled(v33, v44))
          {
            v45 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v45 = 0;
            _os_log_impl(&dword_20E648000, v33, v44, "Could not decrypt caBLE advertisement.", v45, 2u);
            MEMORY[0x212BC3A38](v45, -1, -1);
          }
          sub_20E66AA28(v32, v31);
          goto LABEL_21;
        }

LABEL_24:
        if (qword_254A2DBC0 == -1)
        {
          if (*(_QWORD *)(v26 + 16))
          {
LABEL_26:
            v37 = (id)qword_254A3ECF8;
            v38 = sub_20E699A7C((uint64_t)v37);
            if ((v39 & 1) != 0)
            {
              v40 = (uint64_t *)(*(_QWORD *)(v26 + 56) + 16 * v38);
              v32 = *v40;
              v31 = v40[1];
              sub_20E66A990(*v40, v31);

              swift_bridgeObjectRelease();
              goto LABEL_28;
            }

          }
        }
        else
        {
          swift_once();
          if (*(_QWORD *)(v26 + 16))
            goto LABEL_26;
        }
        swift_bridgeObjectRelease();
        v33 = sub_20E6E9F38();
        v34 = sub_20E6EA3D0();
        if (!os_log_type_enabled(v33, v34))
          goto LABEL_21;
        v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v35 = 0;
        v36 = "Found advertisemnt without caBLE UUID.";
        goto LABEL_20;
      }
    }
    else
    {
      sub_20E67BD44(v6 - 128, (uint64_t *)&unk_254A2E0F0);
    }
    v33 = sub_20E6E9F38();
    v34 = sub_20E6EA3D0();
    if (!os_log_type_enabled(v33, v34))
    {
LABEL_21:

      return;
    }
    v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v35 = 0;
    v36 = "Found unexpected advertisement.";
LABEL_20:
    _os_log_impl(&dword_20E648000, v33, v34, v36, v35, 2u);
    MEMORY[0x212BC3A38](v35, -1, -1);
    goto LABEL_21;
  }
}

unint64_t sub_20E683128()
{
  unint64_t result;

  result = qword_254A2E1E0;
  if (!qword_254A2E1E0)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCABLEClient.ClientError, &type metadata for ASCABLEClient.ClientError);
    atomic_store(result, (unint64_t *)&qword_254A2E1E0);
  }
  return result;
}

unint64_t sub_20E683170()
{
  unint64_t result;

  result = qword_254A2E1E8;
  if (!qword_254A2E1E8)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCABLEClient.ClientError, &type metadata for ASCABLEClient.ClientError);
    atomic_store(result, (unint64_t *)&qword_254A2E1E8);
  }
  return result;
}

unint64_t sub_20E6831B8()
{
  unint64_t result;

  result = qword_254A2E1F0;
  if (!qword_254A2E1F0)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCABLEClient.ClientError, &type metadata for ASCABLEClient.ClientError);
    atomic_store(result, (unint64_t *)&qword_254A2E1F0);
  }
  return result;
}

unint64_t sub_20E683200()
{
  unint64_t result;

  result = qword_254A2E1F8;
  if (!qword_254A2E1F8)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCABLEClient.ClientError, &type metadata for ASCABLEClient.ClientError);
    atomic_store(result, (unint64_t *)&qword_254A2E1F8);
  }
  return result;
}

unint64_t sub_20E683248()
{
  unint64_t result;

  result = qword_254A2E208;
  if (!qword_254A2E208)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCABLEClient.ClientError, &type metadata for ASCABLEClient.ClientError);
    atomic_store(result, (unint64_t *)&qword_254A2E208);
  }
  return result;
}

unint64_t sub_20E683290()
{
  unint64_t result;

  result = qword_254A2E210;
  if (!qword_254A2E210)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCABLEClient.OperationType, &type metadata for ASCABLEClient.OperationType);
    atomic_store(result, (unint64_t *)&qword_254A2E210);
  }
  return result;
}

uint64_t sub_20E6832D4()
{
  return type metadata accessor for ASCABLEClient();
}

void sub_20E6832DC()
{
  unint64_t v0;

  sub_20E678744();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ASCABLEClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ASCABLEClient.qrCodeURL.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ASCABLEClient.performAuthenticationOperation(_:forRelyingPartyIdentifier:completionHandler:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of ASCABLEClient.cancelIfNecessary()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ASCABLEClient.centralManagerDidUpdateState(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of ASCABLEClient.centralManager(_:didFailToScanWithError:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of ASCABLEClient.centralManager(_:didDiscover:advertisementData:rssi:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x1C8))();
}

ValueMetadata *type metadata accessor for ASCABLEClient.ClientError()
{
  return &type metadata for ASCABLEClient.ClientError;
}

ValueMetadata *type metadata accessor for ASCABLEClient.OperationType()
{
  return &type metadata for ASCABLEClient.OperationType;
}

uint64_t getEnumTagSinglePayload for ASCABLEClient.CABLEState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCABLEClient.CABLEState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_20E68356C + 4 * byte_20E6EE9D4[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_20E6835A0 + 4 * byte_20E6EE9CF[v4]))();
}

uint64_t sub_20E6835A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6835A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6835B0);
  return result;
}

uint64_t sub_20E6835BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6835C4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_20E6835C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6835D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCABLEClient.CABLEState()
{
  return &type metadata for ASCABLEClient.CABLEState;
}

unint64_t sub_20E6835F0()
{
  unint64_t result;

  result = qword_254A2E328;
  if (!qword_254A2E328)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EEDA8, &type metadata for ASCABLEClient.CABLEState);
    atomic_store(result, (unint64_t *)&qword_254A2E328);
  }
  return result;
}

unint64_t sub_20E683634()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254A2E110;
  if (!qword_254A2E110)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_254A2EE80);
    result = MEMORY[0x212BC39A8](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_254A2E110);
  }
  return result;
}

unint64_t sub_20E683680()
{
  unint64_t result;

  result = qword_254A2E338;
  if (!qword_254A2E338)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2864, &type metadata for ASCTAPAuthenticatorGetAssertionResponse);
    atomic_store(result, (unint64_t *)&qword_254A2E338);
  }
  return result;
}

uint64_t sub_20E6836C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 112);
  v24 = *(_QWORD *)(a1 + 168);
  v25 = *(_QWORD *)(a1 + 160);
  v22 = *(_QWORD *)(a1 + 184);
  v23 = *(_QWORD *)(a1 + 176);
  v20 = *(_QWORD *)(a1 + 200);
  v21 = *(_QWORD *)(a1 + 192);
  v18 = *(_QWORD *)(a1 + 216);
  v19 = *(_QWORD *)(a1 + 208);
  v17 = *(_OWORD *)(a1 + 224);
  v12 = *(_QWORD *)(a1 + 240);
  v11 = *(_BYTE *)(a1 + 248);
  sub_20E66A990(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_20E677DBC(v2, v3, v4, v5);
  sub_20E66A990(v6, v7);
  sub_20E66A990(v8, v9);
  sub_20E677E08(v16, v15, v14, v13);
  sub_20E6777B4(v25, v24, v23, v22, v21, v20, v19, v18, v17, *((uint64_t *)&v17 + 1), v12, v11, (void (*)(void))sub_20E677614, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677630);
  return a1;
}

uint64_t sub_20E683814(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 104);
  v16 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 112);
  v12 = *(_QWORD *)(a1 + 128);
  v11 = *(_OWORD *)(a1 + 136);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_BYTE *)(a1 + 160);
  sub_20E66A990(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  swift_bridgeObjectRetain();
  sub_20E66A990(v2, v3);
  sub_20E66A990(v4, v5);
  sub_20E6777B4(v17, v16, v6, v7, v15, v14, v13, v12, v11, *((uint64_t *)&v11 + 1), v8, v9, (void (*)(void))sub_20E677614, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677630);
  return a1;
}

uint64_t sub_20E683908(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 96);
  v12 = *(_OWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_BYTE *)(a1 + 136);
  swift_bridgeObjectRelease();
  sub_20E6673F4(v2, v3);
  sub_20E6673F4(v4, v5);
  sub_20E6777B4(v17, v16, v6, v7, v8, v15, v14, v13, v12, *((uint64_t *)&v12 + 1), v9, v10, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
  return a1;
}

uint64_t sub_20E6839EC(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 >> 60 != 15)
  {
    sub_20E6673F4(result, a2);
    sub_20E6673F4(a3, a4);
    return sub_20E6673F4(a5, a6);
  }
  return result;
}

uint64_t sub_20E683A44()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_20E683A68(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  v2 = (a2 >> 60) & 3;
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 != 1)
      return result;
    a2 &= 0xCFFFFFFFFFFFFFFFLL;
  }
  return sub_20E66A990(result, a2);
}

uint64_t *sub_20E683A84(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[4];
  v3 = a1[5];
  sub_20E66AA28(*a1, a1[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_20E6673F4(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_20E683B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ASCABLEAdvertisement();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_20E683B4C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ASCABLEAdvertisement();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20E683B88()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_20E683BAC(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

void sub_20E683BD0()
{
  __asm { BR              X10 }
}

void sub_20E683C14()
{
  void *v0;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _DWORD *v6;

  if (qword_254A2DBE8 != -1)
    swift_once();
  v2 = sub_20E6E9F50();
  __swift_project_value_buffer(v2, (uint64_t)qword_254A3ED50);
  v3 = v0;
  v4 = sub_20E6E9F38();
  v5 = sub_20E6EA3E8();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (_DWORD *)swift_slowAlloc();
    swift_slowAlloc();
    *v6 = 136315138;
    __asm { BR              X10 }
  }

  sub_20E681C44();
}

void sub_20E6840B8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_254A2DBE8 != -1)
    swift_once();
  v4 = sub_20E6E9F50();
  __swift_project_value_buffer(v4, (uint64_t)qword_254A3ED50);
  swift_bridgeObjectRetain_n();
  v5 = sub_20E6E9F38();
  v6 = sub_20E6EA3E8();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v9 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_20E66A2F8(a1, a2, &v9);
    sub_20E6EA4C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_20E648000, v5, v6, "Unexpectedly received string frame: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v8, -1, -1);
    MEMORY[0x212BC3A38](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_20E681C44();
}

void sub_20E68426C(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  uint64_t v8;

  if (qword_254A2DBE8 != -1)
    swift_once();
  v2 = sub_20E6E9F50();
  __swift_project_value_buffer(v2, (uint64_t)qword_254A3ED50);
  v3 = a1;
  v4 = sub_20E6E9F38();
  v5 = sub_20E6EA3E8();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    v8 = sub_20E6E9B3C();
    sub_20E6EA4C0();
    *v7 = v8;

    _os_log_impl(&dword_20E648000, v4, v5, "Networking error: %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F160);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v7, -1, -1);
    MEMORY[0x212BC3A38](v6, -1, -1);
  }
  else
  {

  }
  sub_20E681C44();
}

unint64_t sub_20E684404()
{
  unint64_t result;

  result = qword_254A2E358;
  if (!qword_254A2E358)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCABLEClient.ClientError, &type metadata for ASCABLEClient.ClientError);
    atomic_store(result, (unint64_t *)&qword_254A2E358);
  }
  return result;
}

uint64_t sub_20E684448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ASCABLEAdvertisement();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20E68448C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_20E6844B0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  sub_20E67E090(a1, a2, v2);
}

uint64_t sub_20E6844B8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

_OWORD *sub_20E684528(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_20E684538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_20E68458C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_20E6845D4(unsigned __int8 a1, uint64_t a2)
{
  unsigned __int8 v2;

  if ((a2 & 0xFF000000000000) != 0)
    v2 = a1;
  else
    v2 = 0;
  return v2 | (((a2 & 0xFF000000000000) == 0) << 8);
}

unint64_t sub_20E6846D4(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unsigned int v5;

  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    sub_20E688150(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v5 = sub_20E6EA604();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
        sub_20E6EA664();
      v5 = sub_20E6EA670();
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

uint64_t sub_20E6847B0()
{
  uint64_t v0;

  v0 = sub_20E6EA0AC();
  __swift_allocate_value_buffer(v0, qword_254A2E3E0);
  __swift_project_value_buffer(v0, (uint64_t)qword_254A2E3E0);
  return sub_20E6EA0A0();
}

uint64_t sub_20E6847FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  uint64_t v37;
  uint64_t result;
  void (*v39)(char *, char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(uint64_t, char *, uint64_t);
  uint64_t v52;
  unint64_t v53;
  char *v54;
  void (*v55)(uint64_t, uint64_t);
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;

  v4 = v3;
  v65 = a3;
  v66 = a1;
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E488);
  MEMORY[0x24BDAC7A8](v58);
  v57 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_20E6EA094();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v62 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v60 = (char *)&v56 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E1B0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E1A8);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v64 = (uint64_t)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v56 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v56 - v21;
  v23 = sub_20E6EA100();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v56 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = v4 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseManager;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E428);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = v4 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseTransportCipher;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DFA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 1, 1, v29);
  v61 = v8;
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v59 = v7;
  v30(v4 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_qrSymmetricKey, v66, v7);
  v31 = v4;
  sub_20E67BCC0(a2, v4 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_qrPrivateKey, &qword_254A2E1B0);
  v63 = a2;
  sub_20E67BCC0(a2, (uint64_t)v14, &qword_254A2E1B0);
  v32 = sub_20E6EA124();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v14, 1, v32) == 1)
  {
    sub_20E67BD44((uint64_t)v14, &qword_254A2E1B0);
    v34 = 1;
  }
  else
  {
    sub_20E6EA10C();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v32);
    v34 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v22, v34, 1, v23);
  sub_20E67BCC0(v65, (uint64_t)v20, &qword_254A2E1A8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v36 = v35(v22, 1, v23);
  v37 = v64;
  if (v36 != 1)
  {
    sub_20E67BD44((uint64_t)v20, &qword_254A2E1A8);
    v39 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v40 = v56;
    v39(v56, v22, v23);
    goto LABEL_8;
  }
  sub_20E67BCC0((uint64_t)v20, v64, &qword_254A2E1A8);
  result = v35((char *)v37, 1, v23);
  if ((_DWORD)result != 1)
  {
    sub_20E67BD44((uint64_t)v20, &qword_254A2E1A8);
    v39 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v40 = v56;
    v39(v56, (char *)v37, v23);
    sub_20E67BD44((uint64_t)v22, &qword_254A2E1A8);
LABEL_8:
    v41 = v31;
    v39((char *)(v31 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_qrPublicKey), v40, v23);
    v42 = sub_20E677310((uint64_t)&unk_24C97FB48);
    v44 = v43;
    v67 = v42;
    v68 = v43;
    v64 = sub_20E6EA13C();
    sub_20E67BD04((unint64_t *)&qword_254A2E620, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    sub_20E6774A8();
    v45 = v60;
    v46 = v66;
    sub_20E6EA0C4();
    sub_20E6673F4(v42, v44);
    v48 = v57;
    v47 = v58;
    sub_20E6EA070();
    v49 = &v48[*(int *)(v47 + 48)];
    v50 = v61;
    v51 = *(void (**)(uint64_t, char *, uint64_t))(v61 + 32);
    v52 = v59;
    v51(v41 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_eidAESKey, v48, v59);
    v51(v41 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_eidHMACKey, v49, v52);
    v67 = sub_20E677310((uint64_t)&unk_24C97FB70);
    v68 = v53;
    v54 = v62;
    sub_20E6EA0C4();
    sub_20E67BD44(v65, &qword_254A2E1A8);
    sub_20E67BD44(v63, &qword_254A2E1B0);
    v55 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v55(v46, v52);
    sub_20E6673F4(v67, v68);
    v55((uint64_t)v45, v52);
    v51(v41 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_tunnelID, v54, v52);
    return v41;
  }
  __break(1u);
  return result;
}

uint64_t sub_20E684D78()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E488);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E490);
  sub_20E689200();
  sub_20E6EA07C();
  return sub_20E6EA07C();
}

void sub_20E684E38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0B8);
  MEMORY[0x24BDAC7A8](v3);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0D0);
  MEMORY[0x24BDAC7A8](v4);
  __asm { BR              X9 }
}

uint64_t sub_20E684EF4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint8_t *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  if (BYTE6(v1) != 20)
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v38 = sub_20E6E9F50();
    __swift_project_value_buffer(v38, (uint64_t)qword_254A3ED50);
    sub_20E66A990(v2, v1);
    v39 = sub_20E6E9F38();
    v40 = sub_20E6EA3E8();
    if (os_log_type_enabled(v39, v40))
    {
      *(_DWORD *)swift_slowAlloc() = 134217984;
      __asm { BR              X11 }
    }
    sub_20E6673F4(v2, v1);

LABEL_21:
    v63 = type metadata accessor for ASCABLEAdvertisement();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v7, 1, 1, v63);
  }
  *(_QWORD *)(v9 - 128) = v7;
  v11 = sub_20E6E9C50();
  v13 = v12;
  *(_QWORD *)(v9 - 160) = sub_20E6E9C50();
  *(_QWORD *)(v9 - 152) = v11;
  v15 = v14;
  *(_QWORD *)(v9 - 96) = v11;
  *(_QWORD *)(v9 - 88) = v13;
  *(_QWORD *)(v9 - 120) = v13;
  sub_20E6EA13C();
  sub_20E67BD04((unint64_t *)&qword_254A2E620, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
  sub_20E6774A8();
  sub_20E6EA0DC();
  *(_QWORD *)(v9 - 144) = v4;
  *(_QWORD *)(v9 - 136) = a1;
  v16 = v3;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v6, v3, a1);
  *(_QWORD *)(v6 + *(int *)(v8 + 36)) = 4;
  v17 = v6;
  v18 = v15;
  v19 = *(_QWORD *)(v9 - 160);
  v20 = sub_20E66DF98(v17);
  v22 = v21;
  sub_20E6B0F54(v19, v15);
  if ((v23 & 1) != 0)
  {
    *(_QWORD *)(v9 - 176) = v3;
    *(_QWORD *)(v9 - 168) = v15;
    sub_20E6EA070();
    v24 = *(_QWORD *)(v9 - 96);
    v25 = *(_QWORD *)(v9 - 88);
    v26 = *(_QWORD *)(v9 - 152);
    v27 = *(_QWORD *)(v9 - 120);
    sub_20E688A14(v26, v27);
    v29 = v28;
    v31 = v30;
    sub_20E6673F4(v24, v25);
    if (v31 >> 60 != 15)
    {
      sub_20E66CDD8(v29, v31);
      sub_20E6673F4(v26, v27);
      sub_20E6673F4(v20, v22);
      sub_20E6673F4(v19, *(_QWORD *)(v9 - 168));
      return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v9 - 144) + 8))(*(_QWORD *)(v9 - 176), *(_QWORD *)(v9 - 136));
    }
    v7 = *(_QWORD *)(v9 - 128);
    v32 = *(_QWORD *)(v9 - 168);
    if (qword_254A2DBE8 != -1)
      swift_once();
    v33 = sub_20E6E9F50();
    __swift_project_value_buffer(v33, (uint64_t)qword_254A3ED50);
    v34 = sub_20E6E9F38();
    v35 = sub_20E6EA3E8();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_20E648000, v34, v35, "Could not decrypt caBLE advertisement.", v36, 2u);
      v37 = v36;
      v32 = *(_QWORD *)(v9 - 168);
      MEMORY[0x212BC3A38](v37, -1, -1);
    }
    sub_20E6673F4(v26, v27);

    sub_20E6673F4(v20, v22);
    sub_20E6673F4(v19, v32);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v9 - 144) + 8))(*(_QWORD *)(v9 - 176), *(_QWORD *)(v9 - 136));
    goto LABEL_21;
  }
  v41 = *(_QWORD *)(v9 - 152);
  v42 = *(_QWORD *)(v9 - 120);
  if (qword_254A2DBE8 != -1)
    swift_once();
  v43 = sub_20E6E9F50();
  __swift_project_value_buffer(v43, (uint64_t)qword_254A3ED50);
  sub_20E66A990(v19, v15);
  sub_20E66A990(v20, v22);
  sub_20E66A990(v19, v15);
  sub_20E66A990(v20, v22);
  v44 = sub_20E6E9F38();
  v45 = sub_20E6EA3E8();
  v46 = v45;
  *(_QWORD *)(v9 - 168) = v44;
  if (os_log_type_enabled(v44, v45))
  {
    v47 = swift_slowAlloc();
    *(_DWORD *)(v9 - 180) = v46;
    v48 = v47;
    v49 = swift_slowAlloc();
    *(_QWORD *)(v9 - 176) = v49;
    *(_QWORD *)(v9 - 96) = v49;
    *(_DWORD *)v48 = 136315394;
    v50 = v16;
    sub_20E66A990(v19, v18);
    v51 = v18;
    v52 = sub_20E6E9C08();
    v54 = v53;
    sub_20E6673F4(v19, v51);
    *(_QWORD *)(v9 - 104) = sub_20E66A2F8(v52, v54, (uint64_t *)(v9 - 96));
    sub_20E6EA4C0();
    swift_bridgeObjectRelease();
    sub_20E6673F4(v19, v51);
    sub_20E6673F4(v19, v51);
    *(_WORD *)(v48 + 12) = 2080;
    *(_QWORD *)(v9 - 192) = v48 + 14;
    sub_20E66A990(v20, v22);
    v55 = sub_20E6E9C08();
    v57 = v56;
    sub_20E6673F4(v20, v22);
    *(_QWORD *)(v9 - 104) = sub_20E66A2F8(v55, v57, (uint64_t *)(v9 - 96));
    sub_20E6EA4C0();
    swift_bridgeObjectRelease();
    sub_20E6673F4(v20, v22);
    sub_20E6673F4(v20, v22);
    v58 = *(NSObject **)(v9 - 168);
    _os_log_impl(&dword_20E648000, v58, (os_log_type_t)*(_DWORD *)(v9 - 180), "caBLE HMAC tag mismatch. Expected %s got %s.", (uint8_t *)v48, 0x16u);
    v59 = *(_QWORD *)(v9 - 176);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v59, -1, -1);
    MEMORY[0x212BC3A38](v48, -1, -1);
    sub_20E6673F4(v41, *(_QWORD *)(v9 - 120));

    sub_20E6673F4(v20, v22);
    sub_20E6673F4(v19, v51);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v9 - 144) + 8))(v50, *(_QWORD *)(v9 - 136));
  }
  else
  {
    sub_20E6673F4(v41, v42);

    sub_20E6673F4(v20, v22);
    sub_20E6673F4(v20, v22);
    sub_20E6673F4(v19, v18);
    sub_20E6673F4(v19, v18);
    sub_20E6673F4(v20, v22);
    sub_20E6673F4(v19, v18);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v9 - 144) + 8))(v16, *(_QWORD *)(v9 - 136));
  }
  v61 = *(_QWORD *)(v9 - 128);
  v62 = type metadata accessor for ASCABLEAdvertisement();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v61, 1, 1, v62);
}

uint64_t sub_20E685694(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD v22[2];
  uint64_t v23;
  unint64_t v24;

  v22[0] = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0B8);
  MEMORY[0x24BDAC7A8](v22[0]);
  v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E0D0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ASCABLEAdvertisement() + 32));
  v9 = *v8;
  v10 = v8[1];
  sub_20E6EA070();
  v11 = v23;
  v12 = v24;
  sub_20E688A14(v9, v10);
  v14 = v13;
  v16 = v15;
  sub_20E6673F4(v11, v12);
  if (v16 >> 60 == 15)
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v17 = sub_20E6E9F50();
    __swift_project_value_buffer(v17, (uint64_t)qword_254A3ED50);
    v18 = sub_20E6E9F38();
    v19 = sub_20E6EA3E8();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_20E648000, v18, v19, "Could not encrypte caBLE advertisement.", v20, 2u);
      MEMORY[0x212BC3A38](v20, -1, -1);
    }

    return 0;
  }
  else
  {
    v23 = v14;
    v24 = v16;
    sub_20E6EA13C();
    sub_20E67BD04((unint64_t *)&qword_254A2E620, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    sub_20E6774A8();
    sub_20E6EA0DC();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v3, v7, v4);
    *(_QWORD *)&v3[*(int *)(v22[0] + 36)] = 4;
    v23 = v14;
    v24 = v16;
    sub_20E66A990(v14, v16);
    sub_20E676F18((uint64_t)v3);
    sub_20E67BD44((uint64_t)v3, &qword_254A2E0B8);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_20E66AA28(v14, v16);
    return v23;
  }
}

uint64_t sub_20E68595C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[4];
  uint64_t v14;
  uint64_t v15;

  v4 = sub_20E6EA094();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1;
  v15 = a2;
  v8 = sub_20E677310((uint64_t)&unk_24C97FD90);
  v10 = v9;
  v13[2] = v8;
  v13[3] = v9;
  sub_20E6EA13C();
  sub_20E67BD04((unint64_t *)&qword_254A2E620, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
  sub_20E6774A8();
  sub_20E6EA0D0();
  sub_20E6673F4(v8, v10);
  sub_20E6EA070();
  v11 = v14;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v11;
}

uint64_t sub_20E685AB4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  char *v44;
  char *v45;
  uint64_t (*v46)(uint64_t);
  uint64_t (*v47)(uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;

  v67 = a1;
  v68 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E450);
  MEMORY[0x24BDAC7A8](v3);
  v59 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E1A8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v70 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v65 = (char *)&v58 - v8;
  v64 = sub_20E6E9F98();
  v9 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_20E6E9FA4();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E460);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v69 = (uint64_t)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v66 = (char *)&v58 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E1B0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v74 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v73 = (char *)&v58 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v58 - v24;
  v26 = sub_20E6EA124();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = v2;
  sub_20E67BCC0(v2 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_qrPrivateKey, (uint64_t)v25, &qword_254A2E1B0);
  v30 = v27;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
    goto LABEL_7;
  v31 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v72 = v29;
  v31(v29, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x24BE15AB0], v64);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E468);
  v32 = sub_20E6E9FBC();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = (*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v35 = swift_allocObject();
  v62 = xmmword_20E6EE520;
  *(_OWORD *)(v35 + 16) = xmmword_20E6EE520;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v33 + 104))(v35 + v34, *MEMORY[0x24BE15AD0], v32);
  sub_20E6E9FB0();
  v36 = sub_20E677310((uint64_t)&unk_24C980018);
  v63 = v37;
  v64 = v36;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E470);
  v38 = swift_allocObject();
  v60 = v38;
  v61 = v27;
  *(_OWORD *)(v38 + 16) = v62;
  *(_QWORD *)&v62 = v14;
  v39 = v67;
  v40 = v68;
  *(_QWORD *)(v38 + 32) = v67;
  *(_QWORD *)(v38 + 40) = v40;
  v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  v41(v73, 1, 1, v26);
  v42 = sub_20E6EA100();
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56);
  v43(v65, 1, 1, v42);
  v44 = v74;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v74, v72, v26);
  v45 = v44;
  v25 = (char *)v26;
  v41(v45, 0, 1, v26);
  v43(v70, 1, 1, v42);
  sub_20E66A990(v39, v40);
  sub_20E6EA130();
  sub_20E6EA0B8();
  v46 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6650];
  sub_20E6EA13C();
  v47 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8];
  sub_20E67BD04(&qword_254A2E478, v46, MEMORY[0x24BE15AE8]);
  sub_20E67BD04(&qword_254A2E480, v47, MEMORY[0x24BE15AF8]);
  v48 = v66;
  sub_20E6E9F74();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v72, v26);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E428);
  v50 = *(_QWORD *)(v49 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v48, 0, 1, v49);
  v51 = (uint64_t)v48;
  v52 = v69;
  sub_20E67B910(v51, v69, &qword_254A2E460);
  v53 = v71 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseManager;
  swift_beginAccess();
  sub_20E688800(v52, v53);
  swift_endAccess();
  swift_beginAccess();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v53, 1, v49) == 1)
  {
    __break(1u);
LABEL_7:
    sub_20E67BD44((uint64_t)v25, &qword_254A2E1B0);
    result = sub_20E6EA724();
    __break(1u);
    return result;
  }
  v54 = v58;
  v55 = (uint64_t)v59;
  v56 = sub_20E6E9F68();
  swift_endAccess();
  if (!v54)
    sub_20E67BD44(v55, &qword_254A2E450);
  return v56;
}

uint64_t sub_20E6860F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  char *v47;
  uint64_t (*v48)(uint64_t);
  uint64_t (*v49)(uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  char *v95;
  uint64_t v96;

  v81 = a2;
  v92 = a4;
  v80 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E450);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v77 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v76 = (uint64_t)&v76 - v8;
  v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E458);
  v9 = MEMORY[0x24BDAC7A8](v83);
  v79 = (uint64_t *)((char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x24BDAC7A8](v9);
  v78 = (uint64_t *)((char *)&v76 - v12);
  MEMORY[0x24BDAC7A8](v11);
  v94 = (uint64_t *)((char *)&v76 - v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E1A8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v91 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v95 = (char *)&v76 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E1B0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = v21;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v76 - v22;
  v86 = (char *)&v76 - v22;
  v24 = sub_20E6E9F98();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_20E6E9FA4();
  MEMORY[0x24BDAC7A8](v28);
  v89 = (char *)&v76 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E460);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v93 = (uint64_t)&v76 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v90 = (char *)&v76 - v33;
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v27, *MEMORY[0x24BE15AB0], v24);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E468);
  v34 = sub_20E6E9FBC();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  v37 = swift_allocObject();
  v84 = xmmword_20E6EE520;
  *(_OWORD *)(v37 + 16) = xmmword_20E6EE520;
  (*(void (**)(unint64_t, _QWORD, uint64_t))(v35 + 104))(v37 + v36, *MEMORY[0x24BE15AD0], v34);
  sub_20E6E9FB0();
  v38 = sub_20E677310((uint64_t)&unk_24C97FDB8);
  v87 = v39;
  v88 = v38;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E470);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = v84;
  v41 = v92;
  *(_QWORD *)(v40 + 32) = a3;
  *(_QWORD *)(v40 + 40) = v41;
  v42 = sub_20E6EA124();
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56);
  v43(v23, 1, 1, v42);
  v44 = sub_20E6EA100();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
  v46(v95, 1, 1, v44);
  v43(v21, 1, 1, v42);
  v47 = v91;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v91, v96 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_qrPublicKey, v44);
  v46(v47, 0, 1, v44);
  sub_20E66A990(a3, v41);
  sub_20E6EA130();
  sub_20E6EA0B8();
  v48 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6650];
  sub_20E6EA13C();
  v49 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8];
  sub_20E67BD04(&qword_254A2E478, v48, MEMORY[0x24BE15AE8]);
  sub_20E67BD04(&qword_254A2E480, v49, MEMORY[0x24BE15AF8]);
  v50 = v90;
  sub_20E6E9F74();
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E428);
  v52 = *(_QWORD *)(v51 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v50, 0, 1, v51);
  v53 = (uint64_t)v50;
  v54 = v93;
  sub_20E67B910(v53, v93, &qword_254A2E460);
  v55 = v96 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseManager;
  swift_beginAccess();
  sub_20E688800(v54, v55);
  swift_endAccess();
  swift_beginAccess();
  v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  result = v56(v55, 1, v51);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v58 = v82;
    v59 = v83;
    v60 = (uint64_t)v94 + *(int *)(v83 + 48);
    v61 = sub_20E6E9F5C();
    if (v58)
    {
      swift_endAccess();
      return v55;
    }
    v63 = v61;
    v64 = v62;
    swift_endAccess();
    v95 = (char *)v56;
    v65 = v94;
    *v94 = v63;
    v65[1] = v64;
    v66 = (uint64_t)v78;
    v67 = (uint64_t)v78 + *(int *)(v59 + 48);
    *v78 = v63;
    *(_QWORD *)(v66 + 8) = v64;
    sub_20E67BCC0(v60, v67, &qword_254A2E450);
    sub_20E66A990(v63, v64);
    sub_20E67BD44(v66, &qword_254A2E458);
    v68 = *(int *)(v59 + 48);
    v69 = (uint64_t)v79;
    v70 = (uint64_t)v79 + v68;
    v71 = *v65;
    v72 = v65[1];
    *v79 = v71;
    *(_QWORD *)(v69 + 8) = v72;
    sub_20E67BCC0(v60, v70, &qword_254A2E450);
    sub_20E66A990(v71, v72);
    sub_20E67BD44(v69, &qword_254A2E458);
    swift_beginAccess();
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v95)(v55, 1, v51);
    if ((_DWORD)result != 1)
    {
      v73 = (uint64_t)v77;
      v55 = sub_20E6E9F68();
      swift_endAccess();
      sub_20E67BD44((uint64_t)v94, &qword_254A2E458);
      v74 = v76;
      sub_20E67B910(v73, v76, &qword_254A2E450);
      v75 = v96 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseTransportCipher;
      swift_beginAccess();
      sub_20E6887B8(v74, v75);
      swift_endAccess();
      sub_20E67BD44(v74, &qword_254A2E450);
      return v55;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_20E686854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E450);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v16 - v6;
  v8 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseManager;
  swift_beginAccess();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E428);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v11 = sub_20E6E9F5C();
    if (v1)
    {
      return swift_endAccess();
    }
    else
    {
      v13 = v11;
      v14 = v12;
      swift_endAccess();
      sub_20E6673F4(v13, v14);
      sub_20E67B910((uint64_t)v5, (uint64_t)v7, &qword_254A2E450);
      v15 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseTransportCipher;
      swift_beginAccess();
      sub_20E6887B8((uint64_t)v7, v15);
      swift_endAccess();
      return sub_20E67BD44((uint64_t)v7, &qword_254A2E450);
    }
  }
  return result;
}

uint64_t sub_20E6869EC(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v3 = v1;
  v5 = sub_20E6E9D58();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v24 = a1[2];
  v25 = v9;
  v26 = a1[4];
  v27 = *((_QWORD *)a1 + 10);
  v10 = a1[1];
  v22 = *a1;
  v23 = v10;
  sub_20E6E9D94();
  swift_allocObject();
  sub_20E6E9D88();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BE10188], v5);
  sub_20E6E9D64();
  sub_20E68810C();
  v11 = sub_20E6E9D70();
  v13 = v12;
  swift_release();
  if (v2)
    return v11;
  sub_20E688688(v11, v13);
  v15 = v14;
  v17 = v16;
  sub_20E6673F4(v11, v13);
  v21[0] = v15;
  v21[1] = v17;
  v18 = v3 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseTransportCipher;
  swift_beginAccess();
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DFA0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19);
  if ((_DWORD)result != 1)
  {
    sub_20E6774A8();
    v11 = sub_20E6E9F8C();
    swift_endAccess();
    sub_20E6673F4(v15, v17);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_20E686BD4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;

  v6 = v3 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseTransportCipher;
  swift_beginAccess();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DFA0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if ((_DWORD)result == 1)
    goto LABEL_20;
  sub_20E6774A8();
  v9 = sub_20E6E9F80();
  v11 = v10;
  result = swift_endAccess();
  if (v4)
    return result;
  sub_20E66A990(v9, v11);
  v12 = v9;
  v13 = v11;
  if ((a3 & 1) != 0)
  {
    sub_20E68702C(v9, v11);
    v15 = v14;
    result = sub_20E6673F4(v9, v11);
    if ((v15 & 0x100) != 0)
    {
      sub_20E66A990(v9, v11);
      v12 = v9;
      v13 = v11;
      goto LABEL_8;
    }
    if ((((v15 + 1) >> 8) & 1) == 0)
    {
      sub_20E66A990(v9, v11);
      sub_20E687200((v15 + 1), v9, v11);
      v12 = v19;
      v13 = v20;
      goto LABEL_8;
    }
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
LABEL_8:
  sub_20E66A990(v12, v13);
  sub_20E68458C(v12, v13);
  v17 = v16;
  sub_20E6673F4(v12, v13);
  if ((v17 & 0x100) != 0)
  {
    sub_20E6880C8();
    swift_allocError();
    *v18 = 0;
  }
  else
  {
    if (!(_BYTE)v17)
    {
      sub_20E6673F4(v12, v13);
      sub_20E6673F4(v9, v11);
      return 0;
    }
    if (v17 == 1 || v17 == 2)
    {
      sub_20E687B84(1, v12, v13);
      sub_20E6673F4(v9, v11);
      return v19;
    }
    sub_20E6880C8();
    swift_allocError();
    *v18 = v17;
  }
  v18[1] = HIBYTE(v17) & 1;
  swift_willThrow();
  sub_20E6673F4(v12, v13);
  return sub_20E6673F4(v9, v11);
}

uint64_t sub_20E686E64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int16 v10;
  __int16 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  __int128 v18;

  v4 = v1 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseTransportCipher;
  swift_beginAccess();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DFA0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if ((_DWORD)result == 1)
    goto LABEL_9;
  sub_20E6774A8();
  v7 = sub_20E6E9F80();
  v9 = v8;
  result = swift_endAccess();
  if (v2)
    return result;
  sub_20E66A990(v7, v9);
  sub_20E68702C(v7, v9);
  v11 = v10;
  result = sub_20E6673F4(v7, v9);
  if ((v11 & 0x100) == 0)
  {
    if ((((v11 + 1) >> 8) & 1) == 0)
    {
      sub_20E687200((v11 + 1), v7, v9);
      v9 = *((_QWORD *)&v12 + 1);
      v7 = v12;
      goto LABEL_6;
    }
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
LABEL_6:
  sub_20E6E9D40();
  swift_allocObject();
  sub_20E6E9D34();
  sub_20E687B40();
  sub_20E6E9D1C();
  sub_20E6673F4(v7, v9);
  result = swift_release();
  *(_OWORD *)a1 = v12;
  *(_QWORD *)(a1 + 16) = v13;
  *(_OWORD *)(a1 + 24) = v14;
  *(_OWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 56) = v16;
  *(_BYTE *)(a1 + 64) = v17;
  *(_OWORD *)(a1 + 72) = v18;
  return result;
}

void sub_20E68702C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

void sub_20E687200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x20E687350);
}

void sub_20E687380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_20E6873F4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;

  v9 = v2;
  v10 = v3;
  v11 = BYTE2(v3);
  v12 = BYTE3(v3);
  v13 = BYTE4(v3);
  v14 = BYTE5(v3);
  sub_20E66A990(v1, v0);
  sub_20E6876D4((uint64_t)&v9, (uint64_t)&v9 + BYTE6(v3), v5 & 1, v2, v3);
  if (v4)
  {
    sub_20E6673F4(v2, v3);
    sub_20E6673F4(v1, v0);
    __break(1u);
    JUMPOUT(0x20E68767CLL);
  }
  sub_20E6673F4(v2, v3);
  result = sub_20E6673F4(v1, v0);
  *v7 = v8;
  return result;
}

void sub_20E6876D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X11 }
}

uint64_t sub_20E687718()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_20E687750 + *((int *)qword_20E687848 + (v0 >> 62))))();
}

uint64_t sub_20E687760@<X0>(const void *a1@<X0>, char a2@<W2>, const void *a3@<X5>, _DWORD *a4@<X8>, void *dataOut, size_t dataOutAvailable, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  char **v21;
  size_t v22;
  size_t v23;
  char *v28;
  size_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;

  v23 = BYTE6(v20);
  v28 = *v21;
  v29 = *((_QWORD *)*v21 + 2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v21 = v28;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v28 = sub_20E69A8E4(0, v29, 0, v28);
  *v21 = v28;
  result = CCCrypt((a2 & 1) == 0, 0, 0, a1, v22, 0, a3, v23, v28 + 32, v29, 0);
  *a4 = result;
  return result;
}

uint64_t sub_20E687858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_qrSymmetricKey;
  v2 = sub_20E6EA094();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  sub_20E67BD44(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_qrPrivateKey, &qword_254A2E1B0);
  v4 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_qrPublicKey;
  v5 = sub_20E6EA100();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v3(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_eidAESKey, v2);
  v3(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_eidHMACKey, v2);
  v3(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_tunnelID, v2);
  sub_20E67BD44(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseManager, &qword_254A2E460);
  sub_20E67BD44(v0 + OBJC_IVAR____TtC26AuthenticationServicesCore26ASCABLECryptographyManager_noiseTransportCipher, &qword_254A2E450);
  return swift_deallocClassInstance();
}

uint64_t sub_20E687960()
{
  return type metadata accessor for ASCABLECryptographyManager();
}

uint64_t type metadata accessor for ASCABLECryptographyManager()
{
  uint64_t result;

  result = qword_254A2E408;
  if (!qword_254A2E408)
    return swift_getSingletonMetadata();
  return result;
}

void sub_20E6879A4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_20E6EA094();
  if (v0 <= 0x3F)
  {
    sub_20E687AA0();
    if (v1 <= 0x3F)
    {
      sub_20E6EA100();
      if (v2 <= 0x3F)
      {
        sub_20E687AF4(319, &qword_254A2E420, &qword_254A2E428);
        if (v3 <= 0x3F)
        {
          sub_20E687AF4(319, &qword_254A2E430, &qword_254A2DFA0);
          if (v4 <= 0x3F)
            swift_updateClassMetadata2();
        }
      }
    }
  }
}

void sub_20E687AA0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254A2E418)
  {
    sub_20E6EA124();
    v0 = sub_20E6EA484();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254A2E418);
  }
}

void sub_20E687AF4(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    v4 = sub_20E6EA484();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_20E687B40()
{
  unint64_t result;

  result = qword_254A2E438;
  if (!qword_254A2E438)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EEEDC, &type metadata for ASCABLEPostHandshakeMessage);
    atomic_store(result, (unint64_t *)&qword_254A2E438);
  }
  return result;
}

void sub_20E687B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x20E687CE0);
}

void sub_20E687D14(uint64_t a1)
{
  __asm { BR              X13 }
}

void *sub_20E687D70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  void *result;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v30 = v25;
  LOWORD(v31) = v24;
  BYTE2(v31) = BYTE2(v24);
  HIBYTE(v31) = BYTE3(v24);
  v32 = BYTE4(v24);
  v33 = BYTE5(v24);
  v34 = BYTE6(v24);
  result = memset(&v30, v27, BYTE6(v24));
  v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *v26 = v30;
  v26[1] = v29;
  return result;
}

char *sub_20E687EFC(int *a1, int a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  size_t v11;

  result = (char *)sub_20E6E9BFC();
  v5 = *a1;
  v6 = a1[1];
  if ((int)v6 < (int)v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = (char *)sub_20E6E9A28();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v7 = result;
  result = (char *)sub_20E6E9A4C();
  v8 = v5 - (_QWORD)result;
  if (__OFSUB__(v5, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v9 = v6 - v5;
  v10 = sub_20E6E9A40();
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  return (char *)memset(&v7[v8], a2, v11);
}

uint64_t sub_20E687F7C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_20E687F8C + dword_20E688034[a4 >> 62]))();
}

uint64_t sub_20E687FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x20E68802CLL);
  }
  return ((uint64_t (*)(void))((char *)&loc_20E687FDC + dword_20E688044[a3]))();
}

uint64_t sub_20E688054(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x20E6880B4);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_20E68806C + *((int *)qword_20E6880B8 + (a4 >> 62))))(v5);
}

unint64_t sub_20E6880C8()
{
  unint64_t result;

  result = qword_254A2E440;
  if (!qword_254A2E440)
  {
    result = MEMORY[0x212BC39A8]("e!)>", &type metadata for ASCABLEMessageDecodingError);
    atomic_store(result, (unint64_t *)&qword_254A2E440);
  }
  return result;
}

unint64_t sub_20E68810C()
{
  unint64_t result;

  result = qword_254A2E448;
  if (!qword_254A2E448)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EEEB4, &type metadata for ASCABLEPostHandshakeMessage);
    atomic_store(result, (unint64_t *)&qword_254A2E448);
  }
  return result;
}

unint64_t sub_20E688150(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_20E6881EC(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_20E688258(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_20E6881EC(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_20E6DFE20(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

unint64_t sub_20E688258(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v10 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            v7 = *(_BYTE *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        v12 = result >> 16;
        v6 = sub_20E6EA664();
        v5 = v12;
        if (v12 != v9)
          goto LABEL_9;
      }
      return v5 << 16;
    }
    v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v8 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v8)
      return sub_20E6EA5F8();
  }
  return result;
}

unint64_t sub_20E688358(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = sub_20E6EA268();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return sub_20E6EA304();
  }
  __break(1u);
  return result;
}

uint64_t sub_20E6883F4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E1A8);
  MEMORY[0x24BDAC7A8](v8);
  v31 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E1B0);
  MEMORY[0x24BDAC7A8](v10);
  v32 = (uint64_t)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_20E6EA100();
  v29 = *(_QWORD *)(v12 - 8);
  v30 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_20E6EA094();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v29 - v20;
  v33 = a1;
  v34 = a2;
  sub_20E66A990(a1, a2);
  v22 = MEMORY[0x24BDCDDE8];
  sub_20E6EA07C();
  v33 = a3;
  v34 = a4;
  sub_20E66A990(a3, a4);
  v23 = v35;
  sub_20E6EA0F4();
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
    v24 = sub_20E6EA124();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v32, 1, 1, v24);
    v35 = v15;
    v25 = v29;
    v26 = v30;
    v27 = (uint64_t)v31;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v31, v14, v30);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, v26);
    type metadata accessor for ASCABLECryptographyManager();
    swift_allocObject();
    v22 = sub_20E6847FC((uint64_t)v19, v32, v27);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v14, v26);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v35);
  }
  return v22;
}

void sub_20E688688(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_20E6886C8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;

  if (BYTE6(v0))
    v2 = BYTE6(v0) & 0x1F;
  else
    v2 = 0;
  v7 = sub_20E6773C0(32 - v2);
  v8 = v3;
  sub_20E687D14((uint64_t)&v7);
  sub_20E6E9C5C();
  v4 = v7;
  v5 = v8;
  sub_20E66A990(v7, v8);
  sub_20E66A990(v1, v0);
  sub_20E676D00(v4, v5);
  sub_20E6673F4(v4, v5);
  sub_20E6673F4(v4, v5);
  return v1;
}

uint64_t sub_20E6887B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_20E688800(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_20E688848(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = sub_20E6E9A28();
  if (v10)
  {
    v11 = sub_20E6E9A4C();
    if (__OFSUB__(a1, v11))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v10 += a1 - v11;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_13;
  }
  v14 = sub_20E6E9A40();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v10 + v15;
  if (v10)
    v17 = v16;
  else
    v17 = 0;
  sub_20E6876D4(v10, v17, a4 & 1, a5, a6);
}

void sub_20E688938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = sub_20E6E9A28();
  if (v9)
  {
    v10 = sub_20E6E9A4C();
    if (__OFSUB__(a1, v10))
    {
LABEL_13:
      __break(1u);
      return;
    }
    v9 += a1 - v10;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = sub_20E6E9A40();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = v9 + v14;
  if (v9)
    v16 = v15;
  else
    v16 = 0;
  sub_20E687380(v9, v16, a4, a5);
}

void sub_20E688A14(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_20E688A78()
{
  uint64_t v0;
  uint64_t v2;

  if (BYTE6(v0))
    v2 = BYTE6(v0) & 0xF;
  else
    v2 = 0;
  if (!__OFADD__(BYTE6(v0), v2))
  {
    sub_20E6E7CC0(0, BYTE6(v0) + v2);
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x20E68911CLL);
}

unint64_t sub_20E689200()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_254A2E498;
  if (!qword_254A2E498)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_254A2E490);
    v2 = MEMORY[0x24BDCFB90];
    result = MEMORY[0x212BC39A8](MEMORY[0x24BDD0790], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_254A2E498);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t destroy for ASCABLEPostHandshakeMessage(uint64_t *a1)
{
  unint64_t v2;

  v2 = a1[1];
  if (v2 >> 60 != 15)
    sub_20E6673F4(*a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_20E6673F4(a1[4], a1[5]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ASCABLEPostHandshakeMessage(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    sub_20E66A990(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v6;
  v7 = a2[4];
  v8 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_20E66A990(v7, v8);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v9 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  v11 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ASCABLEPostHandshakeMessage(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *(_QWORD *)a2;
      sub_20E66A990(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v4;
      sub_20E6673F4(v7, v8);
      goto LABEL_8;
    }
    sub_20E66B4E0(a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v5 = *(_QWORD *)a2;
  sub_20E66A990(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v4;
LABEL_8:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  sub_20E66A990(v9, v10);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  sub_20E6673F4(v11, v12);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ASCABLEPostHandshakeMessage(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >> 60 != 15)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5 >> 60 != 15)
    {
      v6 = *(_QWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      sub_20E6673F4(v6, v4);
      goto LABEL_6;
    }
    sub_20E66B4E0(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_20E6673F4(v7, v8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCABLEPostHandshakeMessage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCABLEPostHandshakeMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCABLEPostHandshakeMessage()
{
  return &type metadata for ASCABLEPostHandshakeMessage;
}

_QWORD *sub_20E6896A0@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_20E6896C0(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_20E6896CC()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001CLL;
  else
    return 0x676E6964646170;
}

uint64_t sub_20E68970C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E689C78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E689730()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t sub_20E68973C@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  if (result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (!result)
    v2 = 0;
  *a2 = v2;
  return result;
}

uint64_t sub_20E689758()
{
  sub_20E68A0AC();
  return sub_20E6EA9D0();
}

uint64_t sub_20E689780()
{
  sub_20E68A0AC();
  return sub_20E6EA9DC();
}

double sub_20E6897A8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  uint64_t v8;

  sub_20E689D64(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_QWORD *)(a2 + 80) = v8;
    result = *(double *)v7;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_20E689800(_QWORD *a1)
{
  return sub_20E689848(a1);
}

uint64_t sub_20E689848(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[4];
  uint64_t v23;
  _OWORD v24[2];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE v28[24];
  char v29;

  v3 = v1;
  v21 = sub_20E6E9D58();
  v20 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E4B8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E68A0AC();
  sub_20E6EA9C4();
  sub_20E68A134(v3, (uint64_t)v28);
  sub_20E68A134((uint64_t)v28, (uint64_t)v22);
  v29 = 0;
  sub_20E66AD88();
  sub_20E6EA868();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v12 = v8;
  v13 = *(_OWORD *)(v3 + 32);
  v14 = *(_OWORD *)(v3 + 64);
  v25 = *(_OWORD *)(v3 + 48);
  v26 = v14;
  v15 = *(_OWORD *)(v3 + 32);
  v24[0] = *(_OWORD *)(v3 + 16);
  v24[1] = v15;
  v16 = *(_OWORD *)(v3 + 64);
  v22[2] = v25;
  v22[3] = v16;
  v27 = *(_QWORD *)(v3 + 80);
  v23 = *(_QWORD *)(v3 + 80);
  v22[0] = v24[0];
  v22[1] = v13;
  sub_20E6E9D94();
  swift_allocObject();
  sub_20E68A17C((uint64_t)v24);
  sub_20E6E9D88();
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v6, *MEMORY[0x24BE10188], v21);
  sub_20E6E9D64();
  sub_20E68A1F4();
  v17 = sub_20E6E9D70();
  v19 = v18;
  swift_release();
  sub_20E68A238((uint64_t)v24);
  *(_QWORD *)&v22[0] = v17;
  *((_QWORD *)&v22[0] + 1) = v19;
  v29 = 1;
  sub_20E6EA88C();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v7);
  return sub_20E6673F4(v17, v19);
}

BOOL sub_20E689AD8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  uint64_t v8;
  _OWORD v9[5];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v7[4] = *(_OWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_20E689B40((uint64_t)v7, (uint64_t)v9);
}

BOOL sub_20E689B40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD v16[4];
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    if (v7 >> 60 == 15)
      goto LABEL_7;
    goto LABEL_5;
  }
  if (v7 >> 60 == 15)
  {
LABEL_5:
    sub_20E66A9D4(*(_QWORD *)a1, v5);
    sub_20E66A9D4(v6, v7);
    sub_20E66AA28(v4, v5);
    sub_20E66AA28(v6, v7);
    return 0;
  }
  sub_20E66A9D4(*(_QWORD *)a1, v5);
  sub_20E66A9D4(v6, v7);
  sub_20E6B0F54(v4, v5);
  v9 = v8;
  sub_20E66AA28(v6, v7);
  sub_20E66AA28(v4, v5);
  if ((v9 & 1) == 0)
    return 0;
LABEL_7:
  v10 = *(_OWORD *)(a1 + 64);
  v18[2] = *(_OWORD *)(a1 + 48);
  v18[3] = v10;
  v19 = *(_QWORD *)(a1 + 80);
  v11 = *(_OWORD *)(a1 + 32);
  v18[0] = *(_OWORD *)(a1 + 16);
  v18[1] = v11;
  v12 = *(_OWORD *)(a2 + 64);
  v16[2] = *(_OWORD *)(a2 + 48);
  v16[3] = v12;
  v17 = *(_QWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 32);
  v16[0] = *(_OWORD *)(a2 + 16);
  v16[1] = v13;
  return sub_20E69BB18((uint64_t)v18, (uint64_t)v16);
}

uint64_t sub_20E689C78(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E6964646170 && a2 == 0xE700000000000000;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000020E6F7D00)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20E689D64@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char v45;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E4A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E68A0AC();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v34 = a2;
  v45 = 0;
  sub_20E66AE8C();
  sub_20E6EA7D8();
  v9 = v35;
  v10 = v36;
  v45 = 1;
  sub_20E66A9D4(v35, v36);
  sub_20E6EA7FC();
  v33 = v9;
  v11 = v35;
  v12 = v36;
  sub_20E6E9D40();
  swift_allocObject();
  sub_20E6E9D34();
  sub_20E68A0F0();
  sub_20E6E9D1C();
  sub_20E6673F4(v11, v12);
  swift_release();
  v13 = v37;
  v26 = v35;
  v27 = v38;
  v28 = v39;
  v29 = v37;
  v30 = v40;
  v31 = v36;
  v44 = v41;
  v14 = v43;
  v32 = v42;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v33;
  sub_20E66A9D4(v33, v10);
  swift_bridgeObjectRetain();
  v16 = v26;
  swift_bridgeObjectRetain();
  v17 = v27;
  sub_20E66A990(v13, v27);
  swift_bridgeObjectRetain();
  v18 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_20E66AA28(v15, v10);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  sub_20E66AA28(v15, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = v29;
  sub_20E6673F4(v29, v17);
  v20 = v14;
  swift_bridgeObjectRelease();
  v21 = v32;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v23 = v34;
  *v34 = v15;
  v23[1] = v10;
  v24 = v31;
  v23[2] = v16;
  v23[3] = v24;
  v23[4] = v19;
  v23[5] = v17;
  v25 = v30;
  v23[6] = v18;
  v23[7] = v25;
  *((_BYTE *)v23 + 64) = v44;
  v23[9] = v21;
  v23[10] = v20;
  return result;
}

unint64_t sub_20E68A0AC()
{
  unint64_t result;

  result = qword_254A2E4A8;
  if (!qword_254A2E4A8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF000, &type metadata for ASCABLEPostHandshakeMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E4A8);
  }
  return result;
}

unint64_t sub_20E68A0F0()
{
  unint64_t result;

  result = qword_254A2E4B0;
  if (!qword_254A2E4B0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F03F8, &type metadata for ASCTAPGetInfoResponse);
    atomic_store(result, (unint64_t *)&qword_254A2E4B0);
  }
  return result;
}

uint64_t sub_20E68A134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E4C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_20E68A17C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_20E66A990(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_20E68A1F4()
{
  unint64_t result;

  result = qword_254A2E4C8;
  if (!qword_254A2E4C8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F03D0, &type metadata for ASCTAPGetInfoResponse);
    atomic_store(result, (unint64_t *)&qword_254A2E4C8);
  }
  return result;
}

uint64_t sub_20E68A238(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_20E6673F4(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t storeEnumTagSinglePayload for ASCABLEPostHandshakeMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20E68A2FC + 4 * byte_20E6EEE35[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20E68A330 + 4 * asc_20E6EEE30[v4]))();
}

uint64_t sub_20E68A330(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E68A338(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E68A340);
  return result;
}

uint64_t sub_20E68A34C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E68A354);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20E68A358(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E68A360(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCABLEPostHandshakeMessage.CodingKeys()
{
  return &type metadata for ASCABLEPostHandshakeMessage.CodingKeys;
}

unint64_t sub_20E68A380()
{
  unint64_t result;

  result = qword_254A2E4D0;
  if (!qword_254A2E4D0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EEFD8, &type metadata for ASCABLEPostHandshakeMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E4D0);
  }
  return result;
}

unint64_t sub_20E68A3C8()
{
  unint64_t result;

  result = qword_254A2E4D8;
  if (!qword_254A2E4D8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EEF10, &type metadata for ASCABLEPostHandshakeMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E4D8);
  }
  return result;
}

unint64_t sub_20E68A410()
{
  unint64_t result;

  result = qword_254A2E4E0;
  if (!qword_254A2E4E0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EEF38, &type metadata for ASCABLEPostHandshakeMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E4E0);
  }
  return result;
}

uint64_t sub_20E68A454@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E6E9D94();
  swift_allocObject();
  sub_20E6E9D88();
  v6 = v1[1];
  v14 = *v1;
  v15 = v6;
  v16[0] = v1[2];
  *(_DWORD *)((char *)v16 + 15) = *(_DWORD *)((char *)v1 + 47);
  sub_20E68CC90();
  v7 = sub_20E6E9D70();
  v9 = v8;
  swift_release();
  sub_20E68BC94(v7, v9);
  *(_QWORD *)&v14 = 0x2F3A4F444946;
  *((_QWORD *)&v14 + 1) = 0xE600000000000000;
  sub_20E6EA280();
  swift_bridgeObjectRelease();
  sub_20E6E9BB4();
  swift_bridgeObjectRelease();
  v10 = sub_20E6E9BC0();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v10) == 1)
  {
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    sub_20E6673F4(v7, v9);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v5, v10);
  }
  return result;
}

void sub_20E68A5E8()
{
  off_254A2E4E8 = &unk_24C97FAF8;
}

uint64_t sub_20E68A604(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20E68A63C + 4 * byte_20E6EF050[a1]))(0x654B63696C627570, 0xE900000000000079);
}

uint64_t sub_20E68A63C()
{
  return 0x697274656D6D7973;
}

unint64_t sub_20E68A65C()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_20E68A678()
{
  return 0x54746E6572727563;
}

unint64_t sub_20E68A698()
{
  return 0xD000000000000021;
}

uint64_t sub_20E68A6B8()
{
  return 0x5474736575716572;
}

unint64_t sub_20E68A6DC@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_20E68C0AC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_20E68A704()
{
  unsigned __int8 *v0;

  return sub_20E68A604(*v0);
}

uint64_t sub_20E68A70C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E68C0BC(a1, a2);
  *a3 = result;
  return result;
}

unint64_t sub_20E68A730@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_20E68C0AC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_20E68A754()
{
  sub_20E68CB3C();
  return sub_20E6EA9D0();
}

uint64_t sub_20E68A77C()
{
  sub_20E68CB3C();
  return sub_20E6EA9DC();
}

uint64_t sub_20E68A7A4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  __int16 v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;

  v44 = xmmword_20E6EE5A0;
  v9 = sub_20E6EA490();
  if ((v10 & 1) == 0)
  {
    v11 = a1;
    while (v9 >> 14 >= v11 >> 14)
    {
      v15 = v9;
      v16 = sub_20E6EA4A8();
      if ((v16 ^ v17) < 0x4000)
        goto LABEL_30;
      v20 = v16;
      v21 = v17;
      v22 = v18;
      v23 = v19;
      sub_20E68B49C(v16, v17, v18, v19, 10);
      if ((v24 & 0x100) != 0)
      {
        sub_20E6E0008(v20, v21, v22, v23, 10);
        if ((v25 & 1) != 0)
        {
LABEL_9:
          __break(1u);
          goto LABEL_10;
        }
      }
      else if ((v24 & 1) != 0)
      {
        goto LABEL_9;
      }
      sub_20E6A4FF4();
      sub_20E68AB30(1, v12, v13);
      sub_20E66A990(v42, v43);
      v4 = (uint64_t)&v44;
      sub_20E676D00(v42, v43);
      sub_20E6673F4(v42, v43);
      sub_20E6673F4(v42, v43);
      swift_bridgeObjectRelease();
      v9 = sub_20E6EA490();
      v11 = v15;
      if ((v14 & 1) != 0)
        goto LABEL_11;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_once();
    goto LABEL_13;
  }
LABEL_10:
  v15 = a1;
LABEL_11:
  if (v15 >> 14 >= a2 >> 14)
    return v44;
  v4 = sub_20E6EA4A8();
  a3 = v26;
  a2 = v27;
  a4 = v28;
  if (qword_254A2DBD8 != -1)
    goto LABEL_31;
LABEL_13:
  v29 = off_254A2E4E8;
  swift_bridgeObjectRetain();
  v30 = sub_20E6EA49C();
  v31 = v29[2];
  if (!v31)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20E6673F4(v44, *((unint64_t *)&v44 + 1));
    return 0;
  }
  if (v29[4] != v30)
  {
    v32 = 0;
    v33 = v31 - 1;
    while (v33 != v32)
    {
      v34 = v29[v32++ + 5];
      if (v34 == v30)
        goto LABEL_19;
    }
    goto LABEL_24;
  }
  v32 = 0;
LABEL_19:
  result = swift_bridgeObjectRelease();
  if (__OFADD__(v32, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if ((v4 ^ a3) < 0x4000)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  result = sub_20E68B49C(v4, a3, a2, a4, 10);
  if ((v36 & 0x100) != 0)
  {
    swift_bridgeObjectRetain();
    sub_20E6E0008(v4, a3, a2, a4, 10);
    v38 = v37;
    result = swift_bridgeObjectRelease();
    if ((v38 & 1) == 0)
      goto LABEL_26;
  }
  else if ((v36 & 1) == 0)
  {
LABEL_26:
    sub_20E6A4FF4();
    v41 = v40;
    result = 7 - v32;
    if (!__OFSUB__(8, v32 + 1))
    {
      sub_20E687200(result, v41, v39);
      sub_20E66A990(v42, v43);
      sub_20E676D00(v42, v43);
      sub_20E6673F4(v42, v43);
      sub_20E6673F4(v42, v43);
      swift_bridgeObjectRelease();
      return v44;
    }
    goto LABEL_34;
  }
LABEL_35:
  __break(1u);
  return result;
}

void sub_20E68AB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X11 }
  __break(1u);
  JUMPOUT(0x20E68ACCCLL);
}

uint64_t sub_20E68AD1C(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  __int128 v12;
  char v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E510);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E68CB3C();
  sub_20E6EA9C4();
  v12 = *v3;
  v11 = 0;
  sub_20E66AD88();
  sub_20E6EA88C();
  if (!v2)
  {
    v12 = v3[1];
    v11 = 1;
    sub_20E6EA88C();
    LOBYTE(v12) = 2;
    sub_20E6EA8A4();
    LOBYTE(v12) = 3;
    sub_20E6EA850();
    LOBYTE(v12) = 4;
    sub_20E6EA844();
    sub_20E68C85C((uint64_t)v3 + 50, (uint64_t)&v13);
    sub_20E68C85C((uint64_t)&v13, (uint64_t)&v12);
    v11 = 5;
    sub_20E68CBC4();
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double sub_20E68AF2C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  double v7[3];

  sub_20E68C368(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = v7[0];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)v7;
    *(_DWORD *)(a2 + 47) = *(_DWORD *)((char *)&v7[1] + 7);
  }
  return result;
}

uint64_t sub_20E68AF78(_QWORD *a1)
{
  return sub_20E68AD1C(a1);
}

BOOL sub_20E68AFB8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6[0] = *(_OWORD *)(a1 + 32);
  *(_DWORD *)((char *)v6 + 15) = *(_DWORD *)(a1 + 47);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8[0] = *(_OWORD *)(a2 + 32);
  *(_DWORD *)((char *)v8 + 15) = *(_DWORD *)(a2 + 47);
  return sub_20E68B56C((uint64_t)v5, (uint64_t)v7);
}

uint64_t static _ASCABLEQRCodeUtilities.isPasskeyURL(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  sub_20E6E9BA8();
  if (!v0)
    return 0;
  v1 = sub_20E6EA214();
  v3 = v2;
  swift_bridgeObjectRelease();
  if (v1 == 1868851558 && v3 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    return v5 & 1;
  }
}

uint64_t static _ASCABLEQRCodeUtilities.isPasskeyRegistrationURL(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v13[6];
  _BYTE v14[6];

  v2 = sub_20E6E9BC0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v13[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E6E9BA8();
  if (!v6)
    return 0;
  v7 = sub_20E6EA214();
  v9 = v8;
  swift_bridgeObjectRelease();
  if (v7 == 1868851558 && v9 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v10 & 1) == 0)
      return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  sub_20E68BAC0((uint64_t)v5, (uint64_t)v13);
  sub_20E67BEAC(v13);
  sub_20E68C85C((uint64_t)v14, (uint64_t)&v14[4]);
  sub_20E68C85C((uint64_t)&v14[4], (uint64_t)&v14[5]);
  return v14[5] & 1;
}

id _ASCABLEQRCodeUtilities.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_20E68B49C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t result;
  char v13;
  _QWORD v14[2];
  char v15;

  if ((a4 & 0x1000000000000000) != 0)
  {
    result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v11 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v11 = (_QWORD *)sub_20E6EA664();
  }
  result = sub_20E68B6A4((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

BOOL sub_20E68B56C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  int v7;
  int v8;
  _BOOL8 result;
  _BOOL4 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  sub_20E6B0F54(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v4 & 1) == 0)
    return 0;
  sub_20E6B0F54(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  if ((v5 & 1) == 0 || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    return 0;
  v6 = *(_BYTE *)(a2 + 48);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 48))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
      v6 = 1;
    if ((v6 & 1) != 0)
      return 0;
  }
  v7 = *(unsigned __int8 *)(a1 + 49);
  v8 = *(unsigned __int8 *)(a2 + 49);
  if (v7 == 2)
  {
    if (v8 != 2)
      return 0;
LABEL_15:
    v11 = *(unsigned __int8 *)(a1 + 50);
    v12 = *(unsigned __int8 *)(a2 + 50);
    if (v11 == 2)
      return v12 == 2;
    if (v12 != 2)
    {
      if ((v11 & 1) != 0)
        v13 = 25453;
      else
        v13 = 24935;
      if ((v12 & 1) != 0)
        v14 = 25453;
      else
        v14 = 24935;
      if (v13 == v14)
      {
        swift_bridgeObjectRelease_n();
        return 1;
      }
      v15 = sub_20E6EA8EC();
      swift_bridgeObjectRelease_n();
      if ((v15 & 1) != 0)
        return 1;
    }
    return 0;
  }
  result = 0;
  v10 = (v7 & 1) == 0;
  if (v8 != 2 && ((v10 ^ v8) & 1) != 0)
    goto LABEL_15;
  return result;
}

uint64_t sub_20E68B6A4(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  BOOL v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned int v38;
  char v39;
  unint64_t v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  unsigned __int8 v48;

  v10 = a2;
  v11 = result;
  v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0)
    LOBYTE(v12) = 1;
  v13 = 4 << v12;
  v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    result = sub_20E6DFE20(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      v15 = a2 >> 16;
      if (v14 != v13)
        goto LABEL_6;
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0)
    v16 = HIBYTE(a5) & 0xF;
  if (v16 < a2 >> 16)
    goto LABEL_96;
  result = sub_20E6EA2BC();
  v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    result = sub_20E6DFE20(v10, a4, a5);
    v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    result = sub_20E6DFE20(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0)
      goto LABEL_8;
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0)
    v17 = a4 & 0xFFFFFFFFFFFFLL;
  if (v17 < v10 >> 16)
    goto LABEL_92;
  if (v17 < a3 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  result = sub_20E6EA2BC();
LABEL_21:
  v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v18 < v15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11)
    v19 = 0;
  v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        v33 = a6 + 48;
        v34 = a6 + 55;
        v35 = a6 + 87;
        if (a6 > 10)
        {
          v33 = 58;
        }
        else
        {
          v35 = 97;
          v34 = 65;
        }
        if (v19)
        {
          v24 = 0;
          v36 = v19 + 1;
          v37 = result - 1;
          do
          {
            v38 = *v36;
            if (v38 < 0x30 || v38 >= v33)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                v29 = 0;
                if (v38 < 0x61 || v38 >= v35)
                  return v29;
                v39 = -87;
              }
              else
              {
                v39 = -55;
              }
            }
            else
            {
              v39 = -48;
            }
            if (!is_mul_ok(v24, a6))
              return 0;
            v40 = v24 * a6;
            v41 = v38 + v39;
            v32 = __CFADD__(v40, v41);
            v24 = v40 + v41;
            if (v32)
              return 0;
            ++v36;
            --v37;
          }
          while (v37);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      v42 = a6 + 48;
      v43 = a6 + 55;
      v44 = a6 + 87;
      if (a6 > 10)
      {
        v42 = 58;
      }
      else
      {
        v44 = 97;
        v43 = 65;
      }
      if (v19)
      {
        v24 = 0;
        while (1)
        {
          v45 = *v19;
          if (v45 < 0x30 || v45 >= v42)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              v29 = 0;
              if (v45 < 0x61 || v45 >= v44)
                return v29;
              v46 = -87;
            }
            else
            {
              v46 = -55;
            }
          }
          else
          {
            v46 = -48;
          }
          if (!is_mul_ok(v24, a6))
            return 0;
          v47 = v24 * a6;
          v48 = v45 + v46;
          v32 = __CFADD__(v47, v48);
          v24 = v47 + v48;
          if (v32)
            return 0;
          ++v19;
          if (!--result)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      v21 = a6 + 48;
      v22 = a6 + 55;
      v23 = a6 + 87;
      if (a6 > 10)
      {
        v21 = 58;
      }
      else
      {
        v23 = 97;
        v22 = 65;
      }
      if (v19)
      {
        v24 = 0;
        v25 = v19 + 1;
        v26 = result - 1;
        while (1)
        {
          v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              v29 = 0;
              if (v27 < 0x61 || v27 >= v23)
                return v29;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          if (!is_mul_ok(v24, a6))
            return 0;
          v30 = v24 * a6;
          v31 = v27 + v28;
          v32 = v30 >= v31;
          v24 = v30 - v31;
          if (!v32)
            return 0;
          ++v25;
          if (!--v26)
            return v24;
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

uint64_t sub_20E68BAC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  char v24;
  __int16 v25;

  v5 = sub_20E6E9B9C();
  v7 = sub_20E688358(1uLL, v5, v6);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  swift_bridgeObjectRelease();
  v14 = sub_20E68A7A4(v7, v9, v11, v13);
  v16 = v15;
  swift_bridgeObjectRelease();
  if (v16 >> 60 == 15)
  {
    sub_20E68CC08();
    swift_allocError();
    swift_willThrow();
    v17 = sub_20E6E9BC0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(a1, v17);
  }
  else
  {
    sub_20E6E9D40();
    swift_allocObject();
    sub_20E6E9D34();
    sub_20E68CC4C();
    sub_20E6E9D1C();
    v19 = sub_20E6E9BC0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
    swift_release();
    result = sub_20E66AA28(v14, v16);
    if (!v2)
    {
      *(_OWORD *)a2 = v20;
      *(_OWORD *)(a2 + 16) = v21;
      *(_BYTE *)(a2 + 32) = v22;
      *(_QWORD *)(a2 + 40) = v23;
      *(_BYTE *)(a2 + 48) = v24;
      *(_WORD *)(a2 + 49) = v25;
    }
  }
  return result;
}

void sub_20E68BC94(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_20E68BD18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;

  if ((v18 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x20E68C054);
  }
  if (v17 >= v3)
  {
    v5 = sub_20E6E9C50();
    sub_20E6A4BE8(v5, v6);
    v8 = v7;
    sub_20E6EA8B0();
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    sub_20E6EA280();
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E538);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = v19;
    *(_QWORD *)(v9 + 56) = MEMORY[0x24BEE4568];
    *(_QWORD *)(v9 + 64) = MEMORY[0x24BEE45B8];
    *(_QWORD *)(v9 + 32) = v8;
    sub_20E6EA1E4();
    swift_bridgeObjectRelease();
    sub_20E6EA280();
    a1 = swift_bridgeObjectRelease();
    if (!__OFADD__(v3, 7))
      JUMPOUT(0x20E68BD00);
    __break(1u);
  }
  v10 = v2;
  if (v16)
  {
    if (v16 == 1)
    {
      v10 = v17;
      if ((v18 & 1) != 0)
      {
        __break(1u);
        JUMPOUT(0x20E68BE54);
      }
    }
    else
    {
      v12 = *(_QWORD *)(v1 + 16);
      v11 = *(_QWORD *)(v1 + 24);
      v13 = __OFSUB__(v11, v12);
      v10 = v11 - v12;
      if (v13)
      {
        __break(1u);
        JUMPOUT(0x20E68C084);
      }
    }
  }
  if (a1 < v10)
  {
    if (v16)
    {
      if (v16 == 1)
      {
        v4 = (int)v1;
        v2 = v1 >> 32;
      }
      else
      {
        v4 = *(_QWORD *)(v1 + 16);
        v2 = *(_QWORD *)(v1 + 24);
      }
    }
    if (v2 < a1 || v2 < v4)
    {
      __break(1u);
    }
    else
    {
      sub_20E6E9C50();
      v1 = v14;
      if (qword_254A2DBD8 == -1)
        goto LABEL_19;
    }
    swift_once();
LABEL_19:
    __asm { BR              X12 }
  }
  return v20;
}

unint64_t sub_20E68C0AC(unint64_t result)
{
  if (result >= 6)
    return 6;
  return result;
}

uint64_t sub_20E68C0BC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x654B63696C627570 && a2 == 0xE900000000000079;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697274656D6D7973 && a2 == 0xEC00000079654B63 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x800000020E6F7DA0 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x54746E6572727563 && a2 == 0xEB00000000656D69 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x800000020E6F7DC0 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x5474736575716572 && a2 == 0xEB00000000657079)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_20E68C368@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  unint64_t v16;
  uint64_t result;
  uint64_t *v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E4F8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E68CB3C();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v23 = a2;
  v27 = 0;
  sub_20E66AE8C();
  sub_20E6EA7FC();
  v10 = v24;
  v9 = v25;
  v27 = 1;
  sub_20E66A990(v24, v25);
  sub_20E6EA7FC();
  v22 = v9;
  v12 = v24;
  v11 = v25;
  LOBYTE(v24) = 2;
  sub_20E66A990(v12, v25);
  v26 = sub_20E6EA814();
  LOBYTE(v24) = 3;
  v13 = sub_20E6EA7C0();
  v20 = v14;
  v21 = v13;
  LOBYTE(v24) = 4;
  v19 = sub_20E6EA7B4();
  v27 = 5;
  sub_20E68CB80();
  sub_20E6EA7D8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v24;
  v16 = v22;
  sub_20E66A990(v10, v22);
  sub_20E66A990(v12, v11);
  sub_20E6673F4(v12, v11);
  sub_20E6673F4(v10, v16);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  sub_20E6673F4(v10, v16);
  result = sub_20E6673F4(v12, v11);
  v18 = v23;
  *v23 = v10;
  v18[1] = v16;
  v18[2] = v12;
  v18[3] = v11;
  *((_BYTE *)v18 + 32) = v26;
  v18[5] = v21;
  *((_BYTE *)v18 + 48) = v20 & 1;
  *((_BYTE *)v18 + 49) = v19;
  *((_BYTE *)v18 + 50) = v15;
  return result;
}

uint64_t _s26AuthenticationServicesCore23_ASCABLEQRCodeUtilitiesC13passkeURLType4fromSo010_ASPasskeyG0V10Foundation3URLV_tFZ_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v14[6];
  _BYTE v15[6];

  v2 = sub_20E6E9BC0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E6E9BA8();
  if (!v6)
    return 0;
  v7 = sub_20E6EA214();
  v9 = v8;
  swift_bridgeObjectRelease();
  if (v7 == 1868851558 && v9 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v10 = sub_20E6EA8EC();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
    return 0;
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  sub_20E68BAC0((uint64_t)v5, (uint64_t)v14);
  sub_20E67BEAC(v14);
  sub_20E68C85C((uint64_t)v15, (uint64_t)&v15[4]);
  sub_20E68C85C((uint64_t)&v15[4], (uint64_t)&v15[5]);
  v12 = 1;
  if ((v15[5] & 1) != 0)
    v12 = 2;
  if (v15[5] == 2)
    return 0;
  else
    return v12;
}

uint64_t sub_20E68C85C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E4F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for _ASCABLEQRCodeUtilities()
{
  return objc_opt_self();
}

uint64_t destroy for ASCABLEQRCode(uint64_t a1)
{
  sub_20E6673F4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return sub_20E6673F4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for ASCABLEQRCode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_20E66A990(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_20E66A990(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  return a1;
}

uint64_t assignWithCopy for ASCABLEQRCode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_20E66A990(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_20E6673F4(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_20E66A990(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_20E6673F4(v10, v11);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v12;
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  return a1;
}

__n128 __swift_memcpy51_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 47);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ASCABLEQRCode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_20E6673F4(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_20E6673F4(v6, v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCABLEQRCode(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 51))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 49);
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCABLEQRCode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 50) = 0;
    *(_WORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 51) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 51) = 0;
    if (a2)
      *(_BYTE *)(result + 49) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCABLEQRCode()
{
  return &type metadata for ASCABLEQRCode;
}

unint64_t sub_20E68CB3C()
{
  unint64_t result;

  result = qword_254A2E500;
  if (!qword_254A2E500)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF2CC, &type metadata for ASCABLEQRCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E500);
  }
  return result;
}

unint64_t sub_20E68CB80()
{
  unint64_t result;

  result = qword_254A2E508;
  if (!qword_254A2E508)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFCAC, &type metadata for ASCABLERequestType);
    atomic_store(result, (unint64_t *)&qword_254A2E508);
  }
  return result;
}

unint64_t sub_20E68CBC4()
{
  unint64_t result;

  result = qword_254A2E518;
  if (!qword_254A2E518)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFC84, &type metadata for ASCABLERequestType);
    atomic_store(result, (unint64_t *)&qword_254A2E518);
  }
  return result;
}

unint64_t sub_20E68CC08()
{
  unint64_t result;

  result = qword_254A2E520;
  if (!qword_254A2E520)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF28C, &type metadata for ASCABLEQRCode.URLError);
    atomic_store(result, (unint64_t *)&qword_254A2E520);
  }
  return result;
}

unint64_t sub_20E68CC4C()
{
  unint64_t result;

  result = qword_254A2E528;
  if (!qword_254A2E528)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF0F8, &type metadata for ASCABLEQRCode);
    atomic_store(result, (unint64_t *)&qword_254A2E528);
  }
  return result;
}

unint64_t sub_20E68CC90()
{
  unint64_t result;

  result = qword_254A2E530;
  if (!qword_254A2E530)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF0D0, &type metadata for ASCABLEQRCode);
    atomic_store(result, (unint64_t *)&qword_254A2E530);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ASCABLEQRCode.URLError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20E68CD14 + 4 * byte_20E6EF056[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20E68CD34 + 4 * byte_20E6EF05B[v4]))();
}

_BYTE *sub_20E68CD14(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20E68CD34(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E68CD3C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E68CD44(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E68CD4C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E68CD54(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ASCABLEQRCode.URLError()
{
  return &type metadata for ASCABLEQRCode.URLError;
}

uint64_t getEnumTagSinglePayload for ASCABLEQRCode.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCABLEQRCode.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_20E68CE4C + 4 * byte_20E6EF065[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_20E68CE80 + 4 * byte_20E6EF060[v4]))();
}

uint64_t sub_20E68CE80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E68CE88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E68CE90);
  return result;
}

uint64_t sub_20E68CE9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E68CEA4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_20E68CEA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E68CEB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCABLEQRCode.CodingKeys()
{
  return &type metadata for ASCABLEQRCode.CodingKeys;
}

unint64_t sub_20E68CED0()
{
  unint64_t result;

  result = qword_254A2E540;
  if (!qword_254A2E540)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF1FC, &type metadata for ASCABLEQRCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E540);
  }
  return result;
}

unint64_t sub_20E68CF18()
{
  unint64_t result;

  result = qword_254A2E548;
  if (!qword_254A2E548)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF264, &type metadata for ASCABLEQRCode.URLError);
    atomic_store(result, (unint64_t *)&qword_254A2E548);
  }
  return result;
}

unint64_t sub_20E68CF60()
{
  unint64_t result;

  result = qword_254A2E550;
  if (!qword_254A2E550)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF134, &type metadata for ASCABLEQRCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E550);
  }
  return result;
}

unint64_t sub_20E68CFA8()
{
  unint64_t result;

  result = qword_254A2E558;
  if (!qword_254A2E558)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF15C, &type metadata for ASCABLEQRCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E558);
  }
  return result;
}

uint64_t static ASCPublicKeyCredentialAssertionExtensionInputs.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t sub_20E68CFFC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;

  sub_20E6E9998();
  swift_allocObject();
  sub_20E6E998C();
  type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs();
  sub_20E66A8D4((unint64_t *)&unk_254A2E570, v2, (uint64_t (*)(uint64_t))type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs, (uint64_t)&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionInputs);
  v3 = sub_20E6E9980();
  v5 = v4;
  swift_release();
  v6 = (void *)sub_20E6E9C68();
  v7 = (void *)sub_20E6EA1C0();
  objc_msgSend(a1, sel_encodeObject_forKey_, v6, v7);

  return sub_20E6673F4(v3, v5);
}

uint64_t type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs()
{
  return objc_opt_self();
}

id ASCPublicKeyCredentialAssertionExtensionInputs.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ASCPublicKeyCredentialAssertionExtensionInputs.init(coder:)(a1);
}

id ASCPublicKeyCredentialAssertionExtensionInputs.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v39;
  char *v40;
  void *v41;
  uint64_t v42;
  objc_class *v43;
  unint64_t v44;
  void *v45;
  objc_super v46;
  uint64_t v47;
  uint64_t v48[3];

  swift_getObjectType();
  sub_20E667A94();
  v3 = v1;
  v4 = sub_20E6EA448();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = sub_20E6E9C80();
    v8 = v7;

    sub_20E6E9974();
    swift_allocObject();
    sub_20E6E9968();
    sub_20E66A8D4(&qword_254A2E580, v9, (uint64_t (*)(uint64_t))type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs, (uint64_t)&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionInputs);
    sub_20E6E995C();

    swift_release();
    v17 = v48[0];
    v43 = (objc_class *)type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs();
    v18 = (char *)objc_allocWithZone(v43);
    v19 = (uint64_t *)&v18[OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob];
    *(_OWORD *)&v18[OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob] = xmmword_20E6EF320;
    v44 = v8;
    v45 = a1;
    v20 = (uint64_t *)&v18[OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_prf];
    *(_OWORD *)v20 = 0u;
    *((_OWORD *)v20 + 1) = 0u;
    v20[4] = 1;
    v21 = (uint64_t *)(v17
                    + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob);
    v22 = v17;
    v41 = (void *)v17;
    swift_beginAccess();
    v24 = *v21;
    v23 = v21[1];
    swift_beginAccess();
    v42 = v6;
    v26 = *v19;
    v25 = v19[1];
    *v19 = v24;
    v19[1] = v23;
    v40 = v18;
    sub_20E690820(v24, v23);
    sub_20E690834(v26, v25);
    v27 = (uint64_t *)(v22
                    + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_prf);
    swift_beginAccess();
    v28 = *v27;
    v29 = v27[1];
    v30 = v27[2];
    v31 = v27[3];
    v32 = v27[4];
    swift_beginAccess();
    v33 = *v20;
    v34 = v20[1];
    v35 = v20[2];
    v36 = v20[3];
    v39 = v20[4];
    *v20 = v28;
    v20[1] = v29;
    v20[2] = v30;
    v20[3] = v31;
    v20[4] = v32;
    sub_20E677C6C(v28, v29, v30, v31, v32);
    sub_20E690848(v33, v34, v35, v36, v39, (void (*)(void))sub_20E692464);

    v46.receiver = v40;
    v46.super_class = v43;
    v37 = objc_msgSendSuper2(&v46, sel_init);

    sub_20E6673F4(v42, v44);
    swift_getObjectType();
    swift_deallocPartialClassInstance();
  }
  else
  {

    if (qword_254A2DBE8 != -1)
      swift_once();
    v10 = sub_20E6E9F50();
    __swift_project_value_buffer(v10, (uint64_t)qword_254A3ED50);
    v11 = sub_20E6E9F38();
    v12 = sub_20E6EA3E8();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v48[0] = v14;
      *(_DWORD *)v13 = 136446210;
      v15 = sub_20E6EA9E8();
      v47 = sub_20E66A2F8(v15, v16, v48);
      sub_20E6EA4C0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20E648000, v11, v12, "Could not find encoded json for %{public}s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x212BC3A38](v14, -1, -1);
      MEMORY[0x212BC3A38](v13, -1, -1);
    }

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v37;
}

id ASCPublicKeyCredentialAssertionExtensionInputs.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id ASCPublicKeyCredentialAssertionExtensionInputs.init()()
{
  char *v0;
  char *v1;
  objc_super v3;

  *(_OWORD *)&v0[OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob] = xmmword_20E6EF320;
  v1 = &v0[OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_prf];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 1;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs();
  return objc_msgSendSuper2(&v3, sel_init);
}

BOOL sub_20E68D960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob;
  swift_beginAccess();
  if (*(_QWORD *)(v1 + 8) >> 60 != 11)
    return 1;
  v2 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_prf;
  swift_beginAccess();
  return *(_QWORD *)(v2 + 32) != 1;
}

uint64_t sub_20E68DA68()
{
  uint64_t v0;
  uint64_t v1;
  _BOOL8 v2;
  uint64_t v3;

  v1 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob;
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 8) >> 60 != 11;
  v3 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_prf;
  swift_beginAccess();
  if (*(_QWORD *)(v3 + 32) == 1)
    return v2;
  else
    return 2;
}

uint64_t sub_20E68DAF0()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25[16];

  swift_getObjectType();
  v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob);
  swift_beginAccess();
  v2 = v1[1];
  if (v2 >> 60 == 11)
    return 0;
  v3 = *v1;
  if (v2 >> 60 == 15)
  {
    v13 = *v1;
    v14 = v1[1];
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0xF000000000000000;
    v9 = 1;
    v10 = 1;
  }
  else
  {
    sub_20E66A9D4(v3, v2);
    sub_20E66A9D4(v3, v2);
    ASCTAPLargeBlobExtensionInput.init(support:read:uncompressedWrite:)(0, 0, 2, v3, v2, (uint64_t)&v15);
    v13 = v3;
    v14 = v2;
    v4 = v15;
    v5 = v16;
    v9 = v17;
    v6 = v18;
    v8 = v19;
    v7 = v20;
    v10 = v21;
  }
  v15 = v4;
  v16 = v5;
  v17 = v9;
  v18 = v6;
  v19 = v8;
  v20 = v7;
  v21 = v10;
  v22 = 0u;
  v23 = 0u;
  v24 = 1;
  v25[0] = 1;
  v12 = ASCTAPExtensionInput.encode(for:)(v25);
  sub_20E690834(v13, v14);
  sub_20E66AA3C(v4, v5, v9, v6, v8);
  sub_20E690848(0, 0, 0, 0, 1, (void (*)(void))sub_20E66AAA8);
  return v12;
}

uint64_t sub_20E68DF38@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (uint64_t *)(*a1
                 + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  *a2 = *v3;
  a2[1] = v5;
  return sub_20E690820(v4, v5);
}

uint64_t sub_20E68DF8C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(*a2
                 + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob);
  swift_beginAccess();
  v5 = *v4;
  v6 = v4[1];
  *v4 = v2;
  v4[1] = v3;
  sub_20E690820(v2, v3);
  return sub_20E690834(v5, v6);
}

uint64_t sub_20E68E004@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return sub_20E690820(v4, v5);
}

uint64_t sub_20E68E054(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob);
  swift_beginAccess();
  v5 = *v4;
  v6 = v4[1];
  *v4 = v2;
  v4[1] = v3;
  return sub_20E690834(v5, v6);
}

uint64_t (*sub_20E68E0AC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_20E68E0F0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_prf);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  *a2 = *v3;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  return sub_20E677C6C(v4, v5, v6, v7, v8);
}

uint64_t sub_20E68E154(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = (uint64_t *)(*a2 + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_prf);
  swift_beginAccess();
  v8 = *v7;
  v9 = v7[1];
  v10 = v7[2];
  v11 = v7[3];
  v13 = v7[4];
  *v7 = v2;
  v7[1] = v3;
  v7[2] = v4;
  v7[3] = v5;
  v7[4] = v6;
  sub_20E677C6C(v2, v3, v4, v5, v6);
  return sub_20E690848(v8, v9, v10, v11, v13, (void (*)(void))sub_20E692464);
}

uint64_t sub_20E68E218@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_prf);
  swift_beginAccess();
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  return sub_20E677C6C(v4, v5, v6, v7, v8);
}

uint64_t sub_20E68E278(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v12 = *(_OWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_prf);
  swift_beginAccess();
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  v9 = v5[3];
  v10 = v5[4];
  *v5 = v2;
  v5[1] = v3;
  *((_OWORD *)v5 + 1) = v12;
  v5[4] = v4;
  return sub_20E690848(v6, v7, v8, v9, v10, (void (*)(void))sub_20E692464);
}

uint64_t (*sub_20E68E300())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_20E68E344()
{
  _BYTE *v0;

  if (*v0)
    return 0x6574697277;
  else
    return 1684104562;
}

uint64_t sub_20E68E374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E692194(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E68E398()
{
  sub_20E690878();
  return sub_20E6EA9D0();
}

uint64_t sub_20E68E3C0()
{
  sub_20E690878();
  return sub_20E6EA9DC();
}

uint64_t sub_20E68E3E8()
{
  sub_20E690900();
  return sub_20E6EA9D0();
}

uint64_t sub_20E68E410()
{
  sub_20E690900();
  return sub_20E6EA9DC();
}

uint64_t sub_20E68E440()
{
  return 12383;
}

uint64_t sub_20E68E44C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20E6EA8EC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20E68E4C8()
{
  sub_20E6908BC();
  return sub_20E6EA9D0();
}

uint64_t sub_20E68E4F0()
{
  sub_20E6908BC();
  return sub_20E6EA9DC();
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E598);
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E5A0);
  v16 = *(_QWORD *)(v6 - 8);
  v17 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E5A8);
  v21 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v1[1];
  v18 = *v1;
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E690878();
  sub_20E6EA9C4();
  if (v12 >> 60 == 15)
  {
    LOBYTE(v22) = 0;
    sub_20E690900();
    sub_20E6EA82C();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v11, v9);
  }
  else
  {
    LOBYTE(v22) = 1;
    v14 = v18;
    sub_20E66A990(v18, v12);
    sub_20E6908BC();
    sub_20E6EA82C();
    v22 = v14;
    v23 = v12;
    sub_20E66AD88();
    v15 = v20;
    sub_20E6EA88C();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v15);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v9);
    return sub_20E66AA28(v14, v12);
  }
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.init(from:)@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  char *v32;
  _QWORD *v33;
  __int128 v34;
  uint64_t v35;

  v31 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E5D0);
  v4 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  v30 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v32 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E5D8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E5E0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v33 = a1;
  __swift_project_boxed_opaque_existential_1Tm(a1, v14);
  sub_20E690878();
  v15 = v35;
  sub_20E6EA9AC();
  if (v15)
    goto LABEL_7;
  v16 = v7;
  v28 = v6;
  v17 = v32;
  v35 = v11;
  v18 = sub_20E6EA820();
  if (*(_QWORD *)(v18 + 16) != 1)
  {
    v21 = sub_20E6EA640();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DCE0);
    *v23 = &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation;
    sub_20E6EA79C();
    sub_20E6EA634();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x24BEE26D0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v10);
LABEL_7:
    v24 = (uint64_t)v33;
    return __swift_destroy_boxed_opaque_existential_1Tm(v24);
  }
  v19 = v13;
  if ((*(_BYTE *)(v18 + 32) & 1) != 0)
  {
    LOBYTE(v34) = 1;
    sub_20E6908BC();
    v20 = v10;
    sub_20E6EA790();
    sub_20E66AE8C();
    v26 = v29;
    sub_20E6EA7FC();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v20);
    v27 = v34;
  }
  else
  {
    LOBYTE(v34) = 0;
    sub_20E690900();
    sub_20E6EA790();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v10);
    v27 = xmmword_20E6EE5B0;
  }
  v24 = (uint64_t)v33;
  *v31 = v27;
  return __swift_destroy_boxed_opaque_existential_1Tm(v24);
}

uint64_t sub_20E68EB20@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X8>)
{
  return ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.init(from:)(a1, a2);
}

uint64_t sub_20E68EB34(_QWORD *a1)
{
  return ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.encode(to:)(a1);
}

__n128 ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.init(operation:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.operation.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_20E66A9D4(v2, v3);
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.operation.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = sub_20E66AA28(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t (*ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.operation.modify())()
{
  return nullsub_1;
}

uint64_t sub_20E68EBA0()
{
  return 0x6F6974617265706FLL;
}

uint64_t sub_20E68EBBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6F6974617265706FLL && a2 == 0xE90000000000006ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20E6EA8EC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20E68EC5C()
{
  sub_20E690944();
  return sub_20E6EA9D0();
}

uint64_t sub_20E68EC84()
{
  sub_20E690944();
  return sub_20E6EA9DC();
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E5F8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E690944();
  sub_20E6EA9C4();
  v10[0] = v8;
  v10[1] = v7;
  sub_20E690988();
  sub_20E6EA88C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E610);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E690944();
  sub_20E6EA9AC();
  if (!v2)
  {
    sub_20E6909CC();
    sub_20E6EA7FC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_20E68EECC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.init(from:)(a1, a2);
}

uint64_t sub_20E68EEE0(_QWORD *a1)
{
  return ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.encode(to:)(a1);
}

uint64_t sub_20E68EEF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v0 = sub_20E6EA1FC();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E6EA1F0();
  v4 = sub_20E6EA1D8();
  v6 = v5;
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    v8 = sub_20E677310((uint64_t)&unk_24C980090);
    v10 = v9;
    qword_254A2E560 = v4;
    *(_QWORD *)algn_254A2E568 = v6;
    sub_20E66A9D4(v4, v6);
    sub_20E66A990(v8, v10);
    sub_20E676D00(v8, v10);
    sub_20E6673F4(v8, v10);
    sub_20E6673F4(v8, v10);
    return sub_20E66AA28(v4, v6);
  }
  return result;
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.init(saltInput1:saltInput2:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.saltInput1.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_20E66A990(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.saltInput1.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_20E6673F4(*(_QWORD *)v2, *(_QWORD *)(v2 + 8));
  *(_QWORD *)v2 = a1;
  *(_QWORD *)(v2 + 8) = a2;
  return result;
}

uint64_t (*ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.saltInput1.modify())()
{
  return nullsub_1;
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.saltInput2.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_20E66A9D4(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.saltInput2.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_20E66AA28(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.saltInput2.modify())()
{
  return nullsub_1;
}

void ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.salt1.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = sub_20E6EA13C();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_20E6EA064();
  MEMORY[0x24BDAC7A8](v2);
  v3 = *v0;
  v4 = v0[1];
  if (qword_254A2DBE0 != -1)
    swift_once();
  v5 = qword_254A2E560;
  v6 = *(_QWORD *)algn_254A2E568;
  v7 = *(_QWORD *)algn_254A2E568;
  sub_20E66A990(qword_254A2E560, *(unint64_t *)algn_254A2E568);
  sub_20E66A990(v5, v6);
  sub_20E66A990(v3, v4);
  sub_20E676D00(v3, v4);
  sub_20E6673F4(v3, v4);
  sub_20E6673F4(v5, v6);
  sub_20E66A8D4((unint64_t *)&qword_254A2E620, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
  sub_20E6EA04C();
  __asm { BR              X10 }
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.salt2.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v1 = sub_20E6EA13C();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_20E6EA064();
  MEMORY[0x24BDAC7A8](v2);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  if (v4 >> 60 != 15)
  {
    sub_20E66A990(v3, v4);
    if (qword_254A2DBE0 != -1)
      swift_once();
    v5 = qword_254A2E560;
    v6 = *(_QWORD *)algn_254A2E568;
    v8 = *(_QWORD *)algn_254A2E568;
    sub_20E66A990(qword_254A2E560, *(unint64_t *)algn_254A2E568);
    sub_20E66A9D4(v3, v4);
    sub_20E66A990(v5, v6);
    sub_20E676D00(v3, v4);
    sub_20E66AA28(v3, v4);
    sub_20E6673F4(v5, v6);
    sub_20E66A8D4((unint64_t *)&qword_254A2E620, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    sub_20E6EA04C();
    __asm { BR              X10 }
  }
  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_20E68F928()
{
  return 0x75706E49746C6173;
}

uint64_t sub_20E68F954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E69226C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E68F978()
{
  sub_20E690B4C();
  return sub_20E6EA9D0();
}

uint64_t sub_20E68F9A0()
{
  sub_20E690B4C();
  return sub_20E6EA9DC();
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E630);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v13 = v1[3];
  v14 = v9;
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E690B4C();
  sub_20E6EA9C4();
  v16 = v8;
  v17 = v7;
  v18 = 0;
  sub_20E66AD88();
  v10 = v15;
  sub_20E6EA88C();
  if (!v10)
  {
    v16 = v14;
    v17 = v13;
    v18 = 1;
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E640);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E690B4C();
  sub_20E6EA9AC();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    v15 = 0;
    v16 = 0xF000000000000000;
  }
  else
  {
    v18 = a2;
    v21 = 0;
    sub_20E66AE8C();
    sub_20E6EA7FC();
    v10 = v19;
    v11 = v20;
    v21 = 1;
    sub_20E66A990(v19, v20);
    sub_20E6EA7D8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v19;
    v13 = v20;
    sub_20E66A9D4(v19, v20);
    sub_20E66AA28(0, 0xF000000000000000);
    sub_20E66A990(v10, v11);
    sub_20E66A9D4(v12, v13);
    sub_20E66AA28(v12, v13);
    sub_20E6673F4(v10, v11);
    v14 = v18;
    *v18 = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    sub_20E6673F4(v10, v11);
    v15 = v12;
    v16 = v13;
  }
  return sub_20E66AA28(v15, v16);
}

uint64_t sub_20E68FD48@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.init(from:)(a1, a2);
}

uint64_t sub_20E68FD5C(_QWORD *a1)
{
  return ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.encode(to:)(a1);
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.PRF.inputValues.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_20E66A954(v2, v3, v4, v5);
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.PRF.perCredentialInputValues.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 ASCPublicKeyCredentialAssertionExtensionInputs.PRF.init(inputValues:perCredentialInputValues:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a1;
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v4;
  *(_QWORD *)(a3 + 32) = a2;
  return result;
}

uint64_t sub_20E68FD9C()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000018;
  else
    return 0x6C61567475706E69;
}

uint64_t sub_20E68FDE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E69235C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E68FE08()
{
  sub_20E690B90();
  return sub_20E6EA9D0();
}

uint64_t sub_20E68FE30()
{
  sub_20E690B90();
  return sub_20E6EA9DC();
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.PRF.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E648);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v1;
  v8 = *((_QWORD *)v1 + 2);
  v7 = *((_QWORD *)v1 + 3);
  v12 = *((_QWORD *)v1 + 4);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E690B90();
  sub_20E6EA9C4();
  v15 = v13;
  v16 = v8;
  v17 = v7;
  v18 = 0;
  sub_20E66AD00();
  v9 = v14;
  sub_20E6EA868();
  if (!v9)
  {
    *(_QWORD *)&v15 = v12;
    v18 = 1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E660);
    sub_20E66AE10((unint64_t *)&unk_254A2DD30, (uint64_t (*)(void))sub_20E66AD88, (uint64_t (*)(void))sub_20E66AD00, MEMORY[0x24BEE04C0]);
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ASCPublicKeyCredentialAssertionExtensionInputs.PRF.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E670);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E690B90();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v27 = 0;
  sub_20E66ADCC();
  sub_20E6EA7D8();
  v9 = v23;
  v19 = a2;
  v20 = v24;
  v11 = v25;
  v10 = v26;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E660);
  v27 = 1;
  v21 = v9;
  v22 = v11;
  v12 = v9;
  v13 = v20;
  sub_20E66A954(v12, v20, v11, v10);
  sub_20E66AE10((unint64_t *)&unk_254A2DD50, (uint64_t (*)(void))sub_20E66AE8C, (uint64_t (*)(void))sub_20E66ADCC, MEMORY[0x24BEE04E0]);
  sub_20E6EA7D8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v22;
  v14 = v23;
  v16 = v21;
  sub_20E66A954(v21, v13, v22, v10);
  swift_bridgeObjectRetain();
  sub_20E66AAA8(v16, v13, v15, v10);
  v17 = v19;
  *v19 = v16;
  v17[1] = v13;
  v17[2] = v15;
  v17[3] = v10;
  v17[4] = v14;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  sub_20E66AAA8(v16, v13, v15, v10);
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E690250@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ASCPublicKeyCredentialAssertionExtensionInputs.PRF.init(from:)(a1, a2);
}

uint64_t sub_20E690264(_QWORD *a1)
{
  return ASCPublicKeyCredentialAssertionExtensionInputs.PRF.encode(to:)(a1);
}

uint64_t sub_20E690278()
{
  sub_20E690BD4();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6902A0()
{
  sub_20E690BD4();
  return sub_20E6EA9DC();
}

id ASCPublicKeyCredentialAssertionExtensionInputs.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_20E69034C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  _BYTE v14[16];
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E678);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E690BD4();
  sub_20E6EA9C4();
  v9 = (__int128 *)(v3
                  + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob);
  swift_beginAccess();
  v15 = *v9;
  v18 = 0;
  sub_20E690C18();
  sub_20E6EA868();
  if (!v2)
  {
    v10 = (__int128 *)(v3
                     + OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_prf);
    swift_beginAccess();
    v11 = *((_QWORD *)v10 + 4);
    v12 = v10[1];
    v15 = *v10;
    v16 = v12;
    v17 = v11;
    v14[15] = 1;
    sub_20E690C5C();
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

void (**ASCPublicKeyCredentialAssertionExtensionInputs.__allocating_init(from:)(_QWORD *a1))(_QWORD, uint64_t)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ASCPublicKeyCredentialAssertionExtensionInputs.init(from:)(a1);
}

void (**ASCPublicKeyCredentialAssertionExtensionInputs.init(from:)(_QWORD *a1))(_QWORD, uint64_t)
{
  char *v1;
  void (**v3)(_QWORD, uint64_t);
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD, uint64_t);
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  objc_class *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  objc_super v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char *v41;

  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E698);
  v3 = *(void (***)(_QWORD, uint64_t))(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = &v1[OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob];
  *(_OWORD *)&v1[OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob] = xmmword_20E6EF320;
  v7 = (uint64_t *)&v1[OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_prf];
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[4] = 1;
  v8 = a1[3];
  v32 = a1;
  __swift_project_boxed_opaque_existential_1Tm(a1, v8);
  sub_20E690BD4();
  v41 = v1;
  v30 = v5;
  v9 = v33;
  sub_20E6EA9AC();
  if (v9)
  {
    v17 = v41;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
    sub_20E690834(*(_QWORD *)v6, *((_QWORD *)v6 + 1));
    sub_20E690848(*v7, v7[1], v7[2], v7[3], v7[4], (void (*)(void))sub_20E692464);

    type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v10 = v3;
    v40 = 0;
    sub_20E690CA0();
    v11 = v30;
    v12 = v31;
    sub_20E6EA7D8();
    v13 = v36;
    v14 = v37;
    swift_beginAccess();
    v15 = *(_QWORD *)v6;
    v16 = *((_QWORD *)v6 + 1);
    *(_QWORD *)v6 = v13;
    *((_QWORD *)v6 + 1) = v14;
    sub_20E690834(v15, v16);
    v35 = 1;
    sub_20E690CE4();
    sub_20E6EA7D8();
    v19 = v36;
    v20 = v37;
    v33 = v38;
    v21 = v39;
    swift_beginAccess();
    v22 = *v7;
    v23 = v7[1];
    v24 = v7[2];
    v25 = v7[3];
    v26 = v7[4];
    *v7 = v19;
    v7[1] = v20;
    *((_OWORD *)v7 + 1) = v33;
    v7[4] = v21;
    sub_20E690848(v22, v23, v24, v25, v26, (void (*)(void))sub_20E692464);
    v27 = v41;

    v28 = (objc_class *)type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs();
    v34.receiver = v27;
    v34.super_class = v28;
    v3 = (void (**)(_QWORD, uint64_t))objc_msgSendSuper2(&v34, sel_init);
    ((void (**)(char *, uint64_t))v10)[1](v11, v12);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
  }
  return v3;
}

void (**sub_20E6907B0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>))(_QWORD, uint64_t)
{
  uint64_t v2;
  id v5;
  void (**result)(_QWORD, uint64_t);

  v5 = objc_allocWithZone((Class)type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs());
  result = ASCPublicKeyCredentialAssertionExtensionInputs.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_20E690800(_QWORD *a1)
{
  return sub_20E69034C(a1);
}

uint64_t sub_20E690820(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11)
    return sub_20E66A9D4(a1, a2);
  return a1;
}

uint64_t sub_20E690834(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11)
    return sub_20E66AA28(a1, a2);
  return a1;
}

uint64_t sub_20E690848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t result;

  if (a5 != 1)
  {
    a6();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_20E690878()
{
  unint64_t result;

  result = qword_254A2E5B0;
  if (!qword_254A2E5B0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFC08, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E5B0);
  }
  return result;
}

unint64_t sub_20E6908BC()
{
  unint64_t result;

  result = qword_254A2E5B8;
  if (!qword_254A2E5B8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFBB8, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.WriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E5B8);
  }
  return result;
}

unint64_t sub_20E690900()
{
  unint64_t result;

  result = qword_254A2E5C8;
  if (!qword_254A2E5C8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFB68, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E5C8);
  }
  return result;
}

unint64_t sub_20E690944()
{
  unint64_t result;

  result = qword_254A2E600;
  if (!qword_254A2E600)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFB18, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E600);
  }
  return result;
}

unint64_t sub_20E690988()
{
  unint64_t result;

  result = qword_254A2E608;
  if (!qword_254A2E608)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation);
    atomic_store(result, (unint64_t *)&qword_254A2E608);
  }
  return result;
}

unint64_t sub_20E6909CC()
{
  unint64_t result;

  result = qword_254A2E618;
  if (!qword_254A2E618)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation);
    atomic_store(result, (unint64_t *)&qword_254A2E618);
  }
  return result;
}

_BYTE *sub_20E690A10@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_20E6B2988(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_20E6B2A48((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_20E6B2AC0((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_20E690A84(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_20E6E9A28();
  if (!result || (result = sub_20E6E9A4C(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_20E6E9A40();
      sub_20E6EA13C();
      sub_20E66A8D4((unint64_t *)&qword_254A2E620, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
      return sub_20E6EA034();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_20E690B4C()
{
  unint64_t result;

  result = qword_254A2E638;
  if (!qword_254A2E638)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFAC8, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E638);
  }
  return result;
}

unint64_t sub_20E690B90()
{
  unint64_t result;

  result = qword_254A2E650;
  if (!qword_254A2E650)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFA78, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E650);
  }
  return result;
}

unint64_t sub_20E690BD4()
{
  unint64_t result;

  result = qword_254A2E680;
  if (!qword_254A2E680)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFA28, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E680);
  }
  return result;
}

unint64_t sub_20E690C18()
{
  unint64_t result;

  result = qword_254A2E688;
  if (!qword_254A2E688)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob);
    atomic_store(result, (unint64_t *)&qword_254A2E688);
  }
  return result;
}

unint64_t sub_20E690C5C()
{
  unint64_t result;

  result = qword_254A2E690;
  if (!qword_254A2E690)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionInputs.PRF, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF);
    atomic_store(result, (unint64_t *)&qword_254A2E690);
  }
  return result;
}

unint64_t sub_20E690CA0()
{
  unint64_t result;

  result = qword_254A2E6A0;
  if (!qword_254A2E6A0)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob);
    atomic_store(result, (unint64_t *)&qword_254A2E6A0);
  }
  return result;
}

unint64_t sub_20E690CE4()
{
  unint64_t result;

  result = qword_254A2E6A8;
  if (!qword_254A2E6A8)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionInputs.PRF, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF);
    atomic_store(result, (unint64_t *)&qword_254A2E6A8);
  }
  return result;
}

uint64_t method lookup function for ASCPublicKeyCredentialAssertionExtensionInputs()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionInputs.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionInputs.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionInputs.hasAtLeastOneExtension.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionInputs.caBLEAuthenticatorMinimumRequirement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionInputs.cborForWebKit()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionInputs.largeBlob.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionInputs.largeBlob.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionInputs.largeBlob.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionInputs.prf.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionInputs.prf.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionInputs.prf.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionInputs.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionInputs.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t *destroy for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if (v1 >> 60 != 15)
    return (uint64_t *)sub_20E6673F4(*result, v1);
  return result;
}

uint64_t _s26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputsC9LargeBlobVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_20E66A990(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *(_QWORD *)a2;
      sub_20E66A990(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_20E6673F4(v7, v8);
      return a1;
    }
    sub_20E66B4E0((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v5 = *(_QWORD *)a2;
  sub_20E66A990(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_20E6673F4(v6, v4);
      return a1;
    }
    sub_20E66B4E0((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = a2 - 12;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob;
}

uint64_t *destroy for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0)
    return (uint64_t *)sub_20E6673F4(*result, v1);
  return result;
}

uint64_t _s26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputsC9LargeBlobV9OperationOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_20E66A990(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = a1[1];
  v5 = a2[1];
  v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v6)
    {
      v9 = *a2;
      sub_20E66A990(v9, v5);
      v10 = *a1;
      v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_20E6673F4(v10, v11);
      return a1;
    }
    sub_20E6673F4(*a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v7 = *a2;
  sub_20E66A990(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

uint64_t *assignWithTake for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_20E6673F4(v7, v4);
      return a1;
    }
    sub_20E6673F4(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  if (v3 + 1 >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 12;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t sub_20E6912F0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v1) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v1) & 0xC | (v1 >> 2));
  else
    return 0;
}

_QWORD *sub_20E691318(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *result = a2 - 13;
    result[1] = 0;
  }
  else if (a2)
  {
    *result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation;
}

uint64_t destroy for ASCPublicKeyCredentialAssertionExtensionInputs.PRF(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = a1[1];
  if (v2 >> 60 != 15)
  {
    sub_20E6673F4(*a1, v2);
    v3 = a1[3];
    if (v3 >> 60 != 15)
      sub_20E6673F4(a1[2], v3);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ASCPublicKeyCredentialAssertionExtensionInputs.PRF(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    v6 = *a2;
    sub_20E66A990(*a2, a2[1]);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v4;
    v7 = a2 + 2;
    v8 = a2[3];
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v7;
    }
    else
    {
      v9 = *v7;
      sub_20E66A990(*v7, a2[3]);
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = v8;
    }
  }
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for ASCPublicKeyCredentialAssertionExtensionInputs.PRF(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 == 15)
    {
      sub_20E66B514(a1);
      v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v6;
      goto LABEL_17;
    }
    v10 = *a2;
    sub_20E66A990(*a2, a2[1]);
    v11 = *a1;
    v12 = a1[1];
    *a1 = v10;
    a1[1] = v4;
    sub_20E6673F4(v11, v12);
    v13 = a2 + 2;
    v9 = a2[3];
    if ((unint64_t)a1[3] >> 60 == 15)
    {
      if (v9 >> 60 != 15)
      {
        v14 = *v13;
        goto LABEL_12;
      }
    }
    else
    {
      if (v9 >> 60 != 15)
      {
        v15 = *v13;
        sub_20E66A990(*v13, a2[3]);
        v16 = a1[2];
        v17 = a1[3];
        a1[2] = v15;
        a1[3] = v9;
        sub_20E6673F4(v16, v17);
        goto LABEL_17;
      }
      sub_20E66B4E0((uint64_t)(a1 + 2));
    }
    *((_OWORD *)a1 + 1) = *(_OWORD *)v13;
    goto LABEL_17;
  }
  if (v4 >> 60 != 15)
  {
    v7 = *a2;
    sub_20E66A990(*a2, a2[1]);
    *a1 = v7;
    a1[1] = v4;
    v8 = a2 + 2;
    v9 = a2[3];
    if (v9 >> 60 == 15)
    {
      *((_OWORD *)a1 + 1) = *v8;
      goto LABEL_17;
    }
    v14 = *(_QWORD *)v8;
LABEL_12:
    sub_20E66A990(v14, v9);
    a1[2] = v14;
    a1[3] = v9;
    goto LABEL_17;
  }
  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v5;
LABEL_17:
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for ASCPublicKeyCredentialAssertionExtensionInputs.PRF(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = a1[1];
  if (v4 >> 60 == 15)
    goto LABEL_4;
  v5 = a2[1];
  if (v5 >> 60 == 15)
  {
    sub_20E66B514(a1);
LABEL_4:
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v6;
    goto LABEL_10;
  }
  v7 = *a1;
  *a1 = *a2;
  a1[1] = v5;
  sub_20E6673F4(v7, v4);
  v8 = a2 + 2;
  v9 = a1[3];
  if (v9 >> 60 != 15)
  {
    v10 = a2[3];
    if (v10 >> 60 != 15)
    {
      v11 = a1[2];
      a1[2] = *v8;
      a1[3] = v10;
      sub_20E6673F4(v11, v9);
      goto LABEL_10;
    }
    sub_20E66B4E0((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
LABEL_10:
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCPublicKeyCredentialAssertionExtensionInputs.PRF(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCPublicKeyCredentialAssertionExtensionInputs.PRF(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs.PRF()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF;
}

uint64_t destroy for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;

  result = sub_20E6673F4(*a1, a1[1]);
  v3 = a1[3];
  if (v3 >> 60 != 15)
    return sub_20E6673F4(a1[2], v3);
  return result;
}

uint64_t initializeWithCopy for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  sub_20E66A990(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2 + 2;
  v7 = a2[3];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_20E66A990(*v6, v7);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
  }
  return a1;
}

uint64_t *assignWithCopy for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *a2;
  v5 = a2[1];
  sub_20E66A990(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_20E6673F4(v6, v7);
  v8 = a2 + 2;
  v9 = a2[3];
  if ((unint64_t)a1[3] >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      v11 = *v8;
      sub_20E66A990(*v8, v9);
      v12 = a1[2];
      v13 = a1[3];
      a1[2] = v11;
      a1[3] = v9;
      sub_20E6673F4(v12, v13);
      return a1;
    }
    sub_20E66B4E0((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    return a1;
  }
  v10 = *v8;
  sub_20E66A990(*v8, v9);
  a1[2] = v10;
  a1[3] = v9;
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_20E6673F4(v4, v5);
  v6 = (uint64_t *)(a2 + 16);
  v7 = a1[3];
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (v8 >> 60 != 15)
    {
      v9 = a1[2];
      a1[2] = *v6;
      a1[3] = v8;
      sub_20E6673F4(v9, v7);
      return a1;
    }
    sub_20E66B4E0((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.CodingKeys;
}

uint64_t _s26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputsC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20E691AC8 + 4 * byte_20E6EF335[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20E691AFC + 4 * byte_20E6EF330[v4]))();
}

uint64_t sub_20E691AFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E691B04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E691B0CLL);
  return result;
}

uint64_t sub_20E691B18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E691B20);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20E691B24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E691B2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.ReadCodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.ReadCodingKeys;
}

uint64_t _s26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputsC9LargeBlobV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20E691B98 + 4 * byte_20E6EF33A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20E691BB8 + 4 * byte_20E6EF33F[v4]))();
}

_BYTE *sub_20E691B98(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20E691BB8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E691BC0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E691BC8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E691BD0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E691BD8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.WriteCodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.WriteCodingKeys;
}

unint64_t sub_20E691BF8()
{
  unint64_t result;

  result = qword_254A2E6B8;
  if (!qword_254A2E6B8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF618, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.WriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E6B8);
  }
  return result;
}

unint64_t sub_20E691C40()
{
  unint64_t result;

  result = qword_254A2E6C0;
  if (!qword_254A2E6C0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF720, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E6C0);
  }
  return result;
}

unint64_t sub_20E691C88()
{
  unint64_t result;

  result = qword_254A2E6C8;
  if (!qword_254A2E6C8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF7D8, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E6C8);
  }
  return result;
}

unint64_t sub_20E691CD0()
{
  unint64_t result;

  result = qword_254A2E6D0;
  if (!qword_254A2E6D0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF890, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E6D0);
  }
  return result;
}

unint64_t sub_20E691D18()
{
  unint64_t result;

  result = qword_254A2E6D8;
  if (!qword_254A2E6D8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF948, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E6D8);
  }
  return result;
}

unint64_t sub_20E691D60()
{
  unint64_t result;

  result = qword_254A2E6E0;
  if (!qword_254A2E6E0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFA00, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E6E0);
  }
  return result;
}

unint64_t sub_20E691DA8()
{
  unint64_t result;

  result = qword_254A2E6E8;
  if (!qword_254A2E6E8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF970, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E6E8);
  }
  return result;
}

unint64_t sub_20E691DF0()
{
  unint64_t result;

  result = qword_254A2E6F0;
  if (!qword_254A2E6F0)
  {
    result = MEMORY[0x212BC39A8]("I#)>", &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E6F0);
  }
  return result;
}

unint64_t sub_20E691E38()
{
  unint64_t result;

  result = qword_254A2E6F8;
  if (!qword_254A2E6F8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF8B8, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E6F8);
  }
  return result;
}

unint64_t sub_20E691E80()
{
  unint64_t result;

  result = qword_254A2E700;
  if (!qword_254A2E700)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF8E0, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E700);
  }
  return result;
}

unint64_t sub_20E691EC8()
{
  unint64_t result;

  result = qword_254A2E708;
  if (!qword_254A2E708)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF800, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E708);
  }
  return result;
}

unint64_t sub_20E691F10()
{
  unint64_t result;

  result = qword_254A2E710;
  if (!qword_254A2E710)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF828, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.PRF.InputValues.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E710);
  }
  return result;
}

unint64_t sub_20E691F58()
{
  unint64_t result;

  result = qword_254A2E718;
  if (!qword_254A2E718)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF748, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E718);
  }
  return result;
}

unint64_t sub_20E691FA0()
{
  unint64_t result;

  result = qword_254A2E720;
  if (!qword_254A2E720)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF770, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E720);
  }
  return result;
}

unint64_t sub_20E691FE8()
{
  unint64_t result;

  result = qword_254A2E728;
  if (!qword_254A2E728)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF640, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E728);
  }
  return result;
}

unint64_t sub_20E692030()
{
  unint64_t result;

  result = qword_254A2E730;
  if (!qword_254A2E730)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF668, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E730);
  }
  return result;
}

unint64_t sub_20E692078()
{
  unint64_t result;

  result = qword_254A2E738;
  if (!qword_254A2E738)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF588, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.WriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E738);
  }
  return result;
}

unint64_t sub_20E6920C0()
{
  unint64_t result;

  result = qword_254A2E740;
  if (!qword_254A2E740)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF5B0, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.WriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E740);
  }
  return result;
}

unint64_t sub_20E692108()
{
  unint64_t result;

  result = qword_254A2E748;
  if (!qword_254A2E748)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF690, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E748);
  }
  return result;
}

unint64_t sub_20E692150()
{
  unint64_t result;

  result = qword_254A2E750;
  if (!qword_254A2E750)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EF6B8, &type metadata for ASCPublicKeyCredentialAssertionExtensionInputs.LargeBlob.Operation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E750);
  }
  return result;
}

uint64_t sub_20E692194(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1684104562 && a2 == 0xE400000000000000;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574697277 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20E69226C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x75706E49746C6173 && a2 == 0xEA00000000003174;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x75706E49746C6173 && a2 == 0xEA00000000003274)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20E69235C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C61567475706E69 && a2 == 0xEB00000000736575;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000020E6F7360)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t storeEnumTagSinglePayload for ASCABLERequestType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20E6924B8 + 4 * byte_20E6EFC65[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20E6924EC + 4 * byte_20E6EFC60[v4]))();
}

uint64_t sub_20E6924EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6924F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6924FCLL);
  return result;
}

uint64_t sub_20E692508(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E692510);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20E692514(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E69251C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCABLERequestType()
{
  return &type metadata for ASCABLERequestType;
}

uint64_t sub_20E692538(char *a1, char *a2)
{
  return sub_20E67C820(*a1, *a2);
}

uint64_t sub_20E692544()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6925A0()
{
  sub_20E6EA250();
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E6925D0()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E692628@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_20E6EA784();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_20E692684(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 24935;
  if (*v1)
    v2 = 25453;
  *a1 = v2;
  a1[1] = 0xE200000000000000;
}

uint64_t sub_20E6926A4()
{
  sub_20E692794();
  return sub_20E6EA328();
}

uint64_t sub_20E692700()
{
  sub_20E692794();
  return sub_20E6EA31C();
}

unint64_t sub_20E692750()
{
  unint64_t result;

  result = qword_254A2E760;
  if (!qword_254A2E760)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFD4C, &type metadata for ASCABLERequestType);
    atomic_store(result, (unint64_t *)&qword_254A2E760);
  }
  return result;
}

unint64_t sub_20E692794()
{
  unint64_t result;

  result = qword_254A2E768;
  if (!qword_254A2E768)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFCD4, &type metadata for ASCABLERequestType);
    atomic_store(result, (unint64_t *)&qword_254A2E768);
  }
  return result;
}

uint64_t static ASCPublicKeyCredentialRegistrationExtensionOutputs.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t sub_20E6927E8(void *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;

  sub_20E6E9998();
  swift_allocObject();
  sub_20E6E998C();
  type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs(0);
  sub_20E67BD04((unint64_t *)&unk_254A2E770, type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs, (uint64_t)&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionOutputs);
  v2 = sub_20E6E9980();
  v4 = v3;
  swift_release();
  v5 = (void *)sub_20E6E9C68();
  v6 = (void *)sub_20E6EA1C0();
  objc_msgSend(a1, sel_encodeObject_forKey_, v5, v6);

  return sub_20E6673F4(v2, v4);
}

uint64_t type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2E820);
}

id ASCPublicKeyCredentialRegistrationExtensionOutputs.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ASCPublicKeyCredentialRegistrationExtensionOutputs.init(coder:)(a1);
}

id ASCPublicKeyCredentialRegistrationExtensionOutputs.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  id v10;
  void *v12;

  swift_getObjectType();
  sub_20E667A94();
  v3 = v1;
  v4 = sub_20E6EA448();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = sub_20E6E9C80();
    v8 = v7;

    sub_20E6E9974();
    swift_allocObject();
    sub_20E6E9968();
    sub_20E67BD04((unint64_t *)&unk_254A2E780, type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs, (uint64_t)&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionOutputs);
    sub_20E6E995C();

    swift_release();
    v9 = objc_allocWithZone((Class)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs(0));
    v10 = sub_20E694A90((uint64_t)v12);

    sub_20E6673F4(v6, v8);
    swift_getObjectType();
    swift_deallocPartialClassInstance();
  }
  else
  {

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v10;
}

unint64_t sub_20E692BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = 0x6F69736E65747845;
  v17 = 0xEF0A207B203A736ELL;
  v9 = (_BYTE *)(v0
               + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob);
  swift_beginAccess();
  if (*v9 != 2)
  {
    v14 = 0;
    v15 = 0xE000000000000000;
    sub_20E6EA610();
    swift_bridgeObjectRelease();
    v14 = 0xD000000000000017;
    v15 = 0x800000020E6F7F30;
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    v14 = 9;
    v15 = 0xE100000000000000;
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    sub_20E6EA280();
    swift_bridgeObjectRelease();
  }
  v10 = v1 + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_prf;
  swift_beginAccess();
  sub_20E67BCC0(v10, (uint64_t)v4, &qword_254A2EDB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_20E67BD44((uint64_t)v4, &qword_254A2EDB0);
  }
  else
  {
    sub_20E694C48((uint64_t)v4, (uint64_t)v8);
    v12 = 0;
    v13 = 0xE000000000000000;
    sub_20E6EA610();
    swift_bridgeObjectRelease();
    v12 = 0xD000000000000011;
    v13 = 0x800000020E6F7F10;
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    v12 = 9;
    v13 = 0xE100000000000000;
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    sub_20E694C8C((uint64_t)v8);
  }
  v12 = v16;
  v13 = v17;
  swift_bridgeObjectRetain();
  sub_20E6EA280();
  swift_bridgeObjectRelease();
  return v12;
}

unint64_t ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob.description.getter()
{
  sub_20E6EA610();
  swift_bridgeObjectRelease();
  sub_20E6EA280();
  swift_bridgeObjectRelease();
  return 0xD000000000000017;
}

unint64_t ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.description.getter()
{
  sub_20E6EA610();
  swift_bridgeObjectRelease();
  sub_20E6EA280();
  swift_bridgeObjectRelease();
  return 0xD000000000000011;
}

id ASCPublicKeyCredentialRegistrationExtensionOutputs.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id ASCPublicKeyCredentialRegistrationExtensionOutputs.init()()
{
  _BYTE *v0;
  char *v1;
  uint64_t v2;
  objc_super v4;

  v0[OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob] = 2;
  v1 = &v0[OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_prf];
  v2 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs(0);
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t sub_20E693160@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1
               + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t sub_20E6931AC(char *a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(v1
               + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t (*sub_20E6931FC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_20E693240(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E67BCC0(a1, (uint64_t)v6, &qword_254A2EDB0);
  v7 = *a2 + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_prf;
  swift_beginAccess();
  sub_20E694CC8((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t sub_20E6932F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_prf;
  swift_beginAccess();
  return sub_20E67BCC0(v3, a1, &qword_254A2EDB0);
}

uint64_t sub_20E69334C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_prf;
  swift_beginAccess();
  sub_20E694CC8(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_20E6933A4())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_20E6933E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v36 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (unsigned __int8 *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (unsigned __int8 *)(v1
                          + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob);
  swift_beginAccess();
  v17 = *v16;
  v18 = v17 == 2;
  v19 = v17 & 1;
  if (v18)
    v19 = 3;
  v38 = v19;
  if (v18)
    v20 = 0;
  else
    v20 = 0xF000000000000000;
  if (v18)
    v21 = 0;
  else
    v21 = 2;
  v39 = v21;
  v40 = v20;
  v22 = !v18;
  v23 = v1 + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_prf;
  swift_beginAccess();
  sub_20E67BCC0(v23, (uint64_t)v11, &qword_254A2EDB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    result = sub_20E67BD44((uint64_t)v11, &qword_254A2EDB0);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 3;
  }
  else
  {
    v37 = v22;
    sub_20E694C48((uint64_t)v11, (uint64_t)v15);
    v36 = *v15;
    sub_20E67BCC0((uint64_t)&v15[*(int *)(v12 + 20)], (uint64_t)v8, &qword_254A2E7B0);
    v30 = sub_20E6EA094();
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    if (v32(v8, 1, v30) == 1)
    {
      sub_20E67BD44((uint64_t)v8, &qword_254A2E7B0);
      v25 = 0;
      v26 = 0xF000000000000000;
    }
    else
    {
      sub_20E6EA070();
      v26 = v42;
      v33 = v8;
      v25 = v41;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    }
    sub_20E67BCC0((uint64_t)&v15[*(int *)(v12 + 24)], (uint64_t)v6, &qword_254A2E7B0);
    if (v32(v6, 1, v30) == 1)
    {
      sub_20E67BD44((uint64_t)v6, &qword_254A2E7B0);
      v27 = 0;
      v28 = 0xF000000000000000;
    }
    else
    {
      v34 = v31;
      sub_20E6EA070();
      v27 = v41;
      v28 = v42;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v30);
    }
    LOBYTE(v22) = v37;
    if (v26 >> 60 == 15)
    {
      sub_20E66AA28(v27, v28);
      v25 = 0;
      v27 = 0;
      v28 = 0;
      v26 = 0xF000000000000000;
    }
    result = sub_20E694C8C((uint64_t)v15);
    v29 = v36;
  }
  *(_QWORD *)a1 = v38;
  *(_QWORD *)(a1 + 8) = 0;
  v35 = v39;
  *(_QWORD *)(a1 + 16) = v40;
  *(_QWORD *)(a1 + 24) = v35;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = v22;
  *(_QWORD *)(a1 + 48) = v29;
  *(_QWORD *)(a1 + 56) = v25;
  *(_QWORD *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 72) = v27;
  *(_QWORD *)(a1 + 80) = v28;
  *(_BYTE *)(a1 + 88) = 2;
  return result;
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob.isSupported.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

AuthenticationServicesCore::ASCPublicKeyCredentialRegistrationExtensionOutputs::LargeBlob __swiftcall ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob.init(isSupported:)(AuthenticationServicesCore::ASCPublicKeyCredentialRegistrationExtensionOutputs::LargeBlob isSupported)
{
  AuthenticationServicesCore::ASCPublicKeyCredentialRegistrationExtensionOutputs::LargeBlob *v1;

  v1->isSupported = isSupported.isSupported;
  return isSupported;
}

uint64_t sub_20E693778()
{
  return 0x726F707075537369;
}

uint64_t sub_20E693798@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x726F707075537369 && a2 == 0xEB00000000646574)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20E6EA8EC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20E693844()
{
  sub_20E694D10();
  return sub_20E6EA9D0();
}

uint64_t sub_20E69386C()
{
  sub_20E694D10();
  return sub_20E6EA9DC();
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E798);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E694D10();
  sub_20E6EA9C4();
  sub_20E6EA880();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7A8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E694D10();
  sub_20E6EA9AC();
  if (!v2)
  {
    v9 = sub_20E6EA7F0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_20E693A84@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob.init(from:)(a1, a2);
}

uint64_t sub_20E693A98(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E798);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E694D10();
  sub_20E6EA9C4();
  sub_20E6EA880();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_20E693B84()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x31746572636573;
  if (*v0 != 1)
    v1 = 0x32746572636573;
  if (*v0)
    return v1;
  else
    return 0x726F707075537369;
}

uint64_t sub_20E693BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E69617C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E693C0C()
{
  sub_20E694D9C();
  return sub_20E6EA9D0();
}

uint64_t sub_20E693C34()
{
  sub_20E694D9C();
  return sub_20E6EA9DC();
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.isSupported.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.secret1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
  return sub_20E67BCC0(v1 + *(int *)(v3 + 20), a1, &qword_254A2E7B0);
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.secret2.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
  return sub_20E67BCC0(v1 + *(int *)(v3 + 24), a1, &qword_254A2E7B0);
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.init(isSupported:secret1:secret2:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v7;

  *a4 = a1;
  v7 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
  sub_20E694D54(a2, (uint64_t)&a4[*(int *)(v7 + 20)]);
  return sub_20E694D54(a3, (uint64_t)&a4[*(int *)(v7 + 24)]);
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  char v40;

  v35 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v29 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B8);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E694D9C();
  v13 = v36;
  sub_20E6EA9AC();
  if (v13)
  {
    v17 = (uint64_t)a1;
  }
  else
  {
    v14 = v10;
    v36 = v8;
    v15 = (uint64_t)v6;
    v16 = v35;
    LOBYTE(v37) = 0;
    v39 = sub_20E6EA7F0();
    v40 = 1;
    sub_20E66AE8C();
    sub_20E6EA7D8();
    v33 = v38;
    v34 = v37;
    v40 = 2;
    sub_20E6EA7D8();
    v19 = v38;
    v31 = a1;
    v32 = v37;
    v20 = v16;
    v21 = (uint64_t)v36;
    v30 = v14;
    v22 = v33;
    if (v33 >> 60 == 15)
    {
      v23 = sub_20E6EA094();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v21, 1, 1, v23);
    }
    else
    {
      v37 = v34;
      v38 = v33;
      sub_20E66A990(v34, v33);
      sub_20E6EA07C();
      v24 = sub_20E6EA094();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v21, 0, 1, v24);
    }
    if (v19 >> 60 == 15)
    {
      v25 = sub_20E6EA094();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v15, 1, 1, v25);
      v26 = v32;
    }
    else
    {
      v26 = v32;
      v37 = v32;
      v38 = v19;
      sub_20E66A990(v32, v19);
      sub_20E6EA07C();
      v27 = sub_20E6EA094();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v15, 0, 1, v27);
    }
    sub_20E66AA28(v34, v22);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v9);
    sub_20E66AA28(v26, v19);
    *v20 = v39 & 1;
    v28 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
    sub_20E694D54(v21, (uint64_t)&v20[*(int *)(v28 + 20)]);
    sub_20E694D54(v15, (uint64_t)&v20[*(int *)(v28 + 24)]);
    v17 = (uint64_t)v31;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm(v17);
}

uint64_t ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v29 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E7D0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E694D9C();
  sub_20E6EA9C4();
  LOBYTE(v35) = 0;
  v14 = v34;
  sub_20E6EA880();
  if (v14)
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v33 = v13;
  v34 = v10;
  v31 = v7;
  v32 = v11;
  v30 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
  sub_20E67BCC0(v2 + *(int *)(v30 + 20), (uint64_t)v9, &qword_254A2E7B0);
  v16 = sub_20E6EA094();
  v17 = *(_QWORD *)(v16 - 8);
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v29(v9, 1, v16) == 1)
  {
    sub_20E67BD44((uint64_t)v9, &qword_254A2E7B0);
    v18 = 0;
    v19 = 0xF000000000000000;
  }
  else
  {
    sub_20E6EA070();
    v18 = v35;
    v19 = v36;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v16);
  }
  v35 = v18;
  v36 = v19;
  v37 = 1;
  sub_20E66AD88();
  sub_20E6EA868();
  sub_20E66AA28(v18, v19);
  v20 = v17;
  v21 = (uint64_t)v31;
  sub_20E67BCC0(v2 + *(int *)(v30 + 24), (uint64_t)v31, &qword_254A2E7B0);
  v22 = v29((char *)v21, 1, v16);
  v23 = v32;
  if (v22 == 1)
  {
    sub_20E67BD44(v21, &qword_254A2E7B0);
    v24 = 0;
    v25 = 0xF000000000000000;
  }
  else
  {
    sub_20E6EA070();
    v26 = v16;
    v24 = v35;
    v25 = v36;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v26);
  }
  v35 = v24;
  v36 = v25;
  v37 = 2;
  v28 = v33;
  v27 = v34;
  sub_20E6EA868();
  sub_20E66AA28(v24, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v28, v27);
}

uint64_t sub_20E69441C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.init(from:)(a1, a2);
}

uint64_t sub_20E694430(_QWORD *a1)
{
  return ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.encode(to:)(a1);
}

uint64_t sub_20E694448()
{
  sub_20E694DE0();
  return sub_20E6EA9D0();
}

uint64_t sub_20E694470()
{
  sub_20E694DE0();
  return sub_20E6EA9DC();
}

id ASCPublicKeyCredentialRegistrationExtensionOutputs.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_20E6944F4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[24];
  char v16;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7E0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E694DE0();
  sub_20E6EA9C4();
  v12 = (_BYTE *)(v3
                + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob);
  swift_beginAccess();
  v15[0] = *v12;
  v16 = 0;
  sub_20E694E24();
  sub_20E6EA868();
  if (!v2)
  {
    v13 = v3 + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_prf;
    swift_beginAccess();
    sub_20E67BCC0(v13, (uint64_t)v7, &qword_254A2EDB0);
    v16 = 1;
    type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
    sub_20E67BD04(&qword_254A2E7F8, type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF, (uint64_t)&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF);
    sub_20E6EA868();
    sub_20E67BD44((uint64_t)v7, &qword_254A2EDB0);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

id ASCPublicKeyCredentialRegistrationExtensionOutputs.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ASCPublicKeyCredentialRegistrationExtensionOutputs.init(from:)(a1);
}

id ASCPublicKeyCredentialRegistrationExtensionOutputs.init(from:)(_QWORD *a1)
{
  char *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v21;
  objc_class *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  objc_super v29;
  char v30;
  char v31;
  uint64_t v32;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB0);
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E800);
  v24 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v1[OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob];
  v1[OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob] = 2;
  v9 = &v1[OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_prf];
  v10 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  v27 = (uint64_t)v9;
  v11(v9, 1, 1, v10);
  v12 = (id)a1[3];
  v28 = a1;
  __swift_project_boxed_opaque_existential_1Tm(a1, (uint64_t)v12);
  sub_20E694DE0();
  v13 = v2;
  v14 = v32;
  sub_20E6EA9AC();
  if (v14)
  {
    v19 = v27;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
    sub_20E67BD44(v19, &qword_254A2EDB0);

    type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v32 = v10;
    v16 = v24;
    v15 = (uint64_t)v25;
    v31 = 0;
    sub_20E694E68();
    v17 = v26;
    sub_20E6EA7D8();
    v18 = v30;
    swift_beginAccess();
    *v8 = v18;
    v30 = 1;
    sub_20E67BD04((unint64_t *)&unk_254A2E810, type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF, (uint64_t)&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF);
    sub_20E6EA7D8();
    v21 = v27;
    swift_beginAccess();
    sub_20E694CC8(v15, v21);
    swift_endAccess();

    v22 = (objc_class *)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs(0);
    v29.receiver = v13;
    v29.super_class = v22;
    v12 = objc_msgSendSuper2(&v29, sel_init);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v7, v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
  }
  return v12;
}

id sub_20E694A1C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  id result;

  v5 = objc_allocWithZone((Class)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs(0));
  result = ASCPublicKeyCredentialRegistrationExtensionOutputs.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_20E694A70(_QWORD *a1)
{
  return sub_20E6944F4(a1);
}

id sub_20E694A90(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  objc_class *v12;
  objc_super v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = &v1[OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob];
  v1[OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob] = 2;
  v7 = (uint64_t)&v1[OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_prf];
  v8 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = (_BYTE *)(a1
               + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob);
  swift_beginAccess();
  LOBYTE(v9) = *v9;
  swift_beginAccess();
  *v6 = (_BYTE)v9;
  v10 = a1 + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_prf;
  swift_beginAccess();
  sub_20E67BCC0(v10, (uint64_t)v5, &qword_254A2EDB0);
  swift_beginAccess();
  v11 = v1;
  sub_20E694CC8((uint64_t)v5, v7);
  swift_endAccess();

  v12 = (objc_class *)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs(0);
  v14.receiver = v11;
  v14.super_class = v12;
  return objc_msgSendSuper2(&v14, sel_init);
}

uint64_t type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2E840);
}

uint64_t sub_20E694C14(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_20E694C48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_20E694C8C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20E694CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_20E694D10()
{
  unint64_t result;

  result = qword_254A2E7A0;
  if (!qword_254A2E7A0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F026C, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E7A0);
  }
  return result;
}

uint64_t sub_20E694D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_20E694D9C()
{
  unint64_t result;

  result = qword_254A2E7C0;
  if (!qword_254A2E7C0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F021C, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E7C0);
  }
  return result;
}

unint64_t sub_20E694DE0()
{
  unint64_t result;

  result = qword_254A2E7E8;
  if (!qword_254A2E7E8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F01CC, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E7E8);
  }
  return result;
}

unint64_t sub_20E694E24()
{
  unint64_t result;

  result = qword_254A2E7F0;
  if (!qword_254A2E7F0)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob);
    atomic_store(result, (unint64_t *)&qword_254A2E7F0);
  }
  return result;
}

unint64_t sub_20E694E68()
{
  unint64_t result;

  result = qword_254A2E808;
  if (!qword_254A2E808)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob);
    atomic_store(result, (unint64_t *)&qword_254A2E808);
  }
  return result;
}

uint64_t sub_20E694EAC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1
               + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_20E694EFC(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2
               + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t sub_20E694F48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_prf;
  swift_beginAccess();
  return sub_20E67BCC0(v3, a2, &qword_254A2EDB0);
}

uint64_t sub_20E694FA8()
{
  return type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs(0);
}

void sub_20E694FB0()
{
  unint64_t v0;

  sub_20E695C74(319, (unint64_t *)&unk_254A2E830, (void (*)(uint64_t))type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ASCPublicKeyCredentialRegistrationExtensionOutputs()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionOutputs.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionOutputs.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionOutputs.largeBlob.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionOutputs.largeBlob.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionOutputs.largeBlob.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionOutputs.prf.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionOutputs.prf.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionOutputs.prf.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionOutputs.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialRegistrationExtensionOutputs.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t getEnumTagSinglePayload for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20E695240 + 4 * byte_20E6EFD85[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20E695274 + 4 * byte_20E6EFD80[v4]))();
}

uint64_t sub_20E695274(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E69527C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E695284);
  return result;
}

uint64_t sub_20E695290(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E695298);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20E69529C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6952A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob()
{
  return &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob;
}

uint64_t *initializeBufferWithCopyOfBuffer for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_20E6EA094();
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v15 = *(int *)(a3 + 24);
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    if (v12(v17, 1, v10))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
  }
  return v4;
}

uint64_t destroy for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_20E6EA094();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + *(int *)(a2 + 24);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  return result;
}

_BYTE *initializeWithCopy for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_20E6EA094();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = *(int *)(a3 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (v11(v15, 1, v9))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  return a1;
}

_BYTE *assignWithCopy for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_20E6EA094();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v16, v17, v9);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

_BYTE *initializeWithTake for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_20E6EA094();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = *(int *)(a3 + 24);
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (v11(v15, 1, v9))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  return a1;
}

_BYTE *assignWithTake for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_20E6EA094();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v16, v17, v9);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E695AF0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_BYTE *sub_20E695B7C(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_20E695BF0()
{
  unint64_t v0;

  sub_20E695C74(319, &qword_254A2E850, (void (*)(uint64_t))MEMORY[0x24BDC63E0]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_20E695C74(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_20E6EA484();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ASCPublicKeyCredentialRegistrationExtensionOutputs.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20E695D0C + 4 * byte_20E6EFD8F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20E695D40 + 4 * byte_20E6EFD8A[v4]))();
}

uint64_t sub_20E695D40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E695D48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E695D50);
  return result;
}

uint64_t sub_20E695D5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E695D64);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20E695D68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E695D70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20E695DD8 + 4 * byte_20E6EFD99[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20E695E0C + 4 * byte_20E6EFD94[v4]))();
}

uint64_t sub_20E695E0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E695E14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E695E1CLL);
  return result;
}

uint64_t sub_20E695E28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E695E30);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20E695E34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E695E3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20E695E98 + 4 * byte_20E6EFD9E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20E695EB8 + 4 * byte_20E6EFDA3[v4]))();
}

_BYTE *sub_20E695E98(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20E695EB8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E695EC0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E695EC8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E695ED0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E695ED8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob.CodingKeys;
}

unint64_t sub_20E695EF8()
{
  unint64_t result;

  result = qword_254A2E858;
  if (!qword_254A2E858)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F0034, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E858);
  }
  return result;
}

unint64_t sub_20E695F40()
{
  unint64_t result;

  result = qword_254A2E860;
  if (!qword_254A2E860)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F00EC, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E860);
  }
  return result;
}

unint64_t sub_20E695F88()
{
  unint64_t result;

  result = qword_254A2E868;
  if (!qword_254A2E868)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F01A4, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E868);
  }
  return result;
}

unint64_t sub_20E695FD0()
{
  unint64_t result;

  result = qword_254A2E870;
  if (!qword_254A2E870)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F0114, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E870);
  }
  return result;
}

unint64_t sub_20E696018()
{
  unint64_t result;

  result = qword_254A2E878;
  if (!qword_254A2E878)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F013C, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E878);
  }
  return result;
}

unint64_t sub_20E696060()
{
  unint64_t result;

  result = qword_254A2E880;
  if (!qword_254A2E880)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F005C, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E880);
  }
  return result;
}

unint64_t sub_20E6960A8()
{
  unint64_t result;

  result = qword_254A2E888;
  if (!qword_254A2E888)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F0084, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E888);
  }
  return result;
}

unint64_t sub_20E6960F0()
{
  unint64_t result;

  result = qword_254A2E890;
  if (!qword_254A2E890)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFFA4, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E890);
  }
  return result;
}

unint64_t sub_20E696138()
{
  unint64_t result;

  result = qword_254A2E898;
  if (!qword_254A2E898)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6EFFCC, &type metadata for ASCPublicKeyCredentialRegistrationExtensionOutputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E898);
  }
  return result;
}

uint64_t sub_20E69617C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726F707075537369 && a2 == 0xEB00000000646574;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x31746572636573 && a2 == 0xE700000000000000 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x32746572636573 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_20E6962E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = v7;
  v28 = a6;
  v29 = a7;
  v26 = a1;
  v27 = a4;
  v12 = sub_20E6E9BC0();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v12);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E8A0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_20E6EA37C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v12);
  v19 = (*(unsigned __int8 *)(v13 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v20 = (char *)swift_allocObject();
  *((_QWORD *)v20 + 2) = 0;
  *((_QWORD *)v20 + 3) = 0;
  v21 = v26;
  *((_QWORD *)v20 + 4) = v8;
  *((_QWORD *)v20 + 5) = v21;
  v22 = v27;
  *((_QWORD *)v20 + 6) = a2;
  *((_QWORD *)v20 + 7) = v22;
  *((_QWORD *)v20 + 8) = a5;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v20[v19], (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v23 = &v20[(v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8];
  v24 = v29;
  *(_QWORD *)v23 = v28;
  *((_QWORD *)v23 + 1) = v24;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_20E696708((uint64_t)v17, (uint64_t)asc_254A2E8B0, (uint64_t)v20);
  return swift_release();
}

uint64_t sub_20E696488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v10;
  uint64_t v11;

  *(_QWORD *)(v8 + 72) = v11;
  *(_OWORD *)(v8 + 56) = v10;
  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 48) = a8;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 80) = type metadata accessor for ASPasswordSignInEventCollector.SignInEvent();
  *(_QWORD *)(v8 + 88) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_20E6964FC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v2 = v0[10];
  v1 = (_QWORD *)v0[11];
  v3 = v0[6];
  v4 = v0[7];
  v5 = v0[4];
  v6 = v0[3];
  v12 = v0[5];
  swift_bridgeObjectRetain();
  sub_20E6E9CE0();
  v7 = (char *)v1 + *(int *)(v2 + 28);
  v8 = sub_20E6E9BC0();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, v4, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  *v1 = v6;
  v1[1] = v5;
  v10 = (_QWORD *)((char *)v1 + *(int *)(v2 + 24));
  *v10 = v12;
  v10[1] = v3;
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_20E6965DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  sub_20E6970B4(v1, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_20E698D6C(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20E69662C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;

  sub_20E6E9BC0();
  v3 = v1[3];
  v11 = v1[2];
  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_20E69B37C;
  return sub_20E696488(a1, v11, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_20E696708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_20E6EA37C();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_20E6EA370();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_20E67BD44(a1, &qword_254A2E8A0);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_20E6EA364();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_20E696A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v9 = v8;
  v25 = a7;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E8A0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_20E6EA37C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = a3;
  v21[5] = a4;
  v21[6] = v9;
  v21[7] = a1;
  v21[8] = a2;
  v21[9] = a5;
  v22 = v25;
  v21[10] = a6;
  v21[11] = v22;
  v21[12] = a8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_20E696708((uint64_t)v19, (uint64_t)&unk_254A2E8C0, (uint64_t)v21);
  return swift_release();
}

uint64_t sub_20E696BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v8 + 72) = v12;
  *(_QWORD *)(v8 + 80) = v13;
  *(_OWORD *)(v8 + 56) = v11;
  *(_QWORD *)(v8 + 40) = a7;
  *(_QWORD *)(v8 + 48) = a8;
  *(_QWORD *)(v8 + 24) = a5;
  *(_QWORD *)(v8 + 32) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 88) = type metadata accessor for ASPasswordSignInEventCollector.SignInEvent();
  *(_QWORD *)(v8 + 96) = swift_task_alloc();
  v9 = sub_20E6E9A04();
  *(_QWORD *)(v8 + 104) = v9;
  *(_QWORD *)(v8 + 112) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 120) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  *(_QWORD *)(v8 + 128) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_20E696C7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if (v0[3])
  {
    v1 = v0[15];
    v2 = v0[13];
    v3 = v0[14];
    sub_20E6E99F8();
    sub_20E6E99EC();
    swift_bridgeObjectRetain();
    sub_20E6E99D4();
    sub_20E6E99C8();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  }
  else
  {
    v4 = v0[16];
    v5 = sub_20E6E9BC0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  }
  v6 = v0[16];
  v8 = v0[11];
  v7 = (_QWORD *)v0[12];
  v10 = v0[7];
  v9 = v0[8];
  v12 = v0[5];
  v11 = v0[6];
  swift_bridgeObjectRetain();
  sub_20E6E9CE0();
  sub_20E698D24(v6, (uint64_t)v7 + *(int *)(v8 + 28));
  *v7 = v12;
  v7[1] = v11;
  v13 = (_QWORD *)((char *)v7 + *(int *)(v8 + 24));
  *v13 = v10;
  v13[1] = v9;
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

uint64_t sub_20E696DAC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = v0[12];
  sub_20E6970B4(v1, v0[9], v0[10]);
  sub_20E698D6C(v1);
  return swift_task_switch();
}

uint64_t sub_20E696DFC()
{
  uint64_t v0;

  sub_20E67BD44(*(_QWORD *)(v0 + 128), &qword_253E8D1D0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20E696E60(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_20E69B37C;
  return sub_20E696BBC(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_20E6970B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  v8 = type metadata accessor for ASPasswordSignInEventCollector.SignInEvent();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v12 = *(_QWORD *)(v3 + 112);
  v13 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13
    && (v14 = sub_20E699938(a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20E699AC8), (v15 & 1) != 0))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v14);
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_20E698CE0(a1, (uint64_t)v11);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v16 = sub_20E69A9DC(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
  v18 = *(_QWORD *)(v16 + 16);
  v17 = *(_QWORD *)(v16 + 24);
  if (v18 >= v17 >> 1)
    v16 = sub_20E69A9DC(v17 > 1, v18 + 1, 1, v16);
  *(_QWORD *)(v16 + 16) = v18 + 1;
  sub_20E698DA8((uint64_t)v11, v16+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v18);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22 = *(_QWORD *)(v4 + 112);
  *(_QWORD *)(v4 + 112) = 0x8000000000000000;
  sub_20E6AFCF4(v16, a2, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v4 + 112) = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return sub_20E6972B8();
}

uint64_t sub_20E6972B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  char *v27;
  uint64_t v28;

  v1 = sub_20E6E9CEC();
  v23 = *(_QWORD *)(v1 - 8);
  v24 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v27 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E6E9CE0();
  v3 = (uint64_t *)(v0 + 112);
  swift_beginAccess();
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v4 + 64);
  v25 = v4 + 64;
  v6 = 1 << *(_BYTE *)(v4 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v26 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  if (v8)
    goto LABEL_6;
LABEL_7:
  if (!__OFADD__(v10++, 1))
  {
    if (v10 >= v26)
      goto LABEL_25;
    v14 = *(_QWORD *)(v25 + 8 * v10);
    if (v14)
    {
LABEL_17:
      v8 = (v14 - 1) & v14;
      for (i = __clz(__rbit64(v14)) + (v10 << 6); ; i = v11 | (v10 << 6))
      {
        v16 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * i);
        v18 = *v16;
        v17 = v16[1];
        v19 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * i);
        MEMORY[0x24BDAC7A8](result);
        *(&v22 - 2) = (uint64_t)v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v20 = sub_20E6DF020((uint64_t (*)(char *))sub_20E69B2CC, (uint64_t)(&v22 - 4), v19);
        if (*(_QWORD *)(v20 + 16))
        {
          swift_beginAccess();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v28 = *v3;
          *v3 = 0x8000000000000000;
          sub_20E6AFCF4(v20, v18, v17, isUniquelyReferenced_nonNull_native);
          *v3 = v28;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          result = swift_endAccess();
          if (!v8)
            goto LABEL_7;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_beginAccess();
          sub_20E6C2630(v18, v17);
          swift_endAccess();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if (!v8)
            goto LABEL_7;
        }
LABEL_6:
        v11 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
      }
    }
    v15 = v10 + 1;
    if (v10 + 1 >= v26)
      goto LABEL_25;
    v14 = *(_QWORD *)(v25 + 8 * v15);
    if (!v14)
    {
      v15 = v10 + 2;
      if (v10 + 2 >= v26)
        goto LABEL_25;
      v14 = *(_QWORD *)(v25 + 8 * v15);
      if (!v14)
      {
        v15 = v10 + 3;
        if (v10 + 3 < v26)
        {
          v14 = *(_QWORD *)(v25 + 8 * v15);
          if (v14)
            goto LABEL_16;
          while (1)
          {
            v10 = v15 + 1;
            if (__OFADD__(v15, 1))
              goto LABEL_27;
            if (v10 >= v26)
              break;
            v14 = *(_QWORD *)(v25 + 8 * v10);
            ++v15;
            if (v14)
              goto LABEL_17;
          }
        }
LABEL_25:
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v27, v24);
      }
    }
LABEL_16:
    v10 = v15;
    goto LABEL_17;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_20E6975B4()
{
  uint64_t result;
  double v1;

  type metadata accessor for ASPasswordSignInEventCollector.SignInEvent();
  result = sub_20E6E9CC8();
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18)
    return (uint64_t)v1 < 300;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_20E697644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[10] = a6;
  v7[11] = v6;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  v7[12] = swift_task_alloc();
  v8 = sub_20E6E9BC0();
  v7[13] = v8;
  v7[14] = *(_QWORD *)(v8 - 8);
  v7[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E8D0);
  v7[16] = swift_task_alloc();
  v9 = type metadata accessor for ASPasswordSignInEventCollector.SignInEvent();
  v7[17] = v9;
  v7[18] = *(_QWORD *)(v9 - 8);
  v7[19] = swift_task_alloc();
  v7[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_20E697730()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v1 = 0xD000000000000013;
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  sub_20E6972B8();
  v4 = 0x800000020E6F7FE0;
  v5 = v3 == 0x6F632E656C707061 && v2 == 0xE90000000000006DLL;
  if (v5 || (sub_20E6EA8EC() & 1) != 0)
    goto LABEL_23;
  v6 = *(_QWORD *)(v0 + 88) + 112;
  swift_beginAccess();
  v7 = *(_QWORD *)v6;
  if (!*(_QWORD *)(*(_QWORD *)v6 + 16))
    goto LABEL_11;
  v9 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = sub_20E699938(v9, v8, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20E699AC8);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_11:
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 128), 1, 1, *(_QWORD *)(v0 + 136));
    goto LABEL_12;
  }
  v12 = *(_QWORD *)(v0 + 128);
  v41 = *(_QWORD *)(v0 + 144);
  v42 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 56);
  v13 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 40);
  v15 = *(_QWORD *)(v0 + 48);
  v17 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_20E697FD0(v17, v14, v13, v16, v15, v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v12, 1, v42) != 1)
  {
    v18 = *(_QWORD *)(v0 + 160);
    v19 = *(_QWORD *)(v0 + 136);
    sub_20E698DA8(*(_QWORD *)(v0 + 128), v18);
    v20 = (unint64_t *)(v18 + *(int *)(v19 + 24));
    v1 = *v20;
    v4 = v20[1];
    swift_bridgeObjectRetain();
    sub_20E698D6C(v18);
    goto LABEL_23;
  }
LABEL_12:
  sub_20E67BD44(*(_QWORD *)(v0 + 128), &qword_254A2E8D0);
  v21 = *(_QWORD *)v6;
  if (*(_QWORD *)(*(_QWORD *)v6 + 16))
  {
    v23 = *(_QWORD *)(v0 + 72);
    v22 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = sub_20E699938(v23, v22, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20E699AC8);
    if ((v25 & 1) != 0)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v24);
      *(_QWORD *)(v0 + 168) = v26;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ASCRelatedOriginFetcher()), sel_init);
      *(_QWORD *)(v0 + 176) = v27;
      v28 = *(_QWORD *)(v26 + 16);
      if (v28)
      {
        *(_DWORD *)(v0 + 216) = *(_DWORD *)(*(_QWORD *)(v0 + 144) + 80);
        while (1)
        {
          *(_QWORD *)(v0 + 184) = v28;
          v29 = *(_QWORD *)(v0 + 168);
          if (v28 > *(_QWORD *)(v29 + 16))
            break;
          v30 = *(_QWORD *)(v0 + 152);
          v31 = *(_QWORD *)(v0 + 136);
          v32 = *(_QWORD *)(v0 + 104);
          v33 = *(_QWORD *)(v0 + 112);
          v34 = *(_QWORD *)(v0 + 96);
          sub_20E698CE0(v29+ ((*(unsigned __int8 *)(v0 + 216) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 216))+ *(_QWORD *)(*(_QWORD *)(v0 + 144) + 72) * (v28 - 1), v30);
          sub_20E698D24(v30 + *(int *)(v31 + 28), v34);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v34, 1, v32) != 1)
          {
            (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
            v37 = sub_20E6E9B54();
            v39 = v38;
            *(_QWORD *)(v0 + 192) = v38;
            v40 = (_QWORD *)swift_task_alloc();
            *(_QWORD *)(v0 + 200) = v40;
            *v40 = v0;
            v40[1] = sub_20E697B50;
            return sub_20E6DC310(v37, v39, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
          }
          v35 = *(_QWORD *)(v0 + 96);
          sub_20E698D6C(*(_QWORD *)(v0 + 152));
          v27 = (id)sub_20E67BD44(v35, &qword_253E8D1D0);
          v28 = *(_QWORD *)(v0 + 184) - 1;
          if (*(_QWORD *)(v0 + 184) == 1)
          {

            goto LABEL_21;
          }
        }
        __break(1u);
      }

    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_21:
    swift_bridgeObjectRelease();
  }
  v1 = 0;
  v4 = 0;
LABEL_23:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(unint64_t, unint64_t))(v0 + 8))(v1, v4);
}

uint64_t sub_20E697B50(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 208) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v1)
    *(_BYTE *)(v4 + 220) = a1 & 1;
  return swift_task_switch();
}

uint64_t sub_20E697BD4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = *(_BYTE *)(v0 + 220);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  if ((v1 & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 152);
    v3 = *(_QWORD *)(v0 + 136);

    swift_bridgeObjectRelease();
    v4 = (uint64_t *)(v2 + *(int *)(v3 + 24));
    v6 = *v4;
    v5 = v4[1];
    swift_bridgeObjectRetain();
    sub_20E698D6C(v2);
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v5);
  }
  result = sub_20E698D6C(*(_QWORD *)(v0 + 152));
  v8 = *(_QWORD *)(v0 + 184);
  v9 = v8 - 1;
  if (v8 == 1)
  {
LABEL_8:

    swift_bridgeObjectRelease();
    v6 = 0;
    v5 = 0;
    goto LABEL_3;
  }
  while (1)
  {
    *(_QWORD *)(v0 + 184) = v9;
    v10 = *(_QWORD *)(v0 + 168);
    if (v9 > *(_QWORD *)(v10 + 16))
      break;
    v11 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 136);
    v13 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 96);
    sub_20E698CE0(v10+ ((*(unsigned __int8 *)(v0 + 216) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 216))+ *(_QWORD *)(*(_QWORD *)(v0 + 144) + 72) * (v8 - 2), v11);
    sub_20E698D24(v11 + *(int *)(v12 + 28), v15);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) != 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
      v17 = sub_20E6E9B54();
      v19 = v18;
      *(_QWORD *)(v0 + 192) = v18;
      v20 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 200) = v20;
      *v20 = v0;
      v20[1] = sub_20E697B50;
      return sub_20E6DC310(v17, v19, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
    }
    v16 = *(_QWORD *)(v0 + 96);
    sub_20E698D6C(*(_QWORD *)(v0 + 152));
    result = sub_20E67BD44(v16, &qword_253E8D1D0);
    v8 = *(_QWORD *)(v0 + 184);
    v9 = v8 - 1;
    if (v8 == 1)
      goto LABEL_8;
  }
  __break(1u);
  return result;
}

void sub_20E697DD0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(void **)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 152);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
  sub_20E698D6C(v2);

  v3 = *(_QWORD *)(v0 + 184);
  v4 = v3 - 1;
  if (v3 == 1)
  {
LABEL_5:

    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 184) = v4;
      v5 = *(_QWORD *)(v0 + 168);
      if (v4 > *(_QWORD *)(v5 + 16))
        break;
      v6 = *(_QWORD *)(v0 + 152);
      v7 = *(_QWORD *)(v0 + 136);
      v8 = *(_QWORD *)(v0 + 104);
      v9 = *(_QWORD *)(v0 + 112);
      v10 = *(_QWORD *)(v0 + 96);
      sub_20E698CE0(v5+ ((*(unsigned __int8 *)(v0 + 216) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 216))+ *(_QWORD *)(*(_QWORD *)(v0 + 144) + 72) * (v3 - 2), v6);
      sub_20E698D24(v6 + *(int *)(v7 + 28), v10);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) != 1)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
        v12 = sub_20E6E9B54();
        v14 = v13;
        *(_QWORD *)(v0 + 192) = v13;
        v15 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 200) = v15;
        *v15 = v0;
        v15[1] = sub_20E697B50;
        sub_20E6DC310(v12, v14, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
        return;
      }
      v11 = *(_QWORD *)(v0 + 96);
      sub_20E698D6C(*(_QWORD *)(v0 + 152));
      sub_20E67BD44(v11, &qword_253E8D1D0);
      v3 = *(_QWORD *)(v0 + 184);
      v4 = v3 - 1;
      if (v3 == 1)
        goto LABEL_5;
    }
    __break(1u);
  }
}

uint64_t type metadata accessor for ASPasswordSignInEventCollector.SignInEvent()
{
  uint64_t result;

  result = qword_254A2E8F0;
  if (!qword_254A2E8F0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_20E697FD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v38 = a5;
  v39 = a4;
  v37 = a3;
  v40 = a2;
  v41 = type metadata accessor for ASPasswordSignInEventCollector.SignInEvent();
  v9 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v11 = (uint64_t *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
  {
    v31 = 1;
    goto LABEL_20;
  }
  v35 = a6;
  v36 = v6;
  v16 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v34 = v9;
  v17 = *(_QWORD *)(v9 + 72);
  v18 = a1 + v16 + v17 * (v15 - 1);
  v19 = -v17;
  do
  {
    sub_20E698D24(v18 + *(int *)(v41 + 28), (uint64_t)v14);
    v21 = sub_20E6E9BC0();
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v14, 1, v21) == 1)
    {
      sub_20E67BD44((uint64_t)v14, &qword_253E8D1D0);
LABEL_11:
      sub_20E698CE0(v18, (uint64_t)v11);
LABEL_12:
      sub_20E698D6C((uint64_t)v11);
      goto LABEL_4;
    }
    sub_20E6E9B90();
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v14, v21);
    if (!v24)
      goto LABEL_11;
    v25 = (void *)sub_20E6EA1C0();
    swift_bridgeObjectRelease();
    v26 = objc_msgSend(v25, sel_safari_highLevelDomainForPasswordManager);

    v27 = sub_20E6EA1CC();
    v29 = v28;

    if (v27 == v40 && v29 == v37)
    {
      swift_bridgeObjectRelease();
      sub_20E698CE0(v18, (uint64_t)v11);
    }
    else
    {
      v30 = sub_20E6EA8EC();
      swift_bridgeObjectRelease();
      sub_20E698CE0(v18, (uint64_t)v11);
      if ((v30 & 1) == 0)
        goto LABEL_12;
    }
    if (*v11 == v39 && v11[1] == v38)
    {
      sub_20E698D6C((uint64_t)v11);
LABEL_17:
      a6 = v35;
      sub_20E698CE0(v18, v35);
      v31 = 0;
      v9 = v34;
      goto LABEL_20;
    }
    v20 = sub_20E6EA8EC();
    sub_20E698D6C((uint64_t)v11);
    if ((v20 & 1) != 0)
      goto LABEL_17;
LABEL_4:
    v18 += v19;
    --v15;
  }
  while (v15);
  v31 = 1;
  a6 = v35;
  v9 = v34;
LABEL_20:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a6, v31, 1, v41);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E6982B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v9 = type metadata accessor for ASPasswordSignInEventCollector.SignInEvent();
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(_QWORD *)(v10 + 72);
    v12 = (_QWORD *)(a1
                   + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))
                   + v11 * (v6 - 1));
    v13 = -v11;
    while (1)
    {
      v14 = *v12 == a2 && v12[1] == a3;
      if (v14 || (sub_20E6EA8EC() & 1) != 0)
        break;
      v12 = (_QWORD *)((char *)v12 + v13);
      if (!--v6)
        goto LABEL_9;
    }
    sub_20E698CE0((uint64_t)v12, a4);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(a4, 0, 1, v9);
  }
  else
  {
LABEL_9:
    v15 = type metadata accessor for ASPasswordSignInEventCollector.SignInEvent();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a4, 1, 1, v15);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E698508(int a1, int a2, int a3, void *aBlock, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  v6 = sub_20E6EA1CC();
  v8 = v7;
  v5[4] = v7;
  v9 = sub_20E6EA1CC();
  v11 = v10;
  v5[5] = v10;
  v12 = sub_20E6EA1CC();
  v14 = v13;
  v5[6] = v13;
  swift_retain();
  v15 = (_QWORD *)swift_task_alloc();
  v5[7] = v15;
  *v15 = v5;
  v15[1] = sub_20E6985E4;
  return sub_20E697644(v6, v8, v9, v11, v12, v14);
}

uint64_t sub_20E6985E4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD);

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (a2)
  {
    v6 = (void *)sub_20E6EA1C0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = *(void (***)(_QWORD, _QWORD))(v4 + 24);
  ((void (**)(_QWORD, void *))v7)[2](v7, v6);

  _Block_release(v7);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_20E6986B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E8D0);
  v5[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_20E698718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v17;

  v1 = *(_QWORD *)(v0 + 72);
  sub_20E6972B8();
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 112);
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = *(_QWORD *)(v0 + 56);
    v3 = *(_QWORD *)(v0 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = sub_20E699938(v4, v3, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20E699AC8);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v0 + 80);
      v9 = *(_QWORD *)(v0 + 40);
      v8 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_20E6982B0(v10, v9, v8, v7);
      swift_bridgeObjectRelease();
      v11 = type metadata accessor for ASPasswordSignInEventCollector.SignInEvent();
      v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v7, 1, v11);
      v13 = *(_QWORD *)(v0 + 80);
      if (v12 != 1)
      {
        v17 = (uint64_t *)(v13 + *(int *)(v11 + 24));
        v14 = *v17;
        v15 = v17[1];
        swift_bridgeObjectRetain();
        sub_20E698D6C(v13);
        goto LABEL_7;
      }
      sub_20E67BD44(*(_QWORD *)(v0 + 80), &qword_254A2E8D0);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  v14 = 0;
  v15 = 0;
LABEL_7:
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v14, v15);
}

uint64_t sub_20E6989D4(int a1, int a2, void *aBlock, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v5 = sub_20E6EA1CC();
  v7 = v6;
  v4[4] = v6;
  v8 = sub_20E6EA1CC();
  v10 = v9;
  v4[5] = v9;
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc();
  v4[6] = v11;
  *v11 = v4;
  v11[1] = sub_20E698A88;
  return sub_20E6986B4(v5, v7, v8, v10);
}

uint64_t sub_20E698A88(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void (**v7)(_QWORD, _QWORD);

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (a2)
  {
    v6 = (void *)sub_20E6EA1C0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = *(void (***)(_QWORD, _QWORD))(v4 + 24);
  ((void (**)(_QWORD, void *))v7)[2](v7, v6);

  _Block_release(v7);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

id ASPasswordSignInEventCollector.__allocating_init()()
{
  objc_class *v0;
  _QWORD *v1;
  objc_super v3;

  v1 = (_QWORD *)swift_allocObject();
  swift_defaultActor_initialize();
  swift_retain();
  v1[14] = sub_20E6A5880(MEMORY[0x24BEE4AF8]);
  swift_release();
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

id ASPasswordSignInEventCollector.init()()
{
  _QWORD *v0;
  objc_super v2;

  swift_defaultActor_initialize();
  swift_retain();
  v0[14] = sub_20E6A5880(MEMORY[0x24BEE4AF8]);
  swift_release();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASPasswordSignInEventCollector();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t ASPasswordSignInEventCollector.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ASPasswordSignInEventCollector.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t ASPasswordSignInEventCollector.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_20E698CC0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_20E698CCC(uint64_t a1, uint64_t a2)
{
  return sub_20E699938(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_20E699AC8);
}

uint64_t sub_20E698CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ASPasswordSignInEventCollector.SignInEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20E698D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_20E698D6C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ASPasswordSignInEventCollector.SignInEvent();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20E698DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ASPasswordSignInEventCollector.SignInEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ASPasswordSignInEventCollector()
{
  return objc_opt_self();
}

uint64_t method lookup function for ASPasswordSignInEventCollector()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ASPasswordSignInEventCollector.didUseCredential(username:for:from:inBrowser:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ASPasswordSignInEventCollector.didUseCredential(username:for:from:inApp:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ASPasswordSignInEventCollector.providerForRecentlyFilledCredential(withUsername:for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  int *v14;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = *(int **)((*MEMORY[0x24BEE4EA0] & *v6) + 0x98);
  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v14 + *v14);
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = sub_20E698F00;
  return v17(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_20E698F00(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of ASPasswordSignInEventCollector.providerForRecentlyFilledCredential(withUsername:forApp:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  int *v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);

  v10 = *(int **)((*MEMORY[0x24BEE4EA0] & *v4) + 0xA0);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_20E69B380;
  return v13(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ASPasswordSignInEventCollector.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t *sub_20E698FF8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_20E6E9CEC();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v4 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = (char *)v4 + v14;
    v19 = (char *)a2 + v14;
    v20 = sub_20E6E9BC0();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    swift_bridgeObjectRetain();
    if (v22(v19, 1, v20))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  return v4;
}

uint64_t sub_20E699140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_20E6E9CEC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 28);
  v7 = sub_20E6E9BC0();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

_QWORD *sub_20E6991F0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_20E6E9CEC();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v12);
  v15 = (_QWORD *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (char *)a1 + v13;
  v18 = (char *)a2 + v13;
  v19 = sub_20E6E9BC0();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  swift_bridgeObjectRetain();
  if (v21(v18, 1, v19))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

_QWORD *sub_20E69930C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  uint64_t v20;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_20E6E9CEC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = a3[6];
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = sub_20E6E9BC0();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v8) = v18(v14, 1, v16);
  v19 = v18(v15, 1, v16);
  if (!(_DWORD)v8)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v14, v15, v16);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

_OWORD *sub_20E69948C(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_20E6E9CEC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_20E6E9BC0();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

_QWORD *sub_20E699584(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_20E6E9CEC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  v16 = a3[7];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = sub_20E6E9BC0();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v9) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v9)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t sub_20E6996E4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6996F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_20E6E9CEC();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_20E699794()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6997A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_20E6E9CEC();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_20E699840()
{
  unint64_t v0;
  unint64_t v1;

  sub_20E6E9CEC();
  if (v0 <= 0x3F)
  {
    sub_20E6998D0();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_20E6998D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_254A2E900)
  {
    sub_20E6E9BC0();
    v0 = sub_20E6EA484();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_254A2E900);
  }
}

uint64_t sub_20E699924(uint64_t a1, uint64_t a2)
{
  return sub_20E699938(a1, a2, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BDCDCF8], sub_20E699BA8);
}

uint64_t sub_20E699938(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  _BYTE v10[72];

  sub_20E6EA988();
  a3(v10, a1, a2);
  v7 = sub_20E6EA9A0();
  return a4(a1, a2, v7);
}

unint64_t sub_20E6999B0(uint64_t a1)
{
  uint64_t v2;

  sub_20E6EA6D0();
  v2 = sub_20E6EA16C();
  return sub_20E69A538(a1, v2);
}

unint64_t sub_20E699A00(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20E6EA460();
  return sub_20E69A724(a1, v2, (unint64_t *)&qword_254A2E950);
}

unint64_t sub_20E699A4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20E6EA5A4();
  return sub_20E69A660(a1, v2);
}

unint64_t sub_20E699A7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20E6EA460();
  return sub_20E69A724(a1, v2, &qword_254A2E378);
}

unint64_t sub_20E699AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_20E6EA8EC() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_20E6EA8EC() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_20E699BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

unint64_t sub_20E69A538(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = sub_20E6EA6D0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_20E6EA1B4();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_20E69A660(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_20E69B290(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x212BC2DD8](v9, a1);
      sub_20E67B954((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_20E69A724(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a2 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_20E67BE44(0, a3);
    v7 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
    v8 = sub_20E6EA46C();

    if ((v8 & 1) == 0)
    {
      v9 = ~v5;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
        v11 = sub_20E6EA46C();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

uint64_t sub_20E69A834(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_20E69A898;
  return v6(a1);
}

uint64_t sub_20E69A898()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

char *sub_20E69A8E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DE90);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_20E69ABE4(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_20E69A9DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E158);
  v10 = *(_QWORD *)(type metadata accessor for ASPasswordSignInEventCollector.SignInEvent() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = sub_20E6EA718();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for ASPasswordSignInEventCollector.SignInEvent() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_20E69ACC8(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

char *sub_20E69ABE4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_20E6EA778();
  __break(1u);
  return result;
}

uint64_t sub_20E69ACC8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(type metadata accessor for ASPasswordSignInEventCollector.SignInEvent() - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = sub_20E6EA778();
  __break(1u);
  return result;
}

uint64_t sub_20E69ADE0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_20E69AE1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_20E69B37C;
  return ((uint64_t (*)(int, int, void *, uint64_t))&asc_254A2E908[*(int *)asc_254A2E908])(v2, v3, v5, v4);
}

uint64_t sub_20E69AE9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_20E69B37C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_254A2F888 + dword_254A2F888))(a1, v4, v5, v6);
}

uint64_t sub_20E69AF20()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_20E69AF64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v6 = v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_20E69B37C;
  return ((uint64_t (*)(int, int, int, void *, uint64_t))((char *)&dword_254A2E920 + dword_254A2E920))(v2, v3, v4, v5, v6);
}

uint64_t sub_20E69AFE8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_20E69B37C;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))&aX[*(int *)aX])(v2, v3, v4);
}

uint64_t objectdestroy_14Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_3Tm()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_20E69B0E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v4 = v1[3];
  v12 = v1[2];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_20E69B198;
  return sub_20E696BBC(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_20E69B198()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_20E6E9BC0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_20E69B290(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_20E69B2CC()
{
  return sub_20E6975B4() & 1;
}

uint64_t sub_20E69B2E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_20E69B30C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_20E69B198;
  return ((uint64_t (*)(uint64_t, int *))&aU[*(int *)aU])(a1, v4);
}

uint64_t sub_20E69B384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;
  uint64_t v6;

  sub_20E67B910(v0 + 32, (uint64_t)&v5, &qword_254A2E968);
  sub_20E67B910((uint64_t)&v5, (uint64_t)&v6, &qword_254A2E968);
  v1 = v6;
  if (v6 && *(_QWORD *)(v6 + 16) && (v2 = sub_20E698CCC(30325, 0xE200000000000000), (v3 & 1) != 0))
    return ~*(unsigned __int8 *)(*(_QWORD *)(v1 + 56) + v2) & 1;
  else
    return 2;
}

uint64_t sub_20E69B408(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v10;
  char v11;
  _BYTE v12[8];
  _BYTE v13[8];
  _BYTE v14[8];
  _BYTE v15[8];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E9A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E69C850();
  sub_20E6EA9C4();
  *(_QWORD *)&v10 = *(_QWORD *)v3;
  v11 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
  sub_20E69C8F8(&qword_254A2EEA0, (uint64_t *)&unk_254A2EE80, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
  sub_20E6EA88C();
  if (!v2)
  {
    sub_20E67B910(v3 + 8, (uint64_t)v15, &qword_254A2E9A8);
    sub_20E67B910((uint64_t)v15, (uint64_t)&v10, &qword_254A2E9A8);
    v11 = 1;
    sub_20E6EA868();
    v10 = *(_OWORD *)(v3 + 16);
    v11 = 2;
    sub_20E66AD88();
    sub_20E6EA88C();
    sub_20E67B910(v3 + 32, (uint64_t)v14, &qword_254A2E968);
    sub_20E67B910((uint64_t)v14, (uint64_t)&v10, &qword_254A2E968);
    v11 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E980);
    sub_20E69C894(&qword_254A2E9B0, MEMORY[0x24BEE0D08], MEMORY[0x24BEE1330], MEMORY[0x24BEE04C0]);
    sub_20E6EA868();
    LOBYTE(v10) = 4;
    sub_20E6EA85C();
    sub_20E67B910(v3 + 56, (uint64_t)v13, &qword_254A2E9B8);
    sub_20E67B910((uint64_t)v13, (uint64_t)&v10, &qword_254A2E9B8);
    v11 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E990);
    sub_20E69C8F8(&qword_254A2E9C0, &qword_254A2E990, MEMORY[0x24BEE1E90], MEMORY[0x24BEE12A0]);
    sub_20E6EA868();
    sub_20E67B910(v3 + 64, (uint64_t)v12, &qword_254A2E9A8);
    sub_20E67B910((uint64_t)v12, (uint64_t)&v10, &qword_254A2E9A8);
    v11 = 6;
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

BOOL sub_20E69B778(char *a1, char *a2)
{
  return qword_20E6F0570[*a1] == qword_20E6F0570[*a2];
}

uint64_t sub_20E69B79C()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

uint64_t sub_20E69B7E8()
{
  return sub_20E6EA994();
}

uint64_t sub_20E69B81C()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

uint64_t sub_20E69B864@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_20E69BF30(*a1);
  *a2 = result;
  return result;
}

void sub_20E69B88C(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_20E6F0570[*v1];
}

uint64_t sub_20E69B8A4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20E69B8D4 + 4 * byte_20E6F0360[*v0]))(0x736E6F6973726576, 0xE800000000000000);
}

uint64_t sub_20E69B8D4()
{
  return 0x6F69736E65747865;
}

uint64_t sub_20E69B8F0()
{
  return 0x646975676161;
}

uint64_t sub_20E69B904()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_20E69B91C()
{
  return 0x617373654D78616DLL;
}

uint64_t sub_20E69B940()
{
  return 0x6F746F72506E6970;
}

uint64_t sub_20E69B960()
{
  return 0x726F70736E617274;
}

uint64_t sub_20E69B980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E69BF54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E69B9A4()
{
  char *v0;

  return qword_20E6F0570[*v0];
}

uint64_t sub_20E69B9BC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_20E69BF30(a1);
  *a2 = result;
  return result;
}

uint64_t sub_20E69B9E0()
{
  sub_20E69C850();
  return sub_20E6EA9D0();
}

uint64_t sub_20E69BA08()
{
  sub_20E69C850();
  return sub_20E6EA9DC();
}

__n128 sub_20E69BA30@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_20E69C27C(a1, v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_20E69BA80(_QWORD *a1)
{
  return sub_20E69B408(a1);
}

BOOL sub_20E69BAC0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_20E69BB18((uint64_t)v7, (uint64_t)v9);
}

BOOL sub_20E69BB18(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  if ((sub_20E6D1A0C(*(_QWORD **)a1, *(_QWORD **)a2) & 1) == 0)
    return 0;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(a2 + 8);
  if (v4)
  {
    if (!v5 || (sub_20E6D1A0C(v4, v5) & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  sub_20E6B0F54(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(a1 + 32))
    {
      if (!v7)
        return 0;
      swift_bridgeObjectRetain();
      v8 = swift_bridgeObjectRetain();
      v9 = sub_20E69F0EC(v8, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v9 & 1) == 0)
        return 0;
    }
    else if (v7)
    {
      return 0;
    }
    v10 = *(_BYTE *)(a2 + 48);
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 48))
        return 0;
    }
    else
    {
      if (*(_QWORD *)(a1 + 40) != *(_QWORD *)(a2 + 40))
        v10 = 1;
      if ((v10 & 1) != 0)
        return 0;
    }
    v11 = *(_QWORD **)(a1 + 56);
    v12 = *(_QWORD **)(a2 + 56);
    if (v11)
    {
      if (!v12 || !sub_20E6D1AD0(v11, v12))
        return 0;
    }
    else if (v12)
    {
      return 0;
    }
    v13 = *(_QWORD **)(a1 + 64);
    v14 = *(_QWORD **)(a2 + 64);
    if (v13)
      return v14 && (sub_20E6D1A0C(v13, v14) & 1) != 0;
    if (!v14)
      return 1;
  }
  return 0;
}

uint64_t destroy for ASCTAPGetInfoResponse(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_20E6673F4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ASCTAPGetInfoResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_20E66A990(v5, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ASCTAPGetInfoResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  sub_20E66A990(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  sub_20E6673F4(v6, v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ASCTAPGetInfoResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_20E6673F4(v4, v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPGetInfoResponse(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPGetInfoResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPGetInfoResponse()
{
  return &type metadata for ASCTAPGetInfoResponse;
}

uint64_t sub_20E69BF30(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8)
    return 7;
  else
    return byte_20E6F05A8[a1 - 1];
}

uint64_t sub_20E69BF54(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x736E6F6973726576 && a2 == 0xE800000000000000;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69736E65747865 && a2 == 0xEA0000000000736ELL || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646975676161 && a2 == 0xE600000000000000 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x617373654D78616DLL && a2 == 0xEE00657A69536567 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F746F72506E6970 && a2 == 0xEC000000736C6F63 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x726F70736E617274 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_20E69C27C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  char v41;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E970);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E69C850();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v37 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
  v41 = 0;
  v9 = sub_20E69C8F8((unint64_t *)&qword_254A2F7C0, (uint64_t *)&unk_254A2EE80, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  sub_20E6EA7FC();
  v10 = v38;
  v41 = 1;
  swift_bridgeObjectRetain();
  sub_20E6EA7D8();
  v35 = v9;
  v36 = v10;
  v11 = v38;
  v41 = 2;
  sub_20E66AE8C();
  swift_bridgeObjectRetain();
  sub_20E6EA7FC();
  v34 = v11;
  v12 = v38;
  v13 = v39;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E980);
  v41 = 3;
  v33 = v12;
  sub_20E66A990(v12, v13);
  sub_20E69C894(&qword_254A2E988, MEMORY[0x24BEE0D38], MEMORY[0x24BEE1348], MEMORY[0x24BEE04E0]);
  sub_20E6EA7D8();
  v31 = v13;
  v14 = v38;
  LOBYTE(v38) = 4;
  swift_bridgeObjectRetain();
  v30 = 0;
  v15 = sub_20E6EA7CC();
  v32 = v14;
  v40 = v16;
  v29 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E990);
  v41 = 5;
  sub_20E69C8F8(&qword_254A2E998, &qword_254A2E990, MEMORY[0x24BEE1EB8], MEMORY[0x24BEE12D0]);
  sub_20E6EA7D8();
  v17 = v38;
  v41 = 6;
  swift_bridgeObjectRetain();
  sub_20E6EA7D8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v18 = v38;
  v19 = v17;
  v20 = v36;
  swift_bridgeObjectRetain();
  v21 = v34;
  swift_bridgeObjectRetain();
  v22 = v33;
  v23 = v31;
  sub_20E66A990(v33, v31);
  swift_bridgeObjectRetain();
  sub_20E6673F4(v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_20E6673F4(v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = v32;
  result = swift_bridgeObjectRelease();
  v26 = v37;
  *v37 = v20;
  v26[1] = v21;
  v26[2] = v22;
  v26[3] = v23;
  v27 = v29;
  v26[4] = v24;
  v26[5] = v27;
  *((_BYTE *)v26 + 48) = v40 & 1;
  v26[7] = v19;
  v26[8] = v18;
  return result;
}

unint64_t sub_20E69C850()
{
  unint64_t result;

  result = qword_254A2E978;
  if (!qword_254A2E978)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F051C, &type metadata for ASCTAPGetInfoResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E978);
  }
  return result;
}

uint64_t sub_20E69C894(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_254A2E980);
    v10[0] = a2;
    v10[1] = a3;
    result = MEMORY[0x212BC39A8](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20E69C8F8(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3;
    result = MEMORY[0x212BC39A8](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ASCTAPGetInfoResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPGetInfoResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_20E69CA30 + 4 * byte_20E6F036C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_20E69CA64 + 4 * byte_20E6F0367[v4]))();
}

uint64_t sub_20E69CA64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E69CA6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E69CA74);
  return result;
}

uint64_t sub_20E69CA80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E69CA88);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_20E69CA8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E69CA94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPGetInfoResponse.CodingKeys()
{
  return &type metadata for ASCTAPGetInfoResponse.CodingKeys;
}

unint64_t sub_20E69CAB4()
{
  unint64_t result;

  result = qword_254A2E9C8;
  if (!qword_254A2E9C8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F04F4, &type metadata for ASCTAPGetInfoResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E9C8);
  }
  return result;
}

unint64_t sub_20E69CAFC()
{
  unint64_t result;

  result = qword_254A2E9D0;
  if (!qword_254A2E9D0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F042C, &type metadata for ASCTAPGetInfoResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E9D0);
  }
  return result;
}

unint64_t sub_20E69CB44()
{
  unint64_t result;

  result = qword_254A2E9D8;
  if (!qword_254A2E9D8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F0454, &type metadata for ASCTAPGetInfoResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2E9D8);
  }
  return result;
}

uint64_t destroy for ASCTAPCommand(uint64_t a1)
{
  return sub_20E678130(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160),
           *(_QWORD *)(a1 + 168),
           *(_QWORD *)(a1 + 176),
           *(_QWORD *)(a1 + 184),
           *(_QWORD *)(a1 + 192),
           *(_QWORD *)(a1 + 200),
           *(_QWORD *)(a1 + 208),
           *(_BYTE *)(a1 + 216));
}

uint64_t initializeWithCopy for ASCTAPCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a2 + 168);
  v26 = *(_QWORD *)(a2 + 176);
  v27 = *(_QWORD *)(a2 + 184);
  v28 = *(_QWORD *)(a2 + 192);
  v29 = *(_QWORD *)(a2 + 200);
  v30 = *(_QWORD *)(a2 + 208);
  v31 = *(_BYTE *)(a2 + 216);
  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  sub_20E677A74(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v3, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 160) = v24;
  *(_QWORD *)(a1 + 168) = v25;
  *(_QWORD *)(a1 + 176) = v26;
  *(_QWORD *)(a1 + 184) = v27;
  *(_QWORD *)(a1 + 192) = v28;
  *(_QWORD *)(a1 + 200) = v29;
  *(_QWORD *)(a1 + 208) = v30;
  *(_BYTE *)(a1 + 216) = v31;
  return a1;
}

uint64_t assignWithCopy for ASCTAPCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  v32 = *(_QWORD *)(a2 + 72);
  v33 = *(_QWORD *)(a2 + 80);
  v34 = *(_QWORD *)(a2 + 88);
  v35 = *(_QWORD *)(a2 + 96);
  v36 = *(_QWORD *)(a2 + 104);
  v37 = *(_QWORD *)(a2 + 112);
  v38 = *(_QWORD *)(a2 + 120);
  v39 = *(_QWORD *)(a2 + 128);
  v40 = *(_QWORD *)(a2 + 136);
  v41 = *(_QWORD *)(a2 + 144);
  v42 = *(_QWORD *)(a2 + 152);
  v43 = *(_QWORD *)(a2 + 160);
  v44 = *(_QWORD *)(a2 + 168);
  v45 = *(_QWORD *)(a2 + 176);
  v46 = *(_QWORD *)(a2 + 184);
  v47 = *(_QWORD *)(a2 + 192);
  v48 = *(_QWORD *)(a2 + 200);
  v49 = *(_QWORD *)(a2 + 208);
  v50 = *(_BYTE *)(a2 + 216);
  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  sub_20E677A74(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v3, v32, v33, v34, v35, v36, v37, v38, v39, v40, v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = v32;
  *(_QWORD *)(a1 + 80) = v33;
  *(_QWORD *)(a1 + 88) = v34;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v35;
  *(_QWORD *)(a1 + 104) = v36;
  *(_QWORD *)(a1 + 112) = v37;
  *(_QWORD *)(a1 + 120) = v38;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v39;
  *(_QWORD *)(a1 + 136) = v40;
  *(_QWORD *)(a1 + 144) = v41;
  *(_QWORD *)(a1 + 152) = v42;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v43;
  *(_QWORD *)(a1 + 168) = v44;
  *(_QWORD *)(a1 + 176) = v45;
  *(_QWORD *)(a1 + 184) = v46;
  v28 = *(_OWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v47;
  *(_QWORD *)(a1 + 200) = v48;
  v29 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = v49;
  v30 = *(_BYTE *)(a1 + 216);
  *(_BYTE *)(a1 + 216) = v50;
  sub_20E678130(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((unint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    v30);
  return a1;
}

__n128 __swift_memcpy217_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for ASCTAPCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v4 = *(_QWORD *)(a2 + 208);
  v5 = *(_BYTE *)(a2 + 216);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_OWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 80);
  v16 = *(_OWORD *)(a1 + 96);
  v17 = *(_OWORD *)(a1 + 112);
  v18 = *(_OWORD *)(a1 + 128);
  v19 = *(_OWORD *)(a1 + 144);
  v20 = *(_OWORD *)(a1 + 160);
  v21 = *(_OWORD *)(a1 + 176);
  v22 = *(_OWORD *)(a1 + 192);
  v23 = *(_QWORD *)(a1 + 208);
  v24 = *(_BYTE *)(a1 + 216);
  v25 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v25;
  v26 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v26;
  v27 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v27;
  v28 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v28;
  v29 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v29;
  v30 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v30;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = v4;
  *(_BYTE *)(a1 + 216) = v5;
  sub_20E678130(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((unint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPCommand(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 217))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 216);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 216) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 217) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 217) = 0;
    if (a2)
      *(_BYTE *)(result + 216) = -(char)a2;
  }
  return result;
}

uint64_t sub_20E69D120(uint64_t result, char a2)
{
  *(_BYTE *)(result + 216) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPCommand()
{
  return &type metadata for ASCTAPCommand;
}

uint64_t sub_20E69D13C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int16 v7;
  __int16 v8;
  char v9;
  _WORD *v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  sub_20E66A990(a1, a2);
  sub_20E68458C(a1, a2);
  v8 = v7;
  sub_20E6673F4(a1, a2);
  if ((v8 & 0x100) != 0)
  {
    sub_20E6A1880();
    swift_allocError();
    *v10 = 256;
    return swift_willThrow();
  }
  if (v8 != 1)
  {
    if (v8 == 2)
    {
      v9 = 1;
      goto LABEL_7;
    }
    sub_20E6A1880();
    swift_allocError();
    *v13 = v8;
    v13[1] = 0;
    return swift_willThrow();
  }
  v9 = 0;
LABEL_7:
  sub_20E6E9D40();
  swift_allocObject();
  sub_20E6E9D34();
  if ((v9 & 1) == 0)
  {
    sub_20E66A990(a1, a2);
    sub_20E687B84(1, a1, a2);
    v11 = v43;
    v12 = v44;
    sub_20E6A1914();
    sub_20E6E9D1C();
    if (!v3)
    {
      swift_release();
      sub_20E6673F4(v43, v44);
      v39 = v25;
      v40 = v26;
      v41 = v27;
      v42 = v28;
      v35 = v21;
      v36 = v22;
      v37 = v23;
      v38 = v24;
      v31 = v17;
      v32 = v18;
      v33 = v19;
      v34 = v20;
      v29 = v15;
      v30 = v16;
      sub_20E6A1958((uint64_t)&v29);
      return sub_20E677988((uint64_t)&v29, a3);
    }
LABEL_13:
    swift_release();
    return sub_20E6673F4(v11, v12);
  }
  sub_20E66A990(a1, a2);
  sub_20E687B84(1, a1, a2);
  v11 = v43;
  v12 = v44;
  sub_20E6A18C4();
  sub_20E6E9D1C();
  if (v3)
    goto LABEL_13;
  swift_release();
  sub_20E6673F4(v43, v44);
  v35 = v21;
  v36 = v22;
  v37 = v23;
  v31 = v17;
  v32 = v18;
  v33 = v19;
  v34 = v20;
  v29 = v15;
  v30 = v16;
  sub_20E6A1908((uint64_t)&v29);
  return sub_20E677988((uint64_t)&v29, a3);
}

uint64_t sub_20E69D3F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20E69D434 + 4 * byte_20E6F05C0[a1]))(0x6144746E65696C63, 0xEE00687361486174);
}

uint64_t sub_20E69D434()
{
  return 0x50676E69796C6572;
}

uint64_t sub_20E69D454()
{
  return 1919251317;
}

unint64_t sub_20E69D464()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_20E69D480()
{
  return 0x4C6564756C637865;
}

uint64_t sub_20E69D4A0()
{
  return 0x6F69736E65747865;
}

uint64_t sub_20E69D4BC()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_20E69D4D4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EA78);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v43 = v1[3];
  v44 = v9;
  v10 = v1[4];
  v41 = v1[5];
  v42 = v10;
  v11 = v1[6];
  v39 = v1[7];
  v40 = v11;
  v12 = v1[8];
  v37 = v1[9];
  v38 = v12;
  v36 = v1[10];
  v35 = v1[11];
  v34 = v1[12];
  v33 = v1[13];
  v20 = v1[14];
  v21 = v1[15];
  v22 = v1[16];
  v23 = v1[17];
  v32 = v1[18];
  v31 = v1[19];
  v30 = v1[20];
  v29 = v1[21];
  v28 = v1[22];
  v27 = v1[23];
  v26 = v1[24];
  v25 = v1[25];
  v24 = v1[26];
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6A35A8();
  sub_20E6EA9C4();
  v46 = v8;
  v47 = v7;
  v58 = 0;
  sub_20E66AD88();
  v13 = v45;
  sub_20E6EA88C();
  if (!v13)
  {
    v14 = v37;
    v15 = v38;
    v17 = v39;
    v16 = v40;
    v46 = v44;
    v47 = v43;
    v48 = v42;
    v49 = v41;
    v58 = 1;
    sub_20E6A39A8();
    sub_20E6EA88C();
    v46 = v16;
    v47 = v17;
    v48 = v15;
    v49 = v14;
    v50 = v36;
    v51 = v35;
    v58 = 2;
    sub_20E6A39EC();
    sub_20E6EA88C();
    v46 = v34;
    v58 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EA48);
    sub_20E6A3A30(&qword_254A2EA90, &qword_254A2EA48, (uint64_t (*)(void))sub_20E6A3A94, MEMORY[0x24BEE12A0]);
    sub_20E6EA88C();
    v46 = v33;
    v58 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EA08);
    sub_20E6A3A30(&qword_254A2EA68, &qword_254A2EA08, (uint64_t (*)(void))sub_20E6A3920, MEMORY[0x24BEE12A0]);
    sub_20E6EA868();
    v46 = v21;
    v47 = v22;
    v48 = v23;
    v49 = v32;
    v50 = v31;
    v51 = v30;
    v52 = v29;
    v53 = v28;
    v54 = v27;
    v55 = v26;
    v56 = v25;
    v57 = v24;
    v58 = 5;
    sub_20E6A3964();
    sub_20E6EA868();
    v46 = v20;
    v58 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E980);
    sub_20E69C894(&qword_254A2E9B0, MEMORY[0x24BEE0D08], MEMORY[0x24BEE1330], MEMORY[0x24BEE04C0]);
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_20E69D984@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[24];
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EA28);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v71 = a1;
  __swift_project_boxed_opaque_existential_1Tm(a1, v9);
  sub_20E6A35A8();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
  v70 = a2;
  LOBYTE(v72) = 0;
  sub_20E66AE8C();
  sub_20E6EA7FC();
  v10 = *(_QWORD *)v86;
  v11 = *(_QWORD *)&v86[8];
  LOBYTE(v72) = 1;
  sub_20E66A990(*(uint64_t *)v86, *(unint64_t *)&v86[8]);
  sub_20E6A35EC();
  sub_20E6EA7FC();
  *(_QWORD *)&v68 = v10;
  *((_QWORD *)&v68 + 1) = v11;
  v12 = *(_QWORD *)&v86[8];
  v13 = v87;
  v57 = *(_QWORD *)&v86[16];
  v58 = *(_QWORD *)v86;
  LOBYTE(v72) = 2;
  sub_20E6A3630();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_20E6EA7FC();
  v54 = v13;
  v55 = v12;
  v15 = *(_OWORD *)&v86[8];
  v14 = v87;
  v16 = v89;
  v46 = *(_QWORD *)v86;
  v47 = v88;
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EA48);
  LOBYTE(v72) = 3;
  v66 = v15;
  swift_bridgeObjectRetain();
  v60 = *((_QWORD *)&v15 + 1);
  v67 = v14;
  sub_20E66A990(*((uint64_t *)&v15 + 1), v14);
  sub_20E6A3A30(&qword_254A2EA50, &qword_254A2EA48, (uint64_t (*)(void))sub_20E6A3674, MEMORY[0x24BEE12D0]);
  v59 = v16;
  swift_bridgeObjectRetain();
  sub_20E6EA7FC();
  LODWORD(v69) = 1;
  v17 = *(_QWORD *)v86;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EA08);
  LOBYTE(v72) = 4;
  sub_20E6A3A30(&qword_254A2EA10, &qword_254A2EA08, (uint64_t (*)(void))sub_20E6A3360, MEMORY[0x24BEE12D0]);
  swift_bridgeObjectRetain();
  sub_20E6EA7D8();
  v56 = v17;
  v18 = *(_QWORD *)v86;
  LOBYTE(v72) = 5;
  sub_20E6A33A4();
  swift_bridgeObjectRetain();
  sub_20E6EA7D8();
  v65 = v18;
  v52 = *(_QWORD *)v86;
  v53 = *(_OWORD *)&v86[8];
  v51 = v87;
  v63 = v88;
  v64 = v89;
  v62 = v90;
  v19 = v91;
  v20 = v92;
  v21 = v93;
  v22 = v94;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E980);
  v108 = 6;
  v48 = v22;
  v49 = v21;
  v44 = v21;
  v23 = v62;
  v50 = v20;
  v61 = v19;
  sub_20E6782F0(v52, v53, *((uint64_t *)&v53 + 1), v51, v63, v64, *((uint64_t *)&v64 + 1), v62, v19, v20, v44, v22, (void (*)(void))sub_20E677C30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677C6C);
  sub_20E69C894(&qword_254A2E988, MEMORY[0x24BEE0D38], MEMORY[0x24BEE1348], MEMORY[0x24BEE04E0]);
  sub_20E6EA7D8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v69 = v109;
  v72 = v68;
  *(_QWORD *)&v73 = v58;
  *((_QWORD *)&v73 + 1) = v55;
  *(_QWORD *)&v74 = v57;
  *((_QWORD *)&v74 + 1) = v54;
  *(_QWORD *)&v75 = v46;
  *((_QWORD *)&v75 + 1) = v66;
  *(_QWORD *)&v76 = v60;
  *((_QWORD *)&v76 + 1) = v67;
  *(_QWORD *)&v77 = v47;
  *((_QWORD *)&v77 + 1) = v59;
  *(_QWORD *)&v78 = v56;
  *((_QWORD *)&v78 + 1) = v65;
  v24 = v51;
  *(_QWORD *)&v79 = v109;
  *((_QWORD *)&v79 + 1) = v52;
  v80 = v53;
  v25 = v63;
  v26 = v64;
  *(_QWORD *)&v81 = v51;
  *((_QWORD *)&v81 + 1) = v63;
  v82 = v64;
  v27 = v61;
  *(_QWORD *)&v83 = v23;
  *((_QWORD *)&v83 + 1) = v61;
  v29 = v49;
  v28 = v50;
  *(_QWORD *)&v84 = v50;
  *((_QWORD *)&v84 + 1) = v49;
  v30 = v48;
  v85 = v48;
  sub_20E6A36B8((uint64_t)&v72);
  sub_20E6782F0(v52, v53, *((uint64_t *)&v53 + 1), v24, v25, v26, *((uint64_t *)&v64 + 1), v62, v27, v28, v29, v30, (void (*)(void))sub_20E66AA3C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E66AA78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = v67;
  sub_20E6673F4(v60, v67);
  v32 = v54;
  swift_bridgeObjectRelease();
  v33 = v55;
  swift_bridgeObjectRelease();
  v34 = v59;
  swift_bridgeObjectRelease();
  v35 = v68;
  sub_20E6673F4(v68, *((unint64_t *)&v68 + 1));
  v36 = v83;
  v37 = v70;
  *(_OWORD *)(v70 + 160) = v82;
  *(_OWORD *)(v37 + 176) = v36;
  *(_OWORD *)(v37 + 192) = v84;
  *(_QWORD *)(v37 + 208) = v85;
  v38 = v79;
  *(_OWORD *)(v37 + 96) = v78;
  *(_OWORD *)(v37 + 112) = v38;
  v39 = v81;
  *(_OWORD *)(v37 + 128) = v80;
  *(_OWORD *)(v37 + 144) = v39;
  v40 = v75;
  *(_OWORD *)(v37 + 32) = v74;
  *(_OWORD *)(v37 + 48) = v40;
  v41 = v77;
  *(_OWORD *)(v37 + 64) = v76;
  *(_OWORD *)(v37 + 80) = v41;
  v42 = v73;
  *(_OWORD *)v37 = v72;
  *(_OWORD *)(v37 + 16) = v42;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
  *(_OWORD *)v86 = v35;
  *(_QWORD *)&v86[16] = v58;
  v87 = v33;
  v88 = v57;
  *(_QWORD *)&v89 = v32;
  *((_QWORD *)&v89 + 1) = v46;
  v90 = v66;
  v91 = v60;
  v92 = v31;
  v93 = v47;
  v94 = v34;
  v95 = v56;
  v96 = v65;
  v97 = v69;
  v98 = v52;
  v99 = v53;
  v100 = v51;
  v101 = v63;
  v102 = v64;
  v103 = v62;
  v104 = v61;
  v105 = v50;
  v106 = v49;
  v107 = v48;
  return sub_20E6A37EC((uint64_t)v86);
}

uint64_t sub_20E69E3C4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EA60);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v30 = v1[3];
  v31 = v7;
  v29 = v1[4];
  v16 = v1[5];
  v8 = v1[6];
  v27 = v1[7];
  v28 = v8;
  v9 = v1[8];
  v25 = v1[9];
  v26 = v9;
  v24 = v1[10];
  v23 = v1[11];
  v22 = v1[12];
  v21 = v1[13];
  v20 = v1[14];
  v19 = v1[15];
  v18 = v1[16];
  v17 = v1[17];
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6A331C();
  sub_20E6EA9C4();
  LOBYTE(v33) = 0;
  v10 = v32;
  sub_20E6EA874();
  if (!v10)
  {
    v12 = v28;
    v11 = v29;
    v13 = v26;
    v14 = v27;
    v33 = v31;
    v34 = v30;
    v45 = 1;
    sub_20E66AD88();
    sub_20E6EA88C();
    v33 = v11;
    v45 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EA08);
    sub_20E6A3A30(&qword_254A2EA68, &qword_254A2EA08, (uint64_t (*)(void))sub_20E6A3920, MEMORY[0x24BEE12A0]);
    sub_20E6EA868();
    v33 = v12;
    v34 = v14;
    v35 = v13;
    v36 = v25;
    v37 = v24;
    v38 = v23;
    v39 = v22;
    v40 = v21;
    v41 = v20;
    v42 = v19;
    v43 = v18;
    v44 = v17;
    v45 = 3;
    sub_20E6A3964();
    sub_20E6EA868();
    v33 = v16;
    v45 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E980);
    sub_20E69C894(&qword_254A2E9B0, MEMORY[0x24BEE0D08], MEMORY[0x24BEE1330], MEMORY[0x24BEE04C0]);
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_20E69E704@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _OWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  unsigned __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  unsigned __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unsigned __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unsigned __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  unsigned __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;

  v57 = a2;
  v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E9F8);
  v4 = *(_QWORD *)(v58 - 8);
  MEMORY[0x24BDAC7A8](v58);
  v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6A331C();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v55 = a1;
  v56 = v4;
  v8 = v57;
  v7 = v58;
  LOBYTE(v68) = 0;
  v9 = v6;
  v10 = sub_20E6EA7E4();
  v12 = v11;
  v45 = v10;
  LOBYTE(v59) = 1;
  sub_20E66AE8C();
  swift_bridgeObjectRetain();
  sub_20E6EA7FC();
  v43 = v12;
  v13 = v68;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EA08);
  LOBYTE(v59) = 2;
  sub_20E66A990(v13, *((unint64_t *)&v13 + 1));
  sub_20E6A3A30(&qword_254A2EA10, &qword_254A2EA08, (uint64_t (*)(void))sub_20E6A3360, MEMORY[0x24BEE12D0]);
  v42 = 0;
  sub_20E6EA7D8();
  v41 = v13 >> 64;
  v44 = v13;
  v14 = v68;
  LOBYTE(v59) = 3;
  sub_20E6A33A4();
  swift_bridgeObjectRetain();
  sub_20E6EA7D8();
  v54 = v14;
  v51 = v68;
  v49 = v70;
  v50 = v71;
  v52 = v72;
  v53 = v69;
  v15 = v73;
  v48 = *((_QWORD *)&v72 + 1);
  v17 = v74;
  v16 = v75;
  v18 = v76;
  v38[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E980);
  v83 = 4;
  v46 = v18;
  v39 = v16;
  v37 = v16;
  v19 = v48;
  v40 = v17;
  v47 = v15;
  sub_20E6782F0(v51, *((uint64_t *)&v51 + 1), v53, v49, v50, *((uint64_t *)&v50 + 1), v52, v48, v15, v17, v37, v18, (void (*)(void))sub_20E677C30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677C6C);
  sub_20E69C894(&qword_254A2E988, MEMORY[0x24BEE0D38], MEMORY[0x24BEE1348], MEMORY[0x24BEE04E0]);
  sub_20E6EA7D8();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v9, v7);
  v58 = v84;
  *(_QWORD *)&v59 = v45;
  *((_QWORD *)&v59 + 1) = v43;
  *(_QWORD *)&v60 = v44;
  *((_QWORD *)&v60 + 1) = v41;
  *(_QWORD *)&v61 = v54;
  *((_QWORD *)&v61 + 1) = v84;
  v62 = v51;
  *(_QWORD *)&v63 = v53;
  v21 = v49;
  v20 = v50;
  *((_QWORD *)&v63 + 1) = v49;
  v64 = v50;
  *(_QWORD *)&v65 = v52;
  v23 = v46;
  v22 = v47;
  *((_QWORD *)&v65 + 1) = v19;
  *(_QWORD *)&v66 = v47;
  v24 = v39;
  v25 = v40;
  *((_QWORD *)&v66 + 1) = v40;
  *(_QWORD *)&v67 = v39;
  *((_QWORD *)&v67 + 1) = v46;
  sub_20E6A33E8((uint64_t)&v59);
  v26 = v21;
  v27 = *((_QWORD *)&v50 + 1);
  sub_20E6782F0(v51, *((uint64_t *)&v51 + 1), v53, v26, v20, *((uint64_t *)&v50 + 1), v52, v48, v22, v25, v24, v23, (void (*)(void))sub_20E66AA3C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E66AA78);
  v28 = v54;
  swift_bridgeObjectRelease();
  v29 = v44;
  v30 = v41;
  sub_20E6673F4(v44, v41);
  v31 = v43;
  swift_bridgeObjectRelease();
  v32 = v66;
  v8[6] = v65;
  v8[7] = v32;
  v8[8] = v67;
  v33 = v62;
  v8[2] = v61;
  v8[3] = v33;
  v34 = v64;
  v8[4] = v63;
  v8[5] = v34;
  v35 = v60;
  *v8 = v59;
  v8[1] = v35;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);
  *(_QWORD *)&v68 = v45;
  *((_QWORD *)&v68 + 1) = v31;
  v69 = v29;
  v70 = v30;
  *(_QWORD *)&v71 = v28;
  *((_QWORD *)&v71 + 1) = v58;
  v72 = v51;
  v73 = v53;
  v74 = v49;
  v75 = v50;
  v76 = v27;
  v77 = v52;
  v78 = v48;
  v79 = v47;
  v80 = v40;
  v81 = v39;
  v82 = v46;
  return sub_20E6A34C8((uint64_t)&v68);
}

uint64_t sub_20E69ED8C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_20E6A3E20(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_20E69EDB4()
{
  unsigned __int8 *v0;

  return sub_20E69D3F4(*v0);
}

uint64_t sub_20E69EDBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E6A3E48(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E69EDE0@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_20E6A3E20(a1);
  *a2 = result;
  return result;
}

uint64_t sub_20E69EE04()
{
  sub_20E6A35A8();
  return sub_20E6EA9D0();
}

uint64_t sub_20E69EE2C()
{
  sub_20E6A35A8();
  return sub_20E6EA9DC();
}

uint64_t sub_20E69EE54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20E69D984(a1, a2);
}

uint64_t sub_20E69EE68(_QWORD *a1)
{
  return sub_20E69D4D4(a1);
}

uint64_t sub_20E69EE80()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

uint64_t sub_20E69EEC4()
{
  return sub_20E6EA994();
}

uint64_t sub_20E69EEF0()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

uint64_t sub_20E69EF30@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_20E6A4174(*a1);
  *a2 = result;
  return result;
}

void sub_20E69EF58(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

uint64_t sub_20E69EF68()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20E69EFA4 + 4 * byte_20E6F05C7[*v0]))(0x50676E69796C6572, 0xEE00444979747261);
}

uint64_t sub_20E69EFA4()
{
  return 0x6144746E65696C63;
}

uint64_t sub_20E69EFC8()
{
  return 0x73694C776F6C6C61;
}

uint64_t sub_20E69EFE4()
{
  return 0x6F69736E65747865;
}

uint64_t sub_20E69F000()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_20E69F018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E6A4198(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E69F03C()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

uint64_t sub_20E69F04C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_20E6A4174(a1);
  *a2 = result;
  return result;
}

uint64_t sub_20E69F070()
{
  sub_20E6A331C();
  return sub_20E6EA9D0();
}

uint64_t sub_20E69F098()
{
  sub_20E6A331C();
  return sub_20E6EA9DC();
}

uint64_t sub_20E69F0C0@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_20E69E704(a1, a2);
}

uint64_t sub_20E69F0D4(_QWORD *a1)
{
  return sub_20E69E3C4(a1);
}

uint64_t sub_20E69F0EC(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  char v21;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v11);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 56) + v11);
    swift_bridgeObjectRetain();
    v19 = sub_20E698CCC(v16, v17);
    v21 = v20;
    result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || v18 != *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + v19))
      return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_20E69F280(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  int64_t v22;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v2 = 1 << *(_BYTE *)(a1 + 32);
    v3 = -1;
    if (v2 < 64)
      v3 = ~(-1 << v2);
    v4 = v3 & *(_QWORD *)(a1 + 64);
    v22 = (unint64_t)(v2 + 63) >> 6;
    if (v4)
    {
      v5 = __clz(__rbit64(v4));
      v6 = a2;
LABEL_22:
      v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v5);
      v11 = *v10;
      v12 = v10[1];
      v13 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 32 * v5);
      v15 = *v13;
      v14 = v13[1];
      v17 = v13[2];
      v16 = v13[3];
      sub_20E66A990(*v10, v12);
      sub_20E66A990(v15, v14);
      sub_20E66A9D4(v17, v16);
      v18 = sub_20E699924(v11, v12);
      v20 = v19;
      sub_20E6673F4(v11, v12);
      if ((v20 & 1) != 0)
        __asm { BR              X10 }
      sub_20E6673F4(v15, v14);
      sub_20E66AA28(v17, v16);
      return 0;
    }
    v6 = a2;
    if ((unint64_t)(v2 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 72);
      v8 = 1;
      if (v7)
        goto LABEL_21;
      v8 = 2;
      if (v22 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
        goto LABEL_21;
      v8 = 3;
      if (v22 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
        goto LABEL_21;
      v8 = 4;
      if (v22 <= 4)
        return 1;
      v7 = *(_QWORD *)(a1 + 96);
      if (v7)
      {
LABEL_21:
        v5 = __clz(__rbit64(v7)) + (v8 << 6);
        goto LABEL_22;
      }
      v9 = 5;
      if (v22 > 5)
      {
        v7 = *(_QWORD *)(a1 + 104);
        if (v7)
        {
          v8 = 5;
          goto LABEL_21;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x20E6A0708);
          }
          if (v8 >= v22)
            break;
          v7 = *(_QWORD *)(a1 + 64 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_21;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_20E6A0874(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  char v15;
  char v16;
  char v17;
  char v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  _QWORD v73[6];
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v2 = a1[2];
  v3 = a1[3];
  v5 = a1[4];
  v4 = a1[5];
  v70 = a1[7];
  v71 = a1[6];
  v68 = a1[9];
  v69 = a1[8];
  v67 = a1[10];
  v65 = a1[11];
  v63 = a1[12];
  v61 = a1[13];
  v59 = a1[14];
  v57 = a1[16];
  v51 = a1[15];
  v52 = a1[17];
  v55 = a1[19];
  v56 = a1[20];
  v53 = a1[18];
  v54 = a1[21];
  v50 = a1[23];
  v49 = a1[24];
  v46 = a1[25];
  v47 = a1[22];
  v45 = a1[26];
  v7 = a2[2];
  v6 = a2[3];
  v8 = a2[4];
  v9 = a2[5];
  v11 = a2[6];
  v10 = a2[7];
  v66 = a2[10];
  v64 = a2[11];
  v62 = a2[12];
  v60 = (_QWORD *)a2[13];
  v58 = a2[14];
  v48 = a2[16];
  v38 = a2[15];
  v39 = a2[17];
  v40 = a2[18];
  v41 = a2[19];
  v42 = a2[20];
  v43 = a2[21];
  v44 = a2[22];
  v36 = a2[24];
  v37 = a2[23];
  v34 = a2[26];
  v35 = a2[25];
  sub_20E6B0F54(*a1, a1[1]);
  if ((v12 & 1) == 0)
    return 0;
  if (v2 == v7 && v3 == v6 || (v13 = sub_20E6EA8EC(), result = 0, (v13 & 1) != 0))
  {
    if (v5 == v8 && v4 == v9 || (v15 = sub_20E6EA8EC(), result = 0, (v15 & 1) != 0))
    {
      if (v71 == v11 && v70 == v10 || (v16 = sub_20E6EA8EC(), result = 0, (v16 & 1) != 0))
      {
        sub_20E6B0F54(v69, v68);
        if ((v17 & 1) == 0)
          return 0;
        if (v67 == v66 && v65 == v64 || (v18 = sub_20E6EA8EC(), result = 0, (v18 & 1) != 0))
        {
          if ((sub_20E6D1B3C(v63, v62) & 1) != 0)
          {
            if (v61)
            {
              if (!v60)
                return 0;
              swift_bridgeObjectRetain();
              v19 = (_QWORD *)swift_bridgeObjectRetain();
              v20 = sub_20E6D0CF8(v19, v60);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v20 & 1) == 0)
                return 0;
            }
            else if (v60)
            {
              return 0;
            }
            if (v59)
            {
              if (!v58)
                return 0;
              swift_bridgeObjectRetain();
              v21 = swift_bridgeObjectRetain();
              v22 = sub_20E69F0EC(v21, v58);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v22 & 1) == 0)
                return 0;
            }
            else if (v58)
            {
              return 0;
            }
            v23 = v57;
            if (v57 == 2)
            {
              v25 = v47;
              v24 = v48;
              v26 = v54;
              v27 = v55;
              v28 = v56;
              if (v48 == 2)
                return 1;
              goto LABEL_31;
            }
            v80 = v51;
            v81 = v57;
            v82 = v52;
            v83 = v53;
            v84 = v55;
            v85 = v56;
            v86 = v54;
            v25 = v47;
            v87 = v47;
            v88 = v50;
            v89 = v49;
            v90 = v46;
            v91 = v45;
            if (v48 == 2)
            {
              sub_20E677C30(v51, v57, v52, v53, v55);
              sub_20E677C6C(v47, v50, v49, v46, v45);
              sub_20E677C30(v51, v57, v52, v53, v55);
              sub_20E677C6C(v47, v50, v49, v46, v45);
              sub_20E66AA3C(v51, v57, v52, v53, v55);
              sub_20E66AA78(v47, v50, v49, v46, v45);
              v24 = 2;
              v28 = v56;
              v23 = v57;
              v26 = v54;
              v27 = v55;
LABEL_31:
              v80 = v51;
              v81 = v23;
              v82 = v52;
              v83 = v53;
              v84 = v27;
              v85 = v28;
              v86 = v26;
              v87 = v25;
              v88 = v50;
              v89 = v49;
              v90 = v46;
              v91 = v45;
              v92 = v38;
              v93 = v24;
              v94 = v39;
              v95 = v40;
              v96 = v41;
              v97 = v42;
              v98 = v43;
              v99 = v44;
              v100 = v37;
              v101 = v36;
              v102 = v35;
              v103 = v34;
              sub_20E6782F0(v38, v24, v39, v40, v41, v42, v43, v44, v37, v36, v35, v34, (void (*)(void))sub_20E677C30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677C6C);
              sub_20E6A17A4((uint64_t)&v80);
              return 0;
            }
            v73[0] = v38;
            v73[1] = v48;
            v73[2] = v39;
            v73[3] = v40;
            v73[4] = v41;
            v73[5] = v42;
            v74 = v43;
            v75 = v44;
            v76 = v37;
            v77 = v36;
            v78 = v35;
            v79 = v34;
            sub_20E6782F0(v51, v57, v52, v53, v55, v56, v54, v47, v50, v49, v46, v45, (void (*)(void))sub_20E677C30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677C6C);
            sub_20E677C30(v51, v57, v52, v53, v55);
            sub_20E677C6C(v47, v50, v49, v46, v45);
            v72 = _s26AuthenticationServicesCore20ASCTAPExtensionInputV2eeoiySbAC_ACtFZ_0((uint64_t)&v80, (uint64_t)v73);
            v29 = v87;
            v30 = v88;
            v31 = v89;
            v32 = v90;
            v33 = v91;
            sub_20E66AA3C(v80, v81, v82, v83, v84);
            sub_20E66AA78(v29, v30, v31, v32, v33);
            sub_20E6782F0(v51, v57, v52, v53, v55, v56, v54, v47, v50, v49, v46, v45, (void (*)(void))sub_20E66AA3C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E66AA78);
            if (v72)
              return 1;
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20E6A0EC8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  char v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[6];
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v2 = a1[2];
  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v51 = a1[7];
  v45 = a1[6];
  v46 = a1[8];
  v47 = a1[9];
  v48 = a1[10];
  v6 = a1[12];
  v7 = a1[13];
  v40 = a1[14];
  v41 = a1[11];
  v49 = a1[16];
  v50 = a1[15];
  v44 = a1[17];
  v8 = (_QWORD *)a2[4];
  v9 = a2[5];
  v42 = a2[7];
  v32 = a2[6];
  v33 = a2[8];
  v34 = a2[9];
  v35 = a2[10];
  v36 = a2[11];
  v37 = a2[12];
  v39 = a2[13];
  v30 = a2[15];
  v31 = a2[14];
  v28 = a2[17];
  v29 = a2[16];
  if (*a1 == *a2 && a1[1] == a2[1] || (v10 = sub_20E6EA8EC(), result = 0, (v10 & 1) != 0))
  {
    sub_20E6B0F54(v2, v4);
    if ((v12 & 1) != 0)
    {
      if (v3)
      {
        if (!v8)
          return 0;
        swift_bridgeObjectRetain();
        v13 = (_QWORD *)swift_bridgeObjectRetain();
        v14 = sub_20E6D0CF8(v13, v8);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v14 & 1) == 0)
          return 0;
      }
      else if (v8)
      {
        return 0;
      }
      if (v5)
      {
        if (!v9)
          return 0;
        swift_bridgeObjectRetain();
        v15 = swift_bridgeObjectRetain();
        v16 = sub_20E69F0EC(v15, v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
          return 0;
      }
      else if (v9)
      {
        return 0;
      }
      v17 = v51;
      if (v51 == 2)
      {
        v19 = v41;
        v18 = v42;
        v20 = v7;
        v21 = v6;
        v22 = v40;
        if (v42 == 2)
          return 1;
        goto LABEL_20;
      }
      v59 = v45;
      v60 = v51;
      v61 = v46;
      v62 = v47;
      v19 = v41;
      v63 = v48;
      v64 = v41;
      v21 = v6;
      v65 = v6;
      v66 = v7;
      v20 = v7;
      v22 = v40;
      v67 = v40;
      v68 = v50;
      v69 = v49;
      v70 = v44;
      if (v42 == 2)
      {
        sub_20E677C30(v45, v51, v46, v47, v48);
        sub_20E677C6C(v7, v40, v50, v49, v44);
        sub_20E677C30(v45, v51, v46, v47, v48);
        sub_20E677C6C(v7, v40, v50, v49, v44);
        sub_20E66AA3C(v45, v51, v46, v47, v48);
        sub_20E66AA78(v7, v40, v50, v49, v44);
        v18 = 2;
        v17 = v51;
LABEL_20:
        v59 = v45;
        v60 = v17;
        v61 = v46;
        v62 = v47;
        v63 = v48;
        v64 = v19;
        v65 = v21;
        v66 = v20;
        v67 = v22;
        v68 = v50;
        v69 = v49;
        v70 = v44;
        v71 = v32;
        v72 = v18;
        v73 = v33;
        v74 = v34;
        v75 = v35;
        v76 = v36;
        v77 = v37;
        v78 = v39;
        v79 = v31;
        v80 = v30;
        v81 = v29;
        v82 = v28;
        sub_20E6782F0(v32, v18, v33, v34, v35, v36, v37, v39, v31, v30, v29, v28, (void (*)(void))sub_20E677C30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677C6C);
        sub_20E6A17A4((uint64_t)&v59);
        return 0;
      }
      v52[0] = v32;
      v52[1] = v42;
      v52[2] = v33;
      v52[3] = v34;
      v52[4] = v35;
      v52[5] = v36;
      v53 = v37;
      v54 = v39;
      v55 = v31;
      v56 = v30;
      v57 = v29;
      v58 = v28;
      sub_20E6782F0(v45, v51, v46, v47, v48, v41, v21, v7, v40, v50, v49, v44, (void (*)(void))sub_20E677C30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677C6C);
      sub_20E677C30(v45, v51, v46, v47, v48);
      sub_20E677C6C(v7, v40, v50, v49, v44);
      v43 = _s26AuthenticationServicesCore20ASCTAPExtensionInputV2eeoiySbAC_ACtFZ_0((uint64_t)&v59, (uint64_t)v52);
      v38 = v21;
      v23 = v66;
      v24 = v67;
      v25 = v68;
      v26 = v69;
      v27 = v70;
      sub_20E66AA3C(v59, v60, v61, v62, v63);
      sub_20E66AA78(v23, v24, v25, v26, v27);
      sub_20E6782F0(v45, v51, v46, v47, v48, v41, v38, v7, v40, v50, v49, v44, (void (*)(void))sub_20E66AA3C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E66AA78);
      if (v43)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_20E6A13A0(uint64_t a1, uint64_t a2)
{
  __int128 *v3;
  int v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _BYTE v60[224];
  _BYTE v61[224];
  _BYTE v62[224];
  _BYTE v63[224];
  uint64_t v64;
  _BYTE v65[224];

  sub_20E677988(a1, (uint64_t)v61);
  sub_20E677988(a2, (uint64_t)v62);
  sub_20E677988((uint64_t)v61, (uint64_t)v63);
  sub_20E677988((uint64_t)v62, (uint64_t)&v64);
  sub_20E677988((uint64_t)v61, (uint64_t)v65);
  if (sub_20E6779C4((uint64_t)v65) == 1)
  {
    v3 = (__int128 *)nullsub_1(v65);
    sub_20E677988((uint64_t)v62, (uint64_t)v60);
    v4 = sub_20E6779C4((uint64_t)v60);
    v5 = (__int128 *)nullsub_1(v60);
    if (v4 == 1)
    {
      v6 = v3[7];
      v52 = v3[6];
      v53 = v6;
      v54 = v3[8];
      v7 = v3[3];
      v48 = v3[2];
      v49 = v7;
      v8 = v3[5];
      v50 = v3[4];
      v51 = v8;
      v9 = v3[1];
      v46 = *v3;
      v47 = v9;
      v10 = v5[7];
      v38 = v5[6];
      v39 = v10;
      v40 = v5[8];
      v11 = v5[3];
      v34 = v5[2];
      v35 = v11;
      v12 = v5[5];
      v36 = v5[4];
      v37 = v12;
      v13 = v5[1];
      v32 = *v5;
      v33 = v13;
      sub_20E67800C((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E677A74);
      sub_20E67800C((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E677A74);
      sub_20E67800C((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E677A74);
      sub_20E67800C((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E677A74);
      v14 = sub_20E6A0EC8(&v46, &v32);
LABEL_7:
      v18 = v14;
      sub_20E6A163C((uint64_t)v63);
      sub_20E67800C((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E678130);
      sub_20E67800C((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E678130);
      return v18 & 1;
    }
  }
  else
  {
    v15 = nullsub_1(v65);
    sub_20E677988((uint64_t)v62, (uint64_t)v60);
    v16 = sub_20E6779C4((uint64_t)v60);
    v17 = nullsub_1(v60);
    if (v16 != 1)
    {
      v19 = *(_OWORD *)(v15 + 176);
      v56 = *(_OWORD *)(v15 + 160);
      v57 = v19;
      v58 = *(_OWORD *)(v15 + 192);
      v59 = *(_QWORD *)(v15 + 208);
      v20 = *(_OWORD *)(v15 + 112);
      v52 = *(_OWORD *)(v15 + 96);
      v53 = v20;
      v21 = *(_OWORD *)(v15 + 144);
      v54 = *(_OWORD *)(v15 + 128);
      v55 = v21;
      v22 = *(_OWORD *)(v15 + 48);
      v48 = *(_OWORD *)(v15 + 32);
      v49 = v22;
      v23 = *(_OWORD *)(v15 + 80);
      v50 = *(_OWORD *)(v15 + 64);
      v51 = v23;
      v24 = *(_OWORD *)(v15 + 16);
      v46 = *(_OWORD *)v15;
      v47 = v24;
      v25 = *(_OWORD *)(v17 + 176);
      v42 = *(_OWORD *)(v17 + 160);
      v43 = v25;
      v44 = *(_OWORD *)(v17 + 192);
      v45 = *(_QWORD *)(v17 + 208);
      v26 = *(_OWORD *)(v17 + 112);
      v38 = *(_OWORD *)(v17 + 96);
      v39 = v26;
      v27 = *(_OWORD *)(v17 + 144);
      v40 = *(_OWORD *)(v17 + 128);
      v41 = v27;
      v28 = *(_OWORD *)(v17 + 48);
      v34 = *(_OWORD *)(v17 + 32);
      v35 = v28;
      v29 = *(_OWORD *)(v17 + 80);
      v36 = *(_OWORD *)(v17 + 64);
      v37 = v29;
      v30 = *(_OWORD *)(v17 + 16);
      v32 = *(_OWORD *)v17;
      v33 = v30;
      sub_20E67800C((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E677A74);
      sub_20E67800C((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E677A74);
      sub_20E67800C((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E677A74);
      sub_20E67800C((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E677A74);
      v14 = sub_20E6A0874((uint64_t *)&v46, &v32);
      goto LABEL_7;
    }
  }
  sub_20E67800C((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E677A74);
  sub_20E67800C((uint64_t)v62, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_20E677A74);
  sub_20E6A163C((uint64_t)v63);
  v18 = 0;
  return v18 & 1;
}

uint64_t sub_20E6A163C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *(_QWORD *)(a1 + 224);
  v2 = *(_QWORD *)(a1 + 232);
  v3 = *(_QWORD *)(a1 + 240);
  v4 = *(_QWORD *)(a1 + 248);
  v5 = *(_QWORD *)(a1 + 256);
  v6 = *(_QWORD *)(a1 + 264);
  v7 = *(_QWORD *)(a1 + 272);
  v8 = *(_QWORD *)(a1 + 280);
  v19 = *(_OWORD *)(a1 + 304);
  v20 = *(_OWORD *)(a1 + 288);
  v17 = *(_OWORD *)(a1 + 336);
  v18 = *(_OWORD *)(a1 + 320);
  v15 = *(_OWORD *)(a1 + 368);
  v16 = *(_OWORD *)(a1 + 352);
  v13 = *(_OWORD *)(a1 + 400);
  v14 = *(_OWORD *)(a1 + 384);
  v12 = *(_OWORD *)(a1 + 416);
  v9 = *(_QWORD *)(a1 + 432);
  v10 = *(_BYTE *)(a1 + 440);
  sub_20E678130(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_BYTE *)(a1 + 216));
  sub_20E678130(v21, v2, v3, v4, v5, v6, v7, v8, v20, *((unint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v16, *((uint64_t *)&v16 + 1), v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v9,
    v10);
  return a1;
}

uint64_t sub_20E6A17A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 96);
  v2 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v10 = *(_OWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 184);
  sub_20E6782F0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (void (*)(void))sub_20E66AA3C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E66AA78);
  sub_20E6782F0(v13, v12, v11, v2, v3, v4, v5, v6, v10, *((uint64_t *)&v10 + 1), v8, v7, (void (*)(void))sub_20E66AA3C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E66AA78);
  return a1;
}

unint64_t sub_20E6A1880()
{
  unint64_t result;

  result = qword_254A2E9E0;
  if (!qword_254A2E9E0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F07CC, &type metadata for ASCTAPCommandDecodingError);
    atomic_store(result, (unint64_t *)&qword_254A2E9E0);
  }
  return result;
}

unint64_t sub_20E6A18C4()
{
  unint64_t result;

  result = qword_254A2E9E8;
  if (!qword_254A2E9E8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F07A4, &type metadata for ASCTAPAuthenticatorGetAssertionCommand);
    atomic_store(result, (unint64_t *)&qword_254A2E9E8);
  }
  return result;
}

uint64_t sub_20E6A1908(uint64_t result)
{
  *(_BYTE *)(result + 216) = 1;
  return result;
}

unint64_t sub_20E6A1914()
{
  unint64_t result;

  result = qword_254A2E9F0;
  if (!qword_254A2E9F0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F077C, &type metadata for ASCTAPAuthenticatorMakeCredentialCommand);
    atomic_store(result, (unint64_t *)&qword_254A2E9F0);
  }
  return result;
}

uint64_t sub_20E6A1958(uint64_t result)
{
  *(_BYTE *)(result + 216) = 0;
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_20E6A1974(unsigned __int8 *a1)
{
  if (a1[1])
    return (*a1 | (a1[1] << 8)) - 255;
  else
    return 0;
}

_BYTE *sub_20E6A1994(_BYTE *result, int a2)
{
  if (a2)
  {
    *result = a2 - 1;
    result[1] = ((unsigned __int16)(a2 - 1) >> 8) + 1;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPCommandDecodingError()
{
  return &type metadata for ASCTAPCommandDecodingError;
}

uint64_t _s26AuthenticationServicesCore26ASCTAPCommandDecodingErrorOwet_0(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  if (!a2)
    return 0;
  v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (v2 < 0xFF0000)
    v3 = 1;
  if (v2 >= 0x10000)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_20E6A1A10 + 4 * byte_20E6F05CC[v4]))();
}

uint64_t sub_20E6A1A28(unsigned __int16 *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (a1[1])
    return (*a1 | ((_DWORD)v1 << 16)) - 0xFFFF;
  return v1;
}

void sub_20E6A1A34(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2))
    JUMPOUT(0x20E6A1A3CLL);
  JUMPOUT(0x20E6A1A4CLL);
}

uint64_t _s26AuthenticationServicesCore26ASCTAPCommandDecodingErrorOwst_0(_WORD *a1, int a2, int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v4 = 2;
  else
    v4 = 4;
  if (v3 < 0xFF0000)
    v4 = 1;
  if (v3 >= 0x10000)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3)
    v5 = v5;
  else
    v5 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_20E6A1AD8 + 4 * byte_20E6F05D6[v5]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_20E6A1AB8 + 4 * byte_20E6F05D1[v5]))();
}

uint64_t sub_20E6A1AB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_20E6A1AD8(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_20E6A1AE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_20E6A1AE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_20E6A1AF0(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_20E6A1AF8(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

ValueMetadata *type metadata accessor for ASCABLEMessageDecodingError()
{
  return &type metadata for ASCABLEMessageDecodingError;
}

uint64_t destroy for ASCTAPAuthenticatorGetAssertionCommand(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  swift_bridgeObjectRelease();
  sub_20E6673F4(a1[2], a1[3]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = a1[7];
  if (result != 1)
  {
    if (result == 2)
      return result;
    result = swift_bridgeObjectRelease();
    v3 = a1[10];
    if (v3 >> 60 != 15)
      result = sub_20E6673F4(a1[9], v3);
  }
  if (a1[17] != 1)
  {
    v4 = a1[14];
    if (v4 >> 60 != 15)
    {
      sub_20E6673F4(a1[13], v4);
      v5 = a1[16];
      if (v5 >> 60 != 15)
        sub_20E6673F4(a1[15], v5);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ASCTAPAuthenticatorGetAssertionCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  sub_20E66A990(v5, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = (_OWORD *)(a1 + 48);
  v9 = (_OWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 == 1)
  {
    v14 = *(_OWORD *)(a2 + 64);
    *v8 = *v9;
    *(_OWORD *)(a1 + 64) = v14;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  }
  else
  {
    if (v10 == 2)
    {
      v11 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v11;
      v12 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v12;
      v13 = *(_OWORD *)(a2 + 64);
      *v8 = *v9;
      *(_OWORD *)(a1 + 64) = v13;
      return a1;
    }
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v10;
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    v15 = (uint64_t *)(a2 + 72);
    v16 = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 72) = *(_OWORD *)v15;
    }
    else
    {
      v17 = *v15;
      sub_20E66A990(*v15, v16);
      *(_QWORD *)(a1 + 72) = v17;
      *(_QWORD *)(a1 + 80) = v16;
    }
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  }
  v18 = (_OWORD *)(a1 + 104);
  v19 = (_OWORD *)(a2 + 104);
  v20 = *(_QWORD *)(a2 + 136);
  if (v20 == 1)
  {
    v21 = *(_OWORD *)(a2 + 120);
    *v18 = *v19;
    *(_OWORD *)(a1 + 120) = v21;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  }
  else
  {
    v22 = *(_QWORD *)(a2 + 112);
    if (v22 >> 60 == 15)
    {
      v23 = *(_OWORD *)(a2 + 120);
      *v18 = *v19;
      *(_OWORD *)(a1 + 120) = v23;
    }
    else
    {
      v24 = *(_QWORD *)(a2 + 104);
      sub_20E66A990(v24, *(_QWORD *)(a2 + 112));
      *(_QWORD *)(a1 + 104) = v24;
      *(_QWORD *)(a1 + 112) = v22;
      v25 = (uint64_t *)(a2 + 120);
      v26 = *(_QWORD *)(a2 + 128);
      if (v26 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 120) = *(_OWORD *)v25;
      }
      else
      {
        v27 = *v25;
        sub_20E66A990(*v25, v26);
        *(_QWORD *)(a1 + 120) = v27;
        *(_QWORD *)(a1 + 128) = v26;
      }
    }
    *(_QWORD *)(a1 + 136) = v20;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ASCTAPAuthenticatorGetAssertionCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  __int128 *v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 *v48;
  __int128 *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  unint64_t v55;
  __int128 v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _OWORD *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  sub_20E66A990(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  sub_20E6673F4(v6, v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = (_OWORD *)(a1 + 48);
  v9 = (_OWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a2 + 56);
  if (v10 != 2)
  {
    if (v11 == 2)
    {
      sub_20E6A2364((_QWORD *)(a1 + 48));
      v16 = *(_OWORD *)(a2 + 64);
      *v8 = *v9;
      *(_OWORD *)(a1 + 64) = v16;
      v17 = *(_OWORD *)(a2 + 128);
      v19 = *(_OWORD *)(a2 + 80);
      v18 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 80) = v19;
      *(_OWORD *)(a1 + 96) = v18;
      return a1;
    }
    if (v10 == 1)
    {
      if (v11 == 1)
      {
        v20 = *v9;
        v21 = *(_OWORD *)(a2 + 64);
        v22 = *(_OWORD *)(a2 + 80);
        *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
        *(_OWORD *)(a1 + 64) = v21;
        *(_OWORD *)(a1 + 80) = v22;
        *v8 = v20;
        goto LABEL_34;
      }
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      v40 = (_OWORD *)(a2 + 72);
      v41 = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      if (v41 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 72) = *v40;
LABEL_33:
        v47 = *(_QWORD *)(a2 + 88);
        *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
        *(_QWORD *)(a1 + 88) = v47;
LABEL_34:
        v48 = (__int128 *)(a1 + 104);
        v49 = (__int128 *)(a2 + 104);
        v50 = *(_QWORD *)(a2 + 136);
        if (*(_QWORD *)(a1 + 136) == 1)
        {
          if (v50 == 1)
          {
            v51 = *v49;
            v52 = *(_OWORD *)(a2 + 120);
            *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
            *v48 = v51;
            *(_OWORD *)(a1 + 120) = v52;
            return a1;
          }
          v55 = *(_QWORD *)(a2 + 112);
          if (v55 >> 60 == 15)
          {
            v56 = *(_OWORD *)(a2 + 120);
            *v48 = *v49;
            *(_OWORD *)(a1 + 120) = v56;
            goto LABEL_48;
          }
          v59 = *(_QWORD *)(a2 + 104);
          sub_20E66A990(v59, *(_QWORD *)(a2 + 112));
          *(_QWORD *)(a1 + 104) = v59;
          *(_QWORD *)(a1 + 112) = v55;
LABEL_45:
          v60 = (uint64_t *)(a2 + 120);
          v61 = *(_QWORD *)(a2 + 128);
          if (v61 >> 60 == 15)
          {
            *(_OWORD *)(a1 + 120) = *(_OWORD *)v60;
          }
          else
          {
            v62 = *v60;
            sub_20E66A990(*v60, *(_QWORD *)(a2 + 128));
            *(_QWORD *)(a1 + 120) = v62;
            *(_QWORD *)(a1 + 128) = v61;
          }
          goto LABEL_48;
        }
        if (v50 == 1)
        {
          sub_20E6A2330((uint64_t *)(a1 + 104));
          v53 = *(_QWORD *)(a2 + 136);
          v54 = *(_OWORD *)(a2 + 120);
          *v48 = *v49;
          *(_OWORD *)(a1 + 120) = v54;
          *(_QWORD *)(a1 + 136) = v53;
          return a1;
        }
        v57 = *(_QWORD *)(a2 + 112);
        if (*(_QWORD *)(a1 + 112) >> 60 == 15)
        {
          if (v57 >> 60 == 15)
          {
            v58 = *(_OWORD *)(a2 + 120);
            *v48 = *v49;
            *(_OWORD *)(a1 + 120) = v58;
LABEL_62:
            *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            return a1;
          }
          v64 = *(_QWORD *)(a2 + 104);
          sub_20E66A990(v64, *(_QWORD *)(a2 + 112));
          *(_QWORD *)(a1 + 104) = v64;
          *(_QWORD *)(a1 + 112) = v57;
          v65 = (_OWORD *)(a2 + 120);
          v66 = *(_QWORD *)(a2 + 128);
          if (v66 >> 60 == 15)
          {
            *(_OWORD *)(a1 + 120) = *v65;
            goto LABEL_62;
          }
          v71 = *(_QWORD *)v65;
LABEL_57:
          sub_20E66A990(v71, v66);
          *(_QWORD *)(a1 + 120) = v71;
          *(_QWORD *)(a1 + 128) = v66;
          goto LABEL_62;
        }
        if (v57 >> 60 == 15)
        {
          sub_20E6A22FC(a1 + 104);
          v63 = *(_OWORD *)(a2 + 120);
          *v48 = *v49;
          *(_OWORD *)(a1 + 120) = v63;
          goto LABEL_62;
        }
        v67 = *(_QWORD *)(a2 + 104);
        sub_20E66A990(v67, *(_QWORD *)(a2 + 112));
        v68 = *(_QWORD *)(a1 + 104);
        v69 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 104) = v67;
        *(_QWORD *)(a1 + 112) = v57;
        sub_20E6673F4(v68, v69);
        v70 = (uint64_t *)(a2 + 120);
        v66 = *(_QWORD *)(a2 + 128);
        if (*(_QWORD *)(a1 + 128) >> 60 == 15)
        {
          if (v66 >> 60 != 15)
          {
            v71 = *v70;
            goto LABEL_57;
          }
        }
        else
        {
          if (v66 >> 60 != 15)
          {
            v72 = *v70;
            sub_20E66A990(*v70, *(_QWORD *)(a2 + 128));
            v73 = *(_QWORD *)(a1 + 120);
            v74 = *(_QWORD *)(a1 + 128);
            *(_QWORD *)(a1 + 120) = v72;
            *(_QWORD *)(a1 + 128) = v66;
            sub_20E6673F4(v73, v74);
            goto LABEL_62;
          }
          sub_20E66B4E0(a1 + 120);
        }
        *(_OWORD *)(a1 + 120) = *(_OWORD *)v70;
        goto LABEL_62;
      }
      v43 = *(_QWORD *)v40;
LABEL_28:
      sub_20E66A990(v43, v41);
      *(_QWORD *)(a1 + 72) = v43;
      *(_QWORD *)(a1 + 80) = v41;
      goto LABEL_33;
    }
    if (v11 == 1)
    {
      sub_20E6A22C8(a1 + 48);
      v29 = *(_OWORD *)(a2 + 64);
      v28 = *(_OWORD *)(a2 + 80);
      v30 = *v9;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      *(_OWORD *)(a1 + 64) = v29;
      *(_OWORD *)(a1 + 80) = v28;
      *v8 = v30;
      goto LABEL_34;
    }
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    v42 = (uint64_t *)(a2 + 72);
    v41 = *(_QWORD *)(a2 + 80);
    if (*(_QWORD *)(a1 + 80) >> 60 == 15)
    {
      if (v41 >> 60 != 15)
      {
        v43 = *v42;
        goto LABEL_28;
      }
    }
    else
    {
      if (v41 >> 60 != 15)
      {
        v44 = *v42;
        sub_20E66A990(*v42, *(_QWORD *)(a2 + 80));
        v45 = *(_QWORD *)(a1 + 72);
        v46 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 72) = v44;
        *(_QWORD *)(a1 + 80) = v41;
        sub_20E6673F4(v45, v46);
        goto LABEL_33;
      }
      sub_20E66B4E0(a1 + 72);
    }
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v42;
    goto LABEL_33;
  }
  if (v11 == 1)
  {
    v23 = *v9;
    v24 = *(_OWORD *)(a2 + 64);
    v25 = *(_OWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_OWORD *)(a1 + 64) = v24;
    *(_OWORD *)(a1 + 80) = v25;
    *v8 = v23;
LABEL_17:
    v33 = (__int128 *)(a1 + 104);
    v34 = (__int128 *)(a2 + 104);
    if (*(_QWORD *)(a2 + 136) == 1)
    {
      v35 = *v34;
      v36 = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *v33 = v35;
      *(_OWORD *)(a1 + 120) = v36;
      return a1;
    }
    v37 = *(_QWORD *)(a2 + 112);
    if (v37 >> 60 == 15)
    {
      v38 = *(_OWORD *)(a2 + 120);
      *v33 = *v34;
      *(_OWORD *)(a1 + 120) = v38;
LABEL_48:
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
      return a1;
    }
    v39 = *(_QWORD *)(a2 + 104);
    sub_20E66A990(v39, *(_QWORD *)(a2 + 112));
    *(_QWORD *)(a1 + 104) = v39;
    *(_QWORD *)(a1 + 112) = v37;
    goto LABEL_45;
  }
  if (v11 != 2)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    v26 = (_OWORD *)(a2 + 72);
    v27 = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 72) = *v26;
    }
    else
    {
      v31 = *(_QWORD *)v26;
      sub_20E66A990(v31, v27);
      *(_QWORD *)(a1 + 72) = v31;
      *(_QWORD *)(a1 + 80) = v27;
    }
    v32 = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v32;
    goto LABEL_17;
  }
  v12 = *(_OWORD *)(a2 + 64);
  *v8 = *v9;
  *(_OWORD *)(a1 + 64) = v12;
  v13 = *(_OWORD *)(a2 + 80);
  v14 = *(_OWORD *)(a2 + 96);
  v15 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v15;
  *(_OWORD *)(a1 + 80) = v13;
  *(_OWORD *)(a1 + 96) = v14;
  return a1;
}

uint64_t sub_20E6A22C8(uint64_t a1)
{
  destroy for ASCTAPLargeBlobExtensionInput(a1);
  return a1;
}

uint64_t sub_20E6A22FC(uint64_t a1)
{
  destroy for ASCTAPPRFExtensionInput.PRFValues();
  return a1;
}

uint64_t *sub_20E6A2330(uint64_t *a1)
{
  destroy for ASCPublicKeyCredentialAssertionExtensionInputs.PRF(a1);
  return a1;
}

_QWORD *sub_20E6A2364(_QWORD *a1)
{
  destroy for ASCTAPExtensionInput(a1);
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for ASCTAPAuthenticatorGetAssertionCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_20E6673F4(v5, v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v7 = (_OWORD *)(a1 + 48);
  v8 = (_OWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  if (v9 == 2)
    goto LABEL_4;
  v10 = *(_QWORD *)(a2 + 56);
  if (v10 != 2)
  {
    if (v9 == 1)
    {
LABEL_8:
      v14 = *(_OWORD *)(a2 + 64);
      *v7 = *v8;
      *(_OWORD *)(a1 + 64) = v14;
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      goto LABEL_15;
    }
    if (v10 == 1)
    {
      sub_20E6A22C8(a1 + 48);
      goto LABEL_8;
    }
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = v10;
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    v15 = (_QWORD *)(a2 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (v16 >> 60 != 15)
    {
      v17 = *(_QWORD *)(a2 + 80);
      if (v17 >> 60 != 15)
      {
        v18 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 72) = *v15;
        *(_QWORD *)(a1 + 80) = v17;
        sub_20E6673F4(v18, v16);
        goto LABEL_14;
      }
      sub_20E66B4E0(a1 + 72);
    }
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v15;
LABEL_14:
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
LABEL_15:
    v19 = (_OWORD *)(a1 + 104);
    v20 = (_OWORD *)(a2 + 104);
    if (*(_QWORD *)(a1 + 136) == 1)
    {
LABEL_18:
      v22 = *(_OWORD *)(a2 + 120);
      *v19 = *v20;
      *(_OWORD *)(a1 + 120) = v22;
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      return a1;
    }
    v21 = *(_QWORD *)(a2 + 136);
    if (v21 == 1)
    {
      sub_20E6A2330((uint64_t *)(a1 + 104));
      goto LABEL_18;
    }
    v23 = *(_QWORD *)(a1 + 112);
    if (v23 >> 60 != 15)
    {
      v24 = *(_QWORD *)(a2 + 112);
      if (v24 >> 60 != 15)
      {
        v26 = *(_QWORD *)(a1 + 104);
        *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 112) = v24;
        sub_20E6673F4(v26, v23);
        v27 = (_QWORD *)(a2 + 120);
        v28 = *(_QWORD *)(a1 + 128);
        if (v28 >> 60 != 15)
        {
          v29 = *(_QWORD *)(a2 + 128);
          if (v29 >> 60 != 15)
          {
            v30 = *(_QWORD *)(a1 + 120);
            *(_QWORD *)(a1 + 120) = *v27;
            *(_QWORD *)(a1 + 128) = v29;
            sub_20E6673F4(v30, v28);
            goto LABEL_28;
          }
          sub_20E66B4E0(a1 + 120);
        }
        *(_OWORD *)(a1 + 120) = *(_OWORD *)v27;
LABEL_28:
        *(_QWORD *)(a1 + 136) = v21;
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_20E6A22FC(a1 + 104);
    }
    v25 = *(_OWORD *)(a2 + 120);
    *v19 = *v20;
    *(_OWORD *)(a1 + 120) = v25;
    goto LABEL_28;
  }
  sub_20E6A2364((_QWORD *)(a1 + 48));
LABEL_4:
  v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v11;
  v12 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v12;
  v13 = *(_OWORD *)(a2 + 64);
  *v7 = *v8;
  *(_OWORD *)(a1 + 64) = v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPAuthenticatorGetAssertionCommand(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPAuthenticatorGetAssertionCommand(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPAuthenticatorGetAssertionCommand()
{
  return &type metadata for ASCTAPAuthenticatorGetAssertionCommand;
}

uint64_t destroy for ASCTAPAuthenticatorMakeCredentialCommand(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  sub_20E6673F4(*a1, a1[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_20E6673F4(a1[8], a1[9]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = a1[16];
  if (result != 1)
  {
    if (result == 2)
      return result;
    result = swift_bridgeObjectRelease();
    v3 = a1[19];
    if (v3 >> 60 != 15)
      result = sub_20E6673F4(a1[18], v3);
  }
  if (a1[26] != 1)
  {
    v4 = a1[23];
    if (v4 >> 60 != 15)
    {
      sub_20E6673F4(a1[22], v4);
      v5 = a1[25];
      if (v5 >> 60 != 15)
        sub_20E6673F4(a1[24], v5);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ASCTAPAuthenticatorMakeCredentialCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_20E66A990(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_20E66A990(v9, v10);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v13 = (_OWORD *)(a1 + 120);
  v14 = (_OWORD *)(a2 + 120);
  v15 = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15 == 1)
  {
    v19 = *(_OWORD *)(a2 + 136);
    *v13 = *v14;
    *(_OWORD *)(a1 + 136) = v19;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  }
  else
  {
    if (v15 == 2)
    {
      v16 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v16;
      v17 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v17;
      v18 = *(_OWORD *)(a2 + 136);
      *v13 = *v14;
      *(_OWORD *)(a1 + 136) = v18;
      return a1;
    }
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v15;
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    v20 = (uint64_t *)(a2 + 144);
    v21 = *(_QWORD *)(a2 + 152);
    swift_bridgeObjectRetain();
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 144) = *(_OWORD *)v20;
    }
    else
    {
      v22 = *v20;
      sub_20E66A990(*v20, v21);
      *(_QWORD *)(a1 + 144) = v22;
      *(_QWORD *)(a1 + 152) = v21;
    }
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  }
  v23 = (_OWORD *)(a1 + 176);
  v24 = (_OWORD *)(a2 + 176);
  v25 = *(_QWORD *)(a2 + 208);
  if (v25 == 1)
  {
    v26 = *(_OWORD *)(a2 + 192);
    *v23 = *v24;
    *(_OWORD *)(a1 + 192) = v26;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  }
  else
  {
    v27 = *(_QWORD *)(a2 + 184);
    if (v27 >> 60 == 15)
    {
      v28 = *(_OWORD *)(a2 + 192);
      *v23 = *v24;
      *(_OWORD *)(a1 + 192) = v28;
    }
    else
    {
      v29 = *(_QWORD *)(a2 + 176);
      sub_20E66A990(v29, *(_QWORD *)(a2 + 184));
      *(_QWORD *)(a1 + 176) = v29;
      *(_QWORD *)(a1 + 184) = v27;
      v30 = (uint64_t *)(a2 + 192);
      v31 = *(_QWORD *)(a2 + 200);
      if (v31 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 192) = *(_OWORD *)v30;
      }
      else
      {
        v32 = *v30;
        sub_20E66A990(*v30, v31);
        *(_QWORD *)(a1 + 192) = v32;
        *(_QWORD *)(a1 + 200) = v31;
      }
    }
    *(_QWORD *)(a1 + 208) = v25;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ASCTAPAuthenticatorMakeCredentialCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  _OWORD *v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  __int128 *v52;
  __int128 *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  unint64_t v59;
  __int128 v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  _OWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_20E66A990(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_20E6673F4(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  sub_20E66A990(v8, v9);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  sub_20E6673F4(v10, v11);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = (_OWORD *)(a1 + 120);
  v13 = (_OWORD *)(a2 + 120);
  v14 = *(_QWORD *)(a1 + 128);
  v15 = *(_QWORD *)(a2 + 128);
  if (v14 != 2)
  {
    if (v15 == 2)
    {
      sub_20E6A2364((_QWORD *)(a1 + 120));
      v20 = *(_OWORD *)(a2 + 136);
      *v12 = *v13;
      *(_OWORD *)(a1 + 136) = v20;
      v21 = *(_OWORD *)(a2 + 200);
      v23 = *(_OWORD *)(a2 + 152);
      v22 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v21;
      *(_OWORD *)(a1 + 152) = v23;
      *(_OWORD *)(a1 + 168) = v22;
      return a1;
    }
    if (v14 == 1)
    {
      if (v15 == 1)
      {
        v24 = *v13;
        v25 = *(_OWORD *)(a2 + 136);
        v26 = *(_OWORD *)(a2 + 152);
        *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
        *(_OWORD *)(a1 + 136) = v25;
        *(_OWORD *)(a1 + 152) = v26;
        *v12 = v24;
        goto LABEL_34;
      }
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      v44 = (_OWORD *)(a2 + 144);
      v45 = *(_QWORD *)(a2 + 152);
      swift_bridgeObjectRetain();
      if (v45 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 144) = *v44;
LABEL_33:
        v51 = *(_QWORD *)(a2 + 160);
        *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
        *(_QWORD *)(a1 + 160) = v51;
LABEL_34:
        v52 = (__int128 *)(a1 + 176);
        v53 = (__int128 *)(a2 + 176);
        v54 = *(_QWORD *)(a2 + 208);
        if (*(_QWORD *)(a1 + 208) == 1)
        {
          if (v54 == 1)
          {
            v55 = *v53;
            v56 = *(_OWORD *)(a2 + 192);
            *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
            *v52 = v55;
            *(_OWORD *)(a1 + 192) = v56;
            return a1;
          }
          v59 = *(_QWORD *)(a2 + 184);
          if (v59 >> 60 == 15)
          {
            v60 = *(_OWORD *)(a2 + 192);
            *v52 = *v53;
            *(_OWORD *)(a1 + 192) = v60;
            goto LABEL_48;
          }
          v63 = *(_QWORD *)(a2 + 176);
          sub_20E66A990(v63, *(_QWORD *)(a2 + 184));
          *(_QWORD *)(a1 + 176) = v63;
          *(_QWORD *)(a1 + 184) = v59;
LABEL_45:
          v64 = (uint64_t *)(a2 + 192);
          v65 = *(_QWORD *)(a2 + 200);
          if (v65 >> 60 == 15)
          {
            *(_OWORD *)(a1 + 192) = *(_OWORD *)v64;
          }
          else
          {
            v66 = *v64;
            sub_20E66A990(*v64, *(_QWORD *)(a2 + 200));
            *(_QWORD *)(a1 + 192) = v66;
            *(_QWORD *)(a1 + 200) = v65;
          }
          goto LABEL_48;
        }
        if (v54 == 1)
        {
          sub_20E6A2330((uint64_t *)(a1 + 176));
          v57 = *(_QWORD *)(a2 + 208);
          v58 = *(_OWORD *)(a2 + 192);
          *v52 = *v53;
          *(_OWORD *)(a1 + 192) = v58;
          *(_QWORD *)(a1 + 208) = v57;
          return a1;
        }
        v61 = *(_QWORD *)(a2 + 184);
        if (*(_QWORD *)(a1 + 184) >> 60 == 15)
        {
          if (v61 >> 60 == 15)
          {
            v62 = *(_OWORD *)(a2 + 192);
            *v52 = *v53;
            *(_OWORD *)(a1 + 192) = v62;
LABEL_62:
            *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            return a1;
          }
          v68 = *(_QWORD *)(a2 + 176);
          sub_20E66A990(v68, *(_QWORD *)(a2 + 184));
          *(_QWORD *)(a1 + 176) = v68;
          *(_QWORD *)(a1 + 184) = v61;
          v69 = (_OWORD *)(a2 + 192);
          v70 = *(_QWORD *)(a2 + 200);
          if (v70 >> 60 == 15)
          {
            *(_OWORD *)(a1 + 192) = *v69;
            goto LABEL_62;
          }
          v75 = *(_QWORD *)v69;
LABEL_57:
          sub_20E66A990(v75, v70);
          *(_QWORD *)(a1 + 192) = v75;
          *(_QWORD *)(a1 + 200) = v70;
          goto LABEL_62;
        }
        if (v61 >> 60 == 15)
        {
          sub_20E6A22FC(a1 + 176);
          v67 = *(_OWORD *)(a2 + 192);
          *v52 = *v53;
          *(_OWORD *)(a1 + 192) = v67;
          goto LABEL_62;
        }
        v71 = *(_QWORD *)(a2 + 176);
        sub_20E66A990(v71, *(_QWORD *)(a2 + 184));
        v72 = *(_QWORD *)(a1 + 176);
        v73 = *(_QWORD *)(a1 + 184);
        *(_QWORD *)(a1 + 176) = v71;
        *(_QWORD *)(a1 + 184) = v61;
        sub_20E6673F4(v72, v73);
        v74 = (uint64_t *)(a2 + 192);
        v70 = *(_QWORD *)(a2 + 200);
        if (*(_QWORD *)(a1 + 200) >> 60 == 15)
        {
          if (v70 >> 60 != 15)
          {
            v75 = *v74;
            goto LABEL_57;
          }
        }
        else
        {
          if (v70 >> 60 != 15)
          {
            v76 = *v74;
            sub_20E66A990(*v74, *(_QWORD *)(a2 + 200));
            v77 = *(_QWORD *)(a1 + 192);
            v78 = *(_QWORD *)(a1 + 200);
            *(_QWORD *)(a1 + 192) = v76;
            *(_QWORD *)(a1 + 200) = v70;
            sub_20E6673F4(v77, v78);
            goto LABEL_62;
          }
          sub_20E66B4E0(a1 + 192);
        }
        *(_OWORD *)(a1 + 192) = *(_OWORD *)v74;
        goto LABEL_62;
      }
      v47 = *(_QWORD *)v44;
LABEL_28:
      sub_20E66A990(v47, v45);
      *(_QWORD *)(a1 + 144) = v47;
      *(_QWORD *)(a1 + 152) = v45;
      goto LABEL_33;
    }
    if (v15 == 1)
    {
      sub_20E6A22C8(a1 + 120);
      v33 = *(_OWORD *)(a2 + 136);
      v32 = *(_OWORD *)(a2 + 152);
      v34 = *v13;
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_OWORD *)(a1 + 136) = v33;
      *(_OWORD *)(a1 + 152) = v32;
      *v12 = v34;
      goto LABEL_34;
    }
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    v46 = (uint64_t *)(a2 + 144);
    v45 = *(_QWORD *)(a2 + 152);
    if (*(_QWORD *)(a1 + 152) >> 60 == 15)
    {
      if (v45 >> 60 != 15)
      {
        v47 = *v46;
        goto LABEL_28;
      }
    }
    else
    {
      if (v45 >> 60 != 15)
      {
        v48 = *v46;
        sub_20E66A990(*v46, *(_QWORD *)(a2 + 152));
        v49 = *(_QWORD *)(a1 + 144);
        v50 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 144) = v48;
        *(_QWORD *)(a1 + 152) = v45;
        sub_20E6673F4(v49, v50);
        goto LABEL_33;
      }
      sub_20E66B4E0(a1 + 144);
    }
    *(_OWORD *)(a1 + 144) = *(_OWORD *)v46;
    goto LABEL_33;
  }
  if (v15 == 1)
  {
    v27 = *v13;
    v28 = *(_OWORD *)(a2 + 136);
    v29 = *(_OWORD *)(a2 + 152);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_OWORD *)(a1 + 136) = v28;
    *(_OWORD *)(a1 + 152) = v29;
    *v12 = v27;
LABEL_17:
    v37 = (__int128 *)(a1 + 176);
    v38 = (__int128 *)(a2 + 176);
    if (*(_QWORD *)(a2 + 208) == 1)
    {
      v39 = *v38;
      v40 = *(_OWORD *)(a2 + 192);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      *v37 = v39;
      *(_OWORD *)(a1 + 192) = v40;
      return a1;
    }
    v41 = *(_QWORD *)(a2 + 184);
    if (v41 >> 60 == 15)
    {
      v42 = *(_OWORD *)(a2 + 192);
      *v37 = *v38;
      *(_OWORD *)(a1 + 192) = v42;
LABEL_48:
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRetain();
      return a1;
    }
    v43 = *(_QWORD *)(a2 + 176);
    sub_20E66A990(v43, *(_QWORD *)(a2 + 184));
    *(_QWORD *)(a1 + 176) = v43;
    *(_QWORD *)(a1 + 184) = v41;
    goto LABEL_45;
  }
  if (v15 != 2)
  {
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    v30 = (_OWORD *)(a2 + 144);
    v31 = *(_QWORD *)(a2 + 152);
    swift_bridgeObjectRetain();
    if (v31 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 144) = *v30;
    }
    else
    {
      v35 = *(_QWORD *)v30;
      sub_20E66A990(v35, v31);
      *(_QWORD *)(a1 + 144) = v35;
      *(_QWORD *)(a1 + 152) = v31;
    }
    v36 = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_QWORD *)(a1 + 160) = v36;
    goto LABEL_17;
  }
  v16 = *(_OWORD *)(a2 + 136);
  *v12 = *v13;
  *(_OWORD *)(a1 + 136) = v16;
  v17 = *(_OWORD *)(a2 + 152);
  v18 = *(_OWORD *)(a2 + 168);
  v19 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v19;
  *(_OWORD *)(a1 + 152) = v17;
  *(_OWORD *)(a1 + 168) = v18;
  return a1;
}

__n128 __swift_memcpy216_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for ASCTAPAuthenticatorMakeCredentialCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_20E6673F4(v4, v5);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_20E6673F4(v9, v10);
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  v12 = (_OWORD *)(a1 + 120);
  v13 = (_OWORD *)(a2 + 120);
  v14 = *(_QWORD *)(a1 + 128);
  if (v14 == 2)
    goto LABEL_4;
  v15 = *(_QWORD *)(a2 + 128);
  if (v15 != 2)
  {
    if (v14 == 1)
    {
LABEL_8:
      v19 = *(_OWORD *)(a2 + 136);
      *v12 = *v13;
      *(_OWORD *)(a1 + 136) = v19;
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      goto LABEL_15;
    }
    if (v15 == 1)
    {
      sub_20E6A22C8(a1 + 120);
      goto LABEL_8;
    }
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v15;
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    v20 = (_QWORD *)(a2 + 144);
    v21 = *(_QWORD *)(a1 + 152);
    if (v21 >> 60 != 15)
    {
      v22 = *(_QWORD *)(a2 + 152);
      if (v22 >> 60 != 15)
      {
        v23 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = *v20;
        *(_QWORD *)(a1 + 152) = v22;
        sub_20E6673F4(v23, v21);
        goto LABEL_14;
      }
      sub_20E66B4E0(a1 + 144);
    }
    *(_OWORD *)(a1 + 144) = *(_OWORD *)v20;
LABEL_14:
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
LABEL_15:
    v24 = (_OWORD *)(a1 + 176);
    v25 = (_OWORD *)(a2 + 176);
    if (*(_QWORD *)(a1 + 208) == 1)
    {
LABEL_18:
      v27 = *(_OWORD *)(a2 + 192);
      *v24 = *v25;
      *(_OWORD *)(a1 + 192) = v27;
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      return a1;
    }
    v26 = *(_QWORD *)(a2 + 208);
    if (v26 == 1)
    {
      sub_20E6A2330((uint64_t *)(a1 + 176));
      goto LABEL_18;
    }
    v28 = *(_QWORD *)(a1 + 184);
    if (v28 >> 60 != 15)
    {
      v29 = *(_QWORD *)(a2 + 184);
      if (v29 >> 60 != 15)
      {
        v31 = *(_QWORD *)(a1 + 176);
        *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
        *(_QWORD *)(a1 + 184) = v29;
        sub_20E6673F4(v31, v28);
        v32 = (_QWORD *)(a2 + 192);
        v33 = *(_QWORD *)(a1 + 200);
        if (v33 >> 60 != 15)
        {
          v34 = *(_QWORD *)(a2 + 200);
          if (v34 >> 60 != 15)
          {
            v35 = *(_QWORD *)(a1 + 192);
            *(_QWORD *)(a1 + 192) = *v32;
            *(_QWORD *)(a1 + 200) = v34;
            sub_20E6673F4(v35, v33);
            goto LABEL_28;
          }
          sub_20E66B4E0(a1 + 192);
        }
        *(_OWORD *)(a1 + 192) = *(_OWORD *)v32;
LABEL_28:
        *(_QWORD *)(a1 + 208) = v26;
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_20E6A22FC(a1 + 176);
    }
    v30 = *(_OWORD *)(a2 + 192);
    *v24 = *v25;
    *(_OWORD *)(a1 + 192) = v30;
    goto LABEL_28;
  }
  sub_20E6A2364((_QWORD *)(a1 + 120));
LABEL_4:
  v16 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v16;
  v17 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v17;
  v18 = *(_OWORD *)(a2 + 136);
  *v12 = *v13;
  *(_OWORD *)(a1 + 136) = v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPAuthenticatorMakeCredentialCommand(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPAuthenticatorMakeCredentialCommand(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPAuthenticatorMakeCredentialCommand()
{
  return &type metadata for ASCTAPAuthenticatorMakeCredentialCommand;
}

unint64_t sub_20E6A331C()
{
  unint64_t result;

  result = qword_254A2EA00;
  if (!qword_254A2EA00)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F0A88, &type metadata for ASCTAPAuthenticatorGetAssertionCommand.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EA00);
  }
  return result;
}

unint64_t sub_20E6A3360()
{
  unint64_t result;

  result = qword_254A2EA18;
  if (!qword_254A2EA18)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1E14, &type metadata for ASCTAPPublicKeyCredentialDescriptor);
    atomic_store(result, (unint64_t *)&qword_254A2EA18);
  }
  return result;
}

unint64_t sub_20E6A33A4()
{
  unint64_t result;

  result = qword_254A2EA20;
  if (!qword_254A2EA20)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPExtensionInput, &type metadata for ASCTAPExtensionInput);
    atomic_store(result, (unint64_t *)&qword_254A2EA20);
  }
  return result;
}

uint64_t sub_20E6A33E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 96);
  v10 = *(_OWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 136);
  swift_bridgeObjectRetain();
  sub_20E66A990(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_20E6782F0(v15, v14, v4, v5, v6, v13, v12, v11, v10, *((uint64_t *)&v10 + 1), v7, v8, (void (*)(void))sub_20E677C30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677C6C);
  return a1;
}

uint64_t sub_20E6A34C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 96);
  v10 = *(_OWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 136);
  swift_bridgeObjectRelease();
  sub_20E6673F4(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_20E6782F0(v15, v14, v4, v5, v6, v13, v12, v11, v10, *((uint64_t *)&v10 + 1), v7, v8, (void (*)(void))sub_20E66AA3C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E66AA78);
  return a1;
}

unint64_t sub_20E6A35A8()
{
  unint64_t result;

  result = qword_254A2EA30;
  if (!qword_254A2EA30)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F0A38, &type metadata for ASCTAPAuthenticatorMakeCredentialCommand.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EA30);
  }
  return result;
}

unint64_t sub_20E6A35EC()
{
  unint64_t result;

  result = qword_254A2EA38;
  if (!qword_254A2EA38)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F232C, &type metadata for ASCTAPRelyingPartyEntity);
    atomic_store(result, (unint64_t *)&qword_254A2EA38);
  }
  return result;
}

unint64_t sub_20E6A3630()
{
  unint64_t result;

  result = qword_254A2EA40;
  if (!qword_254A2EA40)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1E8C, &type metadata for ASCTAPUserEntity);
    atomic_store(result, (unint64_t *)&qword_254A2EA40);
  }
  return result;
}

unint64_t sub_20E6A3674()
{
  unint64_t result;

  result = qword_254A2EA58;
  if (!qword_254A2EA58)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2304, &type metadata for ASCTAPPublicKeyCredentialParameters);
    atomic_store(result, (unint64_t *)&qword_254A2EA58);
  }
  return result;
}

uint64_t sub_20E6A36B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 128);
  v15 = *(_QWORD *)(a1 + 120);
  v13 = *(_QWORD *)(a1 + 136);
  v11 = *(_QWORD *)(a1 + 152);
  v12 = *(_QWORD *)(a1 + 144);
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 176);
  v7 = *(_OWORD *)(a1 + 184);
  v4 = *(_QWORD *)(a1 + 208);
  v6 = *(_QWORD *)(a1 + 200);
  sub_20E66A990(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_20E66A990(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_20E6782F0(v15, v14, v13, v12, v11, v10, v9, v8, v7, *((uint64_t *)&v7 + 1), v6, v4, (void (*)(void))sub_20E677C30, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677C6C);
  return a1;
}

uint64_t sub_20E6A37EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 128);
  v15 = *(_QWORD *)(a1 + 120);
  v13 = *(_QWORD *)(a1 + 136);
  v11 = *(_QWORD *)(a1 + 152);
  v12 = *(_QWORD *)(a1 + 144);
  v9 = *(_QWORD *)(a1 + 168);
  v10 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 176);
  v7 = *(_OWORD *)(a1 + 184);
  v4 = *(_QWORD *)(a1 + 208);
  v6 = *(_QWORD *)(a1 + 200);
  sub_20E6673F4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_20E6673F4(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_20E6782F0(v15, v14, v13, v12, v11, v10, v9, v8, v7, *((uint64_t *)&v7 + 1), v6, v4, (void (*)(void))sub_20E66AA3C, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E66AA78);
  return a1;
}

unint64_t sub_20E6A3920()
{
  unint64_t result;

  result = qword_254A2EA70;
  if (!qword_254A2EA70)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1DEC, &type metadata for ASCTAPPublicKeyCredentialDescriptor);
    atomic_store(result, (unint64_t *)&qword_254A2EA70);
  }
  return result;
}

unint64_t sub_20E6A3964()
{
  unint64_t result;

  result = qword_254A2EAE0;
  if (!qword_254A2EAE0)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPExtensionInput, &type metadata for ASCTAPExtensionInput);
    atomic_store(result, (unint64_t *)&qword_254A2EAE0);
  }
  return result;
}

unint64_t sub_20E6A39A8()
{
  unint64_t result;

  result = qword_254A2EA80;
  if (!qword_254A2EA80)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F223C, &type metadata for ASCTAPRelyingPartyEntity);
    atomic_store(result, (unint64_t *)&qword_254A2EA80);
  }
  return result;
}

unint64_t sub_20E6A39EC()
{
  unint64_t result;

  result = qword_254A2EA88;
  if (!qword_254A2EA88)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1E64, &type metadata for ASCTAPUserEntity);
    atomic_store(result, (unint64_t *)&qword_254A2EA88);
  }
  return result;
}

uint64_t sub_20E6A3A30(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x212BC39A8](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_20E6A3A94()
{
  unint64_t result;

  result = qword_254A2EA98;
  if (!qword_254A2EA98)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2214, &type metadata for ASCTAPPublicKeyCredentialParameters);
    atomic_store(result, (unint64_t *)&qword_254A2EA98);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ASCTAPAuthenticatorMakeCredentialCommand.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_20E6A3B24 + 4 * byte_20E6F05E0[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_20E6A3B58 + 4 * byte_20E6F05DB[v4]))();
}

uint64_t sub_20E6A3B58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6A3B60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6A3B68);
  return result;
}

uint64_t sub_20E6A3B74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6A3B7CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_20E6A3B80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6A3B88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPAuthenticatorMakeCredentialCommand.CodingKeys()
{
  return &type metadata for ASCTAPAuthenticatorMakeCredentialCommand.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ASCTAPAuthenticatorGetAssertionCommand.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_20E6A3BF0 + 4 * byte_20E6F05EA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_20E6A3C24 + 4 * byte_20E6F05E5[v4]))();
}

uint64_t sub_20E6A3C24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6A3C2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6A3C34);
  return result;
}

uint64_t sub_20E6A3C40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6A3C48);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_20E6A3C4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6A3C54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPAuthenticatorGetAssertionCommand.CodingKeys()
{
  return &type metadata for ASCTAPAuthenticatorGetAssertionCommand.CodingKeys;
}

unint64_t sub_20E6A3C74()
{
  unint64_t result;

  result = qword_254A2EAA0;
  if (!qword_254A2EAA0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F0920, &type metadata for ASCTAPAuthenticatorGetAssertionCommand.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EAA0);
  }
  return result;
}

unint64_t sub_20E6A3CBC()
{
  unint64_t result;

  result = qword_254A2EAA8;
  if (!qword_254A2EAA8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F0A10, &type metadata for ASCTAPAuthenticatorMakeCredentialCommand.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EAA8);
  }
  return result;
}

unint64_t sub_20E6A3D04()
{
  unint64_t result;

  result = qword_254A2EAB0;
  if (!qword_254A2EAB0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F0948, &type metadata for ASCTAPAuthenticatorMakeCredentialCommand.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EAB0);
  }
  return result;
}

unint64_t sub_20E6A3D4C()
{
  unint64_t result;

  result = qword_254A2EAB8;
  if (!qword_254A2EAB8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F0970, &type metadata for ASCTAPAuthenticatorMakeCredentialCommand.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EAB8);
  }
  return result;
}

unint64_t sub_20E6A3D94()
{
  unint64_t result;

  result = qword_254A2EAC0;
  if (!qword_254A2EAC0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F0858, &type metadata for ASCTAPAuthenticatorGetAssertionCommand.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EAC0);
  }
  return result;
}

unint64_t sub_20E6A3DDC()
{
  unint64_t result;

  result = qword_254A2EAC8;
  if (!qword_254A2EAC8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F0880, &type metadata for ASCTAPAuthenticatorGetAssertionCommand.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EAC8);
  }
  return result;
}

uint64_t sub_20E6A3E20(unint64_t a1)
{
  if (a1 >= 8)
    return 7;
  else
    return (0x605040302010007uLL >> (8 * a1));
}

uint64_t sub_20E6A3E48(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6144746E65696C63 && a2 == 0xEE00687361486174;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x50676E69796C6572 && a2 == 0xEC00000079747261 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1919251317 && a2 == 0xE400000000000000 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x800000020E6F81B0 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x4C6564756C637865 && a2 == 0xEB00000000747369 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F69736E65747865 && a2 == 0xEA0000000000736ELL || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_20E6A4174(unint64_t a1)
{
  if (a1 >= 6)
    return 5;
  else
    return (0x40302010005uLL >> (8 * a1));
}

uint64_t sub_20E6A4198(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x50676E69796C6572 && a2 == 0xEE00444979747261;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6144746E65696C63 && a2 == 0xEE00687361486174 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73694C776F6C6C61 && a2 == 0xE900000000000074 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F69736E65747865 && a2 == 0xEA0000000000736ELL || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

__n128 ASCTAPExtensionInput.init(largeBlob:prf:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __n128 result;
  __int128 v5;
  uint64_t v6;

  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v3;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  result = *(__n128 *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a3 + 48) = *(_BYTE *)(a1 + 48);
  *(_OWORD *)(a3 + 72) = v5;
  *(_QWORD *)(a3 + 88) = v6;
  return result;
}

uint64_t ASCTAPExtensionInput.encode(for:)(char *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = sub_20E6E9D58();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  v8 = *v1;
  v9 = v1[1];
  v10 = v1[2];
  v11 = v1[3];
  v32 = v1[4];
  v33 = v8;
  v31 = v1[5];
  v30 = *((unsigned __int8 *)v1 + 48);
  v12 = v1[7];
  v28 = v1[8];
  v29 = v12;
  v13 = v1[9];
  v26 = v1[10];
  v27 = v13;
  v25 = v1[11];
  sub_20E6E9D94();
  swift_allocObject();
  sub_20E6E9D88();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BE10188], v3);
  sub_20E6E9D64();
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EAD0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EAD8);
  v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 - 8) + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_20E6EE520;
  v18 = *(int *)(v14 + 48);
  if (qword_254A2DC68 != -1)
    swift_once();
  v19 = v17 + v16;
  v20 = v17 + v16 + v18;
  v21 = sub_20E6EA6D0();
  v22 = __swift_project_value_buffer(v21, (uint64_t)qword_254A2F800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v22, v21);
  *(_QWORD *)(v20 + 24) = &type metadata for CodingUserInfoKey.CBOREncodingFormat;
  *(_BYTE *)v20 = v7;
  sub_20E6A53AC(v17);
  sub_20E6E9D7C();
  v34 = v33;
  v35 = v9;
  v36 = v10;
  v37 = v11;
  v38 = v32;
  v39 = v31;
  v40 = v30;
  v41 = v29;
  v42 = v28;
  v43 = v27;
  v44 = v26;
  v45 = v25;
  sub_20E6A3964();
  v23 = sub_20E6E9D70();
  swift_release();
  return v23;
}

uint64_t ASCTAPLargeBlobExtensionInput.init(support:read:uncompressedWrite:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;

  if (a5 >> 60 == 15)
  {
    *(_QWORD *)a6 = result;
    *(_QWORD *)(a6 + 8) = a2;
    *(_BYTE *)(a6 + 16) = a3;
    *(_QWORD *)(a6 + 24) = a4;
    *(_QWORD *)(a6 + 32) = a5;
    *(_QWORD *)(a6 + 40) = 0;
    *(_BYTE *)(a6 + 48) = a5 >> 60 == 15;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_20E6DF380(3, a4, a5);
    if (!v6)
      __asm { BR              X10 }
    sub_20E66AA28(a4, a5);
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

uint64_t sub_20E6A488C(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = sub_20E6EA064();
  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0];
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  sub_20E67BD04(&qword_254A2ED98, v3, MEMORY[0x24BDC6300]);
  sub_20E6EA310();
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDA0);
  v7 = *(_QWORD *)(a1 + *(int *)(result + 36));
  if (!v7 || (v8 = *(_QWORD *)(v20 + 16), v21 == v8))
  {
    v9 = 0;
LABEL_4:
    sub_20E67BD44(a1, &qword_254A2EDA0);
    swift_bridgeObjectRelease();
    return v9;
  }
  if (v21 <= v8)
    v10 = *(_QWORD *)(v20 + 16);
  else
    v10 = v21;
  if (v21 < v8)
  {
    v11 = v20 + 32;
    v9 = *(unsigned __int8 *)(v20 + 32 + v21);
    v12 = v21 + 1;
    if (v21 + 1 == v8 || v7 == 1)
      goto LABEL_4;
    if (v12 != v10)
    {
      v9 |= (unint64_t)*(unsigned __int8 *)(v11 + v12) << 8;
      v14 = v21 + 2;
      if (v21 + 2 == v8 || v7 == 2)
        goto LABEL_4;
      if (v14 != v10)
      {
        v9 |= (unint64_t)*(unsigned __int8 *)(v11 + v14) << 16;
        v15 = v21 + 3;
        if (v21 + 3 == v8 || v7 == 3)
          goto LABEL_4;
        if (v15 != v10)
        {
          v9 |= (unint64_t)*(unsigned __int8 *)(v11 + v15) << 24;
          v16 = v21 + 4;
          if (v21 + 4 == v8 || v7 == 4)
            goto LABEL_4;
          if (v16 != v10)
          {
            v9 |= (unint64_t)*(unsigned __int8 *)(v11 + v16) << 32;
            v17 = v21 + 5;
            if (v21 + 5 == v8 || v7 == 5)
              goto LABEL_4;
            if (v17 != v10)
            {
              v9 |= (unint64_t)*(unsigned __int8 *)(v11 + v17) << 40;
              v18 = v21 + 6;
              if (v21 + 6 == v8 || v7 == 6)
                goto LABEL_4;
              if (v18 != v10)
              {
                v9 |= (unint64_t)*(unsigned __int8 *)(v11 + v18) << 48;
                v19 = v21 + 7;
                if (v21 + 7 == v8 || v7 == 7)
                  goto LABEL_4;
                if (v19 != v10)
                {
                  v9 |= (unint64_t)*(unsigned __int8 *)(v11 + v19) << 56;
                  goto LABEL_4;
                }
              }
            }
          }
        }
      }
    }
  }
  __break(1u);
  __break(1u);
  return result;
}

void sub_20E6A4A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_20E6E9CA4();
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

uint64_t sub_20E6A4B18()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  sub_20E66A990(v3, v0);
  sub_20E6E9CB0();
  sub_20E67BD04(&qword_254A2EDA8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDD78], MEMORY[0x24BDCDD80]);
  sub_20E6EA4B4();
  if ((*(_BYTE *)(v5 - 65) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v7 = *(unsigned __int8 *)(v5 - 66);
    sub_20E6EA4B4();
    if ((*(_BYTE *)(v5 - 65) & 1) != 0)
      v6 = v7;
    else
      v6 = v7 | (*(unsigned __int8 *)(v5 - 66) << 8);
  }
  sub_20E6673F4(v3, v0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  return v6;
}

void sub_20E6A4BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_20E6E9CA4();
  MEMORY[0x24BDAC7A8](v3);
  __asm { BR              X10 }
}

uint64_t sub_20E6A4C64()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_20E66A990(v3, v0);
  sub_20E6E9CB0();
  sub_20E67BD04(&qword_254A2EDA8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDD78], MEMORY[0x24BDCDD80]);
  sub_20E6EA4B4();
  if ((*(_BYTE *)(v5 - 65) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = *(unsigned __int8 *)(v5 - 66);
    sub_20E6EA4B4();
    if ((*(_BYTE *)(v5 - 65) & 1) == 0)
    {
      v6 |= (unint64_t)*(unsigned __int8 *)(v5 - 66) << 8;
      sub_20E6EA4B4();
      if ((*(_BYTE *)(v5 - 65) & 1) == 0)
      {
        v6 |= (unint64_t)*(unsigned __int8 *)(v5 - 66) << 16;
        sub_20E6EA4B4();
        if ((*(_BYTE *)(v5 - 65) & 1) == 0)
        {
          v6 |= (unint64_t)*(unsigned __int8 *)(v5 - 66) << 24;
          sub_20E6EA4B4();
          if ((*(_BYTE *)(v5 - 65) & 1) == 0)
          {
            v6 |= (unint64_t)*(unsigned __int8 *)(v5 - 66) << 32;
            sub_20E6EA4B4();
            if ((*(_BYTE *)(v5 - 65) & 1) == 0)
            {
              v6 |= (unint64_t)*(unsigned __int8 *)(v5 - 66) << 40;
              sub_20E6EA4B4();
              if ((*(_BYTE *)(v5 - 65) & 1) == 0)
              {
                v6 |= (unint64_t)*(unsigned __int8 *)(v5 - 66) << 48;
                sub_20E6EA4B4();
                if ((*(_BYTE *)(v5 - 65) & 1) == 0)
                  v6 |= (unint64_t)*(unsigned __int8 *)(v5 - 66) << 56;
              }
            }
          }
        }
      }
    }
  }
  sub_20E6673F4(v3, v0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  return v6;
}

void sub_20E6A4E08()
{
  JUMPOUT(0x20E6A4E64);
}

void sub_20E6A4EE4()
{
  JUMPOUT(0x20E6A4E64);
}

void sub_20E6A4EEC()
{
  JUMPOUT(0x20E6A4E64);
}

uint64_t sub_20E6A4F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v19;

  v17 = 2 - BYTE6(v16);
  if (__OFSUB__(2, BYTE6(v16)))
  {
    __break(1u);
    JUMPOUT(0x20E6A4FC8);
  }
  if (v17 >= 1)
  {
    if (*(_QWORD *)(sub_20E6E7CC0(0, v17) + 16))
    {
      sub_20E6E9C44();
      v15 = a15;
    }
    swift_bridgeObjectRelease();
  }
  if (*MEMORY[0x24BDAC8D0] != v19)
    JUMPOUT(0x20E6A4FD0);
  return v15;
}

void sub_20E6A4FF4()
{
  JUMPOUT(0x20E6A5048);
}

void sub_20E6A50C4()
{
  JUMPOUT(0x20E6A5048);
}

void sub_20E6A50CC()
{
  JUMPOUT(0x20E6A5048);
}

uint64_t sub_20E6A50FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;

  v18 = 8 - BYTE6(v16);
  if (__OFSUB__(8, BYTE6(v16)))
  {
    __break(1u);
    JUMPOUT(0x20E6A51A4);
  }
  if (v18 >= 1)
  {
    if (*(_QWORD *)(sub_20E6E7CC0(0, v18) + 16))
    {
      sub_20E6E9C44();
      v15 = a15;
    }
    swift_bridgeObjectRelease();
  }
  if (*MEMORY[0x24BDAC8D0] != *(_QWORD *)(v17 - 56))
    JUMPOUT(0x20E6A51ACLL);
  return v15;
}

void sub_20E6A51D0()
{
  JUMPOUT(0x20E6A5224);
}

void sub_20E6A52A0()
{
  JUMPOUT(0x20E6A5224);
}

void sub_20E6A52A8()
{
  JUMPOUT(0x20E6A5224);
}

uint64_t sub_20E6A52D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;

  v18 = 4 - BYTE6(v16);
  if (__OFSUB__(4, BYTE6(v16)))
  {
    __break(1u);
    JUMPOUT(0x20E6A5380);
  }
  if (v18 >= 1)
  {
    if (*(_QWORD *)(sub_20E6E7CC0(0, v18) + 16))
    {
      sub_20E6E9C44();
      v15 = a15;
    }
    swift_bridgeObjectRelease();
  }
  if (*MEMORY[0x24BDAC8D0] != *(_QWORD *)(v17 - 56))
    JUMPOUT(0x20E6A5388);
  return v15;
}

unint64_t sub_20E6A53AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EAD8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EE30);
  v6 = sub_20E6EA76C();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_20E67BCC0(v12, (uint64_t)v5, &qword_254A2EAD8);
    result = sub_20E6999B0((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = sub_20E6EA6D0();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    result = (unint64_t)sub_20E684528(v9, (_OWORD *)(v7[7] + 32 * v16));
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20E6A5548(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EE08);
  v2 = (_QWORD *)sub_20E6EA76C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = sub_20E699A00((uint64_t)v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20E6A5650(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDC8);
  v2 = (_QWORD *)sub_20E6EA76C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_20E698CCC(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_BYTE *)(v2[7] + result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20E6A5760(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDD0);
  v2 = (_QWORD *)sub_20E6EA76C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_20E698CCC(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20E6A5880(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2ED90);
  v2 = (_QWORD *)sub_20E6EA76C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_20E698CCC(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20E6A5998(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE20);
  v2 = sub_20E6EA76C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_20E67BCC0(v6, (uint64_t)&v15, &qword_254A2E370);
    v7 = v15;
    v8 = v16;
    result = sub_20E698CCC(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_20E684528(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20E6A5ACC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EE10);
  v2 = (_QWORD *)sub_20E6EA76C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (unint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = v4[1];
    v8 = v4[2];
    v9 = v4[3];
    v10 = v4[4];
    sub_20E66A990(v5, *v4);
    sub_20E66A990(v7, v8);
    sub_20E66A9D4(v9, v10);
    result = sub_20E699924(v5, v6);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v2[6] + 16 * result);
    *v13 = v5;
    v13[1] = v6;
    v14 = (uint64_t *)(v2[7] + 32 * result);
    *v14 = v7;
    v14[1] = v8;
    v14[2] = v9;
    v14[3] = v10;
    v15 = v2[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v4 += 6;
    v2[2] = v17;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20E6A5C14(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EE00);
  v2 = (_QWORD *)sub_20E6EA76C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    result = sub_20E698CCC(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20E6A5D2C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDF8);
  v2 = (_QWORD *)sub_20E6EA76C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_20E698CCC(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20E6A5E44(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDF0);
  v2 = (_QWORD *)sub_20E6EA76C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 72);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 5);
    v6 = *((_QWORD *)v4 - 4);
    v7 = *((_QWORD *)v4 - 3);
    v8 = *((_QWORD *)v4 - 2);
    v9 = *((_QWORD *)v4 - 1);
    v17 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_20E698CCC(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = v2[7] + 40 * result;
    *(_QWORD *)v13 = v7;
    *(_QWORD *)(v13 + 8) = v8;
    *(_QWORD *)(v13 + 16) = v9;
    *(_OWORD *)(v13 + 24) = v17;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v2[2] = v16;
    v4 = (_OWORD *)((char *)v4 + 56);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_20E6A5FA4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDE8);
  v2 = (_QWORD *)sub_20E6EA76C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = sub_20E698CCC(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_20E6A60BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[3];

  v1 = v0[1];
  v23 = v0[7];
  v24 = v0[8];
  v2 = v0[11];
  v21 = v0[10];
  v22 = v0[9];
  v3 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ASCPublicKeyCredentialAssertionExtensionInputs()), sel_init);
  if (v1 == 1)
  {
    v4 = 0;
    v5 = 0xB000000000000000;
  }
  else
  {
    sub_20E6A9810(v25);
    v4 = v25[0];
    v5 = v25[1];
  }
  v6 = (uint64_t *)&v3[OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_largeBlob];
  v7 = 1;
  swift_beginAccess();
  v8 = *v6;
  v9 = v6[1];
  *v6 = v4;
  v6[1] = v5;
  sub_20E690834(v8, v9);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  if (v2 != 1)
  {
    v11 = v24;
    if (v24 >> 60 == 15)
    {
      v10 = 0;
      v12 = 0;
      v13 = 0;
      v11 = 0xF000000000000000;
      if (v2)
      {
LABEL_7:
        v7 = sub_20E6B0BB4(v2);
        goto LABEL_10;
      }
    }
    else
    {
      v10 = v23;
      sub_20E66A990(v23, v24);
      v13 = v21;
      v12 = v22;
      sub_20E66A9D4(v22, v21);
      if (v2)
        goto LABEL_7;
    }
    v7 = 0;
  }
LABEL_10:
  v14 = (uint64_t *)&v3[OBJC_IVAR____TtC26AuthenticationServicesCore46ASCPublicKeyCredentialAssertionExtensionInputs_prf];
  swift_beginAccess();
  v15 = *v14;
  v16 = v14[1];
  v17 = v14[2];
  v18 = v14[3];
  v19 = v14[4];
  *v14 = v10;
  v14[1] = v11;
  v14[2] = v12;
  v14[3] = v13;
  v14[4] = v7;
  sub_20E690848(v15, v16, v17, v18, v19, (void (*)(void))sub_20E692464);
  return v3;
}

char *sub_20E6A6274()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[7];
  v4 = v0[8];
  v5 = v0[9];
  v6 = v0[10];
  v29 = v0[11];
  v7 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionInputs()), sel_init);
  v27 = v5;
  v28 = v3;
  v26 = v6;
  if (v2 >= 2)
  {
    v10 = v1 == 0x6572726566657270 && v2 == 0xE900000000000064;
    if (v10 || (sub_20E6EA8EC() & 1) != 0)
    {
      v8 = v4;
      v9 = 1;
    }
    else if (v1 == 0x6465726975716572 && v2 == 0xE800000000000000)
    {
      v8 = v4;
      v9 = 0;
    }
    else
    {
      v8 = v4;
      if ((sub_20E6EA8EC() & 1) != 0)
        v9 = 0;
      else
        v9 = 2;
    }
  }
  else
  {
    v8 = v4;
    v9 = 2;
  }
  v11 = &v7[OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_largeBlob];
  v12 = 1;
  swift_beginAccess();
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  *v11 = v9;
  if (v29 != 1)
  {
    if (v8 >> 60 == 15)
    {
      v14 = 0;
      v16 = 0;
      v17 = 0;
      v15 = 0xF000000000000000;
      if (v29)
      {
LABEL_12:
        v12 = sub_20E6B0BB4(v29);
LABEL_15:
        v13 = 1;
        goto LABEL_16;
      }
    }
    else
    {
      v14 = v28;
      sub_20E66A990(v28, v8);
      v17 = v26;
      v16 = v27;
      sub_20E66A9D4(v27, v26);
      v15 = v8;
      if (v29)
        goto LABEL_12;
    }
    v12 = 0;
    goto LABEL_15;
  }
LABEL_16:
  v18 = (uint64_t *)&v7[OBJC_IVAR____TtC26AuthenticationServicesCore49ASCPublicKeyCredentialRegistrationExtensionInputs_prf];
  swift_beginAccess();
  v19 = *v18;
  v20 = v18[1];
  v21 = v18[2];
  v22 = v18[3];
  v23 = v18[4];
  v24 = v18[5];
  *v18 = v13;
  v18[1] = v14;
  v18[2] = v15;
  v18[3] = v16;
  v18[4] = v17;
  v18[5] = v12;
  sub_20E66A9E8(v19, v20, v21, v22, v23, v24);
  return v7;
}

char *sub_20E6A64B4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = *v0;
  v5 = *((unsigned __int8 *)v0 + 48);
  v6 = v0[7];
  v7 = v0[8];
  v8 = v0[9];
  v9 = v0[10];
  v10 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs(0)), sel_init);
  v11 = v10;
  if ((v4 & 0xFE) == 2)
    v12 = 2;
  else
    v12 = v4 & 1;
  v13 = &v10[OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_largeBlob];
  swift_beginAccess();
  *v13 = v12;
  if (v5 == 3)
  {
    v14 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v3, 1, 1, v14);
  }
  else
  {
    v17[0] = v5;
    v18 = v6;
    v19 = v7;
    v20 = v8;
    v21 = v9;
    sub_20E6AC808(v3);
  }
  v15 = (uint64_t)&v11[OBJC_IVAR____TtC26AuthenticationServicesCore50ASCPublicKeyCredentialRegistrationExtensionOutputs_prf];
  swift_beginAccess();
  sub_20E6B74C8((uint64_t)v3, v15, &qword_254A2EDB0);
  swift_endAccess();
  return v11;
}

char *sub_20E6A6620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB8);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)v0;
  v4 = *(_QWORD *)(v0 + 8);
  v7 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 32);
  v9 = *(_BYTE *)(v0 + 40);
  v10 = *(unsigned __int8 *)(v0 + 48);
  v11 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  v30 = v11;
  v12 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  v28 = v12;
  v14 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs(0)), sel_init);
  v31 = v10;
  v27 = v13;
  if (v5 == 3)
    goto LABEL_5;
  if (v6 == 2)
  {
    v32 = v5;
    v33 = v4;
    v34 = v7;
    LOBYTE(v35) = 2;
    v36 = v8;
    v37 = v9 & 1;
    sub_20E66A9D4(v4, v7);
    v15 = ASCTAPLargeBlobExtensionOutput.uncompressedBlob.getter();
    if (v16 >> 60 == 15)
    {
      sub_20E677840(v5, v4, v7);
LABEL_5:
      v17 = 0;
      v18 = 0;
      v19 = -1;
      goto LABEL_8;
    }
    v17 = (unint64_t)v15;
    v18 = v16;
    sub_20E677840(v5, v4, v7);
    v19 = 0;
  }
  else
  {
    v18 = 0;
    v17 = v6 & 1;
    v19 = 1;
  }
LABEL_8:
  v20 = &v14[OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_largeBlob];
  swift_beginAccess();
  v21 = *(_QWORD *)v20;
  v22 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v20 = v17;
  *((_QWORD *)v20 + 1) = v18;
  v23 = v20[16];
  v20[16] = v19;
  sub_20E6B74A4(v21, v22, v23);
  if (v31 == 3)
  {
    v24 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v3, 1, 1, v24);
  }
  else
  {
    v32 = v31;
    v33 = v30;
    v34 = v29;
    v35 = v28;
    v36 = v27;
    sub_20E6ACAE4((uint64_t)v3);
  }
  v25 = (uint64_t)&v14[OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_prf];
  swift_beginAccess();
  sub_20E6B74C8((uint64_t)v3, v25, &qword_254A2EDB8);
  swift_endAccess();
  return v14;
}

uint64_t sub_20E6A6870@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  if (a3 >> 60 == 15)
  {
    *(_BYTE *)a5 = result;
    *(_QWORD *)(a5 + 8) = a2;
    *(_QWORD *)(a5 + 16) = a3;
    *(_BYTE *)(a5 + 24) = a4;
    *(_QWORD *)(a5 + 32) = 0;
    *(_BYTE *)(a5 + 40) = a3 >> 60 == 15;
  }
  else
  {
    sub_20E6DF380(3, a2, a3);
    if (!v5)
      __asm { BR              X10 }
    return sub_20E66AA28(a2, a3);
  }
  return result;
}

void sub_20E6A6950()
{
  unint64_t v0;
  uint64_t v1;

  sub_20E66AA28(v1, v0);
  JUMPOUT(0x20E6A68C0);
}

void sub_20E6A6964()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 24);
  v2 = *(_QWORD *)(v1 + 16);
  sub_20E66AA28(v1, v0);
  if (!__OFSUB__(v3, v2))
  {
    if (((v3 - v2) & 0x8000000000000000) == 0)
      JUMPOUT(0x20E6A68C0);
    sub_20E6EA718();
    __break(1u);
  }
  __break(1u);
  JUMPOUT(0x20E6A6A20);
}

uint64_t sub_20E6A6A34(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;
  char v14;

  v12[0] = a4;
  v12[1] = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EEF8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B8254();
  sub_20E6EA9C4();
  v14 = 0;
  sub_20E6EA874();
  if (!v5)
  {
    v13 = 1;
    sub_20E6EA874();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_20E6A6B5C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  __int128 v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EE68);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B7C18();
  sub_20E6EA9C4();
  LOBYTE(v11) = 0;
  sub_20E6EA874();
  if (!v2)
  {
    v11 = *(_OWORD *)(v3 + 16);
    v10[15] = 1;
    sub_20E66AD88();
    sub_20E6EA88C();
    LOBYTE(v11) = 2;
    sub_20E6EA874();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_20E6A6CB0(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  int v12;
  char v13;
  char v14;

  v12 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EF00);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B8298();
  sub_20E6EA9C4();
  v14 = 0;
  sub_20E6EA874();
  if (!v4)
  {
    v13 = 1;
    sub_20E6EA898();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_20E6A6DD4()
{
  _BYTE *v0;

  if (*v0)
    return 25705;
  else
    return 1701667182;
}

uint64_t sub_20E6A6DFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E6B6260(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E6A6E20()
{
  sub_20E6B8254();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6A6E48()
{
  sub_20E6B8254();
  return sub_20E6EA9DC();
}

uint64_t sub_20E6A6E70@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_20E6B6328(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_20E6A6E9C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_20E6A6A34(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_20E6A6EB8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_20E6EA8EC(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return sub_20E6EA8EC();
  }
  return result;
}

uint64_t sub_20E6A6F48()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 25705;
  if (*v0 != 1)
    v1 = 0x4E79616C70736964;
  if (*v0)
    return v1;
  else
    return 1701667182;
}

uint64_t sub_20E6A6F98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E6B64D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E6A6FBC()
{
  sub_20E6B7C18();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6A6FE4()
{
  sub_20E6B7C18();
  return sub_20E6EA9DC();
}

double sub_20E6A700C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_20E6B6618(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_20E6A704C(_QWORD *a1)
{
  return sub_20E6A6B5C(a1);
}

uint64_t sub_20E6A7060(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_20E6B1F90(v7, v8) & 1;
}

uint64_t sub_20E6A70A4(char *a1, char *a2)
{
  return sub_20E67C108(*a1, *a2);
}

uint64_t sub_20E6A70B0()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6A7120()
{
  sub_20E6EA250();
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E6A716C()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6A71D8@<X0>(char *a1@<X8>)
{
  return sub_20E6AAE80(a1);
}

void sub_20E6A71E4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701869940;
  if (*v1)
    v2 = 6777953;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE300000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_20E6A7214()
{
  _BYTE *v0;

  if (*v0)
    return 6777953;
  else
    return 1701869940;
}

uint64_t sub_20E6A7240@<X0>(char *a1@<X8>)
{
  return sub_20E6AAF50(a1);
}

uint64_t sub_20E6A724C()
{
  sub_20E6B8298();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6A7274()
{
  sub_20E6B8298();
  return sub_20E6EA9DC();
}

uint64_t sub_20E6A729C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  int v6;

  result = sub_20E6B6890(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_20E6A72C8(_QWORD *a1)
{
  uint64_t v1;

  return sub_20E6A6CB0(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_DWORD *)(v1 + 16));
}

BOOL sub_20E6A72E4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  char v5;
  _BOOL8 result;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a2 + 16);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return v2 == v3;
  v5 = sub_20E6EA8EC();
  result = 0;
  if ((v5 & 1) != 0)
    return v2 == v3;
  return result;
}

uint64_t ASCTAPAuthData.Flags.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ASCTAPAuthData.Flags.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static ASCTAPAuthData.Flags.userPresent.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static ASCTAPAuthData.Flags.userVerified.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void static ASCTAPAuthData.Flags.backupEligible.getter(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

void static ASCTAPAuthData.Flags.backupState.getter(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

void static ASCTAPAuthData.Flags.attestedCredentialDataPresent.getter(_BYTE *a1@<X8>)
{
  *a1 = 64;
}

void static ASCTAPAuthData.Flags.extensionDataPresent.getter(_BYTE *a1@<X8>)
{
  *a1 = 0x80;
}

_BYTE *sub_20E6A7398@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_20E6A73A4(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *sub_20E6A73AC@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_20E6A73C0@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_20E6A73D4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_20E6A73E8(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_20E6A7418@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_20E6A7444@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_20E6A7468(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *sub_20E6A747C(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *sub_20E6A7490(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *sub_20E6A74A4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_20E6A74B8(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_20E6A74CC(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_20E6A74E0(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_20E6A74F4()
{
  _BYTE *v0;

  return *v0 == 0;
}

uint64_t sub_20E6A7504()
{
  return sub_20E6EA550();
}

_BYTE *sub_20E6A751C(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

unsigned __int8 *sub_20E6A7530@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_20E6A7540(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_20E6A7550@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t static ASCTAPAuthData.test_rawAuthenticatorData(rpIDHash:flags:counter:credentialData:)(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v10 = *a3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DE90);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_20E6EE520;
  *(_BYTE *)(v11 + 32) = v10;
  v12 = sub_20E677310(v11);
  v14 = v13;
  swift_bridgeObjectRelease();
  sub_20E66A990(a1, a2);
  sub_20E676D00(v12, v14);
  sub_20E6673F4(v12, v14);
  sub_20E6A51D0();
  v17 = sub_20E66E2A8(v15, v16);
  v19 = v18;
  sub_20E66A990(a1, a2);
  sub_20E676D00(v17, v19);
  sub_20E6673F4(v17, v19);
  sub_20E6673F4(a1, a2);
  sub_20E66A990(a1, a2);
  sub_20E66A990(a5, a6);
  sub_20E676D00(a5, a6);
  sub_20E6673F4(a5, a6);
  sub_20E6673F4(a1, a2);
  return a1;
}

uint64_t ASCTAPAuthData.rpIDHash.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_20E66A990(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

void ASCTAPAuthData.flags.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t ASCTAPAuthData.counter.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20);
}

uint64_t ASCTAPAuthData.attestedCredentialData.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[3];
  v3 = v1[4];
  v4 = v1[5];
  v5 = v1[6];
  v6 = v1[7];
  v7 = v1[8];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_20E6B75D8(v2, v3, v4, v5, v6, v7, (void (*)(void))sub_20E66A990);
}

uint64_t ASCTAPAuthData.validate(relyingParty:requiredFlags:disallowedFlags:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  __int128 *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t inited;
  uint64_t v20;
  id v21;
  void *v22;
  void *v23;
  _DWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v30 = a1;
  v31 = a2;
  v38 = *MEMORY[0x24BDAC8D0];
  v7 = sub_20E6EA13C();
  v26 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v8 = sub_20E6EA064();
  v27 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v29 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_20E6EA1FC();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a3;
  v25[0] = *a4;
  v25[1] = v14;
  v15 = v4[3];
  v34 = v4[2];
  v35 = v15;
  v36 = v4[4];
  v37 = *((_QWORD *)v4 + 10);
  v16 = v4[1];
  v32 = *v4;
  v33 = v16;
  sub_20E6EA1F0();
  sub_20E6EA1D8();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v18 >> 60 != 15)
  {
    sub_20E67BD04((unint64_t *)&qword_254A2E620, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    sub_20E6EA04C();
    __asm { BR              X10 }
  }
  sub_20E6EA1CC();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EAF0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20E6EE520;
  *(_QWORD *)(inited + 32) = sub_20E6EA1CC();
  *(_QWORD *)(inited + 40) = v20;
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = 0xD000000000000016;
  *(_QWORD *)(inited + 56) = 0x800000020E6F8200;
  sub_20E6A5998(inited);
  v21 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v22 = (void *)sub_20E6EA1C0();
  swift_bridgeObjectRelease();
  v23 = (void *)sub_20E6EA148();
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_initWithDomain_code_userInfo_, v22, 14, v23);

  return swift_willThrow();
}

uint64_t sub_20E6A7E6C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v24 = MEMORY[0x24BEE0F88];
  v25 = MEMORY[0x24BDCFB90];
  v22 = a1;
  v23 = a2;
  v4 = __swift_project_boxed_opaque_existential_1Tm(&v22, MEMORY[0x24BEE0F88]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = sub_20E6B2988(v5, v6);
      v9 = v20 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = sub_20E6B2A48((uint64_t)v5, (uint64_t)v6);
      v9 = v21 | 0x8000000000000000;
    }
    else
    {
      v8 = sub_20E6B2AC0((uint64_t)v5, (uint64_t)v6);
      v9 = v19 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v22);
  sub_20E6B0F54(*a3, a3[1]);
  if ((v10 & 1) == 0)
  {
    sub_20E6EA1CC();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EAF0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20E6EE520;
    *(_QWORD *)(inited + 32) = sub_20E6EA1CC();
    *(_QWORD *)(inited + 40) = v12;
    v22 = 0;
    v23 = 0xE000000000000000;
    sub_20E6EA610();
    sub_20E6EA280();
    sub_20E6E9C74();
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    sub_20E6EA280();
    sub_20E6E9C74();
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    sub_20E6EA280();
    v13 = v22;
    v14 = v23;
    *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 48) = v13;
    *(_QWORD *)(inited + 56) = v14;
    sub_20E6A5998(inited);
    v15 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v16 = (void *)sub_20E6EA1C0();
    swift_bridgeObjectRelease();
    v17 = (void *)sub_20E6EA148();
    swift_bridgeObjectRelease();
    objc_msgSend(v15, sel_initWithDomain_code_userInfo_, v16, 14, v17);

    swift_willThrow();
  }
  return sub_20E6673F4(v8, v9);
}

void ASCTAPAuthData.init(data:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_20E6A816C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;

  if (BYTE6(v1) >= 0x25uLL)
  {
    sub_20E6A84B8((uint64_t)&v18, (uint64_t)&v20, 32, v2, v1);
    v5 = v18;
    v6 = v19;
    v21 = v20;
    *(_QWORD *)(v3 - 72) = v18;
    v17 = v6;
    sub_20E66A990(v5, v6);
    sub_20E6A863C();
    v8 = v7;
    v9 = v21;
    sub_20E66A990(v21, *((unint64_t *)&v21 + 1));
    sub_20E6A84B8((uint64_t)&v18, (uint64_t)&v20, 4, v9, *((uint64_t *)&v9 + 1));
    sub_20E6673F4(v9, *((unint64_t *)&v9 + 1));
    sub_20E6673F4(v9, *((unint64_t *)&v9 + 1));
    v11 = v18;
    v10 = v19;
    v12 = v20;
    v21 = v20;
    sub_20E66A990(v18, v19);
    sub_20E66A990(v12, *((unint64_t *)&v12 + 1));
    sub_20E6B2B40(v11, v10);
    v16 = v13;
    sub_20E6673F4(v11, v10);
    if ((v8 & 0x40) != 0)
      __asm { BR              X10 }
    sub_20E6673F4(v2, v1);
    sub_20E6673F4(v12, *((unint64_t *)&v12 + 1));
    sub_20E6673F4(v11, v10);
    sub_20E6673F4(v12, *((unint64_t *)&v12 + 1));
    v14 = *(_QWORD *)(v3 - 72);
    result = sub_20E6673F4(v14, v17);
    *(_QWORD *)v0 = v14;
    *(_QWORD *)(v0 + 8) = v17;
    *(_BYTE *)(v0 + 16) = v8;
    *(_DWORD *)(v0 + 20) = v16;
    *(_OWORD *)(v0 + 24) = xmmword_20E6EE5B0;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = xmmword_20E6EE5B0;
  }
  else
  {
    sub_20E6B2E44();
    swift_allocError();
    *v4 = 0;
    swift_willThrow();
    return sub_20E6673F4(v2, v1);
  }
  return result;
}

void sub_20E6A84B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X9 }
}

uint64_t sub_20E6A84FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  int v5;

  sub_20E688054(0, a3, v4, v3);
  return ((uint64_t (*)(void))((char *)&loc_20E6A8524 + dword_20E6A861C[v5]))();
}

void sub_20E6A8534()
{
  int v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  if (v2 >= v0)
  {
    *v1 = sub_20E6E9C50();
    v1[1] = v4;
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x20E6A8608);
}

void sub_20E6A863C()
{
  __asm { BR              X9 }
}

uint64_t sub_20E6A8670()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!BYTE6(v2))
    goto LABEL_13;
  sub_20E68458C(v0, v2);
  if ((v4 & 0x100) != 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = v4;
  if (!v3)
  {
    v7 = BYTE6(v2);
    v6 = 1;
    goto LABEL_9;
  }
  if (v3 == 1)
  {
    v6 = (int)v0 + 1;
    v7 = v0 >> 32;
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(v0 + 16);
  v6 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(v0 + 24);
LABEL_9:
  if (v7 < v6)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x20E6A8734);
  }
  v9 = sub_20E6E9C50();
  v11 = v10;
  sub_20E6673F4(v0, v2);
  *v1 = v9;
  v1[1] = v11;
  return v5;
}

void sub_20E6A8744(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_20E6A878C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (BYTE6(v0) >= 0x13uLL)
  {
    sub_20E6A84B8((uint64_t)&v11, (uint64_t)&v9, 16, v1, v0);
    v2 = v9;
    v3 = v10;
    v13 = v11;
    sub_20E66A990(v11, v12);
    sub_20E66A990(v2, v3);
    sub_20E6A84B8((uint64_t)&v11, (uint64_t)&v9, 2, v2, v3);
    sub_20E6673F4(v2, v3);
    sub_20E6673F4(v2, v3);
    v5 = v11;
    v4 = v12;
    v6 = v9;
    v7 = v10;
    sub_20E66A990(v11, v12);
    sub_20E66A990(v6, v7);
    sub_20E6B2B40(v5, v4);
    sub_20E6673F4(v5, v4);
    __asm { BR              X9 }
  }
  sub_20E6B7594();
  swift_allocError();
  swift_willThrow();
  return sub_20E6673F4(v1, v0);
}

void static ASCTAPCredentialData.== infix(_:_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v1 = a1[2];
  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  sub_20E6B0F54(*a1, a1[1]);
  if ((v5 & 1) != 0)
  {
    sub_20E6B0F54(v1, v2);
    if ((v6 & 1) != 0)
      sub_20E6B0F54(v3, v4);
  }
}

uint64_t sub_20E6A8ACC()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x69746E6564657263;
  if (*v0 != 1)
    v1 = 0xD000000000000013;
  if (*v0)
    return v1;
  else
    return 0x646975676161;
}

uint64_t sub_20E6A8B30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E6B6A20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E6A8B54()
{
  sub_20E6B2E88();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6A8B7C()
{
  sub_20E6B2E88();
  return sub_20E6EA9DC();
}

uint64_t ASCTAPCredentialData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EB08);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v18 = v1[3];
  v19 = v9;
  v10 = v1[4];
  v16 = v1[5];
  v17 = v10;
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B2E88();
  sub_20E6EA9C4();
  v21 = v8;
  v22 = v7;
  v23 = 0;
  sub_20E66AD88();
  v11 = v20;
  sub_20E6EA88C();
  if (!v11)
  {
    v13 = v16;
    v12 = v17;
    v21 = v19;
    v22 = v18;
    v23 = 1;
    sub_20E6EA88C();
    v21 = v12;
    v22 = v13;
    v23 = 2;
    sub_20E6EA88C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ASCTAPCredentialData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;

  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EB20);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B2E88();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v23 = 0;
  sub_20E66AE8C();
  sub_20E6EA7FC();
  v20 = a2;
  v10 = v21;
  v9 = v22;
  v23 = 1;
  sub_20E66A990(v21, v22);
  sub_20E6EA7FC();
  v23 = 2;
  v18 = v22;
  v19 = v21;
  sub_20E66A990(v21, v22);
  v17 = 0;
  sub_20E6EA7FC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v11 = v21;
  v12 = v22;
  sub_20E66A990(v10, v9);
  v14 = v18;
  v13 = v19;
  sub_20E66A990(v19, v18);
  sub_20E66A990(v11, v12);
  sub_20E6673F4(v13, v14);
  sub_20E6673F4(v10, v9);
  v15 = v20;
  *v20 = v10;
  v15[1] = v9;
  v15[2] = v13;
  v15[3] = v14;
  v15[4] = v11;
  v15[5] = v12;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  sub_20E6673F4(v10, v9);
  sub_20E6673F4(v13, v14);
  return sub_20E6673F4(v11, v12);
}

uint64_t sub_20E6A8FF4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ASCTAPCredentialData.init(from:)(a1, a2);
}

uint64_t sub_20E6A9008(_QWORD *a1)
{
  return ASCTAPCredentialData.encode(to:)(a1);
}

void sub_20E6A901C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  v1 = a1[2];
  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  sub_20E6B0F54(*a1, a1[1]);
  if ((v5 & 1) != 0)
  {
    sub_20E6B0F54(v1, v2);
    if ((v6 & 1) != 0)
      sub_20E6B0F54(v3, v4);
  }
}

uint64_t sub_20E6A90B8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  __int128 v12;
  _BYTE v13[8];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE90);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B7C5C();
  sub_20E6EA9C4();
  LOBYTE(v12) = 0;
  sub_20E6EA874();
  if (!v2)
  {
    v12 = *(_OWORD *)(v3 + 16);
    v11 = 1;
    sub_20E66AD88();
    sub_20E6EA88C();
    sub_20E67B910(v3 + 32, (uint64_t)v13, &qword_254A2E9A8);
    sub_20E67B910((uint64_t)v13, (uint64_t)&v12, &qword_254A2E9A8);
    v11 = 2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
    sub_20E69C8F8(&qword_254A2EEA0, (uint64_t *)&unk_254A2EE80, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_20E6A9270(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_20E67C19C(*a1, *a2);
}

uint64_t sub_20E6A927C()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6A930C()
{
  sub_20E6EA250();
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E6A9378()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6A9404@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_20E6B7294();
  *a1 = result;
  return result;
}

void sub_20E6A9438(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE200000000000000;
  v5 = 25705;
  if (v2 != 1)
  {
    v5 = 0x726F70736E617274;
    v4 = 0xEA00000000007374;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1701869940;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_20E6A9488()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 25705;
  if (*v0 != 1)
    v1 = 0x726F70736E617274;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

uint64_t sub_20E6A94D4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_20E6B7294();
  *a1 = result;
  return result;
}

uint64_t sub_20E6A9500()
{
  sub_20E6B7C5C();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6A9528()
{
  sub_20E6B7C5C();
  return sub_20E6EA9DC();
}

double sub_20E6A9550@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_20E6B6B80(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_20E6A9594(_QWORD *a1)
{
  return sub_20E6A90B8(a1);
}

uint64_t sub_20E6A95CC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_20E6B2904(v5, v7) & 1;
}

uint64_t sub_20E6A9614(char *a1, char *a2)
{
  return sub_20E67C624(*a1, *a2);
}

uint64_t sub_20E6A9620()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6A969C()
{
  sub_20E6EA250();
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E6A96F4()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6A976C@<X0>(char *a1@<X8>)
{
  return sub_20E6AAE80(a1);
}

void sub_20E6A9778(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 6713968;
  if (!*v1)
    v2 = 0x6F6C42656772616CLL;
  v3 = 0xE900000000000062;
  if (*v1)
    v3 = 0xE300000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_20E6A97B4@<X0>(char *a1@<X8>)
{
  return sub_20E6AAF50(a1);
}

uint64_t sub_20E6A97C0()
{
  sub_20E6B2ECC();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6A97E8()
{
  sub_20E6B2ECC();
  return sub_20E6EA9DC();
}

void sub_20E6A9810(_QWORD *a1@<X8>)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;

  if (*(_BYTE *)(v1 + 16) == 2)
  {
    v3 = *(_QWORD *)(v1 + 32);
    if (v3 >> 60 == 15)
    {
      v5 = 0;
      v7 = 0xB000000000000000;
    }
    else
    {
      v4 = *(_QWORD *)(v1 + 24);
      sub_20E66A990(v4, *(_QWORD *)(v1 + 32));
      v5 = sub_20E6DF3D0(3, v4, v3);
      v7 = v6;
      sub_20E66AA28(v4, v3);
    }
  }
  else
  {
    v5 = 0;
    v7 = 0xF000000000000000;
  }
  *a1 = v5;
  a1[1] = v7;
}

uint64_t ASCTAPExtensionInput.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EB30);
  v23 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v20 = v1[1];
  v21 = v6;
  v8 = *((_QWORD *)v1 + 4);
  v7 = *((_QWORD *)v1 + 5);
  v9 = *((_BYTE *)v1 + 48);
  v10 = *((_QWORD *)v1 + 7);
  v18 = *((_QWORD *)v1 + 8);
  v19 = v10;
  v11 = *((_QWORD *)v1 + 9);
  v16 = *((_QWORD *)v1 + 10);
  v17 = v11;
  v15 = *((_QWORD *)v1 + 11);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B2ECC();
  sub_20E6EA9C4();
  v24 = v21;
  v25 = v20;
  v26 = v8;
  v27 = v7;
  v28 = v9;
  v29 = 0;
  sub_20E6B2F10();
  v12 = v22;
  sub_20E6EA868();
  if (!v12)
  {
    *(_QWORD *)&v24 = v19;
    *((_QWORD *)&v24 + 1) = v18;
    *(_QWORD *)&v25 = v17;
    *((_QWORD *)&v25 + 1) = v16;
    v26 = v15;
    v29 = 1;
    sub_20E6B2F54();
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v5, v3);
}

uint64_t ASCTAPExtensionInput.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  int v46;
  char v47;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EB50);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B2ECC();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v47 = 0;
  sub_20E6B2F98();
  sub_20E6EA7D8();
  v9 = v40;
  v10 = v41;
  v47 = 1;
  v35 = v42;
  v36 = v39;
  v37 = v44;
  v38 = v43;
  v46 = v45;
  sub_20E677C30(v39, v40, v41, v42, v43);
  sub_20E6B2FDC();
  sub_20E6EA7D8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v11 = v40;
  v12 = v42;
  v33 = v41;
  v34 = v39;
  v31 = v42;
  v32 = v40;
  v13 = v43;
  v14 = v9;
  v15 = v36;
  v16 = v10;
  v17 = v14;
  v29 = v16;
  sub_20E677C30(v36, v14, v16, v35, v38);
  v30 = v13;
  sub_20E677C6C(v34, v11, v33, v12, v13);
  v18 = v16;
  v19 = v35;
  v21 = v37;
  v20 = v38;
  LOBYTE(v13) = v46;
  sub_20E66AA3C(v15, v17, v18, v35, v38);
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v17;
  v22 = v29;
  *(_QWORD *)(a2 + 16) = v29;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 40) = v21;
  *(_BYTE *)(a2 + 48) = v13;
  v24 = v31;
  v23 = v32;
  *(_QWORD *)(a2 + 56) = v34;
  *(_QWORD *)(a2 + 64) = v23;
  *(_QWORD *)(a2 + 72) = v33;
  *(_QWORD *)(a2 + 80) = v24;
  v25 = v30;
  *(_QWORD *)(a2 + 88) = v30;
  v26 = v25;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  sub_20E66AA3C(v36, v17, v22, v19, v38);
  return sub_20E690848(v34, v23, v33, v24, v26, (void (*)(void))sub_20E66AAA8);
}

uint64_t sub_20E6A9E14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ASCTAPExtensionInput.init(from:)(a1, a2);
}

uint64_t sub_20E6A9E28(_QWORD *a1)
{
  return ASCTAPExtensionInput.encode(to:)(a1);
}

void sub_20E6A9E40(char *a1)
{
  sub_20E67C294(*a1);
}

void sub_20E6A9E4C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_20E6EA988();
  __asm { BR              X9 }
}

uint64_t sub_20E6A9E98()
{
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

void sub_20E6A9F04()
{
  __asm { BR              X10 }
}

uint64_t sub_20E6A9F40()
{
  sub_20E6EA250();
  return swift_bridgeObjectRelease();
}

void sub_20E6A9F98()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_20E6EA988();
  __asm { BR              X9 }
}

uint64_t sub_20E6A9FE0()
{
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6AA04C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_20E6B6E40();
  *a1 = result;
  return result;
}

uint64_t sub_20E6AA078()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_20E6AA0A8 + 4 * byte_20E6F0AF0[*v0]))();
}

void sub_20E6AA0A8(_QWORD *a1@<X8>)
{
  *a1 = 1684104562;
  a1[1] = 0xE400000000000000;
}

void sub_20E6AA0BC(_QWORD *a1@<X8>)
{
  *a1 = 0x6574697277;
  a1[1] = 0xE500000000000000;
}

void sub_20E6AA0D4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "originalSize");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_20E6AA0F8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20E6AA128 + 4 * byte_20E6F0AF4[*v0]))(0x74726F70707573, 0xE700000000000000);
}

uint64_t sub_20E6AA128()
{
  return 1684104562;
}

uint64_t sub_20E6AA138()
{
  return 0x6574697277;
}

uint64_t sub_20E6AA14C()
{
  return 0x6C616E696769726FLL;
}

uint64_t sub_20E6AA16C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_20E6B6E40();
  *a1 = result;
  return result;
}

void sub_20E6AA190(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_20E6AA19C()
{
  sub_20E6B3020();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6AA1C4()
{
  sub_20E6B3020();
  return sub_20E6EA9DC();
}

uint64_t ASCTAPLargeBlobExtensionInput.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  char v43;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EB68);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v34 = a1;
  __swift_project_boxed_opaque_existential_1Tm(a1, v9);
  v10 = sub_20E6B3020();
  sub_20E6EA9AC();
  if (v2)
    goto LABEL_3;
  LOBYTE(v35) = 0;
  v11 = v8;
  v12 = sub_20E6EA7A8();
  v14 = v13;
  v15 = v12;
  LOBYTE(v35) = 1;
  v16 = v5;
  v42 = sub_20E6EA7B4();
  v43 = 2;
  sub_20E66AE8C();
  sub_20E6EA7D8();
  v19 = v36;
  v33 = v35;
  LOBYTE(v35) = 3;
  v20 = sub_20E6EA7CC();
  v32 = v16;
  if ((v21 & 1) != 0)
  {
    ASCTAPLargeBlobExtensionInput.init(support:read:uncompressedWrite:)(v15, v14, v42, v33, v19, (uint64_t)&v35);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v32);
    v15 = v35;
    v14 = v36;
    v26 = v37;
    v27 = v38;
    v28 = v39;
    v29 = v40;
    v30 = v41;
    v17 = (uint64_t)v34;
LABEL_10:
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = v14;
    *(_BYTE *)(a2 + 16) = v26;
    *(_QWORD *)(a2 + 24) = v27;
    *(_QWORD *)(a2 + 32) = v28;
    *(_QWORD *)(a2 + 40) = v29;
    *(_BYTE *)(a2 + 48) = v30;
    return __swift_destroy_boxed_opaque_existential_1Tm(v17);
  }
  if (v19 >> 60 != 15)
  {
    v28 = v19;
    v31 = v20;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v32);
    v29 = v31;
    v30 = 0;
    v27 = v33;
    v17 = (uint64_t)v34;
    v26 = v42;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  v22 = sub_20E6EA640();
  swift_allocError();
  v24 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EB78);
  *(_QWORD *)(v24 + 24) = &type metadata for ASCTAPLargeBlobExtensionInput.CodingKeys;
  *(_QWORD *)(v24 + 32) = v10;
  *(_BYTE *)v24 = 2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EB80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_20E6EE520;
  *(_QWORD *)(v25 + 56) = &type metadata for ASCTAPLargeBlobExtensionInput.CodingKeys;
  *(_QWORD *)(v25 + 64) = v10;
  *(_BYTE *)(v25 + 32) = 2;
  sub_20E6EA634();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26C8], v22);
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v32);
LABEL_3:
  v17 = (uint64_t)v34;
  return __swift_destroy_boxed_opaque_existential_1Tm(v17);
}

uint64_t ASCTAPLargeBlobExtensionInput.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_BYTE *, uint64_t, uint64_t);
  unint64_t v17;
  char v18;
  void (*v19)(_BYTE *, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE v37[4];
  int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _BYTE *v48;
  __int128 v49;
  __int128 v50;
  int v51;
  char v52;

  v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EB88);
  v41 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v4 = &v37[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_20E6EA6D0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v48 = &v37[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v37[-v9];
  v11 = *v1;
  v42 = v1[1];
  v43 = v11;
  v51 = *((unsigned __int8 *)v1 + 16);
  v12 = v1[4];
  *(_QWORD *)&v40 = v1[3];
  *((_QWORD *)&v40 + 1) = v12;
  v39 = v1[5];
  v38 = *((unsigned __int8 *)v1 + 48);
  v13 = a1[4];
  v46 = __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  v47 = v13;
  v14 = sub_20E6EA9B8();
  if (qword_254A2DC68 != -1)
    swift_once();
  v15 = __swift_project_value_buffer(v5, (uint64_t)qword_254A2F800);
  v16 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16);
  v16(v10, v15, v5);
  if (*(_QWORD *)(v14 + 16) && (v17 = sub_20E6999B0((uint64_t)v10), (v18 & 1) != 0))
  {
    sub_20E66C394(*(_QWORD *)(v14 + 56) + 32 * v17, (uint64_t)&v49);
  }
  else
  {
    v49 = 0u;
    v50 = 0u;
  }
  swift_bridgeObjectRelease();
  v19 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v19(v10, v5);
  if (*((_QWORD *)&v50 + 1))
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v20 = v52;
      __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
      sub_20E6B3020();
      sub_20E6EA9C4();
      LOBYTE(v49) = 0;
      v21 = v44;
      v22 = v45;
      sub_20E6EA838();
      if (v21)
        return (*(uint64_t (**)(_BYTE *, uint64_t))(v41 + 8))(v4, v22);
      LOBYTE(v49) = 1;
      sub_20E6EA844();
      v23 = *((_QWORD *)&v40 + 1);
      if (*((_QWORD *)&v40 + 1) >> 60 == 15)
        return (*(uint64_t (**)(_BYTE *, uint64_t))(v41 + 8))(v4, v22);
      if ((v20 & 1) != 0)
      {
        v32 = v40;
        sub_20E66A990(v40, *((unint64_t *)&v40 + 1));
        v33 = sub_20E6DF3D0(3, v32, v23);
        v35 = v34;
        *(_QWORD *)&v49 = v33;
        *((_QWORD *)&v49 + 1) = v34;
        v52 = 2;
        sub_20E66AD88();
        sub_20E6EA88C();
        (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v4, v22);
        sub_20E66AA28(v32, v23);
        return sub_20E6673F4((uint64_t)v33, v35);
      }
      else
      {
        v36 = v40;
        v49 = v40;
        v52 = 2;
        sub_20E66A990(v40, *((unint64_t *)&v40 + 1));
        sub_20E66AD88();
        sub_20E6EA88C();
        *(_QWORD *)&v49 = v39;
        BYTE8(v49) = v38;
        v52 = 3;
        __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EBA0);
        sub_20E69C8F8(&qword_254A2EBA8, &qword_254A2EBA0, MEMORY[0x24BEE1E90], MEMORY[0x24BEE4AA8]);
        sub_20E6EA88C();
        (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v4, v22);
        return sub_20E66AA28(v36, v23);
      }
    }
  }
  else
  {
    sub_20E67BD44((uint64_t)&v49, (uint64_t *)&unk_254A2E0F0);
  }
  v25 = sub_20E6EA658();
  swift_allocError();
  v27 = v26;
  v28 = sub_20E6EA9B8();
  v29 = (uint64_t)v48;
  v16(v48, v15, v5);
  if (*(_QWORD *)(v28 + 16) && (v30 = sub_20E6999B0(v29), (v31 & 1) != 0))
  {
    sub_20E66C394(*(_QWORD *)(v28 + 56) + 32 * v30, (uint64_t)&v49);
  }
  else
  {
    v49 = 0u;
    v50 = 0u;
  }
  swift_bridgeObjectRelease();
  v19((_BYTE *)v29, v5);
  if (*((_QWORD *)&v50 + 1))
  {
    sub_20E684528(&v49, (_OWORD *)v27);
  }
  else
  {
    *(_QWORD *)(v27 + 24) = MEMORY[0x24BEE0D00];
    *(_QWORD *)v27 = 7104878;
    *(_QWORD *)(v27 + 8) = 0xE300000000000000;
    sub_20E67BD44((uint64_t)&v49, (uint64_t *)&unk_254A2E0F0);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EB98);
  sub_20E6EA634();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE2728], v25);
  return swift_willThrow();
}

uint64_t sub_20E6AAAC8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ASCTAPLargeBlobExtensionInput.init(from:)(a1, a2);
}

uint64_t sub_20E6AAADC(_QWORD *a1)
{
  return ASCTAPLargeBlobExtensionInput.encode(to:)(a1);
}

uint64_t sub_20E6AAAF4(char *a1, char *a2)
{
  return sub_20E67C484(*a1, *a2);
}

uint64_t sub_20E6AAB00()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6AAB7C()
{
  sub_20E6EA250();
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E6AABD4()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6AAC4C@<X0>(char *a1@<X8>)
{
  return sub_20E6AAE80(a1);
}

void sub_20E6AAC58(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 1818326629;
  if (*v1)
    v2 = 0xD000000000000010;
  v3 = 0x800000020E6F7110;
  if (!*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_20E6AAC94()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 1818326629;
}

uint64_t sub_20E6AACCC@<X0>(char *a1@<X8>)
{
  return sub_20E6AAF50(a1);
}

uint64_t sub_20E6AACD8()
{
  sub_20E6B3064();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6AAD00()
{
  sub_20E6B3064();
  return sub_20E6EA9DC();
}

uint64_t sub_20E6AAD28(char *a1, char *a2)
{
  return sub_20E67C3E8(*a1, *a2);
}

uint64_t sub_20E6AAD34()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6AADAC()
{
  sub_20E6EA250();
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E6AAE00()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6AAE74@<X0>(char *a1@<X8>)
{
  return sub_20E6AAE80(a1);
}

uint64_t sub_20E6AAE80@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_20E6EA784();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_20E6AAED8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7473726966;
  if (*v1)
    v2 = 0x646E6F636573;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_20E6AAF10()
{
  _BYTE *v0;

  if (*v0)
    return 0x646E6F636573;
  else
    return 0x7473726966;
}

uint64_t sub_20E6AAF44@<X0>(char *a1@<X8>)
{
  return sub_20E6AAF50(a1);
}

uint64_t sub_20E6AAF50@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_20E6EA784();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_20E6AAFAC()
{
  sub_20E6B7080();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6AAFD4()
{
  sub_20E6B7080();
  return sub_20E6EA9DC();
}

uint64_t sub_20E6AAFFC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v14 = a4;
  v15 = a5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2ED88);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B7080();
  sub_20E6EA9C4();
  v16 = a2;
  v17 = a3;
  v18 = 0;
  sub_20E66AD88();
  sub_20E6EA88C();
  if (!v5)
  {
    v16 = v14;
    v17 = v15;
    v18 = 1;
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_20E6AB150@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_20E6B6E88(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_20E6AB17C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_20E6AAFFC(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL sub_20E6AB198(uint64_t a1, uint64_t a2)
{
  return sub_20E6B1364(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t sub_20E6AB1B8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ASCTAPPRFExtensionInput.init(from:)(a1, a2);
}

uint64_t ASCTAPPRFExtensionInput.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  id v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char isUniquelyReferenced_nonNull_native;
  char v71;
  unint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  char v78;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  int64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void (*v95)(uint64_t, _QWORD, uint64_t);
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int64_t v116;
  uint64_t v117;
  id v118;
  unint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  unint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;

  v126 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EBB0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EBB8);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  v10 = sub_20E6B3064();
  v11 = v127;
  sub_20E6EA9AC();
  v12 = v11;
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v122 = v10;
  LOBYTE(v132) = 0;
  v13 = sub_20E6B30A8();
  sub_20E6EA7D8();
  v127 = v6;
  v119 = v13;
  v124 = v7;
  v15 = (uint64_t)v5;
  v16 = (uint64_t)v128;
  v17 = v129;
  v18 = v9;
  v19 = v130;
  v20 = v131;
  v21 = sub_20E6E9DB8();
  LOBYTE(v128) = 1;
  sub_20E66A954(v16, v17, v19, v20);
  sub_20E67BD04((unint64_t *)&unk_254A2EBD0, (uint64_t (*)(uint64_t))MEMORY[0x24BE101D0], MEMORY[0x24BE101E8]);
  sub_20E6EA7D8();
  v120 = a1;
  v113 = v16;
  v109 = v18;
  v110 = v20;
  v111 = v19;
  v112 = v17;
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v15, 1, v21) == 1)
  {
    v125 = 0;
    sub_20E67BD44(v15, &qword_254A2EBB0);
LABEL_11:
    v32 = 0;
    v27 = v124;
    v28 = v126;
    goto LABEL_12;
  }
  v23 = (void *)sub_20E6E9DAC();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v15, v21);
  v24 = objc_msgSend(v23, sel_dictionary);

  if (!v24)
  {
    v125 = 0;
    goto LABEL_11;
  }
  v25 = sub_20E67BE44(0, (unint64_t *)&qword_254A2E950);
  sub_20E6B30EC();
  v105 = v25;
  v26 = sub_20E6EA154();

  v121 = sub_20E6A5ACC(MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRelease();
  v27 = v124;
  v28 = v126;
  if ((v26 & 0xC000000000000001) != 0)
  {
    v29 = sub_20E6EA6E8();
    v108 = 0;
    v30 = 0;
    v31 = 0;
    v26 = v29 | 0x8000000000000000;
  }
  else
  {
    v37 = -1 << *(_BYTE *)(v26 + 32);
    v38 = *(_QWORD *)(v26 + 64);
    v108 = v26 + 64;
    v39 = ~v37;
    v40 = -v37;
    if (v40 < 64)
      v41 = ~(-1 << v40);
    else
      v41 = -1;
    v31 = v41 & v38;
    v30 = v39;
  }
  v42 = 0;
  v106 = v26 & 0x7FFFFFFFFFFFFFFFLL;
  v103 = v30;
  v107 = (unint64_t)(v30 + 64) >> 6;
  v104 = MEMORY[0x24BEE4AD0] + 8;
  v114 = v26;
  while ((v26 & 0x8000000000000000) != 0)
  {
    v125 = v12;
    v50 = sub_20E6EA70C();
    if (!v50)
    {
      v32 = v121;
      goto LABEL_59;
    }
    v52 = v51;
    v132 = v50;
    swift_unknownObjectRetain();
    v49 = v42;
    swift_dynamicCast();
    v53 = v128;
    swift_unknownObjectRelease();
    v132 = v52;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v123 = v128;
    swift_unknownObjectRelease();
    v117 = v31;
    v12 = v125;
    v54 = v53;
LABEL_36:
    if (!v54)
    {
      v125 = v12;
      v32 = v121;
LABEL_59:
      v27 = v124;
      goto LABEL_61;
    }
    v118 = v54;
    v59 = objc_msgSend(v54, sel_data, v103, v104);
    if (!v59)
    {
      v86 = v112;
      v87 = v113;
      v88 = v111;
      v89 = v110;
      sub_20E66AAA8(v113, v112, v111, v110);
      v90 = sub_20E6EA640();
      swift_allocError();
      v126 = (uint64_t *)v31;
      v92 = v91;
      __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EB80);
      v93 = swift_allocObject();
      *(_OWORD *)(v93 + 16) = xmmword_20E6EE520;
      v94 = v122;
      *(_QWORD *)(v93 + 56) = &type metadata for ASCTAPPRFExtensionInput.CodingKeys;
      *(_QWORD *)(v93 + 64) = v94;
      *(_BYTE *)(v93 + 32) = 1;
      sub_20E6EA634();
      v95 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v90 - 8) + 104);
      v96 = v90;
      v97 = v88;
      v95(v92, *MEMORY[0x24BEE26D8], v96);
      swift_willThrow();

      sub_20E6B3144();
      v98 = v89;
      v99 = v86;
      v100 = v87;
      (*(void (**)(char *, uint64_t))(v124 + 8))(v109, v127);
LABEL_4:
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v120);
      return sub_20E66AAA8(v100, v99, v97, v98);
    }
    v60 = v59;
    v116 = v49;
    v61 = sub_20E6E9C80();
    v63 = v62;

    sub_20E6E9D40();
    swift_allocObject();
    sub_20E6E9D34();
    sub_20E6E9D28();
    if (v12)
    {
      swift_release();

      sub_20E6673F4(v61, v63);
      v101 = v112;
      v100 = v113;
      v97 = v111;
      v102 = v110;
      sub_20E66AAA8(v113, v112, v111, v110);
      sub_20E6B3144();
      v98 = v102;
      v99 = v101;
      (*(void (**)(char *, uint64_t))(v124 + 8))(v109, v127);
      goto LABEL_4;
    }
    v125 = 0;
    swift_release();
    v64 = (_QWORD *)v121;
    if (!v121)
      goto LABEL_66;
    v66 = (uint64_t)v128;
    v65 = v129;
    v68 = v130;
    v67 = v131;
    sub_20E66A990(v61, v63);
    v115 = v66;
    sub_20E66A990(v66, v65);
    v69 = v67;
    sub_20E66A9D4(v68, v67);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v128 = v64;
    v72 = sub_20E699924(v61, v63);
    v73 = v64[2];
    v74 = (v71 & 1) == 0;
    v75 = v73 + v74;
    if (__OFADD__(v73, v74))
    {
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      result = sub_20E6EA928();
      __break(1u);
      return result;
    }
    v76 = v71;
    if (v64[3] >= v75)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_20E6B0470();
    }
    else
    {
      sub_20E6AEEF4(v75, isUniquelyReferenced_nonNull_native);
      v77 = sub_20E699924(v61, v63);
      if ((v76 & 1) != (v78 & 1))
        goto LABEL_67;
      v72 = v77;
    }
    v79 = v128;
    v121 = (unint64_t)v128;
    if ((v76 & 1) != 0)
    {
      v43 = (uint64_t *)(v128[7] + 32 * v72);
      v44 = v43[2];
      v45 = v43[3];
      sub_20E6673F4(*v43, v43[1]);
      sub_20E66AA28(v44, v45);
      v46 = v115;
      *v43 = v115;
      v43[1] = v65;
      v43[2] = v68;
      v43[3] = v69;
      v47 = v68;
    }
    else
    {
      v128[(v72 >> 6) + 8] |= 1 << v72;
      v80 = (uint64_t *)(v79[6] + 16 * v72);
      *v80 = v61;
      v80[1] = v63;
      v81 = (uint64_t *)(v79[7] + 32 * v72);
      v46 = v115;
      *v81 = v115;
      v81[1] = v65;
      v81[2] = v68;
      v81[3] = v69;
      v82 = v79[2];
      v83 = __OFADD__(v82, 1);
      v84 = v82 + 1;
      if (v83)
        goto LABEL_64;
      v47 = v68;
      v79[2] = v84;
      sub_20E66A990(v61, v63);
    }
    v12 = v125;
    swift_bridgeObjectRelease();
    sub_20E6673F4(v61, v63);

    sub_20E6673F4(v61, v63);
    sub_20E6673F4(v46, v65);
    sub_20E66AA28(v47, v69);
    v42 = v116;
    v31 = v117;
    v27 = v124;
    v28 = v126;
    v26 = v114;
  }
  if (v31)
  {
    v117 = (v31 - 1) & v31;
    v48 = __clz(__rbit64(v31)) | (v42 << 6);
    v49 = v42;
LABEL_35:
    v57 = 8 * v48;
    v58 = *(void **)(*(_QWORD *)(v26 + 56) + v57);
    v54 = *(id *)(*(_QWORD *)(v26 + 48) + v57);
    v123 = v58;
    goto LABEL_36;
  }
  v49 = v42 + 1;
  if (__OFADD__(v42, 1))
    goto LABEL_65;
  v125 = v12;
  if (v49 >= v107)
  {
LABEL_60:
    v32 = v121;
    goto LABEL_61;
  }
  v55 = *(_QWORD *)(v108 + 8 * v49);
  if (v55)
    goto LABEL_33;
  v56 = v42 + 2;
  if (v42 + 2 >= v107)
    goto LABEL_60;
  v55 = *(_QWORD *)(v108 + 8 * v56);
  if (v55)
    goto LABEL_32;
  v56 = v42 + 3;
  if (v42 + 3 >= v107)
    goto LABEL_60;
  v55 = *(_QWORD *)(v108 + 8 * v56);
  if (v55)
  {
LABEL_32:
    v49 = v56;
LABEL_33:
    v12 = v125;
LABEL_34:
    v117 = (v55 - 1) & v55;
    v48 = __clz(__rbit64(v55)) + (v49 << 6);
    goto LABEL_35;
  }
  v49 = v42 + 4;
  if (v42 + 4 >= v107)
    goto LABEL_60;
  v55 = *(_QWORD *)(v108 + 8 * v49);
  v12 = v125;
  if (v55)
    goto LABEL_34;
  v85 = v42 + 5;
  v32 = v121;
  while (v107 != v85)
  {
    v55 = *(_QWORD *)(v108 + 8 * v85++);
    if (v55)
    {
      v49 = v85 - 1;
      goto LABEL_33;
    }
  }
LABEL_61:
  sub_20E6B3144();
LABEL_12:
  (*(void (**)(char *, uint64_t))(v27 + 8))(v109, v127);
  v34 = v112;
  v33 = v113;
  v35 = v111;
  v36 = v110;
  sub_20E66A954(v113, v112, v111, v110);
  swift_bridgeObjectRetain();
  sub_20E66AAA8(v33, v34, v35, v36);
  *v28 = v33;
  v28[1] = v34;
  v28[2] = v35;
  v28[3] = v36;
  v28[4] = v32;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v120);
  sub_20E66AAA8(v33, v34, v35, v36);
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E6ABCC0(_QWORD *a1)
{
  return ASCTAPPRFExtensionInput.encode(to:)(a1);
}

uint64_t ASCTAPPRFExtensionInput.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  id v49;
  char isUniquelyReferenced_nonNull_native;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  char v90;

  v72 = sub_20E6E9DB8();
  v77 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v71 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EBE8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = *v1;
  v8 = *((_QWORD *)v1 + 2);
  v9 = *((_QWORD *)v1 + 3);
  v78 = *((_QWORD *)v1 + 4);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B3064();
  sub_20E6EA9C4();
  v87 = v85;
  v88 = v8;
  v89 = v9;
  v90 = 0;
  v10 = sub_20E6B314C();
  v11 = v86;
  sub_20E6EA868();
  v12 = v11;
  if (v11)
  {
    v13 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    return v13(v7, v4);
  }
  v73 = v5;
  v15 = v78;
  if (!v78)
  {
    v13 = *(uint64_t (**)(char *, uint64_t))(v73 + 8);
    return v13(v7, v4);
  }
  v76 = v10;
  v69 = v7;
  v70 = v4;
  swift_bridgeObjectRetain();
  v16 = (_QWORD *)sub_20E6A5548(MEMORY[0x24BEE4AF8]);
  v17 = 0;
  v18 = *(_QWORD *)(v15 + 64);
  v74 = v15 + 64;
  v19 = 1 << *(_BYTE *)(v15 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v75 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    v23 = v77;
    *(_QWORD *)&v85 = v16;
    if (v21)
    {
      v86 = v12;
      v79 = v17;
      v80 = (v21 - 1) & v21;
      v24 = __clz(__rbit64(v21)) | (v17 << 6);
    }
    else
    {
      v25 = __OFADD__(v17, 1);
      v26 = v17 + 1;
      v27 = v73;
      if (v25)
        goto LABEL_50;
      if (v26 >= v75)
      {
LABEL_46:
        swift_release();
        sub_20E67BE44(0, (unint64_t *)&qword_254A2E950);
        sub_20E6B30EC();
        v63 = (void *)sub_20E6EA148();
        swift_bridgeObjectRelease();
        v64 = objc_msgSend((id)objc_opt_self(), sel_cborWithDictionary_, v63);

        v65 = v71;
        sub_20E6E9DA0();
        LOBYTE(v87) = 1;
        sub_20E67BD04(&qword_254A2EBF8, (uint64_t (*)(uint64_t))MEMORY[0x24BE101D0], MEMORY[0x24BE101E0]);
        v66 = v70;
        v67 = v72;
        v68 = v69;
        sub_20E6EA88C();
        (*(void (**)(char *, uint64_t))(v23 + 8))(v65, v67);
        return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v68, v66);
      }
      v28 = *(_QWORD *)(v74 + 8 * v26);
      if (!v28)
      {
        v29 = v26 + 1;
        if (v26 + 1 >= v75)
          goto LABEL_46;
        v28 = *(_QWORD *)(v74 + 8 * v29);
        if (!v28)
        {
          v29 = v26 + 2;
          if (v26 + 2 >= v75)
            goto LABEL_46;
          v28 = *(_QWORD *)(v74 + 8 * v29);
          if (!v28)
          {
            v29 = v26 + 3;
            if (v26 + 3 >= v75)
              goto LABEL_46;
            v28 = *(_QWORD *)(v74 + 8 * v29);
            if (!v28)
            {
              while (1)
              {
                v26 = v29 + 1;
                if (__OFADD__(v29, 1))
                  goto LABEL_51;
                if (v26 >= v75)
                  goto LABEL_46;
                v28 = *(_QWORD *)(v74 + 8 * v26);
                ++v29;
                if (v28)
                  goto LABEL_22;
              }
            }
          }
        }
        v26 = v29;
      }
LABEL_22:
      v86 = v12;
      v79 = v26;
      v80 = (v28 - 1) & v28;
      v24 = __clz(__rbit64(v28)) + (v26 << 6);
    }
    v30 = (uint64_t *)(*(_QWORD *)(v15 + 48) + 16 * v24);
    v31 = *v30;
    v32 = v30[1];
    v33 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 32 * v24);
    v35 = *v33;
    v34 = v33[1];
    v36 = v33[2];
    v37 = v33[3];
    sub_20E66A990(*v30, v32);
    sub_20E66A990(v31, v32);
    sub_20E66A990(v35, v34);
    sub_20E66A9D4(v36, v37);
    v38 = (void *)sub_20E6E9C68();
    v39 = objc_msgSend((id)objc_opt_self(), sel_cborWithData_, v38);
    sub_20E6673F4(v31, v32);

    sub_20E6E9D94();
    swift_allocObject();
    sub_20E6E9D88();
    v81 = v35;
    v82 = v34;
    *(_QWORD *)&v87 = v35;
    *((_QWORD *)&v87 + 1) = v34;
    v83 = v37;
    v84 = v36;
    v88 = v36;
    v89 = v37;
    v40 = v86;
    v41 = sub_20E6E9D4C();
    if (v40)
    {

      swift_release();
      sub_20E6673F4(v31, v32);
      swift_bridgeObjectRelease();
      swift_release();
      (*(void (**)(char *, uint64_t))(v73 + 8))(v69, v70);
      sub_20E6673F4(v81, v82);
      return sub_20E66AA28(v84, v83);
    }
    v42 = (void *)v41;
    swift_release();
    v43 = v85;
    v86 = 0;
    if ((v85 & 0xC000000000000001) != 0)
    {
      if ((uint64_t)v85 < 0)
        v44 = v85;
      else
        v44 = v85 & 0xFFFFFFFFFFFFFF8;
      v45 = v39;
      v46 = v42;
      v47 = sub_20E6EA580();
      if (__OFADD__(v47, 1))
        goto LABEL_48;
      v43 = sub_20E6AE6E0(v44, v47 + 1);
    }
    else
    {
      v48 = v39;
      v49 = v42;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v87 = v43;
    v52 = sub_20E699A00((uint64_t)v39);
    v53 = *(_QWORD *)(v43 + 16);
    v54 = (v51 & 1) == 0;
    v55 = v53 + v54;
    if (__OFADD__(v53, v54))
      break;
    v56 = v51;
    if (*(_QWORD *)(v43 + 24) >= v55)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_20E6B0118();
    }
    else
    {
      sub_20E6AE910(v55, isUniquelyReferenced_nonNull_native);
      v57 = sub_20E699A00((uint64_t)v39);
      if ((v56 & 1) != (v58 & 1))
        goto LABEL_52;
      v52 = v57;
    }
    v21 = v80;
    v16 = (_QWORD *)v87;
    v59 = 8 * v52;
    if ((v56 & 1) != 0)
    {
      v22 = *(_QWORD *)(v87 + 56);

      *(_QWORD *)(v22 + v59) = v42;
    }
    else
    {
      *(_QWORD *)(v87 + 8 * (v52 >> 6) + 64) |= 1 << v52;
      *(_QWORD *)(v16[6] + 8 * v52) = v39;
      *(_QWORD *)(v16[7] + 8 * v52) = v42;
      v60 = v16[2];
      v25 = __OFADD__(v60, 1);
      v61 = v60 + 1;
      if (v25)
        goto LABEL_49;
      v16[2] = v61;
      v62 = v39;
    }

    swift_bridgeObjectRelease();
    sub_20E6673F4(v31, v32);

    sub_20E6673F4(v81, v82);
    sub_20E66AA28(v84, v83);
    v12 = v86;
    v15 = v78;
    v17 = v79;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  sub_20E67BE44(0, (unint64_t *)&qword_254A2E950);
  result = sub_20E6EA928();
  __break(1u);
  return result;
}

uint64_t ASCTAPPRFExtensionOutput.enabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ASCTAPPRFExtensionOutput.results.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_20E66A954(v2, v3, v4, v5);
}

uint64_t ASCTAPPRFExtensionOutput.Results.first.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_20E66A990(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t ASCTAPPRFExtensionOutput.Results.second.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_20E66A9D4(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_20E6AC414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E6B70C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E6AC438()
{
  sub_20E6B3190();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6AC460()
{
  sub_20E6B3190();
  return sub_20E6EA9DC();
}

uint64_t ASCTAPPRFExtensionOutput.Results.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EC00);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v13 = v1[3];
  v14 = v9;
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B3190();
  sub_20E6EA9C4();
  v16 = v8;
  v17 = v7;
  v18 = 0;
  sub_20E66AD88();
  v10 = v15;
  sub_20E6EA88C();
  if (!v10)
  {
    v16 = v14;
    v17 = v13;
    v18 = 1;
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ASCTAPPRFExtensionOutput.Results.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EC10);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B3190();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v16 = a2;
  v19 = 0;
  sub_20E66AE8C();
  sub_20E6EA7FC();
  v9 = v17;
  v10 = v18;
  v19 = 1;
  sub_20E66A990(v17, v18);
  sub_20E6EA7D8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v11 = v17;
  v12 = v18;
  sub_20E66A990(v9, v10);
  sub_20E66A9D4(v11, v12);
  sub_20E6673F4(v9, v10);
  v13 = v16;
  *v16 = v9;
  v13[1] = v10;
  v13[2] = v11;
  v13[3] = v12;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  sub_20E6673F4(v9, v10);
  return sub_20E66AA28(v11, v12);
}

uint64_t sub_20E6AC7DC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ASCTAPPRFExtensionOutput.Results.init(from:)(a1, a2);
}

uint64_t sub_20E6AC7F0(_QWORD *a1)
{
  return ASCTAPPRFExtensionOutput.Results.encode(to:)(a1);
}

uint64_t sub_20E6AC808@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  unint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v24 - v7;
  v9 = *(unsigned __int8 *)v1;
  if (v9 == 2)
  {
    v10 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
  else
  {
    v12 = v1[2];
    v13 = v9 & 1;
    if (v12 >> 60 == 15)
    {
      v14 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
      v15 = &a1[*(int *)(v14 + 20)];
      v16 = sub_20E6EA094();
      v17 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
      v17(v15, 1, 1, v16);
      v17(&a1[*(int *)(v14 + 24)], 1, 1, v16);
      *a1 = v13;
      return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 0, 1, v14);
    }
    else
    {
      v18 = v1[1];
      v20 = v1[3];
      v19 = v1[4];
      v24 = v18;
      v25 = v12;
      sub_20E66A954(v18, v12, v20, v19);
      sub_20E66A990(v18, v12);
      sub_20E6EA07C();
      v21 = sub_20E6EA094();
      v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
      v22(v8, 0, 1, v21);
      if (v19 >> 60 == 15)
      {
        v22(v6, 1, 1, v21);
        sub_20E66AAA8(v18, v12, v20, v19);
      }
      else
      {
        v24 = v20;
        v25 = v19;
        sub_20E66A990(v20, v19);
        sub_20E66A990(v20, v19);
        sub_20E6EA07C();
        v22(v6, 0, 1, v21);
        sub_20E66AAA8(v18, v12, v20, v19);
        sub_20E66AA28(v20, v19);
      }
      *a1 = v13;
      v23 = type metadata accessor for ASCPublicKeyCredentialRegistrationExtensionOutputs.PRF(0);
      sub_20E67B910((uint64_t)v8, (uint64_t)&a1[*(int *)(v23 + 20)], &qword_254A2E7B0);
      sub_20E67B910((uint64_t)v6, (uint64_t)&a1[*(int *)(v23 + 24)], &qword_254A2E7B0);
      return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a1, 0, 1, v23);
    }
  }
}

uint64_t sub_20E6ACAE4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_20E6EA094();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1[2];
  if (v10 >> 60 == 15)
  {
    v11 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  else
  {
    v13 = v1[1];
    v15 = v1[3];
    v14 = v1[4];
    v17 = v13;
    v18 = v10;
    sub_20E66A954(v13, v10, v15, v14);
    sub_20E66A990(v13, v10);
    sub_20E6EA07C();
    if (v14 >> 60 == 15)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
      sub_20E66AAA8(v13, v10, v15, v14);
    }
    else
    {
      v17 = v15;
      v18 = v14;
      sub_20E66A990(v15, v14);
      sub_20E66A990(v15, v14);
      sub_20E6EA07C();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
      sub_20E66AAA8(v13, v10, v15, v14);
      sub_20E66AA28(v15, v14);
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v9, v6);
    v16 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
    sub_20E67B910((uint64_t)v5, a1 + *(int *)(v16 + 20), &qword_254A2E7B0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 0, 1, v16);
  }
}

uint64_t sub_20E6ACD34()
{
  _BYTE *v0;

  if (*v0)
    return 0x73746C75736572;
  else
    return 0x64656C62616E65;
}

uint64_t sub_20E6ACD68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E6B71A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E6ACD8C()
{
  sub_20E6B31D4();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6ACDB4()
{
  sub_20E6B31D4();
  return sub_20E6EA9DC();
}

uint64_t ASCTAPPRFExtensionOutput.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EC18);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v13 = v1[2];
  v14 = v8;
  v9 = v1[3];
  v11 = v1[4];
  v12 = v9;
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B31D4();
  sub_20E6EA9C4();
  LOBYTE(v15) = 0;
  sub_20E6EA844();
  if (!v2)
  {
    v15 = v14;
    v16 = v13;
    v17 = v12;
    v18 = v11;
    v19 = 1;
    sub_20E6B3218();
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ASCTAPPRFExtensionOutput.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[2];
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EC30);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B31D4();
  sub_20E6EA9AC();
  if (!v2)
  {
    LOBYTE(v13[0]) = 0;
    v9 = sub_20E6EA7B4();
    v14 = 1;
    sub_20E6B325C();
    sub_20E6EA7D8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = v13[0];
    v11 = v13[1];
    *(_BYTE *)a2 = v9;
    *(_OWORD *)(a2 + 8) = v10;
    *(_OWORD *)(a2 + 24) = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_20E6AD0A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ASCTAPPRFExtensionOutput.init(from:)(a1, a2);
}

uint64_t sub_20E6AD0B8(_QWORD *a1)
{
  return ASCTAPPRFExtensionOutput.encode(to:)(a1);
}

uint64_t ASCTAPExtensionOutput.largeBlob.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(v1 + 40);
  return sub_20E677614(v2, v3, v4);
}

uint64_t ASCTAPExtensionOutput.prf.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = v1[6];
  v3 = v1[7];
  v4 = v1[8];
  v5 = v1[9];
  v6 = v1[10];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  return sub_20E677630(v2, v3, v4, v5, v6);
}

uint64_t ASCTAPExtensionOutput.appID.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t sub_20E6AD118(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_20E67C524(*a1, *a2);
}

uint64_t sub_20E6AD124()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6AD1BC()
{
  sub_20E6EA250();
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E6AD230()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6AD2C4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_20E6B7294();
  *a1 = result;
  return result;
}

void sub_20E6AD2F8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE900000000000062;
  v4 = 0xE300000000000000;
  v5 = 6713968;
  if (v2 != 1)
  {
    v5 = 0x6469707061;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6F6C42656772616CLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_20E6AD350()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 6713968;
  if (*v0 != 1)
    v1 = 0x6469707061;
  if (*v0)
    return v1;
  else
    return 0x6F6C42656772616CLL;
}

uint64_t sub_20E6AD3A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_20E6B7294();
  *a1 = result;
  return result;
}

uint64_t sub_20E6AD3D0()
{
  sub_20E6B32A0();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6AD3F8()
{
  sub_20E6B32A0();
  return sub_20E6EA9DC();
}

AuthenticationServicesCore::ASCPublicKeyCredentialRegistrationExtensionOutputs::LargeBlob_optional __swiftcall ASCTAPLargeBlobExtensionOutput.toASCRegistration()()
{
  char *v0;
  unsigned __int8 *v1;
  int v2;
  char v3;
  AuthenticationServicesCore::ASCPublicKeyCredentialRegistrationExtensionOutputs::LargeBlob_optional result;

  v2 = *v1;
  if (v2 == 2)
    v3 = 2;
  else
    v3 = v2 & 1;
  *v0 = v3;
  return result;
}

void ASCTAPLargeBlobExtensionOutput.toASCAssertion()(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  void *v4;
  unint64_t v5;
  char v6;

  v3 = *(unsigned __int8 *)(v1 + 24);
  if (v3 != 2)
  {
    *(_QWORD *)a1 = v3 & 1;
    *(_QWORD *)(a1 + 8) = 0;
    v6 = 1;
    goto LABEL_5;
  }
  v4 = ASCTAPLargeBlobExtensionOutput.uncompressedBlob.getter();
  if (v5 >> 60 == 15)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v6 = -1;
LABEL_5:
    *(_BYTE *)(a1 + 16) = v6;
    return;
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t ASCTAPExtensionOutput.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  int v27;
  char v28;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EC40);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v20 = v1[1];
  v21 = v7;
  v8 = *((_QWORD *)v1 + 4);
  v9 = *((_BYTE *)v1 + 40);
  v10 = *((_QWORD *)v1 + 6);
  v18 = *((_QWORD *)v1 + 7);
  v19 = v10;
  v11 = *((_QWORD *)v1 + 8);
  v16 = *((_QWORD *)v1 + 9);
  v17 = v11;
  v15 = *((_QWORD *)v1 + 10);
  v27 = *((unsigned __int8 *)v1 + 88);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B32A0();
  sub_20E6EA9C4();
  v23 = v21;
  v24 = v20;
  v25 = v8;
  v26 = v9;
  v28 = 0;
  sub_20E6B32E4();
  v12 = v22;
  sub_20E6EA868();
  if (!v12)
  {
    *(_QWORD *)&v23 = v19;
    *((_QWORD *)&v23 + 1) = v18;
    *(_QWORD *)&v24 = v17;
    *((_QWORD *)&v24 + 1) = v16;
    v25 = v15;
    v28 = 1;
    sub_20E6B3328();
    sub_20E6EA868();
    LOBYTE(v23) = 2;
    sub_20E6EA844();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ASCTAPExtensionOutput.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 v45;
  int v46;
  char v47;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EC60);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B32A0();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v47 = 0;
  sub_20E6B336C();
  sub_20E6EA7D8();
  v34 = a2;
  v9 = v43;
  v10 = v44;
  v11 = v45;
  v47 = 1;
  v37 = v40;
  v38 = v41;
  v39 = v42;
  sub_20E677614(v40, v41, v42);
  sub_20E6B33B0();
  sub_20E6EA7D8();
  v46 = v11;
  v32 = v10;
  v33 = v9;
  v12 = v40;
  v13 = v41;
  v14 = v42;
  v15 = v43;
  LOBYTE(v40) = 2;
  v35 = v12;
  v36 = v44;
  sub_20E677630(v12, v41, v42, v43, v44);
  v31 = 0;
  v16 = sub_20E6EA7B4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v18 = v37;
  v17 = v38;
  LODWORD(v31) = v16;
  sub_20E677614(v37, v38, v39);
  v19 = v35;
  v20 = v36;
  sub_20E677630(v35, v13, v14, v15, v36);
  sub_20E67785C(v19, v13, v14, v15, v20);
  v21 = v17;
  v22 = v39;
  v24 = v32;
  v23 = v33;
  sub_20E677840(v18, v21, v39);
  v25 = v34;
  *v34 = v18;
  v26 = v38;
  v25[1] = v38;
  v25[2] = v22;
  v25[3] = v23;
  v25[4] = v24;
  *((_BYTE *)v25 + 40) = v46;
  v27 = v35;
  v28 = v36;
  v25[6] = v35;
  v25[7] = v13;
  v25[8] = v14;
  v25[9] = v15;
  v25[10] = v28;
  *((_BYTE *)v25 + 88) = v31;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  sub_20E677840(v37, v26, v39);
  return sub_20E67785C(v27, v13, v14, v15, v28);
}

uint64_t sub_20E6ADA38@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ASCTAPExtensionOutput.init(from:)(a1, a2);
}

uint64_t sub_20E6ADA4C(_QWORD *a1)
{
  return ASCTAPExtensionOutput.encode(to:)(a1);
}

uint64_t ASCTAPLargeBlobExtensionOutput.supported.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ASCTAPLargeBlobExtensionOutput.compressedBlob.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  sub_20E66A9D4(v1, *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t ASCTAPLargeBlobExtensionOutput.written.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t ASCTAPLargeBlobExtensionOutput.originalSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

void *ASCTAPLargeBlobExtensionOutput.uncompressedBlob.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  if (v2 >> 60 != 15)
  {
    sub_20E66A990(*(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
    v3 = sub_20E6DF3D0(3, v1, v2);
    sub_20E66AA28(v1, v2);
    return v3;
  }
  return (void *)v1;
}

uint64_t sub_20E6ADCFC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20E6ADD30 + 4 * byte_20E6F0AF8[*v0]))(0x6574726F70707573, 0xE900000000000064);
}

uint64_t sub_20E6ADD30()
{
  return 1651469410;
}

uint64_t sub_20E6ADD40()
{
  return 0x6E657474697277;
}

uint64_t sub_20E6ADD58()
{
  return 0x6C616E696769726FLL;
}

uint64_t sub_20E6ADD78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E6B72D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E6ADD9C()
{
  sub_20E6B33F4();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6ADDC4()
{
  sub_20E6B33F4();
  return sub_20E6EA9DC();
}

uint64_t ASCTAPLargeBlobExtensionOutput.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  char v38;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EC78);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v31 = a1;
  __swift_project_boxed_opaque_existential_1Tm(a1, v9);
  v10 = sub_20E6B33F4();
  sub_20E6EA9AC();
  if (v2)
    goto LABEL_3;
  LOBYTE(v32) = 0;
  v11 = v8;
  v12 = sub_20E6EA7B4();
  LOBYTE(v32) = 2;
  v13 = v5;
  v14 = sub_20E6EA7B4();
  v38 = 1;
  sub_20E66AE8C();
  sub_20E6EA7D8();
  v17 = v33;
  v30 = v32;
  LOBYTE(v32) = 3;
  v18 = sub_20E6EA7CC();
  v29 = v13;
  if ((v19 & 1) != 0)
  {
    sub_20E6A6870(v12, v30, v17, v14, (uint64_t)&v32);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v29);
    LOBYTE(v12) = v32;
    v24 = v33;
    v17 = v34;
    v14 = v35;
    v25 = v36;
    v26 = v37;
    v15 = (uint64_t)v31;
LABEL_10:
    *(_BYTE *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v24;
    *(_QWORD *)(a2 + 16) = v17;
    *(_BYTE *)(a2 + 24) = v14;
    *(_QWORD *)(a2 + 32) = v25;
    *(_BYTE *)(a2 + 40) = v26;
    return __swift_destroy_boxed_opaque_existential_1Tm(v15);
  }
  if (v17 >> 60 != 15)
  {
    v27 = v18;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v29);
    v25 = v27;
    v26 = 0;
    v24 = v30;
    v15 = (uint64_t)v31;
    goto LABEL_10;
  }
  v20 = sub_20E6EA640();
  swift_allocError();
  v22 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EB78);
  *(_QWORD *)(v22 + 24) = &type metadata for ASCTAPLargeBlobExtensionOutput.CodingKeys;
  *(_QWORD *)(v22 + 32) = v10;
  *(_BYTE *)v22 = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EB80);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_20E6EE520;
  *(_QWORD *)(v23 + 56) = &type metadata for ASCTAPLargeBlobExtensionOutput.CodingKeys;
  *(_QWORD *)(v23 + 64) = v10;
  *(_BYTE *)(v23 + 32) = 1;
  sub_20E6EA634();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26C8], v20);
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v29);
LABEL_3:
  v15 = (uint64_t)v31;
  return __swift_destroy_boxed_opaque_existential_1Tm(v15);
}

uint64_t ASCTAPLargeBlobExtensionOutput.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  void (*v16)(_BYTE *, uint64_t);
  char v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE v35[12];
  int v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t, uint64_t);
  _QWORD *v44;
  _BYTE *v45;
  __int128 v46;
  __int128 v47;
  int v48;
  char v49;

  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EC88);
  v40 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v4 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_20E6EA6D0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v45 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v10 = &v35[-v9];
  v48 = *v1;
  v11 = *((_QWORD *)v1 + 2);
  *(_QWORD *)&v38 = *((_QWORD *)v1 + 1);
  *((_QWORD *)&v38 + 1) = v11;
  v39 = v1[24];
  v37 = *((_QWORD *)v1 + 4);
  v36 = v1[40];
  v44 = __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  v12 = sub_20E6EA9B8();
  if (qword_254A2DC68 != -1)
    swift_once();
  v13 = __swift_project_value_buffer(v5, (uint64_t)qword_254A2F800);
  v43 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16);
  v43(v10, v13, v5);
  if (*(_QWORD *)(v12 + 16) && (v14 = sub_20E6999B0((uint64_t)v10), (v15 & 1) != 0))
  {
    sub_20E66C394(*(_QWORD *)(v12 + 56) + 32 * v14, (uint64_t)&v46);
  }
  else
  {
    v46 = 0u;
    v47 = 0u;
  }
  swift_bridgeObjectRelease();
  v16 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v16(v10, v5);
  if (*((_QWORD *)&v47 + 1))
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v17 = v49;
      __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
      sub_20E6B33F4();
      sub_20E6EA9C4();
      LOBYTE(v46) = 0;
      v18 = v4;
      v19 = v41;
      v20 = v42;
      sub_20E6EA844();
      if (v19)
        return (*(uint64_t (**)(_BYTE *, uint64_t))(v40 + 8))(v18, v20);
      LOBYTE(v46) = 2;
      sub_20E6EA844();
      v21 = *((_QWORD *)&v38 + 1);
      if (*((_QWORD *)&v38 + 1) >> 60 == 15)
        return (*(uint64_t (**)(_BYTE *, uint64_t))(v40 + 8))(v18, v20);
      if ((v17 & 1) != 0)
      {
        v30 = v38;
        sub_20E66A990(v38, *((unint64_t *)&v38 + 1));
        v31 = sub_20E6DF3D0(3, v30, v21);
        v33 = v32;
        *(_QWORD *)&v46 = v31;
        *((_QWORD *)&v46 + 1) = v32;
        v49 = 1;
        sub_20E66AD88();
        sub_20E6EA88C();
        (*(void (**)(_BYTE *, uint64_t))(v40 + 8))(v18, v20);
        sub_20E66AA28(v30, v21);
        return sub_20E6673F4((uint64_t)v31, v33);
      }
      else
      {
        v34 = v38;
        v46 = v38;
        v49 = 1;
        sub_20E66A990(v38, *((unint64_t *)&v38 + 1));
        sub_20E66AD88();
        sub_20E6EA88C();
        *(_QWORD *)&v46 = v37;
        BYTE8(v46) = v36;
        v49 = 3;
        __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EBA0);
        sub_20E69C8F8(&qword_254A2EBA8, &qword_254A2EBA0, MEMORY[0x24BEE1E90], MEMORY[0x24BEE4AA8]);
        sub_20E6EA88C();
        (*(void (**)(_BYTE *, uint64_t))(v40 + 8))(v18, v20);
        return sub_20E66AA28(v34, v21);
      }
    }
  }
  else
  {
    sub_20E67BD44((uint64_t)&v46, (uint64_t *)&unk_254A2E0F0);
  }
  v23 = sub_20E6EA658();
  swift_allocError();
  v25 = v24;
  v26 = sub_20E6EA9B8();
  v27 = (uint64_t)v45;
  v43(v45, v13, v5);
  if (*(_QWORD *)(v26 + 16) && (v28 = sub_20E6999B0(v27), (v29 & 1) != 0))
  {
    sub_20E66C394(*(_QWORD *)(v26 + 56) + 32 * v28, (uint64_t)&v46);
  }
  else
  {
    v46 = 0u;
    v47 = 0u;
  }
  swift_bridgeObjectRelease();
  v16((_BYTE *)v27, v5);
  if (*((_QWORD *)&v47 + 1))
  {
    sub_20E684528(&v46, (_OWORD *)v25);
  }
  else
  {
    *(_QWORD *)(v25 + 24) = MEMORY[0x24BEE0D00];
    *(_QWORD *)v25 = 7104878;
    *(_QWORD *)(v25 + 8) = 0xE300000000000000;
    sub_20E67BD44((uint64_t)&v46, (uint64_t *)&unk_254A2E0F0);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EB98);
  sub_20E6EA634();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE2728], v23);
  return swift_willThrow();
}

uint64_t sub_20E6AE6B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ASCTAPLargeBlobExtensionOutput.init(from:)(a1, a2);
}

uint64_t sub_20E6AE6C8(_QWORD *a1)
{
  return ASCTAPLargeBlobExtensionOutput.encode(to:)(a1);
}

uint64_t sub_20E6AE6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EE08);
    v2 = sub_20E6EA760();
    v18 = v2;
    sub_20E6EA6E8();
    v3 = sub_20E6EA70C();
    if (v3)
    {
      v4 = v3;
      sub_20E67BE44(0, (unint64_t *)&qword_254A2E950);
      do
      {
        swift_dynamicCast();
        swift_dynamicCast();
        v2 = v18;
        v12 = *(_QWORD *)(v18 + 16);
        if (*(_QWORD *)(v18 + 24) <= v12)
        {
          sub_20E6AE910(v12 + 1, 1);
          v2 = v18;
        }
        result = sub_20E6EA460();
        v6 = v2 + 64;
        v7 = -1 << *(_BYTE *)(v2 + 32);
        v8 = result & ~v7;
        v9 = v8 >> 6;
        if (((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          v10 = __clz(__rbit64((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v13 = 0;
          v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v15 = v9 == v14;
            if (v9 == v14)
              v9 = 0;
            v13 |= v15;
            v16 = *(_QWORD *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(_QWORD *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        v11 = 8 * v10;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + v11) = v17;
        *(_QWORD *)(*(_QWORD *)(v2 + 56) + v11) = v4;
        ++*(_QWORD *)(v2 + 16);
        v4 = sub_20E6EA70C();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B00];
  }
  return v2;
}

uint64_t sub_20E6AE910(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EE08);
  v6 = sub_20E6EA754();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      v33 = v31;
      v34 = v32;
    }
    result = sub_20E6EA460();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_20E6AEBE0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2ED90);
  v36 = a2;
  v6 = sub_20E6EA754();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_20E6EA988();
    sub_20E6EA250();
    result = sub_20E6EA9A0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_20E6AEEF4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  __int128 v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  _QWORD *v37;
  char v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EE10);
  v38 = a2;
  v6 = sub_20E6EA754();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v37 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v36)
          goto LABEL_33;
        v23 = v37[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v36)
            goto LABEL_33;
          v23 = v37[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v38 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v36)
                  goto LABEL_33;
                v23 = v37[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 32 * v21);
      v31 = *v30;
      v32 = v30[1];
      v33 = v30[2];
      v34 = v30[3];
      v39 = v29;
      if ((v38 & 1) == 0)
      {
        sub_20E66A990(v29, *((unint64_t *)&v29 + 1));
        sub_20E66A990(v31, v32);
        sub_20E66A9D4(v33, v34);
      }
      sub_20E6EA988();
      sub_20E6E9C8C();
      result = sub_20E6EA9A0();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        v18 = v39;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        v18 = v39;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17) = v18;
      v19 = (uint64_t *)(*(_QWORD *)(v7 + 56) + 32 * v17);
      *v19 = v31;
      v19[1] = v32;
      v19[2] = v33;
      v19[3] = v34;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_20E6AF228(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDF8);
  v38 = a2;
  v6 = sub_20E6EA754();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_20E6EA988();
    sub_20E6EA250();
    result = sub_20E6EA9A0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_20E6AF534(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t i;
  char v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDF0);
  v40 = a2;
  v6 = sub_20E6EA754();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 40 * v21;
      v33 = *(_QWORD *)v32;
      v34 = *(_QWORD *)(v32 + 8);
      v35 = *(_QWORD *)(v32 + 16);
      v41 = *(_OWORD *)(v32 + 24);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_20E6EA988();
      sub_20E6EA250();
      result = sub_20E6EA9A0();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 40 * v17;
      *(_QWORD *)v19 = v33;
      *(_QWORD *)(v19 + 8) = v34;
      *(_QWORD *)(v19 + 16) = v35;
      *(_OWORD *)(v19 + 24) = v41;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_20E6AF880(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDE8);
  v36 = a2;
  v6 = sub_20E6EA754();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    sub_20E6EA988();
    sub_20E6EA250();
    result = sub_20E6EA9A0();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void sub_20E6AFB94(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;

  v4 = v3;
  v7 = *v3;
  v9 = sub_20E699A00((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_20E6B0118();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_20E6AE910(v12, a3 & 1);
  v17 = sub_20E699A00((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_20E67BE44(0, (unint64_t *)&qword_254A2E950);
  sub_20E6EA928();
  __break(1u);
}

uint64_t sub_20E6AFCF4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_20E698CCC(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_20E6B02BC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_20E6AEBE0(v15, a4 & 1);
  v21 = sub_20E698CCC(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_20E6EA928();
  __break(1u);
  return result;
}

uint64_t sub_20E6AFE50(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v5 = v4;
  v10 = *v4;
  v12 = sub_20E698CCC(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_20E6B080C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_20E6B7558(a1, v18[7] + 40 * v12);
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    v23 = v18[7] + 40 * v12;
    v24 = *(_OWORD *)a1;
    v25 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v23 + 32) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    v26 = v18[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v18[2] = v28;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_20E6AF534(v15, a4 & 1);
  v20 = sub_20E698CCC(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return sub_20E6B7558(a1, v18[7] + 40 * v12);
    goto LABEL_11;
  }
LABEL_15:
  result = sub_20E6EA928();
  __break(1u);
  return result;
}

uint64_t sub_20E6AFFBC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = sub_20E698CCC(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_20E6B0A00();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_20E6AF880(v15, a4 & 1);
  v21 = sub_20E698CCC(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_20E6EA928();
  __break(1u);
  return result;
}

id sub_20E6B0118()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EE08);
  v2 = *v0;
  v3 = sub_20E6EA748();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_20E6B02BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2ED90);
  v2 = *v0;
  v3 = sub_20E6EA748();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_20E6B0470()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;

  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EE10);
  v27 = v0;
  v1 = *v0;
  v2 = sub_20E6EA748();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v27 = v3;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v24 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v12)
      goto LABEL_26;
    v25 = *(_QWORD *)(v5 + 8 * v24);
    ++v8;
    if (!v25)
    {
      v8 = v24 + 1;
      if (v24 + 1 >= v12)
        goto LABEL_26;
      v25 = *(_QWORD *)(v5 + 8 * v8);
      if (!v25)
        break;
    }
LABEL_25:
    v11 = (v25 - 1) & v25;
    v14 = __clz(__rbit64(v25)) + (v8 << 6);
LABEL_12:
    v15 = 16 * v14;
    v16 = 32 * v14;
    v17 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v16);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = *(_OWORD *)(*(_QWORD *)(v1 + 48) + v15);
    *(_OWORD *)(*(_QWORD *)(v3 + 48) + v15) = v22;
    v23 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v16);
    *v23 = v18;
    v23[1] = v19;
    v23[2] = v20;
    v23[3] = v21;
    sub_20E66A990(v22, *((unint64_t *)&v22 + 1));
    sub_20E66A990(v18, v19);
    result = (void *)sub_20E66A9D4(v20, v21);
  }
  v26 = v24 + 2;
  if (v26 >= v12)
    goto LABEL_26;
  v25 = *(_QWORD *)(v5 + 8 * v26);
  if (v25)
  {
    v8 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v25 = *(_QWORD *)(v5 + 8 * v8);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_20E6B065C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDF8);
  v2 = *v0;
  v3 = sub_20E6EA748();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_20E6B080C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDF0);
  v2 = *v0;
  v3 = sub_20E6EA748();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v26 = *(_OWORD *)(v21 + 24);
    *v25 = v19;
    v25[1] = v18;
    v27 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v27 = v22;
    *(_QWORD *)(v27 + 8) = v23;
    *(_QWORD *)(v27 + 16) = v24;
    *(_OWORD *)(v27 + 24) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_20E6B0A00()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDE8);
  v2 = *v0;
  v3 = sub_20E6EA748();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_20E6B0BB4(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;

  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDC0);
  result = sub_20E6EA748();
  v3 = (_QWORD *)result;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 64);
  v26 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v27 = (unint64_t)(v6 + 63) >> 6;
  v9 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 32 * i);
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = v15[3];
    v20 = v3[6];
    v21 = *(_OWORD *)(*(_QWORD *)(a1 + 48) + 16 * i);
    *(_QWORD *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_OWORD *)(v20 + 16 * i) = v21;
    v22 = (uint64_t *)(v3[7] + 32 * i);
    *v22 = v16;
    v22[1] = v17;
    v22[2] = v18;
    v22[3] = v19;
    v23 = v3[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v25;
    sub_20E66A990(v21, *((unint64_t *)&v21 + 1));
    sub_20E66A990(v16, v17);
    result = sub_20E66A9D4(v18, v19);
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v27)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v26 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v27)
        return (uint64_t)v3;
      v13 = *(_QWORD *)(v26 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v27)
          return (uint64_t)v3;
        v13 = *(_QWORD *)(v26 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v27)
    return (uint64_t)v3;
  v13 = *(_QWORD *)(v26 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v27)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v26 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_20E6B0DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_20E6D1C4C((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_20E6B0EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_20E6E9A28();
  v11 = result;
  if (result)
  {
    result = sub_20E6E9A4C();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_20E6E9A40();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_20E6D1C4C(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_20E6B0F54(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_20E6B0FA0()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_20E6B0FD4 + dword_20E6B11AC[v0 >> 62]))();
}

uint64_t sub_20E6B0FE4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

BOOL _s26AuthenticationServicesCore29ASCTAPLargeBlobExtensionInputV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  _BOOL8 result;
  char v17;
  char v18;
  char v19;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_BYTE *)(a1 + 48);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(unsigned __int8 *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_BYTE *)(a2 + 48);
  if (!v3)
  {
    if (v9)
      return 0;
    goto LABEL_8;
  }
  if (!v9)
    return 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v3 == v9 || (v15 = sub_20E6EA8EC(), result = 0, (v15 & 1) != 0))
  {
LABEL_8:
    if (v4 == 2)
    {
      if (v10 != 2)
        return 0;
    }
    else
    {
      result = 0;
      if (v10 == 2 || ((((v4 & 1) == 0) ^ v10) & 1) == 0)
        return result;
    }
    if (v5 >> 60 == 15)
    {
      if (v11 >> 60 == 15)
      {
LABEL_21:
        if ((v8 & 1) == 0)
        {
          if (v7 == v13)
            v19 = v14;
          else
            v19 = 1;
          return (v19 & 1) == 0;
        }
        return (v14 & 1) != 0;
      }
    }
    else if (v11 >> 60 != 15)
    {
      sub_20E66A9D4(v6, v5);
      sub_20E66A9D4(v12, v11);
      sub_20E6B0F54(v6, v5);
      v18 = v17;
      sub_20E66AA28(v12, v11);
      sub_20E66AA28(v6, v5);
      if ((v18 & 1) == 0)
        return 0;
      goto LABEL_21;
    }
    sub_20E66A9D4(v6, v5);
    sub_20E66A9D4(v12, v11);
    sub_20E66AA28(v6, v5);
    sub_20E66AA28(v12, v11);
    return 0;
  }
  return result;
}

BOOL sub_20E6B1364(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  char v12;
  char v13;
  char v14;

  sub_20E6B0F54(a1, a2);
  if ((v12 & 1) == 0)
    return 0;
  if (a4 >> 60 == 15)
  {
    if (a8 >> 60 == 15)
      return 1;
    goto LABEL_6;
  }
  if (a8 >> 60 == 15)
  {
LABEL_6:
    sub_20E66A9D4(a3, a4);
    sub_20E66A9D4(a7, a8);
    sub_20E66AA28(a3, a4);
    sub_20E66AA28(a7, a8);
    return 0;
  }
  sub_20E66A9D4(a3, a4);
  sub_20E66A9D4(a7, a8);
  sub_20E6B0F54(a3, a4);
  v14 = v13;
  sub_20E66AA28(a7, a8);
  sub_20E66AA28(a3, a4);
  return (v14 & 1) != 0;
}

BOOL _s26AuthenticationServicesCore23ASCTAPPRFExtensionInputV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v20;
  char v21;

  v3 = *a1;
  v2 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v6 = a1[4];
  v8 = *a2;
  v7 = a2[1];
  v10 = a2[2];
  v9 = a2[3];
  v11 = a2[4];
  if (v2 >> 60 != 15)
  {
    if (v7 >> 60 != 15)
    {
      sub_20E66A954(*a1, v2, v5, v4);
      sub_20E66A954(v8, v7, v10, v9);
      sub_20E6B0F54(v3, v2);
      if ((v18 & 1) != 0)
      {
        if (v4 >> 60 == 15)
        {
          if (v9 >> 60 == 15)
          {
            sub_20E66AAA8(v8, v7, v10, v9);
            sub_20E66AAA8(v3, v2, v5, v4);
            goto LABEL_3;
          }
        }
        else if (v9 >> 60 != 15)
        {
          sub_20E66A9D4(v5, v4);
          sub_20E66A9D4(v10, v9);
          sub_20E6B0F54(v5, v4);
          v21 = v20;
          sub_20E66AA28(v10, v9);
          sub_20E66AA28(v5, v4);
          sub_20E66AAA8(v8, v7, v10, v9);
          sub_20E66AAA8(v3, v2, v5, v4);
          if ((v21 & 1) == 0)
            return 0;
          goto LABEL_3;
        }
        sub_20E66A9D4(v5, v4);
        sub_20E66A9D4(v10, v9);
        sub_20E66AA28(v5, v4);
        sub_20E66AA28(v10, v9);
      }
      sub_20E66AAA8(v8, v7, v10, v9);
      v14 = v3;
      v15 = v2;
      v16 = v5;
      v17 = v4;
LABEL_18:
      sub_20E66AAA8(v14, v15, v16, v17);
      return 0;
    }
LABEL_8:
    sub_20E66A954(*a1, v2, v5, v4);
    sub_20E66A954(v8, v7, v10, v9);
    sub_20E66AAA8(v3, v2, v5, v4);
    v14 = v8;
    v15 = v7;
    v16 = v10;
    v17 = v9;
    goto LABEL_18;
  }
  if (v7 >> 60 != 15)
    goto LABEL_8;
LABEL_3:
  if (v6)
  {
    if (!v11)
      return 0;
    swift_bridgeObjectRetain();
    v12 = swift_bridgeObjectRetain();
    v13 = sub_20E69F280(v12, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v13 & 1) != 0;
  }
  return !v11;
}

BOOL _s26AuthenticationServicesCore20ASCTAPExtensionInputV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = *(_BYTE *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)a2;
  v14 = *(_QWORD *)(a2 + 8);
  v17 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 24);
  v19 = *(_QWORD *)(a2 + 32);
  v18 = *(_QWORD *)(a2 + 40);
  v20 = *(_BYTE *)(a2 + 48);
  v22 = *(_QWORD *)(a2 + 56);
  v21 = *(_QWORD *)(a2 + 64);
  v24 = *(_QWORD *)(a2 + 72);
  v23 = *(_QWORD *)(a2 + 80);
  v25 = *(_QWORD *)(a2 + 88);
  if (v3 != 1)
  {
    v79 = *(_QWORD *)a1;
    v80 = v3;
    v81 = v4;
    v82 = v5;
    v83 = v7;
    v84 = v6;
    v85 = v8;
    if (v14 != 1)
    {
      v72 = v15;
      v73 = v14;
      LOBYTE(v74) = v17;
      v75 = v16;
      v76 = v19;
      v77 = v18;
      v69 = v9;
      v70 = v22;
      v78 = v20 & 1;
      v66 = v23;
      v68 = v12;
      v63 = v11;
      v64 = v24;
      v26 = v4;
      v27 = v2;
      v61 = v25;
      v62 = v13;
      v59 = v21;
      v60 = v10;
      sub_20E677C30(v2, v3, v4, v5, v7);
      swift_bridgeObjectRetain();
      sub_20E66A9D4(v5, v7);
      v28 = _s26AuthenticationServicesCore29ASCTAPLargeBlobExtensionInputV2eeoiySbAC_ACtFZ_0((uint64_t)&v79, (uint64_t)&v72);
      v29 = v82;
      v30 = v83;
      swift_bridgeObjectRelease();
      sub_20E66AA28(v29, v30);
      sub_20E66AA3C(v27, v3, v26, v5, v7);
      v9 = v69;
      v22 = v70;
      v21 = v59;
      v10 = v60;
      v24 = v64;
      v23 = v66;
      v25 = v61;
      v13 = v62;
      v12 = v68;
      v11 = v63;
      if (!v28)
        return 0;
      goto LABEL_8;
    }
    v65 = v2;
    v67 = v4;
    swift_bridgeObjectRetain();
    sub_20E66A9D4(v5, v7);
    swift_bridgeObjectRetain();
    sub_20E66A9D4(v5, v7);
    swift_bridgeObjectRelease();
    sub_20E66AA28(v5, v7);
LABEL_6:
    sub_20E677C30(v15, v14, v17, v16, v19);
    sub_20E66AA3C(v65, v3, v67, v5, v7);
    sub_20E66AA3C(v15, v14, v17, v16, v19);
    return 0;
  }
  v65 = *(_QWORD *)a1;
  v67 = *(_QWORD *)(a1 + 16);
  if (v14 != 1)
    goto LABEL_6;
LABEL_8:
  if (v13 == 1)
  {
    v31 = v10;
    v32 = v9;
    v33 = v12;
    v34 = v11;
    v35 = 1;
    if (v25 == 1)
      return 1;
    goto LABEL_13;
  }
  v79 = v10;
  v80 = v9;
  v81 = v12;
  v82 = v11;
  v83 = v13;
  if (v25 == 1)
  {
    v71 = v22;
    v36 = v12;
    v37 = v24;
    v38 = v11;
    v39 = v23;
    v40 = v13;
    v41 = v9;
    v42 = v10;
    v43 = v21;
    sub_20E66A954(v10, v9, v12, v11);
    swift_bridgeObjectRetain();
    sub_20E66A954(v42, v41, v36, v38);
    swift_bridgeObjectRetain();
    v31 = v42;
    v44 = v42;
    v32 = v41;
    v45 = v41;
    v33 = v36;
    v46 = v36;
    v34 = v38;
    sub_20E66AAA8(v44, v45, v46, v38);
    v35 = v40;
    swift_bridgeObjectRelease();
    v22 = v71;
    v21 = v43;
    v24 = v37;
    v23 = v39;
    v25 = 1;
LABEL_13:
    v47 = v22;
    v48 = v24;
    v49 = v23;
    v50 = v25;
    v51 = v21;
    sub_20E677C6C(v22, v21, v24, v23, v25);
    sub_20E690848(v31, v32, v33, v34, v35, (void (*)(void))sub_20E66AAA8);
    sub_20E690848(v47, v51, v48, v49, v50, (void (*)(void))sub_20E66AAA8);
    return 0;
  }
  v72 = v22;
  v73 = v21;
  v74 = v24;
  v75 = v23;
  v76 = v25;
  v52 = v12;
  v53 = v11;
  v54 = v13;
  v55 = v9;
  v56 = v10;
  sub_20E677C6C(v10, v9, v12, v11, v13);
  sub_20E66A954(v56, v55, v52, v53);
  swift_bridgeObjectRetain();
  v57 = _s26AuthenticationServicesCore23ASCTAPPRFExtensionInputV2eeoiySbAC_ACtFZ_0(&v79, &v72);
  sub_20E66AAA8(v79, v80, v81, v82);
  swift_bridgeObjectRelease();
  sub_20E690848(v56, v55, v52, v53, v54, (void (*)(void))sub_20E66AAA8);
  return v57;
}

BOOL _s26AuthenticationServicesCore14ASCTAPAuthDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 20);
  v4 = *(_QWORD *)(a1 + 24);
  v40 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  v32 = *(_QWORD *)(a1 + 72);
  v34 = *(_QWORD *)(a1 + 80);
  v8 = *(unsigned __int8 *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 20);
  v11 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v35 = *(_QWORD *)(a2 + 40);
  v36 = *(_QWORD *)(a2 + 48);
  v37 = *(_QWORD *)(a2 + 56);
  v38 = *(_QWORD *)(a2 + 64);
  v39 = *(_QWORD *)(a1 + 40);
  v31 = *(_QWORD *)(a2 + 72);
  v33 = *(_QWORD *)(a2 + 80);
  sub_20E6B0F54(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v13 = v12;
  result = 0;
  if ((v13 & 1) != 0 && v2 == v8 && v3 == v9)
  {
    if (v40 >> 60 == 15)
    {
      v15 = v6;
      v16 = v7;
      v17 = v5;
      if (v10 >> 60 == 15)
      {
LABEL_6:
        if (v34 >> 60 == 15)
        {
          v18 = v33;
          if (v33 >> 60 == 15)
            return 1;
        }
        else
        {
          v18 = v33;
          if (v33 >> 60 != 15)
          {
            sub_20E66A9D4(v32, v34);
            sub_20E66A9D4(v31, v33);
            sub_20E6B0F54(v32, v34);
            v29 = v28;
            sub_20E66AA28(v31, v33);
            sub_20E66AA28(v32, v34);
            return (v29 & 1) != 0;
          }
        }
        sub_20E66A9D4(v32, v34);
        sub_20E66A9D4(v31, v18);
        sub_20E66AA28(v32, v34);
        sub_20E66AA28(v31, v18);
        return 0;
      }
    }
    else
    {
      if (v10 >> 60 != 15)
      {
        sub_20E6B75D8(v4, v40, v39, v5, v7, v6, (void (*)(void))sub_20E66A990);
        sub_20E6B75D8(v4, v40, v39, v5, v7, v6, (void (*)(void))sub_20E66A990);
        sub_20E6B75D8(v11, v10, v35, v36, v37, v38, (void (*)(void))sub_20E66A990);
        sub_20E6B0F54(v4, v40);
        if ((v25 & 1) != 0)
        {
          sub_20E6B0F54(v39, v5);
          if ((v26 & 1) != 0)
          {
            sub_20E6B0F54(v7, v6);
            v30 = v27;
            sub_20E6B75D8(v11, v10, v35, v36, v37, v38, (void (*)(void))sub_20E6673F4);
            sub_20E6673F4(v4, v40);
            sub_20E6673F4(v39, v5);
            sub_20E6673F4(v7, v6);
            sub_20E6B75D8(v4, v40, v39, v5, v7, v6, (void (*)(void))sub_20E6673F4);
            if ((v30 & 1) == 0)
              return 0;
            goto LABEL_6;
          }
        }
        sub_20E6B75D8(v11, v10, v35, v36, v37, v38, (void (*)(void))sub_20E6673F4);
        sub_20E6673F4(v4, v40);
        sub_20E6673F4(v39, v5);
        sub_20E6673F4(v7, v6);
        v19 = v4;
        v20 = v40;
        v21 = v39;
        v22 = v5;
        v23 = v7;
        v24 = v6;
LABEL_17:
        sub_20E6B75D8(v19, v20, v21, v22, v23, v24, (void (*)(void))sub_20E6673F4);
        return 0;
      }
      sub_20E66A990(v4, v40);
      v17 = v5;
      sub_20E66A990(v39, v5);
      v16 = v7;
      v15 = v6;
      sub_20E66A990(v7, v6);
      sub_20E66A990(v4, v40);
      sub_20E66A990(v39, v5);
      sub_20E66A990(v7, v6);
      sub_20E6673F4(v4, v40);
      sub_20E6673F4(v39, v5);
      sub_20E6673F4(v7, v6);
    }
    sub_20E6B75D8(v11, v10, v35, v36, v37, v38, (void (*)(void))sub_20E66A990);
    sub_20E6B75D8(v4, v40, v39, v17, v16, v15, (void (*)(void))sub_20E6673F4);
    v19 = v11;
    v20 = v10;
    v21 = v35;
    v22 = v36;
    v23 = v37;
    v24 = v38;
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_20E6B1F90(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  char v7;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_20E6EA8EC(), result = 0, (v5 & 1) != 0))
  {
    sub_20E6B0F54(a1[2], a1[3]);
    if ((v7 & 1) != 0)
    {
      if (a1[4] == a2[4] && a1[5] == a2[5])
        return 1;
      else
        return sub_20E6EA8EC();
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL _s26AuthenticationServicesCore30ASCTAPLargeBlobExtensionOutputV2eeoiySbAC_ACtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  _BOOL8 result;
  _BOOL4 v15;
  char v16;
  char v17;
  char v18;

  v2 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 2);
  v5 = a1[24];
  v6 = *((_QWORD *)a1 + 4);
  v7 = a1[40];
  v8 = *a2;
  v10 = *((_QWORD *)a2 + 1);
  v9 = *((_QWORD *)a2 + 2);
  v11 = a2[24];
  v12 = *((_QWORD *)a2 + 4);
  v13 = a2[40];
  if (v2 == 2)
  {
    if (v8 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v15 = (v2 & 1) == 0;
    if (v8 == 2 || ((v15 ^ v8) & 1) == 0)
      return result;
  }
  if (v3 >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      sub_20E66A9D4(v4, v3);
      sub_20E66A9D4(v10, v9);
      sub_20E6B0F54(v4, v3);
      v18 = v16;
      sub_20E66AA28(v10, v9);
      sub_20E66AA28(v4, v3);
      if ((v18 & 1) == 0)
        return 0;
      goto LABEL_14;
    }
LABEL_10:
    sub_20E66A9D4(v4, v3);
    sub_20E66A9D4(v10, v9);
    sub_20E66AA28(v4, v3);
    sub_20E66AA28(v10, v9);
    return 0;
  }
  if (v9 >> 60 != 15)
    goto LABEL_10;
LABEL_14:
  if (v5 == 2)
  {
    if (v11 != 2)
      return 0;
    goto LABEL_19;
  }
  result = 0;
  if (v11 != 2 && ((((v5 & 1) == 0) ^ v11) & 1) != 0)
  {
LABEL_19:
    if ((v7 & 1) == 0)
    {
      if (v6 == v12)
        v17 = v13;
      else
        v17 = 1;
      return (v17 & 1) == 0;
    }
    return (v13 & 1) != 0;
  }
  return result;
}

BOOL _s26AuthenticationServicesCore24ASCTAPPRFExtensionOutputV7ResultsV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  v3 = a1[2];
  v2 = a1[3];
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  sub_20E6B0F54(*a1, a1[1]);
  if ((v6 & 1) == 0)
    return 0;
  if (v2 >> 60 == 15)
  {
    if (v4 >> 60 == 15)
      return 1;
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    sub_20E66A9D4(v3, v2);
    sub_20E66A9D4(v5, v4);
    sub_20E66AA28(v3, v2);
    sub_20E66AA28(v5, v4);
    return 0;
  }
  sub_20E66A9D4(v3, v2);
  sub_20E66A9D4(v5, v4);
  sub_20E6B0F54(v3, v2);
  v8 = v7;
  sub_20E66AA28(v5, v4);
  sub_20E66AA28(v3, v2);
  return (v8 & 1) != 0;
}

uint64_t _s26AuthenticationServicesCore24ASCTAPPRFExtensionOutputV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  _BOOL4 v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  char v20;

  v2 = *(unsigned __int8 *)a1;
  v4 = a1[1];
  v3 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v7 = *(unsigned __int8 *)a2;
  v9 = a2[1];
  v8 = a2[2];
  v11 = a2[3];
  v10 = a2[4];
  if (v2 == 2)
  {
    if (v7 != 2)
      return 0;
LABEL_6:
    if (v3 >> 60 == 15)
    {
      if (v8 >> 60 == 15)
        return 1;
      goto LABEL_11;
    }
    if (v8 >> 60 == 15)
    {
      sub_20E66A990(v4, v3);
      sub_20E66A9D4(v6, v5);
      sub_20E66A990(v4, v3);
      sub_20E66A9D4(v6, v5);
      sub_20E6673F4(v4, v3);
      sub_20E66AA28(v6, v5);
LABEL_11:
      sub_20E66A954(v9, v8, v11, v10);
      sub_20E66AAA8(v4, v3, v6, v5);
      v14 = v9;
      v15 = v8;
      v16 = v11;
      v17 = v10;
LABEL_21:
      sub_20E66AAA8(v14, v15, v16, v17);
      return 0;
    }
    sub_20E66A954(v4, v3, v6, v5);
    sub_20E66A990(v4, v3);
    sub_20E66A9D4(v6, v5);
    sub_20E6B0F54(v4, v3);
    if ((v18 & 1) != 0)
    {
      if (v5 >> 60 == 15)
      {
        if (v10 >> 60 == 15)
          goto LABEL_19;
        goto LABEL_17;
      }
      if (v10 >> 60 == 15)
      {
LABEL_17:
        sub_20E66A9D4(v6, v5);
        sub_20E66A9D4(v11, v10);
        sub_20E66AA28(v6, v5);
        sub_20E66AA28(v11, v10);
        goto LABEL_20;
      }
      sub_20E66A9D4(v6, v5);
      sub_20E66A9D4(v11, v10);
      sub_20E6B0F54(v6, v5);
      v20 = v19;
      sub_20E66AA28(v11, v10);
      sub_20E66AA28(v6, v5);
      if ((v20 & 1) != 0)
      {
LABEL_19:
        sub_20E6673F4(v4, v3);
        sub_20E66AA28(v6, v5);
        sub_20E66AAA8(v4, v3, v6, v5);
        return 1;
      }
    }
LABEL_20:
    sub_20E6673F4(v4, v3);
    sub_20E66AA28(v6, v5);
    v14 = v4;
    v15 = v3;
    v16 = v6;
    v17 = v5;
    goto LABEL_21;
  }
  result = 0;
  v13 = (v2 & 1) == 0;
  if (v7 != 2 && ((v13 ^ v7) & 1) != 0)
    goto LABEL_6;
  return result;
}

uint64_t _s26AuthenticationServicesCore21ASCTAPExtensionOutputV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  char v58;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  v13 = *(unsigned __int8 *)(a1 + 88);
  v14 = *(_QWORD *)a2;
  v15 = *(_QWORD *)(a2 + 8);
  v17 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(a2 + 32);
  v19 = *(_BYTE *)(a2 + 40);
  v20 = *(_QWORD *)(a2 + 48);
  v21 = *(_QWORD *)(a2 + 56);
  v22 = *(_QWORD *)(a2 + 64);
  v23 = *(_QWORD *)(a2 + 72);
  v24 = *(_QWORD *)(a2 + 80);
  v25 = *(unsigned __int8 *)(a2 + 88);
  if (v2 != 3)
  {
    v76 = v2;
    v77 = v3;
    v78 = v5;
    v79 = v4;
    v80 = v6;
    v81 = v7;
    if (v14 != 3)
    {
      LOBYTE(v70) = v14;
      v71 = v15;
      v72 = v17;
      LOBYTE(v73) = v16;
      v74 = v18;
      v75 = v19 & 1;
      v67 = v11;
      v68 = v20;
      v63 = v22;
      v64 = v23;
      v65 = v12;
      v66 = v10;
      v61 = v24;
      v62 = v21;
      v60 = v8;
      v26 = v9;
      v27 = v13;
      v28 = v25;
      sub_20E677614(v2, v3, v5);
      sub_20E66A9D4(v3, v5);
      v29 = _s26AuthenticationServicesCore30ASCTAPLargeBlobExtensionOutputV2eeoiySbAC_ACtFZ_0((unsigned __int8 *)&v76, (unsigned __int8 *)&v70);
      sub_20E66AA28(v77, v78);
      sub_20E677840(v2, v3, v5);
      v11 = v67;
      v20 = v68;
      v21 = v62;
      v22 = v63;
      v23 = v64;
      v12 = v65;
      v8 = v60;
      v24 = v61;
      v25 = v28;
      v13 = v27;
      v9 = v26;
      v10 = v66;
      if (!v29)
        return 0;
      goto LABEL_8;
    }
    sub_20E66A9D4(v3, v5);
    sub_20E66A9D4(v3, v5);
    sub_20E66AA28(v3, v5);
LABEL_6:
    sub_20E677614(v14, v15, v17);
    sub_20E677840(v2, v3, v5);
    sub_20E677840(v14, v15, v17);
    return 0;
  }
  if (*(_QWORD *)a2 != 3)
    goto LABEL_6;
LABEL_8:
  if (v9 == 3)
  {
    v30 = v9;
    v31 = v8;
    v32 = v11;
    v33 = v10;
    v34 = v12;
    if (v20 == 3)
    {
LABEL_15:
      if (v13 == 2)
      {
        if (v25 != 2)
          return 0;
      }
      else if (v25 == 2 || ((((v13 & 1) == 0) ^ v25) & 1) == 0)
      {
        return 0;
      }
      return 1;
    }
    goto LABEL_13;
  }
  v76 = v9;
  v77 = v8;
  v78 = v11;
  v79 = v10;
  v80 = v12;
  if (v20 == 3)
  {
    v30 = v9;
    v69 = v20;
    v35 = v11;
    v36 = v22;
    v37 = v10;
    v38 = v23;
    v39 = v21;
    v40 = v12;
    v41 = v8;
    v42 = v24;
    sub_20E66A954(v8, v11, v10, v12);
    sub_20E66A954(v41, v35, v37, v40);
    v31 = v41;
    v43 = v41;
    v32 = v35;
    v44 = v35;
    v33 = v37;
    v45 = v37;
    v34 = v40;
    sub_20E66AAA8(v43, v44, v45, v40);
    v20 = v69;
    v21 = v39;
    v22 = v36;
    v23 = v38;
    v24 = v42;
LABEL_13:
    v46 = v20;
    v47 = v22;
    v48 = v23;
    v49 = v21;
    v50 = v24;
    sub_20E677630(v20, v21, v22, v23, v24);
    sub_20E67785C(v30, v31, v32, v33, v34);
    sub_20E67785C(v46, v49, v47, v48, v50);
    return 0;
  }
  LOBYTE(v70) = v20;
  v71 = v21;
  v72 = v22;
  v73 = v23;
  v74 = v24;
  v51 = v11;
  v52 = v10;
  v53 = v12;
  v54 = v8;
  v55 = v9;
  v56 = v13;
  v57 = v25;
  sub_20E677630(v9, v8, v11, v10, v12);
  sub_20E66A954(v54, v51, v52, v53);
  v58 = _s26AuthenticationServicesCore24ASCTAPPRFExtensionOutputV2eeoiySbAC_ACtFZ_0(&v76, &v70);
  sub_20E66AAA8(v77, v78, v79, v80);
  sub_20E67785C(v55, v54, v51, v52, v53);
  v25 = v57;
  v13 = v56;
  if ((v58 & 1) != 0)
    goto LABEL_15;
  return 0;
}

uint64_t sub_20E6B2904(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_20E6EA8EC(), result = 0, (v5 & 1) != 0))
  {
    sub_20E6B0F54(a1[2], a1[3]);
    if ((v7 & 1) != 0)
    {
      v8 = (_QWORD *)a1[4];
      v9 = (_QWORD *)a2[4];
      if (v8)
      {
        if (v9 && (sub_20E6D1A0C(v8, v9) & 1) != 0)
          return 1;
      }
      else if (!v9)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_20E6B2988(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_20E6B2A48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_20E6E9A58();
  swift_allocObject();
  result = sub_20E6E9A1C();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_20E6E9C20();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_20E6B2AC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_20E6E9A58();
  swift_allocObject();
  result = sub_20E6E9A1C();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

void sub_20E6B2B40(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_20E6B2BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  unint64_t v23;
  int v24;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, unint64_t))((char *)&loc_20E6B2C38 + dword_20E6B2E1C[v24]))(a1, a2, a3, a4, a5, a6, a7, a8, a23, v23 >> 40, HIDWORD(v23), v23 >> 24, v23 >> 16);
}

uint64_t sub_20E6B2E2C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_20E6A7E6C(a1, a2, *(uint64_t **)(v2 + 16));
}

unint64_t sub_20E6B2E44()
{
  unint64_t result;

  result = qword_254A2EB00;
  if (!qword_254A2EB00)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1C34, &type metadata for ASCTAPAuthData.DecodingError);
    atomic_store(result, (unint64_t *)&qword_254A2EB00);
  }
  return result;
}

unint64_t sub_20E6B2E88()
{
  unint64_t result;

  result = qword_254A2EB10;
  if (!qword_254A2EB10)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1BE4, &type metadata for ASCTAPCredentialData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EB10);
  }
  return result;
}

unint64_t sub_20E6B2ECC()
{
  unint64_t result;

  result = qword_254A2EB38;
  if (!qword_254A2EB38)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1B94, &type metadata for ASCTAPExtensionInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EB38);
  }
  return result;
}

unint64_t sub_20E6B2F10()
{
  unint64_t result;

  result = qword_254A2EB40;
  if (!qword_254A2EB40)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPLargeBlobExtensionInput, &type metadata for ASCTAPLargeBlobExtensionInput);
    atomic_store(result, (unint64_t *)&qword_254A2EB40);
  }
  return result;
}

unint64_t sub_20E6B2F54()
{
  unint64_t result;

  result = qword_254A2EB48;
  if (!qword_254A2EB48)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPPRFExtensionInput, &type metadata for ASCTAPPRFExtensionInput);
    atomic_store(result, (unint64_t *)&qword_254A2EB48);
  }
  return result;
}

unint64_t sub_20E6B2F98()
{
  unint64_t result;

  result = qword_254A2EB58;
  if (!qword_254A2EB58)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPLargeBlobExtensionInput, &type metadata for ASCTAPLargeBlobExtensionInput);
    atomic_store(result, (unint64_t *)&qword_254A2EB58);
  }
  return result;
}

unint64_t sub_20E6B2FDC()
{
  unint64_t result;

  result = qword_254A2EB60;
  if (!qword_254A2EB60)
  {
    result = MEMORY[0x212BC39A8]("\r-)>", &type metadata for ASCTAPPRFExtensionInput);
    atomic_store(result, (unint64_t *)&qword_254A2EB60);
  }
  return result;
}

unint64_t sub_20E6B3020()
{
  unint64_t result;

  result = qword_254A2EB70;
  if (!qword_254A2EB70)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1B44, &type metadata for ASCTAPLargeBlobExtensionInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EB70);
  }
  return result;
}

unint64_t sub_20E6B3064()
{
  unint64_t result;

  result = qword_254A2EBC0;
  if (!qword_254A2EBC0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1AF4, &type metadata for ASCTAPPRFExtensionInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EBC0);
  }
  return result;
}

unint64_t sub_20E6B30A8()
{
  unint64_t result;

  result = qword_254A2EBC8;
  if (!qword_254A2EBC8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1ACC, &type metadata for ASCTAPPRFExtensionInput.PRFValues);
    atomic_store(result, (unint64_t *)&qword_254A2EBC8);
  }
  return result;
}

unint64_t sub_20E6B30EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254A2EBE0;
  if (!qword_254A2EBE0)
  {
    v1 = sub_20E67BE44(255, (unint64_t *)&qword_254A2E950);
    result = MEMORY[0x212BC39A8](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_254A2EBE0);
  }
  return result;
}

uint64_t sub_20E6B3144()
{
  return swift_release();
}

unint64_t sub_20E6B314C()
{
  unint64_t result;

  result = qword_254A2EBF0;
  if (!qword_254A2EBF0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1AA4, &type metadata for ASCTAPPRFExtensionInput.PRFValues);
    atomic_store(result, (unint64_t *)&qword_254A2EBF0);
  }
  return result;
}

unint64_t sub_20E6B3190()
{
  unint64_t result;

  result = qword_254A2EC08;
  if (!qword_254A2EC08)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1A54, &type metadata for ASCTAPPRFExtensionOutput.Results.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EC08);
  }
  return result;
}

unint64_t sub_20E6B31D4()
{
  unint64_t result;

  result = qword_254A2EC20;
  if (!qword_254A2EC20)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1A04, &type metadata for ASCTAPPRFExtensionOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EC20);
  }
  return result;
}

unint64_t sub_20E6B3218()
{
  unint64_t result;

  result = qword_254A2EC28;
  if (!qword_254A2EC28)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPPRFExtensionOutput.Results, &type metadata for ASCTAPPRFExtensionOutput.Results);
    atomic_store(result, (unint64_t *)&qword_254A2EC28);
  }
  return result;
}

unint64_t sub_20E6B325C()
{
  unint64_t result;

  result = qword_254A2EC38;
  if (!qword_254A2EC38)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPPRFExtensionOutput.Results, &type metadata for ASCTAPPRFExtensionOutput.Results);
    atomic_store(result, (unint64_t *)&qword_254A2EC38);
  }
  return result;
}

unint64_t sub_20E6B32A0()
{
  unint64_t result;

  result = qword_254A2EC48;
  if (!qword_254A2EC48)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F19B4, &type metadata for ASCTAPExtensionOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EC48);
  }
  return result;
}

unint64_t sub_20E6B32E4()
{
  unint64_t result;

  result = qword_254A2EC50;
  if (!qword_254A2EC50)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPLargeBlobExtensionOutput, &type metadata for ASCTAPLargeBlobExtensionOutput);
    atomic_store(result, (unint64_t *)&qword_254A2EC50);
  }
  return result;
}

unint64_t sub_20E6B3328()
{
  unint64_t result;

  result = qword_254A2EC58;
  if (!qword_254A2EC58)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPPRFExtensionOutput, &type metadata for ASCTAPPRFExtensionOutput);
    atomic_store(result, (unint64_t *)&qword_254A2EC58);
  }
  return result;
}

unint64_t sub_20E6B336C()
{
  unint64_t result;

  result = qword_254A2EC68;
  if (!qword_254A2EC68)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPLargeBlobExtensionOutput, &type metadata for ASCTAPLargeBlobExtensionOutput);
    atomic_store(result, (unint64_t *)&qword_254A2EC68);
  }
  return result;
}

unint64_t sub_20E6B33B0()
{
  unint64_t result;

  result = qword_254A2EC70;
  if (!qword_254A2EC70)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPPRFExtensionOutput, &type metadata for ASCTAPPRFExtensionOutput);
    atomic_store(result, (unint64_t *)&qword_254A2EC70);
  }
  return result;
}

unint64_t sub_20E6B33F4()
{
  unint64_t result;

  result = qword_254A2EC80;
  if (!qword_254A2EC80)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1964, &type metadata for ASCTAPLargeBlobExtensionOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EC80);
  }
  return result;
}

unint64_t sub_20E6B343C()
{
  unint64_t result;

  result = qword_254A2EC90;
  if (!qword_254A2EC90)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPAuthData.Flags, &type metadata for ASCTAPAuthData.Flags);
    atomic_store(result, (unint64_t *)&qword_254A2EC90);
  }
  return result;
}

unint64_t sub_20E6B3484()
{
  unint64_t result;

  result = qword_254A2EC98;
  if (!qword_254A2EC98)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPAuthData.Flags, &type metadata for ASCTAPAuthData.Flags);
    atomic_store(result, (unint64_t *)&qword_254A2EC98);
  }
  return result;
}

unint64_t sub_20E6B34CC()
{
  unint64_t result;

  result = qword_254A2ECA0;
  if (!qword_254A2ECA0)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPAuthData.Flags, &type metadata for ASCTAPAuthData.Flags);
    atomic_store(result, (unint64_t *)&qword_254A2ECA0);
  }
  return result;
}

unint64_t sub_20E6B3514()
{
  unint64_t result;

  result = qword_254A2ECA8;
  if (!qword_254A2ECA8)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPAuthData.Flags, &type metadata for ASCTAPAuthData.Flags);
    atomic_store(result, (unint64_t *)&qword_254A2ECA8);
  }
  return result;
}

uint64_t destroy for ASCTAPAuthData(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;

  result = sub_20E6673F4(*a1, a1[1]);
  v3 = a1[4];
  if (v3 >> 60 != 15)
  {
    sub_20E6673F4(a1[3], v3);
    sub_20E6673F4(a1[5], a1[6]);
    result = sub_20E6673F4(a1[7], a1[8]);
  }
  v4 = a1[10];
  if (v4 >> 60 != 15)
    return sub_20E6673F4(a1[9], v4);
  return result;
}

uint64_t initializeWithCopy for ASCTAPAuthData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_20E66A990(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v6 = *(_QWORD *)(a2 + 32);
  if (v6 >> 60 == 15)
  {
    v7 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 24);
    sub_20E66A990(v8, *(_QWORD *)(a2 + 32));
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v6;
    v9 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 48);
    sub_20E66A990(v9, v10);
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    v11 = *(_QWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a2 + 64);
    sub_20E66A990(v11, v12);
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v12;
  }
  v13 = (uint64_t *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v13;
  }
  else
  {
    v15 = *v13;
    sub_20E66A990(*v13, v14);
    *(_QWORD *)(a1 + 72) = v15;
    *(_QWORD *)(a1 + 80) = v14;
  }
  return a1;
}

uint64_t assignWithCopy for ASCTAPAuthData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_20E66A990(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_20E6673F4(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v8 = (__int128 *)(a1 + 24);
  v9 = (__int128 *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 == 15)
  {
    if (v10 >> 60 == 15)
    {
      v11 = *v9;
      v12 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = v12;
      *v8 = v11;
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 24);
      sub_20E66A990(v15, *(_QWORD *)(a2 + 32));
      *(_QWORD *)(a1 + 24) = v15;
      *(_QWORD *)(a1 + 32) = v10;
      v16 = *(_QWORD *)(a2 + 40);
      v17 = *(_QWORD *)(a2 + 48);
      sub_20E66A990(v16, v17);
      *(_QWORD *)(a1 + 40) = v16;
      *(_QWORD *)(a1 + 48) = v17;
      v18 = *(_QWORD *)(a2 + 56);
      v19 = *(_QWORD *)(a2 + 64);
      sub_20E66A990(v18, v19);
      *(_QWORD *)(a1 + 56) = v18;
      *(_QWORD *)(a1 + 64) = v19;
    }
  }
  else if (v10 >> 60 == 15)
  {
    sub_20E6B388C(a1 + 24);
    v14 = *(_OWORD *)(a2 + 40);
    v13 = *(_OWORD *)(a2 + 56);
    *v8 = *v9;
    *(_OWORD *)(a1 + 40) = v14;
    *(_OWORD *)(a1 + 56) = v13;
  }
  else
  {
    v20 = *(_QWORD *)(a2 + 24);
    sub_20E66A990(v20, *(_QWORD *)(a2 + 32));
    v21 = *(_QWORD *)(a1 + 24);
    v22 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v20;
    *(_QWORD *)(a1 + 32) = v10;
    sub_20E6673F4(v21, v22);
    v23 = *(_QWORD *)(a2 + 40);
    v24 = *(_QWORD *)(a2 + 48);
    sub_20E66A990(v23, v24);
    v25 = *(_QWORD *)(a1 + 40);
    v26 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(a1 + 40) = v23;
    *(_QWORD *)(a1 + 48) = v24;
    sub_20E6673F4(v25, v26);
    v27 = *(_QWORD *)(a2 + 56);
    v28 = *(_QWORD *)(a2 + 64);
    sub_20E66A990(v27, v28);
    v29 = *(_QWORD *)(a1 + 56);
    v30 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v27;
    *(_QWORD *)(a1 + 64) = v28;
    sub_20E6673F4(v29, v30);
  }
  v31 = (uint64_t *)(a2 + 72);
  v32 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80) >> 60 != 15)
  {
    if (v32 >> 60 != 15)
    {
      v34 = *v31;
      sub_20E66A990(*v31, v32);
      v35 = *(_QWORD *)(a1 + 72);
      v36 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 72) = v34;
      *(_QWORD *)(a1 + 80) = v32;
      sub_20E6673F4(v35, v36);
      return a1;
    }
    sub_20E66B4E0(a1 + 72);
    goto LABEL_13;
  }
  if (v32 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v31;
    return a1;
  }
  v33 = *v31;
  sub_20E66A990(*v31, v32);
  *(_QWORD *)(a1 + 72) = v33;
  *(_QWORD *)(a1 + 80) = v32;
  return a1;
}

uint64_t sub_20E6B388C(uint64_t a1)
{
  destroy for ASCTAPCredentialData(a1);
  return a1;
}

uint64_t assignWithTake for ASCTAPAuthData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_20E6673F4(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 32);
  if (v7 >> 60 == 15)
  {
    sub_20E6B388C(a1 + 24);
LABEL_4:
    v8 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v8;
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  sub_20E6673F4(v9, v6);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_20E6673F4(v10, v11);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_20E6673F4(v12, v13);
LABEL_6:
  v14 = (_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 80);
  if (v15 >> 60 != 15)
  {
    v16 = *(_QWORD *)(a2 + 80);
    if (v16 >> 60 != 15)
    {
      v17 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = *v14;
      *(_QWORD *)(a1 + 80) = v16;
      sub_20E6673F4(v17, v15);
      return a1;
    }
    sub_20E66B4E0(a1 + 72);
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPAuthData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 88))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ASCTAPAuthData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPAuthData()
{
  return &type metadata for ASCTAPAuthData;
}

ValueMetadata *type metadata accessor for ASCTAPAuthData.Flags()
{
  return &type metadata for ASCTAPAuthData.Flags;
}

uint64_t destroy for ASCTAPCredentialData(uint64_t a1)
{
  sub_20E6673F4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_20E6673F4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_20E6673F4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t *initializeWithCopy for ASCTAPCredentialData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  sub_20E66A990(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_20E66A990(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  v9 = a2[4];
  v8 = a2[5];
  sub_20E66A990(v9, v8);
  a1[4] = v9;
  a1[5] = v8;
  return a1;
}

uint64_t *assignWithCopy for ASCTAPCredentialData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  sub_20E66A990(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_20E6673F4(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_20E66A990(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_20E6673F4(v10, v11);
  v13 = a2[4];
  v12 = a2[5];
  sub_20E66A990(v13, v12);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v13;
  a1[5] = v12;
  sub_20E6673F4(v14, v15);
  return a1;
}

uint64_t *assignWithTake for ASCTAPCredentialData(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_20E6673F4(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_20E6673F4(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_20E6673F4(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPCredentialData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ASCTAPCredentialData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPCredentialData()
{
  return &type metadata for ASCTAPCredentialData;
}

uint64_t destroy for ASCTAPExtensionInput(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  result = a1[1];
  if (result != 1)
  {
    result = swift_bridgeObjectRelease();
    v3 = a1[4];
    if (v3 >> 60 != 15)
      result = sub_20E6673F4(a1[3], v3);
  }
  if (a1[11] != 1)
  {
    v4 = a1[8];
    if (v4 >> 60 != 15)
    {
      sub_20E6673F4(a1[7], v4);
      v5 = a1[10];
      if (v5 >> 60 != 15)
        sub_20E6673F4(a1[9], v5);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for ASCTAPExtensionInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _OWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v6 = (_OWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain();
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *v6;
    }
    else
    {
      v8 = *(_QWORD *)v6;
      sub_20E66A990(v8, v7);
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = v7;
    }
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v9 = (_OWORD *)(a1 + 56);
  v10 = (_OWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 88);
  if (v11 == 1)
  {
    v12 = *(_OWORD *)(a2 + 72);
    *v9 = *v10;
    *(_OWORD *)(a1 + 72) = v12;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 64);
    if (v13 >> 60 == 15)
    {
      v14 = *(_OWORD *)(a2 + 72);
      *v9 = *v10;
      *(_OWORD *)(a1 + 72) = v14;
    }
    else
    {
      v15 = *(_QWORD *)(a2 + 56);
      sub_20E66A990(v15, *(_QWORD *)(a2 + 64));
      *(_QWORD *)(a1 + 56) = v15;
      *(_QWORD *)(a1 + 64) = v13;
      v16 = (uint64_t *)(a2 + 72);
      v17 = *(_QWORD *)(a2 + 80);
      if (v17 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 72) = *(_OWORD *)v16;
      }
      else
      {
        v18 = *v16;
        sub_20E66A990(*v16, v17);
        *(_QWORD *)(a1 + 72) = v18;
        *(_QWORD *)(a1 + 80) = v17;
      }
    }
    *(_QWORD *)(a1 + 88) = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ASCTAPExtensionInput(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  _OWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8) != 1)
  {
    if (v4 == 1)
    {
      sub_20E6A22C8(a1);
      v9 = a2[1];
      v8 = a2[2];
      v10 = *a2;
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      *(_OWORD *)(a1 + 16) = v9;
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v10;
      goto LABEL_18;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v13 = (uint64_t *)a2 + 3;
    v12 = *((_QWORD *)a2 + 4);
    if (*(_QWORD *)(a1 + 32) >> 60 == 15)
    {
      if (v12 >> 60 != 15)
      {
        v14 = *v13;
LABEL_12:
        sub_20E66A990(v14, v12);
        *(_QWORD *)(a1 + 24) = v14;
        *(_QWORD *)(a1 + 32) = v12;
        goto LABEL_17;
      }
    }
    else
    {
      if (v12 >> 60 != 15)
      {
        v15 = *v13;
        sub_20E66A990(*v13, *((_QWORD *)a2 + 4));
        v16 = *(_QWORD *)(a1 + 24);
        v17 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 24) = v15;
        *(_QWORD *)(a1 + 32) = v12;
        sub_20E6673F4(v16, v17);
        goto LABEL_17;
      }
      sub_20E66B4E0(a1 + 24);
    }
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v13;
    goto LABEL_17;
  }
  if (v4 == 1)
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[2];
    *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)a1 = v5;
    goto LABEL_18;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v11 = (uint64_t *)a2 + 3;
  v12 = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  if (v12 >> 60 != 15)
  {
    v14 = *v11;
    goto LABEL_12;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v11;
LABEL_17:
  v18 = *((_QWORD *)a2 + 5);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 40) = v18;
LABEL_18:
  v19 = (_OWORD *)(a1 + 56);
  v20 = (__int128 *)((char *)a2 + 56);
  v21 = *((_QWORD *)a2 + 11);
  if (*(_QWORD *)(a1 + 88) != 1)
  {
    if (v21 == 1)
    {
      sub_20E6A2330((uint64_t *)(a1 + 56));
      v24 = *((_QWORD *)a2 + 11);
      v25 = *(__int128 *)((char *)a2 + 72);
      *v19 = *v20;
      *(_OWORD *)(a1 + 72) = v25;
      *(_QWORD *)(a1 + 88) = v24;
      return a1;
    }
    v28 = *((_QWORD *)a2 + 8);
    if (*(_QWORD *)(a1 + 64) >> 60 == 15)
    {
      if (v28 >> 60 == 15)
      {
        v29 = *(__int128 *)((char *)a2 + 72);
        *v19 = *v20;
        *(_OWORD *)(a1 + 72) = v29;
LABEL_45:
        *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
      v34 = *((_QWORD *)a2 + 7);
      sub_20E66A990(v34, *((_QWORD *)a2 + 8));
      *(_QWORD *)(a1 + 56) = v34;
      *(_QWORD *)(a1 + 64) = v28;
      v35 = (__int128 *)((char *)a2 + 72);
      v36 = *((_QWORD *)a2 + 10);
      if (v36 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 72) = *v35;
        goto LABEL_45;
      }
      v42 = *(_QWORD *)v35;
LABEL_40:
      sub_20E66A990(v42, v36);
      *(_QWORD *)(a1 + 72) = v42;
      *(_QWORD *)(a1 + 80) = v36;
      goto LABEL_45;
    }
    if (v28 >> 60 == 15)
    {
      sub_20E6A22FC(a1 + 56);
      v33 = *(__int128 *)((char *)a2 + 72);
      *v19 = *v20;
      *(_OWORD *)(a1 + 72) = v33;
      goto LABEL_45;
    }
    v38 = *((_QWORD *)a2 + 7);
    sub_20E66A990(v38, *((_QWORD *)a2 + 8));
    v39 = *(_QWORD *)(a1 + 56);
    v40 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 56) = v38;
    *(_QWORD *)(a1 + 64) = v28;
    sub_20E6673F4(v39, v40);
    v41 = (uint64_t *)a2 + 9;
    v36 = *((_QWORD *)a2 + 10);
    if (*(_QWORD *)(a1 + 80) >> 60 == 15)
    {
      if (v36 >> 60 != 15)
      {
        v42 = *v41;
        goto LABEL_40;
      }
    }
    else
    {
      if (v36 >> 60 != 15)
      {
        v43 = *v41;
        sub_20E66A990(*v41, *((_QWORD *)a2 + 10));
        v44 = *(_QWORD *)(a1 + 72);
        v45 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 72) = v43;
        *(_QWORD *)(a1 + 80) = v36;
        sub_20E6673F4(v44, v45);
        goto LABEL_45;
      }
      sub_20E66B4E0(a1 + 72);
    }
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v41;
    goto LABEL_45;
  }
  if (v21 == 1)
  {
    v22 = *v20;
    v23 = *(__int128 *)((char *)a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *v19 = v22;
    *(_OWORD *)(a1 + 72) = v23;
  }
  else
  {
    v26 = *((_QWORD *)a2 + 8);
    if (v26 >> 60 == 15)
    {
      v27 = *(__int128 *)((char *)a2 + 72);
      *v19 = *v20;
      *(_OWORD *)(a1 + 72) = v27;
    }
    else
    {
      v30 = *((_QWORD *)a2 + 7);
      sub_20E66A990(v30, *((_QWORD *)a2 + 8));
      *(_QWORD *)(a1 + 56) = v30;
      *(_QWORD *)(a1 + 64) = v26;
      v31 = (uint64_t *)a2 + 9;
      v32 = *((_QWORD *)a2 + 10);
      if (v32 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 72) = *(_OWORD *)v31;
      }
      else
      {
        v37 = *v31;
        sub_20E66A990(*v31, *((_QWORD *)a2 + 10));
        *(_QWORD *)(a1 + 72) = v37;
        *(_QWORD *)(a1 + 80) = v32;
      }
    }
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    swift_bridgeObjectRetain();
  }
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for ASCTAPExtensionInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)(a1 + 8) == 1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    sub_20E6A22C8(a1);
LABEL_4:
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_11;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 32);
    if (v8 >> 60 != 15)
    {
      v9 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = *v6;
      *(_QWORD *)(a1 + 32) = v8;
      sub_20E6673F4(v9, v7);
      goto LABEL_10;
    }
    sub_20E66B4E0(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v6;
LABEL_10:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_11:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = (_OWORD *)(a1 + 56);
  v11 = (_OWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 88) != 1)
  {
    v12 = *(_QWORD *)(a2 + 88);
    if (v12 == 1)
    {
      sub_20E6A2330((uint64_t *)(a1 + 56));
      goto LABEL_14;
    }
    v14 = *(_QWORD *)(a1 + 64);
    if (v14 >> 60 != 15)
    {
      v15 = *(_QWORD *)(a2 + 64);
      if (v15 >> 60 != 15)
      {
        v17 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
        *(_QWORD *)(a1 + 64) = v15;
        sub_20E6673F4(v17, v14);
        v18 = (_QWORD *)(a2 + 72);
        v19 = *(_QWORD *)(a1 + 80);
        if (v19 >> 60 != 15)
        {
          v20 = *(_QWORD *)(a2 + 80);
          if (v20 >> 60 != 15)
          {
            v21 = *(_QWORD *)(a1 + 72);
            *(_QWORD *)(a1 + 72) = *v18;
            *(_QWORD *)(a1 + 80) = v20;
            sub_20E6673F4(v21, v19);
            goto LABEL_24;
          }
          sub_20E66B4E0(a1 + 72);
        }
        *(_OWORD *)(a1 + 72) = *(_OWORD *)v18;
LABEL_24:
        *(_QWORD *)(a1 + 88) = v12;
        swift_bridgeObjectRelease();
        return a1;
      }
      sub_20E6A22FC(a1 + 56);
    }
    v16 = *(_OWORD *)(a2 + 72);
    *v10 = *v11;
    *(_OWORD *)(a1 + 72) = v16;
    goto LABEL_24;
  }
LABEL_14:
  v13 = *(_OWORD *)(a2 + 72);
  *v10 = *v11;
  *(_OWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPExtensionInput(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPExtensionInput(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPExtensionInput()
{
  return &type metadata for ASCTAPExtensionInput;
}

uint64_t destroy for ASCTAPLargeBlobExtensionInput(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >> 60 != 15)
    return sub_20E6673F4(*(_QWORD *)(a1 + 24), v3);
  return result;
}

uint64_t initializeWithCopy for ASCTAPLargeBlobExtensionInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *v5;
  }
  else
  {
    v7 = *(_QWORD *)v5;
    sub_20E66A990(v7, v6);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for ASCTAPLargeBlobExtensionInput(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = (uint64_t *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_20E66A990(*v4, *(_QWORD *)(a2 + 32));
      v8 = *(_QWORD *)(a1 + 24);
      v9 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = v5;
      sub_20E6673F4(v8, v9);
      goto LABEL_8;
    }
    sub_20E66B4E0(a1 + 24);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v6 = *v4;
  sub_20E66A990(*v4, *(_QWORD *)(a2 + 32));
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v5;
LABEL_8:
  v10 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v10;
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ASCTAPLargeBlobExtensionInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = (_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)(a2 + 32);
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = *v5;
      *(_QWORD *)(a1 + 32) = v7;
      sub_20E6673F4(v8, v6);
      goto LABEL_6;
    }
    sub_20E66B4E0(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
LABEL_6:
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPLargeBlobExtensionInput(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPLargeBlobExtensionInput(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPLargeBlobExtensionInput()
{
  return &type metadata for ASCTAPLargeBlobExtensionInput;
}

uint64_t assignWithCopy for ASCTAPPRFExtensionInput(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4 = a2[1];
  if (*(_QWORD *)(a1 + 8) >> 60 != 15)
  {
    if (v4 >> 60 == 15)
    {
      sub_20E6A22FC(a1);
      v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      goto LABEL_17;
    }
    v10 = *a2;
    sub_20E66A990(*a2, a2[1]);
    v11 = *(_QWORD *)a1;
    v12 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v4;
    sub_20E6673F4(v11, v12);
    v13 = a2 + 2;
    v9 = a2[3];
    if (*(_QWORD *)(a1 + 24) >> 60 == 15)
    {
      if (v9 >> 60 != 15)
      {
        v14 = *v13;
        goto LABEL_12;
      }
    }
    else
    {
      if (v9 >> 60 != 15)
      {
        v15 = *v13;
        sub_20E66A990(*v13, a2[3]);
        v16 = *(_QWORD *)(a1 + 16);
        v17 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 16) = v15;
        *(_QWORD *)(a1 + 24) = v9;
        sub_20E6673F4(v16, v17);
        goto LABEL_17;
      }
      sub_20E66B4E0(a1 + 16);
    }
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v13;
    goto LABEL_17;
  }
  if (v4 >> 60 != 15)
  {
    v7 = *a2;
    sub_20E66A990(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v4;
    v8 = a2 + 2;
    v9 = a2[3];
    if (v9 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 16) = *v8;
      goto LABEL_17;
    }
    v14 = *(_QWORD *)v8;
LABEL_12:
    sub_20E66A990(v14, v9);
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 24) = v9;
    goto LABEL_17;
  }
  v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
LABEL_17:
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ASCTAPPRFExtensionInput(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >> 60 == 15)
    goto LABEL_4;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    sub_20E6A22FC(a1);
LABEL_4:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_10;
  }
  v7 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  sub_20E6673F4(v7, v4);
  v8 = (_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  if (v9 >> 60 != 15)
  {
    v10 = *(_QWORD *)(a2 + 24);
    if (v10 >> 60 != 15)
    {
      v11 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *v8;
      *(_QWORD *)(a1 + 24) = v10;
      sub_20E6673F4(v11, v9);
      goto LABEL_10;
    }
    sub_20E66B4E0(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
LABEL_10:
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ASCTAPPRFExtensionInput()
{
  return &type metadata for ASCTAPPRFExtensionInput;
}

uint64_t destroy for ASCTAPPRFExtensionOutput(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 16);
  if (v1 >> 60 != 15)
  {
    v2 = result;
    result = sub_20E6673F4(*(_QWORD *)(result + 8), v1);
    v3 = *(_QWORD *)(v2 + 32);
    if (v3 >> 60 != 15)
      return sub_20E6673F4(*(_QWORD *)(v2 + 24), v3);
  }
  return result;
}

uint64_t initializeWithCopy for ASCTAPPRFExtensionOutput(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >> 60 == 15)
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v5;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    sub_20E66A990(v6, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v4;
    v7 = (uint64_t *)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    if (v8 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *(_OWORD *)v7;
    }
    else
    {
      v9 = *v7;
      sub_20E66A990(*v7, v8);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v8;
    }
  }
  return a1;
}

uint64_t assignWithCopy for ASCTAPPRFExtensionOutput(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) >> 60 != 15)
  {
    if (v6 >> 60 == 15)
    {
      sub_20E6B4CD8(a1 + 8);
      v8 = v5[1];
      *v4 = *v5;
      v4[1] = v8;
      return a1;
    }
    v12 = *(_QWORD *)(a2 + 8);
    sub_20E66A990(v12, *(_QWORD *)(a2 + 16));
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v12;
    *(_QWORD *)(a1 + 16) = v6;
    sub_20E6673F4(v13, v14);
    v15 = (uint64_t *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(a1 + 32) >> 60 == 15)
    {
      if (v11 >> 60 != 15)
      {
        v16 = *v15;
        goto LABEL_12;
      }
    }
    else
    {
      if (v11 >> 60 != 15)
      {
        v17 = *v15;
        sub_20E66A990(*v15, v11);
        v18 = *(_QWORD *)(a1 + 24);
        v19 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 24) = v17;
        *(_QWORD *)(a1 + 32) = v11;
        sub_20E6673F4(v18, v19);
        return a1;
      }
      sub_20E66B4E0(a1 + 24);
    }
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v15;
    return a1;
  }
  if (v6 >> 60 != 15)
  {
    v9 = *(_QWORD *)(a2 + 8);
    sub_20E66A990(v9, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v6;
    v10 = (_OWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 32);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 24) = *v10;
      return a1;
    }
    v16 = *(_QWORD *)v10;
LABEL_12:
    sub_20E66A990(v16, v11);
    *(_QWORD *)(a1 + 24) = v16;
    *(_QWORD *)(a1 + 32) = v11;
    return a1;
  }
  v7 = *(_OWORD *)(a2 + 24);
  *v4 = *v5;
  *(_OWORD *)(a1 + 24) = v7;
  return a1;
}

uint64_t sub_20E6B4CD8(uint64_t a1)
{
  destroy for ASCTAPPRFExtensionInput.PRFValues(a1, &type metadata for ASCTAPPRFExtensionOutput.Results);
  return a1;
}

uint64_t assignWithTake for ASCTAPPRFExtensionOutput(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    sub_20E6B4CD8(a1 + 8);
LABEL_4:
    v8 = v5[1];
    *v4 = *v5;
    v4[1] = v8;
    return a1;
  }
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v7;
  sub_20E6673F4(v9, v6);
  v10 = (_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  if (v11 >> 60 != 15)
  {
    v12 = *(_QWORD *)(a2 + 32);
    if (v12 >> 60 != 15)
    {
      v13 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = *v10;
      *(_QWORD *)(a1 + 32) = v12;
      sub_20E6673F4(v13, v11);
      return a1;
    }
    sub_20E66B4E0(a1 + 24);
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPPRFExtensionOutput(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[40])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPPRFExtensionOutput(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPPRFExtensionOutput()
{
  return &type metadata for ASCTAPPRFExtensionOutput;
}

ValueMetadata *type metadata accessor for ASCTAPPRFExtensionOutput.Results()
{
  return &type metadata for ASCTAPPRFExtensionOutput.Results;
}

uint64_t destroy for ASCTAPExtensionOutput(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = result;
  if (*(_BYTE *)result != 3)
  {
    v2 = *(_QWORD *)(result + 16);
    if (v2 >> 60 != 15)
      result = sub_20E6673F4(*(_QWORD *)(result + 8), v2);
  }
  if (*(_BYTE *)(v1 + 48) != 3)
  {
    v3 = *(_QWORD *)(v1 + 64);
    if (v3 >> 60 != 15)
    {
      result = sub_20E6673F4(*(_QWORD *)(v1 + 56), v3);
      v4 = *(_QWORD *)(v1 + 80);
      if (v4 >> 60 != 15)
        return sub_20E6673F4(*(_QWORD *)(v1 + 72), v4);
    }
  }
  return result;
}

uint64_t initializeWithCopy for ASCTAPExtensionOutput(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;

  v4 = *a2;
  if (v4 == 3)
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    *(_BYTE *)a1 = v4;
    v6 = (uint64_t *)(a2 + 8);
    v7 = *((_QWORD *)a2 + 2);
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v6;
    }
    else
    {
      v8 = *v6;
      sub_20E66A990(*v6, *((_QWORD *)a2 + 2));
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    *(_BYTE *)(a1 + 24) = a2[24];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_BYTE *)(a1 + 40) = a2[40];
  }
  v9 = a2[48];
  if (v9 == 3)
  {
    v10 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  }
  else
  {
    *(_BYTE *)(a1 + 48) = v9;
    v11 = *((_QWORD *)a2 + 8);
    if (v11 >> 60 == 15)
    {
      v12 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v12;
    }
    else
    {
      v13 = *((_QWORD *)a2 + 7);
      sub_20E66A990(v13, *((_QWORD *)a2 + 8));
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = v11;
      v14 = (uint64_t *)(a2 + 72);
      v15 = *((_QWORD *)a2 + 10);
      if (v15 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 72) = *(_OWORD *)v14;
      }
      else
      {
        v16 = *v14;
        sub_20E66A990(*v14, *((_QWORD *)a2 + 10));
        *(_QWORD *)(a1 + 72) = v16;
        *(_QWORD *)(a1 + 80) = v15;
      }
    }
  }
  *(_BYTE *)(a1 + 88) = a2[88];
  return a1;
}

uint64_t assignWithCopy for ASCTAPExtensionOutput(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t *v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  __int128 v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v4 = *a2;
  if (*(_BYTE *)a1 != 3)
  {
    if (v4 == 3)
    {
      sub_20E6B5380(a1);
      v7 = *(_OWORD *)(a2 + 25);
      v8 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(_OWORD *)(a1 + 25) = v7;
      goto LABEL_18;
    }
    *(_BYTE *)a1 = v4;
    v11 = (_OWORD *)(a1 + 8);
    v12 = (uint64_t *)(a2 + 8);
    v10 = *((_QWORD *)a2 + 2);
    if (*(_QWORD *)(a1 + 16) >> 60 == 15)
    {
      if (v10 >> 60 != 15)
      {
        v13 = *v12;
LABEL_12:
        sub_20E66A990(v13, v10);
        *(_QWORD *)(a1 + 8) = v13;
        *(_QWORD *)(a1 + 16) = v10;
        goto LABEL_17;
      }
    }
    else
    {
      if (v10 >> 60 != 15)
      {
        v14 = *v12;
        sub_20E66A990(*v12, *((_QWORD *)a2 + 2));
        v15 = *(_QWORD *)(a1 + 8);
        v16 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 8) = v14;
        *(_QWORD *)(a1 + 16) = v10;
        sub_20E6673F4(v15, v16);
        goto LABEL_17;
      }
      sub_20E66B4E0(a1 + 8);
    }
    *v11 = *(_OWORD *)v12;
    goto LABEL_17;
  }
  if (v4 == 3)
  {
    v5 = *(_OWORD *)a2;
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_18;
  }
  *(_BYTE *)a1 = v4;
  v9 = (uint64_t *)(a2 + 8);
  v10 = *((_QWORD *)a2 + 2);
  if (v10 >> 60 != 15)
  {
    v13 = *v9;
    goto LABEL_12;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v9;
LABEL_17:
  *(_BYTE *)(a1 + 24) = a2[24];
  v17 = *((_QWORD *)a2 + 4);
  *(_BYTE *)(a1 + 40) = a2[40];
  *(_QWORD *)(a1 + 32) = v17;
LABEL_18:
  v18 = (_OWORD *)(a1 + 48);
  v20 = a2 + 48;
  v19 = a2[48];
  if (*(_BYTE *)(a1 + 48) != 3)
  {
    if (v19 == 3)
    {
      sub_20E6B53B8(a1 + 48);
      v23 = *((_QWORD *)a2 + 10);
      v24 = *((_OWORD *)a2 + 4);
      *v18 = *v20;
      *(_OWORD *)(a1 + 64) = v24;
      *(_QWORD *)(a1 + 80) = v23;
      goto LABEL_41;
    }
    *(_BYTE *)(a1 + 48) = v19;
    v27 = (_OWORD *)(a1 + 56);
    v28 = a2 + 56;
    v25 = *((_QWORD *)a2 + 8);
    if (*(_QWORD *)(a1 + 64) >> 60 != 15)
    {
      if (v25 >> 60 == 15)
      {
        sub_20E6B4CD8(a1 + 56);
        v33 = *(_OWORD *)(a2 + 72);
        *v27 = *v28;
        *(_OWORD *)(a1 + 72) = v33;
        goto LABEL_41;
      }
      v35 = *((_QWORD *)a2 + 7);
      sub_20E66A990(v35, *((_QWORD *)a2 + 8));
      v36 = *(_QWORD *)(a1 + 56);
      v37 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 56) = v35;
      *(_QWORD *)(a1 + 64) = v25;
      sub_20E6673F4(v36, v37);
      v38 = (uint64_t *)(a2 + 72);
      v32 = *((_QWORD *)a2 + 10);
      if (*(_QWORD *)(a1 + 80) >> 60 == 15)
      {
        if (v32 >> 60 != 15)
        {
          v34 = *v38;
          goto LABEL_33;
        }
      }
      else
      {
        if (v32 >> 60 != 15)
        {
          v39 = *v38;
          sub_20E66A990(*v38, *((_QWORD *)a2 + 10));
          v40 = *(_QWORD *)(a1 + 72);
          v41 = *(_QWORD *)(a1 + 80);
          *(_QWORD *)(a1 + 72) = v39;
          *(_QWORD *)(a1 + 80) = v32;
          sub_20E6673F4(v40, v41);
          goto LABEL_41;
        }
        sub_20E66B4E0(a1 + 72);
      }
      *(_OWORD *)(a1 + 72) = *(_OWORD *)v38;
      goto LABEL_41;
    }
    if (v25 >> 60 == 15)
    {
      v29 = *(_OWORD *)(a2 + 72);
      *v27 = *v28;
      *(_OWORD *)(a1 + 72) = v29;
      goto LABEL_41;
    }
LABEL_28:
    v30 = *((_QWORD *)a2 + 7);
    sub_20E66A990(v30, v25);
    *(_QWORD *)(a1 + 56) = v30;
    *(_QWORD *)(a1 + 64) = v25;
    v31 = a2 + 72;
    v32 = *((_QWORD *)a2 + 10);
    if (v32 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 72) = *v31;
      goto LABEL_41;
    }
    v34 = *(_QWORD *)v31;
LABEL_33:
    sub_20E66A990(v34, v32);
    *(_QWORD *)(a1 + 72) = v34;
    *(_QWORD *)(a1 + 80) = v32;
    goto LABEL_41;
  }
  if (v19 != 3)
  {
    *(_BYTE *)(a1 + 48) = v19;
    v25 = *((_QWORD *)a2 + 8);
    if (v25 >> 60 == 15)
    {
      v26 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v26;
      goto LABEL_41;
    }
    goto LABEL_28;
  }
  v21 = *v20;
  v22 = *((_OWORD *)a2 + 4);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *v18 = v21;
  *(_OWORD *)(a1 + 64) = v22;
LABEL_41:
  *(_BYTE *)(a1 + 88) = a2[88];
  return a1;
}

uint64_t sub_20E6B5380(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >> 60 != 15)
    sub_20E6673F4(*(_QWORD *)(a1 + 8), v2);
  return a1;
}

uint64_t sub_20E6B53B8(uint64_t a1)
{
  destroy for ASCTAPPRFExtensionOutput(a1);
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ASCTAPExtensionOutput(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  __int128 v5;
  _OWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  if (*(_BYTE *)a1 == 3)
    goto LABEL_4;
  v4 = *a2;
  if (v4 == 3)
  {
    sub_20E6B5380(a1);
LABEL_4:
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    goto LABEL_11;
  }
  *(_BYTE *)a1 = v4;
  v6 = (_OWORD *)(a1 + 8);
  v7 = a2 + 8;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 >> 60 != 15)
  {
    v9 = *((_QWORD *)a2 + 2);
    if (v9 >> 60 != 15)
    {
      v10 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *v7;
      *(_QWORD *)(a1 + 16) = v9;
      sub_20E6673F4(v10, v8);
      goto LABEL_10;
    }
    sub_20E66B4E0(a1 + 8);
  }
  *v6 = *(_OWORD *)v7;
LABEL_10:
  *(_BYTE *)(a1 + 24) = a2[24];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_BYTE *)(a1 + 40) = a2[40];
LABEL_11:
  v11 = a2[48];
  if (*(_BYTE *)(a1 + 48) == 3)
  {
LABEL_14:
    v12 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 64) = v12;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    goto LABEL_24;
  }
  if (v11 == 3)
  {
    sub_20E6B53B8(a1 + 48);
    goto LABEL_14;
  }
  *(_BYTE *)(a1 + 48) = v11;
  v13 = *(_QWORD *)(a1 + 64);
  if (v13 >> 60 == 15)
  {
LABEL_18:
    v15 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v15;
    goto LABEL_24;
  }
  v14 = *((_QWORD *)a2 + 8);
  if (v14 >> 60 == 15)
  {
    sub_20E6B4CD8(a1 + 56);
    goto LABEL_18;
  }
  v16 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 64) = v14;
  sub_20E6673F4(v16, v13);
  v17 = a2 + 72;
  v18 = *(_QWORD *)(a1 + 80);
  if (v18 >> 60 != 15)
  {
    v19 = *((_QWORD *)a2 + 10);
    if (v19 >> 60 != 15)
    {
      v20 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = *v17;
      *(_QWORD *)(a1 + 80) = v19;
      sub_20E6673F4(v20, v18);
      goto LABEL_24;
    }
    sub_20E66B4E0(a1 + 72);
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v17;
LABEL_24:
  *(_BYTE *)(a1 + 88) = a2[88];
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPExtensionOutput(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 89))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 88);
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPExtensionOutput(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 89) = 0;
    if (a2)
      *(_BYTE *)(result + 88) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPExtensionOutput()
{
  return &type metadata for ASCTAPExtensionOutput;
}

uint64_t destroy for ASCTAPLargeBlobExtensionOutput(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1 >> 60 != 15)
    return sub_20E6673F4(*(_QWORD *)(result + 8), v1);
  return result;
}

uint64_t initializeWithCopy for ASCTAPLargeBlobExtensionOutput(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (uint64_t *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  }
  else
  {
    v6 = *v4;
    sub_20E66A990(*v4, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v5;
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for ASCTAPLargeBlobExtensionOutput(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (uint64_t *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) >> 60 != 15)
  {
    if (v6 >> 60 != 15)
    {
      v8 = *v5;
      sub_20E66A990(*v5, *(_QWORD *)(a2 + 16));
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v6;
      sub_20E6673F4(v9, v10);
      goto LABEL_8;
    }
    sub_20E66B4E0(a1 + 8);
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
LABEL_6:
    *v4 = *(_OWORD *)v5;
    goto LABEL_8;
  }
  v7 = *v5;
  sub_20E66A990(*v5, *(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v6;
LABEL_8:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v11;
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ASCTAPLargeBlobExtensionOutput(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)(a2 + 16);
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *v5;
      *(_QWORD *)(a1 + 16) = v7;
      sub_20E6673F4(v8, v6);
      goto LABEL_6;
    }
    sub_20E66B4E0(a1 + 8);
  }
  *v4 = *(_OWORD *)v5;
LABEL_6:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPLargeBlobExtensionOutput(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[41])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPLargeBlobExtensionOutput(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPLargeBlobExtensionOutput()
{
  return &type metadata for ASCTAPLargeBlobExtensionOutput;
}

ValueMetadata *type metadata accessor for ASCTAPLargeBlobExtensionOutput.CodingKeys()
{
  return &type metadata for ASCTAPLargeBlobExtensionOutput.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCTAPExtensionOutput.CodingKeys()
{
  return &type metadata for ASCTAPExtensionOutput.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCTAPPRFExtensionOutput.CodingKeys()
{
  return &type metadata for ASCTAPPRFExtensionOutput.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCTAPPRFExtensionOutput.Results.CodingKeys()
{
  return &type metadata for ASCTAPPRFExtensionOutput.Results.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCTAPPRFExtensionInput.PRFValues()
{
  return &type metadata for ASCTAPPRFExtensionInput.PRFValues;
}

ValueMetadata *type metadata accessor for ASCTAPPRFExtensionInput.CodingKeys()
{
  return &type metadata for ASCTAPPRFExtensionInput.CodingKeys;
}

uint64_t _s26AuthenticationServicesCore30ASCTAPLargeBlobExtensionOutputV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s26AuthenticationServicesCore30ASCTAPLargeBlobExtensionOutputV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_20E6B5AA8 + 4 * byte_20E6F0B01[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_20E6B5ADC + 4 * byte_20E6F0AFC[v4]))();
}

uint64_t sub_20E6B5ADC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6B5AE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6B5AECLL);
  return result;
}

uint64_t sub_20E6B5AF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6B5B00);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_20E6B5B04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6B5B0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPLargeBlobExtensionInput.CodingKeys()
{
  return &type metadata for ASCTAPLargeBlobExtensionInput.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCTAPExtensionInput.CodingKeys()
{
  return &type metadata for ASCTAPExtensionInput.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCTAPCredentialData.CodingKeys()
{
  return &type metadata for ASCTAPCredentialData.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCTAPAuthData.DecodingError()
{
  return &type metadata for ASCTAPAuthData.DecodingError;
}

unint64_t sub_20E6B5B5C()
{
  unint64_t result;

  result = qword_254A2ECB0;
  if (!qword_254A2ECB0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1274, &type metadata for ASCTAPAuthData.DecodingError);
    atomic_store(result, (unint64_t *)&qword_254A2ECB0);
  }
  return result;
}

unint64_t sub_20E6B5BA4()
{
  unint64_t result;

  result = qword_254A2ECB8;
  if (!qword_254A2ECB8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F132C, &type metadata for ASCTAPCredentialData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ECB8);
  }
  return result;
}

unint64_t sub_20E6B5BEC()
{
  unint64_t result;

  result = qword_254A2ECC0;
  if (!qword_254A2ECC0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F141C, &type metadata for ASCTAPExtensionInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ECC0);
  }
  return result;
}

unint64_t sub_20E6B5C34()
{
  unint64_t result;

  result = qword_254A2ECC8;
  if (!qword_254A2ECC8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F150C, &type metadata for ASCTAPLargeBlobExtensionInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ECC8);
  }
  return result;
}

unint64_t sub_20E6B5C7C()
{
  unint64_t result;

  result = qword_254A2ECD0;
  if (!qword_254A2ECD0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F15FC, &type metadata for ASCTAPPRFExtensionInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ECD0);
  }
  return result;
}

unint64_t sub_20E6B5CC4()
{
  unint64_t result;

  result = qword_254A2ECD8;
  if (!qword_254A2ECD8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F16DC, &type metadata for ASCTAPPRFExtensionOutput.Results.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ECD8);
  }
  return result;
}

unint64_t sub_20E6B5D0C()
{
  unint64_t result;

  result = qword_254A2ECE0;
  if (!qword_254A2ECE0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1794, &type metadata for ASCTAPPRFExtensionOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ECE0);
  }
  return result;
}

unint64_t sub_20E6B5D54()
{
  unint64_t result;

  result = qword_254A2ECE8;
  if (!qword_254A2ECE8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1884, &type metadata for ASCTAPExtensionOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ECE8);
  }
  return result;
}

unint64_t sub_20E6B5D9C()
{
  unint64_t result;

  result = qword_254A2ECF0;
  if (!qword_254A2ECF0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F193C, &type metadata for ASCTAPLargeBlobExtensionOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ECF0);
  }
  return result;
}

unint64_t sub_20E6B5DE4()
{
  unint64_t result;

  result = qword_254A2ECF8;
  if (!qword_254A2ECF8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F18AC, &type metadata for ASCTAPLargeBlobExtensionOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ECF8);
  }
  return result;
}

unint64_t sub_20E6B5E2C()
{
  unint64_t result;

  result = qword_254A2ED00;
  if (!qword_254A2ED00)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F18D4, &type metadata for ASCTAPLargeBlobExtensionOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED00);
  }
  return result;
}

unint64_t sub_20E6B5E74()
{
  unint64_t result;

  result = qword_254A2ED08;
  if (!qword_254A2ED08)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F17BC, &type metadata for ASCTAPExtensionOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED08);
  }
  return result;
}

unint64_t sub_20E6B5EBC()
{
  unint64_t result;

  result = qword_254A2ED10;
  if (!qword_254A2ED10)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F17E4, &type metadata for ASCTAPExtensionOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED10);
  }
  return result;
}

unint64_t sub_20E6B5F04()
{
  unint64_t result;

  result = qword_254A2ED18;
  if (!qword_254A2ED18)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1704, &type metadata for ASCTAPPRFExtensionOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED18);
  }
  return result;
}

unint64_t sub_20E6B5F4C()
{
  unint64_t result;

  result = qword_254A2ED20;
  if (!qword_254A2ED20)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F172C, &type metadata for ASCTAPPRFExtensionOutput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED20);
  }
  return result;
}

unint64_t sub_20E6B5F94()
{
  unint64_t result;

  result = qword_254A2ED28;
  if (!qword_254A2ED28)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F164C, &type metadata for ASCTAPPRFExtensionOutput.Results.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED28);
  }
  return result;
}

unint64_t sub_20E6B5FDC()
{
  unint64_t result;

  result = qword_254A2ED30;
  if (!qword_254A2ED30)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1674, &type metadata for ASCTAPPRFExtensionOutput.Results.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED30);
  }
  return result;
}

unint64_t sub_20E6B6024()
{
  unint64_t result;

  result = qword_254A2ED38;
  if (!qword_254A2ED38)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1534, &type metadata for ASCTAPPRFExtensionInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED38);
  }
  return result;
}

unint64_t sub_20E6B606C()
{
  unint64_t result;

  result = qword_254A2ED40;
  if (!qword_254A2ED40)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F155C, &type metadata for ASCTAPPRFExtensionInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED40);
  }
  return result;
}

unint64_t sub_20E6B60B4()
{
  unint64_t result;

  result = qword_254A2ED48;
  if (!qword_254A2ED48)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1444, &type metadata for ASCTAPLargeBlobExtensionInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED48);
  }
  return result;
}

unint64_t sub_20E6B60FC()
{
  unint64_t result;

  result = qword_254A2ED50;
  if (!qword_254A2ED50)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F146C, &type metadata for ASCTAPLargeBlobExtensionInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED50);
  }
  return result;
}

unint64_t sub_20E6B6144()
{
  unint64_t result;

  result = qword_254A2ED58;
  if (!qword_254A2ED58)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1354, &type metadata for ASCTAPExtensionInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED58);
  }
  return result;
}

unint64_t sub_20E6B618C()
{
  unint64_t result;

  result = qword_254A2ED60;
  if (!qword_254A2ED60)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F137C, &type metadata for ASCTAPExtensionInput.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED60);
  }
  return result;
}

unint64_t sub_20E6B61D4()
{
  unint64_t result;

  result = qword_254A2ED68;
  if (!qword_254A2ED68)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F129C, &type metadata for ASCTAPCredentialData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED68);
  }
  return result;
}

unint64_t sub_20E6B621C()
{
  unint64_t result;

  result = qword_254A2ED70;
  if (!qword_254A2ED70)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F12C4, &type metadata for ASCTAPCredentialData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED70);
  }
  return result;
}

uint64_t sub_20E6B6260(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20E6B6328(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EED8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B8254();
  sub_20E6EA9AC();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    v11 = 0;
    v7 = sub_20E6EA7E4();
    v10 = 1;
    swift_bridgeObjectRetain();
    sub_20E6EA7E4();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_20E6B64D4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 25705 && a2 == 0xE200000000000000 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_20E6B6618@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EE58);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B7C18();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  LOBYTE(v24) = 0;
  v9 = sub_20E6EA7E4();
  v11 = v10;
  v23 = v9;
  v26 = 1;
  sub_20E66AE8C();
  swift_bridgeObjectRetain();
  sub_20E6EA7FC();
  v12 = v24;
  LOBYTE(v24) = 2;
  v21 = v25;
  v22 = v12;
  sub_20E66A990(v12, v25);
  v13 = sub_20E6EA7E4();
  v15 = v14;
  v16 = v13;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  v18 = v21;
  v17 = v22;
  sub_20E66A990(v22, v21);
  swift_bridgeObjectRetain();
  sub_20E6673F4(v17, v18);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  sub_20E6673F4(v17, v18);
  result = swift_bridgeObjectRelease();
  *a2 = v23;
  a2[1] = v11;
  a2[2] = v17;
  a2[3] = v18;
  a2[4] = v16;
  a2[5] = v15;
  return result;
}

uint64_t sub_20E6B6890(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EEE8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B8298();
  sub_20E6EA9AC();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    v9[15] = 0;
    v7 = sub_20E6EA7E4();
    v9[14] = 1;
    swift_bridgeObjectRetain();
    sub_20E6EA808();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_20E6B6A20(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x646975676161 && a2 == 0xE600000000000000;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69746E6564657263 && a2 == 0xEC00000044496C61 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000020E6F8310)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_20E6B6B80@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EE70);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6B7C5C();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  LOBYTE(v22) = 0;
  v9 = sub_20E6EA7E4();
  v11 = v10;
  v21 = v9;
  v24 = 1;
  sub_20E66AE8C();
  swift_bridgeObjectRetain();
  sub_20E6EA7FC();
  v12 = v22;
  v13 = v23;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
  v19 = v13;
  v24 = 2;
  v20 = v12;
  sub_20E66A990(v12, v13);
  sub_20E69C8F8((unint64_t *)&qword_254A2F7C0, (uint64_t *)&unk_254A2EE80, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  sub_20E6EA7D8();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = v22;
  swift_bridgeObjectRetain();
  v16 = v19;
  v15 = v20;
  sub_20E66A990(v20, v19);
  swift_bridgeObjectRetain();
  sub_20E6673F4(v15, v16);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  sub_20E6673F4(v15, v16);
  result = swift_bridgeObjectRelease();
  *a2 = v21;
  a2[1] = v11;
  a2[2] = v15;
  a2[3] = v16;
  a2[4] = v14;
  return result;
}

uint64_t sub_20E6B6E40()
{
  unint64_t v0;

  v0 = sub_20E6EA784();
  swift_bridgeObjectRelease();
  if (v0 >= 4)
    return 4;
  else
    return v0;
}

uint64_t sub_20E6B6E88(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2ED78);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1Tm(a1, v7);
  sub_20E6B7080();
  sub_20E6EA9AC();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    v14 = 0;
    sub_20E66AE8C();
    sub_20E6EA7FC();
    v7 = v12;
    v9 = v13;
    v14 = 1;
    sub_20E66A990(v12, v13);
    sub_20E6EA7D8();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v10 = v12;
    v11 = v13;
    sub_20E66A990(v7, v9);
    sub_20E66A9D4(v10, v11);
    sub_20E6673F4(v7, v9);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    sub_20E6673F4(v7, v9);
    sub_20E66AA28(v10, v11);
  }
  return v7;
}

unint64_t sub_20E6B7080()
{
  unint64_t result;

  result = qword_254A2ED80;
  if (!qword_254A2ED80)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1F6C, &type metadata for ASCTAPPRFExtensionInput.PRFValues.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2ED80);
  }
  return result;
}

uint64_t sub_20E6B70C4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7473726966 && a2 == 0xE500000000000000;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646E6F636573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20E6B71A4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64656C62616E65 && a2 == 0xE700000000000000;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73746C75736572 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20E6B7294()
{
  unint64_t v0;

  v0 = sub_20E6EA784();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_20E6B72D8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6574726F70707573 && a2 == 0xE900000000000064;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1651469410 && a2 == 0xE400000000000000 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E657474697277 && a2 == 0xE700000000000000 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C616E696769726FLL && a2 == 0xEC000000657A6953)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_20E6B74A4(uint64_t result, unint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_20E6B74BC(result, a2, a3 & 1);
  return result;
}

uint64_t sub_20E6B74BC(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return sub_20E66AA28(a1, a2);
  return a1;
}

uint64_t sub_20E6B74C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_20E6B750C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254A2EDE0;
  if (!qword_254A2EDE0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_254A2EDD8);
    result = MEMORY[0x212BC39A8](MEMORY[0x24BDD06A0], v1);
    atomic_store(result, (unint64_t *)&qword_254A2EDE0);
  }
  return result;
}

uint64_t sub_20E6B7558(uint64_t a1, uint64_t a2)
{
  assignWithTake for ASPasskeyAttestationConfiguration(a2, a1);
  return a2;
}

unint64_t sub_20E6B7594()
{
  unint64_t result;

  result = qword_254A2EE18;
  if (!qword_254A2EE18)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1F2C, &type metadata for ASCTAPCredentialData.DecodingError);
    atomic_store(result, (unint64_t *)&qword_254A2EE18);
  }
  return result;
}

uint64_t sub_20E6B75D8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t result;

  if (a2 >> 60 != 15)
  {
    a7();
    ((void (*)(uint64_t, uint64_t))a7)(a3, a4);
    return ((uint64_t (*)(uint64_t, uint64_t))a7)(a5, a6);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ASCTAPCredentialData.DecodingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20E6B7688 + 4 * byte_20E6F0B06[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20E6B76A8 + 4 * byte_20E6F0B0B[v4]))();
}

_BYTE *sub_20E6B7688(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20E6B76A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E6B76B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E6B76B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E6B76C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E6B76C8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPCredentialData.DecodingError()
{
  return &type metadata for ASCTAPCredentialData.DecodingError;
}

uint64_t destroy for ASCTAPUserEntity(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_20E6673F4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ASCTAPUserEntity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  swift_bridgeObjectRetain();
  sub_20E66A990(v5, v6);
  a1[2] = v5;
  a1[3] = v6;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ASCTAPUserEntity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[2];
  v5 = a2[3];
  sub_20E66A990(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  a1[2] = v4;
  a1[3] = v5;
  sub_20E6673F4(v6, v7);
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ASCTAPUserEntity(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a1[2];
  v6 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_20E6673F4(v5, v6);
  v7 = *(_QWORD *)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPUserEntity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPUserEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPUserEntity()
{
  return &type metadata for ASCTAPUserEntity;
}

uint64_t destroy for ASCTAPPublicKeyCredentialDescriptor(uint64_t a1)
{
  swift_bridgeObjectRelease();
  sub_20E6673F4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ASCTAPPublicKeyCredentialDescriptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  swift_bridgeObjectRetain();
  sub_20E66A990(v5, v6);
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ASCTAPPublicKeyCredentialDescriptor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[2];
  v5 = a2[3];
  sub_20E66A990(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  a1[2] = v4;
  a1[3] = v5;
  sub_20E6673F4(v6, v7);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ASCTAPPublicKeyCredentialDescriptor(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a1[2];
  v6 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_20E6673F4(v5, v6);
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPPublicKeyCredentialDescriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPPublicKeyCredentialDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPPublicKeyCredentialDescriptor()
{
  return &type metadata for ASCTAPPublicKeyCredentialDescriptor;
}

ValueMetadata *type metadata accessor for ASCTAPPRFExtensionInput.PRFValues.CodingKeys()
{
  return &type metadata for ASCTAPPRFExtensionInput.PRFValues.CodingKeys;
}

unint64_t sub_20E6B7AFC()
{
  unint64_t result;

  result = qword_254A2EE38;
  if (!qword_254A2EE38)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1D9C, &type metadata for ASCTAPPRFExtensionInput.PRFValues.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EE38);
  }
  return result;
}

unint64_t sub_20E6B7B44()
{
  unint64_t result;

  result = qword_254A2EE40;
  if (!qword_254A2EE40)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1F04, &type metadata for ASCTAPCredentialData.DecodingError);
    atomic_store(result, (unint64_t *)&qword_254A2EE40);
  }
  return result;
}

unint64_t sub_20E6B7B8C()
{
  unint64_t result;

  result = qword_254A2EE48;
  if (!qword_254A2EE48)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1CD4, &type metadata for ASCTAPPRFExtensionInput.PRFValues.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EE48);
  }
  return result;
}

unint64_t sub_20E6B7BD4()
{
  unint64_t result;

  result = qword_254A2EE50;
  if (!qword_254A2EE50)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F1CFC, &type metadata for ASCTAPPRFExtensionInput.PRFValues.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EE50);
  }
  return result;
}

unint64_t sub_20E6B7C18()
{
  unint64_t result;

  result = qword_254A2EE60;
  if (!qword_254A2EE60)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F22B4, &type metadata for ASCTAPUserEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EE60);
  }
  return result;
}

unint64_t sub_20E6B7C5C()
{
  unint64_t result;

  result = qword_254A2EE78;
  if (!qword_254A2EE78)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2264, &type metadata for ASCTAPPublicKeyCredentialDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EE78);
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPPublicKeyCredentialDescriptor.CodingKeys()
{
  return &type metadata for ASCTAPPublicKeyCredentialDescriptor.CodingKeys;
}

uint64_t _s26AuthenticationServicesCore21ASCTAPExtensionOutputV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20E6B7CFC + 4 * byte_20E6F0B15[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20E6B7D30 + 4 * byte_20E6F0B10[v4]))();
}

uint64_t sub_20E6B7D30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6B7D38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6B7D40);
  return result;
}

uint64_t sub_20E6B7D4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6B7D54);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20E6B7D58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6B7D60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPUserEntity.CodingKeys()
{
  return &type metadata for ASCTAPUserEntity.CodingKeys;
}

uint64_t destroy for ASCTAPPublicKeyCredentialParameters()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s26AuthenticationServicesCore35ASCTAPPublicKeyCredentialParametersVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ASCTAPPublicKeyCredentialParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ASCTAPPublicKeyCredentialParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPPublicKeyCredentialParameters(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPPublicKeyCredentialParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPPublicKeyCredentialParameters()
{
  return &type metadata for ASCTAPPublicKeyCredentialParameters;
}

uint64_t destroy for ASCTAPRelyingPartyEntity()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ASCTAPRelyingPartyEntity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ASCTAPRelyingPartyEntity(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ASCTAPRelyingPartyEntity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPRelyingPartyEntity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPRelyingPartyEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPRelyingPartyEntity()
{
  return &type metadata for ASCTAPRelyingPartyEntity;
}

unint64_t sub_20E6B80A8()
{
  unint64_t result;

  result = qword_254A2EEA8;
  if (!qword_254A2EEA8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F20FC, &type metadata for ASCTAPUserEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EEA8);
  }
  return result;
}

unint64_t sub_20E6B80F0()
{
  unint64_t result;

  result = qword_254A2EEB0;
  if (!qword_254A2EEB0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F21EC, &type metadata for ASCTAPPublicKeyCredentialDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EEB0);
  }
  return result;
}

unint64_t sub_20E6B8138()
{
  unint64_t result;

  result = qword_254A2EEB8;
  if (!qword_254A2EEB8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2124, &type metadata for ASCTAPPublicKeyCredentialDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EEB8);
  }
  return result;
}

unint64_t sub_20E6B8180()
{
  unint64_t result;

  result = qword_254A2EEC0;
  if (!qword_254A2EEC0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F214C, &type metadata for ASCTAPPublicKeyCredentialDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EEC0);
  }
  return result;
}

unint64_t sub_20E6B81C8()
{
  unint64_t result;

  result = qword_254A2EEC8;
  if (!qword_254A2EEC8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F206C, &type metadata for ASCTAPUserEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EEC8);
  }
  return result;
}

unint64_t sub_20E6B8210()
{
  unint64_t result;

  result = qword_254A2EED0;
  if (!qword_254A2EED0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2094, &type metadata for ASCTAPUserEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EED0);
  }
  return result;
}

unint64_t sub_20E6B8254()
{
  unint64_t result;

  result = qword_254A2EEE0;
  if (!qword_254A2EEE0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F254C, &type metadata for ASCTAPRelyingPartyEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EEE0);
  }
  return result;
}

unint64_t sub_20E6B8298()
{
  unint64_t result;

  result = qword_254A2EEF0;
  if (!qword_254A2EEF0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F24FC, &type metadata for ASCTAPPublicKeyCredentialParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EEF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPPublicKeyCredentialParameters.CodingKeys()
{
  return &type metadata for ASCTAPPublicKeyCredentialParameters.CodingKeys;
}

uint64_t _s26AuthenticationServicesCore24ASCTAPPRFExtensionOutputV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20E6B8338 + 4 * byte_20E6F0B1F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20E6B836C + 4 * byte_20E6F0B1A[v4]))();
}

uint64_t sub_20E6B836C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6B8374(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6B837CLL);
  return result;
}

uint64_t sub_20E6B8388(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6B8390);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20E6B8394(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6B839C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPRelyingPartyEntity.CodingKeys()
{
  return &type metadata for ASCTAPRelyingPartyEntity.CodingKeys;
}

unint64_t sub_20E6B83BC()
{
  unint64_t result;

  result = qword_254A2EF08;
  if (!qword_254A2EF08)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F23E4, &type metadata for ASCTAPRelyingPartyEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EF08);
  }
  return result;
}

unint64_t sub_20E6B8404()
{
  unint64_t result;

  result = qword_254A2EF10;
  if (!qword_254A2EF10)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F24D4, &type metadata for ASCTAPPublicKeyCredentialParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EF10);
  }
  return result;
}

unint64_t sub_20E6B844C()
{
  unint64_t result;

  result = qword_254A2EF18;
  if (!qword_254A2EF18)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F240C, &type metadata for ASCTAPPublicKeyCredentialParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EF18);
  }
  return result;
}

unint64_t sub_20E6B8494()
{
  unint64_t result;

  result = qword_254A2EF20;
  if (!qword_254A2EF20)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2434, &type metadata for ASCTAPPublicKeyCredentialParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EF20);
  }
  return result;
}

unint64_t sub_20E6B84DC()
{
  unint64_t result;

  result = qword_254A2EF28;
  if (!qword_254A2EF28)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2354, &type metadata for ASCTAPRelyingPartyEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EF28);
  }
  return result;
}

unint64_t sub_20E6B8524()
{
  unint64_t result;

  result = qword_254A2EF30;
  if (!qword_254A2EF30)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F237C, &type metadata for ASCTAPRelyingPartyEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EF30);
  }
  return result;
}

uint64_t sub_20E6B856C@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD v54[5];
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;

  v10 = objc_msgSend(a1, sel_extensions);
  v44 = a2;
  if (v10)
  {
    sub_20E6E3754((uint64_t)v54);

    v10 = (id)v54[0];
    v11 = v54[1];
    v12 = v54[2];
    v13 = v54[3];
    v14 = v54[4];
    v15 = v55;
    v16 = v56;
    v17 = v57;
    v18 = v58;
    v19 = v59;
    v20 = v60;
    v21 = v61;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 3;
  }
  v22 = v21;
  v23 = v20;
  v24 = v19;
  v45 = v18;
  v46 = v13;
  v50 = v17;
  v51 = v12;
  v47 = v14;
  v48 = v15;
  v49 = v16;
  sub_20E6777B4((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, (void (*)(void))sub_20E677614, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677630);
  v53 = a3;
  v52 = a4;
  if (a4 >> 60 == 15)
  {
    v25 = objc_msgSend(a1, sel_credentialID);
    v53 = sub_20E6E9C80();
    v52 = v26;

  }
  sub_20E66A9D4(a3, a4);
  v27 = objc_msgSend(a1, sel_authenticatorData);
  v28 = sub_20E6E9C80();
  v42 = v29;
  v43 = v28;

  v30 = objc_msgSend(a1, sel_signature);
  v31 = sub_20E6E9C80();
  v40 = v32;
  v41 = v31;

  v33 = objc_msgSend(a1, sel_userHandle);
  if (v33)
  {
    v34 = v33;
    v35 = sub_20E6E9C80();
    v38 = v36;
    v39 = v35;

    sub_20E66AA28(a3, a4);
    result = sub_20E6777B4((uint64_t)v10, v11, v51, v46, v47, v48, v49, v50, v45, v24, v23, v22, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
    LOBYTE(v54[0]) = 1;
    *(_OWORD *)a5 = xmmword_20E6F25A0;
    *(_QWORD *)(a5 + 16) = v53;
    *(_QWORD *)(a5 + 24) = v52;
    *(_QWORD *)(a5 + 32) = 0;
    *(_QWORD *)(a5 + 40) = v43;
    *(_QWORD *)(a5 + 48) = v42;
    *(_QWORD *)(a5 + 56) = v41;
    *(_QWORD *)(a5 + 64) = v40;
    *(_OWORD *)(a5 + 72) = xmmword_20E6F25B0;
    *(_QWORD *)(a5 + 88) = v39;
    *(_QWORD *)(a5 + 96) = v38;
    *(_OWORD *)(a5 + 104) = xmmword_20E6F25B0;
    *(_QWORD *)(a5 + 120) = 0;
    *(_BYTE *)(a5 + 128) = 1;
    *(_BYTE *)(a5 + 129) = v44;
    *(_QWORD *)(a5 + 136) = v10;
    *(_QWORD *)(a5 + 144) = v11;
    *(_QWORD *)(a5 + 152) = v51;
    *(_QWORD *)(a5 + 160) = v46;
    *(_QWORD *)(a5 + 168) = v47;
    *(_QWORD *)(a5 + 176) = v48;
    *(_QWORD *)(a5 + 184) = v49;
    *(_QWORD *)(a5 + 192) = v50;
    *(_QWORD *)(a5 + 200) = v45;
    *(_QWORD *)(a5 + 208) = v24;
    *(_QWORD *)(a5 + 216) = v23;
    *(_BYTE *)(a5 + 224) = v22;
  }
  else
  {
    sub_20E6777B4((uint64_t)v10, v11, v51, v46, v47, v48, v49, v50, v45, v24, v23, v22, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
    result = sub_20E6777B4((uint64_t)v10, v11, v51, v46, v47, v48, v49, v50, v45, v24, v23, v22, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
    __break(1u);
  }
  return result;
}

uint64_t sub_20E6B8900@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[25];
  _QWORD v62[5];
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD v70[14];
  __int128 v71;
  uint64_t v72;
  char v73;
  _BYTE v74[144];
  _BYTE v75[144];
  _BYTE v76[152];

  v4 = objc_msgSend(a1, sel_attestationObject);
  v5 = sub_20E6E9C80();
  v7 = v6;

  ASCTAPAuthenticatorMakeCredentialResponse.init(attestationObject:)(v5, v7, (uint64_t)v74);
  sub_20E6BC570((uint64_t)v74, (uint64_t)v75);
  sub_20E6BC570((uint64_t)v75, (uint64_t)v76);
  if (sub_20E677518((uint64_t)v76) == 1)
  {

    return sub_20E6BC570((uint64_t)v75, a2);
  }
  else
  {
    v47 = (_OWORD *)a2;
    sub_20E6BC570((uint64_t)v75, (uint64_t)v70);
    v48 = v70[0];
    v9 = v70[2];
    v10 = v70[3];
    v11 = v70[4];
    v12 = v70[5];
    v53 = v70[1];
    swift_bridgeObjectRetain();
    v51 = v10;
    v52 = v9;
    sub_20E66A990(v9, v10);
    v49 = v12;
    v50 = v11;
    sub_20E66A990(v11, v12);
    v13 = objc_msgSend(a1, sel_extensions);
    if (v13)
    {
      sub_20E6933E8((uint64_t)v62);

      v13 = (id)v62[0];
      v14 = v62[1];
      v15 = v62[2];
      v16 = v62[3];
      v17 = v62[4];
      v18 = v63;
      v20 = v64;
      v19 = v65;
      v21 = v66;
      v22 = v67;
      v23 = v68;
      v24 = v69;
    }
    else
    {

      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v20 = 0;
      v19 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 3;
    }
    v36 = v22;
    v37 = v23;
    v38 = v24;
    v45 = v70[7];
    v46 = v70[6];
    v43 = v70[9];
    v44 = v70[8];
    v41 = v70[11];
    v42 = v70[10];
    v39 = v70[13];
    v40 = v70[12];
    v34 = v71;
    v25 = v72;
    v26 = v73;
    v27 = v17;
    v35 = v17;
    v28 = v19;
    v29 = v21;
    sub_20E6777B4((uint64_t)v13, v14, v15, v16, v27, v18, v20, v19, v21, v22, v23, v24, (void (*)(void))sub_20E677614, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677630);
    sub_20E6777B4(v46, v45, v44, v43, v42, v41, v40, v39, v34, *((uint64_t *)&v34 + 1), v25, v26, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
    *(_QWORD *)&v54 = v48;
    *((_QWORD *)&v54 + 1) = v53;
    *(_QWORD *)&v55 = v52;
    *((_QWORD *)&v55 + 1) = v51;
    *(_QWORD *)&v56 = v50;
    *((_QWORD *)&v56 + 1) = v49;
    *(_QWORD *)&v57 = v13;
    *((_QWORD *)&v57 + 1) = v14;
    *(_QWORD *)&v58 = v15;
    *((_QWORD *)&v58 + 1) = v16;
    *(_QWORD *)&v59 = v35;
    *((_QWORD *)&v59 + 1) = v18;
    *(_QWORD *)&v60 = v20;
    *((_QWORD *)&v60 + 1) = v28;
    *(_QWORD *)v61 = v29;
    *(_QWORD *)&v61[8] = v36;
    *(_QWORD *)&v61[16] = v37;
    v61[24] = v38;
    sub_20E677530((uint64_t)&v54);
    sub_20E6777B4((uint64_t)v13, v14, v15, v16, v35, v18, v20, v28, v29, v36, v37, v38, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
    sub_20E6673F4(v50, v49);
    sub_20E6673F4(v52, v51);
    swift_bridgeObjectRelease();
    v30 = *(_OWORD *)v61;
    v47[6] = v60;
    v47[7] = v30;
    *(_OWORD *)((char *)v47 + 121) = *(_OWORD *)&v61[9];
    v31 = v57;
    v47[2] = v56;
    v47[3] = v31;
    v32 = v59;
    v47[4] = v58;
    v47[5] = v32;
    v33 = v55;
    *v47 = v54;
    v47[1] = v33;
    nullsub_1(v47);
    return sub_20E683908((uint64_t)&v54);
  }
}

void *sub_20E6B8C7C(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  char v7;
  id v8;
  void *v10;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v6 = sub_20E699A00((uint64_t)a1);
      if ((v7 & 1) != 0)
      {
        v5 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v6);
        v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  v3 = a1;
  v4 = sub_20E6EA700();

  if (!v4)
    return 0;
  sub_20E6BC5B8();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

void sub_20E6B8D40()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t inited;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  unint64_t v23;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  v3 = (void *)sub_20E6EA1C0();
  swift_bridgeObjectRelease();
  v4 = (void *)objc_opt_self();
  v5 = objc_msgSend(v4, sel_cborWithUTF8String_, v3);

  sub_20E66A990(v1, v2);
  v6 = (void *)sub_20E6E9C68();
  v7 = objc_msgSend(v4, sel_cborWithData_, v6);
  sub_20E6673F4(v1, v2);

  v8 = (void *)sub_20E6E9C68();
  v9 = objc_msgSend(v4, sel_decodeFromData_, v8);

  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EF50);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20E6EE510;
    v11 = (void *)sub_20E6EA1C0();
    v12 = objc_msgSend(v4, sel_cborWithUTF8String_, v11);

    *(_QWORD *)(inited + 32) = v12;
    *(_QWORD *)(inited + 40) = v5;
    v13 = v5;
    v14 = (void *)sub_20E6EA1C0();
    v15 = objc_msgSend(v4, sel_cborWithUTF8String_, v14);

    *(_QWORD *)(inited + 48) = v15;
    *(_QWORD *)(inited + 56) = v7;
    v16 = v7;
    v17 = (void *)sub_20E6EA1C0();
    v18 = objc_msgSend(v4, sel_cborWithUTF8String_, v17);

    *(_QWORD *)(inited + 64) = v18;
    *(_QWORD *)(inited + 72) = v9;
    v19 = v9;
    sub_20E6A5548(inited);
    sub_20E6BC5B8();
    sub_20E6B30EC();
    v20 = (void *)sub_20E6EA148();
    swift_bridgeObjectRelease();
    v21 = objc_msgSend(v4, sel_cborWithDictionary_, v20);

    v22 = v21;
    sub_20E6E9BF0();
    if (v23 >> 60 != 15)
    {

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t ASCTAPAuthenticatorMakeCredentialResponse.attestationFormat.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ASCTAPAuthenticatorMakeCredentialResponse.attestationFormat.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ASCTAPAuthenticatorMakeCredentialResponse.attestationFormat.modify())()
{
  return nullsub_1;
}

uint64_t ASCTAPAuthenticatorMakeCredentialResponse.authData.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_20E66A990(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t ASCTAPAuthenticatorMakeCredentialResponse.authData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_20E6673F4(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*ASCTAPAuthenticatorMakeCredentialResponse.authData.modify())()
{
  return nullsub_1;
}

uint64_t ASCTAPAuthenticatorMakeCredentialResponse.attestationStatement.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_20E66A990(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t ASCTAPAuthenticatorMakeCredentialResponse.attestationStatement.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_20E6673F4(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*ASCTAPAuthenticatorMakeCredentialResponse.attestationStatement.modify())()
{
  return nullsub_1;
}

uint64_t ASCTAPAuthenticatorMakeCredentialResponse.WebAuthnCodingKeys.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6174614468747561;
  if (*v0 != 1)
    v1 = 0x746D7453747461;
  if (*v0)
    return v1;
  else
    return 7630182;
}

AuthenticationServicesCore::ASCTAPAuthenticatorMakeCredentialResponse::WebAuthnCodingKeys_optional __swiftcall ASCTAPAuthenticatorMakeCredentialResponse.WebAuthnCodingKeys.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  AuthenticationServicesCore::ASCTAPAuthenticatorMakeCredentialResponse::WebAuthnCodingKeys_optional result;
  char v5;

  v2 = v1;
  v3 = sub_20E6EA784();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t sub_20E6B91F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_20E67C000(*a1, *a2);
}

uint64_t sub_20E6B9204()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6B929C()
{
  sub_20E6EA250();
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E6B9310()
{
  sub_20E6EA988();
  sub_20E6EA250();
  swift_bridgeObjectRelease();
  return sub_20E6EA9A0();
}

AuthenticationServicesCore::ASCTAPAuthenticatorMakeCredentialResponse::WebAuthnCodingKeys_optional sub_20E6B93A4(Swift::String *a1)
{
  return ASCTAPAuthenticatorMakeCredentialResponse.WebAuthnCodingKeys.init(rawValue:)(*a1);
}

void sub_20E6B93B0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE300000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x6174614468747561;
  if (v2 != 1)
  {
    v5 = 0x746D7453747461;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 7630182;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_20E6B940C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  unint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _OWORD *v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  uint64_t v54;

  v7 = (void *)objc_opt_self();
  v8 = (void *)sub_20E6E9C68();
  v9 = objc_msgSend(v7, sel_decodeFromData_, v8);

  if (!v9 || (v10 = objc_msgSend(v9, sel_dictionary), v9, !v10))
  {
    sub_20E6BD1F8();
    swift_allocError();
    *v29 = 0;
    v29[1] = 0;
LABEL_14:
    swift_willThrow();
    v27 = a1;
    v28 = a2;
    goto LABEL_15;
  }
  sub_20E6BC5B8();
  sub_20E6B30EC();
  v11 = sub_20E6EA154();

  v12 = objc_msgSend(v7, sel_cborWithInteger_, 1);
  v13 = sub_20E6B8C7C(v12, v11);

  if (!v13 || (v14 = objc_msgSend(v13, sel_string), v13, !v14))
  {
    swift_bridgeObjectRelease();
    sub_20E6BD1F8();
    swift_allocError();
    *v30 = 0xD000000000000011;
    v30[1] = 0x800000020E6F8370;
    goto LABEL_14;
  }
  v54 = sub_20E6EA1CC();
  v16 = v15;

  v17 = objc_msgSend(v7, sel_cborWithInteger_, 2);
  v18 = sub_20E6B8C7C(v17, v11);

  if (!v18 || (v19 = objc_msgSend(v18, sel_data), v18, !v19))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20E6BD1F8();
    swift_allocError();
    *v31 = xmmword_20E6F25C0;
    goto LABEL_14;
  }
  v44 = sub_20E6E9C80();
  v45 = v20;

  v21 = objc_msgSend(v7, sel_cborWithInteger_, 3);
  v22 = sub_20E6B8C7C(v21, v11);

  if (!v22)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_20E6BD1F8();
    swift_allocError();
    *v26 = 0xD000000000000014;
    v26[1] = 0x800000020E6F8390;
    swift_willThrow();
    sub_20E6673F4(a1, a2);
    v27 = v44;
    v28 = v45;
LABEL_15:
    sub_20E6673F4(v27, v28);
LABEL_16:
    sub_20E6777B4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
    return;
  }
  v23 = v22;
  v24 = sub_20E6E9BF0();
  if (v25 >> 60 == 15)
  {

    goto LABEL_10;
  }
  v42 = v24;
  v43 = v25;
  v32 = objc_msgSend(v7, sel_cborWithInteger_, 6);
  v33 = sub_20E6B8C7C(v32, v11);

  swift_bridgeObjectRelease();
  if (v33)
  {
    sub_20E6E9D40();
    swift_allocObject();
    sub_20E6E9D34();
    sub_20E6BD23C();
    sub_20E6E9D28();
    if (v3)
    {
      sub_20E6673F4(a1, a2);

      sub_20E6673F4(v44, v45);
      sub_20E66AA28(v42, v43);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_20E6673F4(a1, a2);
    swift_release();

    v37 = v46;
    v39 = v47;
    v34 = v48;
    v35 = v49;
    v40 = v50;
    v41 = v51;
    v36 = v52;
    v38 = v53;
  }
  else
  {
    sub_20E6673F4(a1, a2);

    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0uLL;
    v38 = 3;
    v39 = 0uLL;
    v40 = 0uLL;
    v41 = 0uLL;
  }
  *(_QWORD *)a3 = v54;
  *(_QWORD *)(a3 + 8) = v16;
  *(_QWORD *)(a3 + 16) = v44;
  *(_QWORD *)(a3 + 24) = v45;
  *(_QWORD *)(a3 + 32) = v42;
  *(_QWORD *)(a3 + 40) = v43;
  *(_OWORD *)(a3 + 48) = v37;
  *(_OWORD *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 80) = v34;
  *(_QWORD *)(a3 + 88) = v35;
  *(_OWORD *)(a3 + 96) = v40;
  *(_OWORD *)(a3 + 112) = v41;
  *(_QWORD *)(a3 + 128) = v36;
  *(_BYTE *)(a3 + 136) = v38;
}

void sub_20E6B98E8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t inited;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  char isUniquelyReferenced_nonNull_native;
  void *v42;
  id v43;
  unint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;

  v52 = sub_20E6E9D58();
  v51 = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v50 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v60 = *(_QWORD *)(v0 + 48);
  v61 = *(_QWORD *)(v0 + 56);
  v62 = *(_QWORD *)(v0 + 64);
  v63 = *(_QWORD *)(v0 + 72);
  v55 = *(_QWORD *)(v0 + 80);
  v53 = *(_QWORD *)(v0 + 88);
  v54 = *(_QWORD *)(v0 + 96);
  v56 = *(_QWORD *)(v0 + 104);
  v59 = *(_QWORD *)(v0 + 112);
  v58 = *(_QWORD *)(v0 + 120);
  v57 = *(_QWORD *)(v0 + 128);
  v4 = *(unsigned __int8 *)(v0 + 136);
  swift_bridgeObjectRetain();
  v5 = (void *)sub_20E6EA1C0();
  swift_bridgeObjectRelease();
  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_cborWithUTF8String_, v5);

  sub_20E66A990(v3, v2);
  v8 = (void *)sub_20E6E9C68();
  v9 = objc_msgSend(v6, sel_cborWithData_, v8);
  sub_20E6673F4(v3, v2);

  v10 = (void *)sub_20E6E9C68();
  v11 = objc_msgSend(v6, sel_decodeFromData_, v10);

  if (!v11)
    goto LABEL_18;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EF50);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_20E6EE510;
  *(_QWORD *)(inited + 32) = objc_msgSend(v6, sel_cborWithInteger_, 1);
  *(_QWORD *)(inited + 40) = v7;
  v13 = v7;
  *(_QWORD *)(inited + 48) = objc_msgSend(v6, sel_cborWithInteger_, 2);
  *(_QWORD *)(inited + 56) = v9;
  v14 = v9;
  *(_QWORD *)(inited + 64) = objc_msgSend(v6, sel_cborWithInteger_, 3);
  *(_QWORD *)(inited + 72) = v11;
  v15 = v11;
  v16 = sub_20E6A5548(inited);
  if (v4 == 3)
    goto LABEL_15;
  v46 = v15;
  v47 = v14;
  v48 = v13;
  v49 = v4;
  sub_20E6E9D94();
  swift_allocObject();
  v17 = v53;
  sub_20E677614(v60, v61, v62);
  v18 = v54;
  sub_20E677630(v54, v56, v59, v58, v57);
  sub_20E6E9D88();
  (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v50, *MEMORY[0x24BE10188], v52);
  sub_20E6E9D64();
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EAD0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EAD8);
  v20 = *(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_20E6EE520;
  v23 = v22 + v21;
  v24 = v23 + *(int *)(v19 + 48);
  if (qword_254A2DC68 != -1)
    swift_once();
  v25 = sub_20E6EA6D0();
  v26 = __swift_project_value_buffer(v25, (uint64_t)qword_254A2F800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v26, v25);
  *(_QWORD *)(v24 + 24) = &type metadata for CodingUserInfoKey.CBOREncodingFormat;
  *(_BYTE *)v24 = 0;
  sub_20E6A53AC(v22);
  sub_20E6E9D7C();
  v64 = v60;
  v65 = v61;
  v66 = v62;
  v27 = v55;
  v67 = v63;
  v68 = v55;
  v69 = v17;
  v28 = v56;
  v70 = v18;
  v71 = v56;
  v72 = v59;
  v73 = v58;
  v74 = v57;
  v29 = v49;
  v75 = v49;
  sub_20E6BD3B0();
  v30 = v76;
  v31 = sub_20E6E9D4C();
  v76 = v30;
  if (v30)
  {
    swift_release();

    swift_bridgeObjectRelease();
    sub_20E6777B4(v60, v61, v62, v63, v27, v17, v18, v28, v59, v58, v57, v29, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
    return;
  }
  v32 = (void *)v31;
  v33 = objc_msgSend(v6, sel_cborWithInteger_, 6);
  if ((v16 & 0xC000000000000001) == 0)
  {
    v40 = v32;
    v37 = v63;
    v38 = v62;
    v39 = v61;
    goto LABEL_14;
  }
  if (v16 < 0)
    v34 = v16;
  else
    v34 = v16 & 0xFFFFFFFFFFFFFF8;
  v35 = v32;
  v36 = sub_20E6EA580();
  v37 = v63;
  v38 = v62;
  v39 = v61;
  if (__OFADD__(v36, 1))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v16 = sub_20E6AE6E0(v34, v36 + 1);
LABEL_14:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v64 = v16;
  sub_20E6AFB94((uint64_t)v32, v33, isUniquelyReferenced_nonNull_native);
  swift_release();

  swift_bridgeObjectRelease();
  sub_20E6777B4(v60, v39, v38, v37, v55, v53, v54, v56, v59, v58, v57, v49, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
  v13 = v48;
  v14 = v47;
  v15 = v46;
LABEL_15:
  sub_20E6BC5B8();
  sub_20E6B30EC();
  swift_bridgeObjectRetain();
  v42 = (void *)sub_20E6EA148();
  swift_bridgeObjectRelease();
  v43 = objc_msgSend(v6, sel_cborWithDictionary_, v42);

  sub_20E6E9BF0();
  if (v44 >> 60 != 15)
  {

    swift_bridgeObjectRelease();
    return;
  }
LABEL_19:
  __break(1u);
}

uint64_t sub_20E6BA0B8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_20E6BA0F0 + 4 * byte_20E6F25D0[a1]))(0x69746E6564657263, 0xEA00000000006C61);
}

uint64_t sub_20E6BA0F0()
{
  return 0x6174614468747561;
}

uint64_t sub_20E6BA108()
{
  return 0x727574616E676973;
}

uint64_t sub_20E6BA124()
{
  return 1919251317;
}

unint64_t sub_20E6BA134()
{
  return 0xD000000000000013;
}

uint64_t sub_20E6BA150()
{
  return 0x656C655372657375;
}

unint64_t sub_20E6BA170()
{
  return 0xD000000000000018;
}

uint64_t sub_20E6BA190(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  int v52;
  char v53;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EF90);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v40 = v1[1];
  v41 = v8;
  v10 = *((_QWORD *)v1 + 4);
  v9 = *((_QWORD *)v1 + 5);
  v38 = *((_QWORD *)v1 + 6);
  v39 = v9;
  v11 = *((_QWORD *)v1 + 7);
  v36 = *((_QWORD *)v1 + 8);
  v37 = v11;
  v35 = *((_QWORD *)v1 + 9);
  v30 = *((_QWORD *)v1 + 10);
  v31 = *((_QWORD *)v1 + 11);
  v34 = *((_QWORD *)v1 + 12);
  v33 = *((_QWORD *)v1 + 13);
  v32 = *((_QWORD *)v1 + 14);
  v29 = *((_QWORD *)v1 + 15);
  v52 = *((unsigned __int8 *)v1 + 128);
  v28 = *((unsigned __int8 *)v1 + 129);
  v17 = *(__int128 *)((char *)v1 + 136);
  v27 = *((_QWORD *)v1 + 19);
  v26 = *((_QWORD *)v1 + 20);
  v25 = *((_QWORD *)v1 + 21);
  v24 = *((_QWORD *)v1 + 22);
  v23 = *((_QWORD *)v1 + 23);
  v22 = *((_QWORD *)v1 + 24);
  v21 = *((_QWORD *)v1 + 25);
  v20 = *((_QWORD *)v1 + 26);
  v19 = *((_QWORD *)v1 + 27);
  v18 = *((unsigned __int8 *)v1 + 224);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6BE3A4();
  v12 = v4;
  sub_20E6EA9C4();
  v42 = v41;
  v43 = v40;
  v44 = v10;
  v53 = 0;
  sub_20E6A3920();
  sub_20E6EA868();
  if (!v2)
  {
    v14 = v36;
    v13 = v37;
    v15 = v35;
    *(_QWORD *)&v42 = v39;
    *((_QWORD *)&v42 + 1) = v38;
    v53 = 1;
    sub_20E66AD88();
    sub_20E6EA88C();
    *(_QWORD *)&v42 = v13;
    *((_QWORD *)&v42 + 1) = v14;
    v53 = 2;
    sub_20E6EA88C();
    *(_QWORD *)&v42 = v15;
    *((_QWORD *)&v42 + 1) = v30;
    *(_QWORD *)&v43 = v31;
    *((_QWORD *)&v43 + 1) = v34;
    v44 = v33;
    v45 = v32;
    v53 = 3;
    sub_20E6A39EC();
    sub_20E6EA868();
    LOBYTE(v42) = 4;
    sub_20E6EA85C();
    LOBYTE(v42) = 5;
    sub_20E6EA844();
    v42 = v17;
    *(_QWORD *)&v43 = v27;
    *((_QWORD *)&v43 + 1) = v26;
    v44 = v25;
    v45 = v24;
    v46 = v23;
    v47 = v22;
    v48 = v21;
    v49 = v20;
    v50 = v19;
    v51 = v18;
    v53 = 6;
    sub_20E6BD3B0();
    sub_20E6EA868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v12);
}

uint64_t sub_20E6BA5CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char v93;
  uint64_t v94;
  __int128 v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char v109;
  int v110;
  __int16 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  unsigned __int8 v133;
  char v134;
  char v135;
  int v136;
  __int16 v137;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EF80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = 1;
  v9 = a1[3];
  v72 = a1;
  __swift_project_boxed_opaque_existential_1Tm(a1, v9);
  sub_20E6BE3A4();
  sub_20E6EA9AC();
  if (v2)
  {
    v73 = v2;
    v75 = 0;
    v76 = 0;
    v78 = 0;
    v77 = 0uLL;
    v74 = 0;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v72);
    sub_20E677F74(0, 0, 0, 0);
    sub_20E677FC0(v74, v77, *((uint64_t *)&v77 + 1), v78);
    return sub_20E6777B4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
  }
  else
  {
    v67 = a2;
    LOBYTE(v79) = 0;
    sub_20E6A3360();
    sub_20E6EA7D8();
    v11 = v94;
    v12 = v97;
    LOBYTE(v79) = 1;
    v13 = v95;
    v65 = v96;
    v66 = *((_QWORD *)&v95 + 1);
    sub_20E677DBC(v94, v95, *((uint64_t *)&v95 + 1), v96);
    v78 = sub_20E66AE8C();
    sub_20E6EA7FC();
    v62 = v11;
    v63 = v12;
    v64 = v13;
    v15 = v94;
    v14 = v95;
    LOBYTE(v79) = 2;
    sub_20E66A990(v94, v95);
    sub_20E6EA7FC();
    v68 = v14;
    v69 = v15;
    v17 = v94;
    v16 = v95;
    LOBYTE(v79) = 3;
    sub_20E66A990(v94, v95);
    sub_20E6A3630();
    sub_20E6EA7D8();
    v70 = v17;
    v71 = v16;
    v18 = v94;
    v19 = v97;
    v20 = v98;
    LOBYTE(v94) = 4;
    v77 = v95;
    v78 = v96;
    sub_20E677E08(v18, v95, *((uint64_t *)&v95 + 1), v96);
    v21 = sub_20E6EA7CC();
    v75 = v19;
    v76 = v20;
    v74 = v18;
    v61 = v21;
    v134 = v22 & 1;
    LOBYTE(v94) = 5;
    LOBYTE(v20) = v22;
    LODWORD(v19) = sub_20E6EA7B4();
    v135 = 6;
    sub_20E6BD23C();
    sub_20E6EA7D8();
    v73 = 0;
    v23 = v71;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v24 = v123;
    v25 = v124;
    v27 = v125;
    v26 = v126;
    v55 = v128;
    v56 = v127;
    v28 = v130;
    v54 = v129;
    v60 = v131;
    v58 = v132;
    v59 = v133;
    v52 = v130;
    v53 = v123;
    v57 = v124;
    sub_20E6777B4(v123, v124, v125, v126, v127, v128, v129, v130, v131, v132, *((uint64_t *)&v132 + 1), v133, (void (*)(void))sub_20E677614, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677630);
    sub_20E6777B4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
    v51 = v19;
    *(_QWORD *)&v79 = v62;
    *((_QWORD *)&v79 + 1) = v64;
    *(_QWORD *)&v80 = v66;
    *((_QWORD *)&v80 + 1) = v65;
    *(_QWORD *)&v81 = v63;
    *((_QWORD *)&v81 + 1) = v69;
    *(_QWORD *)&v82 = v68;
    *((_QWORD *)&v82 + 1) = v70;
    *(_QWORD *)&v83 = v23;
    *((_QWORD *)&v83 + 1) = v74;
    v84 = v77;
    *(_QWORD *)&v85 = v78;
    *((_QWORD *)&v85 + 1) = v75;
    *(_QWORD *)&v86 = v76;
    *((_QWORD *)&v86 + 1) = v61;
    LOBYTE(v87) = v20 & 1;
    BYTE1(v87) = v19;
    *((_QWORD *)&v87 + 1) = v24;
    *(_QWORD *)&v88 = v25;
    v49 = v26;
    v50 = v27;
    *((_QWORD *)&v88 + 1) = v27;
    *(_QWORD *)&v89 = v26;
    v30 = v55;
    v29 = v56;
    *((_QWORD *)&v89 + 1) = v56;
    *(_QWORD *)&v90 = v55;
    v31 = v54;
    *((_QWORD *)&v90 + 1) = v54;
    *(_QWORD *)&v91 = v28;
    v32 = v58;
    *((_QWORD *)&v91 + 1) = v60;
    v92 = v58;
    LOBYTE(v23) = v59;
    v93 = v59;
    sub_20E677C9C((uint64_t)&v79);
    sub_20E6777B4(v53, v57, v27, v26, v29, v30, v31, v52, v60, v32, *((uint64_t *)&v32 + 1), v23, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
    sub_20E677FC0(v74, v77, *((uint64_t *)&v77 + 1), v78);
    sub_20E6673F4(v70, v71);
    v34 = v68;
    v33 = v69;
    sub_20E6673F4(v69, v68);
    v36 = v62;
    v35 = v63;
    v38 = v64;
    v37 = v65;
    v39 = v66;
    sub_20E677F74(v62, v64, v66, v65);
    v40 = v92;
    v41 = v67;
    *(_OWORD *)(v67 + 192) = v91;
    *(_OWORD *)(v41 + 208) = v40;
    *(_BYTE *)(v41 + 224) = v93;
    v42 = v88;
    *(_OWORD *)(v41 + 128) = v87;
    *(_OWORD *)(v41 + 144) = v42;
    v43 = v90;
    *(_OWORD *)(v41 + 160) = v89;
    *(_OWORD *)(v41 + 176) = v43;
    v44 = v84;
    *(_OWORD *)(v41 + 64) = v83;
    *(_OWORD *)(v41 + 80) = v44;
    v45 = v86;
    *(_OWORD *)(v41 + 96) = v85;
    *(_OWORD *)(v41 + 112) = v45;
    v46 = v80;
    *(_OWORD *)v41 = v79;
    *(_OWORD *)(v41 + 16) = v46;
    v47 = v82;
    *(_OWORD *)(v41 + 32) = v81;
    *(_OWORD *)(v41 + 48) = v47;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v72);
    v94 = v36;
    *(_QWORD *)&v95 = v38;
    *((_QWORD *)&v95 + 1) = v39;
    v96 = v37;
    v97 = v35;
    v98 = v33;
    v99 = v34;
    v100 = v70;
    v101 = v71;
    v102 = v74;
    v103 = v77;
    v104 = v78;
    v105 = v75;
    v106 = v76;
    v107 = v61;
    v108 = v134;
    v109 = v51;
    v110 = v136;
    v111 = v137;
    v112 = v53;
    v113 = v57;
    v114 = v50;
    v115 = v49;
    v116 = v56;
    v117 = v55;
    v118 = v54;
    v119 = v52;
    v120 = v60;
    v121 = v58;
    v122 = v59;
    return sub_20E677E54((uint64_t)&v94);
  }
}

BOOL sub_20E6BAF48(char *a1, char *a2)
{
  return qword_20E6F29E0[*a1] == qword_20E6F29E0[*a2];
}

uint64_t sub_20E6BAF6C()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6BAFB8()
{
  return sub_20E6EA994();
}

uint64_t sub_20E6BAFEC()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6BB034@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_20E6BE58C(*a1);
  *a2 = result;
  return result;
}

void sub_20E6BB05C(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_20E6F29E0[*v1];
}

uint64_t sub_20E6BB074()
{
  unsigned __int8 *v0;

  return sub_20E6BA0B8(*v0);
}

uint64_t sub_20E6BB07C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E6BE5B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E6BB0A0()
{
  char *v0;

  return qword_20E6F29E0[*v0];
}

uint64_t sub_20E6BB0B8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_20E6BE58C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_20E6BB0DC()
{
  sub_20E6BE3A4();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6BB104()
{
  sub_20E6BE3A4();
  return sub_20E6EA9DC();
}

uint64_t sub_20E6BB12C()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v23[14];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;

  v1 = sub_20E6E9D58();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0[13];
  v37 = v0[12];
  v38 = v5;
  v39 = *((_BYTE *)v0 + 224);
  v6 = v0[9];
  v33 = v0[8];
  v34 = v6;
  v7 = v0[11];
  v35 = v0[10];
  v36 = v7;
  v8 = v0[5];
  v29 = v0[4];
  v30 = v8;
  v9 = v0[7];
  v31 = v0[6];
  v32 = v9;
  v10 = v0[1];
  v25 = *v0;
  v26 = v10;
  v11 = v0[3];
  v27 = v0[2];
  v28 = v11;
  sub_20E6E9D94();
  swift_allocObject();
  sub_20E6E9D88();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BE10188], v1);
  sub_20E6E9D64();
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EAD0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EAD8);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(v12 - 8) + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_20E6EE520;
  v16 = *(int *)(v12 + 48);
  if (qword_254A2DC68 != -1)
    swift_once();
  v17 = v15 + v14;
  v18 = v15 + v14 + v16;
  v19 = sub_20E6EA6D0();
  v20 = __swift_project_value_buffer(v19, (uint64_t)qword_254A2F800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v20, v19);
  *(_QWORD *)(v18 + 24) = &type metadata for CodingUserInfoKey.CBOREncodingFormat;
  *(_BYTE *)v18 = 0;
  sub_20E6A53AC(v15);
  sub_20E6E9D7C();
  v23[12] = v37;
  v23[13] = v38;
  v24 = v39;
  v23[8] = v33;
  v23[9] = v34;
  v23[10] = v35;
  v23[11] = v36;
  v23[4] = v29;
  v23[5] = v30;
  v23[6] = v31;
  v23[7] = v32;
  v23[0] = v25;
  v23[1] = v26;
  v23[2] = v27;
  v23[3] = v28;
  sub_20E6BD36C();
  v21 = sub_20E6E9D70();
  swift_release();
  return v21;
}

uint64_t sub_20E6BB378@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_20E6BA5CC(a1, a2);
}

uint64_t sub_20E6BB38C(_QWORD *a1)
{
  return sub_20E6BA190(a1);
}

uint64_t ASCTAPAuthenticatorMakeCredentialResponse.init(attestationObject:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;

  v6 = (void *)objc_opt_self();
  v7 = (void *)sub_20E6E9C68();
  v8 = objc_msgSend(v6, sel_decodeFromData_, v7);

  if (!v8)
    goto LABEL_9;
  v9 = objc_msgSend(v8, sel_dictionary);

  if (!v9)
    goto LABEL_9;
  sub_20E6BC5B8();
  sub_20E6B30EC();
  v10 = sub_20E6EA154();

  v11 = (void *)sub_20E6EA1C0();
  v12 = objc_msgSend(v6, sel_cborWithUTF8String_, v11);

  v13 = sub_20E6B8C7C(v12, v10);
  if (!v13 || (v14 = objc_msgSend(v13, sel_string), v13, !v14))
  {
    swift_bridgeObjectRelease();
LABEL_9:
    sub_20E6673F4(a1, a2);
    goto LABEL_10;
  }
  v15 = sub_20E6EA1CC();
  v17 = v16;

  v18 = (void *)sub_20E6EA1C0();
  v19 = objc_msgSend(v6, sel_cborWithUTF8String_, v18);

  v20 = sub_20E6B8C7C(v19, v10);
  if (!v20)
  {
    sub_20E6673F4(a1, a2);
    swift_bridgeObjectRelease();
LABEL_17:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v21 = v20;
  v22 = sub_20E6E9BF0();
  if (v23 >> 60 != 15)
  {
    v25 = v23;
    v33 = v15;
    v34 = v22;
    v26 = (void *)sub_20E6EA1C0();
    v27 = objc_msgSend(v6, sel_cborWithUTF8String_, v26);

    v28 = sub_20E6B8C7C(v27, v10);
    swift_bridgeObjectRelease();
    if (v28)
    {
      v29 = objc_msgSend(v28, sel_data);

      if (v29)
      {
        v30 = sub_20E6E9C80();
        v32 = v31;
        sub_20E6673F4(a1, a2);

        *(_QWORD *)&v35 = v33;
        *((_QWORD *)&v35 + 1) = v17;
        v36 = v30;
        v37 = v32;
        v38 = v34;
        v39 = v25;
        v40 = 0u;
        v41 = 0u;
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        v45 = 0;
        v46 = 3;
        nullsub_1(&v35);
        return sub_20E6BC570((uint64_t)&v35, a3);
      }
    }
    sub_20E6673F4(a1, a2);
    sub_20E66AA28(v34, v25);

    goto LABEL_17;
  }
  sub_20E6673F4(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_10:
  sub_20E6BC554(&v35);
  return sub_20E6BC570((uint64_t)&v35, a3);
}

uint64_t sub_20E6BB6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  char v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  int v51;
  char v52;
  char v53;
  char v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  char v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  char v139;
  _QWORD v140[5];
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v137 = *(_QWORD **)(a1 + 32);
  v138 = *(_QWORD *)(a1 + 24);
  v135 = *(_QWORD *)(a1 + 48);
  v136 = *(_QWORD *)(a1 + 40);
  v131 = *(_QWORD *)(a1 + 64);
  v132 = *(_QWORD *)(a1 + 56);
  v133 = *(_QWORD *)(a1 + 80);
  v126 = *(_QWORD *)(a1 + 88);
  v127 = *(_QWORD *)(a1 + 96);
  v123 = *(_QWORD *)(a1 + 104);
  v128 = *(_QWORD *)(a1 + 112);
  v129 = *(_QWORD *)(a1 + 72);
  v116 = *(_QWORD *)(a1 + 120);
  v118 = *(_BYTE *)(a1 + 128);
  v117 = *(unsigned __int8 *)(a1 + 129);
  v6 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  v10 = *(_QWORD *)(a1 + 168);
  v9 = *(_QWORD *)(a1 + 176);
  v12 = *(_QWORD *)(a1 + 184);
  v11 = *(_QWORD *)(a1 + 192);
  v13 = *(_QWORD *)(a1 + 200);
  v14 = *(_QWORD *)(a1 + 208);
  v15 = *(_QWORD *)(a1 + 216);
  v16 = *(unsigned __int8 *)(a1 + 224);
  v18 = *(_QWORD *)a2;
  v17 = *(_QWORD *)(a2 + 8);
  v19 = *(_QWORD *)(a2 + 16);
  v20 = *(_QWORD *)(a2 + 24);
  v21 = *(_QWORD **)(a2 + 32);
  v130 = *(_QWORD *)(a2 + 72);
  v134 = *(_QWORD *)(a2 + 80);
  v124 = *(_QWORD *)(a2 + 88);
  v125 = *(_QWORD *)(a2 + 96);
  v121 = *(_QWORD *)(a2 + 104);
  v122 = *(_QWORD *)(a2 + 112);
  v119 = *(unsigned __int8 *)(a2 + 128);
  v120 = *(unsigned __int8 *)(a2 + 129);
  v113 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 152);
  v114 = *(_QWORD *)(a2 + 144);
  v115 = *(_QWORD *)(a2 + 120);
  v24 = *(_QWORD *)(a2 + 160);
  v23 = *(_QWORD *)(a2 + 168);
  v26 = *(_QWORD *)(a2 + 176);
  v25 = *(_QWORD *)(a2 + 184);
  v27 = *(_QWORD *)(a2 + 192);
  v112 = *(_QWORD *)(a2 + 200);
  v28 = *(_QWORD *)(a2 + 208);
  v111 = *(_QWORD *)(a2 + 216);
  v29 = *(unsigned __int8 *)(a2 + 224);
  if (!v3)
  {
    if (!v17)
      goto LABEL_19;
    goto LABEL_12;
  }
  if (!v17)
  {
LABEL_12:
    sub_20E677DBC(v2, v3, v4, v138);
    sub_20E677DBC(v18, v17, v19, v20);
    sub_20E677F74(v2, v3, v4, v138);
    sub_20E677F74(v18, v17, v19, v20);
    return 0;
  }
  v107 = v9;
  v109 = *(_QWORD *)(a2 + 208);
  v81 = *(_QWORD *)(a2 + 160);
  v75 = *(_QWORD *)(a2 + 168);
  v77 = *(_QWORD *)(a2 + 176);
  v83 = *(_QWORD *)(a2 + 184);
  v79 = *(_QWORD *)(a2 + 192);
  v85 = v16;
  v99 = v15;
  v101 = v14;
  v103 = v13;
  v105 = v8;
  v87 = v6;
  v89 = v5;
  v91 = v7;
  v93 = v10;
  v95 = v12;
  v97 = v11;
  if (v2 != v18 || v3 != v17)
  {
    v30 = sub_20E6EA8EC();
    result = 0;
    if ((v30 & 1) == 0)
      return result;
  }
  v32 = v2;
  v33 = v2;
  v34 = v4;
  sub_20E677DBC(v32, v3, v4, v138);
  sub_20E677DBC(v18, v17, v19, v20);
  sub_20E6B0F54(v4, v138);
  if ((v35 & 1) == 0)
  {
    sub_20E677F74(v18, v17, v19, v20);
    v37 = v33;
    v38 = v3;
    v39 = v4;
    v40 = v138;
LABEL_14:
    sub_20E677F74(v37, v38, v39, v40);
    return 0;
  }
  v36 = v33;
  if (!v137)
  {
    v28 = v109;
    if (!v21)
    {
      sub_20E677F74(v18, v17, v19, v20);
      sub_20E677F74(v36, v3, v34, v138);
      v12 = v95;
      v11 = v97;
      v8 = v105;
      v9 = v107;
      v7 = v91;
      v10 = v93;
      v6 = v87;
      v5 = v89;
      v14 = v101;
      v13 = v103;
      v15 = v99;
      v16 = v85;
      v26 = v77;
      v27 = v79;
      v24 = v81;
      v25 = v83;
      v23 = v75;
      goto LABEL_19;
    }
    sub_20E677F74(v18, v17, v19, v20);
    sub_20E677F74(v36, v3, v34, v138);
    return 0;
  }
  v28 = v109;
  if (!v21)
  {
    sub_20E677F74(v18, v17, v19, v20);
    v37 = v36;
    v38 = v3;
    v39 = v34;
    v40 = v138;
    goto LABEL_14;
  }
  v74 = sub_20E6D1A0C(v137, v21);
  sub_20E677F74(v18, v17, v19, v20);
  sub_20E677F74(v36, v3, v34, v138);
  v12 = v95;
  v11 = v97;
  v8 = v105;
  v9 = v107;
  v7 = v91;
  v10 = v93;
  v6 = v87;
  v5 = v89;
  v14 = v101;
  v13 = v103;
  v15 = v99;
  v16 = v85;
  v26 = v77;
  v27 = v79;
  v24 = v81;
  v25 = v83;
  v23 = v75;
  if ((v74 & 1) == 0)
    return 0;
LABEL_19:
  v96 = v12;
  v98 = v11;
  v86 = v16;
  v106 = v8;
  v108 = v9;
  v92 = v7;
  v94 = v10;
  v102 = v14;
  v104 = v13;
  v100 = v15;
  v41 = v29;
  v110 = v28;
  v82 = v24;
  v76 = v23;
  v78 = v26;
  v84 = v25;
  v80 = v27;
  v88 = v6;
  v90 = v5;
  sub_20E6B0F54(v136, v135);
  if ((v42 & 1) == 0)
    return 0;
  sub_20E6B0F54(v132, v131);
  if ((v43 & 1) == 0)
    return 0;
  if (v133)
  {
    if (v134)
    {
      if (v129 != v130 || v133 != v134)
      {
        v44 = sub_20E6EA8EC();
        result = 0;
        if ((v44 & 1) == 0)
          return result;
      }
      sub_20E677E08(v129, v133, v126, v127);
      sub_20E677E08(v130, v134, v124, v125);
      sub_20E6B0F54(v126, v127);
      if ((v45 & 1) != 0)
      {
        if (v123 == v121 && v128 == v122)
        {
          sub_20E677FC0(v130, v134, v124, v125);
          sub_20E677FC0(v129, v133, v126, v127);
        }
        else
        {
          v50 = sub_20E6EA8EC();
          sub_20E677FC0(v130, v134, v124, v125);
          sub_20E677FC0(v129, v133, v126, v127);
          result = 0;
          if ((v50 & 1) == 0)
            return result;
        }
        goto LABEL_37;
      }
      sub_20E677FC0(v130, v134, v124, v125);
      v46 = v129;
      v47 = v133;
      v48 = v126;
      v49 = v127;
      goto LABEL_33;
    }
LABEL_31:
    sub_20E677E08(v129, v133, v126, v127);
    sub_20E677E08(v130, v134, v124, v125);
    sub_20E677FC0(v129, v133, v126, v127);
    v46 = v130;
    v47 = v134;
    v48 = v124;
    v49 = v125;
LABEL_33:
    sub_20E677FC0(v46, v47, v48, v49);
    return 0;
  }
  if (v134)
    goto LABEL_31;
LABEL_37:
  if ((v118 & 1) != 0)
  {
    v51 = v120;
    if (!v119)
      return 0;
  }
  else
  {
    v52 = v119;
    if (v116 != v115)
      v52 = 1;
    v51 = v120;
    if ((v52 & 1) != 0)
      return 0;
  }
  if (v117 == 2)
  {
    if (v51 != 2)
      return 0;
LABEL_48:
    v53 = v86;
    if (v86 == 3)
    {
      v54 = v41;
      v55 = v41 == 3;
      v57 = v96;
      v56 = v98;
      v59 = v106;
      v58 = v108;
      v61 = v92;
      v60 = v94;
      v62 = v88;
      v63 = v90;
      v64 = v102;
      v65 = v104;
      v66 = v100;
      v67 = v82;
      v68 = v84;
      if (!v55)
        goto LABEL_54;
    }
    else
    {
      v148 = v88;
      v149 = v90;
      v150 = v106;
      v151 = v92;
      v152 = v94;
      v153 = v108;
      v154 = v96;
      v155 = v98;
      v156 = v104;
      v157 = v102;
      v158 = v100;
      v159 = v86;
      if (v41 == 3)
      {
        sub_20E677614(v88, v90, v106);
        sub_20E677630(v96, v98, v104, v102, v100);
        sub_20E677614(v88, v90, v106);
        sub_20E677630(v96, v98, v104, v102, v100);
        sub_20E677840(v88, v90, v106);
        sub_20E67785C(v96, v98, v104, v102, v100);
        v54 = 3;
        v53 = v86;
        v66 = v100;
        v64 = v102;
        v65 = v104;
        v59 = v106;
        v62 = v88;
        v63 = v90;
        v61 = v92;
        v60 = v94;
        v58 = v108;
        v57 = v96;
        v56 = v98;
        v67 = v82;
        v68 = v84;
LABEL_54:
        v148 = v62;
        v149 = v63;
        v150 = v59;
        v151 = v61;
        v152 = v60;
        v153 = v58;
        v154 = v57;
        v155 = v56;
        v156 = v65;
        v157 = v64;
        v158 = v66;
        v159 = v53;
        v160 = v113;
        v161 = v114;
        v162 = v22;
        v163 = v67;
        v164 = v76;
        v165 = v78;
        v166 = v68;
        v167 = v80;
        v168 = v112;
        v169 = v110;
        v170 = v111;
        v171 = v54;
        sub_20E6777B4(v113, v114, v22, v67, v76, v78, v68, v80, v112, v110, v111, v54, (void (*)(void))sub_20E677614, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677630);
        sub_20E6BD280((uint64_t)&v148);
        return 0;
      }
      v140[0] = v113;
      v140[1] = v114;
      v140[2] = v22;
      v140[3] = v82;
      v140[4] = v76;
      v141 = v78;
      v142 = v84;
      v143 = v80;
      v144 = v112;
      v145 = v28;
      v146 = v111;
      v147 = v41;
      sub_20E6777B4(v88, v90, v106, v92, v94, v108, v96, v98, v104, v102, v100, v86, (void (*)(void))sub_20E677614, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677630);
      sub_20E677614(v88, v90, v106);
      sub_20E677630(v96, v98, v104, v102, v100);
      v139 = _s26AuthenticationServicesCore21ASCTAPExtensionOutputV2eeoiySbAC_ACtFZ_0((uint64_t)&v148, (uint64_t)v140);
      v69 = v154;
      v70 = v155;
      v71 = v156;
      v72 = v157;
      v73 = v158;
      sub_20E677840(v148, v149, v150);
      sub_20E67785C(v69, v70, v71, v72, v73);
      sub_20E6777B4(v88, v90, v106, v92, v94, v108, v96, v98, v104, v102, v100, v86, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
      if ((v139 & 1) == 0)
        return 0;
    }
    return 1;
  }
  result = 0;
  if (v51 != 2 && ((((v117 & 1) == 0) ^ v51) & 1) != 0)
    goto LABEL_48;
  return result;
}

BOOL _s26AuthenticationServicesCore41ASCTAPAuthenticatorMakeCredentialResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BOOL8 result;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  _QWORD v52[5];
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v42 = *(_QWORD *)(a1 + 56);
  v43 = *(_QWORD *)(a1 + 64);
  v46 = *(_QWORD *)(a1 + 48);
  v47 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 96);
  v48 = *(_QWORD *)(a1 + 80);
  v49 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 104);
  v40 = *(_QWORD *)(a1 + 120);
  v41 = *(_QWORD *)(a1 + 112);
  v50 = *(_QWORD *)(a1 + 128);
  v51 = *(unsigned __int8 *)(a1 + 136);
  v32 = *(_QWORD *)(a2 + 48);
  v33 = *(_QWORD *)(a2 + 56);
  v34 = *(_QWORD *)(a2 + 64);
  v35 = *(_QWORD *)(a2 + 72);
  v36 = *(_QWORD *)(a2 + 80);
  v37 = *(_QWORD *)(a2 + 88);
  v38 = *(_QWORD *)(a2 + 96);
  v39 = *(_QWORD *)(a2 + 104);
  v30 = *(_QWORD *)(a2 + 120);
  v31 = *(_QWORD *)(a2 + 112);
  v29 = *(_QWORD *)(a2 + 128);
  v44 = *(unsigned __int8 *)(a2 + 136);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    || (v8 = sub_20E6EA8EC(), result = 0, (v8 & 1) != 0))
  {
    sub_20E6B0F54(v2, v3);
    if ((v10 & 1) != 0)
    {
      sub_20E6B0F54(v4, v5);
      if ((v11 & 1) != 0)
      {
        v12 = v51;
        if (v51 == 3)
        {
          v13 = v44;
          v14 = v7;
          v15 = v6;
          v17 = v48;
          v16 = v49;
          v19 = v46;
          v18 = v47;
          v21 = v42;
          v20 = v43;
          v23 = v40;
          v22 = v41;
          if (v44 == 3)
            return 1;
        }
        else
        {
          v19 = v46;
          v18 = v47;
          v21 = v42;
          v20 = v43;
          v60 = v46;
          v61 = v42;
          v62 = v43;
          v63 = v47;
          v17 = v48;
          v16 = v49;
          v64 = v48;
          v65 = v49;
          v15 = v6;
          v66 = v6;
          v67 = v7;
          v14 = v7;
          v23 = v40;
          v22 = v41;
          v68 = v41;
          v69 = v40;
          v70 = v50;
          v71 = v51;
          if (v44 != 3)
          {
            v52[0] = v32;
            v52[1] = v33;
            v52[2] = v34;
            v52[3] = v35;
            v52[4] = v36;
            v53 = v37;
            v54 = v38;
            v55 = v39;
            v56 = v31;
            v57 = v30;
            v58 = v29;
            v59 = v44;
            sub_20E6777B4(v46, v42, v43, v47, v48, v49, v15, v14, v41, v40, v50, v51, (void (*)(void))sub_20E677614, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677630);
            sub_20E677614(v46, v42, v43);
            sub_20E677630(v15, v14, v41, v40, v50);
            v45 = _s26AuthenticationServicesCore21ASCTAPExtensionOutputV2eeoiySbAC_ACtFZ_0((uint64_t)&v60, (uint64_t)v52);
            v24 = v66;
            v25 = v67;
            v26 = v68;
            v27 = v69;
            v28 = v70;
            sub_20E677840(v60, v61, v62);
            sub_20E67785C(v24, v25, v26, v27, v28);
            sub_20E6777B4(v46, v42, v43, v47, v48, v49, v15, v14, v41, v40, v50, v51, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
            return (v45 & 1) != 0;
          }
          sub_20E677614(v46, v42, v43);
          sub_20E677630(v15, v14, v41, v40, v50);
          sub_20E677614(v46, v42, v43);
          sub_20E677630(v15, v14, v41, v40, v50);
          sub_20E677840(v46, v42, v43);
          sub_20E67785C(v15, v14, v41, v40, v50);
          v13 = 3;
          v12 = v51;
        }
        v60 = v19;
        v61 = v21;
        v62 = v20;
        v63 = v18;
        v64 = v17;
        v65 = v16;
        v66 = v15;
        v67 = v14;
        v68 = v22;
        v69 = v23;
        v70 = v50;
        v71 = v12;
        v72 = v32;
        v73 = v33;
        v74 = v34;
        v75 = v35;
        v76 = v36;
        v77 = v37;
        v78 = v38;
        v79 = v39;
        v80 = v31;
        v81 = v30;
        v82 = v29;
        v83 = v13;
        sub_20E6777B4(v32, v33, v34, v35, v36, v37, v38, v39, v31, v30, v29, v13, (void (*)(void))sub_20E677614, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E677630);
        sub_20E6BD280((uint64_t)&v60);
      }
    }
    return 0;
  }
  return result;
}

double sub_20E6BC554(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 121) = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_20E6BC570(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DFB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_20E6BC5B8()
{
  unint64_t result;

  result = qword_254A2E950;
  if (!qword_254A2E950)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_254A2E950);
  }
  return result;
}

unint64_t sub_20E6BC5F8()
{
  unint64_t result;

  result = qword_254A2EF40;
  if (!qword_254A2EF40)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPAuthenticatorMakeCredentialResponse.WebAuthnCodingKeys, &type metadata for ASCTAPAuthenticatorMakeCredentialResponse.WebAuthnCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EF40);
  }
  return result;
}

unint64_t sub_20E6BC63C(uint64_t a1)
{
  unint64_t result;

  result = sub_20E6BC660();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_20E6BC660()
{
  unint64_t result;

  result = qword_254A2EF48;
  if (!qword_254A2EF48)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPAuthenticatorMakeCredentialResponse, &type metadata for ASCTAPAuthenticatorMakeCredentialResponse);
    atomic_store(result, (unint64_t *)&qword_254A2EF48);
  }
  return result;
}

uint64_t destroy for ASCTAPAuthenticatorMakeCredentialResponse(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  swift_bridgeObjectRelease();
  sub_20E6673F4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  result = sub_20E6673F4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  if (*(_BYTE *)(a1 + 136) != 3)
  {
    if (*(_BYTE *)(a1 + 48) != 3)
    {
      v3 = *(_QWORD *)(a1 + 64);
      if (v3 >> 60 != 15)
        result = sub_20E6673F4(*(_QWORD *)(a1 + 56), v3);
    }
    if (*(_BYTE *)(a1 + 96) != 3)
    {
      v4 = *(_QWORD *)(a1 + 112);
      if (v4 >> 60 != 15)
      {
        result = sub_20E6673F4(*(_QWORD *)(a1 + 104), v4);
        v5 = *(_QWORD *)(a1 + 128);
        if (v5 >> 60 != 15)
          return sub_20E6673F4(*(_QWORD *)(a1 + 120), v5);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for ASCTAPAuthenticatorMakeCredentialResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  unsigned __int8 *v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  sub_20E66A990(v5, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  sub_20E66A990(v7, v8);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v9 = (_OWORD *)(a1 + 48);
  v10 = (unsigned __int8 *)(a2 + 48);
  v11 = *(unsigned __int8 *)(a2 + 136);
  if (v11 == 3)
  {
    v12 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v12;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
    v13 = *(_OWORD *)(a2 + 64);
    *v9 = *(_OWORD *)v10;
    *(_OWORD *)(a1 + 64) = v13;
  }
  else
  {
    v14 = *v10;
    if (v14 == 3)
    {
      v15 = *(_OWORD *)(a2 + 64);
      *v9 = *(_OWORD *)v10;
      *(_OWORD *)(a1 + 64) = v15;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    }
    else
    {
      *(_BYTE *)(a1 + 48) = v14;
      v16 = (uint64_t *)(a2 + 56);
      v17 = *(_QWORD *)(a2 + 64);
      if (v17 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 56) = *(_OWORD *)v16;
      }
      else
      {
        v18 = *v16;
        sub_20E66A990(*v16, *(_QWORD *)(a2 + 64));
        *(_QWORD *)(a1 + 56) = v18;
        *(_QWORD *)(a1 + 64) = v17;
      }
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    }
    v19 = *(unsigned __int8 *)(a2 + 96);
    if (v19 == 3)
    {
      v20 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v20;
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    }
    else
    {
      *(_BYTE *)(a1 + 96) = v19;
      v21 = *(_QWORD *)(a2 + 112);
      if (v21 >> 60 == 15)
      {
        v22 = *(_OWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 120) = v22;
      }
      else
      {
        v23 = *(_QWORD *)(a2 + 104);
        sub_20E66A990(v23, *(_QWORD *)(a2 + 112));
        *(_QWORD *)(a1 + 104) = v23;
        *(_QWORD *)(a1 + 112) = v21;
        v24 = (uint64_t *)(a2 + 120);
        v25 = *(_QWORD *)(a2 + 128);
        if (v25 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 120) = *(_OWORD *)v24;
        }
        else
        {
          v26 = *v24;
          sub_20E66A990(*v24, v25);
          *(_QWORD *)(a1 + 120) = v26;
          *(_QWORD *)(a1 + 128) = v25;
        }
      }
    }
    *(_BYTE *)(a1 + 136) = v11;
  }
  return a1;
}

uint64_t assignWithCopy for ASCTAPAuthenticatorMakeCredentialResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  unsigned __int8 *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t *v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  __int128 v54;
  _OWORD *v55;
  _OWORD *v56;
  __int128 v57;
  uint64_t v58;
  _OWORD *v59;
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  sub_20E66A990(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  sub_20E6673F4(v6, v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  sub_20E66A990(v8, v9);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  sub_20E6673F4(v10, v11);
  v12 = (_OWORD *)(a1 + 48);
  v13 = (unsigned __int8 *)(a2 + 48);
  v14 = *(unsigned __int8 *)(a2 + 136);
  if (*(_BYTE *)(a1 + 136) != 3)
  {
    if (v14 == 3)
    {
      sub_20E6BCD78(a1 + 48);
      v19 = *(_OWORD *)(a2 + 64);
      *v12 = *(_OWORD *)v13;
      *(_OWORD *)(a1 + 64) = v19;
      v21 = *(_OWORD *)(a2 + 96);
      v20 = *(_OWORD *)(a2 + 112);
      v22 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
      *(_OWORD *)(a1 + 96) = v21;
      *(_OWORD *)(a1 + 112) = v20;
      *(_OWORD *)(a1 + 80) = v22;
      return a1;
    }
    v26 = *v13;
    if (*(_BYTE *)v12 == 3)
    {
      if (v26 == 3)
      {
        v27 = *(_OWORD *)v13;
        v28 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
        *v12 = v27;
        *(_OWORD *)(a1 + 64) = v28;
LABEL_32:
        v46 = (_OWORD *)(a1 + 96);
        v48 = (_OWORD *)(a2 + 96);
        v47 = *(unsigned __int8 *)(a2 + 96);
        if (*(_BYTE *)(a1 + 96) != 3)
        {
          if (v47 == 3)
          {
            sub_20E6B53B8(a1 + 96);
            v51 = *(_QWORD *)(a2 + 128);
            v52 = *(_OWORD *)(a2 + 112);
            *v46 = *v48;
            *(_OWORD *)(a1 + 112) = v52;
            *(_QWORD *)(a1 + 128) = v51;
            goto LABEL_56;
          }
          *(_BYTE *)(a1 + 96) = v47;
          v55 = (_OWORD *)(a1 + 104);
          v56 = (_OWORD *)(a2 + 104);
          v53 = *(_QWORD *)(a2 + 112);
          if (*(_QWORD *)(a1 + 112) >> 60 != 15)
          {
            if (v53 >> 60 == 15)
            {
              sub_20E6B4CD8(a1 + 104);
              v62 = *(_OWORD *)(a2 + 120);
              *v55 = *v56;
              *(_OWORD *)(a1 + 120) = v62;
              goto LABEL_56;
            }
            v63 = *(_QWORD *)(a2 + 104);
            sub_20E66A990(v63, *(_QWORD *)(a2 + 112));
            v64 = *(_QWORD *)(a1 + 104);
            v65 = *(_QWORD *)(a1 + 112);
            *(_QWORD *)(a1 + 104) = v63;
            *(_QWORD *)(a1 + 112) = v53;
            sub_20E6673F4(v64, v65);
            v66 = (uint64_t *)(a2 + 120);
            v60 = *(_QWORD *)(a2 + 128);
            if (*(_QWORD *)(a1 + 128) >> 60 == 15)
            {
              if (v60 >> 60 != 15)
              {
                v61 = *v66;
                goto LABEL_46;
              }
            }
            else
            {
              if (v60 >> 60 != 15)
              {
                v67 = *v66;
                sub_20E66A990(*v66, *(_QWORD *)(a2 + 128));
                v68 = *(_QWORD *)(a1 + 120);
                v69 = *(_QWORD *)(a1 + 128);
                *(_QWORD *)(a1 + 120) = v67;
                *(_QWORD *)(a1 + 128) = v60;
                sub_20E6673F4(v68, v69);
                goto LABEL_56;
              }
              sub_20E66B4E0(a1 + 120);
            }
            *(_OWORD *)(a1 + 120) = *(_OWORD *)v66;
            goto LABEL_56;
          }
          if (v53 >> 60 == 15)
          {
            v57 = *(_OWORD *)(a2 + 120);
            *v55 = *v56;
            *(_OWORD *)(a1 + 120) = v57;
            goto LABEL_56;
          }
LABEL_43:
          v58 = *(_QWORD *)(a2 + 104);
          sub_20E66A990(v58, v53);
          *(_QWORD *)(a1 + 104) = v58;
          *(_QWORD *)(a1 + 112) = v53;
          v59 = (_OWORD *)(a2 + 120);
          v60 = *(_QWORD *)(a2 + 128);
          if (v60 >> 60 == 15)
          {
            *(_OWORD *)(a1 + 120) = *v59;
            goto LABEL_56;
          }
          v61 = *(_QWORD *)v59;
LABEL_46:
          sub_20E66A990(v61, v60);
          *(_QWORD *)(a1 + 120) = v61;
          *(_QWORD *)(a1 + 128) = v60;
          goto LABEL_56;
        }
        if (v47 == 3)
        {
          v49 = *v48;
          v50 = *(_OWORD *)(a2 + 112);
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
          *v46 = v49;
          *(_OWORD *)(a1 + 112) = v50;
          goto LABEL_56;
        }
        *(_BYTE *)(a1 + 96) = v47;
LABEL_38:
        v53 = *(_QWORD *)(a2 + 112);
        if (v53 >> 60 == 15)
        {
          v54 = *(_OWORD *)(a2 + 120);
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
          *(_OWORD *)(a1 + 120) = v54;
          goto LABEL_56;
        }
        goto LABEL_43;
      }
      *(_BYTE *)(a1 + 48) = v26;
      v33 = (_OWORD *)(a2 + 56);
      v34 = *(_QWORD *)(a2 + 64);
      if (v34 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 56) = *v33;
LABEL_31:
        *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
        v45 = *(_QWORD *)(a2 + 80);
        *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
        *(_QWORD *)(a1 + 80) = v45;
        goto LABEL_32;
      }
      v41 = *(_QWORD *)v33;
LABEL_26:
      sub_20E66A990(v41, v34);
      *(_QWORD *)(a1 + 56) = v41;
      *(_QWORD *)(a1 + 64) = v34;
      goto LABEL_31;
    }
    if (v26 == 3)
    {
      sub_20E6B5380(a1 + 48);
      v31 = *(_OWORD *)(a2 + 73);
      v32 = *(_OWORD *)(a2 + 64);
      *v12 = *(_OWORD *)v13;
      *(_OWORD *)(a1 + 64) = v32;
      *(_OWORD *)(a1 + 73) = v31;
      goto LABEL_32;
    }
    *(_BYTE *)(a1 + 48) = v26;
    v40 = (uint64_t *)(a2 + 56);
    v34 = *(_QWORD *)(a2 + 64);
    if (*(_QWORD *)(a1 + 64) >> 60 == 15)
    {
      if (v34 >> 60 != 15)
      {
        v41 = *v40;
        goto LABEL_26;
      }
    }
    else
    {
      if (v34 >> 60 != 15)
      {
        v42 = *v40;
        sub_20E66A990(*v40, *(_QWORD *)(a2 + 64));
        v43 = *(_QWORD *)(a1 + 56);
        v44 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 56) = v42;
        *(_QWORD *)(a1 + 64) = v34;
        sub_20E6673F4(v43, v44);
        goto LABEL_31;
      }
      sub_20E66B4E0(a1 + 56);
    }
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v40;
    goto LABEL_31;
  }
  if (v14 != 3)
  {
    v23 = *v13;
    if (v23 == 3)
    {
      v24 = *(_OWORD *)v13;
      v25 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *v12 = v24;
      *(_OWORD *)(a1 + 64) = v25;
    }
    else
    {
      *(_BYTE *)(a1 + 48) = v23;
      v29 = (uint64_t *)(a2 + 56);
      v30 = *(_QWORD *)(a2 + 64);
      if (v30 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 56) = *(_OWORD *)v29;
      }
      else
      {
        v35 = *v29;
        sub_20E66A990(*v29, *(_QWORD *)(a2 + 64));
        *(_QWORD *)(a1 + 56) = v35;
        *(_QWORD *)(a1 + 64) = v30;
      }
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      v36 = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v36;
    }
    v37 = *(unsigned __int8 *)(a2 + 96);
    if (v37 == 3)
    {
      v38 = *(_OWORD *)(a2 + 96);
      v39 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 96) = v38;
      *(_OWORD *)(a1 + 112) = v39;
LABEL_56:
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      return a1;
    }
    *(_BYTE *)(a1 + 96) = v37;
    goto LABEL_38;
  }
  v15 = *(_OWORD *)(a2 + 64);
  *v12 = *(_OWORD *)v13;
  *(_OWORD *)(a1 + 64) = v15;
  v16 = *(_OWORD *)(a2 + 80);
  v17 = *(_OWORD *)(a2 + 96);
  v18 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v17;
  *(_OWORD *)(a1 + 112) = v18;
  *(_OWORD *)(a1 + 80) = v16;
  return a1;
}

uint64_t sub_20E6BCD78(uint64_t a1)
{
  destroy for ASCTAPExtensionOutput(a1);
  return a1;
}

__n128 __swift_memcpy137_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for ASCTAPAuthenticatorMakeCredentialResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  unsigned __int8 *v10;
  int v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_20E6673F4(v5, v6);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_20E6673F4(v7, v8);
  v9 = (_OWORD *)(a1 + 48);
  v10 = (unsigned __int8 *)(a2 + 48);
  if (*(_BYTE *)(a1 + 136) == 3)
    goto LABEL_4;
  v11 = *(unsigned __int8 *)(a2 + 136);
  if (v11 != 3)
  {
    if (*(_BYTE *)v9 == 3)
    {
LABEL_8:
      v15 = *(_OWORD *)(a2 + 64);
      *v9 = *(_OWORD *)v10;
      *(_OWORD *)(a1 + 64) = v15;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      goto LABEL_15;
    }
    v14 = *v10;
    if (v14 == 3)
    {
      sub_20E6B5380(a1 + 48);
      goto LABEL_8;
    }
    *(_BYTE *)(a1 + 48) = v14;
    v16 = (_QWORD *)(a2 + 56);
    v17 = *(_QWORD *)(a1 + 64);
    if (v17 >> 60 != 15)
    {
      v18 = *(_QWORD *)(a2 + 64);
      if (v18 >> 60 != 15)
      {
        v19 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = *v16;
        *(_QWORD *)(a1 + 64) = v18;
        sub_20E6673F4(v19, v17);
        goto LABEL_14;
      }
      sub_20E66B4E0(a1 + 56);
    }
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v16;
LABEL_14:
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
LABEL_15:
    v20 = *(unsigned __int8 *)(a2 + 96);
    if (*(_BYTE *)(a1 + 96) != 3)
    {
      if (v20 != 3)
      {
        *(_BYTE *)(a1 + 96) = v20;
        v22 = *(_QWORD *)(a1 + 112);
        if (v22 >> 60 != 15)
        {
          v23 = *(_QWORD *)(a2 + 112);
          if (v23 >> 60 != 15)
          {
            v25 = *(_QWORD *)(a1 + 104);
            *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
            *(_QWORD *)(a1 + 112) = v23;
            sub_20E6673F4(v25, v22);
            v26 = (_QWORD *)(a2 + 120);
            v27 = *(_QWORD *)(a1 + 128);
            if (v27 >> 60 != 15)
            {
              v28 = *(_QWORD *)(a2 + 128);
              if (v28 >> 60 != 15)
              {
                v29 = *(_QWORD *)(a1 + 120);
                *(_QWORD *)(a1 + 120) = *v26;
                *(_QWORD *)(a1 + 128) = v28;
                sub_20E6673F4(v29, v27);
                goto LABEL_28;
              }
              sub_20E66B4E0(a1 + 120);
            }
            *(_OWORD *)(a1 + 120) = *(_OWORD *)v26;
LABEL_28:
            *(_BYTE *)(a1 + 136) = v11;
            return a1;
          }
          sub_20E6B4CD8(a1 + 104);
        }
        v24 = *(_OWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 120) = v24;
        goto LABEL_28;
      }
      sub_20E6B53B8(a1 + 96);
    }
    v21 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v21;
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    goto LABEL_28;
  }
  sub_20E6BCD78(a1 + 48);
LABEL_4:
  v12 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v12;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  v13 = *(_OWORD *)(a2 + 64);
  *v9 = *(_OWORD *)v10;
  *(_OWORD *)(a1 + 64) = v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPAuthenticatorMakeCredentialResponse(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 137))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPAuthenticatorMakeCredentialResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 136) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 137) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 137) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPAuthenticatorMakeCredentialResponse()
{
  return &type metadata for ASCTAPAuthenticatorMakeCredentialResponse;
}

uint64_t storeEnumTagSinglePayload for ASCTAPAuthenticatorMakeCredentialResponse.WebAuthnCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20E6BD110 + 4 * byte_20E6F25DC[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20E6BD144 + 4 * byte_20E6F25D7[v4]))();
}

uint64_t sub_20E6BD144(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6BD14C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6BD154);
  return result;
}

uint64_t sub_20E6BD160(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6BD168);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20E6BD16C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6BD174(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPAuthenticatorMakeCredentialResponse.WebAuthnCodingKeys()
{
  return &type metadata for ASCTAPAuthenticatorMakeCredentialResponse.WebAuthnCodingKeys;
}

uint64_t sub_20E6BD190(uint64_t result)
{
  switch((char)result)
  {
    case 0:
      result = 0;
      break;
    case 1:
      return result;
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      goto LABEL_5;
    case 5:
      result = 2;
      break;
    case 25:
      result = 3;
      break;
    case 34:
      result = 4;
      break;
    case 47:
      result = 5;
      break;
    default:
      if (result == 127)
        result = 6;
      else
LABEL_5:
        result = 7;
      break;
  }
  return result;
}

unint64_t sub_20E6BD1F8()
{
  unint64_t result;

  result = qword_254A2EF58;
  if (!qword_254A2EF58)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2824, &type metadata for ASCTAPAuthenticatorMakeCredentialResponse.DecodingError);
    atomic_store(result, (unint64_t *)&qword_254A2EF58);
  }
  return result;
}

unint64_t sub_20E6BD23C()
{
  unint64_t result;

  result = qword_254A2EF60;
  if (!qword_254A2EF60)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPExtensionOutput, &type metadata for ASCTAPExtensionOutput);
    atomic_store(result, (unint64_t *)&qword_254A2EF60);
  }
  return result;
}

uint64_t sub_20E6BD280(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 96);
  v2 = *(_QWORD *)(a1 + 120);
  v11 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v10 = *(_OWORD *)(a1 + 160);
  v7 = *(_QWORD *)(a1 + 176);
  v8 = *(_BYTE *)(a1 + 184);
  sub_20E6777B4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_BYTE *)(a1 + 88), (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
  sub_20E6777B4(v13, v12, v11, v2, v3, v4, v5, v6, v10, *((uint64_t *)&v10 + 1), v7, v8, (void (*)(void))sub_20E677840, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_20E67785C);
  return a1;
}

unint64_t sub_20E6BD36C()
{
  unint64_t result;

  result = qword_254A2EF68;
  if (!qword_254A2EF68)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F27FC, &type metadata for ASCTAPAuthenticatorGetAssertionResponse);
    atomic_store(result, (unint64_t *)&qword_254A2EF68);
  }
  return result;
}

unint64_t sub_20E6BD3B0()
{
  unint64_t result;

  result = qword_254A2EF70;
  if (!qword_254A2EF70)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCTAPExtensionOutput, &type metadata for ASCTAPExtensionOutput);
    atomic_store(result, (unint64_t *)&qword_254A2EF70);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ASCTAPAuthenticatorMakeCredentialResponse.DecodingError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ASCTAPAuthenticatorMakeCredentialResponse.DecodingError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ASCTAPAuthenticatorMakeCredentialResponse.DecodingError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPAuthenticatorMakeCredentialResponse.DecodingError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ASCTAPAuthenticatorMakeCredentialResponse.DecodingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

_QWORD *sub_20E6BD534(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPAuthenticatorMakeCredentialResponse.DecodingError()
{
  return &type metadata for ASCTAPAuthenticatorMakeCredentialResponse.DecodingError;
}

uint64_t destroy for ASCTAPAuthenticatorGetAssertionResponse(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    sub_20E6673F4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    swift_bridgeObjectRelease();
  }
  sub_20E6673F4(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  sub_20E6673F4(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  result = *(_QWORD *)(a1 + 80);
  if (result)
  {
    swift_bridgeObjectRelease();
    sub_20E6673F4(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
    result = swift_bridgeObjectRelease();
  }
  if (*(_BYTE *)(a1 + 224) != 3)
  {
    if (*(_BYTE *)(a1 + 136) != 3)
    {
      v3 = *(_QWORD *)(a1 + 152);
      if (v3 >> 60 != 15)
        result = sub_20E6673F4(*(_QWORD *)(a1 + 144), v3);
    }
    if (*(_BYTE *)(a1 + 184) != 3)
    {
      v4 = *(_QWORD *)(a1 + 200);
      if (v4 >> 60 != 15)
      {
        result = sub_20E6673F4(*(_QWORD *)(a1 + 192), v4);
        v5 = *(_QWORD *)(a1 + 216);
        if (v5 >> 60 != 15)
          return sub_20E6673F4(*(_QWORD *)(a1 + 208), v5);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for ASCTAPAuthenticatorGetAssertionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  _OWORD *v17;
  unsigned __int8 *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 24);
    swift_bridgeObjectRetain();
    sub_20E66A990(v5, v6);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  sub_20E66A990(v8, v9);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  sub_20E66A990(v10, v11);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  if (v12)
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = v12;
    v13 = *(_QWORD *)(a2 + 88);
    v14 = *(_QWORD *)(a2 + 96);
    swift_bridgeObjectRetain();
    sub_20E66A990(v13, v14);
    *(_QWORD *)(a1 + 88) = v13;
    *(_QWORD *)(a1 + 96) = v14;
    v15 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v15;
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v16;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  v17 = (_OWORD *)(a1 + 136);
  v18 = (unsigned __int8 *)(a2 + 136);
  v19 = *(unsigned __int8 *)(a2 + 224);
  if (v19 == 3)
  {
    v20 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v20;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
    v21 = *(_OWORD *)(a2 + 152);
    *v17 = *(_OWORD *)v18;
    *(_OWORD *)(a1 + 152) = v21;
  }
  else
  {
    v22 = *v18;
    if (v22 == 3)
    {
      v23 = *(_OWORD *)(a2 + 152);
      *v17 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 152) = v23;
      *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    }
    else
    {
      *(_BYTE *)(a1 + 136) = v22;
      v24 = (uint64_t *)(a2 + 144);
      v25 = *(_QWORD *)(a2 + 152);
      if (v25 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 144) = *(_OWORD *)v24;
      }
      else
      {
        v26 = *v24;
        sub_20E66A990(*v24, *(_QWORD *)(a2 + 152));
        *(_QWORD *)(a1 + 144) = v26;
        *(_QWORD *)(a1 + 152) = v25;
      }
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    }
    v27 = *(unsigned __int8 *)(a2 + 184);
    if (v27 == 3)
    {
      v28 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v28;
      *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    }
    else
    {
      *(_BYTE *)(a1 + 184) = v27;
      v29 = *(_QWORD *)(a2 + 200);
      if (v29 >> 60 == 15)
      {
        v30 = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 208) = v30;
      }
      else
      {
        v31 = *(_QWORD *)(a2 + 192);
        sub_20E66A990(v31, *(_QWORD *)(a2 + 200));
        *(_QWORD *)(a1 + 192) = v31;
        *(_QWORD *)(a1 + 200) = v29;
        v32 = (uint64_t *)(a2 + 208);
        v33 = *(_QWORD *)(a2 + 216);
        if (v33 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 208) = *(_OWORD *)v32;
        }
        else
        {
          v34 = *v32;
          sub_20E66A990(*v32, v33);
          *(_QWORD *)(a1 + 208) = v34;
          *(_QWORD *)(a1 + 216) = v33;
        }
      }
    }
    *(_BYTE *)(a1 + 224) = v19;
  }
  return a1;
}

uint64_t assignWithCopy for ASCTAPAuthenticatorGetAssertionResponse(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _OWORD *v37;
  unsigned __int8 *v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t *v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  _OWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  unint64_t v78;
  __int128 v79;
  _OWORD *v80;
  _OWORD *v81;
  __int128 v82;
  uint64_t v83;
  _OWORD *v84;
  unint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;

  v4 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 8))
  {
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v5 = *((_QWORD *)a2 + 2);
      v6 = *((_QWORD *)a2 + 3);
      sub_20E66A990(v5, v6);
      v7 = *(_QWORD *)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v6;
      sub_20E6673F4(v7, v8);
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_20E6BDEAC(a1);
      v11 = *((_QWORD *)a2 + 4);
      v12 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 32) = v11;
    }
  }
  else if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
    v10 = *((_QWORD *)a2 + 3);
    swift_bridgeObjectRetain();
    sub_20E66A990(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    swift_bridgeObjectRetain();
  }
  else
  {
    v13 = *a2;
    v14 = a2[1];
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)a1 = v13;
    *(_OWORD *)(a1 + 16) = v14;
  }
  v15 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)a2 + 6);
  sub_20E66A990(v15, v16);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v16;
  sub_20E6673F4(v17, v18);
  v19 = *((_QWORD *)a2 + 7);
  v20 = *((_QWORD *)a2 + 8);
  sub_20E66A990(v19, v20);
  v21 = *(_QWORD *)(a1 + 56);
  v22 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v19;
  *(_QWORD *)(a1 + 64) = v20;
  sub_20E6673F4(v21, v22);
  v23 = (_OWORD *)(a1 + 72);
  v24 = (__int128 *)((char *)a2 + 72);
  v25 = *((_QWORD *)a2 + 10);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v25)
    {
      *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v26 = *((_QWORD *)a2 + 11);
      v27 = *((_QWORD *)a2 + 12);
      sub_20E66A990(v26, v27);
      v28 = *(_QWORD *)(a1 + 88);
      v29 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 88) = v26;
      *(_QWORD *)(a1 + 96) = v27;
      sub_20E6673F4(v28, v29);
      *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
      *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_20E6BDEE0(a1 + 72);
      v33 = *(__int128 *)((char *)a2 + 88);
      v32 = *(__int128 *)((char *)a2 + 104);
      *v23 = *v24;
      *(_OWORD *)(a1 + 88) = v33;
      *(_OWORD *)(a1 + 104) = v32;
    }
  }
  else if (v25)
  {
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    v30 = *((_QWORD *)a2 + 11);
    v31 = *((_QWORD *)a2 + 12);
    swift_bridgeObjectRetain();
    sub_20E66A990(v30, v31);
    *(_QWORD *)(a1 + 88) = v30;
    *(_QWORD *)(a1 + 96) = v31;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    swift_bridgeObjectRetain();
  }
  else
  {
    v34 = *v24;
    v35 = *(__int128 *)((char *)a2 + 104);
    *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
    *(_OWORD *)(a1 + 104) = v35;
    *v23 = v34;
  }
  v36 = *((_QWORD *)a2 + 15);
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_QWORD *)(a1 + 120) = v36;
  *(_BYTE *)(a1 + 129) = *((_BYTE *)a2 + 129);
  v37 = (_OWORD *)(a1 + 136);
  v38 = (unsigned __int8 *)a2 + 136;
  v39 = *((unsigned __int8 *)a2 + 224);
  if (*(_BYTE *)(a1 + 224) != 3)
  {
    if (v39 == 3)
    {
      sub_20E6BCD78(a1 + 136);
      v44 = *(__int128 *)((char *)a2 + 152);
      *v37 = *(_OWORD *)v38;
      *(_OWORD *)(a1 + 152) = v44;
      v46 = *(__int128 *)((char *)a2 + 184);
      v45 = *(__int128 *)((char *)a2 + 200);
      v47 = *(__int128 *)((char *)a2 + 168);
      *(_OWORD *)(a1 + 209) = *(__int128 *)((char *)a2 + 209);
      *(_OWORD *)(a1 + 184) = v46;
      *(_OWORD *)(a1 + 200) = v45;
      *(_OWORD *)(a1 + 168) = v47;
      return a1;
    }
    v51 = *v38;
    if (*(_BYTE *)v37 == 3)
    {
      if (v51 == 3)
      {
        v52 = *(_OWORD *)v38;
        v53 = *(__int128 *)((char *)a2 + 152);
        *(_OWORD *)(a1 + 161) = *(__int128 *)((char *)a2 + 161);
        *v37 = v52;
        *(_OWORD *)(a1 + 152) = v53;
LABEL_46:
        v71 = (_OWORD *)(a1 + 184);
        v73 = (__int128 *)((char *)a2 + 184);
        v72 = *((unsigned __int8 *)a2 + 184);
        if (*(_BYTE *)(a1 + 184) != 3)
        {
          if (v72 == 3)
          {
            sub_20E6B53B8(a1 + 184);
            v76 = *((_QWORD *)a2 + 27);
            v77 = *(__int128 *)((char *)a2 + 200);
            *v71 = *v73;
            *(_OWORD *)(a1 + 200) = v77;
            *(_QWORD *)(a1 + 216) = v76;
            goto LABEL_70;
          }
          *(_BYTE *)(a1 + 184) = v72;
          v80 = (_OWORD *)(a1 + 192);
          v81 = a2 + 12;
          v78 = *((_QWORD *)a2 + 25);
          if (*(_QWORD *)(a1 + 200) >> 60 != 15)
          {
            if (v78 >> 60 == 15)
            {
              sub_20E6B4CD8(a1 + 192);
              v87 = a2[13];
              *v80 = *v81;
              *(_OWORD *)(a1 + 208) = v87;
              goto LABEL_70;
            }
            v88 = *((_QWORD *)a2 + 24);
            sub_20E66A990(v88, *((_QWORD *)a2 + 25));
            v89 = *(_QWORD *)(a1 + 192);
            v90 = *(_QWORD *)(a1 + 200);
            *(_QWORD *)(a1 + 192) = v88;
            *(_QWORD *)(a1 + 200) = v78;
            sub_20E6673F4(v89, v90);
            v91 = (uint64_t *)(a2 + 13);
            v85 = *((_QWORD *)a2 + 27);
            if (*(_QWORD *)(a1 + 216) >> 60 == 15)
            {
              if (v85 >> 60 != 15)
              {
                v86 = *v91;
                goto LABEL_60;
              }
            }
            else
            {
              if (v85 >> 60 != 15)
              {
                v92 = *v91;
                sub_20E66A990(*v91, *((_QWORD *)a2 + 27));
                v93 = *(_QWORD *)(a1 + 208);
                v94 = *(_QWORD *)(a1 + 216);
                *(_QWORD *)(a1 + 208) = v92;
                *(_QWORD *)(a1 + 216) = v85;
                sub_20E6673F4(v93, v94);
                goto LABEL_70;
              }
              sub_20E66B4E0(a1 + 208);
            }
            *(_OWORD *)(a1 + 208) = *(_OWORD *)v91;
            goto LABEL_70;
          }
          if (v78 >> 60 == 15)
          {
            v82 = a2[13];
            *v80 = *v81;
            *(_OWORD *)(a1 + 208) = v82;
            goto LABEL_70;
          }
LABEL_57:
          v83 = *((_QWORD *)a2 + 24);
          sub_20E66A990(v83, v78);
          *(_QWORD *)(a1 + 192) = v83;
          *(_QWORD *)(a1 + 200) = v78;
          v84 = a2 + 13;
          v85 = *((_QWORD *)a2 + 27);
          if (v85 >> 60 == 15)
          {
            *(_OWORD *)(a1 + 208) = *v84;
            goto LABEL_70;
          }
          v86 = *(_QWORD *)v84;
LABEL_60:
          sub_20E66A990(v86, v85);
          *(_QWORD *)(a1 + 208) = v86;
          *(_QWORD *)(a1 + 216) = v85;
          goto LABEL_70;
        }
        if (v72 == 3)
        {
          v74 = *v73;
          v75 = *(__int128 *)((char *)a2 + 200);
          *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
          *v71 = v74;
          *(_OWORD *)(a1 + 200) = v75;
          goto LABEL_70;
        }
        *(_BYTE *)(a1 + 184) = v72;
LABEL_52:
        v78 = *((_QWORD *)a2 + 25);
        if (v78 >> 60 == 15)
        {
          v79 = a2[13];
          *(_OWORD *)(a1 + 192) = a2[12];
          *(_OWORD *)(a1 + 208) = v79;
          goto LABEL_70;
        }
        goto LABEL_57;
      }
      *(_BYTE *)(a1 + 136) = v51;
      v58 = a2 + 9;
      v59 = *((_QWORD *)a2 + 19);
      if (v59 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 144) = *v58;
LABEL_45:
        *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
        v70 = *((_QWORD *)a2 + 21);
        *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
        *(_QWORD *)(a1 + 168) = v70;
        goto LABEL_46;
      }
      v66 = *(_QWORD *)v58;
LABEL_40:
      sub_20E66A990(v66, v59);
      *(_QWORD *)(a1 + 144) = v66;
      *(_QWORD *)(a1 + 152) = v59;
      goto LABEL_45;
    }
    if (v51 == 3)
    {
      sub_20E6B5380(a1 + 136);
      v56 = *(__int128 *)((char *)a2 + 161);
      v57 = *(__int128 *)((char *)a2 + 152);
      *v37 = *(_OWORD *)v38;
      *(_OWORD *)(a1 + 152) = v57;
      *(_OWORD *)(a1 + 161) = v56;
      goto LABEL_46;
    }
    *(_BYTE *)(a1 + 136) = v51;
    v65 = (uint64_t *)(a2 + 9);
    v59 = *((_QWORD *)a2 + 19);
    if (*(_QWORD *)(a1 + 152) >> 60 == 15)
    {
      if (v59 >> 60 != 15)
      {
        v66 = *v65;
        goto LABEL_40;
      }
    }
    else
    {
      if (v59 >> 60 != 15)
      {
        v67 = *v65;
        sub_20E66A990(*v65, *((_QWORD *)a2 + 19));
        v68 = *(_QWORD *)(a1 + 144);
        v69 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 144) = v67;
        *(_QWORD *)(a1 + 152) = v59;
        sub_20E6673F4(v68, v69);
        goto LABEL_45;
      }
      sub_20E66B4E0(a1 + 144);
    }
    *(_OWORD *)(a1 + 144) = *(_OWORD *)v65;
    goto LABEL_45;
  }
  if (v39 != 3)
  {
    v48 = *v38;
    if (v48 == 3)
    {
      v49 = *(_OWORD *)v38;
      v50 = *(__int128 *)((char *)a2 + 152);
      *(_OWORD *)(a1 + 161) = *(__int128 *)((char *)a2 + 161);
      *v37 = v49;
      *(_OWORD *)(a1 + 152) = v50;
    }
    else
    {
      *(_BYTE *)(a1 + 136) = v48;
      v54 = (uint64_t *)(a2 + 9);
      v55 = *((_QWORD *)a2 + 19);
      if (v55 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 144) = *(_OWORD *)v54;
      }
      else
      {
        v60 = *v54;
        sub_20E66A990(*v54, *((_QWORD *)a2 + 19));
        *(_QWORD *)(a1 + 144) = v60;
        *(_QWORD *)(a1 + 152) = v55;
      }
      *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
      v61 = *((_QWORD *)a2 + 21);
      *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
      *(_QWORD *)(a1 + 168) = v61;
    }
    v62 = *((unsigned __int8 *)a2 + 184);
    if (v62 == 3)
    {
      v63 = *(__int128 *)((char *)a2 + 184);
      v64 = *(__int128 *)((char *)a2 + 200);
      *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
      *(_OWORD *)(a1 + 184) = v63;
      *(_OWORD *)(a1 + 200) = v64;
LABEL_70:
      *(_BYTE *)(a1 + 224) = *((_BYTE *)a2 + 224);
      return a1;
    }
    *(_BYTE *)(a1 + 184) = v62;
    goto LABEL_52;
  }
  v40 = *(__int128 *)((char *)a2 + 152);
  *v37 = *(_OWORD *)v38;
  *(_OWORD *)(a1 + 152) = v40;
  v41 = *(__int128 *)((char *)a2 + 168);
  v42 = *(__int128 *)((char *)a2 + 184);
  v43 = *(__int128 *)((char *)a2 + 200);
  *(_OWORD *)(a1 + 209) = *(__int128 *)((char *)a2 + 209);
  *(_OWORD *)(a1 + 184) = v42;
  *(_OWORD *)(a1 + 200) = v43;
  *(_OWORD *)(a1 + 168) = v41;
  return a1;
}

uint64_t sub_20E6BDEAC(uint64_t a1)
{
  destroy for ASCTAPPublicKeyCredentialDescriptor(a1);
  return a1;
}

uint64_t sub_20E6BDEE0(uint64_t a1)
{
  destroy for ASCTAPUserEntity(a1);
  return a1;
}

__n128 __swift_memcpy225_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_BYTE *)(a1 + 224) = *((_BYTE *)a2 + 224);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for ASCTAPAuthenticatorGetAssertionResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;

  if (*(_QWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      sub_20E6673F4(v5, v6);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_20E6BDEAC(a1);
  }
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
LABEL_6:
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_20E6673F4(v8, v9);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_20E6673F4(v10, v11);
  if (*(_QWORD *)(a1 + 80))
  {
    v12 = *(_QWORD *)(a2 + 80);
    if (v12)
    {
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = v12;
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(a1 + 88);
      v14 = *(_QWORD *)(a1 + 96);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      sub_20E6673F4(v13, v14);
      v15 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      *(_QWORD *)(a1 + 112) = v15;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_20E6BDEE0(a1 + 72);
  }
  v16 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v16;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
LABEL_11:
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  v17 = (_BYTE *)(a1 + 136);
  v18 = (unsigned __int8 *)(a2 + 136);
  if (*(_BYTE *)(a1 + 224) != 3)
  {
    v19 = *(unsigned __int8 *)(a2 + 224);
    if (v19 == 3)
    {
      sub_20E6BCD78(a1 + 136);
      goto LABEL_14;
    }
    if (*v17 == 3)
      goto LABEL_18;
    v22 = *v18;
    if (v22 == 3)
    {
      sub_20E6B5380(a1 + 136);
LABEL_18:
      v23 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_OWORD *)(a1 + 152) = v23;
      *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
      goto LABEL_25;
    }
    *(_BYTE *)(a1 + 136) = v22;
    v24 = (_QWORD *)(a2 + 144);
    v25 = *(_QWORD *)(a1 + 152);
    if (v25 >> 60 != 15)
    {
      v26 = *(_QWORD *)(a2 + 152);
      if (v26 >> 60 != 15)
      {
        v27 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = *v24;
        *(_QWORD *)(a1 + 152) = v26;
        sub_20E6673F4(v27, v25);
        goto LABEL_24;
      }
      sub_20E66B4E0(a1 + 144);
    }
    *(_OWORD *)(a1 + 144) = *(_OWORD *)v24;
LABEL_24:
    *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
LABEL_25:
    v28 = *(unsigned __int8 *)(a2 + 184);
    if (*(_BYTE *)(a1 + 184) != 3)
    {
      if (v28 != 3)
      {
        *(_BYTE *)(a1 + 184) = v28;
        v30 = *(_QWORD *)(a1 + 200);
        if (v30 >> 60 != 15)
        {
          v31 = *(_QWORD *)(a2 + 200);
          if (v31 >> 60 != 15)
          {
            v33 = *(_QWORD *)(a1 + 192);
            *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
            *(_QWORD *)(a1 + 200) = v31;
            sub_20E6673F4(v33, v30);
            v34 = (_QWORD *)(a2 + 208);
            v35 = *(_QWORD *)(a1 + 216);
            if (v35 >> 60 != 15)
            {
              v36 = *(_QWORD *)(a2 + 216);
              if (v36 >> 60 != 15)
              {
                v37 = *(_QWORD *)(a1 + 208);
                *(_QWORD *)(a1 + 208) = *v34;
                *(_QWORD *)(a1 + 216) = v36;
                sub_20E6673F4(v37, v35);
                goto LABEL_38;
              }
              sub_20E66B4E0(a1 + 208);
            }
            *(_OWORD *)(a1 + 208) = *(_OWORD *)v34;
LABEL_38:
            *(_BYTE *)(a1 + 224) = v19;
            return a1;
          }
          sub_20E6B4CD8(a1 + 192);
        }
        v32 = *(_OWORD *)(a2 + 208);
        *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 208) = v32;
        goto LABEL_38;
      }
      sub_20E6B53B8(a1 + 184);
    }
    v29 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v29;
    *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
    goto LABEL_38;
  }
LABEL_14:
  v20 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v20;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 209) = *(_OWORD *)(a2 + 209);
  v21 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *(_OWORD *)(a1 + 152) = v21;
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCTAPAuthenticatorGetAssertionResponse(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 225))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASCTAPAuthenticatorGetAssertionResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 224) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 225) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 225) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPAuthenticatorGetAssertionResponse()
{
  return &type metadata for ASCTAPAuthenticatorGetAssertionResponse;
}

unint64_t sub_20E6BE33C(uint64_t a1)
{
  unint64_t result;

  result = sub_20E6BE360();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_20E6BE360()
{
  unint64_t result;

  result = qword_254A2EF78;
  if (!qword_254A2EF78)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F27B8, &type metadata for ASCTAPAuthenticatorGetAssertionResponse);
    atomic_store(result, (unint64_t *)&qword_254A2EF78);
  }
  return result;
}

unint64_t sub_20E6BE3A4()
{
  unint64_t result;

  result = qword_254A2EF88;
  if (!qword_254A2EF88)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2988, &type metadata for ASCTAPAuthenticatorGetAssertionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EF88);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ASCTAPAuthenticatorGetAssertionResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_20E6BE434 + 4 * byte_20E6F2616[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_20E6BE468 + 4 * byte_20E6F2611[v4]))();
}

uint64_t sub_20E6BE468(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6BE470(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6BE478);
  return result;
}

uint64_t sub_20E6BE484(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6BE48CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_20E6BE490(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6BE498(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCTAPAuthenticatorGetAssertionResponse.CodingKeys()
{
  return &type metadata for ASCTAPAuthenticatorGetAssertionResponse.CodingKeys;
}

unint64_t sub_20E6BE4B8()
{
  unint64_t result;

  result = qword_254A2EF98;
  if (!qword_254A2EF98)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2960, &type metadata for ASCTAPAuthenticatorGetAssertionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EF98);
  }
  return result;
}

unint64_t sub_20E6BE500()
{
  unint64_t result;

  result = qword_254A2EFA0;
  if (!qword_254A2EFA0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2898, &type metadata for ASCTAPAuthenticatorGetAssertionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EFA0);
  }
  return result;
}

unint64_t sub_20E6BE548()
{
  unint64_t result;

  result = qword_254A2EFA8;
  if (!qword_254A2EFA8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F28C0, &type metadata for ASCTAPAuthenticatorGetAssertionResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2EFA8);
  }
  return result;
}

uint64_t sub_20E6BE58C(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) >= 8)
    return 7;
  else
    return (0x607050403020100uLL >> (8 * (a1 - 1)));
}

uint64_t sub_20E6BE5B8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x69746E6564657263 && a2 == 0xEA00000000006C61;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6174614468747561 && a2 == 0xE800000000000000 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1919251317 && a2 == 0xE400000000000000 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000020E6F83B0 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656C655372657375 && a2 == 0xEC00000064657463 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000020E6F83D0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

void sub_20E6BE8B8(unint64_t a1, id a2, NSObject *a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  Swift::String v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t inited;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  id v48;
  id v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  void *v53;
  Swift::String v54;
  id v55[3];
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v6 = a1;
    v7 = qword_254A2DBE8;
    swift_bridgeObjectRetain();
    if (v7 != -1)
      swift_once();
    v8 = sub_20E6E9F50();
    __swift_project_value_buffer(v8, (uint64_t)qword_254A3ED50);
    v9 = sub_20E6E9F38();
    v10 = sub_20E6EA3D0();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_20E648000, v9, v10, "Received blob", v11, 2u);
      MEMORY[0x212BC3A38](v11, -1, -1);
    }

    v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2F010);
    v57 = v12;
LABEL_19:
    v56[0] = v6;
    v33 = (void *)objc_opt_self();
    __swift_project_boxed_opaque_existential_1Tm(v56, v12);
    v34 = sub_20E6EA8D4();
    v55[0] = 0;
    v35 = objc_msgSend(v33, sel_dataWithJSONObject_options_error_, v34, 0, v55);
    swift_unknownObjectRelease();
    v36 = v55[0];
    if (v35)
    {
      v37 = sub_20E6E9C80();
      v39 = v38;

      v40 = sub_20E6E9BCC();
      v42 = v41;
      sub_20E6673F4(v37, v39);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v56);
      swift_beginAccess();
      v43 = *(_QWORD *)(a4 + 16);
      v44 = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 16) = v40;
      *(_QWORD *)(a4 + 24) = v42;
      sub_20E66AA28(v43, v44);
    }
    else
    {
      v45 = v36;
      v46 = (void *)sub_20E6E9B48();

      swift_willThrow();
      if (qword_254A2DBE8 != -1)
        swift_once();
      v47 = sub_20E6E9F50();
      __swift_project_value_buffer(v47, (uint64_t)qword_254A3ED50);
      v48 = v46;
      v49 = v46;
      v50 = sub_20E6E9F38();
      v51 = sub_20E6EA3E8();
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc();
        v53 = (void *)swift_slowAlloc();
        v55[0] = v53;
        *(_DWORD *)v52 = 136315138;
        swift_getErrorValue();
        v54 = Error.loggerDescription()();
        sub_20E66A2F8(v54._countAndFlagsBits, (unint64_t)v54._object, (uint64_t *)v55);
        sub_20E6EA4C0();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_20E648000, v50, v51, "Unable to verify Apple ID passkey: %s", v52, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x212BC3A38](v53, -1, -1);
        MEMORY[0x212BC3A38](v52, -1, -1);

      }
      else
      {

      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v56);
    }
    dispatch_group_leave(a3);
    return;
  }
  if (a2)
  {
    v14 = a2;
    if (qword_254A2DBE8 != -1)
      swift_once();
    v15 = sub_20E6E9F50();
    __swift_project_value_buffer(v15, (uint64_t)qword_254A3ED50);
    v16 = a2;
    v17 = a2;
    v18 = sub_20E6E9F38();
    v19 = sub_20E6EA3E8();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      v21 = (void *)swift_slowAlloc();
      v55[0] = v21;
      *(_DWORD *)v20 = 136315138;
      swift_getErrorValue();
      v22 = Error.loggerDescription()();
      sub_20E66A2F8(v22._countAndFlagsBits, (unint64_t)v22._object, (uint64_t *)v55);
      sub_20E6EA4C0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_20E648000, v18, v19, "Received error: %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x212BC3A38](v21, -1, -1);
      MEMORY[0x212BC3A38](v20, -1, -1);
    }
    else
    {

    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E130);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_20E6EE520;
    *(_QWORD *)(inited + 32) = 0xD000000000000017;
    *(_QWORD *)(inited + 40) = 0x800000020E6F8510;
    v28 = (void *)sub_20E6E9B3C();
    v29 = objc_msgSend(v28, sel_description);

    v30 = sub_20E6EA1CC();
    v32 = v31;

    *(_QWORD *)(inited + 48) = v30;
    *(_QWORD *)(inited + 56) = v32;
    v6 = sub_20E6A5760(inited);
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F008);
    v57 = v12;

    goto LABEL_19;
  }
  if (qword_254A2DBE8 != -1)
    swift_once();
  v23 = sub_20E6E9F50();
  __swift_project_value_buffer(v23, (uint64_t)qword_254A3ED50);
  v24 = sub_20E6E9F38();
  v25 = sub_20E6EA3E8();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_20E648000, v24, v25, "Did not receive error", v26, 2u);
    MEMORY[0x212BC3A38](v26, -1, -1);
  }

  dispatch_group_leave(a3);
}

uint64_t sub_20E6BEFA4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EFF8);
    v4 = sub_20E6EA154();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t static ASCWebKitSPISupport.entepriseAttestationIdentityPersistentReference(for:)()
{
  id v0;
  void *v1;
  id v2;
  uint64_t v3;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedManager);
  v1 = (void *)sub_20E6EA1C0();
  v2 = objc_msgSend(v0, sel_entepriseAttestationIdentityPersistentReferenceForRelyingParty_, v1);

  if (!v2)
    return 0;
  v3 = sub_20E6E9C80();

  return v3;
}

uint64_t static ASCWebKitSPISupport.getClientCapabilities(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

void sub_20E6BF298()
{
  void *ObjCClassFromMetadata;
  void *v1;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v1 = (void *)sub_20E6EA1C0();
  objc_msgSend(ObjCClassFromMetadata, sel_arePasskeysDisallowedForRelyingParty_, v1);

  sub_20E6A5D2C(MEMORY[0x24BEE4AF8]);
  JUMPOUT(0x20E6BF414);
}

uint64_t sub_20E6BF3C0()
{
  uint64_t v0;
  _QWORD *v1;
  id v2;
  id v3;
  char isUniquelyReferenced_nonNull_native;
  char v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  char v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, v0);
  if (!v2)
  {
    swift_bridgeObjectRetain();
    v13 = sub_20E698CCC(0x7254646972627968, 0xEF74726F70736E61);
    v15 = v14;
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        sub_20E6B065C();
      swift_bridgeObjectRelease();
      v16 = *(void **)(v1[7] + 8 * v13);
      sub_20E6BF8A0(v13, (uint64_t)v1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_bridgeObjectRelease();
    }
    JUMPOUT(0x20E6BF384);
  }
  v3 = v2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v6 = sub_20E698CCC(0x7254646972627968, 0xEF74726F70736E61);
  v7 = v1[2];
  v8 = (v5 & 1) == 0;
  v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
    goto LABEL_20;
  }
  v10 = v5;
  if (v1[3] >= v9)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v5 & 1) == 0)
        goto LABEL_13;
    }
    else
    {
      sub_20E6B065C();
      if ((v10 & 1) == 0)
      {
LABEL_13:
        v1[(v6 >> 6) + 8] |= 1 << v6;
        v17 = (_QWORD *)(v1[6] + 16 * v6);
        *v17 = 0x7254646972627968;
        v17[1] = 0xEF74726F70736E61;
        *(_QWORD *)(v1[7] + 8 * v6) = v3;
        v18 = v1[2];
        v19 = __OFADD__(v18, 1);
        v20 = v18 + 1;
        if (!v19)
        {
          v1[2] = v20;
          swift_bridgeObjectRetain();
          JUMPOUT(0x20E6BF36CLL);
        }
LABEL_20:
        __break(1u);
        JUMPOUT(0x20E6BF608);
      }
    }
LABEL_26:
    JUMPOUT(0x20E6BF358);
  }
  sub_20E6AF228(v9, isUniquelyReferenced_nonNull_native);
  v11 = sub_20E698CCC(0x7254646972627968, 0xEF74726F70736E61);
  if ((v10 & 1) == (v12 & 1))
  {
    v6 = v11;
    if ((v10 & 1) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
  return sub_20E6EA928();
}

uint64_t sub_20E6BF748(int a1, void *aBlock)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjCClassMetadata;
  _QWORD *v7;

  v2[2] = _Block_copy(aBlock);
  v3 = sub_20E6EA1CC();
  v5 = v4;
  v2[3] = v4;
  ObjCClassMetadata = swift_getObjCClassMetadata();
  v7 = (_QWORD *)swift_task_alloc();
  v2[4] = v7;
  *v7 = v2;
  v7[1] = sub_20E6BF7E4;
  v7[3] = v5;
  v7[4] = ObjCClassMetadata;
  v7[2] = v3;
  return swift_task_switch();
}

uint64_t sub_20E6BF7E4()
{
  uint64_t *v0;
  void (**v1)(_QWORD, _QWORD);
  void *v2;
  uint64_t v4;

  v1 = *(void (***)(_QWORD, _QWORD))(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_20E67BE44(0, &qword_254A2E120);
  v2 = (void *)sub_20E6EA148();
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, void *))v1)[2](v1, v2);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

unint64_t sub_20E6BF8A0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_20E6EA55C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_20E6EA988();
        swift_bridgeObjectRetain();
        sub_20E6EA250();
        v9 = sub_20E6EA9A0();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_20E6BFA74(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_20E6EA55C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_20E6EA988();
        swift_bridgeObjectRetain();
        sub_20E6EA250();
        v11 = sub_20E6EA9A0();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            v9 = *v18;
            v10 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

id _sSo19ASCWebKitSPISupportC26AuthenticationServicesCoreE29alternateLargeBlobIfNecessary3for14clientDataHash10Foundation0N0VSgSS_AItFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  id result;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t aBlock;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, void *);
  void *v38;
  void (*v39)(unint64_t, void *);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v2 = a1 == 0x6F632E656C707061 && a2 == 0xE90000000000006DLL;
  if (!v2 && (sub_20E6EA8EC() & 1) == 0)
    return 0;
  if (qword_254A2DBE8 != -1)
    swift_once();
  v3 = sub_20E6E9F50();
  __swift_project_value_buffer(v3, (uint64_t)qword_254A3ED50);
  v4 = sub_20E6E9F38();
  v5 = sub_20E6EA3D0();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_20E648000, v4, v5, "Fetching Apple ID passkey token.", v6, 2u);
    MEMORY[0x212BC3A38](v6, -1, -1);
  }

  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDB4398]), sel_init);
  result = objc_msgSend(v7, sel_aa_primaryAppleAccount);
  if (result)
  {
    v9 = result;
    v10 = objc_msgSend(result, sel_aa_altDSID);

    if (v10)
    {
      sub_20E6EA1CC();

      v11 = objc_allocWithZone(MEMORY[0x24BE0ACD0]);
      v12 = (void *)sub_20E6EA1C0();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v11, sel_initWithAltDSID_, v12);

      __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EFD8);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_20E6EE520;
      *(_QWORD *)(inited + 32) = 6582369;
      *(_QWORD *)(inited + 40) = 0xE300000000000000;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EFE0);
      v15 = swift_allocObject();
      v16 = MEMORY[0x24BEE0D00];
      *(_OWORD *)(v15 + 16) = xmmword_20E6EE500;
      *(_QWORD *)(v15 + 56) = v16;
      strcpy((char *)(v15 + 32), "clientDataHash");
      *(_BYTE *)(v15 + 47) = -18;
      sub_20E6E9C74();
      v17 = sub_20E67B988();
      v18 = sub_20E6EA4E4();
      v20 = v19;
      swift_bridgeObjectRelease();
      aBlock = v18;
      v36 = v20;
      v43 = 47;
      v44 = 0xE100000000000000;
      v41 = 95;
      v42 = 0xE100000000000000;
      v21 = sub_20E6EA4E4();
      v23 = v22;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v15 + 64) = v21;
      *(_QWORD *)(v15 + 72) = v23;
      *(_QWORD *)(v15 + 88) = v16;
      *(_QWORD *)(v15 + 96) = 1701869940;
      *(_QWORD *)(v15 + 104) = 0xE400000000000000;
      *(_QWORD *)(v15 + 152) = v16;
      *(_QWORD *)(v15 + 120) = v16;
      *(_QWORD *)(v15 + 128) = 0x79656B73736170;
      *(_QWORD *)(v15 + 136) = 0xE700000000000000;
      sub_20E67BE44(0, &qword_254A2EFF0);
      *(_QWORD *)(inited + 48) = sub_20E6EA3B8();
      sub_20E6A5C14(inited);
      __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EFF8);
      v24 = (void *)sub_20E6EA148();
      swift_bridgeObjectRelease();
      objc_msgSend(v13, sel_setAppProvidedData_, v24, v16, v17, v17, v17, aBlock, v36);

      v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE0ACC8]), sel_init);
      v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = xmmword_20E6EE5B0;
      v27 = dispatch_group_create();
      dispatch_group_enter(v27);
      v28 = swift_allocObject();
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = v26;
      v39 = sub_20E6C0310;
      v40 = v28;
      aBlock = MEMORY[0x24BDAC760];
      v36 = 1107296256;
      v37 = sub_20E6BEFA4;
      v38 = &block_descriptor_0;
      v29 = _Block_copy(&aBlock);
      v30 = v27;
      swift_retain();
      swift_release();
      objc_msgSend(v25, sel_verifyAppleIDPasskeyWithContext_completion_, v13, v29);
      _Block_release(v29);
      sub_20E6EA40C();

      swift_beginAccess();
      v31 = *(_QWORD *)(v26 + 16);
      sub_20E66A9D4(v31, *(_QWORD *)(v26 + 24));
      swift_release();
      return (id)v31;
    }
    v32 = sub_20E6E9F38();
    v33 = sub_20E6EA400();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_20E648000, v32, v33, "Could not determine altDSID", v34, 2u);
      MEMORY[0x212BC3A38](v34, -1, -1);
    }

    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_20E6C0204()
{
  return objectdestroyTm_0((void (*)(_QWORD))MEMORY[0x24BDAC738]);
}

uint64_t sub_20E6C0214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_20E69B37C;
  return ((uint64_t (*)(int, void *))((char *)&dword_254A2EFC0 + dword_254A2EFC0))(v2, v3);
}

uint64_t sub_20E6C0288()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 != 15)
    sub_20E6673F4(*(_QWORD *)(v0 + 16), v1);
  return swift_deallocObject();
}

uint64_t sub_20E6C02BC()
{
  return objectdestroyTm_0((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t objectdestroyTm_0(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject();
}

void sub_20E6C0310(unint64_t a1, void *a2)
{
  uint64_t v2;

  sub_20E6BE8B8(a1, a2, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_20E6C0330(uint64_t a1)
{
  return sub_20E6C03A4(a1, qword_254A3ED50);
}

uint64_t sub_20E6C035C(uint64_t a1)
{
  return sub_20E6C03A4(a1, qword_253E8E040);
}

uint64_t sub_20E6C0380(uint64_t a1)
{
  return sub_20E6C03A4(a1, qword_254A3ED68);
}

uint64_t sub_20E6C03A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_20E6E9F50();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_20E6E9F44();
}

uint64_t sub_20E6C0418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t i;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;

  v30 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  i = 0;
  while (1)
  {
LABEL_4:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (i << 6);
    }
    else
    {
      v13 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_40;
      if (v13 >= v31)
      {
LABEL_38:
        swift_bridgeObjectRelease();
        result = swift_release();
        *(_QWORD *)(a4 + 32) = 0;
        *(_OWORD *)a4 = 0u;
        *(_OWORD *)(a4 + 16) = 0u;
        return result;
      }
      v14 = *(_QWORD *)(v30 + 8 * v13);
      ++i;
      if (!v14)
      {
        i = v13 + 1;
        if (v13 + 1 >= v31)
          goto LABEL_38;
        v14 = *(_QWORD *)(v30 + 8 * i);
        if (!v14)
        {
          i = v13 + 2;
          if (v13 + 2 >= v31)
            goto LABEL_38;
          v14 = *(_QWORD *)(v30 + 8 * i);
          if (!v14)
          {
            i = v13 + 3;
            if (v13 + 3 >= v31)
              goto LABEL_38;
            v14 = *(_QWORD *)(v30 + 8 * i);
            if (!v14)
            {
              v15 = v13 + 4;
              if (v15 >= v31)
                goto LABEL_38;
              v14 = *(_QWORD *)(v30 + 8 * v15);
              for (i = v15; !v14; ++v15)
              {
                i = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_41;
                if (i >= v31)
                  goto LABEL_38;
                v14 = *(_QWORD *)(v30 + 8 * i);
              }
            }
          }
        }
      }
      v8 = (v14 - 1) & v14;
      v12 = __clz(__rbit64(v14)) + (i << 6);
    }
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 40 * v12);
    v17 = (_QWORD *)v16[4];
    v18 = v17[2];
    if (v18)
    {
      v28 = v16[1];
      v29 = *v16;
      v26 = v16[3];
      v27 = v16[2];
      v19 = v17[4] == a2 && v17[5] == a3;
      if (v19 || (v20 = i, result = sub_20E6EA8EC(), (result & 1) != 0))
      {
LABEL_37:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        result = swift_release();
        *(_QWORD *)a4 = v29;
        *(_QWORD *)(a4 + 8) = v28;
        *(_QWORD *)(a4 + 16) = v27;
        *(_QWORD *)(a4 + 24) = v26;
        *(_QWORD *)(a4 + 32) = v17;
        return result;
      }
      i = v20;
      if (v18 != 1)
        break;
    }
  }
  v21 = v17 + 7;
  v22 = 1;
  while (1)
  {
    v23 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (*(v21 - 1) == a2 && *v21 == a3)
      goto LABEL_37;
    result = sub_20E6EA8EC();
    if ((result & 1) != 0)
      goto LABEL_37;
    v21 += 2;
    ++v22;
    if (v23 == v18)
    {
      i = v20;
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

char *static ASManagedConfiguration.loadFromDisk(plistURL:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  char *result;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(char *, uint64_t);
  id v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  int v33;
  uint64_t v34;
  uint8_t *v35;
  _QWORD *v36;
  NSObject *v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  objc_class *v41;
  char *v42;
  uint8_t *v43;
  uint8_t *v44;
  int v45;
  void (*v46)(char *, uint64_t);
  NSObject *v47;
  char *v48;
  NSObject *v49;
  objc_super v50;
  NSObject *v51;
  id v52;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v43 - v7;
  v9 = sub_20E6E9BC0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v11(a1, 1, v9) == 1)
  {
    sub_20E6C0E4C();
    swift_allocError();
    swift_willThrow();
    return v8;
  }
  v48 = v6;
  sub_20E698D24(a1, (uint64_t)v8);
  result = (char *)((uint64_t (*)(char *, uint64_t, uint64_t))v11)(v8, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_27;
  }
  v13 = sub_20E6E9BE4();
  if (!v1)
  {
    v23 = v13;
    v24 = v14;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    sub_20E6E9AB8();
    swift_allocObject();
    sub_20E66A990(v23, v24);
    sub_20E6E9AAC();
    type metadata accessor for ASManagedConfiguration();
    sub_20E67BD04(&qword_254A2F028, (uint64_t (*)(uint64_t))type metadata accessor for ASManagedConfiguration, (uint64_t)&protocol conformance descriptor for ASManagedConfiguration);
    sub_20E6E9AA0();
    sub_20E6673F4(v23, v24);
    swift_release();
    sub_20E6673F4(v23, v24);
    return (char *)v52;
  }
  v15 = *(void (**)(char *, uint64_t))(v10 + 8);
  v15(v8, v9);
  v52 = v1;
  v16 = v1;
  v8 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1A0);
  sub_20E67BE44(0, (unint64_t *)&qword_253E8D508);
  if (!swift_dynamicCast())
  {

    return v8;
  }

  v17 = v51;
  v18 = -[NSObject domain](v51, sel_domain);
  v19 = sub_20E6EA1CC();
  v21 = v20;

  if (v19 == sub_20E6EA1CC() && v21 == v22)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v25 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
      goto LABEL_17;
  }
  if (-[NSObject code](v17, sel_code) == (id)260)
  {
    if (qword_253E8D070 != -1)
      swift_once();
    v26 = sub_20E6E9F50();
    __swift_project_value_buffer(v26, (uint64_t)qword_253E8E040);
    v27 = sub_20E6E9F38();
    v28 = sub_20E6EA400();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_20E648000, v27, v28, "Managed configuration file does not exist.", v29, 2u);
      MEMORY[0x212BC3A38](v29, -1, -1);
      v30 = v17;
    }
    else
    {
      v30 = v27;
      v27 = v17;
    }
    goto LABEL_24;
  }
LABEL_17:
  if (qword_253E8D070 != -1)
    swift_once();
  v31 = sub_20E6E9F50();
  __swift_project_value_buffer(v31, (uint64_t)qword_253E8E040);
  v30 = v17;
  v27 = sub_20E6E9F38();
  v32 = sub_20E6EA3F4();
  v33 = v32;
  if (os_log_type_enabled(v27, v32))
  {
    v46 = v15;
    v34 = swift_slowAlloc();
    v45 = v33;
    v35 = (uint8_t *)v34;
    v36 = (_QWORD *)swift_slowAlloc();
    v44 = v35;
    *(_DWORD *)v35 = 138412290;
    v43 = v35 + 4;
    v49 = v30;
    v47 = v30;
    v15 = v46;
    sub_20E6EA4C0();
    *v36 = v30;
    v37 = v47;

    v38 = v44;
    _os_log_impl(&dword_20E648000, v27, (os_log_type_t)v45, "Could not read managed configuration file: %@", v44, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F160);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v36, -1, -1);
    MEMORY[0x212BC3A38](v38, -1, -1);
    v30 = v47;
  }
  else
  {

    v27 = v30;
  }
LABEL_24:
  v39 = (uint64_t)v48;

  sub_20E698D24(a1, v39);
  result = (char *)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v39, 1, v9);
  if ((_DWORD)result != 1)
  {
    v40 = sub_20E6A5E44(MEMORY[0x24BEE4AF8]);
    v41 = (objc_class *)type metadata accessor for ASManagedConfiguration();
    v42 = (char *)objc_allocWithZone(v41);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(&v42[OBJC_IVAR____TtC26AuthenticationServicesCore22ASManagedConfiguration_plistURL], v39, v9);
    *(_QWORD *)&v42[OBJC_IVAR____TtC26AuthenticationServicesCore22ASManagedConfiguration_declarationKeyToPasskeyAttestationConfigurationKey] = v40;
    v50.receiver = v42;
    v50.super_class = v41;
    v8 = (char *)objc_msgSendSuper2(&v50, sel_init);
    v15((char *)v39, v9);
    return v8;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_20E6C0E4C()
{
  unint64_t result;

  result = qword_254A2F020;
  if (!qword_254A2F020)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2DE4, &type metadata for ASManagedConfiguration.ManagedConfigurationError);
    atomic_store(result, (unint64_t *)&qword_254A2F020);
  }
  return result;
}

uint64_t type metadata accessor for ASManagedConfiguration()
{
  uint64_t result;

  result = qword_253E8D538;
  if (!qword_253E8D538)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_20E6C0FF0()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  return sub_20E6C103C(v0);
}

uint64_t sub_20E6C103C(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = sub_20E6EA3AC();
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_20E6C2804(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_20E6C11D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  LOBYTE(a1) = sub_20E6C4128(v4, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1 & 1;
}

uint64_t sub_20E6C1300(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  swift_beginAccess();
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  sub_20E6C0418(v4, a1, a2, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  v5 = v10;
  if (!v10)
    return 0;
  v6 = v9;
  v7 = sub_20E6E9C14();
  sub_20E6C4314(v6, v5);
  return v7;
}

uint64_t sub_20E6C1528(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v2 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v2;
  v9 = *(_QWORD *)(a1 + 32);
  v3 = v8[0];
  v4 = (uint64_t *)(v1
                 + OBJC_IVAR____TtC26AuthenticationServicesCore22ASManagedConfiguration_declarationKeyToPasskeyAttestationConfigurationKey);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_20E6C4350((uint64_t)v8);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v4;
  *v4 = 0x8000000000000000;
  sub_20E6AFE50((uint64_t)v8, v3, *((uint64_t *)&v3 + 1), isUniquelyReferenced_nonNull_native);
  *v4 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  return sub_20E6C16B8();
}

uint64_t sub_20E6C1604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  swift_beginAccess();
  sub_20E6C26FC(a1, a2, (uint64_t)v7);
  v4 = v7[0];
  v5 = v7[1];
  swift_endAccess();
  sub_20E6C4314(v4, v5);
  return sub_20E6C16B8();
}

uint64_t sub_20E6C16B8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v2 = v0;
  v3 = sub_20E6E9BC0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E6E9ADC();
  swift_allocObject();
  sub_20E6E9AD0();
  v22 = v0;
  type metadata accessor for ASManagedConfiguration();
  sub_20E67BD04(&qword_254A2F0D8, (uint64_t (*)(uint64_t))type metadata accessor for ASManagedConfiguration, (uint64_t)&protocol conformance descriptor for ASManagedConfiguration);
  v7 = sub_20E6E9AC4();
  if (v1)
  {
    swift_release();
    if (qword_253E8D070 != -1)
      swift_once();
    v11 = sub_20E6E9F50();
    __swift_project_value_buffer(v11, (uint64_t)qword_253E8E040);
    v12 = v1;
    v13 = v1;
    v14 = sub_20E6E9F38();
    v15 = sub_20E6EA3E8();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v16 = 138412290;
      v18 = v1;
      v19 = _swift_stdlib_bridgeErrorToNSError();
      v22 = v19;
      sub_20E6EA4C0();
      *v17 = v19;

      _os_log_impl(&dword_20E648000, v14, v15, "Could not save managed settings: %@", v16, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F160);
      swift_arrayDestroy();
      MEMORY[0x212BC3A38](v17, -1, -1);
      MEMORY[0x212BC3A38](v16, -1, -1);
    }
    else
    {

    }
    return swift_willThrow();
  }
  else
  {
    v9 = v7;
    v10 = v8;
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2 + OBJC_IVAR____TtC26AuthenticationServicesCore22ASManagedConfiguration_plistURL, v3);
    sub_20E6E9C98();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return sub_20E6673F4(v9, v10);
  }
}

id ASManagedConfiguration.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ASManagedConfiguration.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_20E6C1A18()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000032;
  else
    return 0x4C52557473696C70;
}

uint64_t sub_20E6C1A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E6C4C8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E6C1A7C()
{
  sub_20E6C4394();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6C1AA4()
{
  sub_20E6C4394();
  return sub_20E6EA9DC();
}

id ASManagedConfiguration.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASManagedConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_20E6C1B50(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;

  v2 = v1;
  v4 = sub_20E6E9BC0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F030);
  v15 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6C4394();
  sub_20E6EA9C4();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC26AuthenticationServicesCore22ASManagedConfiguration_plistURL, v4);
  v17 = 0;
  sub_20E67BD04(&qword_254A2F040, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
  v11 = v14;
  sub_20E6EA88C();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (!v11)
  {
    v12 = (uint64_t *)(v2
                    + OBJC_IVAR____TtC26AuthenticationServicesCore22ASManagedConfiguration_declarationKeyToPasskeyAttestationConfigurationKey);
    swift_beginAccess();
    v18 = *v12;
    v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F048);
    sub_20E6C441C(&qword_254A2F050, (uint64_t (*)(void))sub_20E6C43D8, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    sub_20E6EA88C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v10, v8);
}

void *ASManagedConfiguration.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ASManagedConfiguration.init(from:)(a1);
}

void *ASManagedConfiguration.init(from:)(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  void (*v15)(void);
  objc_class *v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  objc_super v21;
  char v22;
  uint64_t v23;

  v3 = v1;
  v18 = sub_20E6E9BC0();
  v5 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v17[1] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F060);
  v7 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v20 = a1;
  v11 = __swift_project_boxed_opaque_existential_1Tm(a1, v10);
  sub_20E6C4394();
  v12 = v3;
  sub_20E6EA9AC();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);

    type metadata accessor for ASManagedConfiguration();
    swift_deallocPartialClassInstance();
  }
  else
  {
    LOBYTE(v23) = 0;
    sub_20E67BD04(&qword_254A2F068, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    v13 = v19;
    sub_20E6EA7FC();
    v15 = *(void (**)(void))(v5 + 32);
    v17[0] = &v12[OBJC_IVAR____TtC26AuthenticationServicesCore22ASManagedConfiguration_plistURL];
    v15();
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F048);
    v22 = 1;
    sub_20E6C441C(&qword_254A2F070, (uint64_t (*)(void))sub_20E6C4490, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
    sub_20E6EA7FC();
    *(_QWORD *)&v12[OBJC_IVAR____TtC26AuthenticationServicesCore22ASManagedConfiguration_declarationKeyToPasskeyAttestationConfigurationKey] = v23;

    v16 = (objc_class *)type metadata accessor for ASManagedConfiguration();
    v21.receiver = v12;
    v21.super_class = v16;
    v11 = objc_msgSendSuper2(&v21, sel_init);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v13);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  }
  return v11;
}

void *sub_20E6C2080@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  void *result;

  v5 = objc_allocWithZone((Class)type metadata accessor for ASManagedConfiguration());
  result = ASManagedConfiguration.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_20E6C20D4(_QWORD *a1)
{
  return sub_20E6C1B50(a1);
}

void __swiftcall ASPasskeyAttestationConfiguration.init(declarationKey:attestationIdentityPersistentReference:relyingParties:)(AuthenticationServicesCore::ASPasskeyAttestationConfiguration *__return_ptr retstr, Swift::String declarationKey, Swift::String attestationIdentityPersistentReference, Swift::OpaquePointer relyingParties)
{
  retstr->declarationKey = declarationKey;
  retstr->attestationIdentityPersistentReference = attestationIdentityPersistentReference;
  retstr->relyingParties = relyingParties;
}

uint64_t sub_20E6C2104()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000026;
  if (*v0 != 1)
    v1 = 0x50676E69796C6572;
  if (*v0)
    return v1;
  else
    return 0x746172616C636564;
}

uint64_t sub_20E6C217C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E6C4D78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E6C21A0()
{
  sub_20E6C44D4();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6C21C8()
{
  sub_20E6C44D4();
  return sub_20E6EA9DC();
}

uint64_t ASPasskeyAttestationConfiguration.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F080);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[2];
  v13 = v1[3];
  v14 = v7;
  v12 = v1[4];
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6C44D4();
  sub_20E6EA9C4();
  v19 = 0;
  v8 = v15;
  sub_20E6EA874();
  if (!v8)
  {
    v9 = v12;
    v18 = 1;
    sub_20E6EA874();
    v16 = v9;
    v17 = 2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
    sub_20E6C4518(&qword_254A2EEA0, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    sub_20E6EA88C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ASPasskeyAttestationConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F090);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6C44D4();
  sub_20E6EA9AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v24 = 0;
  v9 = sub_20E6EA7E4();
  v11 = v10;
  v20 = v9;
  v23 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_20E6EA7E4();
  v14 = v13;
  v18 = v12;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
  v22 = 2;
  sub_20E6C4518((unint64_t *)&qword_254A2F7C0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  v19 = v14;
  swift_bridgeObjectRetain();
  sub_20E6EA7FC();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = v19;
  *a2 = v20;
  a2[1] = v11;
  a2[2] = v18;
  a2[3] = v16;
  a2[4] = v15;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_20E6C2608@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ASPasskeyAttestationConfiguration.init(from:)(a1, a2);
}

uint64_t sub_20E6C261C(_QWORD *a1)
{
  return ASPasskeyAttestationConfiguration.encode(to:)(a1);
}

uint64_t sub_20E6C2630(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = sub_20E698CCC(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_20E6B02BC();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  sub_20E6BF8A0(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_20E6C26FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_20E698CCC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_20E6B080C();
      v11 = v15;
    }
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v11 + 56) + 40 * v8;
    v13 = *(_QWORD *)(v12 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v12;
    *(_QWORD *)(a3 + 16) = v13;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)(v12 + 24);
    sub_20E6BFA74(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_20E6C2804(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_20E6EA988();
  swift_bridgeObjectRetain();
  sub_20E6EA250();
  v8 = sub_20E6EA9A0();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_20E6EA8EC() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_20E6EA8EC() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_20E6C3438(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_20E6C29B0(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = sub_20E6EA58C();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_20E67BE44(0, (unint64_t *)&unk_253E8D580);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_20E6EA580();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v21 = sub_20E6C2C4C(v7, result + 1);
    v27 = v21;
    if (*(_QWORD *)(v21 + 24) <= *(_QWORD *)(v21 + 16))
    {
      v25 = v8;
      sub_20E6C311C();
      v22 = v27;
    }
    else
    {
      v22 = v21;
      v23 = v8;
    }
    sub_20E6C33B8((uint64_t)v8, v22);
    *v3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = sub_20E6EA460();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      sub_20E67BE44(0, (unint64_t *)&unk_253E8D580);
      v14 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
      v15 = sub_20E6EA46C();

      if ((v15 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v19 = *(void **)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        *a1 = v19;
        v20 = v19;
        return 0;
      }
      v16 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
        v18 = sub_20E6EA46C();

        if ((v18 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v8 = a2;
    sub_20E6C35D0((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v28;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_20E6C2C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F0D0);
    v2 = sub_20E6EA5E0();
    v14 = v2;
    sub_20E6EA574();
    if (sub_20E6EA598())
    {
      sub_20E67BE44(0, (unint64_t *)&unk_253E8D580);
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          sub_20E6C311C();
          v2 = v14;
        }
        result = sub_20E6EA460();
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (sub_20E6EA598());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

uint64_t sub_20E6C2E40()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D550);
  v3 = sub_20E6EA5D4();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_20E6EA988();
      sub_20E6EA250();
      result = sub_20E6EA9A0();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_20E6C311C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F0D0);
  v3 = sub_20E6EA5D4();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = sub_20E6EA460();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t sub_20E6C33B8(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_20E6EA460();
  result = sub_20E6EA568();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_20E6C3438(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_20E6C2E40();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_20E6C3754();
      goto LABEL_22;
    }
    sub_20E6C3AAC();
  }
  v11 = *v4;
  sub_20E6EA988();
  sub_20E6EA250();
  result = sub_20E6EA9A0();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_20E6EA8EC(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_20E6EA91C();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_20E6EA8EC();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void sub_20E6C35D0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_20E6C311C();
  }
  else
  {
    if (v7 > v6)
    {
      sub_20E6C3904();
      goto LABEL_14;
    }
    sub_20E6C3D58();
  }
  v8 = *v3;
  v9 = sub_20E6EA460();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_20E67BE44(0, (unint64_t *)&unk_253E8D580);
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = sub_20E6EA46C();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      sub_20E6EA91C();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = sub_20E6EA46C();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

void *sub_20E6C3754()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D550);
  v2 = *v0;
  v3 = sub_20E6EA5C8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_20E6C3904()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F0D0);
  v2 = *v0;
  v3 = sub_20E6EA5C8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_20E6C3AAC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D550);
  v3 = sub_20E6EA5D4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_20E6EA988();
    swift_bridgeObjectRetain();
    sub_20E6EA250();
    result = sub_20E6EA9A0();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_20E6C3D58()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F0D0);
  v3 = sub_20E6EA5D4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v27 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = sub_20E6EA460();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_20E6C3FD0(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_20E6EA73C();
    swift_bridgeObjectRelease();
  }
  sub_20E67BE44(0, (unint64_t *)&unk_253E8D580);
  sub_20E6C4F0C();
  result = sub_20E6EA3AC();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = sub_20E6EA73C();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x212BC2E50](i, a1);
        sub_20E6C29B0(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        sub_20E6C29B0(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_20E6C4128(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v24;
  uint64_t v25;

  v5 = result;
  v6 = 0;
  v7 = result + 64;
  v8 = 1 << *(_BYTE *)(result + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(result + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v24 = v11;
  v25 = result;
  while (1)
  {
LABEL_4:
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
    }
    else
    {
      v14 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_41;
      if (v14 >= v11)
        return 0;
      v15 = *(_QWORD *)(v7 + 8 * v14);
      ++v6;
      if (!v15)
      {
        v6 = v14 + 1;
        if (v14 + 1 >= v11)
          return 0;
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
        {
          v6 = v14 + 2;
          if (v14 + 2 >= v11)
            return 0;
          v15 = *(_QWORD *)(v7 + 8 * v6);
          if (!v15)
          {
            v6 = v14 + 3;
            if (v14 + 3 >= v11)
              return 0;
            v15 = *(_QWORD *)(v7 + 8 * v6);
            if (!v15)
            {
              v16 = v14 + 4;
              if (v16 >= v11)
                return 0;
              v15 = *(_QWORD *)(v7 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  v6 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    goto LABEL_42;
                  if (v6 >= v11)
                    return 0;
                  v15 = *(_QWORD *)(v7 + 8 * v6);
                  ++v16;
                  if (v15)
                    goto LABEL_21;
                }
              }
              v6 = v16;
            }
          }
        }
      }
LABEL_21:
      v10 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v6 << 6);
    }
    v17 = *(_QWORD **)(*(_QWORD *)(v5 + 56) + 40 * v13 + 32);
    v18 = v17[2];
    if (v18)
    {
      if (v17[4] == a2 && v17[5] == a3)
        return 1;
      result = sub_20E6EA8EC();
      if ((result & 1) != 0)
        return 1;
      if (v18 != 1)
        break;
    }
  }
  v20 = v17 + 7;
  v21 = 1;
  while (1)
  {
    v22 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (*(v20 - 1) == a2 && *v20 == a3)
      return 1;
    result = sub_20E6EA8EC();
    if ((result & 1) != 0)
      return 1;
    v20 += 2;
    ++v21;
    if (v22 == v18)
    {
      v11 = v24;
      v5 = v25;
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_20E6C4314(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_20E6C4350(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_20E6C4394()
{
  unint64_t result;

  result = qword_254A2F038;
  if (!qword_254A2F038)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2D94, &type metadata for ASManagedConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F038);
  }
  return result;
}

unint64_t sub_20E6C43D8()
{
  unint64_t result;

  result = qword_254A2F058;
  if (!qword_254A2F058)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASPasskeyAttestationConfiguration, &type metadata for ASPasskeyAttestationConfiguration);
    atomic_store(result, (unint64_t *)&qword_254A2F058);
  }
  return result;
}

uint64_t sub_20E6C441C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_254A2F048);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x212BC39A8](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_20E6C4490()
{
  unint64_t result;

  result = qword_254A2F078;
  if (!qword_254A2F078)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASPasskeyAttestationConfiguration, &type metadata for ASPasskeyAttestationConfiguration);
    atomic_store(result, (unint64_t *)&qword_254A2F078);
  }
  return result;
}

unint64_t sub_20E6C44D4()
{
  unint64_t result;

  result = qword_254A2F088;
  if (!qword_254A2F088)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2D44, &type metadata for ASPasskeyAttestationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F088);
  }
  return result;
}

uint64_t sub_20E6C4518(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_254A2EE80);
    v8 = a2;
    result = MEMORY[0x212BC39A8](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_20E6C4578()
{
  return type metadata accessor for ASManagedConfiguration();
}

uint64_t sub_20E6C4580()
{
  uint64_t result;
  unint64_t v1;

  result = sub_20E6E9BC0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ASManagedConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ASManagedConfiguration.allDeclarationKeys.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ASManagedConfiguration.isConfiguredForEnterpriseAttestation(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ASManagedConfiguration.entepriseAttestationIdentityPersistentReference(for:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ASManagedConfiguration.save(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ASManagedConfiguration.deletePasskeyAttestationConfiguration(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of ASManagedConfiguration.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of ASManagedConfiguration.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t destroy for ASPasskeyAttestationConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ASPasskeyAttestationConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ASPasskeyAttestationConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ASPasskeyAttestationConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ASPasskeyAttestationConfiguration()
{
  return &type metadata for ASPasskeyAttestationConfiguration;
}

uint64_t storeEnumTagSinglePayload for ASPasskeyAttestationConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20E6C48AC + 4 * byte_20E6F2A25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20E6C48E0 + 4 * byte_20E6F2A20[v4]))();
}

uint64_t sub_20E6C48E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6C48E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6C48F0);
  return result;
}

uint64_t sub_20E6C48FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6C4904);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20E6C4908(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6C4910(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASPasskeyAttestationConfiguration.CodingKeys()
{
  return &type metadata for ASPasskeyAttestationConfiguration.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ASManagedConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20E6C4978 + 4 * byte_20E6F2A2F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20E6C49AC + 4 * byte_20E6F2A2A[v4]))();
}

uint64_t sub_20E6C49AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6C49B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6C49BCLL);
  return result;
}

uint64_t sub_20E6C49C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6C49D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20E6C49D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6C49DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASManagedConfiguration.CodingKeys()
{
  return &type metadata for ASManagedConfiguration.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ASManagedConfiguration.ManagedConfigurationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20E6C4A38 + 4 * byte_20E6F2A34[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20E6C4A58 + 4 * byte_20E6F2A39[v4]))();
}

_BYTE *sub_20E6C4A38(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20E6C4A58(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E6C4A60(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E6C4A68(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E6C4A70(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E6C4A78(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ASManagedConfiguration.ManagedConfigurationError()
{
  return &type metadata for ASManagedConfiguration.ManagedConfigurationError;
}

unint64_t sub_20E6C4A98()
{
  unint64_t result;

  result = qword_254A2F098;
  if (!qword_254A2F098)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2BAC, &type metadata for ASManagedConfiguration.ManagedConfigurationError);
    atomic_store(result, (unint64_t *)&qword_254A2F098);
  }
  return result;
}

unint64_t sub_20E6C4AE0()
{
  unint64_t result;

  result = qword_254A2F0A0;
  if (!qword_254A2F0A0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2C64, &type metadata for ASManagedConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F0A0);
  }
  return result;
}

unint64_t sub_20E6C4B28()
{
  unint64_t result;

  result = qword_254A2F0A8;
  if (!qword_254A2F0A8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2D1C, &type metadata for ASPasskeyAttestationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F0A8);
  }
  return result;
}

unint64_t sub_20E6C4B70()
{
  unint64_t result;

  result = qword_254A2F0B0;
  if (!qword_254A2F0B0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2C8C, &type metadata for ASPasskeyAttestationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F0B0);
  }
  return result;
}

unint64_t sub_20E6C4BB8()
{
  unint64_t result;

  result = qword_254A2F0B8;
  if (!qword_254A2F0B8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2CB4, &type metadata for ASPasskeyAttestationConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F0B8);
  }
  return result;
}

unint64_t sub_20E6C4C00()
{
  unint64_t result;

  result = qword_254A2F0C0;
  if (!qword_254A2F0C0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2BD4, &type metadata for ASManagedConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F0C0);
  }
  return result;
}

unint64_t sub_20E6C4C48()
{
  unint64_t result;

  result = qword_254A2F0C8;
  if (!qword_254A2F0C8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2BFC, &type metadata for ASManagedConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F0C8);
  }
  return result;
}

uint64_t sub_20E6C4C8C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4C52557473696C70 && a2 == 0xE800000000000000;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000032 && a2 == 0x800000020E6F8630)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_20E6C4D78(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746172616C636564 && a2 == 0xEE0079654B6E6F69;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000026 && a2 == 0x800000020E6F8670 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x50676E69796C6572 && a2 == 0xEE00736569747261)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_20E6C4F0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_253E8D548;
  if (!qword_253E8D548)
  {
    v1 = sub_20E67BE44(255, (unint64_t *)&unk_253E8D580);
    result = MEMORY[0x212BC39A8](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_253E8D548);
  }
  return result;
}

void sub_20E6C4F64(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

id sub_20E6C4FB8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  objc_class *v14;
  uint64_t v16;
  objc_super v17;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v16 - v5;
  v7 = (void *)objc_opt_self();
  v8 = v0;
  v9 = objc_msgSend(v7, sel_defaultManager);
  v10 = objc_msgSend(v9, sel_as_authenticationServicesManagedConfigurationURL);

  if (v10)
  {
    sub_20E6E9B78();

    v11 = sub_20E6E9BC0();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v4, 0, 1, v11);
  }
  else
  {
    v12 = sub_20E6E9BC0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  }
  type metadata accessor for ASManagedConfiguration();
  sub_20E6C701C((uint64_t)v4, (uint64_t)v6);
  v13 = static ASManagedConfiguration.loadFromDisk(plistURL:)((uint64_t)v6);
  sub_20E66DEC4((uint64_t)v6);
  *(_QWORD *)&v8[OBJC_IVAR____TtC26AuthenticationServicesCore39ASPasskeyConfigurationSubscriberAdapter_currentConfiguration] = v13;

  v14 = (objc_class *)type metadata accessor for ASPasskeyConfigurationSubscriberAdapter();
  v17.receiver = v8;
  v17.super_class = v14;
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t sub_20E6C52EC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int v7;
  int v8;
  char v9;
  char v10;
  uint64_t result;
  void *v12;
  void *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;

  v1 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC26AuthenticationServicesCore39ASPasskeyConfigurationSubscriberAdapter_currentConfiguration);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    goto LABEL_11;
  swift_beginAccess();
  v3 = swift_bridgeObjectRetain();
  v4 = sub_20E6C103C(v3);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    v16 = sub_20E6C3FD0(v2);
    swift_bridgeObjectRelease();
    return v16;
  }
  v17 = v2;
  sub_20E6EA694();
  v6 = sub_20E6C6078(v4);
  v8 = v7;
  v10 = v9 & 1;
  result = objc_opt_self();
  v12 = (void *)result;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v4 + 32))
  {
    if (((*(_QWORD *)(v4 + 56 + (((unint64_t)v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(v4 + 36) != v8)
      goto LABEL_14;
    swift_bridgeObjectRetain();
    v13 = (void *)sub_20E6EA1C0();
    objc_msgSend(v12, sel_newDeclarationKey_, v13);
    swift_bridgeObjectRelease();

    sub_20E6EA67C();
    sub_20E6EA6A0();
    sub_20E6EA6AC();
    sub_20E6EA688();
    result = sub_20E6C6118(v6, v8, v10 & 1, v4);
    v6 = result;
    v8 = v14;
    v10 = v15 & 1;
    if (!--v5)
    {
      sub_20E6C61FC(result, v14, v15 & 1);
      v2 = v17;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

id sub_20E6C5540(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;

  swift_beginAccess();
  v12 = *(_QWORD *)(a4 + 16);
  v13 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 16) = a1;
  *(_QWORD *)(a4 + 24) = a2;
  sub_20E66A9D4(a1, a2);
  sub_20E66AA28(v12, v13);
  swift_beginAccess();
  v14 = *(void **)(a5 + 16);
  *(_QWORD *)(a5 + 16) = a3;
  v15 = a3;

  return objc_msgSend(a6, sel_complete);
}

uint64_t sub_20E6C560C(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  void (*v5)(void *, unint64_t, void *);
  id v6;
  unint64_t v7;
  unint64_t v8;
  id v9;

  v4 = a2;
  v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v6 = v4;
    v4 = (void *)sub_20E6E9C80();
    v8 = v7;

  }
  else
  {
    swift_retain();
    v8 = 0xF000000000000000;
  }
  v9 = a3;
  v5(v4, v8, a3);

  sub_20E66AA28((uint64_t)v4, v8);
  return swift_release();
}

void sub_20E6C5740(void *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  void *v20;
  id v21;
  Swift::String v22;
  uint64_t countAndFlagsBits;
  void *object;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  _BYTE *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t aBlock;
  uint64_t v43;
  void (*v44)(uint64_t, void *);
  void *v45;
  id (*v46)(void *);
  uint64_t v47;

  if (qword_253E8D070 != -1)
    swift_once();
  v3 = sub_20E6E9F50();
  __swift_project_value_buffer(v3, (uint64_t)qword_253E8E040);
  v4 = a1;
  v5 = sub_20E6E9F38();
  v6 = sub_20E6EA400();
  v40 = v4;
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v7 = 138412546;
    v9 = v4;
    sub_20E6EA4C0();
    *v8 = v4;

    *(_WORD *)(v7 + 12) = 2048;
    aBlock = a2;
    sub_20E6EA4C0();
    _os_log_impl(&dword_20E648000, v5, v6, "Removing declaration: %@, scope: %ld", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F160);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v8, -1, -1);
    MEMORY[0x212BC3A38](v7, -1, -1);

  }
  else
  {

  }
  sub_20E67BE44(0, &qword_254A2F150);
  if (objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_respondsToSelector_, sel_unassignAssets_scope_completionHandler_))
  {
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = 0;
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EB48]), sel_init);
    v12 = (void *)objc_opt_self();
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = v10;
    *(_QWORD *)(v13 + 24) = v11;
    v46 = sub_20E6C6014;
    v47 = v13;
    aBlock = MEMORY[0x24BDAC760];
    v43 = 1107296256;
    v44 = sub_20E6C4F64;
    v45 = &block_descriptor_1;
    v14 = _Block_copy(&aBlock);
    swift_retain();
    v15 = v11;
    swift_release();
    objc_msgSend(v12, sel_unassignAssets_scope_completionHandler_, v40, a2, v14);
    _Block_release(v14);
    objc_msgSend(v15, sel_waitForCompletion);
    swift_beginAccess();
    v38 = v15;
    if (*(_QWORD *)(v10 + 16))
    {
      swift_retain_n();
      v16 = sub_20E6E9F38();
      v17 = sub_20E6EA3E8();
      if (!os_log_type_enabled(v16, v17))
      {

        swift_release_n();
LABEL_23:
        sub_20E6C6034();
        swift_allocError();
        *v37 = 2;
        swift_willThrow();
        swift_release();

        return;
      }
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      aBlock = v19;
      *(_DWORD *)v18 = 136315138;
      v20 = *(void **)(v10 + 16);
      if (v20)
      {
        swift_getErrorValue();
        v21 = v20;
        v22 = Error.loggerDescription()();
        countAndFlagsBits = v22._countAndFlagsBits;
        object = v22._object;

      }
      else
      {
        object = (void *)0xE500000000000000;
        countAndFlagsBits = 0x3E6C696E3CLL;
      }
      sub_20E66A2F8(countAndFlagsBits, (unint64_t)object, &aBlock);
      sub_20E6EA4C0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_20E648000, v16, v17, "Unable to remove attestation certification from keychain: %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x212BC3A38](v19, -1, -1);
    }
    else
    {
      v28 = *(void **)(v39
                     + OBJC_IVAR____TtC26AuthenticationServicesCore39ASPasskeyConfigurationSubscriberAdapter_currentConfiguration);
      if (v28)
      {
        v29 = v28;
        v30 = objc_msgSend(v40, sel_key);
        v31 = sub_20E6EA1CC();
        v33 = v32;

        swift_beginAccess();
        sub_20E6C26FC(v31, v33, (uint64_t)&aBlock);
        v34 = aBlock;
        v35 = v43;
        swift_endAccess();
        sub_20E6C4314(v34, v35);
        sub_20E6C16B8();
        swift_release();

        swift_bridgeObjectRelease();
        return;
      }
      v16 = sub_20E6E9F38();
      v36 = sub_20E6EA3F4();
      if (!os_log_type_enabled(v16, v36))
        goto LABEL_22;
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_20E648000, v16, v36, "Existing configuration is invalid", v18, 2u);
    }
    MEMORY[0x212BC3A38](v18, -1, -1);
LABEL_22:

    goto LABEL_23;
  }
  v25 = sub_20E6E9F38();
  v26 = sub_20E6EA3F4();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_20E648000, v25, v26, "RemoteManagement is too old on this build. Please update.", v27, 2u);
    MEMORY[0x212BC3A38](v27, -1, -1);
  }

}

id sub_20E6C5DC0(void *a1, uint64_t a2, void *a3)
{
  void *v6;
  id v7;

  swift_beginAccess();
  v6 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;
  v7 = a1;

  return objc_msgSend(a3, sel_complete);
}

id sub_20E6C5F64()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASPasskeyConfigurationSubscriberAdapter();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ASPasskeyConfigurationSubscriberAdapter()
{
  return objc_opt_self();
}

uint64_t sub_20E6C5FC4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_20E6C5FE8()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

id sub_20E6C6014(void *a1)
{
  uint64_t v1;

  return sub_20E6C5DC0(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t sub_20E6C6034()
{
  unint64_t result;

  result = qword_254A2F158;
  if (!qword_254A2F158)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2F00, &type metadata for ASPasskeyConfigurationSubscriberAdapter.AdapterError);
    atomic_store(result, (unint64_t *)&qword_254A2F158);
  }
  return result;
}

uint64_t sub_20E6C6078(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_20E6C6118(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_20E6C61FC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

void sub_20E6C6208(void *a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  const char *v20;
  _BYTE *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _BYTE *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  _QWORD *v47;
  void *v48;
  id v49;
  unint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  void *v53;
  uint8_t *v54;
  uint64_t v55;
  void *v56;
  id v57;
  Swift::String v58;
  uint64_t countAndFlagsBits;
  void *object;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  _BYTE *v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  _BYTE *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  char isUniquelyReferenced_nonNull_native;
  void *v80;
  void *v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  _BYTE *v85;
  _BYTE *v86;
  id v87;
  id v88;
  char *v89;
  void *v90;
  uint64_t v91;
  void *v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  _QWORD aBlock[6];
  _QWORD v98[8];

  sub_20E67BE44(0, (unint64_t *)&unk_254A2F168);
  if (!objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_respondsToSelector_, sel_resolveKeychainAsset_assetIdentifier_accessGroup_completionHandler_))
  {
    if (qword_253E8D070 != -1)
      swift_once();
    v16 = sub_20E6E9F50();
    __swift_project_value_buffer(v16, (uint64_t)qword_253E8E040);
    v17 = sub_20E6E9F38();
    v18 = sub_20E6EA3F4();
    if (!os_log_type_enabled(v17, v18))
      goto LABEL_13;
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    v20 = "RemoteManagement is too old on this build. Please update.";
    goto LABEL_12;
  }
  if (a2 != 1)
  {
    if (qword_253E8D070 != -1)
      swift_once();
    v22 = sub_20E6E9F50();
    __swift_project_value_buffer(v22, (uint64_t)qword_253E8E040);
    v23 = sub_20E6E9F38();
    v24 = sub_20E6EA3E8();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_20E648000, v23, v24, "Attempted to use passkey attestation configuration for unexpected scope", v25, 2u);
      MEMORY[0x212BC3A38](v25, -1, -1);
    }

    sub_20E6C6034();
    swift_allocError();
    *v26 = 0;
    goto LABEL_19;
  }
  v5 = *(void **)(v2
                + OBJC_IVAR____TtC26AuthenticationServicesCore39ASPasskeyConfigurationSubscriberAdapter_currentConfiguration);
  if (!v5)
  {
    if (qword_253E8D070 != -1)
      swift_once();
    v27 = sub_20E6E9F50();
    __swift_project_value_buffer(v27, (uint64_t)qword_253E8E040);
    v17 = sub_20E6E9F38();
    v18 = sub_20E6EA3F4();
    if (!os_log_type_enabled(v17, v18))
      goto LABEL_13;
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    v20 = "Existing configuration is invalid";
LABEL_12:
    _os_log_impl(&dword_20E648000, v17, v18, v20, v19, 2u);
    MEMORY[0x212BC3A38](v19, -1, -1);
LABEL_13:

    sub_20E6C6034();
    swift_allocError();
    *v21 = 2;
LABEL_19:
    swift_willThrow();
    return;
  }
  v6 = qword_253E8D070;
  v7 = v5;
  if (v6 != -1)
    swift_once();
  v8 = sub_20E6E9F50();
  __swift_project_value_buffer(v8, (uint64_t)qword_253E8E040);
  v9 = a1;
  v10 = sub_20E6E9F38();
  v11 = sub_20E6EA400();
  v93 = v9;
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v12 = 138412546;
    v14 = v7;
    v15 = v9;
    sub_20E6EA4C0();
    *v13 = v9;

    v7 = v14;
    *(_WORD *)(v12 + 12) = 2048;
    aBlock[0] = 1;
    sub_20E6EA4C0();
    _os_log_impl(&dword_20E648000, v10, v11, "Applying configuration: %@, scope: %ld", (uint8_t *)v12, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F160);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v13, -1, -1);
    MEMORY[0x212BC3A38](v12, -1, -1);

  }
  else
  {

  }
  v28 = (void *)objc_opt_self();
  v29 = (void *)sub_20E6EA1C0();
  v30 = objc_msgSend(v28, sel_newDeclarationKeyWithSubscriberIdentifier_reference_, v29, v9);
  v31 = v9;
  v32 = v30;

  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_20E6EE5B0;
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = 0;
  v35 = (void **)(v34 + 16);
  v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE7EB48]), sel_init);
  v37 = objc_msgSend(v31, sel_declaration);
  v98[7] = &unk_254A4AD68;
  v38 = (void *)swift_dynamicCastObjCProtocolConditional();
  if (v38
    && (v39 = v38,
        v92 = v37,
        (objc_msgSend(v38, sel_respondsToSelector_, sel_payloadAttestationIdentityAssetReference) & 1) != 0))
  {
    v90 = v32;
    v91 = v34;
    v40 = objc_msgSend(v39, sel_payloadAttestationIdentityAssetReference);
    sub_20E6EA1CC();

    if ((objc_msgSend(v39, sel_respondsToSelector_, sel_payloadRelyingParties) & 1) != 0)
    {
      v41 = objc_msgSend(v39, sel_payloadRelyingParties);
      v42 = sub_20E6EA340();

      v43 = (void *)sub_20E6EA1C0();
      swift_bridgeObjectRelease();
      v44 = objc_msgSend(v93, sel_assetWithIdentifier_, v43);

      if (!v44)
      {
        swift_bridgeObjectRelease();
        v65 = sub_20E6E9F38();
        v66 = sub_20E6EA3E8();
        if (os_log_type_enabled(v65, v66))
        {
          v67 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v67 = 0;
          _os_log_impl(&dword_20E648000, v65, v66, "Could not find attestation certificate reference", v67, 2u);
          MEMORY[0x212BC3A38](v67, -1, -1);
        }

        sub_20E6C6034();
        swift_allocError();
        *v68 = 0;
        swift_willThrow();

        swift_release();
        swift_release();

        v69 = v92;
        goto LABEL_55;
      }
      v89 = v7;
      v87 = v44;
      v45 = objc_msgSend(v44, sel_declarationIdentifier);
      if (!v45)
      {
        sub_20E6EA1CC();
        v45 = (id)sub_20E6EA1C0();
        swift_bridgeObjectRelease();
      }
      v88 = (id)objc_opt_self();
      v46 = (void *)sub_20E6EA1C0();
      v47 = (_QWORD *)swift_allocObject();
      v47[2] = v33;
      v47[3] = v91;
      v47[4] = v36;
      aBlock[4] = sub_20E6C7010;
      aBlock[5] = v47;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_20E6C560C;
      aBlock[3] = &block_descriptor_14;
      v48 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      v49 = v36;
      swift_release();
      objc_msgSend(v88, sel_resolveKeychainAsset_assetIdentifier_accessGroup_completionHandler_, v93, v45, v46, v48);
      _Block_release(v48);

      objc_msgSend(v49, sel_waitForCompletion);
      swift_beginAccess();
      v50 = *(_QWORD *)(v33 + 24);
      if (v50 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
        swift_retain_n();
        v51 = sub_20E6E9F38();
        v52 = sub_20E6EA3E8();
        v53 = v89;
        if (os_log_type_enabled(v51, v52))
        {
          v94 = v49;
          v54 = (uint8_t *)swift_slowAlloc();
          v55 = swift_slowAlloc();
          v96 = v55;
          *(_DWORD *)v54 = 136315138;
          swift_beginAccess();
          v56 = *v35;
          if (*v35)
          {
            swift_getErrorValue();
            v57 = v56;
            v58 = Error.loggerDescription()();
            countAndFlagsBits = v58._countAndFlagsBits;
            object = v58._object;

          }
          else
          {
            object = (void *)0xE500000000000000;
            countAndFlagsBits = 0x3E6C696E3CLL;
          }
          sub_20E66A2F8(countAndFlagsBits, (unint64_t)object, &v96);
          sub_20E6EA4C0();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_20E648000, v51, v52, "Could not resolve attestation certificate asset: %s", v54, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x212BC3A38](v55, -1, -1);
          MEMORY[0x212BC3A38](v54, -1, -1);

          v53 = v89;
          v81 = v90;
          v49 = v94;
        }
        else
        {

          swift_release_n();
          v81 = v90;
        }
        sub_20E6C6034();
        swift_allocError();
        *v86 = 1;
        swift_willThrow();

        swift_release();
      }
      else
      {
        v70 = *(_QWORD *)(v33 + 16);
        v71 = *(_QWORD *)(v42 + 16);
        sub_20E66A990(v70, v50);
        if (v71)
        {
          v95 = v49;
          v72 = objc_msgSend(v90, sel_key);
          v73 = sub_20E6EA1CC();
          v75 = v74;

          v76 = sub_20E6E9C74();
          v98[0] = v73;
          v98[1] = v75;
          v98[2] = v76;
          v98[3] = v77;
          v98[4] = v42;
          v78 = (uint64_t *)&v89[OBJC_IVAR____TtC26AuthenticationServicesCore22ASManagedConfiguration_declarationKeyToPasskeyAttestationConfigurationKey];
          swift_beginAccess();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v96 = *v78;
          *v78 = 0x8000000000000000;
          sub_20E6AFE50((uint64_t)v98, v73, v75, isUniquelyReferenced_nonNull_native);
          *v78 = v96;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess();
          sub_20E6C16B8();

          sub_20E66AA28(v70, v50);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v80 = v90;
LABEL_54:

          v69 = v87;
LABEL_55:

          return;
        }
        swift_bridgeObjectRelease();
        v82 = sub_20E6E9F38();
        v83 = sub_20E6EA3E8();
        if (os_log_type_enabled(v82, v83))
        {
          v84 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v84 = 0;
          _os_log_impl(&dword_20E648000, v82, v83, "No relying parties specified", v84, 2u);
          MEMORY[0x212BC3A38](v84, -1, -1);
        }

        sub_20E6C6034();
        swift_allocError();
        *v85 = 0;
        swift_willThrow();
        sub_20E66AA28(v70, v50);

        swift_release();
      }
      swift_release();

      v80 = v92;
      goto LABEL_54;
    }

    swift_bridgeObjectRelease();
  }
  else
  {

  }
  v61 = sub_20E6E9F38();
  v62 = sub_20E6EA3E8();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v63 = 0;
    _os_log_impl(&dword_20E648000, v61, v62, "Could not find expected declaration", v63, 2u);
    MEMORY[0x212BC3A38](v63, -1, -1);
  }

  sub_20E6C6034();
  swift_allocError();
  *v64 = 0;
  swift_willThrow();

  swift_release();
  swift_release();

}

uint64_t sub_20E6C6FA8()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 != 15)
    sub_20E6673F4(*(_QWORD *)(v0 + 16), v1);
  return swift_deallocObject();
}

uint64_t sub_20E6C6FDC()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

id sub_20E6C7010(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;

  return sub_20E6C5540(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(void **)(v3 + 32));
}

uint64_t sub_20E6C701C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for ASPasskeyConfigurationSubscriberAdapter.AdapterError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_20E6C70B0 + 4 * byte_20E6F2E35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_20E6C70E4 + 4 * byte_20E6F2E30[v4]))();
}

uint64_t sub_20E6C70E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6C70EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6C70F4);
  return result;
}

uint64_t sub_20E6C7100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6C7108);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_20E6C710C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6C7114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASPasskeyConfigurationSubscriberAdapter.AdapterError()
{
  return &type metadata for ASPasskeyConfigurationSubscriberAdapter.AdapterError;
}

unint64_t sub_20E6C7134()
{
  unint64_t result;

  result = qword_254A2F178;
  if (!qword_254A2F178)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F2ED8, &type metadata for ASPasskeyConfigurationSubscriberAdapter.AdapterError);
    atomic_store(result, (unint64_t *)&qword_254A2F178);
  }
  return result;
}

uint64_t static ASPasskeyConfigurationSubscriberApplicator.supportedConfigurationTypes()()
{
  uint64_t v0;

  v0 = sub_20E6C737C((uint64_t)&unk_24C980428);
  swift_arrayDestroy();
  return v0;
}

id ASPasskeyConfigurationSubscriberApplicator.__allocating_init(adapter:inPlaceUpdates:)(uint64_t a1, char a2)
{
  objc_class *v2;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v2), sel_initWithAdapter_inPlaceUpdates_, a1, a2 & 1);
  swift_unknownObjectRelease();
  return v3;
}

void ASPasskeyConfigurationSubscriberApplicator.init(adapter:inPlaceUpdates:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id ASPasskeyConfigurationSubscriberApplicator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASPasskeyConfigurationSubscriberApplicator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_20E6C737C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D550);
    v3 = sub_20E6EA5EC();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_20E6EA988();
      swift_bridgeObjectRetain();
      sub_20E6EA250();
      result = sub_20E6EA9A0();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_20E6EA8EC(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_20E6EA8EC();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t type metadata accessor for ASPasskeyConfigurationSubscriberApplicator()
{
  return objc_opt_self();
}

uint64_t sub_20E6C753C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t countAndFlagsBits;
  void *object;
  void *v17;
  uint64_t v18;

  if (qword_254A2DBF8 != -1)
    swift_once();
  v8 = sub_20E6E9F50();
  __swift_project_value_buffer(v8, (uint64_t)qword_254A3ED68);
  swift_bridgeObjectRetain_n();
  v9 = sub_20E6E9F38();
  v10 = sub_20E6EA3D0();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v18 = v12;
    *(_DWORD *)v11 = 136315138;
    if (a2)
    {
      swift_bridgeObjectRetain_n();
      __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1A0);
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_getErrorValue();
        v13 = Error.loggerDescription()();
        countAndFlagsBits = v13._countAndFlagsBits;
        object = v13._object;

        swift_bridgeObjectRelease();
      }
      else
      {
        sub_20E6EA6B8();
        swift_bridgeObjectRelease();
        countAndFlagsBits = 0;
        object = (void *)0xE000000000000000;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      object = (void *)0xE500000000000000;
      countAndFlagsBits = 0x3E6C696E3CLL;
    }
    sub_20E66A2F8(countAndFlagsBits, (unint64_t)object, &v18);
    sub_20E6EA4C0();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_20E648000, v9, v10, "Socket connected with protocol: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v12, -1, -1);
    MEMORY[0x212BC3A38](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *(_BYTE *)(a3 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_isConnected) = 1;
  if (a4)
    a4(a1, a2);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  sub_20E6EA43C();
  return swift_release_n();
}

uint64_t sub_20E6C7838(uint64_t result, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;

  if (result)
  {
    v3 = (void *)result;
    if (qword_254A2DBF8 != -1)
      swift_once();
    v4 = sub_20E6E9F50();
    __swift_project_value_buffer(v4, (uint64_t)qword_254A3ED68);
    v5 = v3;
    v6 = sub_20E6E9F38();
    v7 = sub_20E6EA3E8();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v8 = 138412290;
      v13 = sub_20E6E9B3C();
      sub_20E6EA4C0();
      *v9 = v13;

      _os_log_impl(&dword_20E648000, v6, v7, "Send error: %@", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F160);
      swift_arrayDestroy();
      MEMORY[0x212BC3A38](v9, -1, -1);
      MEMORY[0x212BC3A38](v8, -1, -1);
    }
    else
    {

    }
    v10 = a2 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_delegate;
    result = MEMORY[0x212BC3AEC](a2 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_delegate);
    if (result)
    {
      v11 = *(_QWORD *)(v10 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v11 + 24))(a2, v3, ObjectType, v11);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

void sub_20E6C7A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  id v24;
  char *v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  id v39;
  char v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(NSObject *, NSObject *, uint64_t, uint64_t);
  NSObject *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  os_log_type_t v53;
  uint8_t *v54;
  NSObject *v55;
  _QWORD v56[4];
  id v57;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F320);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v7 = MEMORY[0x212BC3AEC](a2 + 16);
  if (!v7)
    return;
  v8 = v7;
  sub_20E67BCC0(a1, (uint64_t)v6, &qword_254A2F320);
  v9 = &unk_254A2F000;
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v20 = sub_20E6EA430();
    v21 = *(_QWORD *)(v20 - 8);
    v22 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v6, v20);
    if (v22 == *MEMORY[0x24BDD00C0])
    {
      (*(void (**)(char *, uint64_t))(v21 + 96))(v6, v20);
      v24 = *(id *)v6;
      v23 = *((_QWORD *)v6 + 1);
      v25 = (char *)v8 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_delegate;
      if (MEMORY[0x212BC3AEC]((char *)v8 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_delegate))
      {
        v26 = *((_QWORD *)v25 + 1);
        ObjectType = swift_getObjectType();
        (*(void (**)(NSObject *, id, unint64_t, uint64_t, uint64_t))(v26 + 8))(v8, v24, v23, ObjectType, v26);
        swift_unknownObjectRelease();
      }
      sub_20E6673F4((uint64_t)v24, v23);
    }
    else if (v22 == *MEMORY[0x24BDD00C8])
    {
      (*(void (**)(char *, uint64_t))(v21 + 96))(v6, v20);
      v29 = *(id *)v6;
      v28 = *((_QWORD *)v6 + 1);
      v30 = (char *)v8 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_delegate;
      if (MEMORY[0x212BC3AEC]((char *)v8 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_delegate))
      {
        v31 = *((_QWORD *)v30 + 1);
        v32 = swift_getObjectType();
        (*(void (**)(NSObject *, id, uint64_t, uint64_t, uint64_t))(v31 + 16))(v8, v29, v28, v32, v31);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      if (qword_254A2DBF8 != -1)
        swift_once();
      v49 = sub_20E6E9F50();
      __swift_project_value_buffer(v49, (uint64_t)qword_254A3ED68);
      v50 = sub_20E6E9F38();
      v51 = sub_20E6EA3F4();
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v52 = 0;
        _os_log_impl(&dword_20E648000, v50, v51, "Received response with unknown type", v52, 2u);
        MEMORY[0x212BC3A38](v52, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v20);
    }
    goto LABEL_36;
  }
  v57 = *(id *)v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1A0);
  sub_20E6C9310();
  if (!swift_dynamicCast())
  {
    sub_20E6EA8E0();
    __break(1u);
    return;
  }
  v10 = (void *)v56[3];
  if (qword_254A2DBF8 != -1)
    swift_once();
  v11 = sub_20E6E9F50();
  v12 = __swift_project_value_buffer(v11, (uint64_t)qword_254A3ED68);
  v13 = v10;
  v14 = sub_20E6E9F38();
  v15 = sub_20E6EA3E8();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v56[1] = v12;
    v56[2] = v13;
    v18 = (_QWORD *)v17;
    *(_DWORD *)v16 = 138412290;
    v19 = v13;
    v9 = (_QWORD *)&unk_254A2F000;
    sub_20E6EA4C0();
    *v18 = v13;

    _os_log_impl(&dword_20E648000, v14, v15, "Receive error: %@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F160);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v18, -1, -1);
    MEMORY[0x212BC3A38](v16, -1, -1);
  }
  else
  {

    v14 = v13;
  }

  v33 = -[NSObject domain](v13, sel_domain);
  v34 = sub_20E6EA1CC();
  v36 = v35;

  if (v34 == sub_20E6E9908() && v36 == v37)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v38 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v38 & 1) == 0)
    {
LABEL_25:
      v44 = (char *)v8 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_delegate;
      if (MEMORY[0x212BC3AEC]((char *)v8 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_delegate))
      {
        v45 = *((_QWORD *)v44 + 1);
        v46 = swift_getObjectType();
        v47 = *(void (**)(NSObject *, NSObject *, uint64_t, uint64_t))(v45 + 24);
        v48 = v13;
        v47(v8, v48, v46, v45);
        swift_unknownObjectRelease();

      }
      *((_BYTE *)&v8->isa + v9[75]) = 0;

LABEL_36:
      if (*((_BYTE *)&v8->isa + v9[75]) == 1)
      {
        swift_allocObject();
        swift_unknownObjectWeakInit();
        swift_retain();
        sub_20E6EA43C();

        swift_release_n();
      }
      else
      {

      }
      return;
    }
  }
  v39 = -[NSObject code](v13, sel_code);
  sub_20E6E9914();
  if (v39 != (id)(int)sub_20E6E9FC8())
    goto LABEL_25;
  v40 = *((_BYTE *)&v8->isa + v9[75]);
  v41 = sub_20E6E9F38();
  if ((v40 & 1) != 0)
  {
    v42 = sub_20E6EA3E8();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_20E648000, v41, v42, "Socket unexpectedly disconnected", v43, 2u);
      MEMORY[0x212BC3A38](v43, -1, -1);
    }

    goto LABEL_25;
  }
  v53 = sub_20E6EA3D0();
  if (os_log_type_enabled(v41, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v54 = 0;
    _os_log_impl(&dword_20E648000, v41, v53, "Ignoring disconnection after socket closed.", v54, 2u);
    MEMORY[0x212BC3A38](v54, -1, -1);
    v55 = v13;
  }
  else
  {
    v55 = v41;
    v41 = v8;
    v8 = v13;
  }

}

uint64_t sub_20E6C833C(void *a1, void *a2, void *a3, void *aBlock, void *a5)
{
  _QWORD *v5;
  id v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t);

  v5[4] = a3;
  v5[5] = a5;
  v5[2] = a1;
  v5[3] = a2;
  v5[6] = _Block_copy(aBlock);
  v15 = (uint64_t (*)(uint64_t))((char *)&dword_254A2F300 + dword_254A2F300);
  v10 = a1;
  v11 = a2;
  v12 = a3;
  a5;
  v13 = (_QWORD *)swift_task_alloc();
  v5[7] = v13;
  *v13 = v5;
  v13[1] = sub_20E6C83E8;
  return v15((uint64_t)v12);
}

uint64_t sub_20E6C83E8(uint64_t a1, void *a2)
{
  uint64_t *v2;
  void (**v5)(_QWORD, _QWORD, _QWORD);
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v11;

  v5 = *(void (***)(_QWORD, _QWORD, _QWORD))(*v2 + 48);
  v7 = *(void **)(*v2 + 32);
  v6 = *(void **)(*v2 + 40);
  v9 = *(void **)(*v2 + 16);
  v8 = *(void **)(*v2 + 24);
  v11 = *v2;
  swift_task_dealloc();

  ((void (**)(_QWORD, uint64_t, void *))v5)[2](v5, a1, a2);
  _Block_release(v5);

  return (*(uint64_t (**)(void))(v11 + 8))();
}

id sub_20E6C84B4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASWebSocket();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ASWebSocket()
{
  return objc_opt_self();
}

uint64_t sub_20E6C8570()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject();
}

uint64_t sub_20E6C85B4()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_20E69B198;
  return ((uint64_t (*)(void *, void *, void *, void *, void *))((char *)&dword_254A2F2F0 + dword_254A2F2F0))(v2, v3, v4, v5, v6);
}

uint64_t sub_20E6C863C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _BYTE *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  _BYTE *v23;
  id v24;
  void *v25;
  _BYTE *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  id v28;
  uint64_t result;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  id v52;
  nw_endpoint_t host;
  uint64_t v54;
  id v55;
  objc_class *v56;
  char *v57;
  _QWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  objc_super v70;
  __int128 v71;
  uint64_t v72;
  _QWORD v73[3];
  uint64_t v74;
  uint64_t v75;

  v66 = a6;
  v58[1] = a5;
  v64 = a2;
  v12 = sub_20E6E9BC0();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_20E6E9950();
  v68 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v58[0] = (char *)v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v58 - v19;
  *(_QWORD *)&v7[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v7[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_isConnected] = 0;
  v21 = &v7[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_connectionCompletionHandler];
  *v21 = 0;
  v21[1] = 0;
  v22 = &v7[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_testDelegate];
  *(_OWORD *)v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  *((_QWORD *)v22 + 4) = 0;
  v63 = a7;
  v60 = v16;
  v65 = (uint64_t)v22;
  if (a4)
  {
    v23 = v7;
    v24 = a4;
  }
  else
  {
    v25 = (void *)objc_opt_self();
    v26 = v7;
    v24 = objc_msgSend(v25, sel_sharedSession);
  }
  v69 = v7;
  v59 = OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_urlSession;
  *(_QWORD *)&v7[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_urlSession] = v24;
  v61 = v13;
  v62 = v12;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v67 = a1;
  v27(v15, a1, v12);
  v28 = a4;
  result = sub_20E6E992C();
  v30 = 0;
  v31 = a3 + 64;
  v32 = 1 << *(_BYTE *)(a3 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & *(_QWORD *)(a3 + 64);
  v35 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      v34 &= v34 - 1;
      goto LABEL_8;
    }
    v36 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
    if (v36 >= v35)
      goto LABEL_24;
    v37 = *(_QWORD *)(v31 + 8 * v36);
    ++v30;
    if (!v37)
    {
      v30 = v36 + 1;
      if (v36 + 1 >= v35)
        goto LABEL_24;
      v37 = *(_QWORD *)(v31 + 8 * v30);
      if (!v37)
      {
        v30 = v36 + 2;
        if (v36 + 2 >= v35)
          goto LABEL_24;
        v37 = *(_QWORD *)(v31 + 8 * v30);
        if (!v37)
          break;
      }
    }
LABEL_23:
    v34 = (v37 - 1) & v37;
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_20E6E9938();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
  }
  v38 = v36 + 3;
  if (v38 < v35)
  {
    v37 = *(_QWORD *)(v31 + 8 * v38);
    if (!v37)
    {
      while (1)
      {
        v30 = v38 + 1;
        if (__OFADD__(v38, 1))
          goto LABEL_33;
        if (v30 >= v35)
          goto LABEL_24;
        v37 = *(_QWORD *)(v31 + 8 * v30);
        ++v38;
        if (v37)
          goto LABEL_23;
      }
    }
    v30 = v38;
    goto LABEL_23;
  }
LABEL_24:
  swift_release();
  if (*(_QWORD *)(v64 + 16))
  {
    v73[0] = v64;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
    sub_20E683634();
    sub_20E6EA184();
    swift_bridgeObjectRelease();
    sub_20E6E9938();
  }
  swift_bridgeObjectRelease();
  v40 = v62;
  v39 = v63;
  v41 = v61;
  v42 = v60;
  sub_20E67BCC0(v63, (uint64_t)&v71, &qword_254A2F308);
  if (v72)
  {
    sub_20E6789E8(&v71, (uint64_t)v73);
    v43 = v74;
    v44 = v75;
    __swift_project_boxed_opaque_existential_1Tm(v73, v74);
    v45 = v58[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 8))(v20, v43, v44);
    v46 = v68;
    (*(void (**)(char *, uint64_t))(v68 + 8))(v20, v42);
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v20, v45, v42);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
  }
  else
  {
    sub_20E6C921C((uint64_t)&v71);
  }
  v47 = v69;
  v48 = *(id *)&v69[v59];
  v49 = (void *)sub_20E6E9920();
  v50 = objc_msgSend(v48, sel_webSocketTaskWithRequest_, v49);

  *(_QWORD *)&v47[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_webSocketTask] = v50;
  if (v66)
  {
    v51 = sub_20E6EA220();
    v52 = v50;
    swift_bridgeObjectRelease();
    host = nw_endpoint_create_host((const char *)(v51 + 32), "https");
    swift_release();
    objc_msgSend(v52, sel_set_hostOverride_, host);

    swift_unknownObjectRelease();
  }
  v54 = v65;
  swift_beginAccess();
  sub_20E6C934C(v39, v54);
  swift_endAccess();
  v55 = v69;

  v56 = (objc_class *)type metadata accessor for ASWebSocket();
  v70.receiver = v55;
  v70.super_class = v56;
  v57 = (char *)objc_msgSendSuper2(&v70, sel_init);
  objc_msgSend(*(id *)&v57[OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_webSocketTask], sel_setDelegate_, v57);
  sub_20E6C921C(v39);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v67, v40);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v20, v42);
  return (uint64_t)v57;
}

void sub_20E6C8BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void (*v10)(uint64_t, uint64_t);

  v3 = v2;
  if (qword_254A2DBF8 != -1)
    swift_once();
  v6 = sub_20E6E9F50();
  __swift_project_value_buffer(v6, (uint64_t)qword_254A3ED68);
  v7 = sub_20E6E9F38();
  v8 = sub_20E6EA3D0();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_20E648000, v7, v8, "Opened socket", v9, 2u);
    MEMORY[0x212BC3A38](v9, -1, -1);
  }

  v10 = *(void (**)(uint64_t, uint64_t))(v3
                                                + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_connectionCompletionHandler);
  if (v10)
  {
    swift_retain();
    v10(a1, a2);
    sub_20E67BADC((uint64_t)v10);
  }
}

void sub_20E6C8D0C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  Swift::String v12;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t ObjectType;
  void (*v19)(uint64_t, void *, uint64_t, uint64_t);
  id v20;
  uint64_t v21;

  v2 = v1;
  if (qword_254A2DBF8 != -1)
    swift_once();
  v4 = sub_20E6E9F50();
  __swift_project_value_buffer(v4, (uint64_t)qword_254A3ED68);
  v5 = a1;
  v6 = a1;
  v7 = sub_20E6E9F38();
  v8 = sub_20E6EA3E8();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v21 = v10;
    *(_DWORD *)v9 = 136315138;
    if (a1)
    {
      swift_getErrorValue();
      v11 = a1;
      v12 = Error.loggerDescription()();
      countAndFlagsBits = v12._countAndFlagsBits;
      object = v12._object;

    }
    else
    {
      object = (void *)0xE500000000000000;
      countAndFlagsBits = 0x3E6C696E3CLL;
    }
    sub_20E66A2F8(countAndFlagsBits, (unint64_t)object, &v21);
    sub_20E6EA4C0();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_20E648000, v7, v8, "Could not connect: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x212BC3A38](v10, -1, -1);
    MEMORY[0x212BC3A38](v9, -1, -1);
  }
  else
  {

  }
  v15 = v2 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_delegate;
  if (MEMORY[0x212BC3AEC](v2 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_delegate))
  {
    v16 = *(_QWORD *)(v15 + 8);
    v17 = a1;
    if (!a1)
    {
      sub_20E6C92A0();
      v17 = (void *)swift_allocError();
    }
    ObjectType = swift_getObjectType();
    v19 = *(void (**)(uint64_t, void *, uint64_t, uint64_t))(v16 + 24);
    v20 = a1;
    v19(v2, v17, ObjectType, v16);
    swift_unknownObjectRelease();

  }
}

uint64_t sub_20E6C8F88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = v1;
  return swift_task_switch();
}

void sub_20E6C8FA0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;

  if (qword_254A2DBF8 != -1)
    swift_once();
  v1 = sub_20E6E9F50();
  __swift_project_value_buffer(v1, (uint64_t)qword_254A3ED68);
  v2 = sub_20E6E9F38();
  v3 = sub_20E6EA3D0();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_20E648000, v2, v3, "Received server challenge", v4, 2u);
    MEMORY[0x212BC3A38](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 128);

  v6 = v5 + OBJC_IVAR____TtC26AuthenticationServicesCore11ASWebSocket_testDelegate;
  swift_beginAccess();
  sub_20E67BCC0(v6, v0 + 16, &qword_254A2F308);
  if (!*(_QWORD *)(v0 + 40))
  {
    sub_20E6C921C(v0 + 16);
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(v0 + 120);
  sub_20E6C925C(v0 + 16, v0 + 56);
  sub_20E6C921C(v0 + 16);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1Tm((_QWORD *)(v0 + 56), v8);
  LOBYTE(v7) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v8, v9);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  if ((v7 & 1) == 0)
  {
LABEL_12:
    v16 = 0;
    v17 = 1;
    goto LABEL_13;
  }
  v10 = sub_20E6E9F38();
  v11 = sub_20E6EA3D0();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_20E648000, v10, v11, "Overriding trust for test server", v12, 2u);
    MEMORY[0x212BC3A38](v12, -1, -1);
  }
  v13 = *(void **)(v0 + 120);

  v14 = objc_msgSend(v13, sel_protectionSpace);
  v15 = objc_msgSend(v14, sel_serverTrust);

  if (v15)
  {
    v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1818]), sel_initWithTrust_, v15);

    v17 = 0;
LABEL_13:
    (*(void (**)(uint64_t, id))(v0 + 8))(v17, v16);
    return;
  }
  __break(1u);
}

uint64_t sub_20E6C921C(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F308);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20E6C925C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_20E6C92A0()
{
  unint64_t result;

  result = qword_254A2F310;
  if (!qword_254A2F310)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F3048, &type metadata for ASWebSocket.SocketError);
    atomic_store(result, (unint64_t *)&qword_254A2F310);
  }
  return result;
}

uint64_t sub_20E6C92E4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_20E6C9308(uint64_t a1)
{
  uint64_t v1;

  sub_20E6C7A0C(a1, v1);
}

unint64_t sub_20E6C9310()
{
  unint64_t result;

  result = qword_253E8D508;
  if (!qword_253E8D508)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_253E8D508);
  }
  return result;
}

uint64_t sub_20E6C934C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F308);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for ASWebSocket.SocketError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20E6C93D4 + 4 * byte_20E6F2F80[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20E6C93F4 + 4 * byte_20E6F2F85[v4]))();
}

_BYTE *sub_20E6C93D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20E6C93F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E6C93FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E6C9404(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E6C940C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E6C9414(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ASWebSocket.SocketError()
{
  return &type metadata for ASWebSocket.SocketError;
}

unint64_t sub_20E6C9434()
{
  unint64_t result;

  result = qword_254A2F328;
  if (!qword_254A2F328)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F3020, &type metadata for ASWebSocket.SocketError);
    atomic_store(result, (unint64_t *)&qword_254A2F328);
  }
  return result;
}

uint64_t sub_20E6C947C()
{
  sub_20E6D4554();
  return sub_20E6E9E18();
}

void sub_20E6C94B8(_QWORD *a1@<X8>)
{
  *a1 = &unk_24C980488;
}

uint64_t sub_20E6C94C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  _BOOL8 v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t result;
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for CableRequest.StateDeleteRequest(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CableRequest.AllocationRequest(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CableRequest.OneOf_Request(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v22 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v22 - v15;
  sub_20E67BDC4(v1, (uint64_t)&v22 - v15, v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_20E67BDC4(v1, (uint64_t)v11, type metadata accessor for CableRequest.OneOf_Request);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_20E67BD80((uint64_t)v11, (uint64_t)v4, type metadata accessor for CableRequest.StateDeleteRequest);
      v18 = *(_QWORD *)&v4[*(int *)(v2 + 20) + 8] >> 60 != 15;
      v19 = (uint64_t)v4;
      v20 = type metadata accessor for CableRequest.StateDeleteRequest;
LABEL_9:
      sub_20E67BE08(v19, v20);
      sub_20E67BE08((uint64_t)v16, type metadata accessor for CableRequest.OneOf_Request);
      return v18;
    }
    sub_20E67BE08((uint64_t)v11, type metadata accessor for CableRequest.OneOf_Request);
    __break(1u);
  }
  else
  {
    sub_20E67BDC4(v1, (uint64_t)v14, type metadata accessor for CableRequest.OneOf_Request);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_20E67BD80((uint64_t)v14, (uint64_t)v7, type metadata accessor for CableRequest.AllocationRequest);
      v18 = *(_QWORD *)&v7[*(int *)(v5 + 20) + 8] >> 60 != 15 && v7[*(int *)(v5 + 24)] != 2;
      v20 = type metadata accessor for CableRequest.AllocationRequest;
      v19 = (uint64_t)v7;
      goto LABEL_9;
    }
  }
  result = sub_20E67BE08((uint64_t)v14, type metadata accessor for CableRequest.OneOf_Request);
  __break(1u);
  return result;
}

uint64_t sub_20E6C972C()
{
  sub_20E6EA988();
  sub_20E6EA178();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6C978C()
{
  sub_20E6D44FC();
  return sub_20E6E9E18();
}

uint64_t sub_20E6C97C4()
{
  sub_20E6EA988();
  sub_20E6EA178();
  return sub_20E6EA9A0();
}

unint64_t sub_20E6C9820@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_20E6DC1A4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_20E6C9844()
{
  unsigned __int8 *v0;

  return *v0;
}

unint64_t sub_20E6C984C@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_20E6DC1A4(*a1);
  *a2 = result;
  return result;
}

void sub_20E6C9874(_QWORD *a1@<X8>)
{
  *a1 = &unk_24C9804B0;
}

uint64_t sub_20E6C9884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  _BOOL8 v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v22 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v22 - v15;
  sub_20E67BDC4(v1, (uint64_t)&v22 - v15, v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_20E67BDC4(v1, (uint64_t)v11, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_20E67BD80((uint64_t)v11, (uint64_t)v4, type metadata accessor for CableRelayConnectionRequest.StateAssisted);
      v18 = *(_QWORD *)&v4[*(int *)(v2 + 20) + 8] >> 60 != 15 && *(_QWORD *)&v4[*(int *)(v2 + 24) + 8] >> 60 != 15;
      v19 = type metadata accessor for CableRelayConnectionRequest.StateAssisted;
      v20 = (uint64_t)v4;
LABEL_12:
      sub_20E67BE08(v20, v19);
      sub_20E67BE08((uint64_t)v16, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
      return v18;
    }
    sub_20E67BE08((uint64_t)v11, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    __break(1u);
  }
  else
  {
    sub_20E67BDC4(v1, (uint64_t)v14, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_20E67BD80((uint64_t)v14, (uint64_t)v7, type metadata accessor for CableRelayConnectionRequest.QRAssisted);
      v18 = *(_QWORD *)&v7[*(int *)(v5 + 20) + 8] >> 60 != 15 && *(_QWORD *)&v7[*(int *)(v5 + 24) + 8] >> 60 != 15;
      v19 = type metadata accessor for CableRelayConnectionRequest.QRAssisted;
      v20 = (uint64_t)v7;
      goto LABEL_12;
    }
  }
  result = sub_20E67BE08((uint64_t)v14, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
  __break(1u);
  return result;
}

uint64_t sub_20E6C9B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_20E6E9F2C();
  __swift_allocate_value_buffer(v0, qword_254A3ED80);
  __swift_project_value_buffer(v0, (uint64_t)qword_254A3ED80);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F558);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F560);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20E6F3090;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UNSPECIFIED";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_20E6E9F08();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SUCCESS";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "BAD_REQUEST";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "INTERNAL_ERROR";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "NOT_FOUND";
  *(_QWORD *)(v16 + 8) = 9;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_20E6E9F14();
}

uint64_t sub_20E6C9D10@<X0>(uint64_t a1@<X8>)
{
  return sub_20E6CAF58(&qword_254A2DC00, (uint64_t)qword_254A3ED80, a1);
}

uint64_t sub_20E6C9D2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_20E6E9F2C();
  __swift_allocate_value_buffer(v0, qword_254A3ED98);
  __swift_project_value_buffer(v0, (uint64_t)qword_254A3ED98);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F558);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F560);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20E6EE510;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "request_uuid";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = sub_20E6E9F08();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "allocation_request";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "state_delete_request";
  *(_QWORD *)(v12 + 8) = 20;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_20E6E9F14();
}

uint64_t sub_20E6C9EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CableRequest.OneOf_Request(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v0 + *(int *)(type metadata accessor for CableRequest(0) + 24) + 8) >> 60 != 15)
  {
    sub_20E67BCC0(v0, (uint64_t)v3, &qword_254A2E170);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    {
      sub_20E67BD44((uint64_t)v3, &qword_254A2E170);
      return 1;
    }
    sub_20E67BD80((uint64_t)v3, (uint64_t)v7, type metadata accessor for CableRequest.OneOf_Request);
    v8 = sub_20E6C94C8();
    sub_20E67BE08((uint64_t)v7, type metadata accessor for CableRequest.OneOf_Request);
    if ((v8 & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t sub_20E6CA000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t result;
  char v11;

  v5 = v3;
  while (1)
  {
    result = sub_20E6E9E24();
    v9 = v4;
    if (v4 || (v11 & 1) != 0)
      return result;
    switch(result)
    {
      case 3:
        sub_20E6CA520(v5, a1, a2, a3);
LABEL_3:
        v9 = 0;
        break;
      case 2:
        sub_20E6CA0DC(v5, a1, a2, a3);
        goto LABEL_3;
      case 1:
        type metadata accessor for CableRequest(0);
        sub_20E6E9E54();
        goto LABEL_3;
    }
    v4 = v9;
  }
}

uint64_t sub_20E6CA0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CableRequest.AllocationRequest(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CableRequest.OneOf_Request(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F570);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  sub_20E67BCC0(a1, (uint64_t)v12, &qword_254A2E170);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    sub_20E67BD44((uint64_t)v12, &qword_254A2E170);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    sub_20E67BD80((uint64_t)v12, (uint64_t)v19, type metadata accessor for CableRequest.OneOf_Request);
    sub_20E67BD80((uint64_t)v19, (uint64_t)v17, type metadata accessor for CableRequest.OneOf_Request);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_20E67BE08((uint64_t)v17, type metadata accessor for CableRequest.OneOf_Request);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      sub_20E67BD44((uint64_t)v24, &qword_254A2F570);
      sub_20E67BD80((uint64_t)v17, v31, type metadata accessor for CableRequest.AllocationRequest);
      sub_20E67BD80(v31, (uint64_t)v24, type metadata accessor for CableRequest.AllocationRequest);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  sub_20E67BD04(&qword_254A2F508, type metadata accessor for CableRequest.AllocationRequest, (uint64_t)&unk_20E6F3E84);
  sub_20E6E9E78();
  if (v29)
    return sub_20E67BD44((uint64_t)v24, &qword_254A2F570);
  v33 = v41;
  sub_20E67BCC0((uint64_t)v24, (uint64_t)v41, &qword_254A2F570);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    sub_20E67BD44((uint64_t)v24, &qword_254A2F570);
    return sub_20E67BD44((uint64_t)v33, &qword_254A2F570);
  }
  else
  {
    v34 = v40;
    sub_20E67BD80((uint64_t)v33, (uint64_t)v40, type metadata accessor for CableRequest.AllocationRequest);
    if (v27 != 1)
      sub_20E6E9E30();
    sub_20E67BD44((uint64_t)v24, &qword_254A2F570);
    v35 = v39;
    sub_20E67BD44(v39, &qword_254A2E170);
    sub_20E67BD80((uint64_t)v34, v35, type metadata accessor for CableRequest.AllocationRequest);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t sub_20E6CA520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CableRequest.StateDeleteRequest(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CableRequest.OneOf_Request(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F578);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  sub_20E67BCC0(a1, (uint64_t)v12, &qword_254A2E170);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    sub_20E67BD44((uint64_t)v12, &qword_254A2E170);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    sub_20E67BD80((uint64_t)v12, (uint64_t)v19, type metadata accessor for CableRequest.OneOf_Request);
    sub_20E67BD80((uint64_t)v19, (uint64_t)v17, type metadata accessor for CableRequest.OneOf_Request);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_20E67BD44((uint64_t)v24, &qword_254A2F578);
      sub_20E67BD80((uint64_t)v17, v31, type metadata accessor for CableRequest.StateDeleteRequest);
      sub_20E67BD80(v31, (uint64_t)v24, type metadata accessor for CableRequest.StateDeleteRequest);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      sub_20E67BE08((uint64_t)v17, type metadata accessor for CableRequest.OneOf_Request);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  sub_20E67BD04(&qword_254A2F4E8, type metadata accessor for CableRequest.StateDeleteRequest, (uint64_t)&unk_20E6F3D1C);
  sub_20E6E9E78();
  if (v29)
    return sub_20E67BD44((uint64_t)v24, &qword_254A2F578);
  v33 = v41;
  sub_20E67BCC0((uint64_t)v24, (uint64_t)v41, &qword_254A2F578);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    sub_20E67BD44((uint64_t)v24, &qword_254A2F578);
    return sub_20E67BD44((uint64_t)v33, &qword_254A2F578);
  }
  else
  {
    v34 = v40;
    sub_20E67BD80((uint64_t)v33, (uint64_t)v40, type metadata accessor for CableRequest.StateDeleteRequest);
    if (v27 != 1)
      sub_20E6E9E30();
    sub_20E67BD44((uint64_t)v24, &qword_254A2F578);
    v35 = v39;
    sub_20E67BD44(v39, &qword_254A2E170);
    sub_20E67BD80((uint64_t)v34, v35, type metadata accessor for CableRequest.StateDeleteRequest);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t sub_20E6CA964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_20E6CC91C(v3, a1, a2, a3, type metadata accessor for CableRequest);
  if (!v4)
  {
    sub_20E67BCC0(v3, (uint64_t)v10, &qword_254A2E170);
    v12 = type metadata accessor for CableRequest.OneOf_Request(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v10, 1, v12) != 1)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
        sub_20E6CAC7C(v3);
      else
        sub_20E6CAADC(v3);
      sub_20E67BE08((uint64_t)v10, type metadata accessor for CableRequest.OneOf_Request);
    }
    type metadata accessor for CableRequest(0);
    return sub_20E6E9DC4();
  }
  return result;
}

uint64_t sub_20E6CAADC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CableRequest.AllocationRequest(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E67BCC0(a1, (uint64_t)v4, &qword_254A2E170);
  v8 = type metadata accessor for CableRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    sub_20E67BD44((uint64_t)v4, &qword_254A2E170);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_20E67BD80((uint64_t)v4, (uint64_t)v7, type metadata accessor for CableRequest.AllocationRequest);
    sub_20E67BD04(&qword_254A2F508, type metadata accessor for CableRequest.AllocationRequest, (uint64_t)&unk_20E6F3E84);
    sub_20E6E9EFC();
    return sub_20E67BE08((uint64_t)v7, type metadata accessor for CableRequest.AllocationRequest);
  }
  result = sub_20E67BE08((uint64_t)v4, type metadata accessor for CableRequest.OneOf_Request);
  __break(1u);
  return result;
}

uint64_t sub_20E6CAC7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CableRequest.StateDeleteRequest(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E67BCC0(a1, (uint64_t)v4, &qword_254A2E170);
  v8 = type metadata accessor for CableRequest.OneOf_Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    sub_20E67BD44((uint64_t)v4, &qword_254A2E170);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_20E67BD80((uint64_t)v4, (uint64_t)v7, type metadata accessor for CableRequest.StateDeleteRequest);
    sub_20E67BD04(&qword_254A2F4E8, type metadata accessor for CableRequest.StateDeleteRequest, (uint64_t)&unk_20E6F3D1C);
    sub_20E6E9EFC();
    return sub_20E67BE08((uint64_t)v7, type metadata accessor for CableRequest.StateDeleteRequest);
  }
  result = sub_20E67BE08((uint64_t)v4, type metadata accessor for CableRequest.OneOf_Request);
  __break(1u);
  return result;
}

double sub_20E6CAE1C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;

  v4 = type metadata accessor for CableRequest.OneOf_Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  sub_20E6E9DD0();
  result = 0.0;
  *(_OWORD *)(a2 + *(int *)(a1 + 24)) = xmmword_20E6EE5B0;
  return result;
}

uint64_t sub_20E6CAE7C()
{
  return 0x716552656C626143;
}

uint64_t (*sub_20E6CAEA8())()
{
  return nullsub_1;
}

uint64_t sub_20E6CAEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CA000(a1, a2, a3);
}

uint64_t sub_20E6CAED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CA964(a1, a2, a3);
}

uint64_t sub_20E6CAEE8()
{
  sub_20E67BD04(&qword_254A2F568, type metadata accessor for CableRequest, (uint64_t)&unk_20E6F3FB4);
  return sub_20E6E9E0C();
}

uint64_t sub_20E6CAF3C@<X0>(uint64_t a1@<X8>)
{
  return sub_20E6CAF58(&qword_254A2DC08, (uint64_t)qword_254A3ED98, a1);
}

uint64_t sub_20E6CAF58@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_20E6E9F2C();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_20E6CAFC4()
{
  sub_20E67BD04(&qword_254A2E178, type metadata accessor for CableRequest, (uint64_t)&unk_20E6F3FEC);
  return sub_20E6E9EA8();
}

uint64_t sub_20E6CB008()
{
  sub_20E67BD04(&qword_254A2E178, type metadata accessor for CableRequest, (uint64_t)&unk_20E6F3FEC);
  return sub_20E6E9EB4();
}

uint64_t sub_20E6CB060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_20E6E9F2C();
  __swift_allocate_value_buffer(v0, qword_254A3EDB0);
  __swift_project_value_buffer(v0, (uint64_t)qword_254A3EDB0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F558);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F560);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20E6EE500;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "tunnel_id";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = sub_20E6E9F08();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "use_state_assisted";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  return sub_20E6E9F14();
}

uint64_t sub_20E6CB1B0()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_20E6E9E24();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for CableRequest.AllocationRequest(0);
      sub_20E6E9E3C();
    }
    else if (result == 1)
    {
      type metadata accessor for CableRequest.AllocationRequest(0);
      sub_20E6E9E54();
    }
    v0 = 0;
  }
  return result;
}

uint64_t sub_20E6CB27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_20E6CB724(v3, a1, a2, a3, type metadata accessor for CableRequest.AllocationRequest);
  if (!v4)
  {
    sub_20E6CB2F0(v3);
    return sub_20E6E9DC4();
  }
  return result;
}

uint64_t sub_20E6CB2F0(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CableRequest.AllocationRequest(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 24)) != 2)
    return sub_20E6E9EC0();
  return result;
}

double sub_20E6CB364@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v5;

  sub_20E6E9DD0();
  result = 0.0;
  v5 = *(int *)(a1 + 24);
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_20E6EE5B0;
  *(_BYTE *)(a2 + v5) = 2;
  return result;
}

unint64_t sub_20E6CB3A0()
{
  return 0xD00000000000001ELL;
}

BOOL sub_20E6CB3BC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 20) + 8) >> 60 != 15 && *(_BYTE *)(v1 + *(int *)(a1 + 24)) != 2;
}

uint64_t (*sub_20E6CB3F8())()
{
  return nullsub_1;
}

uint64_t sub_20E6CB408()
{
  return sub_20E6CB1B0();
}

uint64_t sub_20E6CB41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CB27C(a1, a2, a3);
}

uint64_t sub_20E6CB430()
{
  sub_20E67BD04(&qword_254A2F598, type metadata accessor for CableRequest.AllocationRequest, (uint64_t)&unk_20E6F3E4C);
  return sub_20E6E9E0C();
}

uint64_t sub_20E6CB480@<X0>(uint64_t a1@<X8>)
{
  return sub_20E6CAF58(&qword_254A2DC10, (uint64_t)qword_254A3EDB0, a1);
}

uint64_t sub_20E6CB49C()
{
  sub_20E67BD04(&qword_254A2F508, type metadata accessor for CableRequest.AllocationRequest, (uint64_t)&unk_20E6F3E84);
  return sub_20E6E9EA8();
}

uint64_t sub_20E6CB4DC()
{
  sub_20E67BD04(&qword_254A2F508, type metadata accessor for CableRequest.AllocationRequest, (uint64_t)&unk_20E6F3E84);
  return sub_20E6E9EB4();
}

uint64_t sub_20E6CB530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = sub_20E6E9F2C();
  __swift_allocate_value_buffer(v0, qword_254A3EDC8);
  __swift_project_value_buffer(v0, (uint64_t)qword_254A3EDC8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F558);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F560);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_20E6EE520;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "contact_id";
  *(_QWORD *)(v5 + 8) = 10;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C328];
  v7 = sub_20E6E9F08();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return sub_20E6E9F14();
}

uint64_t sub_20E6CB634()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_20E6E9E24();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
    {
      type metadata accessor for CableRequest.StateDeleteRequest(0);
      sub_20E6E9E54();
    }
    v0 = 0;
  }
  return result;
}

uint64_t sub_20E6CB6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_20E6CB724(v3, a1, a2, a3, type metadata accessor for CableRequest.StateDeleteRequest);
  if (!v4)
    return sub_20E6E9DC4();
  return result;
}

uint64_t sub_20E6CB724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  result = a5(0);
  v7 = a1 + *(int *)(result + 20);
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    v9 = *(_QWORD *)v7;
    sub_20E66A990(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
    sub_20E6E9ED8();
    return sub_20E66AA28(v9, v8);
  }
  return result;
}

double sub_20E6CB7C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  sub_20E6E9DD0();
  result = 0.0;
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_20E6EE5B0;
  return result;
}

unint64_t sub_20E6CB7F4()
{
  return 0xD00000000000001FLL;
}

BOOL sub_20E6CB810(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 20) + 8) >> 60 != 15;
}

uint64_t sub_20E6CB82C()
{
  return sub_20E6CB634();
}

uint64_t sub_20E6CB840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CB6C8(a1, a2, a3);
}

uint64_t sub_20E6CB854()
{
  sub_20E67BD04(&qword_254A2F5A0, type metadata accessor for CableRequest.StateDeleteRequest, (uint64_t)&unk_20E6F3CE4);
  return sub_20E6E9E0C();
}

uint64_t sub_20E6CB8A4@<X0>(uint64_t a1@<X8>)
{
  return sub_20E6CAF58(&qword_254A2DC18, (uint64_t)qword_254A3EDC8, a1);
}

uint64_t sub_20E6CB8C0()
{
  sub_20E67BD04(&qword_254A2F4E8, type metadata accessor for CableRequest.StateDeleteRequest, (uint64_t)&unk_20E6F3D1C);
  return sub_20E6E9EA8();
}

uint64_t sub_20E6CB900()
{
  sub_20E67BD04(&qword_254A2F4E8, type metadata accessor for CableRequest.StateDeleteRequest, (uint64_t)&unk_20E6F3D1C);
  return sub_20E6E9EB4();
}

uint64_t sub_20E6CB954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_20E6E9F2C();
  __swift_allocate_value_buffer(v0, qword_254A3EDE0);
  __swift_project_value_buffer(v0, (uint64_t)qword_254A3EDE0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F558);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F560);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20E6F30A0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "request_uuid";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = sub_20E6E9F08();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "status";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "allocation_response";
  *((_QWORD *)v13 + 1) = 19;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "state_delete_response";
  *((_QWORD *)v15 + 1) = 21;
  v15[16] = 2;
  v10();
  return sub_20E6E9F14();
}

uint64_t sub_20E6CBB1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v16;
  uint64_t v17;

  v1 = type metadata accessor for CableResponse.AllocationResponse(0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CableResponse.OneOf_Response(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v17 - v12;
  v14 = type metadata accessor for CableResponse(0);
  if (*(_QWORD *)(v0 + *(int *)(v14 + 24) + 8) >> 60 == 15 || *(_BYTE *)(v0 + *(int *)(v14 + 28)) == 5)
    return 0;
  sub_20E67BCC0(v0, (uint64_t)v6, &qword_254A2F5B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_20E67BD44((uint64_t)v6, &qword_254A2F5B0);
  }
  else
  {
    sub_20E67BD80((uint64_t)v6, (uint64_t)v13, type metadata accessor for CableResponse.OneOf_Response);
    sub_20E67BDC4((uint64_t)v13, (uint64_t)v11, type metadata accessor for CableResponse.OneOf_Response);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_20E67BE08((uint64_t)v11, type metadata accessor for CableResponse.OneOf_Response);
      sub_20E67BE08((uint64_t)v13, type metadata accessor for CableResponse.OneOf_Response);
    }
    else
    {
      sub_20E67BD80((uint64_t)v11, (uint64_t)v3, type metadata accessor for CableResponse.AllocationResponse);
      if (*(_QWORD *)&v3[*(int *)(v1 + 20) + 8] >> 60 == 15)
      {
        sub_20E67BE08((uint64_t)v3, type metadata accessor for CableResponse.AllocationResponse);
        sub_20E67BE08((uint64_t)v13, type metadata accessor for CableResponse.OneOf_Response);
        return 0;
      }
      v16 = v3[*(int *)(v1 + 24) + 4];
      sub_20E67BE08((uint64_t)v3, type metadata accessor for CableResponse.AllocationResponse);
      sub_20E67BE08((uint64_t)v13, type metadata accessor for CableResponse.OneOf_Response);
      if ((v16 & 1) != 0)
        return 0;
    }
  }
  return 1;
}

uint64_t sub_20E6CBD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = sub_20E6E9E24();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for CableResponse(0);
          v12 = v11;
          sub_20E6E9E54();
          goto LABEL_5;
        case 2:
          v12 = v11;
          sub_20E6CBE88();
          goto LABEL_5;
        case 3:
          v12 = v11;
          sub_20E6CBEFC(v5, a1, a2, a3);
          goto LABEL_5;
        case 4:
          v12 = v11;
          sub_20E6CC340(v5, a1, a2, a3);
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = sub_20E6E9E24();
    }
  }
  return result;
}

uint64_t sub_20E6CBE88()
{
  type metadata accessor for CableResponse(0);
  sub_20E6D44FC();
  return sub_20E6E9E48();
}

uint64_t sub_20E6CBEFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CableResponse.AllocationResponse(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CableResponse.OneOf_Response(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E180);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  sub_20E67BCC0(a1, (uint64_t)v12, &qword_254A2F5B0);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    sub_20E67BD44((uint64_t)v12, &qword_254A2F5B0);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    sub_20E67BD80((uint64_t)v12, (uint64_t)v19, type metadata accessor for CableResponse.OneOf_Response);
    sub_20E67BD80((uint64_t)v19, (uint64_t)v17, type metadata accessor for CableResponse.OneOf_Response);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_20E67BE08((uint64_t)v17, type metadata accessor for CableResponse.OneOf_Response);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      sub_20E67BD44((uint64_t)v24, &qword_254A2E180);
      sub_20E67BD80((uint64_t)v17, v31, type metadata accessor for CableResponse.AllocationResponse);
      sub_20E67BD80(v31, (uint64_t)v24, type metadata accessor for CableResponse.AllocationResponse);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  sub_20E67BD04(&qword_254A2F4B0, type metadata accessor for CableResponse.AllocationResponse, (uint64_t)&unk_20E6F3A24);
  sub_20E6E9E78();
  if (v29)
    return sub_20E67BD44((uint64_t)v24, &qword_254A2E180);
  v33 = v41;
  sub_20E67BCC0((uint64_t)v24, (uint64_t)v41, &qword_254A2E180);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    sub_20E67BD44((uint64_t)v24, &qword_254A2E180);
    return sub_20E67BD44((uint64_t)v33, &qword_254A2E180);
  }
  else
  {
    v34 = v40;
    sub_20E67BD80((uint64_t)v33, (uint64_t)v40, type metadata accessor for CableResponse.AllocationResponse);
    if (v27 != 1)
      sub_20E6E9E30();
    sub_20E67BD44((uint64_t)v24, &qword_254A2E180);
    v35 = v39;
    sub_20E67BD44(v39, &qword_254A2F5B0);
    sub_20E67BD80((uint64_t)v34, v35, type metadata accessor for CableResponse.AllocationResponse);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t sub_20E6CC340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CableResponse.StateDeleteResponse(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CableResponse.OneOf_Response(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5C0);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  sub_20E67BCC0(a1, (uint64_t)v12, &qword_254A2F5B0);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    sub_20E67BD44((uint64_t)v12, &qword_254A2F5B0);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    sub_20E67BD80((uint64_t)v12, (uint64_t)v19, type metadata accessor for CableResponse.OneOf_Response);
    sub_20E67BD80((uint64_t)v19, (uint64_t)v17, type metadata accessor for CableResponse.OneOf_Response);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_20E67BD44((uint64_t)v24, &qword_254A2F5C0);
      sub_20E67BD80((uint64_t)v17, v31, type metadata accessor for CableResponse.StateDeleteResponse);
      sub_20E67BD80(v31, (uint64_t)v24, type metadata accessor for CableResponse.StateDeleteResponse);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      sub_20E67BE08((uint64_t)v17, type metadata accessor for CableResponse.OneOf_Response);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  sub_20E67BD04(&qword_254A2F490, type metadata accessor for CableResponse.StateDeleteResponse, (uint64_t)&unk_20E6F38BC);
  sub_20E6E9E78();
  if (v29)
    return sub_20E67BD44((uint64_t)v24, &qword_254A2F5C0);
  v33 = v41;
  sub_20E67BCC0((uint64_t)v24, (uint64_t)v41, &qword_254A2F5C0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    sub_20E67BD44((uint64_t)v24, &qword_254A2F5C0);
    return sub_20E67BD44((uint64_t)v33, &qword_254A2F5C0);
  }
  else
  {
    v34 = v40;
    sub_20E67BD80((uint64_t)v33, (uint64_t)v40, type metadata accessor for CableResponse.StateDeleteResponse);
    if (v27 != 1)
      sub_20E6E9E30();
    sub_20E67BD44((uint64_t)v24, &qword_254A2F5C0);
    v35 = v39;
    sub_20E67BD44(v39, &qword_254A2F5B0);
    sub_20E67BD80((uint64_t)v34, v35, type metadata accessor for CableResponse.StateDeleteResponse);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t sub_20E6CC784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_20E6CC91C(v3, a1, a2, a3, type metadata accessor for CableResponse);
  if (!v4)
  {
    sub_20E6CC9C8(v3);
    sub_20E67BCC0(v3, (uint64_t)v10, &qword_254A2F5B0);
    v12 = type metadata accessor for CableResponse.OneOf_Response(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v10, 1, v12) != 1)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
        sub_20E6CCBF0(v3);
      else
        sub_20E6CCA50(v3);
      sub_20E67BE08((uint64_t)v10, type metadata accessor for CableResponse.OneOf_Response);
    }
    type metadata accessor for CableResponse(0);
    return sub_20E6E9DC4();
  }
  return result;
}

uint64_t sub_20E6CC91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  result = a5(0);
  v7 = a1 + *(int *)(result + 24);
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    v9 = *(_QWORD *)v7;
    sub_20E66A990(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
    sub_20E6E9ED8();
    return sub_20E66AA28(v9, v8);
  }
  return result;
}

uint64_t sub_20E6CC9C8(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CableResponse(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 28)) != 5)
  {
    sub_20E6D44FC();
    return sub_20E6E9ECC();
  }
  return result;
}

uint64_t sub_20E6CCA50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CableResponse.AllocationResponse(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E67BCC0(a1, (uint64_t)v4, &qword_254A2F5B0);
  v8 = type metadata accessor for CableResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    sub_20E67BD44((uint64_t)v4, &qword_254A2F5B0);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_20E67BD80((uint64_t)v4, (uint64_t)v7, type metadata accessor for CableResponse.AllocationResponse);
    sub_20E67BD04(&qword_254A2F4B0, type metadata accessor for CableResponse.AllocationResponse, (uint64_t)&unk_20E6F3A24);
    sub_20E6E9EFC();
    return sub_20E67BE08((uint64_t)v7, type metadata accessor for CableResponse.AllocationResponse);
  }
  result = sub_20E67BE08((uint64_t)v4, type metadata accessor for CableResponse.OneOf_Response);
  __break(1u);
  return result;
}

uint64_t sub_20E6CCBF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CableResponse.StateDeleteResponse(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E67BCC0(a1, (uint64_t)v4, &qword_254A2F5B0);
  v8 = type metadata accessor for CableResponse.OneOf_Response(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    sub_20E67BD44((uint64_t)v4, &qword_254A2F5B0);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_20E67BD80((uint64_t)v4, (uint64_t)v7, type metadata accessor for CableResponse.StateDeleteResponse);
    sub_20E67BD04(&qword_254A2F490, type metadata accessor for CableResponse.StateDeleteResponse, (uint64_t)&unk_20E6F38BC);
    sub_20E6E9EFC();
    return sub_20E67BE08((uint64_t)v7, type metadata accessor for CableResponse.StateDeleteResponse);
  }
  result = sub_20E67BE08((uint64_t)v4, type metadata accessor for CableResponse.OneOf_Response);
  __break(1u);
  return result;
}

double sub_20E6CCD90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  uint64_t v6;

  v4 = type metadata accessor for CableResponse.OneOf_Response(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  sub_20E6E9DD0();
  result = 0.0;
  v6 = *(int *)(a1 + 28);
  *(_OWORD *)(a2 + *(int *)(a1 + 24)) = xmmword_20E6EE5B0;
  *(_BYTE *)(a2 + v6) = 5;
  return result;
}

uint64_t sub_20E6CCDF8()
{
  return 0x736552656C626143;
}

uint64_t sub_20E6CCE20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = sub_20E6E9DDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_20E6CCE60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = sub_20E6E9DDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_20E6CCEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CBD78(a1, a2, a3);
}

uint64_t sub_20E6CCEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CC784(a1, a2, a3);
}

uint64_t sub_20E6CCEC8()
{
  sub_20E67BD04(&qword_254A2F5A8, type metadata accessor for CableResponse, (uint64_t)&unk_20E6F3B7C);
  return sub_20E6E9E0C();
}

uint64_t sub_20E6CCF18@<X0>(uint64_t a1@<X8>)
{
  return sub_20E6CAF58(&qword_254A2DC20, (uint64_t)qword_254A3EDE0, a1);
}

uint64_t sub_20E6CCF34()
{
  sub_20E67BD04(&qword_254A2E190, type metadata accessor for CableResponse, (uint64_t)&unk_20E6F3BB4);
  return sub_20E6E9EA8();
}

uint64_t sub_20E6CCF74()
{
  sub_20E67BD04(&qword_254A2E190, type metadata accessor for CableResponse, (uint64_t)&unk_20E6F3BB4);
  return sub_20E6E9EB4();
}

uint64_t sub_20E6CCFC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_20E6E9F2C();
  __swift_allocate_value_buffer(v0, qword_254A3EDF8);
  __swift_project_value_buffer(v0, (uint64_t)qword_254A3EDF8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F558);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F560);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20E6F3090;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "RESPONSE_STATUS_UNSPECIFIED";
  *(_QWORD *)(v7 + 8) = 27;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_20E6E9F08();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "SUCCESS";
  *(_QWORD *)(v11 + 8) = 7;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "BAD_REQUEST";
  *((_QWORD *)v13 + 1) = 11;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "INTERNAL_ERROR";
  *((_QWORD *)v15 + 1) = 14;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 4;
  *(_QWORD *)v16 = "RATE_LIMITED";
  *(_QWORD *)(v16 + 8) = 12;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_20E6E9F14();
}

uint64_t sub_20E6CD1C8@<X0>(uint64_t a1@<X8>)
{
  return sub_20E6CAF58(&qword_254A2DC28, (uint64_t)qword_254A3EDF8, a1);
}

uint64_t sub_20E6CD1E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_20E6E9F2C();
  __swift_allocate_value_buffer(v0, qword_254A3EE10);
  __swift_project_value_buffer(v0, (uint64_t)qword_254A3EE10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F558);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F560);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20E6EE510;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "routing_id";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = sub_20E6E9F08();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "encoded_domain";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "contact_id";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_20E6E9F14();
}

uint64_t sub_20E6CD378()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_20E6E9E24();
    if (v0 || (v2 & 1) != 0)
      return result;
    switch(result)
    {
      case 3:
        goto LABEL_2;
      case 2:
        type metadata accessor for CableResponse.AllocationResponse(0);
        sub_20E6E9E6C();
        break;
      case 1:
LABEL_2:
        type metadata accessor for CableResponse.AllocationResponse(0);
        sub_20E6E9E54();
        break;
    }
    v0 = 0;
  }
}

uint64_t sub_20E6CD45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_20E6CB724(v3, a1, a2, a3, type metadata accessor for CableResponse.AllocationResponse);
  if (!v4)
  {
    sub_20E6CD4F4(v3);
    sub_20E6CEBAC(v3, a1, a2, a3, type metadata accessor for CableResponse.AllocationResponse);
    return sub_20E6E9DC4();
  }
  return result;
}

uint64_t sub_20E6CD4F4(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CableResponse.AllocationResponse(0);
  if ((*(_BYTE *)(a1 + *(int *)(result + 24) + 4) & 1) == 0)
    return sub_20E6E9EF0();
  return result;
}

double sub_20E6CD568@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v5;
  uint64_t v6;

  sub_20E6E9DD0();
  result = 0.0;
  v5 = a1[6];
  *(_OWORD *)(a2 + a1[5]) = xmmword_20E6EE5B0;
  v6 = a2 + v5;
  *(_DWORD *)v6 = 0;
  *(_BYTE *)(v6 + 4) = 1;
  *(_OWORD *)(a2 + a1[7]) = xmmword_20E6EE5B0;
  return result;
}

unint64_t sub_20E6CD5B4()
{
  return 0xD000000000000020;
}

uint64_t sub_20E6CD5D0(uint64_t a1)
{
  uint64_t v1;

  if (*(_QWORD *)(v1 + *(int *)(a1 + 20) + 8) >> 60 == 15)
    return 0;
  else
    return (*(unsigned __int8 *)(v1 + *(int *)(a1 + 24) + 4) ^ 1) & 1;
}

uint64_t sub_20E6CD608()
{
  return sub_20E6CD378();
}

uint64_t sub_20E6CD61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CD45C(a1, a2, a3);
}

uint64_t sub_20E6CD630()
{
  sub_20E67BD04(&qword_254A2F5D8, type metadata accessor for CableResponse.AllocationResponse, (uint64_t)&unk_20E6F39EC);
  return sub_20E6E9E0C();
}

uint64_t sub_20E6CD680@<X0>(uint64_t a1@<X8>)
{
  return sub_20E6CAF58(&qword_254A2DC30, (uint64_t)qword_254A3EE10, a1);
}

uint64_t sub_20E6CD69C()
{
  sub_20E67BD04(&qword_254A2F4B0, type metadata accessor for CableResponse.AllocationResponse, (uint64_t)&unk_20E6F3A24);
  return sub_20E6E9EA8();
}

uint64_t sub_20E6CD6DC()
{
  sub_20E67BD04(&qword_254A2F4B0, type metadata accessor for CableResponse.AllocationResponse, (uint64_t)&unk_20E6F3A24);
  return sub_20E6E9EB4();
}

uint64_t sub_20E6CD730()
{
  uint64_t v0;

  v0 = sub_20E6E9F2C();
  __swift_allocate_value_buffer(v0, qword_254A3EE28);
  __swift_project_value_buffer(v0, (uint64_t)qword_254A3EE28);
  return sub_20E6E9F20();
}

uint64_t sub_20E6CD778()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  do
    result = sub_20E6E9E24();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t sub_20E6CD7B8()
{
  return sub_20E6E9DC4();
}

unint64_t sub_20E6CD7D0()
{
  return 0xD000000000000021;
}

uint64_t sub_20E6CD7F0()
{
  return sub_20E6CD778();
}

uint64_t sub_20E6CD804()
{
  return sub_20E6CD7B8();
}

uint64_t sub_20E6CD818()
{
  sub_20E67BD04(&qword_254A2F5E0, type metadata accessor for CableResponse.StateDeleteResponse, (uint64_t)&unk_20E6F3884);
  return sub_20E6E9E0C();
}

uint64_t sub_20E6CD868@<X0>(uint64_t a1@<X8>)
{
  return sub_20E6CAF58(&qword_254A2DC38, (uint64_t)qword_254A3EE28, a1);
}

uint64_t sub_20E6CD884()
{
  sub_20E67BD04(&qword_254A2F490, type metadata accessor for CableResponse.StateDeleteResponse, (uint64_t)&unk_20E6F38BC);
  return sub_20E6E9EA8();
}

uint64_t sub_20E6CD8C4()
{
  sub_20E67BD04(&qword_254A2F490, type metadata accessor for CableResponse.StateDeleteResponse, (uint64_t)&unk_20E6F38BC);
  return sub_20E6E9EB4();
}

uint64_t sub_20E6CD914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t);
  uint64_t v15;

  v4 = sub_20E6E9DDC();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v15 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12((char *)&v15 - v10, a1, v4);
  v12(v9, a2, v4);
  sub_20E67BD04(&qword_254A2F588, v5, MEMORY[0x24BE5BF20]);
  LOBYTE(a2) = sub_20E6EA1B4();
  v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v4);
  v13(v11, v4);
  return a2 & 1;
}

uint64_t sub_20E6CDA20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_20E6E9F2C();
  __swift_allocate_value_buffer(v0, qword_254A3EE40);
  __swift_project_value_buffer(v0, (uint64_t)qword_254A3EE40);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F558);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F560);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20E6F30A0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "qr_assisted";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = sub_20E6E9F08();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "state_assisted";
  *(_QWORD *)(v11 + 8) = 14;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "relay_ips";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "request_uuid";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  return sub_20E6E9F14();
}

uint64_t sub_20E6CDBE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v0 + *(int *)(type metadata accessor for CableRelayConnectionRequest(0) + 28) + 8) >> 60 != 15)
  {
    sub_20E67BCC0(v0, (uint64_t)v3, &qword_254A2F5F0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
    {
      sub_20E67BD44((uint64_t)v3, &qword_254A2F5F0);
      return 1;
    }
    sub_20E67BD80((uint64_t)v3, (uint64_t)v7, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    v8 = sub_20E6C9884();
    sub_20E67BE08((uint64_t)v7, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    if ((v8 & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t sub_20E6CDD20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = sub_20E6E9E24();
  v11 = v4;
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v12 = v11;
          sub_20E6CDE38(v5, a1, a2, a3);
          goto LABEL_5;
        case 2:
          v12 = v11;
          sub_20E6CE27C(v5, a1, a2, a3);
          goto LABEL_5;
        case 3:
          type metadata accessor for CableRelayConnectionRequest(0);
          v12 = v11;
          sub_20E6E9E60();
          goto LABEL_5;
        case 4:
          type metadata accessor for CableRelayConnectionRequest(0);
          v12 = v11;
          sub_20E6E9E54();
LABEL_5:
          v11 = v12;
          break;
        default:
          break;
      }
      result = sub_20E6E9E24();
    }
  }
  return result;
}

uint64_t sub_20E6CDE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F8);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  sub_20E67BCC0(a1, (uint64_t)v12, &qword_254A2F5F0);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    sub_20E67BD44((uint64_t)v12, &qword_254A2F5F0);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    sub_20E67BD80((uint64_t)v12, (uint64_t)v19, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    sub_20E67BD80((uint64_t)v19, (uint64_t)v17, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_20E67BE08((uint64_t)v17, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
      v30 = v44;
      v29 = v45;
    }
    else
    {
      sub_20E67BD44((uint64_t)v24, &qword_254A2F5F8);
      sub_20E67BD80((uint64_t)v17, v31, type metadata accessor for CableRelayConnectionRequest.QRAssisted);
      sub_20E67BD80(v31, (uint64_t)v24, type metadata accessor for CableRelayConnectionRequest.QRAssisted);
      v30 = v44;
      v25(v24, 0, 1, v44);
      v29 = v45;
    }
    v27 = v37;
  }
  sub_20E67BD04(&qword_254A2F450, type metadata accessor for CableRelayConnectionRequest.QRAssisted, (uint64_t)&unk_20E6F35EC);
  sub_20E6E9E78();
  if (v29)
    return sub_20E67BD44((uint64_t)v24, &qword_254A2F5F8);
  v33 = v41;
  sub_20E67BCC0((uint64_t)v24, (uint64_t)v41, &qword_254A2F5F8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    sub_20E67BD44((uint64_t)v24, &qword_254A2F5F8);
    return sub_20E67BD44((uint64_t)v33, &qword_254A2F5F8);
  }
  else
  {
    v34 = v40;
    sub_20E67BD80((uint64_t)v33, (uint64_t)v40, type metadata accessor for CableRelayConnectionRequest.QRAssisted);
    if (v27 != 1)
      sub_20E6E9E30();
    sub_20E67BD44((uint64_t)v24, &qword_254A2F5F8);
    v35 = v39;
    sub_20E67BD44(v39, &qword_254A2F5F0);
    sub_20E67BD80((uint64_t)v34, v35, type metadata accessor for CableRelayConnectionRequest.QRAssisted);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t sub_20E6CE27C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a3;
  v47 = a4;
  v48 = a2;
  v5 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v40 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v7);
  v43 = &v36[-v9];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v36[-v18];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F600);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v41 = &v36[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v21);
  v24 = &v36[-v23];
  v42 = v6;
  v25 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v44 = v5;
  v25(&v36[-v23], 1, 1, v5);
  v39 = a1;
  sub_20E67BCC0(a1, (uint64_t)v12, &qword_254A2F5F0);
  v38 = v14;
  v26 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  v27 = v26;
  if (v26 == 1)
  {
    sub_20E67BD44((uint64_t)v12, &qword_254A2F5F0);
    v28 = v13;
    v30 = v44;
    v29 = v45;
  }
  else
  {
    v37 = v26;
    v31 = (uint64_t)v43;
    sub_20E67BD80((uint64_t)v12, (uint64_t)v19, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    sub_20E67BD80((uint64_t)v19, (uint64_t)v17, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    v28 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_20E67BD44((uint64_t)v24, &qword_254A2F600);
      sub_20E67BD80((uint64_t)v17, v31, type metadata accessor for CableRelayConnectionRequest.StateAssisted);
      sub_20E67BD80(v31, (uint64_t)v24, type metadata accessor for CableRelayConnectionRequest.StateAssisted);
      v30 = v44;
      v25(v24, 0, 1, v44);
    }
    else
    {
      sub_20E67BE08((uint64_t)v17, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
      v30 = v44;
    }
    v29 = v45;
    v27 = v37;
  }
  sub_20E67BD04(&qword_254A2F430, type metadata accessor for CableRelayConnectionRequest.StateAssisted, (uint64_t)&unk_20E6F3484);
  sub_20E6E9E78();
  if (v29)
    return sub_20E67BD44((uint64_t)v24, &qword_254A2F600);
  v33 = v41;
  sub_20E67BCC0((uint64_t)v24, (uint64_t)v41, &qword_254A2F600);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v33, 1, v30) == 1)
  {
    sub_20E67BD44((uint64_t)v24, &qword_254A2F600);
    return sub_20E67BD44((uint64_t)v33, &qword_254A2F600);
  }
  else
  {
    v34 = v40;
    sub_20E67BD80((uint64_t)v33, (uint64_t)v40, type metadata accessor for CableRelayConnectionRequest.StateAssisted);
    if (v27 != 1)
      sub_20E6E9E30();
    sub_20E67BD44((uint64_t)v24, &qword_254A2F600);
    v35 = v39;
    sub_20E67BD44(v39, &qword_254A2F5F0);
    sub_20E67BD80((uint64_t)v34, v35, type metadata accessor for CableRelayConnectionRequest.StateAssisted);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v28);
  }
}

uint64_t sub_20E6CE6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v5 = v4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E67BCC0(v3, (uint64_t)v11, &qword_254A2F5F0);
  v12 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12) == 1)
    goto LABEL_12;
  if (swift_getEnumCaseMultiPayload() == 1)
    sub_20E6CEA0C(v3);
  else
    sub_20E6CE86C(v3);
  v5 = v4;
  result = sub_20E67BE08((uint64_t)v11, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
  if (!v4)
  {
LABEL_12:
    if (!*(_QWORD *)(*(_QWORD *)(v3 + *(int *)(type metadata accessor for CableRelayConnectionRequest(0) + 20)) + 16)
      || (result = sub_20E6E9EE4(), !v5))
    {
      result = sub_20E6CEBAC(v3, a1, a2, a3, type metadata accessor for CableRelayConnectionRequest);
      if (!v5)
        return sub_20E6E9DC4();
    }
  }
  return result;
}

uint64_t sub_20E6CE86C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E67BCC0(a1, (uint64_t)v4, &qword_254A2F5F0);
  v8 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    sub_20E67BD44((uint64_t)v4, &qword_254A2F5F0);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_20E67BD80((uint64_t)v4, (uint64_t)v7, type metadata accessor for CableRelayConnectionRequest.QRAssisted);
    sub_20E67BD04(&qword_254A2F450, type metadata accessor for CableRelayConnectionRequest.QRAssisted, (uint64_t)&unk_20E6F35EC);
    sub_20E6E9EFC();
    return sub_20E67BE08((uint64_t)v7, type metadata accessor for CableRelayConnectionRequest.QRAssisted);
  }
  result = sub_20E67BE08((uint64_t)v4, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
  __break(1u);
  return result;
}

uint64_t sub_20E6CEA0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E67BCC0(a1, (uint64_t)v4, &qword_254A2F5F0);
  v8 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    sub_20E67BD44((uint64_t)v4, &qword_254A2F5F0);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_20E67BD80((uint64_t)v4, (uint64_t)v7, type metadata accessor for CableRelayConnectionRequest.StateAssisted);
    sub_20E67BD04(&qword_254A2F430, type metadata accessor for CableRelayConnectionRequest.StateAssisted, (uint64_t)&unk_20E6F3484);
    sub_20E6E9EFC();
    return sub_20E67BE08((uint64_t)v7, type metadata accessor for CableRelayConnectionRequest.StateAssisted);
  }
  result = sub_20E67BE08((uint64_t)v4, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
  __break(1u);
  return result;
}

uint64_t sub_20E6CEBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  result = a5(0);
  v7 = a1 + *(int *)(result + 28);
  v8 = *(_QWORD *)(v7 + 8);
  if (v8 >> 60 != 15)
  {
    v9 = *(_QWORD *)v7;
    sub_20E66A990(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
    sub_20E6E9ED8();
    return sub_20E66AA28(v9, v8);
  }
  return result;
}

double sub_20E6CEC5C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;

  v4 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  *(_QWORD *)(a2 + *(int *)(a1 + 20)) = MEMORY[0x24BEE4AF8];
  sub_20E6E9DD0();
  result = 0.0;
  *(_OWORD *)(a2 + *(int *)(a1 + 28)) = xmmword_20E6EE5B0;
  return result;
}

unint64_t sub_20E6CECC8()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_20E6CECE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = sub_20E6E9DDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_20E6CED28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = sub_20E6E9DDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_20E6CED68())()
{
  return nullsub_1;
}

uint64_t sub_20E6CED7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CDD20(a1, a2, a3);
}

uint64_t sub_20E6CED90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CE6C0(a1, a2, a3);
}

uint64_t sub_20E6CEDA4()
{
  sub_20E67BD04(&qword_254A2F5E8, type metadata accessor for CableRelayConnectionRequest, (uint64_t)&unk_20E6F371C);
  return sub_20E6E9E0C();
}

uint64_t sub_20E6CEDF4@<X0>(uint64_t a1@<X8>)
{
  return sub_20E6CAF58(&qword_254A2DC40, (uint64_t)qword_254A3EE40, a1);
}

uint64_t sub_20E6CEE10()
{
  sub_20E67BD04(&qword_254A2F470, type metadata accessor for CableRelayConnectionRequest, (uint64_t)&unk_20E6F3754);
  return sub_20E6E9EA8();
}

uint64_t sub_20E6CEE50()
{
  sub_20E67BD04(&qword_254A2F470, type metadata accessor for CableRelayConnectionRequest, (uint64_t)&unk_20E6F3754);
  return sub_20E6E9EB4();
}

uint64_t sub_20E6CEEA4(uint64_t a1)
{
  return sub_20E6CEEC4(a1, qword_254A3EE58, (uint64_t)"routing_id", (uint64_t)"tunnel_id", 9);
}

uint64_t sub_20E6CEEC4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  char *v18;

  v7 = sub_20E6E9F2C();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F558);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F560);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_20E6EE500;
  v13 = (_QWORD *)(v12 + v11);
  v14 = v12 + v11 + *(int *)(v8 + 48);
  *v13 = 1;
  *(_QWORD *)v14 = a3;
  *(_QWORD *)(v14 + 8) = 10;
  *(_BYTE *)(v14 + 16) = 2;
  v15 = *MEMORY[0x24BE5C328];
  v16 = sub_20E6E9F08();
  v17 = *(void (**)(void))(*(_QWORD *)(v16 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v17)(v14, v15, v16);
  v18 = (char *)v13 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)((char *)v13 + v10) = 2;
  *(_QWORD *)v18 = a4;
  *((_QWORD *)v18 + 1) = a5;
  v18[16] = 2;
  v17();
  return sub_20E6E9F14();
}

uint64_t sub_20E6CF014(uint64_t a1, uint64_t a2)
{
  return sub_20E6D20C0(a1, a2, type metadata accessor for CableRelayConnectionRequest.QRAssisted) & 1;
}

unint64_t sub_20E6CF038()
{
  return 0xD000000000000026;
}

uint64_t sub_20E6CF058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CF1B0(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CableRelayConnectionRequest.QRAssisted);
}

uint64_t sub_20E6CF074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CF260(a1, a2, a3, type metadata accessor for CableRelayConnectionRequest.QRAssisted);
}

uint64_t sub_20E6CF090()
{
  sub_20E67BD04(&qword_254A2F618, type metadata accessor for CableRelayConnectionRequest.QRAssisted, (uint64_t)&unk_20E6F35B4);
  return sub_20E6E9E0C();
}

uint64_t sub_20E6CF0E0@<X0>(uint64_t a1@<X8>)
{
  return sub_20E6CAF58(&qword_254A2DC48, (uint64_t)qword_254A3EE58, a1);
}

uint64_t sub_20E6CF0FC()
{
  sub_20E67BD04(&qword_254A2F450, type metadata accessor for CableRelayConnectionRequest.QRAssisted, (uint64_t)&unk_20E6F35EC);
  return sub_20E6E9EA8();
}

uint64_t sub_20E6CF13C()
{
  sub_20E67BD04(&qword_254A2F450, type metadata accessor for CableRelayConnectionRequest.QRAssisted, (uint64_t)&unk_20E6F35EC);
  return sub_20E6E9EB4();
}

uint64_t sub_20E6CF190(uint64_t a1)
{
  return sub_20E6CEEC4(a1, qword_254A3EE70, (uint64_t)"contact_id", (uint64_t)"client_payload", 14);
}

uint64_t sub_20E6CF1B0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t result;
  char v7;

  while (1)
  {
    result = sub_20E6E9E24();
    if (v4 || (v7 & 1) != 0)
      break;
    if (result == 2 || result == 1)
    {
      a4(0);
      sub_20E6E9E54();
    }
    v4 = 0;
  }
  return result;
}

uint64_t sub_20E6CF260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  result = sub_20E6CB724(v4, a1, a2, a3, a4);
  if (!v5)
  {
    sub_20E6CC91C(v4, a1, a2, a3, a4);
    return sub_20E6E9DC4();
  }
  return result;
}

double sub_20E6CF2DC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  uint64_t v5;

  sub_20E6E9DD0();
  result = 0.0;
  v5 = *(int *)(a1 + 24);
  *(_OWORD *)(a2 + *(int *)(a1 + 20)) = xmmword_20E6EE5B0;
  *(_OWORD *)(a2 + v5) = xmmword_20E6EE5B0;
  return result;
}

unint64_t sub_20E6CF314()
{
  return 0xD000000000000029;
}

BOOL sub_20E6CF330(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 20) + 8) >> 60 != 15 && *(_QWORD *)(v1 + *(int *)(a1 + 24) + 8) >> 60 != 15;
}

uint64_t sub_20E6CF36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CF1B0(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for CableRelayConnectionRequest.StateAssisted);
}

uint64_t sub_20E6CF388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CF260(a1, a2, a3, type metadata accessor for CableRelayConnectionRequest.StateAssisted);
}

uint64_t sub_20E6CF3A4()
{
  sub_20E67BD04(&qword_254A2F620, type metadata accessor for CableRelayConnectionRequest.StateAssisted, (uint64_t)&unk_20E6F344C);
  return sub_20E6E9E0C();
}

uint64_t sub_20E6CF3F4@<X0>(uint64_t a1@<X8>)
{
  return sub_20E6CAF58(&qword_254A2DC50, (uint64_t)qword_254A3EE70, a1);
}

uint64_t sub_20E6CF410()
{
  sub_20E67BD04(&qword_254A2F430, type metadata accessor for CableRelayConnectionRequest.StateAssisted, (uint64_t)&unk_20E6F3484);
  return sub_20E6E9EA8();
}

uint64_t sub_20E6CF450()
{
  sub_20E67BD04(&qword_254A2F430, type metadata accessor for CableRelayConnectionRequest.StateAssisted, (uint64_t)&unk_20E6F3484);
  return sub_20E6E9EB4();
}

uint64_t sub_20E6CF4A0(uint64_t a1, uint64_t a2)
{
  return sub_20E6D20C0(a1, a2, type metadata accessor for CableRelayConnectionRequest.StateAssisted) & 1;
}

uint64_t sub_20E6CF4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_20E6E9F2C();
  __swift_allocate_value_buffer(v0, qword_254A3EE88);
  __swift_project_value_buffer(v0, (uint64_t)qword_254A3EE88);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F558);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F560);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20E6EE500;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "status";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_20E6E9F08();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 4;
  *(_QWORD *)v11 = "request_uuid";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return sub_20E6E9F14();
}

uint64_t sub_20E6CF61C()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_20E6E9E24();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 4)
    {
      type metadata accessor for CableRelayConnectionResponse(0);
      sub_20E6E9E54();
    }
    else if (result == 1)
    {
      sub_20E6CF6E0();
    }
    v0 = 0;
  }
  return result;
}

uint64_t sub_20E6CF6E0()
{
  type metadata accessor for CableRelayConnectionResponse(0);
  sub_20E6D4554();
  return sub_20E6E9E48();
}

uint64_t sub_20E6CF754(uint64_t a1)
{
  uint64_t result;

  result = type metadata accessor for CableRelayConnectionResponse(0);
  if (*(_BYTE *)(a1 + *(int *)(result + 20)) != 5)
  {
    sub_20E6D4554();
    return sub_20E6E9ECC();
  }
  return result;
}

double sub_20E6CF7DC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;

  sub_20E6E9DD0();
  v4 = *(int *)(a1 + 24);
  *(_BYTE *)(a2 + *(int *)(a1 + 20)) = 5;
  result = 0.0;
  *(_OWORD *)(a2 + v4) = xmmword_20E6EE5B0;
  return result;
}

unint64_t sub_20E6CF818()
{
  return 0xD00000000000001CLL;
}

BOOL sub_20E6CF834(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(v1 + *(int *)(a1 + 20)) != 5 && *(_QWORD *)(v1 + *(int *)(a1 + 24) + 8) >> 60 != 15;
}

uint64_t sub_20E6CF868()
{
  return sub_20E6CF61C();
}

uint64_t sub_20E6CF87C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CFF1C(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_20E6CF754, type metadata accessor for CableRelayConnectionResponse);
}

uint64_t sub_20E6CF8A4()
{
  sub_20E67BD04(&qword_254A2F628, type metadata accessor for CableRelayConnectionResponse, (uint64_t)&unk_20E6F32E4);
  return sub_20E6E9E0C();
}

uint64_t sub_20E6CF8F4@<X0>(uint64_t a1@<X8>)
{
  return sub_20E6CAF58(&qword_254A2DC58, (uint64_t)qword_254A3EE88, a1);
}

uint64_t sub_20E6CF910()
{
  sub_20E67BD04(&qword_254A2F410, type metadata accessor for CableRelayConnectionResponse, (uint64_t)&unk_20E6F331C);
  return sub_20E6E9EA8();
}

uint64_t sub_20E6CF950()
{
  sub_20E67BD04(&qword_254A2F410, type metadata accessor for CableRelayConnectionResponse, (uint64_t)&unk_20E6F331C);
  return sub_20E6E9EB4();
}

uint64_t sub_20E6CF9A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_20E6E9F2C();
  __swift_allocate_value_buffer(v0, qword_254A3EEA0);
  __swift_project_value_buffer(v0, (uint64_t)qword_254A3EEA0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F558);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F560);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_20E6EE500;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "connection";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_20E6E9F08();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "access_token";
  *((_QWORD *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return sub_20E6E9F14();
}

uint64_t sub_20E6CFAFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
  MEMORY[0x24BDAC7A8](v1);
  v26 = (uint64_t)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  v24 = *(_QWORD *)(v3 - 8);
  v25 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v23 = (uint64_t)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CableRelayConnectionRequest(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E0E0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v23 - v13;
  v15 = type metadata accessor for CableRelayPushMessage(0);
  v16 = v0 + *(int *)(v15 + 20);
  sub_20E67BCC0(v16, (uint64_t)v14, (uint64_t *)&unk_254A2E0E0);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v18 = v17(v14, 1, v5);
  sub_20E67BD44((uint64_t)v14, (uint64_t *)&unk_254A2E0E0);
  if (v18 != 1 && *(_QWORD *)(v0 + *(int *)(v15 + 24) + 8) >> 60 != 15)
  {
    sub_20E67BCC0(v16, (uint64_t)v12, (uint64_t *)&unk_254A2E0E0);
    if (v17(v12, 1, v5) == 1)
    {
      sub_20E67BD44((uint64_t)v12, (uint64_t *)&unk_254A2E0E0);
      return 1;
    }
    sub_20E67BD80((uint64_t)v12, (uint64_t)v8, type metadata accessor for CableRelayConnectionRequest);
    if (*(_QWORD *)&v8[*(int *)(v5 + 28) + 8] >> 60 != 15)
    {
      v19 = v26;
      sub_20E67BCC0((uint64_t)v8, v26, &qword_254A2F5F0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v19, 1, v25) == 1)
      {
        sub_20E67BD44(v19, &qword_254A2F5F0);
LABEL_9:
        sub_20E67BE08((uint64_t)v8, type metadata accessor for CableRelayConnectionRequest);
        return 1;
      }
      v20 = v23;
      sub_20E67BD80(v19, v23, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
      v21 = sub_20E6C9884();
      sub_20E67BE08(v20, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
      if ((v21 & 1) != 0)
        goto LABEL_9;
    }
    sub_20E67BE08((uint64_t)v8, type metadata accessor for CableRelayConnectionRequest);
  }
  return 0;
}

uint64_t sub_20E6CFDC4()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_20E6E9E24();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 2)
    {
      type metadata accessor for CableRelayPushMessage(0);
      sub_20E6E9E54();
    }
    else if (result == 1)
    {
      sub_20E6CFE88();
    }
    v0 = 0;
  }
  return result;
}

uint64_t sub_20E6CFE88()
{
  type metadata accessor for CableRelayPushMessage(0);
  type metadata accessor for CableRelayConnectionRequest(0);
  sub_20E67BD04(&qword_254A2F470, type metadata accessor for CableRelayConnectionRequest, (uint64_t)&unk_20E6F3754);
  return sub_20E6E9E78();
}

uint64_t sub_20E6CFF1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  result = a4(v5, a1, a2, a3);
  if (!v6)
  {
    sub_20E6CC91C(v5, a1, a2, a3, a5);
    return sub_20E6E9DC4();
  }
  return result;
}

uint64_t sub_20E6CFFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E0E0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CableRelayConnectionRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CableRelayPushMessage(0);
  sub_20E67BCC0(a1 + *(int *)(v12 + 20), (uint64_t)v7, (uint64_t *)&unk_254A2E0E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_20E67BD44((uint64_t)v7, (uint64_t *)&unk_254A2E0E0);
  sub_20E67BD80((uint64_t)v7, (uint64_t)v11, type metadata accessor for CableRelayConnectionRequest);
  sub_20E67BD04(&qword_254A2F470, type metadata accessor for CableRelayConnectionRequest, (uint64_t)&unk_20E6F3754);
  sub_20E6E9EFC();
  return sub_20E67BE08((uint64_t)v11, type metadata accessor for CableRelayConnectionRequest);
}

double sub_20E6D0118@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  sub_20E6E9DD0();
  v4 = a2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for CableRelayConnectionRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  result = 0.0;
  *(_OWORD *)(a2 + *(int *)(a1 + 24)) = xmmword_20E6EE5B0;
  return result;
}

unint64_t sub_20E6D0180()
{
  return 0xD000000000000015;
}

uint64_t sub_20E6D01A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20E6E9DDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_20E6D01D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20E6E9DDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t sub_20E6D0210()
{
  return sub_20E6CFDC4();
}

uint64_t sub_20E6D0224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6CFF1C(a1, a2, a3, sub_20E6CFFA4, type metadata accessor for CableRelayPushMessage);
}

uint64_t sub_20E6D024C()
{
  sub_20E67BD04(&qword_254A2F638, type metadata accessor for CableRelayPushMessage, (uint64_t)&unk_20E6F317C);
  return sub_20E6E9E0C();
}

uint64_t sub_20E6D029C@<X0>(uint64_t a1@<X8>)
{
  return sub_20E6CAF58(&qword_254A2DC60, (uint64_t)qword_254A3EEA0, a1);
}

uint64_t sub_20E6D02B8()
{
  sub_20E67BD04((unint64_t *)&unk_254A2E100, type metadata accessor for CableRelayPushMessage, (uint64_t)&unk_20E6F31B4);
  return sub_20E6E9EA8();
}

uint64_t sub_20E6D02F8()
{
  sub_20E6EA988();
  sub_20E6EA178();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6D034C()
{
  sub_20E67BD04((unint64_t *)&unk_254A2E100, type metadata accessor for CableRelayPushMessage, (uint64_t)&unk_20E6F31B4);
  return sub_20E6E9EB4();
}

uint64_t sub_20E6D039C()
{
  sub_20E6EA988();
  sub_20E6EA178();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6D03F0()
{
  return sub_20E67BD04(&qword_254A2F3F0, type metadata accessor for CableRelayPushMessage, (uint64_t)&unk_20E6F30C4);
}

uint64_t type metadata accessor for CableRelayPushMessage(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F720);
}

uint64_t sub_20E6D0430()
{
  return sub_20E67BD04((unint64_t *)&unk_254A2E100, type metadata accessor for CableRelayPushMessage, (uint64_t)&unk_20E6F31B4);
}

uint64_t sub_20E6D045C()
{
  return sub_20E67BD04(&qword_254A2F3F8, type metadata accessor for CableRelayPushMessage, (uint64_t)&unk_20E6F30EC);
}

uint64_t sub_20E6D0488()
{
  return sub_20E67BD04(&qword_254A2F400, type metadata accessor for CableRelayPushMessage, (uint64_t)&unk_20E6F312C);
}

uint64_t sub_20E6D04B4()
{
  return sub_20E67BD04(&qword_254A2F408, type metadata accessor for CableRelayConnectionResponse, (uint64_t)&unk_20E6F322C);
}

uint64_t type metadata accessor for CableRelayConnectionResponse(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F710);
}

uint64_t sub_20E6D04F4()
{
  return sub_20E67BD04(&qword_254A2F410, type metadata accessor for CableRelayConnectionResponse, (uint64_t)&unk_20E6F331C);
}

uint64_t sub_20E6D0520()
{
  return sub_20E67BD04(&qword_254A2F418, type metadata accessor for CableRelayConnectionResponse, (uint64_t)&unk_20E6F3254);
}

uint64_t sub_20E6D054C()
{
  return sub_20E67BD04(&qword_254A2F420, type metadata accessor for CableRelayConnectionResponse, (uint64_t)&unk_20E6F3294);
}

uint64_t sub_20E6D0578()
{
  return sub_20E67BD04(&qword_254A2F428, type metadata accessor for CableRelayConnectionRequest.StateAssisted, (uint64_t)&unk_20E6F3394);
}

uint64_t type metadata accessor for CableRelayConnectionRequest.StateAssisted(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F700);
}

uint64_t sub_20E6D05B8()
{
  return sub_20E67BD04(&qword_254A2F430, type metadata accessor for CableRelayConnectionRequest.StateAssisted, (uint64_t)&unk_20E6F3484);
}

uint64_t sub_20E6D05E4()
{
  return sub_20E67BD04(&qword_254A2F438, type metadata accessor for CableRelayConnectionRequest.StateAssisted, (uint64_t)&unk_20E6F33BC);
}

uint64_t sub_20E6D0610()
{
  return sub_20E67BD04(&qword_254A2F440, type metadata accessor for CableRelayConnectionRequest.StateAssisted, (uint64_t)&unk_20E6F33FC);
}

uint64_t sub_20E6D063C()
{
  return sub_20E67BD04(&qword_254A2F448, type metadata accessor for CableRelayConnectionRequest.QRAssisted, (uint64_t)&unk_20E6F34FC);
}

uint64_t type metadata accessor for CableRelayConnectionRequest.QRAssisted(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F6F0);
}

uint64_t sub_20E6D067C()
{
  return sub_20E67BD04(&qword_254A2F450, type metadata accessor for CableRelayConnectionRequest.QRAssisted, (uint64_t)&unk_20E6F35EC);
}

uint64_t sub_20E6D06A8()
{
  return sub_20E67BD04(&qword_254A2F458, type metadata accessor for CableRelayConnectionRequest.QRAssisted, (uint64_t)&unk_20E6F3524);
}

uint64_t sub_20E6D06D4()
{
  return sub_20E67BD04(&qword_254A2F460, type metadata accessor for CableRelayConnectionRequest.QRAssisted, (uint64_t)&unk_20E6F3564);
}

uint64_t sub_20E6D0700()
{
  return sub_20E67BD04(&qword_254A2F468, type metadata accessor for CableRelayConnectionRequest, (uint64_t)&unk_20E6F3664);
}

uint64_t type metadata accessor for CableRelayConnectionRequest(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F6D8);
}

uint64_t sub_20E6D0740()
{
  return sub_20E67BD04(&qword_254A2F470, type metadata accessor for CableRelayConnectionRequest, (uint64_t)&unk_20E6F3754);
}

uint64_t sub_20E6D076C()
{
  return sub_20E67BD04(&qword_254A2F478, type metadata accessor for CableRelayConnectionRequest, (uint64_t)&unk_20E6F368C);
}

uint64_t sub_20E6D0798()
{
  return sub_20E67BD04(&qword_254A2F480, type metadata accessor for CableRelayConnectionRequest, (uint64_t)&unk_20E6F36CC);
}

uint64_t sub_20E6D07C4()
{
  return sub_20E67BD04(&qword_254A2F488, type metadata accessor for CableResponse.StateDeleteResponse, (uint64_t)&unk_20E6F37CC);
}

uint64_t type metadata accessor for CableResponse.StateDeleteResponse(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F6C8);
}

uint64_t sub_20E6D0804()
{
  return sub_20E67BD04(&qword_254A2F490, type metadata accessor for CableResponse.StateDeleteResponse, (uint64_t)&unk_20E6F38BC);
}

uint64_t sub_20E6D0830()
{
  return sub_20E67BD04(&qword_254A2F498, type metadata accessor for CableResponse.StateDeleteResponse, (uint64_t)&unk_20E6F37F4);
}

uint64_t sub_20E6D085C()
{
  return sub_20E67BD04(&qword_254A2F4A0, type metadata accessor for CableResponse.StateDeleteResponse, (uint64_t)&unk_20E6F3834);
}

uint64_t sub_20E6D0888()
{
  return sub_20E67BD04(&qword_254A2F4A8, type metadata accessor for CableResponse.AllocationResponse, (uint64_t)&unk_20E6F3934);
}

uint64_t type metadata accessor for CableResponse.AllocationResponse(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F738);
}

uint64_t sub_20E6D08C8()
{
  return sub_20E67BD04(&qword_254A2F4B0, type metadata accessor for CableResponse.AllocationResponse, (uint64_t)&unk_20E6F3A24);
}

uint64_t sub_20E6D08F4()
{
  return sub_20E67BD04(&qword_254A2F4B8, type metadata accessor for CableResponse.AllocationResponse, (uint64_t)&unk_20E6F395C);
}

uint64_t sub_20E6D0920()
{
  return sub_20E67BD04(&qword_254A2F4C0, type metadata accessor for CableResponse.AllocationResponse, (uint64_t)&unk_20E6F399C);
}

uint64_t sub_20E6D094C()
{
  return sub_20E67BD04(&qword_254A2F4C8, type metadata accessor for CableResponse, (uint64_t)&unk_20E6F3AC4);
}

uint64_t type metadata accessor for CableResponse(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F6B0);
}

uint64_t sub_20E6D098C()
{
  return sub_20E67BD04(&qword_254A2E190, type metadata accessor for CableResponse, (uint64_t)&unk_20E6F3BB4);
}

uint64_t sub_20E6D09B8()
{
  return sub_20E67BD04(&qword_254A2F4D0, type metadata accessor for CableResponse, (uint64_t)&unk_20E6F3AEC);
}

uint64_t sub_20E6D09E4()
{
  return sub_20E67BD04(&qword_254A2F4D8, type metadata accessor for CableResponse, (uint64_t)&unk_20E6F3B2C);
}

uint64_t sub_20E6D0A10()
{
  return sub_20E67BD04(&qword_254A2F4E0, type metadata accessor for CableRequest.StateDeleteRequest, (uint64_t)&unk_20E6F3C2C);
}

uint64_t type metadata accessor for CableRequest.StateDeleteRequest(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F6A0);
}

uint64_t sub_20E6D0A50()
{
  return sub_20E67BD04(&qword_254A2F4E8, type metadata accessor for CableRequest.StateDeleteRequest, (uint64_t)&unk_20E6F3D1C);
}

uint64_t sub_20E6D0A7C()
{
  return sub_20E67BD04(&qword_254A2F4F0, type metadata accessor for CableRequest.StateDeleteRequest, (uint64_t)&unk_20E6F3C54);
}

uint64_t sub_20E6D0AA8()
{
  return sub_20E67BD04(&qword_254A2F4F8, type metadata accessor for CableRequest.StateDeleteRequest, (uint64_t)&unk_20E6F3C94);
}

uint64_t sub_20E6D0AD4()
{
  return sub_20E67BD04(&qword_254A2F500, type metadata accessor for CableRequest.AllocationRequest, (uint64_t)&unk_20E6F3D94);
}

uint64_t type metadata accessor for CableRequest.AllocationRequest(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F690);
}

uint64_t sub_20E6D0B14()
{
  return sub_20E67BD04(&qword_254A2F508, type metadata accessor for CableRequest.AllocationRequest, (uint64_t)&unk_20E6F3E84);
}

uint64_t sub_20E6D0B40()
{
  return sub_20E67BD04(&qword_254A2F510, type metadata accessor for CableRequest.AllocationRequest, (uint64_t)&unk_20E6F3DBC);
}

uint64_t sub_20E6D0B6C()
{
  return sub_20E67BD04(&qword_254A2F518, type metadata accessor for CableRequest.AllocationRequest, (uint64_t)&unk_20E6F3DFC);
}

uint64_t sub_20E6D0B98()
{
  return sub_20E67BD04(&qword_254A2F520, type metadata accessor for CableRequest, (uint64_t)&unk_20E6F3EFC);
}

uint64_t type metadata accessor for CableRequest(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F678);
}

uint64_t sub_20E6D0BD8()
{
  return sub_20E67BD04(&qword_254A2E178, type metadata accessor for CableRequest, (uint64_t)&unk_20E6F3FEC);
}

uint64_t sub_20E6D0C04()
{
  return sub_20E67BD04(&qword_254A2F528, type metadata accessor for CableRequest, (uint64_t)&unk_20E6F3F24);
}

uint64_t sub_20E6D0C30()
{
  return sub_20E67BD04(&qword_254A2F530, type metadata accessor for CableRequest, (uint64_t)&unk_20E6F3F64);
}

uint64_t sub_20E6D0C5C()
{
  return sub_20E6D0CA4(&qword_254A2F538, &qword_254A2F540);
}

uint64_t sub_20E6D0C80()
{
  return sub_20E6D0CA4(&qword_254A2F548, &qword_254A2F550);
}

uint64_t sub_20E6D0CA4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x212BC39A8](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for CableRequest.OneOf_Request(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F668);
}

uint64_t sub_20E6D0CF8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = a1[2];
  if (v2 == a2[2])
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = a1[7];
    v4 = a1[4] == a2[4] && a1[5] == a2[5];
    if (v4 || (sub_20E6EA8EC() & 1) != 0)
      __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_20E6D1A0C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_20E6EA8EC(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_20E6EA8EC() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

BOOL sub_20E6D1AD0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_20E6D1B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v5;
  int v6;
  char v8;
  uint64_t result;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *i;
  int v13;
  int v14;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = *(_DWORD *)(a1 + 48);
  v6 = *(_DWORD *)(a2 + 48);
  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32) && *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40))
  {
    if (v5 == v6)
      goto LABEL_12;
    return 0;
  }
  v8 = sub_20E6EA8EC();
  result = 0;
  if ((v8 & 1) != 0 && v5 == v6)
  {
LABEL_12:
    v10 = v2 - 1;
    if (v10)
    {
      v11 = (_DWORD *)(a2 + 72);
      for (i = (_DWORD *)(a1 + 72); ; i += 6)
      {
        v13 = *i;
        v14 = *v11;
        if (*((_QWORD *)i - 2) == *((_QWORD *)v11 - 2) && *((_QWORD *)i - 1) == *((_QWORD *)v11 - 1))
        {
          if (v13 != v14)
            return 0;
        }
        else
        {
          v16 = sub_20E6EA8EC();
          result = 0;
          if ((v16 & 1) == 0 || v13 != v14)
            return result;
        }
        v11 += 6;
        result = 1;
        if (!--v10)
          return result;
      }
    }
    return 1;
  }
  return result;
}

void sub_20E6D1C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_20E6D1CAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x20E6D1E90);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_20E6D1EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  int v24;
  void (*v25)(_BYTE *, uint64_t, uint64_t);
  void (*v26)(_BYTE *, uint64_t);
  _BYTE v27[12];
  int v28;

  v4 = sub_20E6E9DDC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v27[-v9];
  v11 = type metadata accessor for CableRelayConnectionResponse(0);
  v12 = *(int *)(v11 + 20);
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 5)
  {
    if (v14 != 5)
      goto LABEL_14;
  }
  else if (v14 == 5 || v13 != v14)
  {
    goto LABEL_14;
  }
  v16 = *(int *)(v11 + 24);
  v17 = *(_QWORD *)(a1 + v16);
  v18 = *(_QWORD *)(a1 + v16 + 8);
  v19 = (uint64_t *)(a2 + v16);
  v20 = *v19;
  v21 = v19[1];
  if (v18 >> 60 == 15)
  {
    if (v21 >> 60 == 15)
      goto LABEL_17;
    goto LABEL_13;
  }
  if (v21 >> 60 == 15)
  {
LABEL_13:
    sub_20E66A9D4(v17, v18);
    sub_20E66A9D4(v20, v21);
    sub_20E66AA28(v17, v18);
    sub_20E66AA28(v20, v21);
    goto LABEL_14;
  }
  sub_20E66A9D4(v17, v18);
  sub_20E66A9D4(v20, v21);
  sub_20E6B0F54(v17, v18);
  v28 = v24;
  sub_20E66AA28(v20, v21);
  sub_20E66AA28(v17, v18);
  if ((v28 & 1) != 0)
  {
LABEL_17:
    v25 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
    v25(v10, a1, v4);
    v25(v8, a2, v4);
    sub_20E67BD04(&qword_254A2F588, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v22 = sub_20E6EA1B4();
    v26 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
    v26(v8, v4);
    v26(v10, v4);
    return v22 & 1;
  }
LABEL_14:
  v22 = 0;
  return v22 & 1;
}

uint64_t sub_20E6D20C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v30;
  char v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;

  v6 = sub_20E6E9DDC();
  v37 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v36 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v36 - v9;
  v11 = a3(0);
  v12 = *(int *)(v11 + 20);
  v13 = *(_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  v15 = (uint64_t *)(a2 + v12);
  v16 = *v15;
  v17 = v15[1];
  if (v14 >> 60 != 15)
  {
    if (v17 >> 60 != 15)
    {
      sub_20E66A9D4(v13, v14);
      sub_20E66A9D4(v16, v17);
      sub_20E6B0F54(v13, v14);
      v21 = v20;
      sub_20E66AA28(v16, v17);
      sub_20E66AA28(v13, v14);
      if ((v21 & 1) == 0)
        goto LABEL_13;
      goto LABEL_7;
    }
LABEL_5:
    sub_20E66A9D4(v13, v14);
    sub_20E66A9D4(v16, v17);
    sub_20E66AA28(v13, v14);
    v18 = v16;
    v19 = v17;
LABEL_12:
    sub_20E66AA28(v18, v19);
    goto LABEL_13;
  }
  if (v17 >> 60 != 15)
    goto LABEL_5;
LABEL_7:
  v22 = *(int *)(v11 + 24);
  v23 = *(_QWORD *)(a1 + v22);
  v24 = *(_QWORD *)(a1 + v22 + 8);
  v25 = (uint64_t *)(a2 + v22);
  v26 = *v25;
  v27 = v25[1];
  if (v24 >> 60 == 15)
  {
    if (v27 >> 60 == 15)
      goto LABEL_16;
    goto LABEL_11;
  }
  if (v27 >> 60 == 15)
  {
LABEL_11:
    sub_20E66A9D4(v23, v24);
    sub_20E66A9D4(v26, v27);
    sub_20E66AA28(v23, v24);
    v18 = v26;
    v19 = v27;
    goto LABEL_12;
  }
  sub_20E66A9D4(v23, v24);
  sub_20E66A9D4(v26, v27);
  sub_20E6B0F54(v23, v24);
  v31 = v30;
  sub_20E66AA28(v26, v27);
  sub_20E66AA28(v23, v24);
  if ((v31 & 1) != 0)
  {
LABEL_16:
    v32 = v37;
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
    v33(v10, a1, v6);
    v34 = v36;
    v33(v36, a2, v6);
    sub_20E67BD04(&qword_254A2F588, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v28 = sub_20E6EA1B4();
    v35 = *(void (**)(char *, uint64_t))(v32 + 8);
    v35(v34, v6);
    v35(v10, v6);
    return v28 & 1;
  }
LABEL_13:
  v28 = 0;
  return v28 & 1;
}

uint64_t sub_20E6D236C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;

  v4 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v27 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F610);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_20E67BDC4(a1, (uint64_t)v19, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
  sub_20E67BDC4(a2, v20, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_20E67BDC4((uint64_t)v19, (uint64_t)v13, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_20E67BD80(v20, (uint64_t)v6, type metadata accessor for CableRelayConnectionRequest.StateAssisted);
      v21 = sub_20E6D20C0((uint64_t)v13, (uint64_t)v6, type metadata accessor for CableRelayConnectionRequest.StateAssisted);
      sub_20E67BE08((uint64_t)v6, type metadata accessor for CableRelayConnectionRequest.StateAssisted);
      v22 = (uint64_t)v13;
      v23 = type metadata accessor for CableRelayConnectionRequest.StateAssisted;
LABEL_9:
      sub_20E67BE08(v22, v23);
      sub_20E67BE08((uint64_t)v19, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
      return v21 & 1;
    }
    v24 = type metadata accessor for CableRelayConnectionRequest.StateAssisted;
    v25 = (uint64_t)v13;
  }
  else
  {
    sub_20E67BDC4((uint64_t)v19, (uint64_t)v15, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_20E67BD80(v20, (uint64_t)v9, type metadata accessor for CableRelayConnectionRequest.QRAssisted);
      v21 = sub_20E6D20C0((uint64_t)v15, (uint64_t)v9, type metadata accessor for CableRelayConnectionRequest.QRAssisted);
      sub_20E67BE08((uint64_t)v9, type metadata accessor for CableRelayConnectionRequest.QRAssisted);
      v22 = (uint64_t)v15;
      v23 = type metadata accessor for CableRelayConnectionRequest.QRAssisted;
      goto LABEL_9;
    }
    v24 = type metadata accessor for CableRelayConnectionRequest.QRAssisted;
    v25 = (uint64_t)v15;
  }
  sub_20E67BE08(v25, v24);
  sub_20E67BD44((uint64_t)v19, &qword_254A2F610);
  v21 = 0;
  return v21 & 1;
}

uint64_t sub_20E6D2604(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  char v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;

  v4 = sub_20E6E9DDC();
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v50 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v49 = (char *)&v48 - v7;
  v8 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v55 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F608);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v48 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v48 - v21;
  v53 = a1;
  sub_20E67BCC0(a1, (uint64_t)&v48 - v21, &qword_254A2F5F0);
  v54 = a2;
  sub_20E67BCC0(a2, (uint64_t)v20, &qword_254A2F5F0);
  v23 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_20E67BCC0((uint64_t)v22, (uint64_t)v13, &qword_254A2F5F0);
  sub_20E67BCC0((uint64_t)v20, v23, &qword_254A2F5F0);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v24((uint64_t)v13, 1, v8) != 1)
  {
    v25 = (uint64_t)v55;
    sub_20E67BCC0((uint64_t)v13, (uint64_t)v17, &qword_254A2F5F0);
    if (v24(v23, 1, v8) != 1)
    {
      sub_20E67BD80(v23, v25, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
      v26 = sub_20E6D236C((uint64_t)v17, v25);
      sub_20E67BE08(v25, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
      sub_20E67BD44((uint64_t)v20, &qword_254A2F5F0);
      sub_20E67BD44((uint64_t)v22, &qword_254A2F5F0);
      sub_20E67BE08((uint64_t)v17, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
      sub_20E67BD44((uint64_t)v13, &qword_254A2F5F0);
      if ((v26 & 1) == 0)
        goto LABEL_14;
      goto LABEL_8;
    }
    sub_20E67BD44((uint64_t)v20, &qword_254A2F5F0);
    sub_20E67BD44((uint64_t)v22, &qword_254A2F5F0);
    sub_20E67BE08((uint64_t)v17, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
LABEL_6:
    sub_20E67BD44((uint64_t)v13, &qword_254A2F608);
    goto LABEL_14;
  }
  sub_20E67BD44((uint64_t)v20, &qword_254A2F5F0);
  sub_20E67BD44((uint64_t)v22, &qword_254A2F5F0);
  if (v24(v23, 1, v8) != 1)
    goto LABEL_6;
  sub_20E67BD44((uint64_t)v13, &qword_254A2F5F0);
LABEL_8:
  v27 = (int *)type metadata accessor for CableRelayConnectionRequest(0);
  v28 = v53;
  v29 = v54;
  if ((sub_20E6D1A0C(*(_QWORD **)(v53 + v27[5]), *(_QWORD **)(v54 + v27[5])) & 1) != 0)
  {
    v30 = v27[7];
    v31 = *(_QWORD *)(v28 + v30);
    v32 = *(_QWORD *)(v28 + v30 + 8);
    v33 = (uint64_t *)(v29 + v30);
    v34 = *v33;
    v35 = v33[1];
    if (v32 >> 60 == 15)
    {
      if (v35 >> 60 == 15)
        goto LABEL_17;
      goto LABEL_13;
    }
    if (v35 >> 60 == 15)
    {
LABEL_13:
      sub_20E66A9D4(v31, v32);
      sub_20E66A9D4(v34, v35);
      sub_20E66AA28(v31, v32);
      sub_20E66AA28(v34, v35);
      goto LABEL_14;
    }
    sub_20E66A9D4(v31, v32);
    sub_20E66A9D4(v34, v35);
    sub_20E6B0F54(v31, v32);
    v39 = v38;
    sub_20E66AA28(v34, v35);
    sub_20E66AA28(v31, v32);
    if ((v39 & 1) != 0)
    {
LABEL_17:
      v40 = v28 + v27[6];
      v42 = v51;
      v41 = v52;
      v43 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
      v44 = v49;
      v43(v49, v40, v52);
      v45 = v29 + v27[6];
      v46 = v50;
      v43(v50, v45, v41);
      sub_20E67BD04(&qword_254A2F588, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v36 = sub_20E6EA1B4();
      v47 = *(void (**)(char *, uint64_t))(v42 + 8);
      v47(v46, v41);
      v47(v44, v41);
      return v36 & 1;
    }
  }
LABEL_14:
  v36 = 0;
  return v36 & 1;
}

uint64_t sub_20E6D2A98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v4 = sub_20E6E9DDC();
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v49 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v48 = (char *)&v48 - v7;
  v8 = type metadata accessor for CableRelayConnectionRequest(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v52 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F640);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E0E0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v55 = (uint64_t)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v48 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v48 - v20;
  v22 = type metadata accessor for CableRelayPushMessage(0);
  v23 = *(int *)(v22 + 20);
  v53 = a1;
  sub_20E67BCC0(a1 + v23, (uint64_t)v21, (uint64_t *)&unk_254A2E0E0);
  v24 = *(int *)(v22 + 20);
  v54 = a2;
  sub_20E67BCC0(a2 + v24, (uint64_t)v19, (uint64_t *)&unk_254A2E0E0);
  v25 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_20E67BCC0((uint64_t)v21, (uint64_t)v13, (uint64_t *)&unk_254A2E0E0);
  sub_20E67BCC0((uint64_t)v19, v25, (uint64_t *)&unk_254A2E0E0);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v26((uint64_t)v13, 1, v8) != 1)
  {
    v27 = v55;
    sub_20E67BCC0((uint64_t)v13, v55, (uint64_t *)&unk_254A2E0E0);
    if (v26(v25, 1, v8) != 1)
    {
      v28 = v52;
      sub_20E67BD80(v25, v52, type metadata accessor for CableRelayConnectionRequest);
      v29 = sub_20E6D2604(v27, v28);
      sub_20E67BE08(v28, type metadata accessor for CableRelayConnectionRequest);
      sub_20E67BD44((uint64_t)v19, (uint64_t *)&unk_254A2E0E0);
      sub_20E67BD44((uint64_t)v21, (uint64_t *)&unk_254A2E0E0);
      sub_20E67BE08(v27, type metadata accessor for CableRelayConnectionRequest);
      sub_20E67BD44((uint64_t)v13, (uint64_t *)&unk_254A2E0E0);
      if ((v29 & 1) == 0)
        goto LABEL_13;
      goto LABEL_8;
    }
    sub_20E67BD44((uint64_t)v19, (uint64_t *)&unk_254A2E0E0);
    sub_20E67BD44((uint64_t)v21, (uint64_t *)&unk_254A2E0E0);
    sub_20E67BE08(v27, type metadata accessor for CableRelayConnectionRequest);
LABEL_6:
    sub_20E67BD44((uint64_t)v13, &qword_254A2F640);
    goto LABEL_13;
  }
  sub_20E67BD44((uint64_t)v19, (uint64_t *)&unk_254A2E0E0);
  sub_20E67BD44((uint64_t)v21, (uint64_t *)&unk_254A2E0E0);
  if (v26(v25, 1, v8) != 1)
    goto LABEL_6;
  sub_20E67BD44((uint64_t)v13, (uint64_t *)&unk_254A2E0E0);
LABEL_8:
  v30 = *(int *)(v22 + 24);
  v32 = v53;
  v31 = v54;
  v33 = *(_QWORD *)(v53 + v30);
  v34 = *(_QWORD *)(v53 + v30 + 8);
  v35 = (uint64_t *)(v54 + v30);
  v36 = *v35;
  v37 = v35[1];
  if (v34 >> 60 == 15)
  {
    if (v37 >> 60 == 15)
      goto LABEL_16;
    goto LABEL_12;
  }
  if (v37 >> 60 == 15)
  {
LABEL_12:
    sub_20E66A9D4(v33, v34);
    sub_20E66A9D4(v36, v37);
    sub_20E66AA28(v33, v34);
    sub_20E66AA28(v36, v37);
    goto LABEL_13;
  }
  sub_20E66A9D4(v33, v34);
  sub_20E66A9D4(v36, v37);
  sub_20E6B0F54(v33, v34);
  v41 = v40;
  sub_20E66AA28(v36, v37);
  sub_20E66AA28(v33, v34);
  if ((v41 & 1) != 0)
  {
LABEL_16:
    v43 = v50;
    v42 = v51;
    v44 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
    v45 = v48;
    v44(v48, v32, v51);
    v46 = v49;
    v44(v49, v31, v42);
    sub_20E67BD04(&qword_254A2F588, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v38 = sub_20E6EA1B4();
    v47 = *(void (**)(char *, uint64_t))(v43 + 8);
    v47(v46, v42);
    v47(v45, v42);
    return v38 & 1;
  }
LABEL_13:
  v38 = 0;
  return v38 & 1;
}

uint64_t sub_20E6D2F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;

  v4 = sub_20E6E9DDC();
  v58 = *(_QWORD *)(v4 - 8);
  v59 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v57 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v56 = (char *)&v54 - v7;
  v62 = type metadata accessor for CableResponse.OneOf_Response(0);
  v60 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  v55 = (uint64_t)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5C8);
  MEMORY[0x24BDAC7A8](v9);
  v63 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v54 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v61 = (uint64_t)&v54 - v18;
  v19 = type metadata accessor for CableResponse(0);
  v20 = *(int *)(v19 + 24);
  v21 = a1;
  v22 = a1 + v20;
  v23 = *(_QWORD *)(a1 + v20);
  v24 = *(_QWORD *)(v22 + 8);
  v25 = a2;
  v26 = (uint64_t *)(a2 + v20);
  v27 = *v26;
  v28 = v26[1];
  if (v24 >> 60 == 15)
  {
    if (v28 >> 60 == 15)
      goto LABEL_9;
LABEL_5:
    sub_20E66A9D4(v23, *(_QWORD *)(v22 + 8));
    sub_20E66A9D4(v27, v28);
    sub_20E66AA28(v23, v24);
    sub_20E66AA28(v27, v28);
    goto LABEL_6;
  }
  if (v28 >> 60 == 15)
    goto LABEL_5;
  v54 = v19;
  sub_20E66A9D4(v23, v24);
  sub_20E66A9D4(v27, v28);
  sub_20E6B0F54(v23, v24);
  v32 = v31;
  sub_20E66AA28(v27, v28);
  sub_20E66AA28(v23, v24);
  v19 = v54;
  if ((v32 & 1) == 0)
    goto LABEL_6;
LABEL_9:
  v33 = *(int *)(v19 + 28);
  v34 = v21;
  v35 = *(unsigned __int8 *)(v21 + v33);
  v36 = v25;
  v37 = *(unsigned __int8 *)(v25 + v33);
  if (v35 == 5)
  {
    v38 = (uint64_t)v63;
    v39 = (uint64_t)v14;
    if (v37 != 5)
      goto LABEL_6;
    goto LABEL_14;
  }
  v29 = 0;
  v38 = (uint64_t)v63;
  if (v37 != 5)
  {
    v39 = (uint64_t)v14;
    if (v35 == v37)
    {
LABEL_14:
      v40 = v19;
      v41 = v61;
      sub_20E67BCC0(v34, v61, &qword_254A2F5B0);
      sub_20E67BCC0(v36, (uint64_t)v17, &qword_254A2F5B0);
      v42 = v38 + *(int *)(v9 + 48);
      sub_20E67BCC0(v41, v38, &qword_254A2F5B0);
      sub_20E67BCC0((uint64_t)v17, v42, &qword_254A2F5B0);
      v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
      v44 = v62;
      if (v43(v38, 1, v62) == 1)
      {
        sub_20E67BD44((uint64_t)v17, &qword_254A2F5B0);
        sub_20E67BD44(v41, &qword_254A2F5B0);
        if (v43(v42, 1, v44) == 1)
        {
          sub_20E67BD44(v38, &qword_254A2F5B0);
LABEL_21:
          v47 = v34 + *(int *)(v40 + 20);
          v49 = v58;
          v48 = v59;
          v50 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
          v51 = v56;
          v50(v56, v47, v59);
          v52 = v57;
          v50(v57, v36 + *(int *)(v40 + 20), v48);
          sub_20E67BD04(&qword_254A2F588, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
          v29 = sub_20E6EA1B4();
          v53 = *(void (**)(char *, uint64_t))(v49 + 8);
          v53(v52, v48);
          v53(v51, v48);
          return v29 & 1;
        }
      }
      else
      {
        sub_20E67BCC0(v38, v39, &qword_254A2F5B0);
        if (v43(v42, 1, v44) != 1)
        {
          v45 = v55;
          sub_20E67BD80(v42, v55, type metadata accessor for CableResponse.OneOf_Response);
          v46 = sub_20E6D3420(v39, v45);
          sub_20E67BE08(v45, type metadata accessor for CableResponse.OneOf_Response);
          sub_20E67BD44((uint64_t)v17, &qword_254A2F5B0);
          sub_20E67BD44(v41, &qword_254A2F5B0);
          sub_20E67BE08(v39, type metadata accessor for CableResponse.OneOf_Response);
          sub_20E67BD44(v38, &qword_254A2F5B0);
          if ((v46 & 1) != 0)
            goto LABEL_21;
          goto LABEL_6;
        }
        sub_20E67BD44((uint64_t)v17, &qword_254A2F5B0);
        sub_20E67BD44(v41, &qword_254A2F5B0);
        sub_20E67BE08(v39, type metadata accessor for CableResponse.OneOf_Response);
      }
      sub_20E67BD44(v38, &qword_254A2F5C8);
LABEL_6:
      v29 = 0;
    }
  }
  return v29 & 1;
}

uint64_t sub_20E6D3420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;

  v4 = type metadata accessor for CableResponse.StateDeleteResponse(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CableResponse.AllocationResponse(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CableResponse.OneOf_Response(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v27 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5D0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_20E67BDC4(a1, (uint64_t)v19, type metadata accessor for CableResponse.OneOf_Response);
  sub_20E67BDC4(a2, v20, type metadata accessor for CableResponse.OneOf_Response);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_20E67BDC4((uint64_t)v19, (uint64_t)v13, type metadata accessor for CableResponse.OneOf_Response);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_20E67BD80(v20, (uint64_t)v6, type metadata accessor for CableResponse.StateDeleteResponse);
      sub_20E6E9DDC();
      sub_20E67BD04(&qword_254A2F588, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v21 = sub_20E6EA1B4();
      sub_20E67BE08((uint64_t)v6, type metadata accessor for CableResponse.StateDeleteResponse);
      v22 = (uint64_t)v13;
      v23 = type metadata accessor for CableResponse.StateDeleteResponse;
LABEL_9:
      sub_20E67BE08(v22, v23);
      sub_20E67BE08((uint64_t)v19, type metadata accessor for CableResponse.OneOf_Response);
      return v21 & 1;
    }
    v24 = type metadata accessor for CableResponse.StateDeleteResponse;
    v25 = (uint64_t)v13;
  }
  else
  {
    sub_20E67BDC4((uint64_t)v19, (uint64_t)v15, type metadata accessor for CableResponse.OneOf_Response);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_20E67BD80(v20, (uint64_t)v9, type metadata accessor for CableResponse.AllocationResponse);
      v21 = sub_20E6D36E0((uint64_t)v15, (uint64_t)v9);
      sub_20E67BE08((uint64_t)v9, type metadata accessor for CableResponse.AllocationResponse);
      v22 = (uint64_t)v15;
      v23 = type metadata accessor for CableResponse.AllocationResponse;
      goto LABEL_9;
    }
    v24 = type metadata accessor for CableResponse.AllocationResponse;
    v25 = (uint64_t)v15;
  }
  sub_20E67BE08(v25, v24);
  sub_20E67BD44((uint64_t)v19, &qword_254A2F5D0);
  v21 = 0;
  return v21 & 1;
}

uint64_t sub_20E6D36E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v21;
  char v22;
  uint64_t v23;
  _DWORD *v24;
  char v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;

  v4 = sub_20E6E9DDC();
  v41 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v40 - v8;
  v10 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
  v11 = v10[5];
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (uint64_t *)(a2 + v11);
  v15 = *v14;
  v16 = v14[1];
  v40 = v7;
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 == 15)
      goto LABEL_10;
LABEL_5:
    sub_20E66A9D4(v12, v13);
    sub_20E66A9D4(v15, v16);
    sub_20E66AA28(v12, v13);
    v17 = v15;
    v18 = v16;
LABEL_6:
    sub_20E66AA28(v17, v18);
    goto LABEL_7;
  }
  if (v16 >> 60 == 15)
    goto LABEL_5;
  sub_20E66A9D4(v12, v13);
  sub_20E66A9D4(v15, v16);
  sub_20E6B0F54(v12, v13);
  v22 = v21;
  sub_20E66AA28(v15, v16);
  sub_20E66AA28(v12, v13);
  if ((v22 & 1) == 0)
    goto LABEL_7;
LABEL_10:
  v23 = v10[6];
  v24 = (_DWORD *)(a1 + v23);
  v25 = *(_BYTE *)(a1 + v23 + 4);
  v26 = (_DWORD *)(a2 + v23);
  v27 = *(unsigned __int8 *)(a2 + v23 + 4);
  if ((v25 & 1) != 0)
  {
    if (!v27)
      goto LABEL_7;
  }
  else
  {
    if (*v24 != *v26)
      LOBYTE(v27) = 1;
    if ((v27 & 1) != 0)
      goto LABEL_7;
  }
  v28 = v10[7];
  v29 = *(_QWORD *)(a1 + v28);
  v30 = *(_QWORD *)(a1 + v28 + 8);
  v31 = (uint64_t *)(a2 + v28);
  v32 = *v31;
  v33 = v31[1];
  if (v30 >> 60 == 15)
  {
    if (v33 >> 60 == 15)
      goto LABEL_22;
    goto LABEL_20;
  }
  if (v33 >> 60 == 15)
  {
LABEL_20:
    sub_20E66A9D4(v29, v30);
    sub_20E66A9D4(v32, v33);
    sub_20E66AA28(v29, v30);
    v17 = v32;
    v18 = v33;
    goto LABEL_6;
  }
  sub_20E66A9D4(v29, v30);
  sub_20E66A9D4(v32, v33);
  sub_20E6B0F54(v29, v30);
  v35 = v34;
  sub_20E66AA28(v32, v33);
  sub_20E66AA28(v29, v30);
  if ((v35 & 1) != 0)
  {
LABEL_22:
    v36 = v41;
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
    v37(v9, a1, v4);
    v38 = v40;
    v37(v40, a2, v4);
    sub_20E67BD04(&qword_254A2F588, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v19 = sub_20E6EA1B4();
    v39 = *(void (**)(char *, uint64_t))(v36 + 8);
    v39(v38, v4);
    v39(v9, v4);
    return v19 & 1;
  }
LABEL_7:
  v19 = 0;
  return v19 & 1;
}

uint64_t sub_20E6D39B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  char v37;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = sub_20E6E9DDC();
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v51 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v50 = (char *)&v48 - v7;
  v8 = type metadata accessor for CableRequest.OneOf_Request(0);
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v48 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F580);
  MEMORY[0x24BDAC7A8](v10);
  v57 = (uint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v54 = (uint64_t)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v48 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v48 - v18;
  v49 = type metadata accessor for CableRequest(0);
  v20 = *(int *)(v49 + 24);
  v21 = a1;
  v23 = *(_QWORD *)(a1 + v20);
  v22 = *(_QWORD *)(a1 + v20 + 8);
  v24 = a2;
  v25 = (uint64_t *)(a2 + v20);
  v26 = *v25;
  v27 = v25[1];
  if (v22 >> 60 != 15)
  {
    if (v27 >> 60 != 15)
    {
      sub_20E66A9D4(v23, v22);
      sub_20E66A9D4(v26, v27);
      sub_20E6B0F54(v23, v22);
      v29 = v28;
      sub_20E66AA28(v26, v27);
      sub_20E66AA28(v23, v22);
      if ((v29 & 1) == 0)
        goto LABEL_13;
      goto LABEL_7;
    }
LABEL_5:
    sub_20E66A9D4(v23, v22);
    sub_20E66A9D4(v26, v27);
    sub_20E66AA28(v23, v22);
    sub_20E66AA28(v26, v27);
    goto LABEL_13;
  }
  if (v27 >> 60 != 15)
    goto LABEL_5;
LABEL_7:
  v30 = v21;
  sub_20E67BCC0(v21, (uint64_t)v19, &qword_254A2E170);
  v31 = v24;
  sub_20E67BCC0(v24, (uint64_t)v17, &qword_254A2E170);
  v32 = v57;
  v33 = v57 + *(int *)(v10 + 48);
  sub_20E67BCC0((uint64_t)v19, v57, &qword_254A2E170);
  sub_20E67BCC0((uint64_t)v17, v33, &qword_254A2E170);
  v34 = v56;
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
  if (v35(v32, 1, v56) == 1)
  {
    sub_20E67BD44((uint64_t)v17, &qword_254A2E170);
    sub_20E67BD44((uint64_t)v19, &qword_254A2E170);
    if (v35(v33, 1, v34) == 1)
    {
      sub_20E67BD44(v32, &qword_254A2E170);
LABEL_16:
      v41 = v49;
      v42 = v50;
      v44 = v52;
      v43 = v53;
      v45 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
      v45(v50, v30 + *(int *)(v49 + 20), v53);
      v46 = v51;
      v45(v51, v31 + *(int *)(v41 + 20), v43);
      sub_20E67BD04(&qword_254A2F588, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v37 = sub_20E6EA1B4();
      v47 = *(void (**)(char *, uint64_t))(v44 + 8);
      v47(v46, v43);
      v47(v42, v43);
      return v37 & 1;
    }
    goto LABEL_12;
  }
  v36 = v54;
  sub_20E67BCC0(v32, v54, &qword_254A2E170);
  if (v35(v33, 1, v34) == 1)
  {
    sub_20E67BD44((uint64_t)v17, &qword_254A2E170);
    sub_20E67BD44((uint64_t)v19, &qword_254A2E170);
    sub_20E67BE08(v36, type metadata accessor for CableRequest.OneOf_Request);
LABEL_12:
    sub_20E67BD44(v32, &qword_254A2F580);
    goto LABEL_13;
  }
  v39 = v48;
  sub_20E67BD80(v33, v48, type metadata accessor for CableRequest.OneOf_Request);
  v40 = sub_20E6D3E50(v36, v39);
  sub_20E67BE08(v39, type metadata accessor for CableRequest.OneOf_Request);
  sub_20E67BD44((uint64_t)v17, &qword_254A2E170);
  sub_20E67BD44((uint64_t)v19, &qword_254A2E170);
  sub_20E67BE08(v36, type metadata accessor for CableRequest.OneOf_Request);
  sub_20E67BD44(v32, &qword_254A2E170);
  if ((v40 & 1) != 0)
    goto LABEL_16;
LABEL_13:
  v37 = 0;
  return v37 & 1;
}

uint64_t sub_20E6D3E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v27;

  v4 = type metadata accessor for CableRequest.StateDeleteRequest(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CableRequest.AllocationRequest(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CableRequest.OneOf_Request(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v27 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F590);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_20E67BDC4(a1, (uint64_t)v19, type metadata accessor for CableRequest.OneOf_Request);
  sub_20E67BDC4(a2, v20, type metadata accessor for CableRequest.OneOf_Request);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_20E67BDC4((uint64_t)v19, (uint64_t)v13, type metadata accessor for CableRequest.OneOf_Request);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_20E67BD80(v20, (uint64_t)v6, type metadata accessor for CableRequest.StateDeleteRequest);
      v21 = sub_20E6D40E0((uint64_t)v13, (uint64_t)v6);
      sub_20E67BE08((uint64_t)v6, type metadata accessor for CableRequest.StateDeleteRequest);
      v22 = (uint64_t)v13;
      v23 = type metadata accessor for CableRequest.StateDeleteRequest;
LABEL_9:
      sub_20E67BE08(v22, v23);
      sub_20E67BE08((uint64_t)v19, type metadata accessor for CableRequest.OneOf_Request);
      return v21 & 1;
    }
    v24 = type metadata accessor for CableRequest.StateDeleteRequest;
    v25 = (uint64_t)v13;
  }
  else
  {
    sub_20E67BDC4((uint64_t)v19, (uint64_t)v15, type metadata accessor for CableRequest.OneOf_Request);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_20E67BD80(v20, (uint64_t)v9, type metadata accessor for CableRequest.AllocationRequest);
      v21 = sub_20E6D42C4((uint64_t)v15, (uint64_t)v9);
      sub_20E67BE08((uint64_t)v9, type metadata accessor for CableRequest.AllocationRequest);
      v22 = (uint64_t)v15;
      v23 = type metadata accessor for CableRequest.AllocationRequest;
      goto LABEL_9;
    }
    v24 = type metadata accessor for CableRequest.AllocationRequest;
    v25 = (uint64_t)v15;
  }
  sub_20E67BE08(v25, v24);
  sub_20E67BD44((uint64_t)v19, &qword_254A2F590);
  v21 = 0;
  return v21 & 1;
}

uint64_t sub_20E6D40E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t);
  char v19;
  void (*v20)(_BYTE *, uint64_t);
  _BYTE v22[12];
  int v23;

  v4 = sub_20E6E9DDC();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v22[-v9];
  v11 = *(int *)(type metadata accessor for CableRequest.StateDeleteRequest(0) + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (uint64_t *)(a2 + v11);
  v15 = *v14;
  v16 = v14[1];
  if (v13 >> 60 == 15)
  {
    if (v16 >> 60 == 15)
      goto LABEL_7;
    goto LABEL_5;
  }
  if (v16 >> 60 == 15)
  {
LABEL_5:
    sub_20E66A9D4(v12, v13);
    sub_20E66A9D4(v15, v16);
    sub_20E66AA28(v12, v13);
    sub_20E66AA28(v15, v16);
LABEL_8:
    v19 = 0;
    return v19 & 1;
  }
  sub_20E66A9D4(v12, v13);
  sub_20E66A9D4(v15, v16);
  sub_20E6B0F54(v12, v13);
  v23 = v17;
  sub_20E66AA28(v15, v16);
  sub_20E66AA28(v12, v13);
  if ((v23 & 1) == 0)
    goto LABEL_8;
LABEL_7:
  v18 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16);
  v18(v10, a1, v4);
  v18(v8, a2, v4);
  sub_20E67BD04(&qword_254A2F588, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v19 = sub_20E6EA1B4();
  v20 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v20(v8, v4);
  v20(v10, v4);
  return v19 & 1;
}

uint64_t sub_20E6D42C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  void (*v24)(_BYTE *, uint64_t, uint64_t);
  void (*v25)(_BYTE *, uint64_t);
  _BYTE v26[4];
  int v27;
  uint64_t v28;

  v4 = sub_20E6E9DDC();
  v28 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v26[-v8];
  v10 = type metadata accessor for CableRequest.AllocationRequest(0);
  v11 = *(int *)(v10 + 20);
  v12 = *(_QWORD *)(a1 + v11);
  v13 = *(_QWORD *)(a1 + v11 + 8);
  v14 = (uint64_t *)(a2 + v11);
  v15 = *v14;
  v16 = v14[1];
  if (v13 >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      sub_20E66A9D4(v12, v13);
      sub_20E66A9D4(v15, v16);
      sub_20E6B0F54(v12, v13);
      v27 = v19;
      sub_20E66AA28(v15, v16);
      sub_20E66AA28(v12, v13);
      if ((v27 & 1) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
LABEL_5:
    sub_20E66A9D4(v12, v13);
    sub_20E66A9D4(v15, v16);
    sub_20E66AA28(v12, v13);
    sub_20E66AA28(v15, v16);
    goto LABEL_6;
  }
  if (v16 >> 60 != 15)
    goto LABEL_5;
LABEL_9:
  v20 = *(int *)(v10 + 24);
  v21 = *(unsigned __int8 *)(a1 + v20);
  v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 2)
  {
    if (v22 == 2)
    {
LABEL_14:
      v23 = v28;
      v24 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v28 + 16);
      v24(v9, a1, v4);
      v24(v7, a2, v4);
      sub_20E67BD04(&qword_254A2F588, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v17 = sub_20E6EA1B4();
      v25 = *(void (**)(_BYTE *, uint64_t))(v23 + 8);
      v25(v7, v4);
      v25(v9, v4);
      return v17 & 1;
    }
  }
  else if (v22 != 2 && ((((v22 & 1) == 0) ^ v21) & 1) != 0)
  {
    goto LABEL_14;
  }
LABEL_6:
  v17 = 0;
  return v17 & 1;
}

uint64_t type metadata accessor for CableResponse.OneOf_Response(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F658);
}

unint64_t sub_20E6D44FC()
{
  unint64_t result;

  result = qword_254A2F5B8;
  if (!qword_254A2F5B8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F44B0, &type metadata for CableResponse.ResponseStatus);
    atomic_store(result, (unint64_t *)&qword_254A2F5B8);
  }
  return result;
}

uint64_t type metadata accessor for CableRelayConnectionRequest.OneOf_Message(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F648);
}

unint64_t sub_20E6D4554()
{
  unint64_t result;

  result = qword_254A2F630;
  if (!qword_254A2F630)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4468, &type metadata for RelayRequestResponseStatus);
    atomic_store(result, (unint64_t *)&qword_254A2F630);
  }
  return result;
}

uint64_t *sub_20E6D4598(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = sub_20E6E9DDC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
      v9 = *(int *)(v8 + 20);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = *((_QWORD *)v11 + 1);
      if (v12 >> 60 == 15)
      {
        *(_OWORD *)v10 = *(_OWORD *)v11;
      }
      else
      {
        v19 = *(_QWORD *)v11;
        sub_20E66A990(*(_QWORD *)v11, *((_QWORD *)v11 + 1));
        *(_QWORD *)v10 = v19;
        *((_QWORD *)v10 + 1) = v12;
      }
      v20 = *(int *)(v8 + 24);
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = *((_QWORD *)v22 + 1);
      if (v23 >> 60 == 15)
      {
        *(_OWORD *)v21 = *(_OWORD *)v22;
      }
      else
      {
        v29 = *(_QWORD *)v22;
        sub_20E66A990(*(_QWORD *)v22, *((_QWORD *)v22 + 1));
        *(_QWORD *)v21 = v29;
        *((_QWORD *)v21 + 1) = v23;
      }
    }
    else
    {
      v14 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
      v15 = *(int *)(v14 + 20);
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = *((_QWORD *)v17 + 1);
      if (v18 >> 60 == 15)
      {
        *(_OWORD *)v16 = *(_OWORD *)v17;
      }
      else
      {
        v24 = *(_QWORD *)v17;
        sub_20E66A990(*(_QWORD *)v17, *((_QWORD *)v17 + 1));
        *(_QWORD *)v16 = v24;
        *((_QWORD *)v16 + 1) = v18;
      }
      v25 = *(int *)(v14 + 24);
      v26 = (char *)a1 + v25;
      v27 = (char *)a2 + v25;
      v28 = *((_QWORD *)v27 + 1);
      if (v28 >> 60 == 15)
      {
        *(_OWORD *)v26 = *(_OWORD *)v27;
      }
      else
      {
        v30 = *(_QWORD *)v27;
        sub_20E66A990(*(_QWORD *)v27, *((_QWORD *)v27 + 1));
        *(_QWORD *)v26 = v30;
        *((_QWORD *)v26 + 1) = v28;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_20E6D4764(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v3 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  if (EnumCaseMultiPayload == 1)
    result = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
  else
    result = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
  v5 = result;
  v6 = (uint64_t *)(a1 + *(int *)(result + 20));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    result = sub_20E6673F4(*v6, v7);
  v8 = (uint64_t *)(a1 + *(int *)(v5 + 24));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    return sub_20E6673F4(*v8, v9);
  return result;
}

uint64_t sub_20E6D480C(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    v6 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
    v7 = *(int *)(v6 + 20);
    v8 = a1 + v7;
    v9 = (uint64_t *)(a2 + v7);
    v10 = v9[1];
    if (v10 >> 60 == 15)
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
    }
    else
    {
      v16 = *v9;
      sub_20E66A990(*v9, v9[1]);
      *(_QWORD *)v8 = v16;
      *(_QWORD *)(v8 + 8) = v10;
    }
    v17 = *(int *)(v6 + 24);
    v18 = a1 + v17;
    v19 = (uint64_t *)(a2 + v17);
    v20 = v19[1];
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    else
    {
      v26 = *v19;
      sub_20E66A990(*v19, v19[1]);
      *(_QWORD *)v18 = v26;
      *(_QWORD *)(v18 + 8) = v20;
    }
  }
  else
  {
    v11 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
    v12 = *(int *)(v11 + 20);
    v13 = a1 + v12;
    v14 = (uint64_t *)(a2 + v12);
    v15 = v14[1];
    if (v15 >> 60 == 15)
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
    }
    else
    {
      v21 = *v14;
      sub_20E66A990(*v14, v14[1]);
      *(_QWORD *)v13 = v21;
      *(_QWORD *)(v13 + 8) = v15;
    }
    v22 = *(int *)(v11 + 24);
    v23 = a1 + v22;
    v24 = (uint64_t *)(a2 + v22);
    v25 = v24[1];
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    else
    {
      v27 = *v24;
      sub_20E66A990(*v24, v24[1]);
      *(_QWORD *)v23 = v27;
      *(_QWORD *)(v23 + 8) = v25;
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_20E6D49A8(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 != a2)
  {
    sub_20E67BE08(a1, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = sub_20E6E9DDC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      v6 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
      v7 = *(int *)(v6 + 20);
      v8 = a1 + v7;
      v9 = (uint64_t *)(a2 + v7);
      v10 = v9[1];
      if (v10 >> 60 == 15)
      {
        *(_OWORD *)v8 = *(_OWORD *)v9;
      }
      else
      {
        v16 = *v9;
        sub_20E66A990(*v9, v9[1]);
        *(_QWORD *)v8 = v16;
        *(_QWORD *)(v8 + 8) = v10;
      }
      v17 = *(int *)(v6 + 24);
      v18 = a1 + v17;
      v19 = (uint64_t *)(a2 + v17);
      v20 = v19[1];
      if (v20 >> 60 == 15)
      {
        *(_OWORD *)v18 = *(_OWORD *)v19;
      }
      else
      {
        v26 = *v19;
        sub_20E66A990(*v19, v19[1]);
        *(_QWORD *)v18 = v26;
        *(_QWORD *)(v18 + 8) = v20;
      }
    }
    else
    {
      v11 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
      v12 = *(int *)(v11 + 20);
      v13 = a1 + v12;
      v14 = (uint64_t *)(a2 + v12);
      v15 = v14[1];
      if (v15 >> 60 == 15)
      {
        *(_OWORD *)v13 = *(_OWORD *)v14;
      }
      else
      {
        v21 = *v14;
        sub_20E66A990(*v14, v14[1]);
        *(_QWORD *)v13 = v21;
        *(_QWORD *)(v13 + 8) = v15;
      }
      v22 = *(int *)(v11 + 24);
      v23 = a1 + v22;
      v24 = (uint64_t *)(a2 + v22);
      v25 = v24[1];
      if (v25 >> 60 == 15)
      {
        *(_OWORD *)v23 = *(_OWORD *)v24;
      }
      else
      {
        v27 = *v24;
        sub_20E66A990(*v24, v24[1]);
        *(_QWORD *)v23 = v27;
        *(_QWORD *)(v23 + 8) = v25;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_20E6D4B5C(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
    v6 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
  else
    v6 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
  *(_OWORD *)(a1 + *(int *)(v6 + 20)) = *(_OWORD *)(a2 + *(int *)(v6 + 20));
  *(_OWORD *)(a1 + *(int *)(v6 + 24)) = *(_OWORD *)(a2 + *(int *)(v6 + 24));
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_20E6D4C04(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    sub_20E67BE08(a1, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = sub_20E6E9DDC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
      v6 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
    else
      v6 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
    *(_OWORD *)(a1 + *(int *)(v6 + 20)) = *(_OWORD *)(a2 + *(int *)(v6 + 20));
    *(_OWORD *)(a1 + *(int *)(v6 + 24)) = *(_OWORD *)(a2 + *(int *)(v6 + 24));
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_20E6D4CC8()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_20E6D4CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6D5328(a1, a2, a3, type metadata accessor for CableRelayConnectionRequest.QRAssisted, type metadata accessor for CableRelayConnectionRequest.StateAssisted);
}

uint64_t *sub_20E6D4CEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = sub_20E6E9DDC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload != 1)
    {
      v9 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
      v10 = v9[5];
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = *((_QWORD *)v12 + 1);
      if (v13 >> 60 == 15)
      {
        *(_OWORD *)v11 = *(_OWORD *)v12;
      }
      else
      {
        v14 = *(_QWORD *)v12;
        sub_20E66A990(*(_QWORD *)v12, *((_QWORD *)v12 + 1));
        *(_QWORD *)v11 = v14;
        *((_QWORD *)v11 + 1) = v13;
      }
      v15 = v9[6];
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      *(_DWORD *)v16 = *(_DWORD *)v17;
      v16[4] = v17[4];
      v18 = v9[7];
      v19 = (char *)a1 + v18;
      v20 = (char *)a2 + v18;
      v21 = *((_QWORD *)v20 + 1);
      if (v21 >> 60 == 15)
      {
        *(_OWORD *)v19 = *(_OWORD *)v20;
      }
      else
      {
        v22 = *(_QWORD *)v20;
        sub_20E66A990(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
        *(_QWORD *)v19 = v22;
        *((_QWORD *)v19 + 1) = v21;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_20E6D4E50(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v3 = sub_20E6E9DDC();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  if (EnumCaseMultiPayload != 1)
  {
    result = type metadata accessor for CableResponse.AllocationResponse(0);
    v5 = result;
    v6 = (uint64_t *)(a1 + *(int *)(result + 20));
    v7 = v6[1];
    if (v7 >> 60 != 15)
      result = sub_20E6673F4(*v6, v7);
    v8 = (uint64_t *)(a1 + *(int *)(v5 + 28));
    v9 = v8[1];
    if (v9 >> 60 != 15)
      return sub_20E6673F4(*v8, v9);
  }
  return result;
}

uint64_t sub_20E6D4EEC(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  if (EnumCaseMultiPayload != 1)
  {
    v6 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
    v7 = v6[5];
    v8 = a1 + v7;
    v9 = (uint64_t *)(a2 + v7);
    v10 = v9[1];
    if (v10 >> 60 == 15)
    {
      *(_OWORD *)v8 = *(_OWORD *)v9;
    }
    else
    {
      v11 = *v9;
      sub_20E66A990(*v9, v9[1]);
      *(_QWORD *)v8 = v11;
      *(_QWORD *)(v8 + 8) = v10;
    }
    v12 = v6[6];
    v13 = a1 + v12;
    v14 = a2 + v12;
    *(_DWORD *)v13 = *(_DWORD *)v14;
    *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
    v15 = v6[7];
    v16 = a1 + v15;
    v17 = (uint64_t *)(a2 + v15);
    v18 = v17[1];
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)v16 = *(_OWORD *)v17;
    }
    else
    {
      v19 = *v17;
      sub_20E66A990(*v17, v17[1]);
      *(_QWORD *)v16 = v19;
      *(_QWORD *)(v16 + 8) = v18;
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_20E6D5024(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_20E67BE08(a1, type metadata accessor for CableResponse.OneOf_Response);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = sub_20E6E9DDC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    if (EnumCaseMultiPayload != 1)
    {
      v6 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
      v7 = v6[5];
      v8 = a1 + v7;
      v9 = (uint64_t *)(a2 + v7);
      v10 = v9[1];
      if (v10 >> 60 == 15)
      {
        *(_OWORD *)v8 = *(_OWORD *)v9;
      }
      else
      {
        v11 = *v9;
        sub_20E66A990(*v9, v9[1]);
        *(_QWORD *)v8 = v11;
        *(_QWORD *)(v8 + 8) = v10;
      }
      v12 = v6[6];
      v13 = a1 + v12;
      v14 = (int *)(a2 + v12);
      v15 = *v14;
      *(_BYTE *)(v13 + 4) = *((_BYTE *)v14 + 4);
      *(_DWORD *)v13 = v15;
      v16 = v6[7];
      v17 = a1 + v16;
      v18 = (uint64_t *)(a2 + v16);
      v19 = v18[1];
      if (v19 >> 60 == 15)
      {
        *(_OWORD *)v17 = *(_OWORD *)v18;
      }
      else
      {
        v20 = *v18;
        sub_20E66A990(*v18, v18[1]);
        *(_QWORD *)v17 = v20;
        *(_QWORD *)(v17 + 8) = v19;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_20E6D5174(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  if (EnumCaseMultiPayload != 1)
  {
    v6 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
    *(_OWORD *)(a1 + v6[5]) = *(_OWORD *)(a2 + v6[5]);
    v7 = v6[6];
    v8 = a1 + v7;
    v9 = a2 + v7;
    *(_DWORD *)v8 = *(_DWORD *)v9;
    *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
    *(_OWORD *)(a1 + v6[7]) = *(_OWORD *)(a2 + v6[7]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_20E6D5238(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_20E67BE08(a1, type metadata accessor for CableResponse.OneOf_Response);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = sub_20E6E9DDC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    if (EnumCaseMultiPayload != 1)
    {
      v6 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
      *(_OWORD *)(a1 + v6[5]) = *(_OWORD *)(a2 + v6[5]);
      v7 = v6[6];
      v8 = a1 + v7;
      v9 = a2 + v7;
      *(_DWORD *)v8 = *(_DWORD *)v9;
      *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
      *(_OWORD *)(a1 + v6[7]) = *(_OWORD *)(a2 + v6[7]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_20E6D5314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6D5328(a1, a2, a3, type metadata accessor for CableResponse.AllocationResponse, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10]);
}

uint64_t sub_20E6D5328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  result = a4(319);
  if (v7 <= 0x3F)
  {
    result = a5(319);
    if (v8 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

_QWORD *sub_20E6D53AC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = sub_20E6E9DDC();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      v8 = *(int *)(type metadata accessor for CableRequest.StateDeleteRequest(0) + 20);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = *((_QWORD *)v10 + 1);
      if (v11 >> 60 == 15)
      {
        *(_OWORD *)v9 = *(_OWORD *)v10;
      }
      else
      {
        v18 = *(_QWORD *)v10;
        sub_20E66A990(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
        *(_QWORD *)v9 = v18;
        *((_QWORD *)v9 + 1) = v11;
      }
    }
    else
    {
      v13 = type metadata accessor for CableRequest.AllocationRequest(0);
      v14 = *(int *)(v13 + 20);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = *((_QWORD *)v16 + 1);
      if (v17 >> 60 == 15)
      {
        *(_OWORD *)v15 = *(_OWORD *)v16;
      }
      else
      {
        v19 = *(_QWORD *)v16;
        sub_20E66A990(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
        *(_QWORD *)v15 = v19;
        *((_QWORD *)v15 + 1) = v17;
      }
      *((_BYTE *)a1 + *(int *)(v13 + 24)) = *((_BYTE *)a2 + *(int *)(v13 + 24));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_20E6D5508(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  unint64_t v6;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v3 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  if (EnumCaseMultiPayload == 1)
    result = type metadata accessor for CableRequest.StateDeleteRequest(0);
  else
    result = type metadata accessor for CableRequest.AllocationRequest(0);
  v5 = (uint64_t *)(a1 + *(int *)(result + 20));
  v6 = v5[1];
  if (v6 >> 60 != 15)
    return sub_20E6673F4(*v5, v6);
  return result;
}

uint64_t sub_20E6D558C(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    v6 = *(int *)(type metadata accessor for CableRequest.StateDeleteRequest(0) + 20);
    v7 = a1 + v6;
    v8 = (uint64_t *)(a2 + v6);
    v9 = v8[1];
    if (v9 >> 60 == 15)
    {
      *(_OWORD *)v7 = *(_OWORD *)v8;
    }
    else
    {
      v15 = *v8;
      sub_20E66A990(*v8, v8[1]);
      *(_QWORD *)v7 = v15;
      *(_QWORD *)(v7 + 8) = v9;
    }
  }
  else
  {
    v10 = type metadata accessor for CableRequest.AllocationRequest(0);
    v11 = *(int *)(v10 + 20);
    v12 = a1 + v11;
    v13 = (uint64_t *)(a2 + v11);
    v14 = v13[1];
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
    }
    else
    {
      v16 = *v13;
      sub_20E66A990(*v13, v13[1]);
      *(_QWORD *)v12 = v16;
      *(_QWORD *)(v12 + 8) = v14;
    }
    *(_BYTE *)(a1 + *(int *)(v10 + 24)) = *(_BYTE *)(a2 + *(int *)(v10 + 24));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_20E6D56B4(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1 != a2)
  {
    sub_20E67BE08(a1, type metadata accessor for CableRequest.OneOf_Request);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = sub_20E6E9DDC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      v6 = *(int *)(type metadata accessor for CableRequest.StateDeleteRequest(0) + 20);
      v7 = a1 + v6;
      v8 = (uint64_t *)(a2 + v6);
      v9 = v8[1];
      if (v9 >> 60 == 15)
      {
        *(_OWORD *)v7 = *(_OWORD *)v8;
      }
      else
      {
        v15 = *v8;
        sub_20E66A990(*v8, v8[1]);
        *(_QWORD *)v7 = v15;
        *(_QWORD *)(v7 + 8) = v9;
      }
    }
    else
    {
      v10 = type metadata accessor for CableRequest.AllocationRequest(0);
      v11 = *(int *)(v10 + 20);
      v12 = a1 + v11;
      v13 = (uint64_t *)(a2 + v11);
      v14 = v13[1];
      if (v14 >> 60 == 15)
      {
        *(_OWORD *)v12 = *(_OWORD *)v13;
      }
      else
      {
        v16 = *v13;
        sub_20E66A990(*v13, v13[1]);
        *(_QWORD *)v12 = v16;
        *(_QWORD *)(v12 + 8) = v14;
      }
      *(_BYTE *)(a1 + *(int *)(v10 + 24)) = *(_BYTE *)(a2 + *(int *)(v10 + 24));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_20E6D57F4(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    v6 = type metadata accessor for CableRequest.StateDeleteRequest(0);
    *(_OWORD *)(a1 + *(int *)(v6 + 20)) = *(_OWORD *)(a2 + *(int *)(v6 + 20));
  }
  else
  {
    v7 = type metadata accessor for CableRequest.AllocationRequest(0);
    *(_OWORD *)(a1 + *(int *)(v7 + 20)) = *(_OWORD *)(a2 + *(int *)(v7 + 20));
    *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_20E6D58A8(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    sub_20E67BE08(a1, type metadata accessor for CableRequest.OneOf_Request);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = sub_20E6E9DDC();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      v6 = type metadata accessor for CableRequest.StateDeleteRequest(0);
      *(_OWORD *)(a1 + *(int *)(v6 + 20)) = *(_OWORD *)(a2 + *(int *)(v6 + 20));
    }
    else
    {
      v7 = type metadata accessor for CableRequest.AllocationRequest(0);
      *(_OWORD *)(a1 + *(int *)(v7 + 20)) = *(_OWORD *)(a2 + *(int *)(v7 + 20));
      *(_BYTE *)(a1 + *(int *)(v7 + 24)) = *(_BYTE *)(a2 + *(int *)(v7 + 24));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_20E6D5974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_20E6D5980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_20E6D598C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6D5328(a1, a2, a3, type metadata accessor for CableRequest.AllocationRequest, type metadata accessor for CableRequest.StateDeleteRequest);
}

ValueMetadata *type metadata accessor for RelayRequestResponseStatus()
{
  return &type metadata for RelayRequestResponseStatus;
}

uint64_t *sub_20E6D59B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for CableRequest.OneOf_Request(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = sub_20E6E9DDC();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      if (EnumCaseMultiPayload == 1)
      {
        v13 = *(int *)(type metadata accessor for CableRequest.StateDeleteRequest(0) + 20);
        v14 = (char *)a1 + v13;
        v15 = (char *)a2 + v13;
        v16 = *((_QWORD *)v15 + 1);
        if (v16 >> 60 == 15)
        {
          *(_OWORD *)v14 = *(_OWORD *)v15;
        }
        else
        {
          v22 = *(_QWORD *)v15;
          sub_20E66A990(*(_QWORD *)v15, *((_QWORD *)v15 + 1));
          *(_QWORD *)v14 = v22;
          *((_QWORD *)v14 + 1) = v16;
        }
      }
      else
      {
        v17 = type metadata accessor for CableRequest.AllocationRequest(0);
        v18 = *(int *)(v17 + 20);
        v19 = (char *)a1 + v18;
        v20 = (char *)a2 + v18;
        v21 = *((_QWORD *)v20 + 1);
        if (v21 >> 60 == 15)
        {
          *(_OWORD *)v19 = *(_OWORD *)v20;
        }
        else
        {
          v23 = *(_QWORD *)v20;
          sub_20E66A990(*(_QWORD *)v20, *((_QWORD *)v20 + 1));
          *(_QWORD *)v19 = v23;
          *((_QWORD *)v19 + 1) = v21;
        }
        *((_BYTE *)a1 + *(int *)(v17 + 24)) = *((_BYTE *)a2 + *(int *)(v17 + 24));
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v24 = *(int *)(a3 + 20);
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = sub_20E6E9DDC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = *(int *)(a3 + 24);
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = *((_QWORD *)v30 + 1);
    if (v31 >> 60 == 15)
    {
      *(_OWORD *)v29 = *(_OWORD *)v30;
    }
    else
    {
      v32 = *(_QWORD *)v30;
      sub_20E66A990(*(_QWORD *)v30, *((_QWORD *)v30 + 1));
      *(_QWORD *)v29 = v32;
      *((_QWORD *)v29 + 1) = v31;
    }
  }
  return a1;
}

uint64_t sub_20E6D5BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t *v13;
  unint64_t v14;

  v4 = type metadata accessor for CableRequest.OneOf_Request(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v6 = sub_20E6E9DDC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    v7 = EnumCaseMultiPayload == 1
       ? type metadata accessor for CableRequest.StateDeleteRequest(0)
       : type metadata accessor for CableRequest.AllocationRequest(0);
    v8 = (uint64_t *)(a1 + *(int *)(v7 + 20));
    v9 = v8[1];
    if (v9 >> 60 != 15)
      sub_20E6673F4(*v8, v9);
  }
  v10 = a1 + *(int *)(a2 + 20);
  v11 = sub_20E6E9DDC();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v13 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v14 = v13[1];
  if (v14 >> 60 != 15)
    return sub_20E6673F4(*v13, v14);
  return result;
}

char *sub_20E6D5CE8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for CableRequest.OneOf_Request(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v10 = sub_20E6E9DDC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = *(int *)(type metadata accessor for CableRequest.StateDeleteRequest(0) + 20);
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = *((_QWORD *)v13 + 1);
      if (v14 >> 60 == 15)
      {
        *(_OWORD *)v12 = *(_OWORD *)v13;
      }
      else
      {
        v20 = *(_QWORD *)v13;
        sub_20E66A990(*(_QWORD *)v13, *((_QWORD *)v13 + 1));
        *(_QWORD *)v12 = v20;
        *((_QWORD *)v12 + 1) = v14;
      }
    }
    else
    {
      v15 = type metadata accessor for CableRequest.AllocationRequest(0);
      v16 = *(int *)(v15 + 20);
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = *((_QWORD *)v18 + 1);
      if (v19 >> 60 == 15)
      {
        *(_OWORD *)v17 = *(_OWORD *)v18;
      }
      else
      {
        v21 = *(_QWORD *)v18;
        sub_20E66A990(*(_QWORD *)v18, *((_QWORD *)v18 + 1));
        *(_QWORD *)v17 = v21;
        *((_QWORD *)v17 + 1) = v19;
      }
      a1[*(int *)(v15 + 24)] = a2[*(int *)(v15 + 24)];
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v22 = *(int *)(a3 + 20);
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = sub_20E6E9DDC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
  v26 = *(int *)(a3 + 24);
  v27 = &a1[v26];
  v28 = &a2[v26];
  v29 = *((_QWORD *)v28 + 1);
  if (v29 >> 60 == 15)
  {
    *(_OWORD *)v27 = *(_OWORD *)v28;
  }
  else
  {
    v30 = *(_QWORD *)v28;
    sub_20E66A990(*(_QWORD *)v28, *((_QWORD *)v28 + 1));
    *(_QWORD *)v27 = v30;
    *((_QWORD *)v27 + 1) = v29;
  }
  return a1;
}

_BYTE *sub_20E6D5EE4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = type metadata accessor for CableRequest.OneOf_Request(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = sub_20E6E9DDC();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      if (EnumCaseMultiPayload == 1)
      {
        v13 = *(int *)(type metadata accessor for CableRequest.StateDeleteRequest(0) + 20);
        v14 = &a1[v13];
        v15 = &a2[v13];
        v16 = *((_QWORD *)v15 + 1);
        if (v16 >> 60 == 15)
        {
          *(_OWORD *)v14 = *(_OWORD *)v15;
        }
        else
        {
          v29 = *(_QWORD *)v15;
          sub_20E66A990(*(_QWORD *)v15, *((_QWORD *)v15 + 1));
          *(_QWORD *)v14 = v29;
          *((_QWORD *)v14 + 1) = v16;
        }
      }
      else
      {
        v24 = type metadata accessor for CableRequest.AllocationRequest(0);
        v25 = *(int *)(v24 + 20);
        v26 = &a1[v25];
        v27 = &a2[v25];
        v28 = *((_QWORD *)v27 + 1);
        if (v28 >> 60 == 15)
        {
          *(_OWORD *)v26 = *(_OWORD *)v27;
        }
        else
        {
          v30 = *(_QWORD *)v27;
          sub_20E66A990(*(_QWORD *)v27, *((_QWORD *)v27 + 1));
          *(_QWORD *)v26 = v30;
          *((_QWORD *)v26 + 1) = v28;
        }
        a1[*(int *)(v24 + 24)] = a2[*(int *)(v24 + 24)];
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_20;
    }
LABEL_8:
    v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_20;
  }
  if (v10)
  {
    sub_20E67BE08((uint64_t)a1, type metadata accessor for CableRequest.OneOf_Request);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_20E67BE08((uint64_t)a1, type metadata accessor for CableRequest.OneOf_Request);
    v18 = swift_getEnumCaseMultiPayload();
    v19 = sub_20E6E9DDC();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a1, a2, v19);
    if (v18 == 1)
    {
      v20 = *(int *)(type metadata accessor for CableRequest.StateDeleteRequest(0) + 20);
      v21 = &a1[v20];
      v22 = &a2[v20];
      v23 = *((_QWORD *)v22 + 1);
      if (v23 >> 60 == 15)
      {
        *(_OWORD *)v21 = *(_OWORD *)v22;
      }
      else
      {
        v49 = *(_QWORD *)v22;
        sub_20E66A990(*(_QWORD *)v22, *((_QWORD *)v22 + 1));
        *(_QWORD *)v21 = v49;
        *((_QWORD *)v21 + 1) = v23;
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      v44 = type metadata accessor for CableRequest.AllocationRequest(0);
      v45 = *(int *)(v44 + 20);
      v46 = &a1[v45];
      v47 = &a2[v45];
      v48 = *((_QWORD *)v47 + 1);
      if (v48 >> 60 == 15)
      {
        *(_OWORD *)v46 = *(_OWORD *)v47;
      }
      else
      {
        v50 = *(_QWORD *)v47;
        sub_20E66A990(*(_QWORD *)v47, *((_QWORD *)v47 + 1));
        *(_QWORD *)v46 = v50;
        *((_QWORD *)v46 + 1) = v48;
      }
      a1[*(int *)(v44 + 24)] = a2[*(int *)(v44 + 24)];
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_20:
  v31 = *(int *)(a3 + 20);
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = sub_20E6E9DDC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = *(int *)(a3 + 24);
  v36 = (uint64_t *)&a1[v35];
  v37 = (uint64_t *)&a2[v35];
  v38 = *(_QWORD *)&a2[v35 + 8];
  if (*(_QWORD *)&a1[v35 + 8] >> 60 != 15)
  {
    if (v38 >> 60 != 15)
    {
      v40 = *v37;
      sub_20E66A990(v40, v38);
      v41 = *v36;
      v42 = v36[1];
      *v36 = v40;
      v36[1] = v38;
      sub_20E6673F4(v41, v42);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v36);
    goto LABEL_25;
  }
  if (v38 >> 60 == 15)
  {
LABEL_25:
    *(_OWORD *)v36 = *(_OWORD *)v37;
    return a1;
  }
  v39 = *v37;
  sub_20E66A990(v39, v38);
  *v36 = v39;
  v36[1] = v38;
  return a1;
}

char *sub_20E6D6260(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = type metadata accessor for CableRequest.OneOf_Request(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v10 = sub_20E6E9DDC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for CableRequest.StateDeleteRequest(0);
      *(_OWORD *)&a1[*(int *)(v11 + 20)] = *(_OWORD *)&a2[*(int *)(v11 + 20)];
    }
    else
    {
      v12 = type metadata accessor for CableRequest.AllocationRequest(0);
      *(_OWORD *)&a1[*(int *)(v12 + 20)] = *(_OWORD *)&a2[*(int *)(v12 + 20)];
      a1[*(int *)(v12 + 24)] = a2[*(int *)(v12 + 24)];
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = sub_20E6E9DDC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_20E6D63B8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v6 = type metadata accessor for CableRequest.OneOf_Request(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = sub_20E6E9DDC();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      if (EnumCaseMultiPayload == 1)
      {
        v13 = type metadata accessor for CableRequest.StateDeleteRequest(0);
        *(_OWORD *)&a1[*(int *)(v13 + 20)] = *(_OWORD *)&a2[*(int *)(v13 + 20)];
      }
      else
      {
        v18 = type metadata accessor for CableRequest.AllocationRequest(0);
        *(_OWORD *)&a1[*(int *)(v18 + 20)] = *(_OWORD *)&a2[*(int *)(v18 + 20)];
        a1[*(int *)(v18 + 24)] = a2[*(int *)(v18 + 24)];
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    sub_20E67BE08((uint64_t)a1, type metadata accessor for CableRequest.OneOf_Request);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_20E67BE08((uint64_t)a1, type metadata accessor for CableRequest.OneOf_Request);
    v15 = swift_getEnumCaseMultiPayload();
    v16 = sub_20E6E9DDC();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
    if (v15 == 1)
    {
      v17 = type metadata accessor for CableRequest.StateDeleteRequest(0);
      *(_OWORD *)&a1[*(int *)(v17 + 20)] = *(_OWORD *)&a2[*(int *)(v17 + 20)];
    }
    else
    {
      v30 = type metadata accessor for CableRequest.AllocationRequest(0);
      *(_OWORD *)&a1[*(int *)(v30 + 20)] = *(_OWORD *)&a2[*(int *)(v30 + 20)];
      a1[*(int *)(v30 + 24)] = a2[*(int *)(v30 + 24)];
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  v19 = *(int *)(a3 + 20);
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = sub_20E6E9DDC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = *(int *)(a3 + 24);
  v24 = (uint64_t *)&a1[v23];
  v25 = (uint64_t *)&a2[v23];
  v26 = *(_QWORD *)&a1[v23 + 8];
  if (v26 >> 60 != 15)
  {
    v27 = v25[1];
    if (v27 >> 60 != 15)
    {
      v28 = *v24;
      *v24 = *v25;
      v24[1] = v27;
      sub_20E6673F4(v28, v26);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v24);
  }
  *(_OWORD *)v24 = *(_OWORD *)v25;
  return a1;
}

uint64_t sub_20E6D6634()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D6640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_20E6E9DDC();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
  v15 = ((4 * (_DWORD)v14) & 0xC) == 0;
  v16 = ((4 * v14) & 0xC | (v14 >> 2)) ^ 0xF;
  if (v15)
    return 0;
  else
    return v16;
}

uint64_t sub_20E6D66F8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D6704(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E170);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_20E6E9DDC();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v15 = (_QWORD *)(a1 + *(int *)(a4 + 24));
  *v15 = 0;
  v15[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

void sub_20E6D67BC()
{
  unint64_t v0;
  unint64_t v1;

  sub_20E695C74(319, &qword_254A2F688, (void (*)(uint64_t))type metadata accessor for CableRequest.OneOf_Request);
  if (v0 <= 0x3F)
  {
    sub_20E6E9DDC();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *sub_20E6D6858(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_20E6E9DDC();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      sub_20E66A990(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_20E6D6928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_20E66A990(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_20E6D69C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      v12 = *v9;
      sub_20E66A990(v12, v10);
      v13 = *v8;
      v14 = v8[1];
      *v8 = v12;
      v8[1] = v10;
      sub_20E6673F4(v13, v14);
      goto LABEL_8;
    }
    sub_20E66B4E0((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v11 = *v9;
  sub_20E66A990(v11, v10);
  *v8 = v11;
  v8[1] = v10;
LABEL_8:
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_20E6D6AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  return a1;
}

uint64_t sub_20E6D6B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      v12 = *v8;
      *v8 = *v9;
      v8[1] = v11;
      sub_20E6673F4(v12, v10);
      goto LABEL_6;
    }
    sub_20E66B4E0((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
LABEL_6:
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_20E6D6BC4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D6BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = sub_20E6E9DDC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_20E6D6C68()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D6C74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_20E6E9DDC();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
  return result;
}

uint64_t sub_20E6D6CEC()
{
  return sub_20E6D9EA8();
}

uint64_t *sub_20E6D6D00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_20E6E9DDC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      sub_20E66A990(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
  }
  return a1;
}

uint64_t sub_20E6D6DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;

  v4 = sub_20E6E9DDC();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    return sub_20E6673F4(*v6, v7);
  return result;
}

uint64_t sub_20E6D6E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_20E66A990(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  return a1;
}

uint64_t sub_20E6D6EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      v12 = *v9;
      sub_20E66A990(v12, v10);
      v13 = *v8;
      v14 = v8[1];
      *v8 = v12;
      v8[1] = v10;
      sub_20E6673F4(v13, v14);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    return a1;
  }
  v11 = *v9;
  sub_20E66A990(v11, v10);
  *v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t sub_20E6D6F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_20E6D6FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      v12 = *v8;
      *v8 = *v9;
      v8[1] = v11;
      sub_20E6673F4(v12, v10);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t sub_20E6D7074()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D7084()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D7094()
{
  uint64_t result;
  unint64_t v1;

  result = sub_20E6E9DDC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_20E6D7104(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for CableResponse.OneOf_Response(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = sub_20E6E9DDC();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      if (EnumCaseMultiPayload != 1)
      {
        v13 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
        v14 = v13[5];
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = *((_QWORD *)v16 + 1);
        if (v17 >> 60 == 15)
        {
          *(_OWORD *)v15 = *(_OWORD *)v16;
        }
        else
        {
          v18 = *(_QWORD *)v16;
          sub_20E66A990(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
          *(_QWORD *)v15 = v18;
          *((_QWORD *)v15 + 1) = v17;
        }
        v19 = v13[6];
        v20 = (char *)a1 + v19;
        v21 = (char *)a2 + v19;
        *(_DWORD *)v20 = *(_DWORD *)v21;
        v20[4] = v21[4];
        v22 = v13[7];
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        v25 = *((_QWORD *)v24 + 1);
        if (v25 >> 60 == 15)
        {
          *(_OWORD *)v23 = *(_OWORD *)v24;
        }
        else
        {
          v26 = *(_QWORD *)v24;
          sub_20E66A990(*(_QWORD *)v24, *((_QWORD *)v24 + 1));
          *(_QWORD *)v23 = v26;
          *((_QWORD *)v23 + 1) = v25;
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v27 = a3[5];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = sub_20E6E9DDC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
    v31 = a3[6];
    v32 = (char *)a1 + v31;
    v33 = (char *)a2 + v31;
    v34 = *((_QWORD *)v33 + 1);
    if (v34 >> 60 == 15)
    {
      *(_OWORD *)v32 = *(_OWORD *)v33;
    }
    else
    {
      v35 = *(_QWORD *)v33;
      sub_20E66A990(*(_QWORD *)v33, *((_QWORD *)v33 + 1));
      *(_QWORD *)v32 = v35;
      *((_QWORD *)v32 + 1) = v34;
    }
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t sub_20E6D7348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t *v15;
  unint64_t v16;

  v4 = type metadata accessor for CableResponse.OneOf_Response(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v6 = sub_20E6E9DDC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    if (EnumCaseMultiPayload != 1)
    {
      v7 = type metadata accessor for CableResponse.AllocationResponse(0);
      v8 = (uint64_t *)(a1 + *(int *)(v7 + 20));
      v9 = v8[1];
      if (v9 >> 60 != 15)
        sub_20E6673F4(*v8, v9);
      v10 = (uint64_t *)(a1 + *(int *)(v7 + 28));
      v11 = v10[1];
      if (v11 >> 60 != 15)
        sub_20E6673F4(*v10, v11);
    }
  }
  v12 = a1 + *(int *)(a2 + 20);
  v13 = sub_20E6E9DDC();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v15 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v16 = v15[1];
  if (v16 >> 60 != 15)
    return sub_20E6673F4(*v15, v16);
  return result;
}

char *sub_20E6D7468(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for CableResponse.OneOf_Response(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v10 = sub_20E6E9DDC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    if (EnumCaseMultiPayload != 1)
    {
      v11 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
      v12 = v11[5];
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = *((_QWORD *)v14 + 1);
      if (v15 >> 60 == 15)
      {
        *(_OWORD *)v13 = *(_OWORD *)v14;
      }
      else
      {
        v16 = *(_QWORD *)v14;
        sub_20E66A990(*(_QWORD *)v14, *((_QWORD *)v14 + 1));
        *(_QWORD *)v13 = v16;
        *((_QWORD *)v13 + 1) = v15;
      }
      v17 = v11[6];
      v18 = &a1[v17];
      v19 = &a2[v17];
      *(_DWORD *)v18 = *(_DWORD *)v19;
      v18[4] = v19[4];
      v20 = v11[7];
      v21 = &a1[v20];
      v22 = &a2[v20];
      v23 = *((_QWORD *)v22 + 1);
      if (v23 >> 60 == 15)
      {
        *(_OWORD *)v21 = *(_OWORD *)v22;
      }
      else
      {
        v24 = *(_QWORD *)v22;
        sub_20E66A990(*(_QWORD *)v22, *((_QWORD *)v22 + 1));
        *(_QWORD *)v21 = v24;
        *((_QWORD *)v21 + 1) = v23;
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v25 = a3[5];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = sub_20E6E9DDC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
  v29 = a3[6];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = *((_QWORD *)v31 + 1);
  if (v32 >> 60 == 15)
  {
    *(_OWORD *)v30 = *(_OWORD *)v31;
  }
  else
  {
    v33 = *(_QWORD *)v31;
    sub_20E66A990(*(_QWORD *)v31, *((_QWORD *)v31 + 1));
    *(_QWORD *)v30 = v33;
    *((_QWORD *)v30 + 1) = v32;
  }
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *sub_20E6D7680(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  int v53;
  uint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;

  v6 = type metadata accessor for CableResponse.OneOf_Response(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = sub_20E6E9DDC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      if (EnumCaseMultiPayload != 1)
      {
        v16 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
        v17 = v16[5];
        v18 = &a1[v17];
        v19 = &a2[v17];
        v20 = *((_QWORD *)v19 + 1);
        if (v20 >> 60 == 15)
        {
          *(_OWORD *)v18 = *(_OWORD *)v19;
        }
        else
        {
          v21 = *(_QWORD *)v19;
          sub_20E66A990(*(_QWORD *)v19, *((_QWORD *)v19 + 1));
          *(_QWORD *)v18 = v21;
          *((_QWORD *)v18 + 1) = v20;
        }
        v22 = v16[6];
        v23 = &a1[v22];
        v24 = &a2[v22];
        v25 = *(_DWORD *)v24;
        v23[4] = v24[4];
        *(_DWORD *)v23 = v25;
        v26 = v16[7];
        v27 = &a1[v26];
        v28 = &a2[v26];
        v29 = *((_QWORD *)v28 + 1);
        if (v29 >> 60 == 15)
        {
          *(_OWORD *)v27 = *(_OWORD *)v28;
        }
        else
        {
          v30 = *(_QWORD *)v28;
          sub_20E66A990(*(_QWORD *)v28, *((_QWORD *)v28 + 1));
          *(_QWORD *)v27 = v30;
          *((_QWORD *)v27 + 1) = v29;
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_18;
    }
LABEL_7:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_18;
  }
  if (v10)
  {
    sub_20E67BE08((uint64_t)a1, type metadata accessor for CableResponse.OneOf_Response);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_20E67BE08((uint64_t)a1, type metadata accessor for CableResponse.OneOf_Response);
    v14 = swift_getEnumCaseMultiPayload();
    v15 = sub_20E6E9DDC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
    if (v14 != 1)
    {
      v44 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
      v45 = v44[5];
      v46 = &a1[v45];
      v47 = &a2[v45];
      v48 = *((_QWORD *)v47 + 1);
      if (v48 >> 60 == 15)
      {
        *(_OWORD *)v46 = *(_OWORD *)v47;
      }
      else
      {
        v49 = *(_QWORD *)v47;
        sub_20E66A990(*(_QWORD *)v47, *((_QWORD *)v47 + 1));
        *(_QWORD *)v46 = v49;
        *((_QWORD *)v46 + 1) = v48;
      }
      v50 = v44[6];
      v51 = &a1[v50];
      v52 = &a2[v50];
      v53 = *(_DWORD *)v52;
      v51[4] = v52[4];
      *(_DWORD *)v51 = v53;
      v54 = v44[7];
      v55 = &a1[v54];
      v56 = &a2[v54];
      v57 = *((_QWORD *)v56 + 1);
      if (v57 >> 60 == 15)
      {
        *(_OWORD *)v55 = *(_OWORD *)v56;
      }
      else
      {
        v58 = *(_QWORD *)v56;
        sub_20E66A990(*(_QWORD *)v56, *((_QWORD *)v56 + 1));
        *(_QWORD *)v55 = v58;
        *((_QWORD *)v55 + 1) = v57;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_18:
  v31 = a3[5];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = sub_20E6E9DDC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 24))(v32, v33, v34);
  v35 = a3[6];
  v36 = (uint64_t *)&a1[v35];
  v37 = (uint64_t *)&a2[v35];
  v38 = *(_QWORD *)&a2[v35 + 8];
  if (*(_QWORD *)&a1[v35 + 8] >> 60 != 15)
  {
    if (v38 >> 60 != 15)
    {
      v40 = *v37;
      sub_20E66A990(v40, v38);
      v41 = *v36;
      v42 = v36[1];
      *v36 = v40;
      v36[1] = v38;
      sub_20E6673F4(v41, v42);
      goto LABEL_25;
    }
    sub_20E66B4E0((uint64_t)v36);
    goto LABEL_23;
  }
  if (v38 >> 60 == 15)
  {
LABEL_23:
    *(_OWORD *)v36 = *(_OWORD *)v37;
    goto LABEL_25;
  }
  v39 = *v37;
  sub_20E66A990(v39, v38);
  *v36 = v39;
  v36[1] = v38;
LABEL_25:
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

char *sub_20E6D7A20(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for CableResponse.OneOf_Response(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v10 = sub_20E6E9DDC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
    if (EnumCaseMultiPayload != 1)
    {
      v11 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
      *(_OWORD *)&a1[v11[5]] = *(_OWORD *)&a2[v11[5]];
      v12 = v11[6];
      v13 = &a1[v12];
      v14 = &a2[v12];
      *(_DWORD *)v13 = *(_DWORD *)v14;
      v13[4] = v14[4];
      *(_OWORD *)&a1[v11[7]] = *(_OWORD *)&a2[v11[7]];
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v15 = a3[5];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = sub_20E6E9DDC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  a1[v19] = a2[v19];
  return a1;
}

char *sub_20E6D7B90(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;

  v6 = type metadata accessor for CableResponse.OneOf_Response(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = sub_20E6E9DDC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      if (EnumCaseMultiPayload != 1)
      {
        v16 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
        *(_OWORD *)&a1[v16[5]] = *(_OWORD *)&a2[v16[5]];
        v17 = v16[6];
        v18 = &a1[v17];
        v19 = &a2[v17];
        *(_DWORD *)v18 = *(_DWORD *)v19;
        v18[4] = v19[4];
        *(_OWORD *)&a1[v16[7]] = *(_OWORD *)&a2[v16[7]];
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    sub_20E67BE08((uint64_t)a1, type metadata accessor for CableResponse.OneOf_Response);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_20E67BE08((uint64_t)a1, type metadata accessor for CableResponse.OneOf_Response);
    v14 = swift_getEnumCaseMultiPayload();
    v15 = sub_20E6E9DDC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
    if (v14 != 1)
    {
      v31 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
      *(_OWORD *)&a1[v31[5]] = *(_OWORD *)&a2[v31[5]];
      v32 = v31[6];
      v33 = &a1[v32];
      v34 = &a2[v32];
      *(_DWORD *)v33 = *(_DWORD *)v34;
      v33[4] = v34[4];
      *(_OWORD *)&a1[v31[7]] = *(_OWORD *)&a2[v31[7]];
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  v20 = a3[5];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = sub_20E6E9DDC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  v24 = a3[6];
  v25 = (uint64_t *)&a1[v24];
  v26 = (uint64_t *)&a2[v24];
  v27 = *(_QWORD *)&a1[v24 + 8];
  if (v27 >> 60 != 15)
  {
    v28 = v26[1];
    if (v28 >> 60 != 15)
    {
      v29 = *v25;
      *v25 = *v26;
      v25[1] = v28;
      sub_20E6673F4(v29, v27);
      goto LABEL_19;
    }
    sub_20E66B4E0((uint64_t)v25);
  }
  *(_OWORD *)v25 = *(_OWORD *)v26;
LABEL_19:
  a1[a3[7]] = a2[a3[7]];
  return a1;
}

uint64_t sub_20E6D7E30()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D7E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  unsigned int v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_20E6E9DDC();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 5u)
    v14 = 5;
  else
    v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  v15 = v14 - 5;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 5u)
    return v15;
  else
    return 0;
}

uint64_t sub_20E6D7EF0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D7EFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_20E6E9DDC();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 5;
  return result;
}

void sub_20E6D7FA4()
{
  unint64_t v0;
  unint64_t v1;

  sub_20E695C74(319, &qword_254A2F6C0, (void (*)(uint64_t))type metadata accessor for CableResponse.OneOf_Response);
  if (v0 <= 0x3F)
  {
    sub_20E6E9DDC();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t _s26AuthenticationServicesCore13CableResponseV14ResponseStatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_20E6D8098 + 4 * byte_20E6F30BD[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_20E6D80CC + 4 * byte_20E6F30B8[v4]))();
}

uint64_t sub_20E6D80CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6D80D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6D80DCLL);
  return result;
}

uint64_t sub_20E6D80E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6D80F0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_20E6D80F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6D80FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CableResponse.ResponseStatus()
{
  return &type metadata for CableResponse.ResponseStatus;
}

uint64_t sub_20E6D8118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_20E6E9DDC();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_20E6D8154(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_20E6E9DDC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_20E6D8188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_20E6D81CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_20E6D8210(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_20E6D8254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_20E6D8298()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D82A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_20E6E9DDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_20E6D82E0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D82EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_20E6E9DDC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_20E6D832C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_20E6E9DDC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_20E6D8394(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = sub_20E6E9DDC();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      if (EnumCaseMultiPayload == 1)
      {
        v13 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
        v14 = *(int *)(v13 + 20);
        v15 = (char *)a1 + v14;
        v16 = (char *)a2 + v14;
        v17 = *((_QWORD *)v16 + 1);
        if (v17 >> 60 == 15)
        {
          *(_OWORD *)v15 = *(_OWORD *)v16;
        }
        else
        {
          v23 = *(_QWORD *)v16;
          sub_20E66A990(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
          *(_QWORD *)v15 = v23;
          *((_QWORD *)v15 + 1) = v17;
        }
        v24 = *(int *)(v13 + 24);
        v25 = (char *)a1 + v24;
        v26 = (char *)a2 + v24;
        v27 = *((_QWORD *)v26 + 1);
        if (v27 >> 60 == 15)
        {
          *(_OWORD *)v25 = *(_OWORD *)v26;
        }
        else
        {
          v33 = *(_QWORD *)v26;
          sub_20E66A990(*(_QWORD *)v26, *((_QWORD *)v26 + 1));
          *(_QWORD *)v25 = v33;
          *((_QWORD *)v25 + 1) = v27;
        }
      }
      else
      {
        v18 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
        v19 = *(int *)(v18 + 20);
        v20 = (char *)a1 + v19;
        v21 = (char *)a2 + v19;
        v22 = *((_QWORD *)v21 + 1);
        if (v22 >> 60 == 15)
        {
          *(_OWORD *)v20 = *(_OWORD *)v21;
        }
        else
        {
          v28 = *(_QWORD *)v21;
          sub_20E66A990(*(_QWORD *)v21, *((_QWORD *)v21 + 1));
          *(_QWORD *)v20 = v28;
          *((_QWORD *)v20 + 1) = v22;
        }
        v29 = *(int *)(v18 + 24);
        v30 = (char *)a1 + v29;
        v31 = (char *)a2 + v29;
        v32 = *((_QWORD *)v31 + 1);
        if (v32 >> 60 == 15)
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
        }
        else
        {
          v34 = *(_QWORD *)v31;
          sub_20E66A990(*(_QWORD *)v31, *((_QWORD *)v31 + 1));
          *(_QWORD *)v30 = v34;
          *((_QWORD *)v30 + 1) = v32;
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v35 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v36 = (char *)a1 + v35;
    v37 = (char *)a2 + v35;
    v38 = sub_20E6E9DDC();
    v39 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 16);
    swift_bridgeObjectRetain();
    v39(v36, v37, v38);
    v40 = a3[7];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = *((_QWORD *)v42 + 1);
    if (v43 >> 60 == 15)
    {
      *(_OWORD *)v41 = *(_OWORD *)v42;
    }
    else
    {
      v44 = *(_QWORD *)v42;
      sub_20E66A990(*(_QWORD *)v42, *((_QWORD *)v42 + 1));
      *(_QWORD *)v41 = v44;
      *((_QWORD *)v41 + 1) = v43;
    }
  }
  return a1;
}

uint64_t sub_20E6D8644(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  unint64_t v17;

  v4 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v6 = sub_20E6E9DDC();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    if (EnumCaseMultiPayload == 1)
      v7 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
    else
      v7 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
    v8 = v7;
    v9 = (uint64_t *)(a1 + *(int *)(v7 + 20));
    v10 = v9[1];
    if (v10 >> 60 != 15)
      sub_20E6673F4(*v9, v10);
    v11 = (uint64_t *)(a1 + *(int *)(v8 + 24));
    v12 = v11[1];
    if (v12 >> 60 != 15)
      sub_20E6673F4(*v11, v12);
  }
  swift_bridgeObjectRelease();
  v13 = a1 + *(int *)(a2 + 24);
  v14 = sub_20E6E9DDC();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v16 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  v17 = v16[1];
  if (v17 >> 60 != 15)
    return sub_20E6673F4(*v16, v17);
  return result;
}

char *sub_20E6D877C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;

  v6 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v10 = sub_20E6E9DDC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
      v12 = *(int *)(v11 + 20);
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = *((_QWORD *)v14 + 1);
      if (v15 >> 60 == 15)
      {
        *(_OWORD *)v13 = *(_OWORD *)v14;
      }
      else
      {
        v21 = *(_QWORD *)v14;
        sub_20E66A990(*(_QWORD *)v14, *((_QWORD *)v14 + 1));
        *(_QWORD *)v13 = v21;
        *((_QWORD *)v13 + 1) = v15;
      }
      v22 = *(int *)(v11 + 24);
      v23 = &a1[v22];
      v24 = &a2[v22];
      v25 = *((_QWORD *)v24 + 1);
      if (v25 >> 60 == 15)
      {
        *(_OWORD *)v23 = *(_OWORD *)v24;
      }
      else
      {
        v31 = *(_QWORD *)v24;
        sub_20E66A990(*(_QWORD *)v24, *((_QWORD *)v24 + 1));
        *(_QWORD *)v23 = v31;
        *((_QWORD *)v23 + 1) = v25;
      }
    }
    else
    {
      v16 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
      v17 = *(int *)(v16 + 20);
      v18 = &a1[v17];
      v19 = &a2[v17];
      v20 = *((_QWORD *)v19 + 1);
      if (v20 >> 60 == 15)
      {
        *(_OWORD *)v18 = *(_OWORD *)v19;
      }
      else
      {
        v26 = *(_QWORD *)v19;
        sub_20E66A990(*(_QWORD *)v19, *((_QWORD *)v19 + 1));
        *(_QWORD *)v18 = v26;
        *((_QWORD *)v18 + 1) = v20;
      }
      v27 = *(int *)(v16 + 24);
      v28 = &a1[v27];
      v29 = &a2[v27];
      v30 = *((_QWORD *)v29 + 1);
      if (v30 >> 60 == 15)
      {
        *(_OWORD *)v28 = *(_OWORD *)v29;
      }
      else
      {
        v32 = *(_QWORD *)v29;
        sub_20E66A990(*(_QWORD *)v29, *((_QWORD *)v29 + 1));
        *(_QWORD *)v28 = v32;
        *((_QWORD *)v28 + 1) = v30;
      }
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v33 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = sub_20E6E9DDC();
  v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
  swift_bridgeObjectRetain();
  v37(v34, v35, v36);
  v38 = a3[7];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v41 = *((_QWORD *)v40 + 1);
  if (v41 >> 60 == 15)
  {
    *(_OWORD *)v39 = *(_OWORD *)v40;
  }
  else
  {
    v42 = *(_QWORD *)v40;
    sub_20E66A990(*(_QWORD *)v40, *((_QWORD *)v40 + 1));
    *(_QWORD *)v39 = v42;
    *((_QWORD *)v39 + 1) = v41;
  }
  return a1;
}

char *sub_20E6D8A00(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v6 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = sub_20E6E9DDC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      if (EnumCaseMultiPayload == 1)
      {
        v13 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
        v14 = *(int *)(v13 + 20);
        v15 = &a1[v14];
        v16 = &a2[v14];
        v17 = *((_QWORD *)v16 + 1);
        if (v17 >> 60 == 15)
        {
          *(_OWORD *)v15 = *(_OWORD *)v16;
        }
        else
        {
          v31 = *(_QWORD *)v16;
          sub_20E66A990(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
          *(_QWORD *)v15 = v31;
          *((_QWORD *)v15 + 1) = v17;
        }
        v32 = *(int *)(v13 + 24);
        v33 = &a1[v32];
        v34 = &a2[v32];
        v35 = *((_QWORD *)v34 + 1);
        if (v35 >> 60 == 15)
        {
          *(_OWORD *)v33 = *(_OWORD *)v34;
LABEL_22:
          swift_storeEnumTagMultiPayload();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
          goto LABEL_23;
        }
      }
      else
      {
        v26 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
        v27 = *(int *)(v26 + 20);
        v28 = &a1[v27];
        v29 = &a2[v27];
        v30 = *((_QWORD *)v29 + 1);
        if (v30 >> 60 == 15)
        {
          *(_OWORD *)v28 = *(_OWORD *)v29;
        }
        else
        {
          v36 = *(_QWORD *)v29;
          sub_20E66A990(*(_QWORD *)v29, *((_QWORD *)v29 + 1));
          *(_QWORD *)v28 = v36;
          *((_QWORD *)v28 + 1) = v30;
        }
        v37 = *(int *)(v26 + 24);
        v33 = &a1[v37];
        v34 = &a2[v37];
        v35 = *((_QWORD *)v34 + 1);
        if (v35 >> 60 == 15)
        {
          *(_OWORD *)v33 = *(_OWORD *)v34;
          goto LABEL_22;
        }
      }
      v38 = *(_QWORD *)v34;
      sub_20E66A990(*(_QWORD *)v34, *((_QWORD *)v34 + 1));
      *(_QWORD *)v33 = v38;
      *((_QWORD *)v33 + 1) = v35;
      goto LABEL_22;
    }
LABEL_8:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_23;
  }
  if (v10)
  {
    sub_20E67BE08((uint64_t)a1, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    goto LABEL_8;
  }
  if (a1 == a2)
    goto LABEL_23;
  sub_20E67BE08((uint64_t)a1, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
  v19 = swift_getEnumCaseMultiPayload();
  v20 = sub_20E6E9DDC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a1, a2, v20);
  if (v19 != 1)
  {
    v52 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
    v53 = *(int *)(v52 + 20);
    v54 = &a1[v53];
    v55 = &a2[v53];
    v56 = *((_QWORD *)v55 + 1);
    if (v56 >> 60 == 15)
    {
      *(_OWORD *)v54 = *(_OWORD *)v55;
    }
    else
    {
      v62 = *(_QWORD *)v55;
      sub_20E66A990(*(_QWORD *)v55, *((_QWORD *)v55 + 1));
      *(_QWORD *)v54 = v62;
      *((_QWORD *)v54 + 1) = v56;
    }
    v63 = *(int *)(v52 + 24);
    v59 = &a1[v63];
    v60 = &a2[v63];
    v61 = *((_QWORD *)v60 + 1);
    if (v61 >> 60 == 15)
    {
      *(_OWORD *)v59 = *(_OWORD *)v60;
      goto LABEL_40;
    }
LABEL_39:
    v64 = *(_QWORD *)v60;
    sub_20E66A990(*(_QWORD *)v60, *((_QWORD *)v60 + 1));
    *(_QWORD *)v59 = v64;
    *((_QWORD *)v59 + 1) = v61;
    goto LABEL_40;
  }
  v21 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
  v22 = *(int *)(v21 + 20);
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = *((_QWORD *)v24 + 1);
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  else
  {
    v57 = *(_QWORD *)v24;
    sub_20E66A990(*(_QWORD *)v24, *((_QWORD *)v24 + 1));
    *(_QWORD *)v23 = v57;
    *((_QWORD *)v23 + 1) = v25;
  }
  v58 = *(int *)(v21 + 24);
  v59 = &a1[v58];
  v60 = &a2[v58];
  v61 = *((_QWORD *)v60 + 1);
  if (v61 >> 60 != 15)
    goto LABEL_39;
  *(_OWORD *)v59 = *(_OWORD *)v60;
LABEL_40:
  swift_storeEnumTagMultiPayload();
LABEL_23:
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v39 = a3[6];
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = sub_20E6E9DDC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  v43 = a3[7];
  v44 = (uint64_t *)&a1[v43];
  v45 = (uint64_t *)&a2[v43];
  v46 = *(_QWORD *)&a2[v43 + 8];
  if (*(_QWORD *)&a1[v43 + 8] >> 60 != 15)
  {
    if (v46 >> 60 != 15)
    {
      v48 = *v45;
      sub_20E66A990(v48, v46);
      v49 = *v44;
      v50 = v44[1];
      *v44 = v48;
      v44[1] = v46;
      sub_20E6673F4(v49, v50);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v44);
    goto LABEL_28;
  }
  if (v46 >> 60 == 15)
  {
LABEL_28:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    return a1;
  }
  v47 = *v45;
  sub_20E66A990(v47, v46);
  *v44 = v47;
  v44[1] = v46;
  return a1;
}

char *sub_20E6D8E7C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v10 = sub_20E6E9DDC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
    if (EnumCaseMultiPayload == 1)
      v11 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
    else
      v11 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
    *(_OWORD *)&a1[*(int *)(v11 + 20)] = *(_OWORD *)&a2[*(int *)(v11 + 20)];
    *(_OWORD *)&a1[*(int *)(v11 + 24)] = *(_OWORD *)&a2[*(int *)(v11 + 24)];
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v12 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = sub_20E6E9DDC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *sub_20E6D8FD0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v12 = sub_20E6E9DDC();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      if (EnumCaseMultiPayload == 1)
        v13 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
      else
        v13 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
      *(_OWORD *)&a1[*(int *)(v13 + 20)] = *(_OWORD *)&a2[*(int *)(v13 + 20)];
      *(_OWORD *)&a1[*(int *)(v13 + 24)] = *(_OWORD *)&a2[*(int *)(v13 + 24)];
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    sub_20E67BE08((uint64_t)a1, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_20E67BE08((uint64_t)a1, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    v15 = swift_getEnumCaseMultiPayload();
    v16 = sub_20E6E9DDC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
    if (v15 == 1)
      v17 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
    else
      v17 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
    *(_OWORD *)&a1[*(int *)(v17 + 20)] = *(_OWORD *)&a2[*(int *)(v17 + 20)];
    *(_OWORD *)&a1[*(int *)(v17 + 24)] = *(_OWORD *)&a2[*(int *)(v17 + 24)];
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  swift_bridgeObjectRelease();
  v18 = a3[6];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = sub_20E6E9DDC();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  v22 = a3[7];
  v23 = (uint64_t *)&a1[v22];
  v24 = (uint64_t *)&a2[v22];
  v25 = *(_QWORD *)&a1[v22 + 8];
  if (v25 >> 60 != 15)
  {
    v26 = v24[1];
    if (v26 >> 60 != 15)
    {
      v27 = *v23;
      *v23 = *v24;
      v23[1] = v26;
      sub_20E6673F4(v27, v25);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v23);
  }
  *(_OWORD *)v23 = *(_OWORD *)v24;
  return a1;
}

uint64_t sub_20E6D9260()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D926C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_20E6E9DDC();
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_20E6D9318()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D9324(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v10 = sub_20E6E9DDC();
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_20E6D93CC()
{
  unint64_t v0;
  unint64_t v1;

  sub_20E695C74(319, &qword_254A2F6E8, (void (*)(uint64_t))type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
  if (v0 <= 0x3F)
  {
    sub_20E6E9DDC();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_20E6D948C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D949C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D94AC()
{
  return sub_20E6D9EA8();
}

uint64_t *sub_20E6D94BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_20E6E9DDC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      sub_20E66A990(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = *(int *)(a3 + 24);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = *((_QWORD *)v16 + 1);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
    }
    else
    {
      v18 = *(_QWORD *)v16;
      sub_20E66A990(*(_QWORD *)v16, *((_QWORD *)v16 + 1));
      *(_QWORD *)v15 = v18;
      *((_QWORD *)v15 + 1) = v17;
    }
  }
  return a1;
}

uint64_t sub_20E6D95B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;

  v4 = sub_20E6E9DDC();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    result = sub_20E6673F4(*v6, v7);
  v8 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    return sub_20E6673F4(*v8, v9);
  return result;
}

uint64_t sub_20E6D963C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_20E66A990(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v16 = *v14;
    sub_20E66A990(*v14, v14[1]);
    *(_QWORD *)v13 = v16;
    *(_QWORD *)(v13 + 8) = v15;
  }
  return a1;
}

uint64_t sub_20E6D970C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      v11 = *v9;
      sub_20E66A990(v11, v10);
      *v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    sub_20E66B4E0((uint64_t)v8);
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v12 = *v9;
  sub_20E66A990(v12, v10);
  v13 = *v8;
  v14 = v8[1];
  *v8 = v12;
  v8[1] = v10;
  sub_20E6673F4(v13, v14);
LABEL_8:
  v15 = *(int *)(a3 + 24);
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *(_QWORD *)(a2 + v15 + 8);
  if (*(_QWORD *)(a1 + v15 + 8) >> 60 != 15)
  {
    if (v18 >> 60 != 15)
    {
      v20 = *v17;
      sub_20E66A990(v20, v18);
      v21 = *v16;
      v22 = v16[1];
      *v16 = v20;
      v16[1] = v18;
      sub_20E6673F4(v21, v22);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v16);
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    return a1;
  }
  v19 = *v17;
  sub_20E66A990(v19, v18);
  *v16 = v19;
  v16[1] = v18;
  return a1;
}

uint64_t sub_20E6D9864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_20E6D98C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    sub_20E66B4E0(v8);
LABEL_4:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)v8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v11;
  sub_20E6673F4(v12, v10);
LABEL_6:
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *(_QWORD *)(a1 + v13 + 8);
  if (v16 >> 60 != 15)
  {
    v17 = v15[1];
    if (v17 >> 60 != 15)
    {
      v18 = *v14;
      *v14 = *v15;
      v14[1] = v17;
      sub_20E6673F4(v18, v16);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v14);
  }
  *(_OWORD *)v14 = *(_OWORD *)v15;
  return a1;
}

uint64_t sub_20E6D99C0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D99D0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *sub_20E6D99E0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_20E6E9DDC();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v9 = (char *)a1 + v8;
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = *(_QWORD *)((char *)a2 + v8 + 8);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *v10;
      sub_20E66A990(*v10, v11);
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
  }
  return a1;
}

uint64_t sub_20E6D9AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;

  v4 = sub_20E6E9DDC();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    return sub_20E6673F4(*v6, v7);
  return result;
}

uint64_t sub_20E6D9B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_20E66A990(*v9, v10);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  return a1;
}

uint64_t sub_20E6D9B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      v12 = *v9;
      sub_20E66A990(v12, v10);
      v13 = *v8;
      v14 = v8[1];
      *v8 = v12;
      v8[1] = v10;
      sub_20E6673F4(v13, v14);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    return a1;
  }
  v11 = *v9;
  sub_20E66A990(v11, v10);
  *v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t sub_20E6D9C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_20E6D9CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      v12 = *v8;
      *v8 = *v9;
      v8[1] = v11;
      sub_20E6673F4(v12, v10);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t sub_20E6D9D80()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D9D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = sub_20E6E9DDC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 5u)
    v9 = 5;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  v10 = v9 - 5;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 5u)
    return v10;
  else
    return 0;
}

uint64_t sub_20E6D9E10()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6D9E1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_20E6E9DDC();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 5;
  return result;
}

uint64_t sub_20E6D9E94()
{
  return sub_20E6D9EA8();
}

uint64_t sub_20E6D9EA8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_20E6E9DDC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_20E6D9F24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  int EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t *, uint64_t *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_20E6E9DDC();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = (int *)type metadata accessor for CableRelayConnectionRequest(0);
    v13 = *((_QWORD *)v12 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E0E0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      v62 = v8;
      v16 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
      v17 = *(_QWORD *)(v16 - 8);
      v61 = v13;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v11, 1, v16))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        v19 = (void (*)(char *, char *, uint64_t))v62;
      }
      else
      {
        v60 = v17;
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v19 = (void (*)(char *, char *, uint64_t))v62;
        v62((uint64_t *)v10, (uint64_t *)v11, v7);
        v59 = v16;
        if (EnumCaseMultiPayload == 1)
        {
          v21 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
          v22 = *(int *)(v21 + 20);
          v23 = &v10[v22];
          v24 = (uint64_t *)&v11[v22];
          v25 = v24[1];
          if (v25 >> 60 == 15)
          {
            *(_OWORD *)v23 = *(_OWORD *)v24;
          }
          else
          {
            v53 = *v24;
            v55 = v21;
            sub_20E66A990(*v24, v25);
            v21 = v55;
            *(_QWORD *)v23 = v53;
            *((_QWORD *)v23 + 1) = v25;
          }
          v31 = *(int *)(v21 + 24);
          v32 = &v10[v31];
          v33 = (uint64_t *)&v11[v31];
          v34 = v33[1];
          if (v34 >> 60 == 15)
          {
            *(_OWORD *)v32 = *(_OWORD *)v33;
          }
          else
          {
            v57 = *v33;
            sub_20E66A990(*v33, v34);
            *(_QWORD *)v32 = v57;
            *((_QWORD *)v32 + 1) = v34;
          }
        }
        else
        {
          v26 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
          v27 = *(int *)(v26 + 20);
          v28 = &v10[v27];
          v29 = (uint64_t *)&v11[v27];
          v30 = v29[1];
          if (v30 >> 60 == 15)
          {
            *(_OWORD *)v28 = *(_OWORD *)v29;
          }
          else
          {
            v54 = *v29;
            v56 = v26;
            sub_20E66A990(*v29, v30);
            v26 = v56;
            *(_QWORD *)v28 = v54;
            *((_QWORD *)v28 + 1) = v30;
          }
          v35 = *(int *)(v26 + 24);
          v36 = &v10[v35];
          v37 = (uint64_t *)&v11[v35];
          v38 = v37[1];
          if (v38 >> 60 == 15)
          {
            *(_OWORD *)v36 = *(_OWORD *)v37;
          }
          else
          {
            v58 = *v37;
            sub_20E66A990(*v37, v38);
            *(_QWORD *)v36 = v58;
            *((_QWORD *)v36 + 1) = v38;
          }
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v10, 0, 1, v59);
      }
      *(_QWORD *)&v10[v12[5]] = *(_QWORD *)&v11[v12[5]];
      v39 = v12[6];
      v40 = &v10[v39];
      v41 = &v11[v39];
      swift_bridgeObjectRetain();
      v19(v40, v41, v7);
      v42 = v12[7];
      v43 = &v10[v42];
      v44 = &v11[v42];
      v45 = *((_QWORD *)v44 + 1);
      if (v45 >> 60 == 15)
      {
        *(_OWORD *)v43 = *(_OWORD *)v44;
      }
      else
      {
        v46 = *(_QWORD *)v44;
        sub_20E66A990(*(_QWORD *)v44, *((_QWORD *)v44 + 1));
        *(_QWORD *)v43 = v46;
        *((_QWORD *)v43 + 1) = v45;
      }
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v61 + 56))(v10, 0, 1, v12);
    }
    v47 = *(int *)(a3 + 24);
    v48 = (char *)a1 + v47;
    v49 = (char *)a2 + v47;
    v50 = *((_QWORD *)v49 + 1);
    if (v50 >> 60 == 15)
    {
      *(_OWORD *)v48 = *(_OWORD *)v49;
    }
    else
    {
      v51 = *(_QWORD *)v49;
      sub_20E66A990(*(_QWORD *)v49, *((_QWORD *)v49 + 1));
      *(_QWORD *)v48 = v51;
      *((_QWORD *)v48 + 1) = v50;
    }
  }
  return a1;
}

uint64_t sub_20E6DA2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;

  v4 = sub_20E6E9DDC();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for CableRelayConnectionRequest(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v9 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v6, 1, v9))
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v5(v6, v4);
      if (EnumCaseMultiPayload == 1)
        v11 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
      else
        v11 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
      v12 = v11;
      v13 = (uint64_t *)(v6 + *(int *)(v11 + 20));
      v14 = v13[1];
      if (v14 >> 60 != 15)
        sub_20E6673F4(*v13, v14);
      v15 = (uint64_t *)(v6 + *(int *)(v12 + 24));
      v16 = v15[1];
      if (v16 >> 60 != 15)
        sub_20E6673F4(*v15, v16);
    }
    swift_bridgeObjectRelease();
    result = ((uint64_t (*)(uint64_t, uint64_t))v5)(v6 + *(int *)(v7 + 24), v4);
    v17 = (uint64_t *)(v6 + *(int *)(v7 + 28));
    v18 = v17[1];
    if (v18 >> 60 != 15)
      result = sub_20E6673F4(*v17, v18);
  }
  v19 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v20 = v19[1];
  if (v20 >> 60 != 15)
    return sub_20E6673F4(*v19, v20);
  return result;
}

uint64_t sub_20E6DA454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v6 = sub_20E6E9DDC();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CableRelayConnectionRequest(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E0E0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v58 = a3;
    v14 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
    v15 = *(_QWORD *)(v14 - 8);
    v59 = v12;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      a3 = v58;
    }
    else
    {
      v57 = v15;
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v7((uint64_t)v9, (uint64_t)v10, v6);
      v56 = v14;
      if (EnumCaseMultiPayload == 1)
      {
        v18 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
        v19 = *(int *)(v18 + 20);
        v20 = &v9[v19];
        v21 = (uint64_t *)&v10[v19];
        v22 = v21[1];
        a3 = v58;
        if (v22 >> 60 == 15)
        {
          *(_OWORD *)v20 = *(_OWORD *)v21;
        }
        else
        {
          v50 = *v21;
          v52 = v18;
          sub_20E66A990(*v21, v22);
          v18 = v52;
          *(_QWORD *)v20 = v50;
          *((_QWORD *)v20 + 1) = v22;
        }
        v28 = *(int *)(v18 + 24);
        v29 = &v9[v28];
        v30 = (uint64_t *)&v10[v28];
        v31 = v30[1];
        if (v31 >> 60 == 15)
        {
          *(_OWORD *)v29 = *(_OWORD *)v30;
        }
        else
        {
          v54 = *v30;
          sub_20E66A990(*v30, v31);
          *(_QWORD *)v29 = v54;
          *((_QWORD *)v29 + 1) = v31;
        }
      }
      else
      {
        v23 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
        v24 = *(int *)(v23 + 20);
        v25 = &v9[v24];
        v26 = (uint64_t *)&v10[v24];
        v27 = v26[1];
        a3 = v58;
        if (v27 >> 60 == 15)
        {
          *(_OWORD *)v25 = *(_OWORD *)v26;
        }
        else
        {
          v51 = *v26;
          v53 = v23;
          sub_20E66A990(*v26, v27);
          v23 = v53;
          *(_QWORD *)v25 = v51;
          *((_QWORD *)v25 + 1) = v27;
        }
        v32 = *(int *)(v23 + 24);
        v33 = &v9[v32];
        v34 = (uint64_t *)&v10[v32];
        v35 = v34[1];
        if (v35 >> 60 == 15)
        {
          *(_OWORD *)v33 = *(_OWORD *)v34;
        }
        else
        {
          v55 = *v34;
          sub_20E66A990(*v34, v35);
          *(_QWORD *)v33 = v55;
          *((_QWORD *)v33 + 1) = v35;
        }
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v9, 0, 1, v56);
    }
    *(_QWORD *)&v9[v11[5]] = *(_QWORD *)&v10[v11[5]];
    v36 = v11[6];
    v37 = &v9[v36];
    v38 = &v10[v36];
    swift_bridgeObjectRetain();
    v7((uint64_t)v37, (uint64_t)v38, v6);
    v39 = v11[7];
    v40 = &v9[v39];
    v41 = &v10[v39];
    v42 = *((_QWORD *)v41 + 1);
    if (v42 >> 60 == 15)
    {
      *(_OWORD *)v40 = *(_OWORD *)v41;
    }
    else
    {
      v43 = *(_QWORD *)v41;
      sub_20E66A990(*(_QWORD *)v41, *((_QWORD *)v41 + 1));
      *(_QWORD *)v40 = v43;
      *((_QWORD *)v40 + 1) = v42;
    }
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v59 + 56))(v9, 0, 1, v11);
  }
  v44 = *(int *)(a3 + 24);
  v45 = a1 + v44;
  v46 = (uint64_t *)(a2 + v44);
  v47 = v46[1];
  if (v47 >> 60 == 15)
  {
    *(_OWORD *)v45 = *(_OWORD *)v46;
  }
  else
  {
    v48 = *v46;
    sub_20E66A990(*v46, v46[1]);
    *(_QWORD *)v45 = v48;
    *(_QWORD *)(v45 + 8) = v47;
  }
  return a1;
}

uint64_t sub_20E6DA7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v6 = sub_20E6E9DDC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 24);
  v120 = v6;
  v8(a1, a2);
  v121 = a3;
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = a2;
  v12 = (char *)(a2 + v9);
  v13 = (int *)type metadata accessor for CableRelayConnectionRequest(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  v16 = v15(v10, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    v118 = v8;
    if (v17)
    {
      sub_20E67BE08((uint64_t)v10, type metadata accessor for CableRelayConnectionRequest);
      goto LABEL_7;
    }
    v24 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
    v112 = *(_QWORD *)(v24 - 8);
    v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v112 + 48);
    v26 = v25(v10, 1, v24);
    v27 = v25(v12, 1, v24);
    v21 = v11;
    if (v26)
    {
      if (!v27)
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v120);
        v23 = v121;
        if (EnumCaseMultiPayload == 1)
        {
          v29 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
          v30 = *(int *)(v29 + 20);
          v31 = &v10[v30];
          v32 = (uint64_t *)&v12[v30];
          v33 = v32[1];
          if (v33 >> 60 == 15)
          {
            *(_OWORD *)v31 = *(_OWORD *)v32;
          }
          else
          {
            v110 = *v32;
            sub_20E66A990(*v32, v33);
            *(_QWORD *)v31 = v110;
            *((_QWORD *)v31 + 1) = v33;
          }
          v74 = *(int *)(v29 + 24);
          v75 = &v10[v74];
          v76 = &v12[v74];
          v77 = *((_QWORD *)v76 + 1);
          if (v77 >> 60 == 15)
          {
            *(_OWORD *)v75 = *(_OWORD *)v76;
LABEL_46:
            v41 = (void (*)(char *, char *, uint64_t))v118;
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v10, 0, 1, v24);
            goto LABEL_47;
          }
        }
        else
        {
          v69 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
          v70 = *(int *)(v69 + 20);
          v71 = &v10[v70];
          v72 = (uint64_t *)&v12[v70];
          v73 = v72[1];
          if (v73 >> 60 == 15)
          {
            *(_OWORD *)v71 = *(_OWORD *)v72;
          }
          else
          {
            v111 = *v72;
            sub_20E66A990(*v72, v73);
            *(_QWORD *)v71 = v111;
            *((_QWORD *)v71 + 1) = v73;
          }
          v78 = *(int *)(v69 + 24);
          v75 = &v10[v78];
          v76 = &v12[v78];
          v77 = *((_QWORD *)v76 + 1);
          if (v77 >> 60 == 15)
          {
            *(_OWORD *)v75 = *(_OWORD *)v76;
            goto LABEL_46;
          }
        }
        v79 = *(_QWORD *)v76;
        sub_20E66A990(*(_QWORD *)v76, *((_QWORD *)v76 + 1));
        *(_QWORD *)v75 = v79;
        *((_QWORD *)v75 + 1) = v77;
        goto LABEL_46;
      }
LABEL_18:
      v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
      memcpy(v10, v12, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      v23 = v121;
      v41 = (void (*)(char *, char *, uint64_t))v118;
      goto LABEL_47;
    }
    if (v27)
    {
      sub_20E67BE08((uint64_t)v10, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
      goto LABEL_18;
    }
    v23 = v121;
    v41 = (void (*)(char *, char *, uint64_t))v118;
    if (a1 == v11)
      goto LABEL_47;
    sub_20E67BE08((uint64_t)v10, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    v63 = swift_getEnumCaseMultiPayload();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v120);
    if (v63 == 1)
    {
      v64 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
      v65 = *(int *)(v64 + 20);
      v66 = &v10[v65];
      v67 = (uint64_t *)&v12[v65];
      v68 = v67[1];
      if (v68 >> 60 == 15)
      {
        *(_OWORD *)v66 = *(_OWORD *)v67;
      }
      else
      {
        v116 = *v67;
        sub_20E66A990(*v67, v68);
        *(_QWORD *)v66 = v116;
        *((_QWORD *)v66 + 1) = v68;
      }
      v102 = *(int *)(v64 + 24);
      v103 = &v10[v102];
      v104 = &v12[v102];
      v105 = *((_QWORD *)v104 + 1);
      if (v105 >> 60 == 15)
      {
        *(_OWORD *)v103 = *(_OWORD *)v104;
LABEL_71:
        v41 = (void (*)(char *, char *, uint64_t))v118;
        swift_storeEnumTagMultiPayload();
LABEL_47:
        *(_QWORD *)&v10[v13[5]] = *(_QWORD *)&v12[v13[5]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v41(&v10[v13[6]], &v12[v13[6]], v120);
        v80 = v13[7];
        v81 = (uint64_t *)&v10[v80];
        v82 = (uint64_t *)&v12[v80];
        v83 = *(_QWORD *)&v12[v80 + 8];
        if ((unint64_t)v81[1] >> 60 == 15)
        {
          if (v83 >> 60 != 15)
          {
            v84 = *v82;
            sub_20E66A990(*v82, v83);
            *v81 = v84;
            v81[1] = v83;
            goto LABEL_54;
          }
        }
        else
        {
          if (v83 >> 60 != 15)
          {
            v85 = *v82;
            sub_20E66A990(*v82, v83);
            v86 = *v81;
            v87 = v81[1];
            *v81 = v85;
            v81[1] = v83;
            sub_20E6673F4(v86, v87);
            goto LABEL_54;
          }
          sub_20E66B4E0((uint64_t)v81);
        }
        *(_OWORD *)v81 = *(_OWORD *)v82;
        goto LABEL_54;
      }
    }
    else
    {
      v97 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
      v98 = *(int *)(v97 + 20);
      v99 = &v10[v98];
      v100 = (uint64_t *)&v12[v98];
      v101 = v100[1];
      if (v101 >> 60 == 15)
      {
        *(_OWORD *)v99 = *(_OWORD *)v100;
      }
      else
      {
        v117 = *v100;
        sub_20E66A990(*v100, v101);
        *(_QWORD *)v99 = v117;
        *((_QWORD *)v99 + 1) = v101;
      }
      v106 = *(int *)(v97 + 24);
      v103 = &v10[v106];
      v104 = &v12[v106];
      v105 = *((_QWORD *)v104 + 1);
      if (v105 >> 60 == 15)
      {
        *(_OWORD *)v103 = *(_OWORD *)v104;
        goto LABEL_71;
      }
    }
    v107 = *(_QWORD *)v104;
    sub_20E66A990(*(_QWORD *)v104, *((_QWORD *)v104 + 1));
    *(_QWORD *)v103 = v107;
    *((_QWORD *)v103 + 1) = v105;
    goto LABEL_71;
  }
  if (v17)
  {
LABEL_7:
    v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E0E0);
    memcpy(v10, v12, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    v23 = v121;
    v21 = v11;
    goto LABEL_54;
  }
  v18 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  v19 = *(_QWORD *)(v18 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v12, 1, v18))
  {
    v34 = swift_getEnumCaseMultiPayload();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v120);
    v119 = v19;
    if (v34 == 1)
    {
      v35 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
      v36 = *(int *)(v35 + 20);
      v37 = &v10[v36];
      v38 = (uint64_t *)&v12[v36];
      v39 = v38[1];
      if (v39 >> 60 == 15)
      {
        *(_OWORD *)v37 = *(_OWORD *)v38;
      }
      else
      {
        v108 = *v38;
        v113 = v35;
        v47 = (uint64_t *)v37;
        sub_20E66A990(*v38, v39);
        v35 = v113;
        *v47 = v108;
        v47[1] = v39;
      }
      v21 = v11;
      v48 = *(int *)(v35 + 24);
      v49 = &v10[v48];
      v50 = (uint64_t *)&v12[v48];
      v51 = v50[1];
      if (v51 >> 60 == 15)
      {
        *(_OWORD *)v49 = *(_OWORD *)v50;
LABEL_28:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v10, 0, 1, v18);
        goto LABEL_29;
      }
    }
    else
    {
      v42 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
      v43 = *(int *)(v42 + 20);
      v44 = &v10[v43];
      v45 = (uint64_t *)&v12[v43];
      v46 = v45[1];
      if (v46 >> 60 == 15)
      {
        *(_OWORD *)v44 = *(_OWORD *)v45;
      }
      else
      {
        v109 = *v45;
        v114 = v42;
        v52 = (uint64_t *)v44;
        sub_20E66A990(*v45, v46);
        v42 = v114;
        *v52 = v109;
        v52[1] = v46;
      }
      v21 = v11;
      v53 = *(int *)(v42 + 24);
      v49 = &v10[v53];
      v50 = (uint64_t *)&v12[v53];
      v51 = v50[1];
      if (v51 >> 60 == 15)
      {
        *(_OWORD *)v49 = *(_OWORD *)v50;
        goto LABEL_28;
      }
    }
    v115 = *v50;
    sub_20E66A990(*v50, v51);
    *(_QWORD *)v49 = v115;
    *((_QWORD *)v49 + 1) = v51;
    goto LABEL_28;
  }
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
  memcpy(v10, v12, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  v21 = v11;
LABEL_29:
  *(_QWORD *)&v10[v13[5]] = *(_QWORD *)&v12[v13[5]];
  v54 = v13[6];
  v55 = &v10[v54];
  v56 = &v12[v54];
  v57 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain();
  v57(v55, v56, v120);
  v58 = v13[7];
  v59 = &v10[v58];
  v60 = &v12[v58];
  v61 = *((_QWORD *)v60 + 1);
  if (v61 >> 60 == 15)
  {
    *(_OWORD *)v59 = *(_OWORD *)v60;
  }
  else
  {
    v62 = *(_QWORD *)v60;
    sub_20E66A990(*(_QWORD *)v60, *((_QWORD *)v60 + 1));
    *(_QWORD *)v59 = v62;
    *((_QWORD *)v59 + 1) = v61;
  }
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56))(v10, 0, 1, v13);
  v23 = v121;
LABEL_54:
  v88 = *(int *)(v23 + 24);
  v89 = (uint64_t *)(a1 + v88);
  v90 = (uint64_t *)(v21 + v88);
  v91 = *(_QWORD *)(v21 + v88 + 8);
  if (*(_QWORD *)(a1 + v88 + 8) >> 60 != 15)
  {
    if (v91 >> 60 != 15)
    {
      v93 = *v90;
      sub_20E66A990(v93, v91);
      v94 = *v89;
      v95 = v89[1];
      *v89 = v93;
      v89[1] = v91;
      sub_20E6673F4(v94, v95);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v89);
    goto LABEL_59;
  }
  if (v91 >> 60 == 15)
  {
LABEL_59:
    *(_OWORD *)v89 = *(_OWORD *)v90;
    return a1;
  }
  v92 = *v90;
  sub_20E66A990(v92, v91);
  *v89 = v92;
  v89[1] = v91;
  return a1;
}

uint64_t sub_20E6DAFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_20E6E9DDC();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = (int *)type metadata accessor for CableRelayConnectionRequest(0);
  v12 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E0E0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v22 = a3;
    v14 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      a3 = v22;
    }
    else
    {
      v21 = v15;
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v7((uint64_t)v9, (uint64_t)v10, v6);
      v18 = EnumCaseMultiPayload == 1;
      a3 = v22;
      if (v18)
        v19 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
      else
        v19 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
      *(_OWORD *)&v9[*(int *)(v19 + 20)] = *(_OWORD *)&v10[*(int *)(v19 + 20)];
      *(_OWORD *)&v9[*(int *)(v19 + 24)] = *(_OWORD *)&v10[*(int *)(v19 + 24)];
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v9, 0, 1, v14);
    }
    *(_QWORD *)&v9[v11[5]] = *(_QWORD *)&v10[v11[5]];
    v7((uint64_t)&v9[v11[6]], (uint64_t)&v10[v11[6]], v6);
    *(_OWORD *)&v9[v11[7]] = *(_OWORD *)&v10[v11[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_20E6DB1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, int *);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int EnumCaseMultiPayload;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v6 = sub_20E6E9DDC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 40);
  v52 = v6;
  v8(a1, a2);
  v53 = a3;
  v9 = *(int *)(a3 + 20);
  v10 = (char *)(a1 + v9);
  v11 = a2;
  v12 = (char *)(a2 + v9);
  v13 = (int *)type metadata accessor for CableRelayConnectionRequest(0);
  v14 = *((_QWORD *)v13 - 1);
  v15 = *(uint64_t (**)(char *, uint64_t, int *))(v14 + 48);
  v16 = v15(v10, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      v18 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v12, 1, v18))
      {
        v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
        memcpy(v10, v12, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
        v21 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
        v22 = v11;
      }
      else
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        v21 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
        v21(v10, v12, v52);
        if (EnumCaseMultiPayload == 1)
          v33 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
        else
          v33 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
        v22 = v11;
        *(_OWORD *)&v10[*(int *)(v33 + 20)] = *(_OWORD *)&v12[*(int *)(v33 + 20)];
        *(_OWORD *)&v10[*(int *)(v33 + 24)] = *(_OWORD *)&v12[*(int *)(v33 + 24)];
        swift_storeEnumTagMultiPayload();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v10, 0, 1, v18);
      }
      *(_QWORD *)&v10[v13[5]] = *(_QWORD *)&v12[v13[5]];
      v21(&v10[v13[6]], &v12[v13[6]], v52);
      *(_OWORD *)&v10[v13[7]] = *(_OWORD *)&v12[v13[7]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v14 + 56))(v10, 0, 1, v13);
      goto LABEL_31;
    }
LABEL_7:
    v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E0E0);
    memcpy(v10, v12, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    v24 = v53;
    v22 = v11;
    goto LABEL_32;
  }
  if (v17)
  {
    sub_20E67BE08((uint64_t)v10, type metadata accessor for CableRelayConnectionRequest);
    goto LABEL_7;
  }
  v25 = (void (*)(char *, char *, uint64_t))v8;
  v26 = type metadata accessor for CableRelayConnectionRequest.OneOf_Message(0);
  v50 = *(_QWORD *)(v26 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  v28 = v27(v10, 1, v26);
  v51 = v26;
  v29 = v27(v12, 1, v26);
  v22 = v11;
  if (v28)
  {
    if (!v29)
    {
      v30 = swift_getEnumCaseMultiPayload();
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v52);
      if (v30 == 1)
        v31 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
      else
        v31 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
      *(_OWORD *)&v10[*(int *)(v31 + 20)] = *(_OWORD *)&v12[*(int *)(v31 + 20)];
      *(_OWORD *)&v10[*(int *)(v31 + 24)] = *(_OWORD *)&v12[*(int *)(v31 + 24)];
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v10, 0, 1, v51);
      goto LABEL_26;
    }
LABEL_16:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5F0);
    memcpy(v10, v12, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_26;
  }
  if (v29)
  {
    sub_20E67BE08((uint64_t)v10, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    goto LABEL_16;
  }
  if (a1 != v11)
  {
    sub_20E67BE08((uint64_t)v10, type metadata accessor for CableRelayConnectionRequest.OneOf_Message);
    v35 = swift_getEnumCaseMultiPayload();
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v52);
    if (v35 == 1)
      v36 = type metadata accessor for CableRelayConnectionRequest.StateAssisted(0);
    else
      v36 = type metadata accessor for CableRelayConnectionRequest.QRAssisted(0);
    *(_OWORD *)&v10[*(int *)(v36 + 20)] = *(_OWORD *)&v12[*(int *)(v36 + 20)];
    *(_OWORD *)&v10[*(int *)(v36 + 24)] = *(_OWORD *)&v12[*(int *)(v36 + 24)];
    swift_storeEnumTagMultiPayload();
  }
LABEL_26:
  *(_QWORD *)&v10[v13[5]] = *(_QWORD *)&v12[v13[5]];
  swift_bridgeObjectRelease();
  v25(&v10[v13[6]], &v12[v13[6]], v52);
  v37 = v13[7];
  v38 = (uint64_t *)&v10[v37];
  v39 = (uint64_t *)&v12[v37];
  v40 = v38[1];
  if (v40 >> 60 != 15)
  {
    v41 = v39[1];
    if (v41 >> 60 != 15)
    {
      v42 = *v38;
      *v38 = *v39;
      v38[1] = v41;
      sub_20E6673F4(v42, v40);
      goto LABEL_31;
    }
    sub_20E66B4E0((uint64_t)v38);
  }
  *(_OWORD *)v38 = *(_OWORD *)v39;
LABEL_31:
  v24 = v53;
LABEL_32:
  v43 = *(int *)(v24 + 24);
  v44 = (uint64_t *)(a1 + v43);
  v45 = (uint64_t *)(v22 + v43);
  v46 = *(_QWORD *)(a1 + v43 + 8);
  if (v46 >> 60 != 15)
  {
    v47 = v45[1];
    if (v47 >> 60 != 15)
    {
      v48 = *v44;
      *v44 = *v45;
      v44[1] = v47;
      sub_20E6673F4(v48, v46);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v44);
  }
  *(_OWORD *)v44 = *(_OWORD *)v45;
  return a1;
}

uint64_t sub_20E6DB6A0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6DB6AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;

  v6 = sub_20E6E9DDC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E0E0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
  v15 = ((4 * (_DWORD)v14) & 0xC) == 0;
  v16 = ((4 * v14) & 0xC | (v14 >> 2)) ^ 0xF;
  if (v15)
    return 0;
  else
    return v16;
}

uint64_t sub_20E6DB764()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6DB770(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;

  v8 = sub_20E6E9DDC();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2E0E0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v15 = (_QWORD *)(a1 + *(int *)(a4 + 24));
  *v15 = 0;
  v15[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

void sub_20E6DB828()
{
  unint64_t v0;
  unint64_t v1;

  sub_20E6E9DDC();
  if (v0 <= 0x3F)
  {
    sub_20E695C74(319, &qword_254A2F730, (void (*)(uint64_t))type metadata accessor for CableRelayConnectionRequest);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *sub_20E6DB8C4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_20E6E9DDC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      sub_20E66A990(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    v18 = (char *)a1 + v15;
    v19 = (uint64_t *)((char *)a2 + v15);
    v20 = *(uint64_t *)((char *)a2 + v15 + 8);
    if (v20 >> 60 == 15)
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
    }
    else
    {
      v21 = *v19;
      sub_20E66A990(*v19, v20);
      *(_QWORD *)v18 = v21;
      *((_QWORD *)v18 + 1) = v20;
    }
  }
  return a1;
}

uint64_t sub_20E6DB9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;

  v4 = sub_20E6E9DDC();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    result = sub_20E6673F4(*v6, v7);
  v8 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  v9 = v8[1];
  if (v9 >> 60 != 15)
    return sub_20E6673F4(*v8, v9);
  return result;
}

uint64_t sub_20E6DBA5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_20E66A990(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  *(_BYTE *)(v14 + 4) = *(_BYTE *)(v15 + 4);
  v16 = a1 + v13;
  v17 = (uint64_t *)(a2 + v13);
  v18 = *(_QWORD *)(a2 + v13 + 8);
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)v16 = *(_OWORD *)v17;
  }
  else
  {
    v19 = *v17;
    sub_20E66A990(*v17, v18);
    *(_QWORD *)v16 = v19;
    *(_QWORD *)(v16 + 8) = v18;
  }
  return a1;
}

uint64_t sub_20E6DBB44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      v11 = *v9;
      sub_20E66A990(v11, v10);
      *v8 = v11;
      v8[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
    sub_20E66B4E0((uint64_t)v8);
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v12 = *v9;
  sub_20E66A990(v12, v10);
  v13 = *v8;
  v14 = v8[1];
  *v8 = v12;
  v8[1] = v10;
  sub_20E6673F4(v13, v14);
LABEL_8:
  v15 = a3[6];
  v16 = a1 + v15;
  v17 = (int *)(a2 + v15);
  v18 = *v17;
  *(_BYTE *)(v16 + 4) = *((_BYTE *)v17 + 4);
  *(_DWORD *)v16 = v18;
  v19 = a3[7];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = *(_QWORD *)(a2 + v19 + 8);
  if (*(_QWORD *)(a1 + v19 + 8) >> 60 != 15)
  {
    if (v22 >> 60 != 15)
    {
      v24 = *v21;
      sub_20E66A990(v24, v22);
      v25 = *v20;
      v26 = v20[1];
      *v20 = v24;
      v20[1] = v22;
      sub_20E6673F4(v25, v26);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v20);
    goto LABEL_13;
  }
  if (v22 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)v20 = *(_OWORD *)v21;
    return a1;
  }
  v23 = *v21;
  sub_20E66A990(v23, v22);
  *v20 = v23;
  v20[1] = v22;
  return a1;
}

uint64_t sub_20E6DBCB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_20E6DBD38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v6 = sub_20E6E9DDC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 == 15)
    goto LABEL_4;
  v11 = *(_QWORD *)(v9 + 8);
  if (v11 >> 60 == 15)
  {
    sub_20E66B4E0(v8);
LABEL_4:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  v12 = *(_QWORD *)v8;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v11;
  sub_20E6673F4(v12, v10);
LABEL_6:
  v13 = a3[6];
  v14 = a3[7];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = (uint64_t *)(a1 + v14);
  v18 = (uint64_t *)(a2 + v14);
  v19 = *(_QWORD *)(a1 + v14 + 8);
  if (v19 >> 60 != 15)
  {
    v20 = v18[1];
    if (v20 >> 60 != 15)
    {
      v21 = *v17;
      *v17 = *v18;
      v17[1] = v20;
      sub_20E6673F4(v21, v19);
      return a1;
    }
    sub_20E66B4E0((uint64_t)v17);
  }
  *(_OWORD *)v17 = *(_OWORD *)v18;
  return a1;
}

uint64_t sub_20E6DBE48()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_3Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;

  v6 = sub_20E6E9DDC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  v10 = ((4 * (_DWORD)v9) & 0xC) == 0;
  v11 = ((4 * v9) & 0xC | (v9 >> 2)) ^ 0xF;
  if (v10)
    return 0;
  else
    return v11;
}

uint64_t sub_20E6DBEE0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_4Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = sub_20E6E9DDC();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v10 = 0;
  v10[1] = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  return result;
}

uint64_t sub_20E6DBF78()
{
  uint64_t result;
  unint64_t v1;

  result = sub_20E6E9DDC();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_20E6DBFF8()
{
  unint64_t result;

  result = qword_254A2F748;
  if (!qword_254A2F748)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4328, &type metadata for CableResponse.ResponseStatus);
    atomic_store(result, (unint64_t *)&qword_254A2F748);
  }
  return result;
}

unint64_t sub_20E6DC040()
{
  unint64_t result;

  result = qword_254A2F750;
  if (!qword_254A2F750)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F43C8, &type metadata for RelayRequestResponseStatus);
    atomic_store(result, (unint64_t *)&qword_254A2F750);
  }
  return result;
}

unint64_t sub_20E6DC088()
{
  unint64_t result;

  result = qword_254A2F758;
  if (!qword_254A2F758)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4388, &type metadata for RelayRequestResponseStatus);
    atomic_store(result, (unint64_t *)&qword_254A2F758);
  }
  return result;
}

unint64_t sub_20E6DC0D0()
{
  unint64_t result;

  result = qword_254A2F760;
  if (!qword_254A2F760)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4350, &type metadata for RelayRequestResponseStatus);
    atomic_store(result, (unint64_t *)&qword_254A2F760);
  }
  return result;
}

unint64_t sub_20E6DC118()
{
  unint64_t result;

  result = qword_254A2F768;
  if (!qword_254A2F768)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F42E8, &type metadata for CableResponse.ResponseStatus);
    atomic_store(result, (unint64_t *)&qword_254A2F768);
  }
  return result;
}

unint64_t sub_20E6DC160()
{
  unint64_t result;

  result = qword_254A2F770;
  if (!qword_254A2F770)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F42B0, &type metadata for CableResponse.ResponseStatus);
    atomic_store(result, (unint64_t *)&qword_254A2F770);
  }
  return result;
}

unint64_t sub_20E6DC1A4(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

id ASCRelatedOriginFetcher.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t sub_20E6DC1EC()
{
  return 0x736E696769726FLL;
}

uint64_t sub_20E6DC204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x736E696769726FLL && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20E6EA8EC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20E6DC298()
{
  sub_20E6DD55C();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6DC2C0()
{
  sub_20E6DD55C();
  return sub_20E6EA9DC();
}

_QWORD *sub_20E6DC2E8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_20E6DD430(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_20E6DC310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = sub_20E6E9950();
  v5[8] = v6;
  v5[9] = *(_QWORD *)(v6 - 8);
  v5[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  v5[11] = swift_task_alloc();
  v7 = sub_20E6E9BC0();
  v5[12] = v7;
  v5[13] = *(_QWORD *)(v7 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v8 = sub_20E6E9A04();
  v5[16] = v8;
  v5[17] = *(_QWORD *)(v8 - 8);
  v5[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_20E6DC3FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  _QWORD *v20;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  sub_20E6E99F8();
  sub_20E6E99EC();
  swift_bridgeObjectRetain();
  sub_20E6E99D4();
  sub_20E6E99E0();
  sub_20E6E99C8();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_20E66DEC4(*(_QWORD *)(v0 + 88));
    if (qword_254A2DBE8 != -1)
      swift_once();
    v4 = sub_20E6E9F50();
    __swift_project_value_buffer(v4, (uint64_t)qword_254A3ED50);
    v5 = sub_20E6E9F38();
    v6 = sub_20E6EA3E8();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_20E648000, v5, v6, "Failed to create /.well-known/webauthn URL", v7, 2u);
      MEMORY[0x212BC3A38](v7, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 128);

    sub_20E6EA1CC();
    v11 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v12 = (void *)sub_20E6EA1C0();
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, 1, 0);

    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 112);
    v14 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 32))(v14, *(_QWORD *)(v0 + 88), v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v14, v16);
    sub_20E6E992C();
    sub_20E6E9944();
    v19 = objc_msgSend((id)objc_opt_self(), sel_defaultSessionConfiguration);
    *(_QWORD *)(v0 + 152) = v19;
    *(_QWORD *)(v0 + 160) = objc_msgSend((id)objc_opt_self(), sel_sessionWithConfiguration_delegate_delegateQueue_, v19, v18, 0);
    v20 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v20;
    *v20 = v0;
    v20[1] = sub_20E6DC764;
    return sub_20E6EA3C4();
  }
}

uint64_t sub_20E6DC764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[22] = a1;
  v5[23] = a2;
  v5[24] = a3;
  v5[25] = v3;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20E6DC7D4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 200);
  sub_20E6E9974();
  swift_allocObject();
  sub_20E6E9968();
  sub_20E6DCFC4();
  sub_20E6E995C();
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 184);
    v3 = *(_QWORD *)(v0 + 176);
    v4 = *(void **)(v0 + 152);
    v31 = *(_QWORD *)(v0 + 136);
    v33 = *(_QWORD *)(v0 + 128);
    v34 = *(_QWORD *)(v0 + 144);
    v29 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(v0 + 104);
    v26 = *(void **)(v0 + 192);
    v27 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 72);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 64);

    swift_release();
    sub_20E6673F4(v3, v2);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v29, v27);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v34, v33);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
    v10 = 0;
  }
  else
  {
    swift_release();
    v11 = *(_QWORD *)(v0 + 16);
    v12 = objc_allocWithZone(MEMORY[0x24BDBCF48]);
    swift_bridgeObjectRetain();
    v13 = (void *)sub_20E6EA1C0();
    swift_bridgeObjectRelease();
    v14 = objc_msgSend(v12, sel_initWithString_, v13);

    v15 = *(void **)(v0 + 160);
    if (v14)
    {
      v28 = sub_20E6DD008(v14, v11);

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();

      v28 = 0;
    }
    v16 = *(void **)(v0 + 192);
    v17 = *(_QWORD *)(v0 + 144);
    v18 = *(void **)(v0 + 152);
    v19 = *(_QWORD *)(v0 + 120);
    v30 = *(_QWORD *)(v0 + 136);
    v32 = *(_QWORD *)(v0 + 128);
    v20 = *(_QWORD *)(v0 + 104);
    v21 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 72);
    v23 = *(_QWORD *)(v0 + 80);
    v24 = *(_QWORD *)(v0 + 64);
    sub_20E6673F4(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v17, v32);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
    v10 = v28 & 1;
  }
  return v9(v10);
}

uint64_t sub_20E6DCA6C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(void **)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 72);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 64);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v11, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_20E6DCC78(int a1, int a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v6 = sub_20E6EA1CC();
  v8 = v7;
  v4[4] = v7;
  v9 = sub_20E6EA1CC();
  v11 = v10;
  v4[5] = v10;
  a4;
  v12 = (_QWORD *)swift_task_alloc();
  v4[6] = v12;
  *v12 = v4;
  v12[1] = sub_20E6DCD2C;
  return sub_20E6DC310(v6, v8, v9, v11);
}

uint64_t sub_20E6DCD2C(char a1)
{
  void *v1;
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(void **)(*v2 + 16);
  v5 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v5 + 24);
  if (v1)
  {
    v7 = (void *)sub_20E6E9B3C();

    (*(void (**)(uint64_t, _QWORD, void *))(v6 + 16))(v6, 0, v7);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v6 + 16))(*(_QWORD *)(v5 + 24), a1 & 1, 0);
  }
  _Block_release(*(const void **)(v5 + 24));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_20E6DCDF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_20E6EA988();
    sub_20E6EA250();
    v6 = sub_20E6EA9A0();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_20E6EA8EC() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_20E6EA8EC() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

id ASCRelatedOriginFetcher.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASCRelatedOriginFetcher();
  return objc_msgSendSuper2(&v2, sel_init);
}

id ASCRelatedOriginFetcher.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASCRelatedOriginFetcher();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_20E6DCFC4()
{
  unint64_t result;

  result = qword_254A2F790;
  if (!qword_254A2F790)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4568, &type metadata for ASCRelatedOriginFetcher.WebAuthnOrigins);
    atomic_store(result, (unint64_t *)&qword_254A2F790);
  }
  return result;
}

uint64_t sub_20E6DD008(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *v26;
  unsigned int v27;
  _QWORD v29[2];
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33[2];
  uint64_t v34;

  v30 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1D0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_20E6E9BC0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BEE4B08];
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    v29[1] = a2;
    v11 = a2 + 40;
    v12 = &selRef_setUserName_;
    while (1)
    {
      swift_bridgeObjectRetain();
      sub_20E6E9BB4();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      {
        sub_20E66DEC4((uint64_t)v5);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
        sub_20E6E9B84();
        if (!v13)
          goto LABEL_12;
        v14 = (void *)sub_20E6EA1C0();
        swift_bridgeObjectRelease();
        v15 = objc_msgSend(v14, v12[106]);

        if (!v15)
          goto LABEL_12;
        v16 = sub_20E6EA1CC();
        v18 = v17;

        v33[0] = v16;
        v33[1] = v18;
        v31 = 46;
        v32 = 0xE100000000000000;
        sub_20E67B988();
        v19 = sub_20E6EA4D8();
        swift_bridgeObjectRelease();
        v20 = *(_QWORD *)(v19 + 16);
        if (!v20)
        {
          swift_bridgeObjectRelease();
LABEL_12:
          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          goto LABEL_4;
        }
        v21 = v19 + 16 * v20;
        v23 = *(_QWORD *)(v21 + 16);
        v22 = *(_QWORD *)(v21 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v24 = v34;
        swift_bridgeObjectRetain();
        v25 = sub_20E6DCDF4(v23, v22, v24);
        swift_bridgeObjectRelease();
        if ((v25 & 1) != 0)
          goto LABEL_16;
        if (*(_QWORD *)(v24 + 16) != 5)
        {
          sub_20E6C2804(v33, v23, v22);
LABEL_16:
          swift_bridgeObjectRelease();
          v12 = &selRef_setUserName_;
          v26 = (void *)sub_20E6E9B60();
          v27 = objc_msgSend(v30, sel_safari_hasSameOriginAsURL_, v26);

          (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
          if (v27)
          {
            swift_bridgeObjectRelease();
            v10 = 1;
            break;
          }
          goto LABEL_4;
        }
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        swift_bridgeObjectRelease();
        v12 = &selRef_setUserName_;
      }
LABEL_4:
      v11 += 16;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t type metadata accessor for ASCRelatedOriginFetcher()
{
  return objc_opt_self();
}

uint64_t method lookup function for ASCRelatedOriginFetcher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ASCRelatedOriginFetcher.isOrigin(_:relatedToRelyingPartyIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  int *v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);

  v10 = *(int **)((*MEMORY[0x24BEE4EA0] & *v4) + 0x50);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_20E6DD3D0;
  return v13(a1, a2, a3, a4);
}

uint64_t sub_20E6DD3D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

ValueMetadata *type metadata accessor for ASCRelatedOriginFetcher.WebAuthnOrigins()
{
  return &type metadata for ASCRelatedOriginFetcher.WebAuthnOrigins;
}

_QWORD *sub_20E6DD430(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F7A8);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6DD55C();
  sub_20E6EA9AC();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
    sub_20E6DD5A0();
    sub_20E6EA7FC();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v7 = (_QWORD *)v9[1];
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_20E6DD55C()
{
  unint64_t result;

  result = qword_254A2F7B0;
  if (!qword_254A2F7B0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4654, &type metadata for ASCRelatedOriginFetcher.WebAuthnOrigins.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F7B0);
  }
  return result;
}

unint64_t sub_20E6DD5A0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_254A2F7C0;
  if (!qword_254A2F7C0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_254A2EE80);
    v2 = MEMORY[0x24BEE0D38];
    result = MEMORY[0x212BC39A8](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_254A2F7C0);
  }
  return result;
}

uint64_t sub_20E6DD5FC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_20E6DD638()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = v0[2];
  v3 = v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_20E69B198;
  return ((uint64_t (*)(int, int, void *, void *))((char *)&dword_254A2F7D0 + dword_254A2F7D0))(v2, v3, v5, v4);
}

uint64_t storeEnumTagSinglePayload for ASCRelatedOriginFetcher.WebAuthnOrigins.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20E6DD6F8 + 4 * byte_20E6F4500[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20E6DD718 + 4 * byte_20E6F4505[v4]))();
}

_BYTE *sub_20E6DD6F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20E6DD718(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E6DD720(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E6DD728(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E6DD730(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E6DD738(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ASCRelatedOriginFetcher.WebAuthnOrigins.CodingKeys()
{
  return &type metadata for ASCRelatedOriginFetcher.WebAuthnOrigins.CodingKeys;
}

unint64_t sub_20E6DD758()
{
  unint64_t result;

  result = qword_254A2F7E8;
  if (!qword_254A2F7E8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F462C, &type metadata for ASCRelatedOriginFetcher.WebAuthnOrigins.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F7E8);
  }
  return result;
}

unint64_t sub_20E6DD7A0()
{
  unint64_t result;

  result = qword_254A2F7F0;
  if (!qword_254A2F7F0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F459C, &type metadata for ASCRelatedOriginFetcher.WebAuthnOrigins.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F7F0);
  }
  return result;
}

unint64_t sub_20E6DD7E8()
{
  unint64_t result;

  result = qword_254A2F7F8;
  if (!qword_254A2F7F8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F45C4, &type metadata for ASCRelatedOriginFetcher.WebAuthnOrigins.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F7F8);
  }
  return result;
}

uint64_t sub_20E6DD82C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t countAndFlagsBits;
  void *v5;

  if ((a3 & 0x100000000) != 0)
  {
    countAndFlagsBits = a1;
    swift_bridgeObjectRetain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1A0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_getErrorValue();
      countAndFlagsBits = Error.loggerDescription()()._countAndFlagsBits;

    }
    else
    {
      sub_20E6EA6B8();
      return 0;
    }
  }
  return countAndFlagsBits;
}

uint64_t sub_20E6DD910@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t result;
  __int128 v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = sub_20E6EA1FC();
  v34 = *(_QWORD *)(v8 - 8);
  v35 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v31 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_20E6E9D10();
  v32 = *(_QWORD *)(v10 - 8);
  v33 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CableRequest.AllocationRequest(0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v30 - v17;
  sub_20E6E9DD0();
  v19 = &v18[*(int *)(v13 + 20)];
  v30 = xmmword_20E6EE5B0;
  *(_OWORD *)v19 = xmmword_20E6EE5B0;
  v20 = *(int *)(v13 + 24);
  *(_QWORD *)v19 = a1;
  *((_QWORD *)v19 + 1) = a2;
  v18[v20] = a3;
  v21 = type metadata accessor for CableRequest.OneOf_Request(0);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v22(a4, 1, 1, v21);
  v23 = type metadata accessor for CableRequest(0);
  sub_20E66A990(a1, a2);
  sub_20E6E9DD0();
  v24 = a4 + *(int *)(v23 + 24);
  *(_OWORD *)v24 = v30;
  sub_20E67BDC4((uint64_t)v18, (uint64_t)v16, type metadata accessor for CableRequest.AllocationRequest);
  sub_20E67BD44(a4, &qword_254A2E170);
  sub_20E67BD80((uint64_t)v16, a4, type metadata accessor for CableRequest.AllocationRequest);
  swift_storeEnumTagMultiPayload();
  v22(a4, 0, 1, v21);
  sub_20E6E9D04();
  sub_20E6E9CF8();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v33);
  v25 = v31;
  sub_20E6EA1F0();
  v26 = sub_20E6EA1D8();
  v28 = v27;
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v25, v35);
  if (v28 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    sub_20E66AA28(*(_QWORD *)v24, *(_QWORD *)(v24 + 8));
    *(_QWORD *)v24 = v26;
    *(_QWORD *)(v24 + 8) = v28;
    return sub_20E67BE08((uint64_t)v18, type metadata accessor for CableRequest.AllocationRequest);
  }
  return result;
}

uint64_t sub_20E6DDBA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for CableResponse.AllocationResponse(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v19 - v12;
  sub_20E6DE460(v2, (uint64_t)&v19 - v12);
  v14 = type metadata accessor for CableResponse.OneOf_Response(0);
  v15 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14) != 1)
  {
    sub_20E6DE460((uint64_t)v13, (uint64_t)v11);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v16 = type metadata accessor for CableResponse.OneOf_Response;
      v17 = (uint64_t)v11;
LABEL_7:
      sub_20E67BE08(v17, v16);
      goto LABEL_8;
    }
    sub_20E67BD80((uint64_t)v11, (uint64_t)v7, type metadata accessor for CableResponse.AllocationResponse);
    if ((sub_20E6DDD48() & 1) == 0)
    {
      v16 = type metadata accessor for CableResponse.AllocationResponse;
      v17 = (uint64_t)v7;
      goto LABEL_7;
    }
    sub_20E67BD80((uint64_t)v7, a1, type metadata accessor for CableResponse.AllocationResponse);
    v15 = 0;
  }
LABEL_8:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, v15, 1, v4);
  return sub_20E67BD44((uint64_t)v13, &qword_254A2F5B0);
}

uint64_t sub_20E6DDD48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v1 = type metadata accessor for CableResponse.AllocationResponse(0);
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = (char *)&v23 - v6;
  if (*(_QWORD *)(v0 + *(int *)(v5 + 20) + 8) >> 60 == 15)
  {
    if (qword_254A2DBE8 != -1)
      swift_once();
    v8 = sub_20E6E9F50();
    __swift_project_value_buffer(v8, (uint64_t)qword_254A3ED50);
    sub_20E67BDC4(v0, (uint64_t)v4, type metadata accessor for CableResponse.AllocationResponse);
    v9 = sub_20E6E9F38();
    v10 = sub_20E6EA3E8();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v24 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = sub_20E6DE0EC();
      v23 = sub_20E66A2F8(v13, v14, &v24);
      sub_20E6EA4C0();
      swift_bridgeObjectRelease();
      sub_20E67BE08((uint64_t)v4, type metadata accessor for CableResponse.AllocationResponse);
      _os_log_impl(&dword_20E648000, v9, v10, "Allocation response is missing routingID: %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x212BC3A38](v12, -1, -1);
      MEMORY[0x212BC3A38](v11, -1, -1);
    }
    else
    {
      sub_20E67BE08((uint64_t)v4, type metadata accessor for CableResponse.AllocationResponse);
    }

  }
  else
  {
    if (*(_BYTE *)(v0 + *(int *)(v5 + 24) + 4) != 1)
      return 1;
    if (qword_254A2DBE8 != -1)
      swift_once();
    v15 = sub_20E6E9F50();
    __swift_project_value_buffer(v15, (uint64_t)qword_254A3ED50);
    sub_20E67BDC4(v0, (uint64_t)v7, type metadata accessor for CableResponse.AllocationResponse);
    v16 = sub_20E6E9F38();
    v17 = sub_20E6EA3E8();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v24 = v19;
      *(_DWORD *)v18 = 136315138;
      v20 = sub_20E6DE0EC();
      v23 = sub_20E66A2F8(v20, v21, &v24);
      sub_20E6EA4C0();
      swift_bridgeObjectRelease();
      sub_20E67BE08((uint64_t)v7, type metadata accessor for CableResponse.AllocationResponse);
      _os_log_impl(&dword_20E648000, v16, v17, "Allocation response is missing domain: %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x212BC3A38](v19, -1, -1);
      MEMORY[0x212BC3A38](v18, -1, -1);
    }
    else
    {
      sub_20E67BE08((uint64_t)v7, type metadata accessor for CableResponse.AllocationResponse);
    }

  }
  return 0;
}

uint64_t sub_20E6DE0EC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  void *v12;

  v1 = (int *)type metadata accessor for CableResponse.AllocationResponse(0);
  v2 = v1[6];
  v3 = (uint64_t *)(v0 + v1[5]);
  v5 = *v3;
  v4 = v3[1];
  v6 = *(unsigned int *)(v0 + v2);
  v7 = *(_BYTE *)(v0 + v2 + 4);
  v8 = (uint64_t *)(v0 + v1[7]);
  v9 = *v8;
  v10 = v8[1];
  sub_20E66A9D4(v5, v4);
  sub_20E66A9D4(v9, v10);
  sub_20E6EA610();
  sub_20E6EA280();
  if (v4 >> 60 != 15)
  {
    sub_20E66A990(v5, v4);
    sub_20E66A990(v5, v4);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1A0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_getErrorValue();
      Error.loggerDescription()();

    }
    else
    {
      v12 = 0;
      sub_20E6EA6B8();
    }
    sub_20E66AA28(v5, v4);
    sub_20E6673F4(v5, v4);
  }
  sub_20E6EA280();
  swift_bridgeObjectRelease();
  sub_20E6EA280();
  sub_20E6DD82C(0x3E6C696E3CLL, 0xE500000000000000, v6 | ((unint64_t)v7 << 32));
  sub_20E6EA280();
  swift_bridgeObjectRelease();
  sub_20E6EA280();
  if (v10 >> 60 != 15)
  {
    sub_20E66A990(v9, v10);
    sub_20E66A990(v9, v10);
    __swift_instantiateConcreteTypeFromMangledName(&qword_253E8D1A0);
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_getErrorValue();
      Error.loggerDescription()();

    }
    else
    {
      sub_20E6EA6B8();
    }
    sub_20E66AA28(v9, v10);
    sub_20E6673F4(v9, v10);
  }
  sub_20E6EA280();
  swift_bridgeObjectRelease();
  sub_20E6EA280();
  sub_20E66AA28(v9, v10);
  sub_20E66AA28(v5, v4);
  return 0;
}

uint64_t sub_20E6DE460(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F5B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL static CodingUserInfoKey.CBOREncodingFormat.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t CodingUserInfoKey.CBOREncodingFormat.hash(into:)()
{
  return sub_20E6EA994();
}

uint64_t CodingUserInfoKey.CBOREncodingFormat.hashValue.getter()
{
  sub_20E6EA988();
  sub_20E6EA994();
  return sub_20E6EA9A0();
}

uint64_t sub_20E6DE52C()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F820);
  MEMORY[0x24BDAC7A8]();
  v1 = (char *)&v6 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_20E6EA6D0();
  __swift_allocate_value_buffer(v2, qword_254A2F800);
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_254A2F800);
  sub_20E6EA6C4();
  v4 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v1, 1, v2);
  if ((_DWORD)result != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(v3, v1, v2);
  __break(1u);
  return result;
}

uint64_t static CodingUserInfoKey.as_CBOREncodingFormat.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_254A2DC68 != -1)
    swift_once();
  v2 = sub_20E6EA6D0();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_254A2F800);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

unint64_t sub_20E6DE680()
{
  unint64_t result;

  result = qword_254A2F818;
  if (!qword_254A2F818)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for CodingUserInfoKey.CBOREncodingFormat, &type metadata for CodingUserInfoKey.CBOREncodingFormat);
    atomic_store(result, (unint64_t *)&qword_254A2F818);
  }
  return result;
}

uint64_t _s18CBOREncodingFormatOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20E6DE710 + 4 * byte_20E6F46D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20E6DE744 + 4 * byte_20E6F46D0[v4]))();
}

uint64_t sub_20E6DE744(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6DE74C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6DE754);
  return result;
}

uint64_t sub_20E6DE760(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6DE768);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20E6DE76C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6DE774(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CodingUserInfoKey.CBOREncodingFormat()
{
  return &type metadata for CodingUserInfoKey.CBOREncodingFormat;
}

Swift::String __swiftcall Data.hexString()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String result;

  sub_20E6DE828(v0, v1);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
  sub_20E67BC78((unint64_t *)&qword_254A2E110, (uint64_t *)&unk_254A2EE80, MEMORY[0x24BEE12B0]);
  v2 = sub_20E6EA184();
  v4 = v3;
  swift_bridgeObjectRelease();
  v5 = v2;
  v6 = v4;
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

void sub_20E6DE828(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_20E6DE880(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = BYTE6(v22);
  if (BYTE6(v22))
  {
    *(_QWORD *)(v3 - 104) = v2;
    v5 = BYTE6(v22);
    sub_20E6760A4(0, BYTE6(v22), 0);
    v2 = *(_QWORD *)(v3 - 104);
    if ((_DWORD)v1)
    {
      if ((_DWORD)v1 == 1)
        v6 = (int)a1;
      else
        v6 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v6 = 0;
    }
    *(_QWORD *)(v3 - 136) = v22 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 - 128) = v1;
    while (v5)
    {
      if ((_DWORD)v1)
      {
        if ((_DWORD)v1 == 1)
        {
          if (v6 < (int)a1 || v6 >= a1 >> 32)
            goto LABEL_29;
          v7 = sub_20E6E9A28();
          if (!v7)
          {
            __break(1u);
LABEL_36:
            __break(1u);
          }
          v8 = v7;
          v9 = sub_20E6E9A4C();
          v10 = v6 - v9;
          if (__OFSUB__(v6, v9))
            goto LABEL_32;
        }
        else
        {
          if (v6 < *(_QWORD *)(a1 + 16))
            goto LABEL_31;
          if (v6 >= *(_QWORD *)(a1 + 24))
            goto LABEL_33;
          v12 = sub_20E6E9A28();
          if (!v12)
            goto LABEL_36;
          v8 = v12;
          v13 = sub_20E6E9A4C();
          v10 = v6 - v13;
          if (__OFSUB__(v6, v13))
            goto LABEL_34;
        }
        v11 = *(_BYTE *)(v8 + v10);
      }
      else
      {
        if (v6 >= BYTE6(v22))
          goto LABEL_30;
        *(_QWORD *)(v3 - 118) = a1;
        *(_WORD *)(v3 - 110) = v22;
        *(_BYTE *)(v3 - 108) = BYTE2(v22);
        *(_BYTE *)(v3 - 107) = BYTE3(v22);
        *(_BYTE *)(v3 - 106) = BYTE4(v22);
        *(_BYTE *)(v3 - 105) = BYTE5(v22);
        v11 = *(_BYTE *)(v3 - 118 + v6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E538);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_20E6EE520;
      *(_QWORD *)(v14 + 56) = MEMORY[0x24BEE4260];
      *(_QWORD *)(v14 + 64) = MEMORY[0x24BEE42B0];
      *(_BYTE *)(v14 + 32) = v11;
      v15 = sub_20E6EA1E4();
      v17 = v16;
      *(_QWORD *)(v3 - 104) = v2;
      v19 = *(_QWORD *)(v2 + 16);
      v18 = *(_QWORD *)(v2 + 24);
      if (v19 >= v18 >> 1)
      {
        sub_20E6760A4(v18 > 1, v19 + 1, 1);
        v2 = *(_QWORD *)(v3 - 104);
      }
      *(_QWORD *)(v2 + 16) = v19 + 1;
      v20 = v2 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v15;
      *(_QWORD *)(v20 + 40) = v17;
      ++v6;
      --v5;
      --v4;
      v1 = *(_QWORD *)(v3 - 128);
      if (!v4)
        return v2;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    JUMPOUT(0x20E6DEB98);
  }
  return v2;
}

Swift::String __swiftcall Data.base64URLEncodedString()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String result;

  sub_20E6E9C74();
  sub_20E67B988();
  sub_20E6EA4E4();
  swift_bridgeObjectRelease();
  v0 = sub_20E6EA4E4();
  v2 = v1;
  swift_bridgeObjectRelease();
  v3 = v0;
  v4 = v2;
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

uint64_t sub_20E6DECC8(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 *v17;
  unsigned int v18;
  char v19;
  __int16 v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 *v25;
  unsigned int v26;
  char v27;
  __int16 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 *v32;
  unsigned int v33;
  char v34;
  __int16 v35;
  _QWORD v36[3];

  if (a3 - 37 < 0xFFFFFFFFFFFFFFDDLL)
  {
    __break(1u);
LABEL_76:
    swift_bridgeObjectRelease();
    v11 = 0;
    v10 = 1;
    return v11 | (v10 << 8);
  }
  v4 = HIBYTE(a2) & 0xF;
  v5 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v6 = v4;
  else
    v6 = result & 0xFFFFFFFFFFFFLL;
  if (!v6)
    goto LABEL_76;
  if ((a2 & 0x1000000000000000) != 0)
  {
    v9 = sub_20E6E00F8(result, a2, a3);
    swift_bridgeObjectRelease();
    v10 = (v9 >> 8) & 1;
LABEL_12:
    if (v10)
      v11 = 0;
    else
      v11 = v9;
    return v11 | (v10 << 8);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v8 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v8 = (unsigned __int8 *)sub_20E6EA664();
    v9 = sub_20E6E0454(v8, v5, a3);
    v10 = (v9 >> 8) & 1;
    goto LABEL_11;
  }
  v36[0] = result;
  v36[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v4)
    {
      v21 = v4 - 1;
      if (v21)
      {
        LOBYTE(v13) = 0;
        v22 = a3 + 48;
        v23 = a3 + 55;
        v24 = a3 + 87;
        if (a3 > 0xA)
        {
          v22 = 58;
        }
        else
        {
          v24 = 97;
          v23 = 65;
        }
        v25 = (unsigned __int8 *)v36 + 1;
        v10 = 1;
        do
        {
          v26 = *v25;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              LOBYTE(v9) = 0;
              if (v26 < 0x61 || v26 >= v24)
                goto LABEL_11;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v13 * a3;
          if ((v28 & 0xFF00) != 0)
            goto LABEL_74;
          v13 = v28 + (v26 + v27);
          if (((v13 >> 8) & 1) != 0)
            goto LABEL_74;
          ++v25;
          --v21;
        }
        while (v21);
LABEL_73:
        v10 = 0;
        LOBYTE(v9) = v13;
        goto LABEL_11;
      }
      goto LABEL_74;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v4)
      {
        LOBYTE(v13) = 0;
        v29 = a3 + 48;
        v30 = a3 + 55;
        v31 = a3 + 87;
        if (a3 > 0xA)
        {
          v29 = 58;
        }
        else
        {
          v31 = 97;
          v30 = 65;
        }
        v32 = (unsigned __int8 *)v36;
        v10 = 1;
        while (1)
        {
          v33 = *v32;
          if (v33 < 0x30 || v33 >= v29)
          {
            if (v33 < 0x41 || v33 >= v30)
            {
              LOBYTE(v9) = 0;
              if (v33 < 0x61 || v33 >= v31)
                goto LABEL_11;
              v34 = -87;
            }
            else
            {
              v34 = -55;
            }
          }
          else
          {
            v34 = -48;
          }
          v35 = v13 * a3;
          if ((v35 & 0xFF00) != 0)
            goto LABEL_74;
          v13 = v35 + (v33 + v34);
          if (((v13 >> 8) & 1) != 0)
            goto LABEL_74;
          ++v32;
          if (!--v4)
            goto LABEL_73;
        }
      }
      goto LABEL_74;
    }
    if (v4)
    {
      v12 = v4 - 1;
      if (v12)
      {
        LOBYTE(v13) = 0;
        v14 = a3 + 48;
        v15 = a3 + 55;
        v16 = a3 + 87;
        if (a3 > 0xA)
        {
          v14 = 58;
        }
        else
        {
          v16 = 97;
          v15 = 65;
        }
        v17 = (unsigned __int8 *)v36 + 1;
        v10 = 1;
        while (1)
        {
          v18 = *v17;
          if (v18 < 0x30 || v18 >= v14)
          {
            if (v18 < 0x41 || v18 >= v15)
            {
              LOBYTE(v9) = 0;
              if (v18 < 0x61 || v18 >= v16)
                goto LABEL_11;
              v19 = -87;
            }
            else
            {
              v19 = -55;
            }
          }
          else
          {
            v19 = -48;
          }
          v20 = v13 * a3;
          if ((v20 & 0xFF00) != 0)
            break;
          v13 = v20 - (v18 + v19);
          if ((v13 & 0xFFFFFF00) != 0)
            break;
          ++v17;
          if (!--v12)
            goto LABEL_73;
        }
      }
LABEL_74:
      LOBYTE(v9) = 0;
      v10 = 1;
LABEL_11:
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_20E6DF020(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = type metadata accessor for ASPasswordSignInEventCollector.SignInEvent();
  v24 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v20 - v11;
  v13 = MEMORY[0x24BEE4AF8];
  v25 = MEMORY[0x24BEE4AF8];
  v22 = *(_QWORD *)(a3 + 16);
  if (v22)
  {
    v14 = 0;
    v15 = MEMORY[0x24BEE4AF8];
    v20[1] = a2;
    v21 = a3;
    v20[0] = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v13 = *(_QWORD *)(v24 + 72);
      sub_20E698CE0(a3 + v16 + v13 * v14, (uint64_t)v12);
      v17 = a1(v12);
      if (v3)
      {
        sub_20E698D6C((uint64_t)v12);
        swift_release();
        swift_bridgeObjectRelease();
        return v13;
      }
      if ((v17 & 1) != 0)
      {
        sub_20E698DA8((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_20E6760DC(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v25;
        v19 = *(_QWORD *)(v25 + 16);
        v18 = *(_QWORD *)(v25 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_20E6760DC(v18 > 1, v19 + 1, 1);
          v15 = v25;
        }
        *(_QWORD *)(v15 + 16) = v19 + 1;
        result = sub_20E698DA8(v23, v15 + v16 + v19 * v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        result = sub_20E698D6C((uint64_t)v12);
      }
      if (v22 == ++v14)
      {
        v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t sub_20E6DF210(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;

  v4 = a3;
  v17 = *(_QWORD *)(a3 + 16);
  if (v17)
  {
    v5 = (uint64_t (*)(_QWORD *))result;
    v6 = 0;
    v7 = (uint64_t *)(a3 + 40);
    v8 = MEMORY[0x24BEE4AF8];
    v15 = (uint64_t (*)(_QWORD *))result;
    while (v6 < *(_QWORD *)(v4 + 16))
    {
      v10 = *(v7 - 1);
      v9 = *v7;
      v18[0] = v10;
      v18[1] = v9;
      swift_bridgeObjectRetain();
      v11 = v5(v18);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if ((v11 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native();
        v19 = v8;
        if ((result & 1) == 0)
        {
          result = sub_20E6760F8(0, *(_QWORD *)(v8 + 16) + 1, 1);
          v8 = v19;
        }
        v13 = *(_QWORD *)(v8 + 16);
        v12 = *(_QWORD *)(v8 + 24);
        if (v13 >= v12 >> 1)
        {
          result = sub_20E6760F8(v12 > 1, v13 + 1, 1);
          v8 = v19;
        }
        *(_QWORD *)(v8 + 16) = v13 + 1;
        v14 = v8 + 16 * v13;
        *(_QWORD *)(v14 + 32) = v10;
        *(_QWORD *)(v14 + 40) = v9;
        v4 = a3;
        v5 = v15;
      }
      else
      {
        result = swift_bridgeObjectRelease();
      }
      ++v6;
      v7 += 2;
      if (v17 == v6)
        goto LABEL_16;
    }
    __break(1u);
  }
  else
  {
    v8 = MEMORY[0x24BEE4AF8];
LABEL_16:
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

void *sub_20E6DF380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6DF420(a1, a2, a3, (SEL *)&selRef_compressedDataUsingAlgorithm_error_);
}

void *sub_20E6DF3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_20E6DF420(a1, a2, a3, (SEL *)&selRef_decompressedDataUsingAlgorithm_error_);
}

void *sub_20E6DF420(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x24BDAC8D0];
  v6 = (void *)sub_20E6E9C68();
  v11[0] = 0;
  v7 = objc_msgSend(v6, *a4, a1, v11);

  v8 = v11[0];
  if (v7)
  {
    v9 = (void *)sub_20E6E9C80();

  }
  else
  {
    v9 = v8;
    sub_20E6E9B48();

    swift_willThrow();
  }
  return v9;
}

uint64_t Data.init(hexString:)(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 v30;
  unsigned __int8 *v31;
  int v32;
  char v33;
  unsigned __int8 *v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v44[4];
  __int128 v45;
  char v46;
  _QWORD v47[5];
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)sub_20E6E99BC();
  v5 = *(v4 - 1);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E6E99A4();
  v8 = sub_20E6EA25C();
  if (v8)
  {
    v9 = v8;
    v10 = (__int128 *)sub_20E6E0C70(v8, 0);
    swift_bridgeObjectRetain();
    v11 = sub_20E6E0BB8(v47, (uint64_t *)v10 + 4, v9, a1, a2);
    swift_bridgeObjectRelease();
    if (v11 != (_QWORD *)v9)
      goto LABEL_75;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = (__int128 *)MEMORY[0x24BEE4AF8];
  }
  v12 = sub_20E6DFC1C((uint64_t)&unk_24C9804D8, v10);
  swift_retain();
  swift_arrayDestroy();
  v13 = swift_release();
  if ((v12 & 1) == 0)
  {
    i = (uint64_t)v10;
    goto LABEL_16;
  }
  v9 = *((_QWORD *)v10 + 2);
  if (v9 >= 2)
    a2 = 2;
  else
    a2 = *((_QWORD *)v10 + 2);
  sub_20E6EA8F8();
  swift_unknownObjectRetain_n();
  v14 = swift_dynamicCastClass();
  if (!v14)
  {
    swift_release();
    v14 = MEMORY[0x24BEE4AF8];
  }
  v15 = *(_QWORD *)(v14 + 16);
  swift_release();
  if (v15 != v9 - a2)
    goto LABEL_76;
  i = swift_dynamicCastClass();
  v13 = swift_release();
  if (i)
    goto LABEL_16;
  for (i = MEMORY[0x24BEE4AF8]; ; i = sub_20E6DFE98((uint64_t)v10, (uint64_t)(v10 + 2), a2, (2 * v9) | 1))
  {
    v13 = swift_release();
LABEL_16:
    v10 = (__int128 *)v44;
    MEMORY[0x24BDAC7A8](v13);
    v44[-2] = v7;
    v17 = (_QWORD *)sub_20E6DF210((uint64_t)sub_20E6E0CE4, (uint64_t)&v44[-4], i);
    v18 = v17;
    v19 = v17[2];
    if (!v19)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t *))(v5 + 8))(v7, v4);
      return 0;
    }
    v48 = xmmword_20E6EE5A0;
    if ((v19 & 1) == 0)
    {
      v9 = 0;
      goto LABEL_68;
    }
    v22 = v17[4];
    v21 = v17[5];
    v23 = HIBYTE(v21) & 0xF;
    v24 = v22 & 0xFFFFFFFFFFFFLL;
    if ((v21 & 0x2000000000000000) != 0)
      v25 = HIBYTE(v21) & 0xF;
    else
      v25 = v22 & 0xFFFFFFFFFFFFLL;
    if (!v25)
    {
      __break(1u);
LABEL_78:
      swift_bridgeObjectRetain();
      LOWORD(v22) = sub_20E6E00F8(v22, v21, 16);
      swift_bridgeObjectRelease();
      if ((v22 & 0x100) != 0)
        goto LABEL_85;
      goto LABEL_67;
    }
    if ((v21 & 0x1000000000000000) != 0)
      goto LABEL_78;
    if ((v21 & 0x2000000000000000) != 0)
    {
      v47[0] = v17[4];
      v47[1] = v21 & 0xFFFFFFFFFFFFFFLL;
      if (v22 == 43)
      {
        if (!v23)
          goto LABEL_83;
        if (!--v23)
        {
LABEL_85:
          __break(1u);
          JUMPOUT(0x20E6DFC0CLL);
        }
        LOBYTE(v22) = 0;
        v31 = (unsigned __int8 *)v47 + 1;
        while (1)
        {
          v32 = *v31;
          v33 = v32 - 48;
          if ((v32 - 48) >= 0xA)
          {
            if ((v32 - 65) < 6)
            {
              v33 = v32 - 55;
            }
            else
            {
              if ((v32 - 97) > 5)
                break;
              v33 = v32 - 87;
            }
          }
          if (v22 > 0xFu)
            break;
          LOBYTE(v22) = v33 + 16 * v22;
          ++v31;
          if (!--v23)
            goto LABEL_66;
        }
      }
      else if (v22 == 45)
      {
        if (!v23)
        {
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          swift_bridgeObjectRelease();
          __break(1u);
        }
        if (!--v23)
          goto LABEL_85;
        LOBYTE(v22) = 0;
        v28 = (unsigned __int8 *)v47 + 1;
        while (1)
        {
          v29 = *v28;
          v30 = v29 - 48;
          if ((v29 - 48) >= 0xA)
          {
            if ((v29 - 65) < 6)
            {
              v30 = v29 - 55;
            }
            else
            {
              if ((v29 - 97) > 5)
                break;
              v30 = v29 - 87;
            }
          }
          if (v22 > 0xFu)
            break;
          LODWORD(v22) = 16 * (v22 & 0xF) - v30;
          if ((v22 & 0xFFFFFF00) != 0)
            break;
          ++v28;
          if (!--v23)
            goto LABEL_66;
        }
      }
      else
      {
        if (!v23)
          goto LABEL_85;
        LOBYTE(v22) = 0;
        v34 = (unsigned __int8 *)v47;
        while (1)
        {
          v35 = *v34;
          v36 = v35 - 48;
          if ((v35 - 48) >= 0xA)
          {
            if ((v35 - 65) < 6)
            {
              v36 = v35 - 55;
            }
            else
            {
              if ((v35 - 97) > 5)
                break;
              v36 = v35 - 87;
            }
          }
          if (v22 > 0xFu)
            break;
          LOBYTE(v22) = v36 + 16 * v22;
          ++v34;
          if (!--v23)
            goto LABEL_66;
        }
      }
      LOBYTE(v22) = 0;
      LODWORD(v23) = 1;
LABEL_66:
      if ((_DWORD)v23)
        goto LABEL_85;
    }
    else
    {
      if ((v22 & 0x1000000000000000) != 0)
        v26 = (unsigned __int8 *)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v26 = (unsigned __int8 *)sub_20E6EA664();
      v27 = sub_20E6E0454(v26, v24, 16);
      if (((v27 >> 8) & 1) != 0)
        goto LABEL_85;
      LOBYTE(v22) = v27;
    }
LABEL_67:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDD8);
    v47[3] = v37;
    v47[4] = sub_20E67BC78((unint64_t *)&qword_254A2EDE0, &qword_254A2EDD8, MEMORY[0x24BDD06A0]);
    LOBYTE(v47[0]) = v22;
    v46 = *(_BYTE *)__swift_project_boxed_opaque_existential_1Tm(v47, v37);
    v9 = 1;
    v10 = &v48;
    sub_20E6E9C38();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
    if (v19 <= 1)
      break;
LABEL_68:
    v44[1] = v7;
    v44[2] = v5;
    v44[3] = v4;
    v45 = xmmword_20E6EE500;
    v4 = &qword_254A2F828;
    a2 = (unint64_t)&qword_254A2EDE0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E148);
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = v45;
    v39 = v18[2];
    if (v9 >= v39)
    {
      __break(1u);
    }
    else
    {
      v40 = v18[2 * v9 + 5];
      *(_QWORD *)(v38 + 32) = v18[2 * v9 + 4];
      *(_QWORD *)(v38 + 40) = v40;
      v7 = (char *)(v9 + 1);
      if (v9 + 1 < v39)
      {
        v41 = v18[2 * v9 + 7];
        *(_QWORD *)(v38 + 48) = v18[2 * v9 + 6];
        *(_QWORD *)(v38 + 56) = v41;
        v47[0] = v38;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F828);
        sub_20E67BC78(&qword_254A2F830, &qword_254A2F828, MEMORY[0x24BEE12C8]);
        v42 = sub_20E6EA2EC();
        if ((sub_20E6DECC8(v42, v43, 0x10uLL) & 0x100) == 0)
          __asm { BR              X11 }
        goto LABEL_84;
      }
    }
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    swift_release();
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t *))(v5 + 8))(v7, v4);
  return v48;
}

uint64_t sub_20E6DFC1C(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v2 = (_QWORD *)result;
  v3 = a2[2];
  if (!v3)
    goto LABEL_9;
  v4 = *(_QWORD *)(result + 16);
  if (!v4)
    return 1;
  result = a2[4];
  v6 = a2[5];
  if (result != v2[4] || v6 != v2[5])
  {
    result = sub_20E6EA8EC();
    v8 = 0;
    if ((result & 1) == 0)
      return v8;
  }
  v9 = v3 - 1;
  if (v3 != 1)
  {
    v11 = v4 - 1;
    v12 = a2 + 7;
    v13 = v2 + 7;
    while (v9)
    {
      v8 = v11 == 0;
      if (!v11)
        return v8;
      result = *(v12 - 1);
      if (result != *(v13 - 1) || *v12 != *v13)
      {
        result = sub_20E6EA8EC();
        if ((result & 1) == 0)
          return v8;
      }
      --v11;
      v12 += 2;
      v13 += 2;
      if (!--v9)
        goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    v10 = v2[2];
    if (v3 == v10)
      return 1;
    if (v3 < v10)
      return 0;
  }
  __break(1u);
  return result;
}

unint64_t sub_20E6DFD10(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;

  v2 = *a1;
  v1 = a1[1];
  v3 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v3 = *a1;
  v4 = 7;
  if (((v1 >> 60) & ((v2 & 0x800000000000000) == 0)) != 0)
    v4 = 11;
  if (sub_20E6E0D00(0xFuLL, v4 | (v3 << 16), v2, v1) != 1)
    return 0;
  swift_bridgeObjectRetain();
  result = sub_20E6846D4(v2, v1);
  if ((result & 0x100000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = sub_20E6E99B0();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
  return result;
}

_QWORD *sub_20E6DFDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DE90);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_20E6DFE20(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_20E6EA2D4();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x212BC2AD8](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_20E6DFE98(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5)
      return MEMORY[0x24BEE4AF8];
    v8 = 2 * v5;
    if (v5 <= 0)
    {
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0)
          goto LABEL_19;
        v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8)
          goto LABEL_19;
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E148);
      v9 = (_QWORD *)swift_allocObject();
      v10 = _swift_stdlib_malloc_size(v9);
      v11 = v10 - 32;
      if (v10 < 32)
        v11 = v10 - 17;
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3)
        goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  result = sub_20E6EA778();
  __break(1u);
  return result;
}

unsigned __int8 *sub_20E6E0008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  sub_20E6E1018();
  swift_bridgeObjectRetain();
  v7 = sub_20E6EA2F8();
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_20E6E06FC();
  v12 = v11;
  swift_bridgeObjectRelease();
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)sub_20E6EA664();
  }
LABEL_7:
  v13 = sub_20E6E01D8(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_20E6E00F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int16 v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_20E6EA2F8();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_20E6E06FC();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_20E6EA664();
  }
LABEL_7:
  v11 = (unsigned __int16)sub_20E6E0454(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 & 0x1FF;
}

unsigned __int8 *sub_20E6E01D8(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  unint64_t v32;
  unsigned __int8 v33;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v14 = v9 * a3;
              v15 = v11 + v12;
              v16 = v14 >= v15;
              v9 = v14 - v15;
              if (!v16)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      v26 = a3 + 48;
      v27 = a3 + 55;
      v28 = a3 + 87;
      if (a3 > 10)
      {
        v26 = 58;
      }
      else
      {
        v28 = 97;
        v27 = 65;
      }
      if (result)
      {
        v29 = 0;
        do
        {
          v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              v13 = 0;
              if (v30 < 0x61 || v30 >= v28)
                return (unsigned __int8 *)v13;
              v31 = -87;
            }
            else
            {
              v31 = -55;
            }
          }
          else
          {
            v31 = -48;
          }
          if (!is_mul_ok(v29, a3))
            return 0;
          v32 = v29 * a3;
          v33 = v30 + v31;
          v16 = __CFADD__(v32, v33);
          v29 = v32 + v33;
          if (v16)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  v17 = a2 - 1;
  if (a2 == 1)
    return 0;
  v18 = a3 + 48;
  v19 = a3 + 55;
  v20 = a3 + 87;
  if (a3 > 10)
  {
    v18 = 58;
  }
  else
  {
    v20 = 97;
    v19 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v21 = result + 1;
  do
  {
    v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        v13 = 0;
        if (v22 < 0x61 || v22 >= v20)
          return (unsigned __int8 *)v13;
        v23 = -87;
      }
      else
      {
        v23 = -55;
      }
    }
    else
    {
      v23 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v24 = v9 * a3;
    v25 = v22 + v23;
    v16 = __CFADD__(v24, v25);
    v9 = v24 + v25;
    if (v16)
      return 0;
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_20E6E0454(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned int v24;
  unsigned int v25;
  char v26;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v14 = a2 - 1;
      if (a2 != 1)
      {
        v15 = a3 + 87;
        if (a3 > 10)
        {
          v16 = a3 + 55;
        }
        else
        {
          v15 = 97;
          v16 = 65;
        }
        if (a3 <= 10)
          v17 = a3 + 48;
        else
          v17 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v18 = result + 1;
          do
          {
            v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                v12 = 0;
                v13 = 1;
                if (v19 < 0x61 || v19 >= v15)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v20 = -87;
              }
              else
              {
                v20 = -55;
              }
            }
            else
            {
              v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) + (v19 + v20);
            if (((v8 >> 8) & 1) != 0)
              goto LABEL_72;
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v21 = a3 + 87;
        if (a3 > 10)
        {
          v22 = a3 + 55;
        }
        else
        {
          v21 = 97;
          v22 = 65;
        }
        if (a3 <= 10)
          v23 = a3 + 48;
        else
          v23 = 58;
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                v12 = 0;
                v13 = 1;
                if (v25 < 0x61 || v25 >= v21)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v26 = -87;
              }
              else
              {
                v26 = -55;
              }
            }
            else
            {
              v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v24 = (v24 * a3) + (v25 + v26);
            if (((v24 >> 8) & 1) != 0)
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          LOBYTE(v8) = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0)
              goto LABEL_72;
            v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_20E6E06FC()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_20E6EA304();
  v4 = sub_20E6E0778(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_20E6E0778(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_20E6E08BC(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_20E6DFDBC(v9, 0);
      v12 = sub_20E6E09A8((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x212BC2A6C](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x212BC2A6CLL);
LABEL_9:
      sub_20E6EA664();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x212BC2A6C]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_20E6E08BC(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_20E6DFE20(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_20E6DFE20(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_20E6EA2BC();
  }
  __break(1u);
  return result;
}

unint64_t sub_20E6E09A8(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_20E6DFE20(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_20E6EA2C8();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_20E6EA664();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_20E6DFE20(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_20E6EA2A4();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

_QWORD *sub_20E6E0BB8(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = result;
  v6 = HIBYTE(a5) & 0xF;
  v12 = a4;
  v13 = a5;
  if ((a5 & 0x2000000000000000) == 0)
    v6 = a4 & 0xFFFFFFFFFFFFLL;
  v14 = v6;
  if (!a2)
  {
    v7 = 0;
LABEL_14:
    *v5 = a4;
    v5[1] = a5;
    v5[2] = 0;
    v5[3] = v6;
    return (_QWORD *)v7;
  }
  v7 = a3;
  if (!a3)
    goto LABEL_14;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v8 = a2;
    v9 = 0;
    while (1)
    {
      v10 = sub_20E6EA28C();
      if (!v11)
        break;
      ++v9;
      *v8 = v10;
      v8[1] = v11;
      v8 += 2;
      if (v7 == v9)
      {
        a4 = v12;
        a5 = v13;
        goto LABEL_13;
      }
    }
    a4 = v12;
    a5 = v13;
    v7 = v9;
LABEL_13:
    v6 = v14;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_20E6E0C70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E148);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 4);
  return v4;
}

unint64_t sub_20E6E0CE4(unint64_t *a1)
{
  return sub_20E6DFD10(a1) & 1;
}

unint64_t sub_20E6E0D00(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v7 = sub_20E6E0F10(a1, a3, a4);
  result = sub_20E6E0F10(a2, a3, a4);
  v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = sub_20E6EA22C();
        v7 = result;
      }
      else
      {
        v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = sub_20E6EA664();
          v13 = *(unsigned __int8 *)(result + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14)
        return v11;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = sub_20E6EA238();
        v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = sub_20E6EA664();
          v17 = 0;
          do
            v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14)
        return v11;
    }
    goto LABEL_36;
  }
  return 0;
}

unint64_t sub_20E6E0F10(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_20E6E0FAC(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_20E688258(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_20E6E0FAC(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_20E6DFE20(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
    __break(1u);
  return result;
}

unint64_t sub_20E6E1018()
{
  unint64_t result;

  result = qword_254A2F838;
  if (!qword_254A2F838)
  {
    result = MEMORY[0x212BC39A8](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(result, &qword_254A2F838);
  }
  return result;
}

Swift::String __swiftcall Error.loggerDescription()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  Swift::String result;
  uint64_t v14;
  unint64_t v15;

  v1 = v0;
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v15 = 0xE000000000000000;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  v6 = sub_20E6EA8BC();
  if (v6)
  {
    v7 = (void *)v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    v7 = (void *)swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v8, v4, v1);
  }
  v9 = (void *)sub_20E6E9B3C();

  v10 = objc_msgSend(v9, sel_safari_privacyPreservingDescription);
  sub_20E6EA1CC();

  sub_20E6EA280();
  swift_bridgeObjectRelease();
  v11 = v14;
  v12 = (void *)v15;
  result._object = v12;
  result._countAndFlagsBits = v11;
  return result;
}

id ASProgressiveBackoffManager.__allocating_init(numberOfOperationsBeforeTriggeringBackoff:minimumCooldownDurationSeconds:)(uint64_t a1, double a2)
{
  objc_class *v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  swift_allocObject();
  v4 = (objc_class *)type metadata accessor for ASProgressiveBackoffManager();
  v5 = swift_allocObject();
  swift_defaultActor_initialize();
  swift_retain();
  *(_QWORD *)(v5 + 128) = sub_20E6A5FA4(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v5 + 112) = a1;
  *(double *)(v5 + 120) = a2;
  swift_release();
  v8.receiver = (id)v5;
  v8.super_class = v4;
  v6 = objc_msgSendSuper2(&v8, sel_init);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v6;
}

id ASProgressiveBackoffManager.init(numberOfOperationsBeforeTriggeringBackoff:minimumCooldownDurationSeconds:)(uint64_t a1, double a2)
{
  objc_class *v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v4 = (objc_class *)type metadata accessor for ASProgressiveBackoffManager();
  v5 = swift_allocObject();
  swift_defaultActor_initialize();
  swift_retain();
  *(_QWORD *)(v5 + 128) = sub_20E6A5FA4(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v5 + 112) = a1;
  *(double *)(v5 + 120) = a2;
  swift_release();
  v8.receiver = (id)v5;
  v8.super_class = v4;
  v6 = objc_msgSendSuper2(&v8, sel_init);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v6;
}

id ASProgressiveBackoffManager.__allocating_init(numberOfOperationsBeforeTriggeringBackoff:minimumCooldownDuration:)(uint64_t a1, double a2)
{
  objc_class *v2;
  uint64_t v5;
  objc_super v7;

  v5 = swift_allocObject();
  swift_defaultActor_initialize();
  swift_retain();
  *(_QWORD *)(v5 + 128) = sub_20E6A5FA4(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v5 + 112) = a1;
  *(double *)(v5 + 120) = a2;
  swift_release();
  v7.receiver = (id)v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t type metadata accessor for ASProgressiveBackoffManager()
{
  return objc_opt_self();
}

id ASProgressiveBackoffManager.init(numberOfOperationsBeforeTriggeringBackoff:minimumCooldownDuration:)(uint64_t a1, double a2)
{
  uint64_t v2;
  objc_super v6;

  swift_defaultActor_initialize();
  swift_retain();
  *(_QWORD *)(v2 + 128) = sub_20E6A5FA4(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v2 + 112) = a1;
  *(double *)(v2 + 120) = a2;
  swift_release();
  v6.receiver = (id)v2;
  v6.super_class = (Class)type metadata accessor for ASProgressiveBackoffManager();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t sub_20E6E14F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return swift_task_switch();
}

uint64_t sub_20E6E1510()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  uint64_t v16;

  v1 = v0[10] + 128;
  swift_beginAccess();
  v2 = *(_QWORD *)v1;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    goto LABEL_5;
  v4 = v0[8];
  v3 = v0[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_20E698CCC(v4, v3);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v9 = v0[9];
    v8 = v0[10];
    v10 = v0[8];
    v11 = *(_QWORD *)(v8 + 112);
    v12 = *(_QWORD *)(v8 + 120);
    type metadata accessor for ASProgressiveBackoffManager.Context();
    v7 = (_QWORD *)swift_allocObject();
    swift_bridgeObjectRetain();
    swift_defaultActor_initialize();
    v7[18] = 0;
    v7[19] = 0;
    v7[14] = v10;
    v7[15] = v9;
    v7[16] = v11;
    v7[17] = v12;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *(_QWORD *)v1;
    *(_QWORD *)v1 = 0x8000000000000000;
    sub_20E6AFFBC((uint64_t)v7, v10, v9, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)v1 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    goto LABEL_6;
  }
  v7 = *(_QWORD **)(*(_QWORD *)(v2 + 56) + 8 * v5);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_6:
  v0[11] = v7;
  swift_retain();
  v14 = (_QWORD *)swift_task_alloc();
  v0[12] = v14;
  *v14 = v0;
  v14[1] = sub_20E6E16D8;
  v14[2] = v7;
  return swift_task_switch();
}

uint64_t sub_20E6E16D8()
{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t sub_20E6E1738()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20E6E189C(int a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_20E6EA1CC();
  v7 = v6;
  v3[4] = v6;
  swift_retain();
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_20E6E193C;
  v8[9] = v7;
  v8[10] = a3;
  v8[8] = v5;
  return swift_task_switch();
}

uint64_t sub_20E6E193C()
{
  uint64_t *v0;
  void (**v1)(_QWORD);
  uint64_t v3;

  v1 = *(void (***)(_QWORD))(*v0 + 24);
  v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void ASProgressiveBackoffManager.__allocating_init()()
{
  swift_allocObject();
  swift_defaultActor_initialize();
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void ASProgressiveBackoffManager.init()()
{
  swift_defaultActor_initialize();
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t ASProgressiveBackoffManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t ASProgressiveBackoffManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t ASProgressiveBackoffManager.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_20E6E1AAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 128);
  if (v2 >= v1)
  {
    *(double *)&result = 0.0;
    return result;
  }
  v4 = v1 - v2;
  if (__OFSUB__(v1, v2))
  {
    __break(1u);
    goto LABEL_13;
  }
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v5)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v7 = v6 > 0x40;
  if (v6 >= 0x40)
    v8 = 0;
  else
    v8 = 1 << v6;
  if (v7)
    v8 = 0;
  *(double *)&result = (double)v8;
  return result;
}

uint64_t sub_20E6E1B04()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

uint64_t sub_20E6E1B1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  char v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  double v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 16);
  *(double *)&result = COERCE_DOUBLE(sub_20E6E1AAC());
  v4 = *(_QWORD *)(v1 + 144);
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *(_QWORD *)(v1 + 144) = v6;
  if ((v3 & 1) != 0)
  {
    sub_20E6E1D78();
    *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(void))(v0 + 8))());
    return result;
  }
  v7 = *(double *)&result * 1000000000.0;
  if ((~COERCE__INT64(*(double *)&result * 1000000000.0) & 0x7FF0000000000000) == 0)
    goto LABEL_9;
  if (v7 > -1.0)
  {
    if (v7 < 1.84467441e19)
    {
      v8 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 24) = v8;
      *v8 = v0;
      v8[1] = sub_20E6E1BF4;
      *(double *)&result = COERCE_DOUBLE(sub_20E6EA394());
      return result;
    }
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_20E6E1BF4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20E6E1C58()
{
  uint64_t v0;

  sub_20E6E1D78();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20E6E1C88()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  void *v5;
  uint8_t *v6;

  if (qword_254A2DBE8 != -1)
    swift_once();
  v1 = sub_20E6E9F50();
  __swift_project_value_buffer(v1, (uint64_t)qword_254A3ED50);
  v2 = sub_20E6E9F38();
  v3 = sub_20E6EA400();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(void **)(v0 + 32);
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_20E648000, v2, v3, "Task canceled before backoff timer finished.", v6, 2u);
    MEMORY[0x212BC3A38](v6, -1, -1);
  }

  sub_20E6E1D78();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20E6E1D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  char v5;
  double v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E8A0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v0 + 152))
  {
    swift_retain();
    sub_20E6EA388();
    swift_release();
  }
  v4 = COERCE_DOUBLE(sub_20E6E1AAC());
  if ((v5 & 1) != 0)
  {
    v6 = *(double *)(v0 + 136);
  }
  else if (*(double *)(v0 + 136) < v4)
  {
    v6 = v4;
  }
  else
  {
    v6 = *(double *)(v0 + 136);
  }
  v7 = sub_20E6EA37C();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v3, 1, 1, v7);
  v8 = sub_20E6E2558();
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v0;
  *(_QWORD *)(v9 + 24) = v8;
  *(double *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v0;
  swift_retain_n();
  *(_QWORD *)(v0 + 152) = sub_20E696708((uint64_t)v3, (uint64_t)a8, v9);
  return swift_release();
}

uint64_t sub_20E6E1EB4(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 48) = a5;
  *(double *)(v5 + 40) = a1;
  return swift_task_switch();
}

void sub_20E6E1ED0()
{
  double *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  double v6;
  _QWORD *v7;

  if (qword_254A2DBE8 != -1)
    swift_once();
  v1 = sub_20E6E9F50();
  *((_QWORD *)v0 + 7) = __swift_project_value_buffer(v1, (uint64_t)qword_254A3ED50);
  v2 = sub_20E6E9F38();
  v3 = sub_20E6EA3D0();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *((_QWORD *)v0 + 5);
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 134217984;
    *((_QWORD *)v0 + 4) = v4;
    sub_20E6EA4C0();
    _os_log_impl(&dword_20E648000, v2, v3, "Scheduling cooldown for %f.", v5, 0xCu);
    MEMORY[0x212BC3A38](v5, -1, -1);
  }

  v6 = v0[5] * 1000000000.0;
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v6 <= -1.0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v6 < 1.84467441e19)
  {
    v7 = (_QWORD *)swift_task_alloc();
    *((_QWORD *)v0 + 8) = v7;
    *v7 = v0;
    v7[1] = sub_20E6E2064;
    sub_20E6EA394();
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_20E6E2064()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_20E6E20C8()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;

  v1 = sub_20E6E9F38();
  v2 = sub_20E6EA3D0();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 40);
    v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v4 = 134217984;
    *(_QWORD *)(v0 + 24) = v3;
    sub_20E6EA4C0();
    _os_log_impl(&dword_20E648000, v1, v2, "Cooldown for %f completed.", v4, 0xCu);
    MEMORY[0x212BC3A38](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 48);

  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 152) = 0;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20E6E21A8()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  void *v3;
  uint64_t v4;
  uint8_t *v5;

  v1 = sub_20E6E9F38();
  v2 = sub_20E6EA3D0();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(void **)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 40);
    v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v5 = 134217984;
    *(_QWORD *)(v0 + 16) = v4;
    sub_20E6EA4C0();
    _os_log_impl(&dword_20E648000, v1, v2, "Cooldown for %f aborted.", v5, 0xCu);
    MEMORY[0x212BC3A38](v5, -1, -1);
  }
  else
  {
    v3 = *(void **)(v0 + 72);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_20E6E228C()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for ASProgressiveBackoffManager.Context()
{
  return objc_opt_self();
}

uint64_t sub_20E6E22D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_20E69B37C;
  return v6();
}

uint64_t sub_20E6E232C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_20E69B37C;
  return v7();
}

uint64_t sub_20E6E2380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_20E6EA37C();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_20E6EA370();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_20E6E26B0(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_20E6EA364();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t method lookup function for ASProgressiveBackoffManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ASProgressiveBackoffManager.__allocating_init(numberOfOperationsBeforeTriggeringBackoff:minimumCooldownDuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of ASProgressiveBackoffManager.performAfterBackoff(for:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0x90);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_20E69B198;
  return v9(a1, a2);
}

unint64_t sub_20E6E2558()
{
  unint64_t result;
  uint64_t v1;

  result = qword_254A2F860;
  if (!qword_254A2F860)
  {
    v1 = type metadata accessor for ASProgressiveBackoffManager.Context();
    result = MEMORY[0x212BC39A8](&unk_20E6F4820, v1);
    atomic_store(result, (unint64_t *)&qword_254A2F860);
  }
  return result;
}

uint64_t sub_20E6E25A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_20E69B37C;
  v4[6] = v3;
  v4[5] = v2;
  return swift_task_switch();
}

uint64_t sub_20E6E2608()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_20E6E263C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_20E69B37C;
  return ((uint64_t (*)(int, void *, uint64_t))&a0_0[*(int *)a0_0])(v2, v3, v4);
}

uint64_t sub_20E6E26B0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E8A0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20E6E26F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_20E6E2714(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_20E69B198;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_254A2F890 + dword_254A2F890))(a1, v4);
}

uint64_t ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.init(secret1:secret2:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_20E6EA094();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  v7 = a3 + *(int *)(type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0) + 20);
  return sub_20E694D54(a2, v7);
}

uint64_t type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F9C0);
}

id ASCPublicKeyCredentialAssertionExtensionOutputs.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

__n128 ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.init(result:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = v2;
  return result;
}

uint64_t static ASCPublicKeyCredentialAssertionExtensionOutputs.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t sub_20E6E2840(void *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;

  sub_20E6E9998();
  swift_allocObject();
  sub_20E6E998C();
  type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs(0);
  sub_20E67BD04(&qword_254A2F8A8, type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs, (uint64_t)&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionOutputs);
  v2 = sub_20E6E9980();
  v4 = v3;
  swift_release();
  v5 = (void *)sub_20E6E9C68();
  v6 = (void *)sub_20E6EA1C0();
  objc_msgSend(a1, sel_encodeObject_forKey_, v5, v6);

  return sub_20E6673F4(v2, v4);
}

uint64_t type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs(uint64_t a1)
{
  return sub_20E694C14(a1, (uint64_t *)&unk_254A2F9A0);
}

id ASCPublicKeyCredentialAssertionExtensionOutputs.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ASCPublicKeyCredentialAssertionExtensionOutputs.init(coder:)(a1);
}

id ASCPublicKeyCredentialAssertionExtensionOutputs.init(coder:)(void *a1)
{
  void *v1;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  id v10;
  void *v12;

  swift_getObjectType();
  sub_20E667A94();
  v3 = v1;
  v4 = sub_20E6EA448();
  if (v4)
  {
    v5 = (void *)v4;
    v6 = sub_20E6E9C80();
    v8 = v7;

    sub_20E6E9974();
    swift_allocObject();
    sub_20E6E9968();
    sub_20E67BD04(&qword_254A2F8B8, type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs, (uint64_t)&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionOutputs);
    sub_20E6E995C();

    swift_release();
    v9 = objc_allocWithZone((Class)type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs(0));
    v10 = sub_20E6E57A8((uint64_t)v12);

    sub_20E6673F4(v6, v8);
    swift_getObjectType();
    swift_deallocPartialClassInstance();
  }
  else
  {

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v10;
}

id ASCPublicKeyCredentialAssertionExtensionOutputs.init()()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  objc_super v5;

  v1 = &v0[OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_largeBlob];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  v1[16] = -1;
  v2 = &v0[OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_prf];
  v3 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs(0);
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t sub_20E6E2D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = 0x6F69736E65747845;
  v26 = 0xEF0A207B203A736ELL;
  v11 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_largeBlob;
  swift_beginAccess();
  v12 = *(unsigned __int8 *)(v11 + 16);
  if (v12 != 255)
  {
    v18 = v0;
    v15 = v11;
    v14 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v15 + 8);
    v22 = v14;
    v23 = v13;
    v24 = v12 & 1;
    sub_20E6E59E0(v14, v13, v12 & 1);
    ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.description.getter();
    v19 = v7;
    v22 = 9;
    v23 = 0xE100000000000000;
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    sub_20E6EA280();
    v7 = v19;
    swift_bridgeObjectRelease();
    v0 = v18;
    sub_20E6B74A4(v14, v13, v12);
  }
  v16 = v0 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_prf;
  swift_beginAccess();
  sub_20E67BCC0(v16, (uint64_t)v6, &qword_254A2EDB8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_20E67BD44((uint64_t)v6, &qword_254A2EDB8);
  }
  else
  {
    sub_20E6E5960((uint64_t)v6, (uint64_t)v10);
    v20 = 0;
    v21 = 0xE000000000000000;
    sub_20E6EA280();
    sub_20E6EA094();
    sub_20E6EA6B8();
    sub_20E6EA280();
    sub_20E67BCC0((uint64_t)&v10[*(int *)(v7 + 20)], (uint64_t)v3, &qword_254A2E7B0);
    sub_20E6EA208();
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    v20 = 9;
    v21 = 0xE100000000000000;
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    sub_20E6E59A4((uint64_t)v10);
  }
  v20 = v25;
  v21 = v26;
  swift_bridgeObjectRetain();
  sub_20E6EA280();
  swift_bridgeObjectRelease();
  return v20;
}

unint64_t ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    sub_20E6EA610();
    swift_bridgeObjectRelease();
    sub_20E6EA280();
    swift_bridgeObjectRelease();
    return 0xD000000000000011;
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 8);
    if (v2 >> 60 != 15)
    {
      sub_20E66A990(v1, v2);
      sub_20E66A990(v1, v2);
      sub_20E6EA610();
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }
    return 0xD000000000000013;
  }
}

uint64_t ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD v6[2];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[0] = 0;
  v6[1] = 0xE000000000000000;
  sub_20E6EA280();
  sub_20E6EA094();
  sub_20E6EA6B8();
  sub_20E6EA280();
  v4 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
  sub_20E67BCC0(v0 + *(int *)(v4 + 20), (uint64_t)v3, &qword_254A2E7B0);
  sub_20E6EA208();
  sub_20E6EA280();
  swift_bridgeObjectRelease();
  return v6[0];
}

uint64_t sub_20E6E33B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;

  v3 = *a1 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_largeBlob;
  swift_beginAccess();
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_QWORD *)(a2 + 8) = v5;
  v6 = *(_BYTE *)(v3 + 16);
  *(_BYTE *)(a2 + 16) = v6;
  return sub_20E6E59EC(v4, v5, v6);
}

uint64_t sub_20E6E3410(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_largeBlob;
  v5 = *(_BYTE *)(a1 + 16);
  swift_beginAccess();
  v6 = *(_QWORD *)v4;
  v7 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = v3;
  v8 = *(_BYTE *)(v4 + 16);
  *(_BYTE *)(v4 + 16) = v5;
  sub_20E6E59EC(v2, v3, v5);
  return sub_20E6B74A4(v6, v7, v8);
}

uint64_t sub_20E6E34A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;

  v3 = v1 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_largeBlob;
  swift_beginAccess();
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_BYTE *)(v3 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  return sub_20E6E59EC(v4, v5, v6);
}

uint64_t sub_20E6E34FC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  v5 = v1 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_largeBlob;
  swift_beginAccess();
  v6 = *(_QWORD *)v5;
  v7 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = v3;
  v8 = *(_BYTE *)(v5 + 16);
  *(_BYTE *)(v5 + 16) = v4;
  return sub_20E6B74A4(v6, v7, v8);
}

uint64_t (*sub_20E6E3568())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_20E6E35AC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_20E67BCC0(a1, (uint64_t)v6, &qword_254A2EDB8);
  v7 = *a2 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_prf;
  swift_beginAccess();
  sub_20E6E5A04((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t sub_20E6E3660@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_prf;
  swift_beginAccess();
  return sub_20E67BCC0(v3, a1, &qword_254A2EDB8);
}

uint64_t sub_20E6E36B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_prf;
  swift_beginAccess();
  sub_20E6E5A04(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_20E6E3710())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_20E6E3754@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  uint64_t result;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[3];
  unsigned __int8 v37;
  uint64_t v38;
  char v39;
  __int128 v40;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
  MEMORY[0x24BDAC7A8](v3);
  v31 = &v30[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = &v30[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = v1 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_largeBlob;
  swift_beginAccess();
  v13 = *(unsigned __int8 *)(v12 + 16);
  *(_QWORD *)&v35 = v1;
  *(_QWORD *)&v34 = v9;
  if (v13 == 255)
  {
    v33 = 0;
    v18 = 0;
    v19 = 0;
    v32 = 0;
    v20 = 0;
    v17 = 3;
  }
  else
  {
    v15 = *(_QWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    v16 = *(_QWORD *)v12;
    if ((v13 & 1) != 0)
    {
      sub_20E6B74A4(v16, *(_QWORD *)(v12 + 8), v13);
      v33 = 0;
      v32 = 0;
      v19 = v15 & 1;
      v20 = 1;
      v18 = 0xF000000000000000;
      v17 = 2;
    }
    else
    {
      sub_20E6E59E0(v16, *(_QWORD *)(v12 + 8), 0);
      sub_20E6E59E0(v15, v14, 0);
      sub_20E6A6870(2, v15, v14, 2, (uint64_t)v36);
      sub_20E6B74A4(v15, v14, v13);
      v17 = LOBYTE(v36[0]);
      v18 = v36[2];
      v33 = v36[1];
      v19 = v37;
      v32 = v38;
      v20 = v39;
    }
  }
  v21 = v35 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_prf;
  swift_beginAccess();
  sub_20E67BCC0(v21, (uint64_t)v7, &qword_254A2EDB8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48))(v7, 1, v8) == 1)
  {
    result = sub_20E67BD44((uint64_t)v7, &qword_254A2EDB8);
    v23 = 0uLL;
    v24 = 3;
    v25 = 0uLL;
  }
  else
  {
    sub_20E6E5960((uint64_t)v7, (uint64_t)v11);
    sub_20E6EA070();
    v35 = v40;
    v26 = v31;
    sub_20E67BCC0((uint64_t)&v11[*(int *)(v8 + 20)], (uint64_t)v31, &qword_254A2E7B0);
    v27 = sub_20E6EA094();
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
    {
      sub_20E6E59A4((uint64_t)v11);
      result = sub_20E67BD44((uint64_t)v26, &qword_254A2E7B0);
      v25 = xmmword_20E6EE5B0;
    }
    else
    {
      sub_20E6EA070();
      v34 = v40;
      sub_20E6E59A4((uint64_t)v11);
      result = (*(uint64_t (**)(_BYTE *, uint64_t))(v28 + 8))(v26, v27);
      v25 = v34;
    }
    v24 = 2;
    v23 = v35;
  }
  v29 = v33;
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v29;
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(a1 + 24) = v19;
  *(_QWORD *)(a1 + 32) = v32;
  *(_BYTE *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 56) = v23;
  *(_OWORD *)(a1 + 72) = v25;
  *(_BYTE *)(a1 + 88) = 2;
  return result;
}

uint64_t sub_20E6E3CF0()
{
  sub_20E6E5A4C();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6E3D18()
{
  sub_20E6E5A4C();
  return sub_20E6EA9DC();
}

uint64_t sub_20E6E3D40()
{
  return 1635017060;
}

uint64_t sub_20E6E3D50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20E6EA8EC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20E6E3DD4()
{
  sub_20E6E5AD4();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6E3DFC()
{
  sub_20E6E5AD4();
  return sub_20E6EA9DC();
}

uint64_t sub_20E6E3E24()
{
  return 0x73736563637573;
}

uint64_t sub_20E6E3E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x73736563637573 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20E6EA8EC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20E6E3ED0()
{
  sub_20E6E5A90();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6E3EF8()
{
  sub_20E6E5A90();
  return sub_20E6EA9DC();
}

uint64_t ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F8D0);
  v24 = *(_QWORD *)(v3 - 8);
  v25 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F8D8);
  v22 = *(_QWORD *)(v6 - 8);
  v23 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F8E0);
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)v1;
  v21 = *(_QWORD *)(v1 + 8);
  v13 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6E5A4C();
  sub_20E6EA9C4();
  if (v13 == 1)
  {
    LOBYTE(v28) = 1;
    sub_20E6E5A90();
    v14 = v27;
    sub_20E6EA82C();
    v15 = v25;
    sub_20E6EA880();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v15);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v11, v14);
  }
  else
  {
    LOBYTE(v28) = 0;
    v17 = v21;
    sub_20E66A9D4(v12, v21);
    sub_20E6E5AD4();
    v18 = v27;
    sub_20E6EA82C();
    v28 = v12;
    v29 = v17;
    sub_20E66AD88();
    v19 = v23;
    sub_20E6EA868();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v19);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v18);
    return sub_20E6B74BC(v12, v17, 0);
  }
}

uint64_t ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  __int128 v37;
  uint64_t v38;

  v32 = a2;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F908);
  v35 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v34 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F910);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F918);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v36 = a1;
  __swift_project_boxed_opaque_existential_1Tm(a1, v12);
  sub_20E6E5A4C();
  v13 = v38;
  sub_20E6EA9AC();
  if (v13)
    goto LABEL_6;
  v30 = v5;
  v31 = v4;
  v14 = v34;
  v15 = v35;
  v38 = v9;
  v16 = sub_20E6EA820();
  if (*(_QWORD *)(v16 + 16) != 1)
  {
    v19 = sub_20E6EA640();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_254A2DCE0);
    *v21 = &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult;
    sub_20E6EA79C();
    sub_20E6EA634();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
LABEL_6:
    v25 = (uint64_t)v36;
    return __swift_destroy_boxed_opaque_existential_1Tm(v25);
  }
  v17 = *(_BYTE *)(v16 + 32);
  if ((v17 & 1) != 0)
  {
    LOBYTE(v37) = 1;
    sub_20E6E5A90();
    v18 = v14;
    sub_20E6EA790();
    v23 = v33;
    v24 = sub_20E6EA7F0();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v23);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
    v25 = (uint64_t)v36;
    v26 = v24 & 1;
  }
  else
  {
    LOBYTE(v37) = 0;
    sub_20E6E5AD4();
    sub_20E6EA790();
    sub_20E66AE8C();
    v27 = v31;
    sub_20E6EA7D8();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v8);
    v26 = v37;
    v25 = (uint64_t)v36;
  }
  v28 = v32;
  *v32 = v26;
  *((_BYTE *)v28 + 16) = v17;
  return __swift_destroy_boxed_opaque_existential_1Tm(v25);
}

uint64_t sub_20E6E4564@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.init(from:)(a1, a2);
}

uint64_t sub_20E6E4578(_QWORD *a1)
{
  return ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.encode(to:)(a1);
}

uint64_t ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.result.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return sub_20E6E59E0(v2, v3, v4);
}

uint64_t ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.result.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = sub_20E6B74BC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

uint64_t (*ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.result.modify())()
{
  return nullsub_1;
}

uint64_t sub_20E6E45EC()
{
  return 0x746C75736572;
}

uint64_t sub_20E6E4600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x746C75736572 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_20E6EA8EC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_20E6E468C()
{
  sub_20E6E5B18();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6E46B4()
{
  sub_20E6E5B18();
  return sub_20E6EA9DC();
}

uint64_t ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD v10[3];
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F920);
  v10[0] = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  v8 = *((_BYTE *)v1 + 16);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6E5B18();
  sub_20E6EA9C4();
  v10[1] = v7;
  v10[2] = v6;
  v11 = v8;
  sub_20E6E5B5C();
  sub_20E6EA88C();
  return (*(uint64_t (**)(char *, uint64_t))(v10[0] + 8))(v5, v3);
}

uint64_t ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  __int128 v11;
  char v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F938);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6E5B18();
  sub_20E6EA9AC();
  if (!v2)
  {
    sub_20E6E5BA0();
    sub_20E6EA7FC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v9 = v12;
    *(_OWORD *)a2 = v11;
    *(_BYTE *)(a2 + 16) = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_20E6E4914@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.init(from:)(a1, a2);
}

uint64_t sub_20E6E4928(_QWORD *a1)
{
  return ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.encode(to:)(a1);
}

uint64_t sub_20E6E4940()
{
  _BYTE *v0;

  if (*v0)
    return 0x32746572636573;
  else
    return 0x31746572636573;
}

uint64_t sub_20E6E4974@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_20E6E6E98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_20E6E4998()
{
  sub_20E6E5BE4();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6E49C0()
{
  sub_20E6E5BE4();
  return sub_20E6EA9DC();
}

uint64_t ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.secret1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20E6EA094();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.secret2.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
  return sub_20E67BCC0(v1 + *(int *)(v3 + 20), a1, &qword_254A2E7B0);
}

uint64_t ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;

  v32 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
  MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_20E6EA094();
  v5 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F948);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6E5BE4();
  v12 = v35;
  sub_20E6EA9AC();
  if (!v12)
  {
    v35 = v9;
    v31 = v5;
    v13 = (uint64_t)v34;
    v38 = 0;
    sub_20E66AE8C();
    v14 = v11;
    sub_20E6EA7FC();
    v16 = v36;
    v15 = v37;
    v38 = 1;
    sub_20E6EA7D8();
    v30 = v14;
    v18 = v36;
    v17 = v37;
    v36 = v16;
    v37 = v15;
    sub_20E66A990(v16, v15);
    sub_20E6EA07C();
    v28 = v15;
    v29 = v8;
    v26 = v7;
    v27 = v16;
    if (v17 >> 60 == 15)
    {
      v19 = 1;
    }
    else
    {
      v36 = v18;
      v37 = v17;
      sub_20E66A990(v18, v17);
      sub_20E6EA07C();
      v19 = 0;
    }
    v20 = v18;
    v21 = v32;
    v22 = v33;
    v23 = v31;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v13, v19, 1, v33);
    sub_20E6673F4(v27, v28);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v29);
    sub_20E66AA28(v20, v17);
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v21, v26, v22);
    v24 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
    sub_20E694D54(v13, v21 + *(int *)(v24 + 20));
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
  MEMORY[0x24BDAC7A8](v5);
  v23 = (uint64_t)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F958);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6E5BE4();
  sub_20E6EA9C4();
  v22 = v3;
  sub_20E6EA070();
  v12 = v24;
  v11 = v25;
  v26 = 0;
  sub_20E66AD88();
  sub_20E6EA88C();
  sub_20E6673F4(v12, v11);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v21 = v8;
  v14 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
  v15 = v23;
  sub_20E67BCC0(v22 + *(int *)(v14 + 20), v23, &qword_254A2E7B0);
  v16 = sub_20E6EA094();
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_20E67BD44(v15, &qword_254A2E7B0);
    v18 = 0;
    v19 = 0xF000000000000000;
  }
  else
  {
    sub_20E6EA070();
    v18 = v24;
    v19 = v25;
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  }
  v24 = v18;
  v25 = v19;
  v26 = 1;
  sub_20E6EA868();
  sub_20E66AA28(v18, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v10, v7);
}

uint64_t sub_20E6E4FD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.init(from:)(a1, a2);
}

uint64_t sub_20E6E4FE4(_QWORD *a1)
{
  return ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.encode(to:)(a1);
}

uint64_t sub_20E6E4FF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD v7[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  sub_20E6EA280();
  sub_20E6EA094();
  sub_20E6EA6B8();
  sub_20E6EA280();
  sub_20E67BCC0(v1 + *(int *)(a1 + 20), (uint64_t)v5, &qword_254A2E7B0);
  sub_20E6EA208();
  sub_20E6EA280();
  swift_bridgeObjectRelease();
  return v7[0];
}

uint64_t sub_20E6E50F8()
{
  sub_20E6E5C28();
  return sub_20E6EA9D0();
}

uint64_t sub_20E6E5120()
{
  sub_20E6E5C28();
  return sub_20E6EA9DC();
}

id ASCPublicKeyCredentialAssertionExtensionOutputs.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_20E6E51C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 *v12;
  char v13;
  uint64_t v14;
  __int128 v16;
  char v17;
  char v18;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F960);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1Tm(a1, a1[3]);
  sub_20E6E5C28();
  sub_20E6EA9C4();
  v12 = (__int128 *)(v3
                   + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_largeBlob);
  swift_beginAccess();
  v13 = *((_BYTE *)v12 + 16);
  v16 = *v12;
  v17 = v13;
  v18 = 0;
  sub_20E6E5C6C();
  sub_20E6EA868();
  if (!v2)
  {
    v14 = v3 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_prf;
    swift_beginAccess();
    sub_20E67BCC0(v14, (uint64_t)v7, &qword_254A2EDB8);
    v18 = 1;
    type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
    sub_20E67BD04(&qword_254A2F978, type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF, (uint64_t)&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF);
    sub_20E6EA868();
    sub_20E67BD44((uint64_t)v7, &qword_254A2EDB8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void *ASCPublicKeyCredentialAssertionExtensionOutputs.__allocating_init(from:)(_QWORD *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return ASCPublicKeyCredentialAssertionExtensionOutputs.init(from:)(a1);
}

void *ASCPublicKeyCredentialAssertionExtensionOutputs.init(from:)(_QWORD *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  objc_class *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  objc_super v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB8);
  MEMORY[0x24BDAC7A8](v4);
  v33 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2F980);
  v6 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v2[OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_largeBlob];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = -1;
  v10 = &v2[OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_prf];
  v11 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v36 = (uint64_t)v10;
  v12(v10, 1, 1, v11);
  v13 = a1[3];
  v37 = a1;
  v14 = __swift_project_boxed_opaque_existential_1Tm(a1, v13);
  sub_20E6E5C28();
  v15 = v2;
  v34 = v8;
  v16 = v43;
  sub_20E6EA9AC();
  if (v16)
  {
    v28 = v36;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
    sub_20E6B74A4(*(_QWORD *)v9, *((_QWORD *)v9 + 1), v9[16]);
    sub_20E67BD44(v28, &qword_254A2EDB8);

    type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v17 = v33;
    v42 = 0;
    sub_20E6E5CB0();
    sub_20E6EA7D8();
    v18 = v39;
    v19 = v40;
    v20 = v41;
    swift_beginAccess();
    v21 = *(_QWORD *)v9;
    v22 = *((_QWORD *)v9 + 1);
    *(_QWORD *)v9 = v18;
    *((_QWORD *)v9 + 1) = v19;
    v23 = v35;
    v24 = v9[16];
    v9[16] = v20;
    sub_20E6B74A4(v21, v22, v24);
    LOBYTE(v39) = 1;
    v25 = v34;
    sub_20E67BD04((unint64_t *)&unk_254A2F990, type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF, (uint64_t)&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF);
    v26 = (uint64_t)v17;
    v27 = v23;
    sub_20E6EA7D8();
    v30 = v36;
    swift_beginAccess();
    sub_20E6E5A04(v26, v30);
    swift_endAccess();

    v31 = (objc_class *)type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs(0);
    v38.receiver = v15;
    v38.super_class = v31;
    v14 = objc_msgSendSuper2(&v38, sel_init);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v25, v27);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
  }
  return v14;
}

void *sub_20E6E5734@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v5;
  void *result;

  v5 = objc_allocWithZone((Class)type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs(0));
  result = ASCPublicKeyCredentialAssertionExtensionOutputs.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_20E6E5788(_QWORD *a1)
{
  return sub_20E6E51C8(a1);
}

id sub_20E6E57A8(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  char *v15;
  uint64_t v16;
  objc_class *v17;
  uint64_t v19;
  uint64_t v20;
  objc_super v21;

  v20 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = &v1[OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_largeBlob];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = -1;
  v7 = (uint64_t)&v1[OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_prf];
  v8 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = a1 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_largeBlob;
  swift_beginAccess();
  v10 = *(_QWORD *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  LOBYTE(v9) = *(_BYTE *)(v9 + 16);
  swift_beginAccess();
  v13 = *(_QWORD *)v6;
  v12 = *((_QWORD *)v6 + 1);
  *(_QWORD *)v6 = v10;
  *((_QWORD *)v6 + 1) = v11;
  v14 = v6[16];
  v6[16] = v9;
  v15 = v1;
  sub_20E6E59EC(v10, v11, v9);
  sub_20E6B74A4(v13, v12, v14);
  v16 = v20 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_prf;
  swift_beginAccess();
  sub_20E67BCC0(v16, (uint64_t)v5, &qword_254A2EDB8);
  swift_beginAccess();
  sub_20E6E5A04((uint64_t)v5, v7);
  swift_endAccess();

  v17 = (objc_class *)type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs(0);
  v21.receiver = v15;
  v21.super_class = v17;
  return objc_msgSendSuper2(&v21, sel_init);
}

uint64_t sub_20E6E5960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_20E6E59A4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_20E6E59E0(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return sub_20E66A9D4(a1, a2);
  return a1;
}

uint64_t sub_20E6E59EC(uint64_t result, unint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_20E6E59E0(result, a2, a3 & 1);
  return result;
}

uint64_t sub_20E6E5A04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2EDB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_20E6E5A4C()
{
  unint64_t result;

  result = qword_254A2F8E8;
  if (!qword_254A2F8E8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F509C, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F8E8);
  }
  return result;
}

unint64_t sub_20E6E5A90()
{
  unint64_t result;

  result = qword_254A2F8F0;
  if (!qword_254A2F8F0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F504C, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.WriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F8F0);
  }
  return result;
}

unint64_t sub_20E6E5AD4()
{
  unint64_t result;

  result = qword_254A2F8F8;
  if (!qword_254A2F8F8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4FFC, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F8F8);
  }
  return result;
}

unint64_t sub_20E6E5B18()
{
  unint64_t result;

  result = qword_254A2F928;
  if (!qword_254A2F928)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4FAC, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F928);
  }
  return result;
}

unint64_t sub_20E6E5B5C()
{
  unint64_t result;

  result = qword_254A2F930;
  if (!qword_254A2F930)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult);
    atomic_store(result, (unint64_t *)&qword_254A2F930);
  }
  return result;
}

unint64_t sub_20E6E5BA0()
{
  unint64_t result;

  result = qword_254A2F940;
  if (!qword_254A2F940)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult);
    atomic_store(result, (unint64_t *)&qword_254A2F940);
  }
  return result;
}

unint64_t sub_20E6E5BE4()
{
  unint64_t result;

  result = qword_254A2F950;
  if (!qword_254A2F950)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4F5C, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F950);
  }
  return result;
}

unint64_t sub_20E6E5C28()
{
  unint64_t result;

  result = qword_254A2F968;
  if (!qword_254A2F968)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4F0C, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F968);
  }
  return result;
}

unint64_t sub_20E6E5C6C()
{
  unint64_t result;

  result = qword_254A2F970;
  if (!qword_254A2F970)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob);
    atomic_store(result, (unint64_t *)&qword_254A2F970);
  }
  return result;
}

unint64_t sub_20E6E5CB0()
{
  unint64_t result;

  result = qword_254A2F988;
  if (!qword_254A2F988)
  {
    result = MEMORY[0x212BC39A8](&protocol conformance descriptor for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob);
    atomic_store(result, (unint64_t *)&qword_254A2F988);
  }
  return result;
}

uint64_t sub_20E6E5CFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputs_prf;
  swift_beginAccess();
  return sub_20E67BCC0(v3, a2, &qword_254A2EDB8);
}

uint64_t sub_20E6E5D5C()
{
  return type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs(0);
}

void sub_20E6E5D64()
{
  unint64_t v0;

  sub_20E695C74(319, (unint64_t *)&unk_254A2F9B0, (void (*)(uint64_t))type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ASCPublicKeyCredentialAssertionExtensionOutputs()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionOutputs.encode(with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionOutputs.__allocating_init(coder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionOutputs.largeBlob.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionOutputs.largeBlob.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionOutputs.largeBlob.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionOutputs.prf.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x90))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionOutputs.prf.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionOutputs.prf.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionOutputs.encode(to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of ASCPublicKeyCredentialAssertionExtensionOutputs.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob;
}

uint64_t destroy for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult(uint64_t a1)
{
  return sub_20E6B74BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputsC9LargeBlobV15OperationResultOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_20E6E59E0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputsC9LargeBlobV15OperationResultOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_20E6E59E0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_20E6B74BC(v6, v7, v8);
  return a1;
}

uint64_t _s26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputsC9LargeBlobV15OperationResultOwta_0(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_20E6B74BC(v4, v5, v6);
  return a1;
}

uint64_t _s26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputsC9LargeBlobV15OperationResultOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputsC9LargeBlobV15OperationResultOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_20E6E60BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_20E6E60C4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult;
}

uint64_t *initializeBufferWithCopyOfBuffer for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_20E6EA094();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v11, (uint64_t *)v12, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = sub_20E6EA094();
  v5 = *(_QWORD *)(v4 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  return result;
}

char *initializeWithCopy for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = sub_20E6EA094();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = sub_20E6EA094();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v11, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

char *initializeWithTake for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = sub_20E6EA094();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t (*v12)(const void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;

  v6 = sub_20E6EA094();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v13 = v12(&a1[v9], 1, v6);
  v14 = v12(v11, 1, v6);
  if (!v13)
  {
    if (!v14)
    {
      v8(v10, v11, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v11, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6E6640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_20E6EA094();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_20E6E66C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_20E6EA094();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_254A2E7B0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_20E6E6744()
{
  unint64_t v0;
  unint64_t v1;

  sub_20E6EA094();
  if (v0 <= 0x3F)
  {
    sub_20E695C74(319, &qword_254A2E850, (void (*)(uint64_t))MEMORY[0x24BDC63E0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.CodingKeys;
}

uint64_t _s26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputsC10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_20E6E685C + 4 * byte_20E6F4855[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_20E6E6890 + 4 * byte_20E6F4850[v4]))();
}

uint64_t sub_20E6E6890(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6E6898(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x20E6E68A0);
  return result;
}

uint64_t sub_20E6E68AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x20E6E68B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_20E6E68B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_20E6E68C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.CodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.CodingKeys;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.ReadCodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.ReadCodingKeys;
}

uint64_t _s26AuthenticationServicesCore47ASCPublicKeyCredentialAssertionExtensionOutputsC9LargeBlobV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_20E6E692C + 4 * byte_20E6F485A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_20E6E694C + 4 * byte_20E6F485F[v4]))();
}

_BYTE *sub_20E6E692C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_20E6E694C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E6E6954(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E6E695C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_20E6E6964(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_20E6E696C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.WriteCodingKeys()
{
  return &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.WriteCodingKeys;
}

unint64_t sub_20E6E698C()
{
  unint64_t result;

  result = qword_254A2F9D0;
  if (!qword_254A2F9D0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4B4C, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.WriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F9D0);
  }
  return result;
}

unint64_t sub_20E6E69D4()
{
  unint64_t result;

  result = qword_254A2F9D8;
  if (!qword_254A2F9D8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4C04, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F9D8);
  }
  return result;
}

unint64_t sub_20E6E6A1C()
{
  unint64_t result;

  result = qword_254A2F9E0;
  if (!qword_254A2F9E0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4CBC, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F9E0);
  }
  return result;
}

unint64_t sub_20E6E6A64()
{
  unint64_t result;

  result = qword_254A2F9E8;
  if (!qword_254A2F9E8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4D74, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F9E8);
  }
  return result;
}

unint64_t sub_20E6E6AAC()
{
  unint64_t result;

  result = qword_254A2F9F0;
  if (!qword_254A2F9F0)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4E2C, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F9F0);
  }
  return result;
}

unint64_t sub_20E6E6AF4()
{
  unint64_t result;

  result = qword_254A2F9F8;
  if (!qword_254A2F9F8)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4EE4, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2F9F8);
  }
  return result;
}

unint64_t sub_20E6E6B3C()
{
  unint64_t result;

  result = qword_254A2FA00;
  if (!qword_254A2FA00)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4E54, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2FA00);
  }
  return result;
}

unint64_t sub_20E6E6B84()
{
  unint64_t result;

  result = qword_254A2FA08;
  if (!qword_254A2FA08)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4E7C, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2FA08);
  }
  return result;
}

unint64_t sub_20E6E6BCC()
{
  unint64_t result;

  result = qword_254A2FA10;
  if (!qword_254A2FA10)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4D9C, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2FA10);
  }
  return result;
}

unint64_t sub_20E6E6C14()
{
  unint64_t result;

  result = qword_254A2FA18;
  if (!qword_254A2FA18)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4DC4, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.PRF.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2FA18);
  }
  return result;
}

unint64_t sub_20E6E6C5C()
{
  unint64_t result;

  result = qword_254A2FA20;
  if (!qword_254A2FA20)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4CE4, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2FA20);
  }
  return result;
}

unint64_t sub_20E6E6CA4()
{
  unint64_t result;

  result = qword_254A2FA28;
  if (!qword_254A2FA28)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4D0C, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2FA28);
  }
  return result;
}

unint64_t sub_20E6E6CEC()
{
  unint64_t result;

  result = qword_254A2FA30;
  if (!qword_254A2FA30)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4B74, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2FA30);
  }
  return result;
}

unint64_t sub_20E6E6D34()
{
  unint64_t result;

  result = qword_254A2FA38;
  if (!qword_254A2FA38)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4B9C, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2FA38);
  }
  return result;
}

unint64_t sub_20E6E6D7C()
{
  unint64_t result;

  result = qword_254A2FA40;
  if (!qword_254A2FA40)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4ABC, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.WriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2FA40);
  }
  return result;
}

unint64_t sub_20E6E6DC4()
{
  unint64_t result;

  result = qword_254A2FA48;
  if (!qword_254A2FA48)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4AE4, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.WriteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2FA48);
  }
  return result;
}

unint64_t sub_20E6E6E0C()
{
  unint64_t result;

  result = qword_254A2FA50;
  if (!qword_254A2FA50)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4C2C, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2FA50);
  }
  return result;
}

unint64_t sub_20E6E6E54()
{
  unint64_t result;

  result = qword_254A2FA58;
  if (!qword_254A2FA58)
  {
    result = MEMORY[0x212BC39A8](&unk_20E6F4C54, &type metadata for ASCPublicKeyCredentialAssertionExtensionOutputs.LargeBlob.OperationResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_254A2FA58);
  }
  return result;
}

uint64_t sub_20E6E6E98(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x31746572636573 && a2 == 0xE700000000000000;
  if (v2 || (sub_20E6EA8EC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x32746572636573 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_20E6EA8EC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t SymmetricKey.rawData.getter()
{
  uint64_t v1;

  sub_20E6EA070();
  return v1;
}

Swift::String __swiftcall SymmetricKey.hexString()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String result;
  uint64_t v6;
  unint64_t v7;

  sub_20E6EA070();
  sub_20E6DE828(v6, v7);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_254A2EE80);
  sub_20E683634();
  v0 = sub_20E6EA184();
  v2 = v1;
  swift_bridgeObjectRelease();
  sub_20E6673F4(v6, v7);
  v3 = v0;
  v4 = v2;
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

uint64_t sub_20E6E708C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = MEMORY[0x24BEE0F88];
  v14[4] = MEMORY[0x24BDCFB90];
  v14[0] = a1;
  v14[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1Tm(v14, MEMORY[0x24BEE0F88]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = sub_20E6B2988(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = sub_20E6B2A48((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = sub_20E6B2AC0((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t UnsignedInteger<>.init<A>(littleEndianSequence:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t AssociatedTypeWitness;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;

  v29 = a5;
  v31 = a1;
  v32 = a4;
  v35 = a6;
  v34 = *(_QWORD *)(a2 - 8);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v26 - v13;
  v30 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v27 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v18 = (char *)&v26 - v17;
  v33 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 24);
  v19 = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](v19);
  swift_getAssociatedConformanceWitness();
  sub_20E6EA910();
  sub_20E6EA8C8();
  v32 = sub_20E6EA6DC();
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v27, v31, a3);
  v20 = v18;
  sub_20E6EA310();
  v29 = a3;
  v21 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  v22 = 0;
  while (1)
  {
    sub_20E6EA4B4();
    if ((v39 & 1) != 0)
    {
LABEL_5:
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v29);
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v20, v21);
    }
    v37 = v38;
    sub_20E6E748C();
    sub_20E6EA544();
    v36 = v22;
    sub_20E6E74D0();
    sub_20E6EA508();
    v23 = *(void (**)(char *, uint64_t))(v34 + 8);
    v23(v11, a2);
    sub_20E6EA730();
    result = ((uint64_t (*)(char *, uint64_t))v23)(v14, a2);
    v25 = v22 + 8;
    if (__OFADD__(v22, 8))
      break;
    v22 += 8;
    if (v25 >= v32)
      goto LABEL_5;
  }
  __break(1u);
  return result;
}

unint64_t sub_20E6E748C()
{
  unint64_t result;

  result = qword_254A2FA60;
  if (!qword_254A2FA60)
  {
    result = MEMORY[0x212BC39A8](MEMORY[0x24BEE4298], MEMORY[0x24BEE4260]);
    atomic_store(result, (unint64_t *)&qword_254A2FA60);
  }
  return result;
}

unint64_t sub_20E6E74D0()
{
  unint64_t result;

  result = qword_254A2FA68;
  if (!qword_254A2FA68)
  {
    result = MEMORY[0x212BC39A8](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_254A2FA68);
  }
  return result;
}

void UnsignedInteger<>.littleEndianData(preservingWidth:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  char v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  char v27;
  char *v28;
  unsigned int v29;
  char *v30;
  unsigned __int8 v31;
  BOOL v32;
  char v33;
  uint64_t v34;
  int v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t AssociatedConformanceWitness;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  v35 = a1;
  v46 = *MEMORY[0x24BDAC8D0];
  v34 = a3;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v36 = (char *)&v34 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v38 = (char *)&v34 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v34 - v13;
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v34 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v45 = xmmword_20E6EE5A0;
  v37 = v18;
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v43 = (char *)&v34 - v20;
  v40 = v19;
  ((void (*)(char *))v19)((char *)&v34 - v20);
  v41 = AssociatedTypeWitness;
  v42 = v4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_20E6EA910();
  sub_20E6EA8C8();
  sub_20E6EA4FC();
  v21 = *(void (**)(char *, uint64_t))(v37 + 8);
  v21(v14, a2);
  if ((sub_20E6EA538() & 1) != 0)
  {
    sub_20E6EA910();
    sub_20E6EA8C8();
    v22 = sub_20E6EA1A8();
    v21(v14, a2);
    if ((v22 & 1) == 0)
    {
LABEL_16:
      sub_20E6EA718();
      __break(1u);
      JUMPOUT(0x20E6E7CA0);
    }
  }
  v23 = sub_20E6EA52C();
  v24 = v38;
  if (v23 < 8)
  {
LABEL_15:
    sub_20E6EA520();
    v21(v17, a2);
    __asm { BR              X11 }
  }
  v40(v38, v17, a2);
  LOBYTE(v44) = -1;
  v25 = sub_20E6EA538();
  v26 = sub_20E6EA52C();
  if ((v25 & 1) != 0)
  {
    if (v26 <= 8)
    {
      sub_20E6EA910();
      sub_20E6EA8C8();
      v27 = sub_20E6EA190();
      v21(v14, a2);
      v28 = v24;
      v29 = v44;
      v30 = v36;
      v40(v36, v28, a2);
      if ((v27 & 1) != 0)
      {
        v31 = sub_20E6EA520();
        v21(v30, a2);
        v32 = v29 >= v31;
        v24 = v38;
        if (!v32)
          goto LABEL_16;
      }
      else
      {
        v21(v30, a2);
        v24 = v38;
      }
      goto LABEL_14;
    }
  }
  else if (v26 < 9)
  {
    sub_20E6EA520();
LABEL_14:
    v21(v24, a2);
    goto LABEL_15;
  }
  sub_20E6E748C();
  sub_20E6EA4F0();
  v33 = sub_20E6EA19C();
  v21(v14, a2);
  if ((v33 & 1) != 0)
    goto LABEL_16;
  goto LABEL_14;
}

uint64_t sub_20E6E7CC0(int a1, size_t a2)
{
  uint64_t v4;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_20E6EA718();
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x24BEE4AF8];
    v4 = sub_20E6EA358();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return v4;
  }
  return result;
}

void isClientWithAuditTokenProperlyEntitled_cold_1(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl(&dword_20E648000, log, OS_LOG_TYPE_FAULT, "Rejecting connection from unentitled process.", v1, 2u);
}

void __getWBUFeatureManagerClass_block_invoke_cold_1(_QWORD *a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "void *WebUILibrary(void)");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", v3, CFSTR("ASFeatureManager.m"), 28, CFSTR("%s"), *a1);

  __break(1u);
}

void __getWBUFeatureManagerClass_block_invoke_cold_2()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x24BDD1448], "currentHandler");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", "Class getWBUFeatureManagerClass(void)_block_invoke");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("ASFeatureManager.m"), 29, CFSTR("Unable to find class %s"), "WBUFeatureManager");

  __break(1u);
  sub_20E6E9908();
}

uint64_t sub_20E6E9908()
{
  return MEMORY[0x24BDCAF30]();
}

uint64_t sub_20E6E9914()
{
  return MEMORY[0x24BDCAFC0]();
}

uint64_t sub_20E6E9920()
{
  return MEMORY[0x24BDCB030]();
}

uint64_t sub_20E6E992C()
{
  return MEMORY[0x24BDCB070]();
}

uint64_t sub_20E6E9938()
{
  return MEMORY[0x24BDCB098]();
}

uint64_t sub_20E6E9944()
{
  return MEMORY[0x24BDCB0B0]();
}

uint64_t sub_20E6E9950()
{
  return MEMORY[0x24BDCB0C0]();
}

uint64_t sub_20E6E995C()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t sub_20E6E9968()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t sub_20E6E9974()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t sub_20E6E9980()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t sub_20E6E998C()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t sub_20E6E9998()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t sub_20E6E99A4()
{
  return MEMORY[0x24BDCB630]();
}

uint64_t sub_20E6E99B0()
{
  return MEMORY[0x24BDCB710]();
}

uint64_t sub_20E6E99BC()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t sub_20E6E99C8()
{
  return MEMORY[0x24BDCBAC0]();
}

uint64_t sub_20E6E99D4()
{
  return MEMORY[0x24BDCBAD0]();
}

uint64_t sub_20E6E99E0()
{
  return MEMORY[0x24BDCBAE8]();
}

uint64_t sub_20E6E99EC()
{
  return MEMORY[0x24BDCBB28]();
}

uint64_t sub_20E6E99F8()
{
  return MEMORY[0x24BDCBB68]();
}

uint64_t sub_20E6E9A04()
{
  return MEMORY[0x24BDCBB78]();
}

uint64_t sub_20E6E9A10()
{
  return MEMORY[0x24BDCBBA0]();
}

uint64_t sub_20E6E9A1C()
{
  return MEMORY[0x24BDCBBB0]();
}

uint64_t sub_20E6E9A28()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t sub_20E6E9A34()
{
  return MEMORY[0x24BDCBBD0]();
}

uint64_t sub_20E6E9A40()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t sub_20E6E9A4C()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t sub_20E6E9A58()
{
  return MEMORY[0x24BDCBC10]();
}

uint64_t sub_20E6E9A64()
{
  return MEMORY[0x24BDCC1E0]();
}

uint64_t sub_20E6E9A70()
{
  return MEMORY[0x24BDCC240]();
}

uint64_t sub_20E6E9A7C()
{
  return MEMORY[0x24BDCC248]();
}

uint64_t sub_20E6E9A88()
{
  return MEMORY[0x24BDCC250]();
}

uint64_t sub_20E6E9A94()
{
  return MEMORY[0x24BDCC258]();
}

uint64_t sub_20E6E9AA0()
{
  return MEMORY[0x24BDCCA20]();
}

uint64_t sub_20E6E9AAC()
{
  return MEMORY[0x24BDCCA40]();
}

uint64_t sub_20E6E9AB8()
{
  return MEMORY[0x24BDCCA48]();
}

uint64_t sub_20E6E9AC4()
{
  return MEMORY[0x24BDCCA60]();
}

uint64_t sub_20E6E9AD0()
{
  return MEMORY[0x24BDCCA88]();
}

uint64_t sub_20E6E9ADC()
{
  return MEMORY[0x24BDCCA90]();
}

uint64_t sub_20E6E9AE8()
{
  return MEMORY[0x24BDCD280]();
}

uint64_t sub_20E6E9AF4()
{
  return MEMORY[0x24BDCD288]();
}

uint64_t sub_20E6E9B00()
{
  return MEMORY[0x24BDCD290]();
}

uint64_t sub_20E6E9B0C()
{
  return MEMORY[0x24BDCD298]();
}

uint64_t sub_20E6E9B18()
{
  return MEMORY[0x24BDCD2A8]();
}

uint64_t sub_20E6E9B24()
{
  return MEMORY[0x24BDCD2B8]();
}

uint64_t sub_20E6E9B30()
{
  return MEMORY[0x24BDCD2C0]();
}

uint64_t sub_20E6E9B3C()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t sub_20E6E9B48()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_20E6E9B54()
{
  return MEMORY[0x24BDCD820]();
}

uint64_t sub_20E6E9B60()
{
  return MEMORY[0x24BDCD8D0]();
}

uint64_t sub_20E6E9B6C()
{
  return MEMORY[0x24BDCD988]();
}

uint64_t sub_20E6E9B78()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t sub_20E6E9B84()
{
  return MEMORY[0x24BDCD9D0]();
}

uint64_t sub_20E6E9B90()
{
  return MEMORY[0x24BDCD9D8]();
}

uint64_t sub_20E6E9B9C()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t sub_20E6E9BA8()
{
  return MEMORY[0x24BDCDA48]();
}

uint64_t sub_20E6E9BB4()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t sub_20E6E9BC0()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_20E6E9BCC()
{
  return MEMORY[0x24BDCDB50]();
}

uint64_t sub_20E6E9BD8()
{
  return MEMORY[0x24BDCDB60]();
}

uint64_t sub_20E6E9BE4()
{
  return MEMORY[0x24BDCDB78]();
}

uint64_t sub_20E6E9BF0()
{
  return MEMORY[0x24BE10120]();
}

uint64_t sub_20E6E9BFC()
{
  return MEMORY[0x24BDCDBC8]();
}

uint64_t sub_20E6E9C08()
{
  return MEMORY[0x24BDCDBE0]();
}

uint64_t sub_20E6E9C14()
{
  return MEMORY[0x24BDCDC08]();
}

uint64_t sub_20E6E9C20()
{
  return MEMORY[0x24BDCDC10]();
}

uint64_t sub_20E6E9C2C()
{
  return MEMORY[0x24BDCDC20]();
}

uint64_t sub_20E6E9C38()
{
  return MEMORY[0x24BDCDC28]();
}

uint64_t sub_20E6E9C44()
{
  return MEMORY[0x24BDCDC40]();
}

uint64_t sub_20E6E9C50()
{
  return MEMORY[0x24BDCDC58]();
}

uint64_t sub_20E6E9C5C()
{
  return MEMORY[0x24BDCDC68]();
}

uint64_t sub_20E6E9C68()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_20E6E9C74()
{
  return MEMORY[0x24BDCDCA8]();
}

uint64_t sub_20E6E9C80()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_20E6E9C8C()
{
  return MEMORY[0x24BDCDCF8]();
}

uint64_t sub_20E6E9C98()
{
  return MEMORY[0x24BDCDD20]();
}

uint64_t sub_20E6E9CA4()
{
  return MEMORY[0x24BDCDD78]();
}

uint64_t sub_20E6E9CB0()
{
  return MEMORY[0x24BDCDD88]();
}

uint64_t sub_20E6E9CBC()
{
  return MEMORY[0x24BDCDE70]();
}

uint64_t sub_20E6E9CC8()
{
  return MEMORY[0x24BDCE330]();
}

uint64_t sub_20E6E9CD4()
{
  return MEMORY[0x24BDCE780]();
}

uint64_t sub_20E6E9CE0()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t sub_20E6E9CEC()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_20E6E9CF8()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t sub_20E6E9D04()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t sub_20E6E9D10()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_20E6E9D1C()
{
  return MEMORY[0x24BE10160]();
}

uint64_t sub_20E6E9D28()
{
  return MEMORY[0x24BE10168]();
}

uint64_t sub_20E6E9D34()
{
  return MEMORY[0x24BE10170]();
}

uint64_t sub_20E6E9D40()
{
  return MEMORY[0x24BE10178]();
}

uint64_t sub_20E6E9D4C()
{
  return MEMORY[0x24BE10180]();
}

uint64_t sub_20E6E9D58()
{
  return MEMORY[0x24BE10190]();
}

uint64_t sub_20E6E9D64()
{
  return MEMORY[0x24BE10198]();
}

uint64_t sub_20E6E9D70()
{
  return MEMORY[0x24BE101A0]();
}

uint64_t sub_20E6E9D7C()
{
  return MEMORY[0x24BE101A8]();
}

uint64_t sub_20E6E9D88()
{
  return MEMORY[0x24BE101B0]();
}

uint64_t sub_20E6E9D94()
{
  return MEMORY[0x24BE101B8]();
}

uint64_t sub_20E6E9DA0()
{
  return MEMORY[0x24BE101C0]();
}

uint64_t sub_20E6E9DAC()
{
  return MEMORY[0x24BE101C8]();
}

uint64_t sub_20E6E9DB8()
{
  return MEMORY[0x24BE101D0]();
}

uint64_t sub_20E6E9DC4()
{
  return MEMORY[0x24BE5BF00]();
}

uint64_t sub_20E6E9DD0()
{
  return MEMORY[0x24BE5BF08]();
}

uint64_t sub_20E6E9DDC()
{
  return MEMORY[0x24BE5BF10]();
}

uint64_t sub_20E6E9DE8()
{
  return MEMORY[0x24BE5BFC0]();
}

uint64_t sub_20E6E9DF4()
{
  return MEMORY[0x24BE5BFC8]();
}

uint64_t sub_20E6E9E00()
{
  return MEMORY[0x24BE5C008]();
}

uint64_t sub_20E6E9E0C()
{
  return MEMORY[0x24BE5C010]();
}

uint64_t sub_20E6E9E18()
{
  return MEMORY[0x24BE5C018]();
}

uint64_t sub_20E6E9E24()
{
  return MEMORY[0x24BE5C038]();
}

uint64_t sub_20E6E9E30()
{
  return MEMORY[0x24BE5C048]();
}

uint64_t sub_20E6E9E3C()
{
  return MEMORY[0x24BE5C060]();
}

uint64_t sub_20E6E9E48()
{
  return MEMORY[0x24BE5C070]();
}

uint64_t sub_20E6E9E54()
{
  return MEMORY[0x24BE5C0A0]();
}

uint64_t sub_20E6E9E60()
{
  return MEMORY[0x24BE5C0E8]();
}

uint64_t sub_20E6E9E6C()
{
  return MEMORY[0x24BE5C128]();
}

uint64_t sub_20E6E9E78()
{
  return MEMORY[0x24BE5C160]();
}

uint64_t sub_20E6E9E84()
{
  return MEMORY[0x24BE5C1B0]();
}

uint64_t sub_20E6E9E90()
{
  return MEMORY[0x24BE5C1C0]();
}

uint64_t sub_20E6E9E9C()
{
  return MEMORY[0x24BE5C1C8]();
}

uint64_t sub_20E6E9EA8()
{
  return MEMORY[0x24BE5C1D0]();
}

uint64_t sub_20E6E9EB4()
{
  return MEMORY[0x24BE5C1E8]();
}

uint64_t sub_20E6E9EC0()
{
  return MEMORY[0x24BE5C270]();
}

uint64_t sub_20E6E9ECC()
{
  return MEMORY[0x24BE5C278]();
}

uint64_t sub_20E6E9ED8()
{
  return MEMORY[0x24BE5C298]();
}

uint64_t sub_20E6E9EE4()
{
  return MEMORY[0x24BE5C2C0]();
}

uint64_t sub_20E6E9EF0()
{
  return MEMORY[0x24BE5C2F0]();
}

uint64_t sub_20E6E9EFC()
{
  return MEMORY[0x24BE5C310]();
}

uint64_t sub_20E6E9F08()
{
  return MEMORY[0x24BE5C330]();
}

uint64_t sub_20E6E9F14()
{
  return MEMORY[0x24BE5C340]();
}

uint64_t sub_20E6E9F20()
{
  return MEMORY[0x24BE5C348]();
}

uint64_t sub_20E6E9F2C()
{
  return MEMORY[0x24BE5C350]();
}

uint64_t sub_20E6E9F38()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_20E6E9F44()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_20E6E9F50()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_20E6E9F5C()
{
  return MEMORY[0x24BE15A78]();
}

uint64_t sub_20E6E9F68()
{
  return MEMORY[0x24BE15A80]();
}

uint64_t sub_20E6E9F74()
{
  return MEMORY[0x24BE15A88]();
}

uint64_t sub_20E6E9F80()
{
  return MEMORY[0x24BE15A98]();
}

uint64_t sub_20E6E9F8C()
{
  return MEMORY[0x24BE15AA0]();
}

uint64_t sub_20E6E9F98()
{
  return MEMORY[0x24BE15AB8]();
}

uint64_t sub_20E6E9FA4()
{
  return MEMORY[0x24BE15AC0]();
}

uint64_t sub_20E6E9FB0()
{
  return MEMORY[0x24BE15AC8]();
}

uint64_t sub_20E6E9FBC()
{
  return MEMORY[0x24BE15AD8]();
}

uint64_t sub_20E6E9FC8()
{
  return MEMORY[0x24BEE76A0]();
}

uint64_t sub_20E6E9FD4()
{
  return MEMORY[0x24BDDFEE0]();
}

uint64_t sub_20E6E9FE0()
{
  return MEMORY[0x24BDDFEF0]();
}

uint64_t sub_20E6E9FEC()
{
  return MEMORY[0x24BDE0408]();
}

uint64_t sub_20E6E9FF8()
{
  return MEMORY[0x24BDE0428]();
}

uint64_t sub_20E6EA004()
{
  return MEMORY[0x24BDE0438]();
}

uint64_t sub_20E6EA010()
{
  return MEMORY[0x24BDE0440]();
}

uint64_t sub_20E6EA01C()
{
  return MEMORY[0x24BDE05E8]();
}

uint64_t sub_20E6EA028()
{
  return MEMORY[0x24BDE0660]();
}

uint64_t sub_20E6EA034()
{
  return MEMORY[0x24BDC62A8]();
}

uint64_t sub_20E6EA040()
{
  return MEMORY[0x24BDC62B0]();
}

uint64_t sub_20E6EA04C()
{
  return MEMORY[0x24BDC62C8]();
}

uint64_t sub_20E6EA058()
{
  return MEMORY[0x24BDC62E0]();
}

uint64_t sub_20E6EA064()
{
  return MEMORY[0x24BDC62F0]();
}

uint64_t sub_20E6EA070()
{
  return MEMORY[0x24BDC63A0]();
}

uint64_t sub_20E6EA07C()
{
  return MEMORY[0x24BDC63B0]();
}

uint64_t sub_20E6EA088()
{
  return MEMORY[0x24BDC63C0]();
}

uint64_t sub_20E6EA094()
{
  return MEMORY[0x24BDC63E0]();
}

uint64_t sub_20E6EA0A0()
{
  return MEMORY[0x24BDC6500]();
}

uint64_t sub_20E6EA0AC()
{
  return MEMORY[0x24BDC6510]();
}

uint64_t sub_20E6EA0B8()
{
  return MEMORY[0x24BDC6650]();
}

uint64_t sub_20E6EA0C4()
{
  return MEMORY[0x24BDC66C8]();
}

uint64_t sub_20E6EA0D0()
{
  return MEMORY[0x24BDC66D8]();
}

uint64_t sub_20E6EA0DC()
{
  return MEMORY[0x24BDC66E0]();
}

uint64_t sub_20E6EA0E8()
{
  return MEMORY[0x24BDC68B0]();
}

uint64_t sub_20E6EA0F4()
{
  return MEMORY[0x24BDC68B8]();
}

uint64_t sub_20E6EA100()
{
  return MEMORY[0x24BDC68D0]();
}

uint64_t sub_20E6EA10C()
{
  return MEMORY[0x24BDC68F8]();
}

uint64_t sub_20E6EA118()
{
  return MEMORY[0x24BDC6940]();
}

uint64_t sub_20E6EA124()
{
  return MEMORY[0x24BDC6968]();
}

uint64_t sub_20E6EA130()
{
  return MEMORY[0x24BDC6A70]();
}

uint64_t sub_20E6EA13C()
{
  return MEMORY[0x24BDC6AF8]();
}

uint64_t sub_20E6EA148()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_20E6EA154()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_20E6EA160()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t sub_20E6EA16C()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_20E6EA178()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_20E6EA184()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_20E6EA190()
{
  return MEMORY[0x24BEE07D8]();
}

uint64_t sub_20E6EA19C()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t sub_20E6EA1A8()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t sub_20E6EA1B4()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_20E6EA1C0()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_20E6EA1CC()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_20E6EA1D8()
{
  return MEMORY[0x24BDCFA38]();
}

uint64_t sub_20E6EA1E4()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t sub_20E6EA1F0()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_20E6EA1FC()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_20E6EA208()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_20E6EA214()
{
  return MEMORY[0x24BEE0A08]();
}

uint64_t sub_20E6EA220()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t sub_20E6EA22C()
{
  return MEMORY[0x24BEE0A80]();
}

uint64_t sub_20E6EA238()
{
  return MEMORY[0x24BEE0A88]();
}

uint64_t sub_20E6EA244()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t sub_20E6EA250()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_20E6EA25C()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t sub_20E6EA268()
{
  return MEMORY[0x24BEE0B80]();
}

uint64_t sub_20E6EA274()
{
  return MEMORY[0x24BEE0BB8]();
}

uint64_t sub_20E6EA280()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_20E6EA28C()
{
  return MEMORY[0x24BEE0C00]();
}

uint64_t sub_20E6EA298()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_20E6EA2A4()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_20E6EA2B0()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_20E6EA2BC()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t sub_20E6EA2C8()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_20E6EA2D4()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_20E6EA2E0()
{
  return MEMORY[0x24BEE0CE8]();
}

uint64_t sub_20E6EA2EC()
{
  return MEMORY[0x24BEE0DC8]();
}

uint64_t sub_20E6EA2F8()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_20E6EA304()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_20E6EA310()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_20E6EA31C()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_20E6EA328()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_20E6EA334()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_20E6EA340()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_20E6EA34C()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_20E6EA358()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_20E6EA364()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_20E6EA370()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t sub_20E6EA37C()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t sub_20E6EA388()
{
  return MEMORY[0x24BEE6AD0]();
}

uint64_t sub_20E6EA394()
{
  return MEMORY[0x24BEE6B28]();
}

uint64_t sub_20E6EA3A0()
{
  return MEMORY[0x24BDCFCC0]();
}

uint64_t sub_20E6EA3AC()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_20E6EA3B8()
{
  return MEMORY[0x24BDCFDF8]();
}

uint64_t sub_20E6EA3C4()
{
  return MEMORY[0x24BDCFED8]();
}

uint64_t sub_20E6EA3D0()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_20E6EA3DC()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_20E6EA3E8()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_20E6EA3F4()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_20E6EA400()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_20E6EA40C()
{
  return MEMORY[0x24BEE5658]();
}

uint64_t sub_20E6EA418()
{
  return MEMORY[0x24BEE5770]();
}

uint64_t sub_20E6EA424()
{
  return MEMORY[0x24BDD00B8]();
}

uint64_t sub_20E6EA430()
{
  return MEMORY[0x24BDD00D0]();
}

uint64_t sub_20E6EA43C()
{
  return MEMORY[0x24BDD00E0]();
}

uint64_t sub_20E6EA448()
{
  return MEMORY[0x24BDD0170]();
}

uint64_t sub_20E6EA454()
{
  return MEMORY[0x24BDD01F8]();
}

uint64_t sub_20E6EA460()
{
  return MEMORY[0x24BEE5BB8]();
}

uint64_t sub_20E6EA46C()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_20E6EA478()
{
  return MEMORY[0x24BEE5BD0]();
}

uint64_t sub_20E6EA484()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_20E6EA490()
{
  return MEMORY[0x24BEE1DB8]();
}

uint64_t sub_20E6EA49C()
{
  return MEMORY[0x24BEE1DF0]();
}

uint64_t sub_20E6EA4A8()
{
  return MEMORY[0x24BEE1E60]();
}

uint64_t sub_20E6EA4B4()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t sub_20E6EA4C0()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_20E6EA4CC()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_20E6EA4D8()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t sub_20E6EA4E4()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t sub_20E6EA4F0()
{
  return MEMORY[0x24BEE1FD0]();
}

uint64_t sub_20E6EA4FC()
{
  return MEMORY[0x24BEE1FD8]();
}

uint64_t sub_20E6EA508()
{
  return MEMORY[0x24BEE2028]();
}

uint64_t sub_20E6EA514()
{
  return MEMORY[0x24BEE2040]();
}

uint64_t sub_20E6EA520()
{
  return MEMORY[0x24BEE2068]();
}

uint64_t sub_20E6EA52C()
{
  return MEMORY[0x24BEE2070]();
}

uint64_t sub_20E6EA538()
{
  return MEMORY[0x24BEE2078]();
}

uint64_t sub_20E6EA544()
{
  return MEMORY[0x24BEE20A0]();
}

uint64_t sub_20E6EA550()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t sub_20E6EA55C()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_20E6EA568()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t sub_20E6EA574()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t sub_20E6EA580()
{
  return MEMORY[0x24BEE2330]();
}

uint64_t sub_20E6EA58C()
{
  return MEMORY[0x24BEE2340]();
}

uint64_t sub_20E6EA598()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t sub_20E6EA5A4()
{
  return MEMORY[0x24BEE23A0]();
}

uint64_t sub_20E6EA5B0()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t sub_20E6EA5BC()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_20E6EA5C8()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_20E6EA5D4()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_20E6EA5E0()
{
  return MEMORY[0x24BEE24C8]();
}

uint64_t sub_20E6EA5EC()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_20E6EA5F8()
{
  return MEMORY[0x24BEE2500]();
}

uint64_t sub_20E6EA604()
{
  return MEMORY[0x24BEE2508]();
}

uint64_t sub_20E6EA610()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_20E6EA61C()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_20E6EA628()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_20E6EA634()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_20E6EA640()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_20E6EA64C()
{
  return MEMORY[0x24BEE2730]();
}

uint64_t sub_20E6EA658()
{
  return MEMORY[0x24BEE2750]();
}

uint64_t sub_20E6EA664()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_20E6EA670()
{
  return MEMORY[0x24BEE2840]();
}

uint64_t sub_20E6EA67C()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_20E6EA688()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_20E6EA694()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_20E6EA6A0()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_20E6EA6AC()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_20E6EA6B8()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_20E6EA6C4()
{
  return MEMORY[0x24BEE2CB8]();
}

uint64_t sub_20E6EA6D0()
{
  return MEMORY[0x24BEE2CC8]();
}

uint64_t sub_20E6EA6DC()
{
  return MEMORY[0x24BEE2D18]();
}

uint64_t sub_20E6EA6E8()
{
  return MEMORY[0x24BEE2EA8]();
}

uint64_t sub_20E6EA6F4()
{
  return MEMORY[0x24BEE2EE0]();
}

uint64_t sub_20E6EA700()
{
  return MEMORY[0x24BEE2F08]();
}

uint64_t sub_20E6EA70C()
{
  return MEMORY[0x24BEE2F18]();
}

uint64_t sub_20E6EA718()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_20E6EA724()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_20E6EA730()
{
  return MEMORY[0x24BEE2F78]();
}

uint64_t sub_20E6EA73C()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_20E6EA748()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_20E6EA754()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_20E6EA760()
{
  return MEMORY[0x24BEE3090]();
}

uint64_t sub_20E6EA76C()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_20E6EA778()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_20E6EA784()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_20E6EA790()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_20E6EA79C()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_20E6EA7A8()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_20E6EA7B4()
{
  return MEMORY[0x24BEE32E0]();
}

uint64_t sub_20E6EA7C0()
{
  return MEMORY[0x24BEE32F8]();
}

uint64_t sub_20E6EA7CC()
{
  return MEMORY[0x24BEE3300]();
}

uint64_t sub_20E6EA7D8()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_20E6EA7E4()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_20E6EA7F0()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_20E6EA7FC()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_20E6EA808()
{
  return MEMORY[0x24BEE3398]();
}

uint64_t sub_20E6EA814()
{
  return MEMORY[0x24BEE33A8]();
}

uint64_t sub_20E6EA820()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_20E6EA82C()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_20E6EA838()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_20E6EA844()
{
  return MEMORY[0x24BEE3430]();
}

uint64_t sub_20E6EA850()
{
  return MEMORY[0x24BEE3448]();
}

uint64_t sub_20E6EA85C()
{
  return MEMORY[0x24BEE3450]();
}

uint64_t sub_20E6EA868()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_20E6EA874()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_20E6EA880()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_20E6EA88C()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_20E6EA898()
{
  return MEMORY[0x24BEE34E8]();
}

uint64_t sub_20E6EA8A4()
{
  return MEMORY[0x24BEE34F8]();
}

uint64_t sub_20E6EA8B0()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_20E6EA8BC()
{
  return MEMORY[0x24BEE3880]();
}

uint64_t sub_20E6EA8C8()
{
  return MEMORY[0x24BEE39E0]();
}

uint64_t sub_20E6EA8D4()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t sub_20E6EA8E0()
{
  return MEMORY[0x24BEE3A28]();
}

uint64_t sub_20E6EA8EC()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_20E6EA8F8()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t sub_20E6EA904()
{
  return MEMORY[0x24BEE3D98]();
}

uint64_t sub_20E6EA910()
{
  return MEMORY[0x24BEE3DD8]();
}

uint64_t sub_20E6EA91C()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_20E6EA928()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_20E6EA934()
{
  return MEMORY[0x24BDD06E0]();
}

uint64_t sub_20E6EA940()
{
  return MEMORY[0x24BDD06F0]();
}

uint64_t sub_20E6EA94C()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_20E6EA958()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_20E6EA964()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_20E6EA970()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_20E6EA97C()
{
  return MEMORY[0x24BDD0730]();
}

uint64_t sub_20E6EA988()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_20E6EA994()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_20E6EA9A0()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_20E6EA9AC()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_20E6EA9B8()
{
  return MEMORY[0x24BEE4630]();
}

uint64_t sub_20E6EA9C4()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_20E6EA9D0()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_20E6EA9DC()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_20E6EA9E8()
{
  return MEMORY[0x24BEE4A98]();
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x24BDAC0E8](*(_QWORD *)&op, *(_QWORD *)&alg, *(_QWORD *)&options, key, keyLength, iv, dataIn, dataInLength);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x24BDBC920](allocator, flags, error, dictionary, timeout);
}

SInt32 CFUserNotificationDisplayAlert(CFTimeInterval timeout, CFOptionFlags flags, CFURLRef iconURL, CFURLRef soundURL, CFURLRef localizationURL, CFStringRef alertHeader, CFStringRef alertMessage, CFStringRef defaultButtonTitle, CFStringRef alternateButtonTitle, CFStringRef otherButtonTitle, CFOptionFlags *responseFlags)
{
  return MEMORY[0x24BDBC930](flags, iconURL, soundURL, localizationURL, alertHeader, alertMessage, defaultButtonTitle, alternateButtonTitle, timeout);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return MEMORY[0x24BDBC950](userNotification, responseFlags, timeout);
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x24BE67168]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x24BDD0B80](aClassName);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x24BDD1268](aSelector);
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x24BE74F60]();
}

uint64_t PLShouldLogRegisteredEvent()
{
  return MEMORY[0x24BE74F68]();
}

uint64_t TCCAccessCheckAuditToken()
{
  return MEMORY[0x24BEB3750]();
}

uint64_t WBSApplicationIdentifierFromAuditToken()
{
  return MEMORY[0x24BE82E18]();
}

uint64_t WBSAuditTokenHasEntitlement()
{
  return MEMORY[0x24BE82E20]();
}

uint64_t WBSAuthenticationPolicyForPasswordManager()
{
  return MEMORY[0x24BE82E28]();
}

uint64_t WBSAuthenticationServicesAgentAutoFillServiceName()
{
  return MEMORY[0x24BE82E30]();
}

uint64_t WBSAuthenticationServicesAgentDelegateInterface()
{
  return MEMORY[0x24BE82E50]();
}

uint64_t WBSAuthenticationServicesAgentInterface()
{
  return MEMORY[0x24BE82E58]();
}

uint64_t WBSIsEqual()
{
  return MEMORY[0x24BE82E88]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t _WBSLocalizedString()
{
  return MEMORY[0x24BE82FF8]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x24BDACB00](dso, description, activity, *(_QWORD *)&flags);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x24BEAE670]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADDE0](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADDF0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEC8](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x24BDAE148]();
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x24BDAE710](a1);
}

uid_t getuid(void)
{
  return MEMORY[0x24BDAE788]();
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

nw_endpoint_t nw_endpoint_create_host(const char *hostname, const char *port)
{
  return (nw_endpoint_t)MEMORY[0x24BDE0E88](hostname, port);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x24BEDD030](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x24BEDD088](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x24BEDD0C0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD458](a1);
}

void os_activity_apply(os_activity_t activity, os_block_t block)
{
  MEMORY[0x24BDAF290](activity, block);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x24BDAF400](log);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x24BEE71E0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x24BEE71E8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x24BEE71F0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x24BEE4C70]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x24BEE4F78]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

