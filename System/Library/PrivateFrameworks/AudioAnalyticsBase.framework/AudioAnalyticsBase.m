uint64_t destroy for SimpleType(uint64_t a1)
{
  return sub_236B8C2D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

ValueMetadata *type metadata accessor for SimpleType()
{
  return &type metadata for SimpleType;
}

uint64_t getEnumTagSinglePayload for SimpleType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t Message.content.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t storeEnumTagSinglePayload for SimpleType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Message(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for Message()
{
  return &type metadata for Message;
}

uint64_t storeEnumTagSinglePayload for Message(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t Message.type.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 4);
}

ValueMetadata *type metadata accessor for Config.WorkerConfigs()
{
  return &type metadata for Config.WorkerConfigs;
}

ValueMetadata *type metadata accessor for Keys()
{
  return &type metadata for Keys;
}

uint64_t dispatch thunk of WorkerProtocol.process(message:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for Message.Metadata()
{
  return &type metadata for Message.Metadata;
}

uint64_t Config.WorkerConfigs.messageProcessOrder.getter()
{
  char *v0;

  return byte_236BD1430[*v0];
}

uint64_t dispatch thunk of WorkerProtocol.workerConfig.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

_BYTE *sub_236B84E9C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

uint64_t Message.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_BYTE *)(v1 + 41);
  v3 = *(_BYTE *)(v1 + 42);
  v5 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v6 = *(_BYTE *)(v1 + 64);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v6;
  return swift_bridgeObjectRetain();
}

uint64_t destroy for Message.Metadata()
{
  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for SummaryConfig()
{
  return &type metadata for SummaryConfig;
}

uint64_t CommonConfigFields.audioServiceType.getter()
{
  unsigned __int16 *v0;

  return *v0 | (*((unsigned __int8 *)v0 + 2) << 16);
}

uint64_t Message.category.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t dispatch thunk of SessionProtocol.isSingleMessageSession.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t CommonConfigFields.hostApplicationDisplayIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommonConfigFields.clientProcessNames.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t RouterConfig.audioEventCategory.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 60) | ((unint64_t)*(unsigned __int8 *)(v0 + 64) << 32);
}

uint64_t RouterConfig.audioEventType.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 56) | (*(unsigned __int8 *)(v0 + 58) << 16);
}

uint64_t SummaryConfig.interestedInFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Message.Metadata.isRedundant.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

ValueMetadata *type metadata accessor for SystemMonitorConfig.DataType()
{
  return &type metadata for SystemMonitorConfig.DataType;
}

ValueMetadata *type metadata accessor for SystemMonitorConfig.MonitorType()
{
  return &type metadata for SystemMonitorConfig.MonitorType;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

double Message.timestamp.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t dispatch thunk of SessionProtocol.serviceType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_236B84FA4(_QWORD *a1, unsigned __int8 *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

ValueMetadata *type metadata accessor for CommonConfigFields()
{
  return &type metadata for CommonConfigFields;
}

uint64_t static DeviceUtilities.isInternalBuild.getter()
{
  return sub_236B84FA4(&qword_2542AF188, (unsigned __int8 *)byte_2542AF5AE);
}

uint64_t (*Message.metadata.modify())()
{
  return nullsub_1;
}

uint64_t Config.routerConfigs.getter()
{
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for RouterConfig()
{
  return &type metadata for RouterConfig;
}

uint64_t RouterConfig.workers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RouterConfig.discard.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 66);
}

unint64_t static Utilities.serviceTypeDescription(from:)(unsigned __int16 a1)
{
  int v1;
  unint64_t result;

  v1 = a1;
  result = 0x6E6F6870656C6574;
  switch(v1)
  {
    case 0:
      result = 0x636972656E6567;
      break;
    case 1:
      result = 1769105779;
      break;
    case 2:
      return result;
    case 3:
      result = 0x73636974706168;
      break;
    case 4:
      result = 0x736D72616C61;
      break;
    case 5:
      result = 0x6F6C41646E617473;
      break;
    case 6:
      result = 0x747541646E756F73;
      break;
    case 7:
      result = 0x6D726F46676E6F6CLL;
      break;
    case 8:
    case 9:
      result = 0xD000000000000010;
      break;
    case 10:
      result = 0x737472656C61;
      break;
    case 11:
      result = 1953719668;
      break;
    case 12:
      result = 0x6567617355697061;
      break;
    case 13:
      result = 0x6F536D6574737973;
      break;
    case 14:
      result = 0x616E41646E756F73;
      break;
    case 15:
      result = 0x657275636573;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t dispatch thunk of WorkerProtocol.init(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_236B85248(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t SummaryConfig.requiredEventFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SummaryConfig.defaultValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of WorkerProtocol.start()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_236B8526C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for Message.Metadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t static Logger.session.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AF270, (uint64_t)qword_2542AFCB8, a1);
}

uint64_t static Constants.unknownReporterID.getter()
{
  if (qword_2542AFB70 != -1)
    swift_once();
  return qword_2542B0020;
}

ValueMetadata *type metadata accessor for OperatingSystem()
{
  return &type metadata for OperatingSystem;
}

uint64_t SummaryConfig.dynamicCreationForKeys.getter()
{
  return swift_bridgeObjectRetain();
}

BOOL static Utilities.isABTestModeEnabled(for:)(int a1)
{
  return (a1 - 0x10000) < 0xFFFEFFFF;
}

ValueMetadata *type metadata accessor for ABCConfig.ABCInstanceName()
{
  return &type metadata for ABCConfig.ABCInstanceName;
}

uint64_t Message.Metadata.requiresSummaryDecoration.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t Message.Metadata.isSessionStarted.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t Message.Metadata.isSessionStarted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t Message.Metadata.isRedundant.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t Message.Metadata.isBroadcast.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t SummaryConfig.isRunningFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Config.summaryConfigs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SummaryConfig.isDecoratorOnly.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 161);
}

uint64_t SummaryConfig.isDecorator.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

Swift::Void __swiftcall Message.addToContent(from:)(Swift::OpaquePointer from)
{
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;

  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0x8000000000000000;
  sub_236B8BC98((uint64_t)from._rawValue, (uint64_t)sub_236B8C374, 0, isUniquelyReferenced_nonNull_native, &v4);
  *(_QWORD *)(v1 + 8) = v4;
  swift_bridgeObjectRelease();
}

uint64_t sub_236B85484(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_236BD001C();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_236B8F4D4(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t static Utilities.processName(for:)(int a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  size_t v6;
  _BYTE v7[37];
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  int v12;
  __int128 v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v26[28];
  __int128 v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[28];
  uint64_t v36;
  __int16 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  __int128 v47;
  __int16 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int16 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF78);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_236BD1320;
  *(_QWORD *)(v2 + 32) = 0xE00000001;
  *(_DWORD *)(v2 + 40) = 1;
  *(_DWORD *)(v2 + 44) = a1;
  memset(v7, 0, sizeof(v7));
  v8 = 0;
  v9 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v23 = 0;
  v36 = 0;
  v37 = 0;
  v42 = 0;
  v49 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0;
  v15 = 0;
  v13 = 0u;
  v14 = 0u;
  v21 = 0;
  v22 = 0;
  v20 = 0u;
  v25 = 0u;
  memset(v26, 0, sizeof(v26));
  v27 = 0u;
  v24 = 0;
  v28 = 0;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  memset(v35, 0, sizeof(v35));
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v43 = 0u;
  v45 = 0;
  v44 = 0;
  v46 = 0u;
  v47 = 0u;
  v48 = 0;
  v50 = 0u;
  v52 = 0;
  v51 = 0;
  v53 = 0u;
  v54 = 0u;
  v6 = 648;
  v3 = sysctl((int *)(v2 + 32), 4u, v7, &v6, 0, 0);
  if (v3 == sub_236BCF8D8())
  {
    v4 = sub_236BCFA64();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v4;
}

double static Double.now()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  double v5;
  uint64_t v7;

  v0 = sub_236BCF878();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8]();
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_236BCF86C();
  sub_236BCF860();
  v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

uint64_t sub_236B857E4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF80);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236B85940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF48);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * v4 - 64;
  v5 = sub_236B8FE04(&v7, (_BYTE *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_236B96E24();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

void OSAllocatedUnfairLock.load<A>(_:)(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v2;

  v2 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(_QWORD *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v2);
  swift_getAtKeyPath();
  os_unfair_lock_unlock(v2);
}

uint64_t Message.appName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_236B85AB0@<X0>(char a1@<W0>, _BYTE *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  v6 = *v3;
  sub_236BD0028();
  swift_bridgeObjectRetain();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  v7 = sub_236BD0064();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    v11 = *(_QWORD *)&aRoot_1[8 * a1];
    while (*(_QWORD *)&aRoot_1[8 * *(char *)(*(_QWORD *)(v6 + 48) + v9)] != v11)
    {
      v12 = sub_236BCFF98();
      swift_bridgeObjectRelease_n();
      if ((v12 & 1) != 0)
        goto LABEL_8;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    v16 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_236BB7950((uint64_t *)&unk_256442D60);
      v15 = v16;
    }
    *a2 = *(_BYTE *)(*(_QWORD *)(v15 + 48) + v9);
    sub_236BB7C94(v9);
    *v3 = v16;
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    result = swift_bridgeObjectRelease();
    *a2 = 3;
  }
  return result;
}

uint64_t Message.appName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = a2;
  return result;
}

uint64_t Config.rtcConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_WORD *)(v1 + 112);
  v3 = *(_BYTE *)(v1 + 114);
  v4 = *(_QWORD *)(v1 + 120);
  v5 = *(_QWORD *)(v1 + 128);
  v6 = *(_QWORD *)(v1 + 136);
  v7 = *(_QWORD *)(v1 + 144);
  v8 = *(_QWORD *)(v1 + 152);
  v9 = *(_QWORD *)(v1 + 160);
  v10 = *(_QWORD *)(v1 + 168);
  v11 = *(_QWORD *)(v1 + 176);
  v12 = *(_QWORD *)(v1 + 184);
  v13 = *(_QWORD *)(v1 + 192);
  *(_WORD *)a1 = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void *SummaryConfig.isRunningPredicate.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 96);
  v2 = v1;
  return v1;
}

uint64_t sub_236B85D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(_QWORD *)(v3 + 32);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  sub_236B85DD4((uint64_t *)(v7 + 16), a1, a2, a3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  return swift_release();
}

uint64_t *sub_236B85DD4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v5 = *result;
  if (*result && *(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = sub_236B8BFC0(a2, a3);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(v5 + 56) + 24 * v8;
      v11 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)a4 = *(_QWORD *)v10;
      *(_QWORD *)(a4 + 8) = v12;
      v13 = *(_BYTE *)(v10 + 16);
      *(_BYTE *)(a4 + 16) = v13;
      sub_236B8C348(v11, v12, v13);
      return (uint64_t *)swift_bridgeObjectRelease();
    }
    result = (uint64_t *)swift_bridgeObjectRelease();
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = -1;
  return result;
}

Swift::Void __swiftcall OsTransactionHandler.sessionStarted(for:)(Swift::Int64 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  Swift::Int64 v14;
  uint64_t v15;

  v2 = v1;
  v4 = sub_236BCF878();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 16) + 16);
  os_unfair_lock_lock(v8);
  if (!*(_QWORD *)(v2 + 24))
  {
    *(_QWORD *)(v2 + 24) = os_transaction_create();
    swift_unknownObjectRelease();
    sub_236BCF86C();
    sub_236BCF860();
    v10 = v9;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC18AudioAnalyticsBase20OsTransactionHandler_lastActiveTime) = v10;
    v11 = sub_236BCF8A8();
    v12 = sub_236BCFC20();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v13 = 134217984;
      v14 = a1;
      sub_236BCFCC8();
      _os_log_impl(&dword_236B83000, v11, v12, "Marking dirty, created OsTransaction. { reporterID=%lld }", v13, 0xCu);
      MEMORY[0x23B7FE96C](v13, -1, -1);
    }

  }
  swift_beginAccess();
  sub_236B85484(&v15, a1);
  swift_endAccess();
  os_unfair_lock_unlock(v8);
}

BOOL Message.shouldRetain.getter()
{
  uint64_t v0;
  char v1;
  BOOL v2;

  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16)
    && (sub_236B8BFC0(0xD00000000000001BLL, 0x8000000236BD5C20), (v1 & 1) != 0)
    && SimpleType.isTrue()();
  return v2;
}

uint64_t Preference.init(_:initValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD v6[4];

  v6[0] = a1;
  v6[1] = a2;
  v6[2] = 0xD00000000000001FLL;
  v6[3] = 0x8000000236BD59C0;
  return Preference.init(_:initValue:)((uint64_t)v6, a3, a4, a4, a5);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_QWORD *)(a5 + 16) = v8;
  *(_QWORD *)(a5 + 24) = v9;
  v10 = type metadata accessor for Preference(0, a3, a3, a4);
  v11 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a5 + *(int *)(v10 + 32), a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(a5 + *(int *)(v10 + 28), a2, a3);
}

uint64_t type metadata accessor for Preference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Preference);
}

uint64_t sub_236B86180()
{
  os_unfair_lock_s *v0;
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  if (qword_2542AF1F8 != -1)
    swift_once();
  v0 = (os_unfair_lock_s *)((char *)off_2542AFB50 + 24);
  swift_retain();
  os_unfair_lock_lock(v0);
  sub_236B902D8();
  os_unfair_lock_unlock(v0);
  swift_release();
  v1 = (os_unfair_lock_s *)off_2542AFB50;
  swift_retain();
  os_unfair_lock_lock(v1 + 6);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1 + 6);
  swift_release();
  if (qword_2542AFB68 != -1)
    swift_once();
  v2 = (os_unfair_lock_s *)off_2542AFB58;
  swift_retain();
  v3 = swift_bridgeObjectRetain();
  v4 = sub_236B85940(v3);
  swift_bridgeObjectRelease();
  v10 = v4;
  sub_236B8FF98(&v10);
  swift_bridgeObjectRelease();
  v5 = sub_236BAF380(v10);
  swift_release();
  v10 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
  sub_236B8D728((unint64_t *)&qword_2542AFDD0, &qword_2542AFDC8, MEMORY[0x24BEE12B0]);
  v6 = sub_236BCF974();
  v8 = v7;
  swift_bridgeObjectRelease();
  os_unfair_lock_lock(v2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v2[4]._os_unfair_lock_opaque = v6;
  *(_QWORD *)&v2[6]._os_unfair_lock_opaque = v8;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v2 + 8);
  swift_bridgeObjectRelease();
  return swift_release();
}

void _s18AudioAnalyticsBase10SimpleTypeO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X9 }
}

BOOL sub_236B863AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;

  if (v5)
  {
    sub_236B8C348(v0, v1, v5);
    sub_236B8C2D4(v2, v3, v4);
    sub_236B8C2D4(v0, v1, v5);
    return 0;
  }
  else
  {
    sub_236B8C2D4(v2, v3, 0);
    sub_236B8C2D4(v0, v1, 0);
    return v2 == v0;
  }
}

uint64_t sub_236B86610(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (a1 + v6 + 32) & ~v6;
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v7, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)((*(_QWORD *)(v5 + 64) + v6 + v7) & ~v6, v4);
}

uint64_t SummaryConfig.commonFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 2);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  *(_WORD *)a1 = *(_WORD *)v1;
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t assignWithTake for Message(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void *RouterConfig.predicate.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 48);
  v2 = v1;
  return v1;
}

uint64_t sub_236B867C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_236BCF8C0();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t static Utilities.ringBufferAudioCapturesEnabled()()
{
  uint64_t v0;
  char v1;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;

  v0 = sub_236B86A54();
  v4 = (v1 & 1) == 0 && v0 > 0 && v0 < 4;
  v5 = sub_236B86CF0();
  if (v6)
    v7 = v5;
  else
    v7 = 0;
  if (v6)
    v8 = v6;
  else
    v8 = 0xE000000000000000;
  if (v7 == 0x74726F6853 && v8 == 0xE500000000000000
    || (sub_236BCFF98() & 1) != 0
    || v7 == 0x6D756964654DLL && v8 == 0xE600000000000000
    || (sub_236BCFF98() & 1) != 0
    || v7 == 1735290700 && v8 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v9 = 1;
  }
  else
  {
    v9 = sub_236BCFF98();
    swift_bridgeObjectRelease();
  }
  v10 = sub_236B86A54();
  if ((v11 & 1) != 0 || v10 <= 1)
  {
    v12 = v4 | v9;
  }
  else if (v4)
  {
    v12 = 1;
  }
  else
  {
    v12 = v9 | ((unint64_t)v10 < 5);
  }
  return v12 & 1;
}

uint64_t sub_236B86A54()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  CFPropertyListRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  CFPropertyListRef v19;
  char v20;

  v0 = (__CFString *)sub_236BCF998();
  CFPreferencesAppSynchronize(v0);

  v1 = (__CFString *)sub_236BCF998();
  v2 = (__CFString *)sub_236BCF998();
  v3 = (__CFString *)sub_236BCF998();
  v4 = CFPreferencesCopyValue(v1, v2, v3, (CFStringRef)*MEMORY[0x24BDBD570]);

  v19 = v4;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF88);
  if (swift_dynamicCast())
  {
    v5 = v16;
    sub_236B885DC();
    swift_unknownObjectRelease();
    return v5;
  }
  v6 = MEMORY[0x24BEE1768];
  result = swift_conformsToProtocol2();
  if (result)
  {
    if (v4 && (v8 = result, v19 = v4, swift_unknownObjectRetain(), (swift_dynamicCast() & 1) != 0))
    {
      v9 = sub_236BCFCB0();
      v10 = *(_QWORD *)(v9 - 8);
      MEMORY[0x24BDAC7A8]();
      v12 = (char *)&v16 - v11;
      sub_236BCFF80();
      v13 = *(_QWORD *)(v6 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v6) == 1)
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        v18 = 0;
        v16 = 0u;
        v17 = 0u;
      }
      else
      {
        *((_QWORD *)&v17 + 1) = v6;
        v18 = v8;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v16);
        (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v12, v6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_256442980);
      v15 = swift_dynamicCast();
      if ((v15 & 1) == 0)
        v19 = 0;
      v20 = v15 ^ 1;
      sub_236B885DC();
      swift_unknownObjectRelease();
      return (uint64_t)v19;
    }
    else
    {
      sub_236B885DC();
      swift_unknownObjectRelease();
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_236B86CF0()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  CFPropertyListRef v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  CFPropertyListRef v19;
  uint64_t v20;

  v0 = (__CFString *)sub_236BCF998();
  CFPreferencesAppSynchronize(v0);

  v1 = (__CFString *)sub_236BCF998();
  v2 = (__CFString *)sub_236BCF998();
  v3 = (__CFString *)sub_236BCF998();
  v4 = CFPreferencesCopyValue(v1, v2, v3, (CFStringRef)*MEMORY[0x24BDBD570]);

  v19 = v4;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF88);
  if (swift_dynamicCast())
  {
    v5 = v16;
    sub_236B885DC();
    swift_unknownObjectRelease();
    return v5;
  }
  result = swift_conformsToProtocol2();
  if (result)
  {
    if (v4)
    {
      v7 = result;
      v19 = v4;
      swift_unknownObjectRetain();
      v8 = MEMORY[0x24BEE0D00];
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (swift_conformsToProtocol2())
          v9 = v8;
        else
          v9 = 0;
        if (v9)
        {
          v10 = sub_236BCFCB0();
          v11 = *(_QWORD *)(v10 - 8);
          MEMORY[0x24BDAC7A8]();
          v13 = (char *)&v16 - v12;
          sub_236BCFF80();
          v14 = *(_QWORD *)(v8 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v8) == 1)
          {
            (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
            v18 = 0;
            v16 = 0u;
            v17 = 0u;
          }
          else
          {
            *((_QWORD *)&v17 + 1) = v8;
            v18 = v7;
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v16);
            (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v13, v8);
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_256442980);
          if ((swift_dynamicCast() & 1) == 0)
          {
            v19 = 0;
            v20 = 0;
          }
          sub_236B885DC();
          swift_unknownObjectRelease();
          return (uint64_t)v19;
        }
        swift_bridgeObjectRelease();
      }
    }
    sub_236B885DC();
    swift_unknownObjectRelease();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t Dictionary<>.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;

  v4 = Keys.rawValue.getter();
  if (*(_QWORD *)(a1 + 16) && (v6 = sub_236B8BFC0(v4, v5), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(a1 + 56) + 24 * v6;
    v9 = *(_QWORD *)v8;
    v10 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)a2 = *(_QWORD *)v8;
    *(_QWORD *)(a2 + 8) = v10;
    v11 = *(_BYTE *)(v8 + 16);
    *(_BYTE *)(a2 + 16) = v11;
    sub_236B8C348(v9, v10, v11);
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = -1;
  }
  return result;
}

uint64_t Keys.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236B87080 + 4 * word_236BD2082[*v0]))(0x726574726F706572, 0xEA00000000004449);
}

uint64_t sub_236B87080()
{
  return 0x5465636976726573;
}

unint64_t sub_236B870A4()
{
  return 0xD000000000000015;
}

unint64_t sub_236B875D0()
{
  return 0xD000000000000016;
}

uint64_t sub_236B875E8()
{
  return 0x7461635F72697268;
}

unint64_t sub_236B8760C()
{
  return 0xD000000000000014;
}

uint64_t sub_236B87624()
{
  return 0x6D5F6C6576617274;
}

uint64_t sub_236B87644()
{
  return 0x735F6C6576617274;
}

uint64_t sub_236B87668()
{
  return 0x6867696E6574616CLL;
}

uint64_t sub_236B8768C()
{
  return 0x6465636E61686E65;
}

void sub_236B876B0()
{
  JUMPOUT(0x236B876C4);
}

uint64_t sub_236B876D0()
{
  return 0x79745F6575737369;
}

uint64_t sub_236B876F0()
{
  return 0x65566769666E6F63;
}

uint64_t Config.neededPreviousFields.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_236B87748(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_236B87778@<X0>(double *a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  uint64_t result;
  double v13;
  uint64_t v14;

  v6 = sub_236BCF878();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_236BCF86C();
  sub_236BCF860();
  v11 = v10;
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13 = *a1;
  if (*a1 <= v11)
    *a1 = v11 + *(double *)(a2 + 24);
  *a3 = v13 <= v11;
  return result;
}

uint64_t assignWithTake for SimpleType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_236B8C2D4(v4, v5, v6);
  return a1;
}

uint64_t destroy for SummaryConfig(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t RouterConfig.commonFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 2);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  *(_WORD *)a1 = *(_WORD *)v1;
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for CommonConfigFields()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SummaryConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(void **)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  v9 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v9;
  v10 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v10;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

Swift::Void __swiftcall Preference.sync()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v2 = v0;
  v3 = *(_QWORD *)(v0 + 16);
  v4 = sub_236BCFCB0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v12 - v7;
  v9 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v12 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DefaultsUtilities.get<A>(key:applicationID:userName:)(0xE600000000000000, v3, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(v1 + *(int *)(v2 + 28), v1 + *(int *)(v2 + 32), v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, v3);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 40))(v1 + *(int *)(v2 + 28), v11, v3);
  }
}

uint64_t static DefaultsUtilities.get<A>(key:applicationID:userName:)@<X0>(uint64_t a1@<X5>, uint64_t a2@<X6>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  CFPropertyListRef v15;
  int v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  void *v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *boxed_opaque_existential_1;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  CFPropertyListRef v50;

  v45 = a1;
  v46 = a3;
  v4 = sub_236BCFCB0();
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v43 - v6;
  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (__CFString *)sub_236BCF998();
  CFPreferencesAppSynchronize(v11);

  v12 = (__CFString *)sub_236BCF998();
  v13 = (__CFString *)sub_236BCF998();
  v14 = (__CFString *)sub_236BCF998();
  v15 = CFPreferencesCopyValue(v12, v13, v14, (CFStringRef)*MEMORY[0x24BDBD570]);

  *(_QWORD *)&v47 = v15;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF88);
  v16 = swift_dynamicCast();
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v16)
  {
    v17(v7, 0, 1, a2);
    v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v18(v10, v7, a2);
    v19 = v46;
    v18(v46, v10, a2);
    v20 = v19;
    v21 = 0;
LABEL_27:
    v38 = a2;
    goto LABEL_28;
  }
  v22 = v46;
  v17(v7, 1, 1, a2);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v44);
  v23 = swift_conformsToProtocol2();
  if (v23)
    v24 = v23;
  else
    v24 = 0;
  if (v23)
    v25 = a2;
  else
    v25 = 0;
  if (!v25 || !v15 || (v50 = v15, swift_unknownObjectRetain(), !swift_dynamicCast()))
  {
LABEL_19:
    v32 = v22;
    if (swift_dynamicCastMetatype() && v15)
    {
      swift_unknownObjectRetain();
      objc_opt_self();
      v33 = (void *)swift_dynamicCastObjCClass();
      if (v33)
      {
        v34 = objc_msgSend(v33, sel_BOOLValue);
        swift_unknownObjectRelease();
        LOBYTE(v47) = v34;
LABEL_25:
        v21 = swift_dynamicCast() ^ 1;
        v20 = v32;
        goto LABEL_27;
      }
      swift_unknownObjectRelease();
      v50 = v15;
      swift_unknownObjectRetain();
      if ((swift_dynamicCast() & 1) != 0)
      {
        v35 = sub_236BCF9F8();
        v37 = v36;
        swift_bridgeObjectRelease();
        LOBYTE(v35) = sub_236BA8BC4(v35, v37, qword_250827E48);
        swift_bridgeObjectRelease();
        swift_arrayDestroy();
        LOBYTE(v47) = v35 & 1;
        goto LABEL_25;
      }
    }
    v20 = v22;
    v21 = 1;
    goto LABEL_27;
  }
  if (swift_conformsToProtocol2())
    v26 = a2;
  else
    v26 = 0;
  if (!v26)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v45 = a2;
  v27 = sub_236BCFCB0();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v30 = (char *)&v43 - v29;
  sub_236BCFF80();
  v31 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v30, 1, v25) == 1)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
  }
  else
  {
    *((_QWORD *)&v48 + 1) = v25;
    v49 = v24;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v47);
    (*(void (**)(uint64_t *, char *, uint64_t))(v31 + 32))(boxed_opaque_existential_1, v30, v25);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256442980);
  v41 = v22;
  v42 = v45;
  v21 = swift_dynamicCast() ^ 1;
  v20 = v41;
  v38 = v42;
LABEL_28:
  v17(v20, v21, 1, v38);
  sub_236B885DC();
  return swift_unknownObjectRelease();
}

uint64_t static Utilities.audioCapturesEnabled()()
{
  if ((sub_236B8825C() & 1) != 0
    || (sub_236B8825C() & 1) != 0
    || (sub_236B8825C() & 1) != 0
    || (sub_236B8825C() & 1) != 0)
  {
    return 1;
  }
  else
  {
    return sub_236B8825C() & 1;
  }
}

uint64_t sub_236B8825C()
{
  __CFString *v0;
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;
  CFPropertyListRef v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  CFPropertyListRef v21;

  v0 = (__CFString *)sub_236BCF998();
  CFPreferencesAppSynchronize(v0);

  v1 = (__CFString *)sub_236BCF998();
  v2 = (__CFString *)sub_236BCF998();
  v3 = (__CFString *)sub_236BCF998();
  v4 = CFPreferencesCopyValue(v1, v2, v3, (CFStringRef)*MEMORY[0x24BDBD570]);

  *(_QWORD *)&v18 = v4;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF88);
  if (swift_dynamicCast())
  {
    v5 = v21;
LABEL_17:
    sub_236B885DC();
    swift_unknownObjectRelease();
    return v5;
  }
  v6 = MEMORY[0x24BEE1328];
  result = swift_conformsToProtocol2();
  if (result)
  {
    if (v4)
    {
      v8 = result;
      v21 = v4;
      swift_unknownObjectRetain();
      if ((swift_dynamicCast() & 1) != 0)
      {
        if (swift_conformsToProtocol2())
          v9 = v6;
        else
          v9 = 0;
        if (v9)
        {
          v10 = sub_236BCFCB0();
          v11 = *(_QWORD *)(v10 - 8);
          MEMORY[0x24BDAC7A8](v10);
          v13 = (char *)&v18 - v12;
          sub_236BCFF80();
          v14 = *(_QWORD *)(v6 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v6) == 1)
          {
            (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
            v20 = 0;
            v18 = 0u;
            v19 = 0u;
          }
          else
          {
            *((_QWORD *)&v19 + 1) = v6;
            v20 = v8;
            boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v18);
            (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v13, v6);
          }
          __swift_instantiateConcreteTypeFromMangledName(&qword_256442980);
          if ((swift_dynamicCast() & 1) == 0)
            LOBYTE(v21) = 2;
          sub_236B885DC();
          swift_unknownObjectRelease();
          return v21;
        }
        swift_bridgeObjectRelease();
      }
      swift_unknownObjectRetain();
      objc_opt_self();
      v15 = (void *)swift_dynamicCastObjCClass();
      if (v15)
      {
        v5 = (unint64_t)objc_msgSend(v15, sel_BOOLValue, (_QWORD)v18);
        swift_unknownObjectRelease();
        goto LABEL_17;
      }
      swift_unknownObjectRelease();
      v21 = v4;
      swift_unknownObjectRetain();
      if (swift_dynamicCast())
      {
        v16 = sub_236BCF9F8();
        swift_bridgeObjectRelease();
        LOBYTE(v16) = sub_236BA8BC0(v16);
        swift_bridgeObjectRelease();
        swift_arrayDestroy();
        v5 = v16 & 1;
        goto LABEL_17;
      }
    }
    sub_236B885DC();
    swift_unknownObjectRelease();
    return 2;
  }
  __break(1u);
  return result;
}

uint64_t sub_236B885DC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  _QWORD v9[2];
  _QWORD aBlock[6];

  v0 = sub_236BCF8E4();
  v9[0] = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8]();
  v2 = (char *)v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_236BCF914();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2542AF718 != -1)
    swift_once();
  aBlock[4] = sub_236B87774;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_236B87748;
  aBlock[3] = &block_descriptor_1;
  v7 = _Block_copy(aBlock);
  sub_236BCF8FC();
  v9[1] = MEMORY[0x24BEE4AF8];
  sub_236B9576C(&qword_2542AFD60, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDA8);
  sub_236BA9624((unint64_t *)&unk_2542AFDB0, &qword_2542AFDA8);
  sub_236BCFD10();
  MEMORY[0x23B7FDE08](0, v6, v2, v7);
  _Block_release(v7);
  (*(void (**)(char *, uint64_t))(v9[0] + 8))(v2, v0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return swift_release();
}

uint64_t destroy for Message()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Message(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_236B88884()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_236B8890C(v0);
  swift_bridgeObjectRelease();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_236B8890C(v2);
  swift_bridgeObjectRelease();
  v4 = sub_236B89078((uint64_t)v1, (uint64_t)v3);
  swift_release();
  swift_release();
  return v4 & 1;
}

_QWORD *sub_236B8890C(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  _QWORD *v2;
  char v3;
  unint64_t v4;
  size_t v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[2];

  v2 = (_QWORD *)isStackAllocationSafe;
  v9[1] = *MEMORY[0x24BDAC8D0];
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = (unint64_t)((1 << v3) + 63) >> 6;
  v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    v6 = sub_236B88A5C((uint64_t)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    if (v1)
      swift_willThrow();
    else
      return (_QWORD *)v6;
  }
  else
  {
    v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    v2 = (_QWORD *)sub_236B88A5C((uint64_t)v7, v4, v2);
    MEMORY[0x23B7FE96C](v7, -1, -1);
  }
  return v2;
}

uint64_t sub_236B88A5C(uint64_t result, uint64_t a2, _QWORD *a3)
{
  int64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  unint64_t i;
  uint64_t v32;
  _QWORD *v33;
  BOOL v34;
  BOOL v35;
  unint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v40;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;

  v37 = (unint64_t *)result;
  v38 = 0;
  v3 = 0;
  v6 = a3[8];
  v4 = a3 + 8;
  v5 = v6;
  v7 = 1 << *((_BYTE *)v4 - 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  v39 = v4;
  v40 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    v43 = (v9 - 1) & v9;
    v44 = v3;
    v10 = __clz(__rbit64(v9)) | (v3 << 6);
LABEL_22:
    v15 = (uint64_t *)(a3[6] + 16 * v10);
    v16 = *v15;
    v17 = v15[1];
    v42 = v10;
    v18 = a3[7] + 24 * v10;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_BYTE *)(v18 + 16);
    swift_bridgeObjectRetain();
    sub_236B8C348(v19, v20, v21);
    if (qword_2542AFB40 != -1)
      swift_once();
    v22 = qword_2542B0F70;
    if (*(_QWORD *)(qword_2542B0F70 + 16)
      && (sub_236BD0028(),
          sub_236BCFA34(),
          v23 = sub_236BD0064(),
          v24 = -1 << *(_BYTE *)(v22 + 32),
          v25 = v23 & ~v24,
          v26 = v22 + 56,
          ((*(_QWORD *)(v22 + 56 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0))
    {
      v27 = *(_QWORD *)(v22 + 48);
      v28 = (_QWORD *)(v27 + 16 * v25);
      v29 = *v28 == v16 && v28[1] == v17;
      if (!v29 && (sub_236BCFF98() & 1) == 0)
      {
        v30 = ~v24;
        for (i = v25 + 1; ; i = v32 + 1)
        {
          v32 = i & v30;
          if (((*(_QWORD *)(v26 + (((i & v30) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v30)) & 1) == 0)
            break;
          v33 = (_QWORD *)(v27 + 16 * v32);
          v34 = *v33 == v16 && v33[1] == v17;
          if (v34 || (sub_236BCFF98() & 1) != 0)
            goto LABEL_5;
        }
        goto LABEL_39;
      }
LABEL_5:
      sub_236B8C2D4(v19, v20, v21);
      result = swift_bridgeObjectRelease();
      v3 = v44;
      v9 = v43;
    }
    else
    {
LABEL_39:
      sub_236B8C2D4(v19, v20, v21);
      result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v37 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
      v35 = __OFADD__(v38++, 1);
      v3 = v44;
      v9 = v43;
      if (v35)
        goto LABEL_44;
    }
  }
  v11 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v11 >= v40)
    return sub_236B88D9C(v37, a2, v38, (uint64_t)a3);
  v12 = v39[v11];
  v13 = v3 + 1;
  if (v12)
    goto LABEL_21;
  v13 = v3 + 2;
  if (v3 + 2 >= v40)
    return sub_236B88D9C(v37, a2, v38, (uint64_t)a3);
  v12 = v39[v13];
  if (v12)
    goto LABEL_21;
  v13 = v3 + 3;
  if (v3 + 3 >= v40)
    return sub_236B88D9C(v37, a2, v38, (uint64_t)a3);
  v12 = v39[v13];
  if (v12)
  {
LABEL_21:
    v43 = (v12 - 1) & v12;
    v44 = v13;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    goto LABEL_22;
  }
  v14 = v3 + 4;
  if (v3 + 4 >= v40)
    return sub_236B88D9C(v37, a2, v38, (uint64_t)a3);
  v12 = v39[v14];
  if (v12)
  {
    v13 = v3 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v40)
      return sub_236B88D9C(v37, a2, v38, (uint64_t)a3);
    v12 = v39[v13];
    ++v14;
    if (v12)
      goto LABEL_21;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_236B88D9C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEF0);
  result = sub_236BCFE3C();
  v8 = result;
  v37 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  v39 = v4;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v40 = v10;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v37)
        return v8;
      v15 = a1[v14];
      v16 = v10 + 1;
      if (!v15)
      {
        v16 = v10 + 2;
        if (v10 + 2 >= v37)
          return v8;
        v15 = a1[v16];
        if (!v15)
        {
          v16 = v10 + 3;
          if (v10 + 3 >= v37)
            return v8;
          v15 = a1[v16];
          if (!v15)
          {
            v17 = v10 + 4;
            if (v10 + 4 >= v37)
              return v8;
            v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                v16 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v16 >= v37)
                  return v8;
                v15 = a1[v16];
                ++v17;
                if (v15)
                  goto LABEL_24;
              }
            }
            v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v40 = v16;
      v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    v18 = *(_QWORD *)(v4 + 56);
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v20 = *v19;
    v21 = v19[1];
    v22 = v18 + 24 * v13;
    v24 = *(_QWORD *)v22;
    v23 = *(_QWORD *)(v22 + 8);
    v25 = *(_BYTE *)(v22 + 16);
    sub_236BD0028();
    swift_bridgeObjectRetain();
    sub_236B8C348(v24, v23, v25);
    sub_236BCFA34();
    result = sub_236BD0064();
    v26 = -1 << *(_BYTE *)(v8 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v33 == -1);
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    v34 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v29);
    *v34 = v20;
    v34[1] = v21;
    v35 = *(_QWORD *)(v8 + 56) + 24 * v29;
    *(_QWORD *)v35 = v24;
    *(_QWORD *)(v35 + 8) = v23;
    *(_BYTE *)(v35 + 16) = v25;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    v4 = v39;
    v10 = v40;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_236B89078(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  char v19;
  int64_t v21;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = 1 << *(_BYTE *)(a1 + 32);
    v5 = -1;
    if (v4 < 64)
      v5 = ~(-1 << v4);
    v21 = (unint64_t)(v4 + 63) >> 6;
    if ((v5 & v3) != 0)
    {
      v6 = __clz(__rbit64(v5 & v3));
LABEL_22:
      v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
      v11 = *v10;
      v12 = v10[1];
      v13 = *(_QWORD *)(a1 + 56) + 24 * v6;
      v14 = *(_QWORD *)v13;
      v15 = *(_QWORD *)(v13 + 8);
      v16 = *(_BYTE *)(v13 + 16);
      swift_bridgeObjectRetain();
      sub_236B8C348(v14, v15, v16);
      v17 = sub_236B8BFC0(v11, v12);
      v19 = v18;
      swift_bridgeObjectRelease();
      if ((v19 & 1) != 0)
        __asm { BR              X8 }
      sub_236B8C2D4(v14, v15, v16);
      return 0;
    }
    if ((unint64_t)(v4 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 72);
      v8 = 1;
      if (v7)
        goto LABEL_21;
      v8 = 2;
      if (v21 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
        goto LABEL_21;
      v8 = 3;
      if (v21 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
        goto LABEL_21;
      v8 = 4;
      if (v21 <= 4)
        return 1;
      v7 = *(_QWORD *)(a1 + 96);
      if (v7)
      {
LABEL_21:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
        goto LABEL_22;
      }
      v9 = 5;
      if (v21 > 5)
      {
        v7 = *(_QWORD *)(a1 + 104);
        if (v7)
        {
          v8 = 5;
          goto LABEL_21;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x236B8ABB0);
          }
          if (v8 >= v21)
            break;
          v7 = *(_QWORD *)(a1 + 64 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_21;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t destroy for RouterConfig(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t Message.flattenToAnyDictionary()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = Message.flatten()();
  v1 = sub_236B8B5D0(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t Message.flatten()()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  uint64_t inited;
  uint64_t v9;
  unint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_DWORD *)v0;
  v2 = *(_QWORD *)(v0 + 16);
  v20 = *(_BYTE *)(v0 + 32);
  v21 = *(unsigned __int8 *)(v0 + 41);
  v3 = *(unsigned __int8 *)(v0 + 42);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 24);
  v19 = *(_QWORD *)(v0 + 72);
  v7 = *(_WORD *)(v0 + 4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF60);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_236BD1320;
  *(_QWORD *)(inited + 32) = 0x6761746F69647561;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = _s18AudioAnalyticsBase9UtilitiesO24eventCategoryDescription4fromSSSo0a5EventF0V_tFZ_0(v1);
  v23 = v9;
  sub_236BCFA58();
  _s18AudioAnalyticsBase9UtilitiesO20eventTypeDescription4fromSSSo0a5EventF0V_tFZ_0(v7);
  sub_236BCFA58();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v22;
  *(_QWORD *)(inited + 56) = v23;
  *(_BYTE *)(inited + 64) = 4;
  *(_QWORD *)(inited + 72) = 0xD000000000000015;
  *(_QWORD *)(inited + 80) = 0x8000000236BD4530;
  *(_QWORD *)(inited + 88) = v2;
  *(_QWORD *)(inited + 96) = 0;
  *(_BYTE *)(inited + 104) = 2;
  *(_QWORD *)(inited + 112) = 0xD000000000000010;
  *(_QWORD *)(inited + 120) = 0x8000000236BD5BC0;
  *(_QWORD *)(inited + 128) = v3;
  *(_QWORD *)(inited + 136) = 0;
  *(_BYTE *)(inited + 144) = 3;
  strcpy((char *)(inited + 152), "untrustworthy");
  *(_WORD *)(inited + 166) = -4864;
  *(_QWORD *)(inited + 168) = v5;
  *(_QWORD *)(inited + 176) = v4;
  *(_BYTE *)(inited + 184) = 4;
  swift_bridgeObjectRetain();
  v10 = sub_236B8B490(inited);
  if ((v20 & 1) == 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_236B8BA30(v18, 0, 2, 0xD000000000000011, 0x8000000236BD4550, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    v12 = swift_isUniquelyReferenced_nonNull_native();
    sub_236B8BA30(v19, v6, 4, 0xD000000000000018, 0x8000000236BD44A0, v12);
    swift_bridgeObjectRelease();
  }
  if (v21)
  {
    v13 = swift_isUniquelyReferenced_nonNull_native();
    sub_236B8BA30(1, 0, 3, 0xD000000000000011, 0x8000000236BD5BE0, v13);
    swift_bridgeObjectRelease();
  }
  if (qword_2542AF558 != -1)
    swift_once();
  if (byte_2542B001A == 1)
  {
    v14 = swift_isUniquelyReferenced_nonNull_native();
    sub_236B8BA30(1, 0, 3, 0x79727261437369, 0xE700000000000000, v14);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v15 = swift_bridgeObjectRetain();
  v16 = sub_236B8B414(v15, v10);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t _s18AudioAnalyticsBase9UtilitiesO24eventCategoryDescription4fromSSSo0a5EventF0V_tFZ_0(int a1)
{
  int v1;

  v1 = (unsigned __int16)a1;
  if ((a1 & 0xFFFF0000) == 0)
  {
    if (!(_WORD)a1)
      return 0;
    goto LABEL_4;
  }
  sub_236BCFA58();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_236BCFA58();
LABEL_4:
    sub_236BCCC6C(v1);
    sub_236BCFA58();
    swift_bridgeObjectRelease();
  }
  return 0;
}

unint64_t _s18AudioAnalyticsBase9UtilitiesO20eventTypeDescription4fromSSSo0a5EventF0V_tFZ_0(unsigned __int16 a1)
{
  int v1;
  unint64_t result;

  v1 = a1;
  result = 0x636972656E6547;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x7472617453;
      break;
    case 2:
      result = 1886352467;
      break;
    case 3:
      result = 0x6574617669746341;
      break;
    case 4:
      result = 0x6176697463616544;
      break;
    case 5:
      result = 0x7075746553;
      break;
    case 6:
      result = 0x726F727245;
      break;
    case 7:
      result = 0x7465446575737349;
      break;
    case 8:
      result = 0x676F4C7265776F50;
      break;
    case 9:
      result = 0x696E556F69647541;
      break;
    case 10:
      result = 0x766972444944494DLL;
      break;
    case 11:
      result = 0x7972616D6D7553;
      break;
    case 12:
      result = 0xD000000000000016;
      break;
    case 13:
      result = 0x7078456F69647541;
      break;
    case 14:
      result = 0xD000000000000014;
      break;
    case 15:
      result = 0x694B726F736E6553;
      break;
    case 16:
      result = 0x656C706D6953;
      break;
    case 17:
      result = 0x6172676F74736948;
      break;
    case 18:
      result = 0x6574617453;
      break;
    case 19:
      result = 0x6F4C79726F6D654DLL;
      break;
    case 20:
      result = 0x6E49646F50726941;
      break;
    default:
      result = 0x6E776F6E6B6E55;
      break;
  }
  return result;
}

uint64_t sub_236B8B414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  sub_236B8BC98(a1, (uint64_t)sub_236B8C374, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_236B8B490(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEF0);
  v2 = (_QWORD *)sub_236BCFE3C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (char *)(a1 + 64);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 4);
    v6 = *((_QWORD *)v4 - 3);
    v7 = *((_QWORD *)v4 - 2);
    v8 = *((_QWORD *)v4 - 1);
    v9 = *v4;
    swift_bridgeObjectRetain();
    sub_236B8C348(v7, v8, v9);
    result = sub_236B8BFC0(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = v2[7] + 24 * result;
    *(_QWORD *)v13 = v7;
    *(_QWORD *)(v13 + 8) = v8;
    *(_BYTE *)(v13 + 16) = v9;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4 += 40;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_236B8B5D0(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _OWORD v26[3];
  char v27;
  uint64_t v28;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542AFF08);
  result = sub_236BCFE24();
  v3 = (_QWORD *)result;
  v4 = 0;
  v28 = a1;
  v5 = *(_QWORD *)(a1 + 64);
  v24 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & v5;
  v25 = (unint64_t)(v6 + 63) >> 6;
  v9 = result + 64;
  if ((v7 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    v15 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * i);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(v28 + 56) + 24 * i;
    v19 = *(_BYTE *)(v18 + 16);
    v26[2] = *(_OWORD *)v18;
    v27 = v19;
    swift_bridgeObjectRetain();
    SimpleType.unwrap()((uint64_t *)v26);
    *(_QWORD *)(v9 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v20 = (_QWORD *)(v3[6] + 16 * i);
    *v20 = v16;
    v20[1] = v17;
    result = (uint64_t)sub_236B8BA20(v26, (_OWORD *)(v3[7] + 32 * i));
    v21 = v3[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v23;
    if (v8)
      goto LABEL_4;
LABEL_5:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_24;
    if (v12 >= v25)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v24 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v25)
        return (uint64_t)v3;
      v13 = *(_QWORD *)(v24 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v25)
          return (uint64_t)v3;
        v13 = *(_QWORD *)(v24 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v8 = (v13 - 1) & v13;
  }
  v14 = v12 + 3;
  if (v14 >= v25)
    return (uint64_t)v3;
  v13 = *(_QWORD *)(v24 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v25)
      return (uint64_t)v3;
    v13 = *(_QWORD *)(v24 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

void SimpleType.unwrap()(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v4 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  switch(*(_BYTE *)(v1 + 16))
  {
    case 0:
      v5 = MEMORY[0x24BEE4008];
      goto LABEL_7;
    case 1:
      v5 = MEMORY[0x24BEE4568];
      goto LABEL_7;
    case 2:
      v5 = MEMORY[0x24BEE13C8];
LABEL_7:
      a1[3] = v5;
      *a1 = v4;
      break;
    case 3:
      a1[3] = MEMORY[0x24BEE1328];
      *(_BYTE *)a1 = v4 & 1;
      break;
    case 4:
      a1[3] = MEMORY[0x24BEE0D00];
      *a1 = v4;
      a1[1] = v3;
      swift_bridgeObjectRetain();
      break;
    case 5:
      v6 = *(_QWORD *)(v4 + 16);
      v7 = MEMORY[0x24BEE4AF8];
      if (v6)
      {
        v15 = MEMORY[0x24BEE4AF8];
        swift_bridgeObjectRetain();
        v8 = sub_236BA56F0(0, v6, 0);
        v7 = v15;
        v9 = v4 + 48;
        do
        {
          SimpleType.unwrap()(v14, v8);
          v15 = v7;
          v11 = *(_QWORD *)(v7 + 16);
          v10 = *(_QWORD *)(v7 + 24);
          if (v11 >= v10 >> 1)
          {
            sub_236BA56F0(v10 > 1, v11 + 1, 1);
            v7 = v15;
          }
          *(_QWORD *)(v7 + 16) = v11 + 1;
          v8 = (uint64_t)sub_236B8BA20(v14, (_OWORD *)(v7 + 32 * v11 + 32));
          v9 += 24;
          --v6;
        }
        while (v6);
        sub_236B8C2D4(v4, v3, 5);
      }
      a1[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_256442E70);
      *a1 = v7;
      break;
    case 6:
      v12 = swift_bridgeObjectRetain();
      v13 = sub_236B8B5D0(v12);
      swift_bridgeObjectRelease();
      a1[3] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542AFD90);
      *a1 = v13;
      break;
    default:
      sub_236BCFE18();
      __break(1u);
      break;
  }
}

_OWORD *sub_236B8BA20(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_236B8BA30(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;

  v7 = (_QWORD **)v6;
  v14 = (_QWORD *)*v6;
  v16 = sub_236B8BFC0(a4, a5);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
  }
  else
  {
    v20 = v15;
    v21 = v14[3];
    if (v21 >= v19 && (a6 & 1) != 0)
    {
LABEL_7:
      v22 = *v7;
      if ((v20 & 1) != 0)
      {
LABEL_8:
        v23 = v22[7] + 24 * v16;
        result = sub_236B8C2D4(*(_QWORD *)v23, *(_QWORD *)(v23 + 8), *(_BYTE *)(v23 + 16));
        *(_QWORD *)v23 = a1;
        *(_QWORD *)(v23 + 8) = a2;
        *(_BYTE *)(v23 + 16) = a3;
        return result;
      }
      goto LABEL_11;
    }
    if (v21 >= v19 && (a6 & 1) == 0)
    {
      sub_236B8C6E8();
      goto LABEL_7;
    }
    sub_236B8C3C0(v19, a6 & 1);
    v25 = sub_236B8BFC0(a4, a5);
    if ((v20 & 1) == (v26 & 1))
    {
      v16 = v25;
      v22 = *v7;
      if ((v20 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_236B8BB84(v16, a4, a5, a1, a2, a3, v22);
      return swift_bridgeObjectRetain();
    }
  }
  result = sub_236BCFFD4();
  __break(1u);
  return result;
}

unint64_t sub_236B8BB84(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, _QWORD *a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a7[6] + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = a7[7] + 24 * result;
  *(_QWORD *)v8 = a4;
  *(_QWORD *)(v8 + 8) = a5;
  *(_BYTE *)(v8 + 16) = a6;
  v9 = a7[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a7[2] = v11;
  return result;
}

uint64_t initializeWithCopy for RouterConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int16 v6;
  id v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_WORD *)(a2 + 56);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_WORD *)(a1 + 56) = v6;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = v5;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_236B8BC98(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v57 = a1;
  v58 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v59 = v8;
  v60 = 0;
  v61 = v11 & v9;
  v62 = a2;
  v63 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_236B8C104((uint64_t)&v52);
  v12 = v53;
  if (!v53)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    sub_236B96E24();
    return swift_release();
  }
  v13 = v52;
  v14 = v54;
  v51 = v55;
  v15 = v56;
  v16 = (_QWORD *)*a5;
  v18 = sub_236B8BFC0(v52, v53);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) != 0)
    {
      v25 = (_QWORD *)*a5;
      if ((v17 & 1) == 0)
        goto LABEL_14;
    }
    else
    {
      sub_236B8C6E8();
      v25 = (_QWORD *)*a5;
      if ((v22 & 1) == 0)
        goto LABEL_14;
    }
    goto LABEL_12;
  }
  sub_236B8C3C0(v21, a4 & 1);
  v23 = sub_236B8BFC0(v13, v12);
  if ((v22 & 1) == (v24 & 1))
  {
    v18 = v23;
    v25 = (_QWORD *)*a5;
    if ((v22 & 1) == 0)
    {
LABEL_14:
      v25[(v18 >> 6) + 8] |= 1 << v18;
      v27 = (uint64_t *)(v25[6] + 16 * v18);
      *v27 = v13;
      v27[1] = v12;
      v28 = v25[7] + 24 * v18;
      *(_QWORD *)v28 = v14;
      *(_QWORD *)(v28 + 8) = v51;
      *(_BYTE *)(v28 + 16) = v15;
      v29 = v25[2];
      v30 = __OFADD__(v29, 1);
      v31 = v29 + 1;
      if (!v30)
      {
        v25[2] = v31;
        while (1)
        {
          sub_236B8C104((uint64_t)&v52);
          v36 = v53;
          if (!v53)
            goto LABEL_26;
          v37 = v52;
          v38 = v54;
          v39 = v55;
          v15 = v56;
          v40 = (_QWORD *)*a5;
          v42 = sub_236B8BFC0(v52, v53);
          v43 = v40[2];
          v44 = (v41 & 1) == 0;
          v45 = v43 + v44;
          if (__OFADD__(v43, v44))
            goto LABEL_27;
          v46 = v41;
          if (v40[3] < v45)
          {
            sub_236B8C3C0(v45, 1);
            v47 = sub_236B8BFC0(v37, v36);
            if ((v46 & 1) != (v48 & 1))
              goto LABEL_29;
            v42 = v47;
          }
          v49 = (_QWORD *)*a5;
          if ((v46 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            v26 = v49[7] + 24 * v42;
            sub_236B8C2D4(*(_QWORD *)v26, *(_QWORD *)(v26 + 8), *(_BYTE *)(v26 + 16));
            *(_QWORD *)v26 = v38;
            *(_QWORD *)(v26 + 8) = v39;
LABEL_16:
            *(_BYTE *)(v26 + 16) = v15;
          }
          else
          {
            v49[(v42 >> 6) + 8] |= 1 << v42;
            v32 = (uint64_t *)(v49[6] + 16 * v42);
            *v32 = v37;
            v32[1] = v36;
            v33 = v49[7] + 24 * v42;
            *(_QWORD *)v33 = v38;
            *(_QWORD *)(v33 + 8) = v39;
            *(_BYTE *)(v33 + 16) = v15;
            v34 = v49[2];
            v30 = __OFADD__(v34, 1);
            v35 = v34 + 1;
            if (v30)
              goto LABEL_28;
            v49[2] = v35;
          }
        }
      }
      goto LABEL_28;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    v26 = v25[7] + 24 * v18;
    sub_236B8C2D4(*(_QWORD *)v26, *(_QWORD *)(v26 + 8), *(_BYTE *)(v26 + 16));
    *(_QWORD *)v26 = v14;
    *(_QWORD *)(v26 + 8) = v51;
    goto LABEL_16;
  }
LABEL_29:
  result = sub_236BCFFD4();
  __break(1u);
  return result;
}

unint64_t sub_236B8BFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_236BD0028();
  sub_236BCFA34();
  v4 = sub_236BD0064();
  return sub_236B8C024(a1, a2, v4);
}

unint64_t sub_236B8C024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_236BCFF98() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_236BCFF98() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_236B8C104@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(_QWORD *);
  uint64_t result;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  _QWORD v24[4];
  char v25;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = *(_QWORD *)(v3 + 56) + 24 * v8;
    v13 = *(_QWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_BYTE *)(v12 + 16);
    v1[3] = v6;
    v1[4] = v7;
    v16 = (void (*)(_QWORD *))v1[5];
    v24[0] = v10;
    v24[1] = v11;
    v24[2] = v13;
    v24[3] = v14;
    v25 = v15;
    swift_bridgeObjectRetain();
    sub_236B8C348(v13, v14, v15);
    v16(v24);
    swift_bridgeObjectRelease();
    return sub_236B8C2D4(v13, v14, v15);
  }
  v18 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v19 = (unint64_t)(v1[2] + 64) >> 6;
    if (v18 < v19)
    {
      v20 = v1[1];
      v21 = *(_QWORD *)(v20 + 8 * v18);
      if (v21)
      {
LABEL_7:
        v7 = (v21 - 1) & v21;
        v8 = __clz(__rbit64(v21)) + (v18 << 6);
        v6 = v18;
        goto LABEL_3;
      }
      v22 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v19)
      {
        v21 = *(_QWORD *)(v20 + 8 * v22);
        if (v21)
        {
LABEL_10:
          v18 = v22;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v19)
        {
          v21 = *(_QWORD *)(v20 + 8 * (v5 + 3));
          if (v21)
          {
            v18 = v5 + 3;
            goto LABEL_7;
          }
          v22 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v19)
          {
            v21 = *(_QWORD *)(v20 + 8 * v22);
            if (v21)
              goto LABEL_10;
            v18 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v19)
            {
              v21 = *(_QWORD *)(v20 + 8 * v18);
              if (v21)
                goto LABEL_7;
              v6 = v19 - 1;
              v23 = v5 + 6;
              while (v19 != v23)
              {
                v21 = *(_QWORD *)(v20 + 8 * v23++);
                if (v21)
                {
                  v18 = v23 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_BYTE *)(a1 + 32) = 0;
  }
  return result;
}

uint64_t sub_236B8C2D4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 4 || a3 == 6 || a3 == 5)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s18AudioAnalyticsBase10SimpleTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_236B8C348(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_236B8C348(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 4 || a3 == 6 || a3 == 5)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_236B8C374@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  v6 = *((_BYTE *)a1 + 32);
  *(_BYTE *)(a2 + 32) = v6;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v2;
  swift_bridgeObjectRetain();
  return sub_236B8C348(v4, v5, v6);
}

uint64_t sub_236B8C3C0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t i;
  char v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEF0);
  v40 = a2;
  v6 = sub_236BCFE30();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v30 = *v29;
      v31 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v34 = *(_QWORD *)v32;
      v33 = *(_QWORD *)(v32 + 8);
      v35 = *(_BYTE *)(v32 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_236B8C348(v34, v33, v35);
      }
      sub_236BD0028();
      sub_236BCFA34();
      result = sub_236BD0064();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
      *(_QWORD *)v19 = v34;
      *(_QWORD *)(v19 + 8) = v33;
      *(_BYTE *)(v19 + 16) = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_236B8C6E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEF0);
  v2 = *v0;
  v3 = sub_236BCFE24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_BYTE *)(v21 + 16);
    *v24 = v19;
    v24[1] = v18;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_QWORD *)(v26 + 8) = v23;
    *(_BYTE *)(v26 + 16) = v25;
    swift_bridgeObjectRetain();
    result = (void *)sub_236B8C348(v22, v23, v25);
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t static ActiveDevicesFilter.modifyMessage(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v3 = *(_DWORD *)a1;
  v4 = *(_WORD *)(a1 + 4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_BYTE *)(a1 + 40);
  LODWORD(v10) = *(unsigned __int8 *)(a1 + 41);
  v11 = *(_BYTE *)(a1 + 42);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_BYTE *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 80);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_15;
  v31 = *(_DWORD *)a1;
  v32 = *(unsigned __int8 *)(a1 + 42);
  v35 = *(_BYTE *)(a1 + 64);
  v33 = *(unsigned __int8 *)(a1 + 40);
  v34 = *(_QWORD *)(a1 + 48);
  v17 = sub_236B8BFC0(0x645F657669746361, 0xEE00736563697665);
  v11 = v32;
  v9 = v33;
  v12 = v34;
  v14 = v35;
  if ((v18 & 1) == 0)
    goto LABEL_15;
  v19 = *(_QWORD *)(v5 + 56) + 24 * v17;
  if (*(_BYTE *)(v19 + 16) != 4)
    goto LABEL_15;
  v29 = v8;
  v30 = v10;
  v20 = *(_QWORD *)v19;
  v10 = *(_QWORD *)(v19 + 8);
  sub_236B8C348(*(_QWORD *)v19, v10, 4);
  swift_bridgeObjectRetain();
  v21 = sub_236B8CC08(v20, v10, qword_250827988);
  if (!v21)
  {
    sub_236B8C2D4(v20, v10, 4);
LABEL_13:
    v14 = v35;
    v9 = v33;
    v12 = v34;
    v11 = v32;
    LOBYTE(v10) = v30;
    goto LABEL_14;
  }
  v36 = 8283;
  v37 = 0xE200000000000000;
  v40 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
  sub_236B8D728((unint64_t *)&qword_2542AFDD0, &qword_2542AFDC8, MEMORY[0x24BEE12B0]);
  sub_236BCF974();
  sub_236BCFA58();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  swift_bridgeObjectRelease();
  if (v20 == 8283 && v10 == v37)
  {
    sub_236B8C2D4(v20, v10, 4);
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v23 = sub_236BCFF98();
  sub_236B8C2D4(v20, v10, 4);
  LOBYTE(v10) = v30;
  if ((v23 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v3 = v31;
    v11 = v32;
    v14 = v35;
    v9 = v33;
    v12 = v34;
LABEL_14:
    v8 = v29;
LABEL_15:
    *(_DWORD *)a2 = v3;
    *(_WORD *)(a2 + 4) = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
    *(_BYTE *)(a2 + 32) = v8;
    *(_BYTE *)(a2 + 40) = v9;
    *(_BYTE *)(a2 + 41) = v10;
    *(_BYTE *)(a2 + 42) = v11;
    *(_QWORD *)(a2 + 48) = v12;
    *(_QWORD *)(a2 + 56) = v13;
    *(_BYTE *)(a2 + 64) = v14;
    *(_QWORD *)(a2 + 72) = v15;
    *(_QWORD *)(a2 + 80) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_236B8BA30(v36, 0xE200000000000000, 4, 0x645F657669746361, 0xEE00736563697665, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v26 = 256;
  if (!v30)
    v26 = 0;
  v27 = v26 | v33;
  v28 = 0x10000;
  if (!v32)
    v28 = 0;
  v36 = v27 | v28;
  v37 = v34;
  v38 = v13;
  v39 = v35;
  swift_bridgeObjectRetain();
  return Message.init(category:type:content:metadata:)(v31, v4, v5, (unint64_t *)&v36, a2);
}

uint64_t sub_236B8CC08(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v32 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF0C0);
  v30 = *(_QWORD *)(v5 - 8);
  v31 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v29 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF2C8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF2B0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF2A8);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v28 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a1;
  v34 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF2F0);
  sub_236BCF890();
  sub_236B8D768();
  sub_236B8D728(&qword_2542AF2C0, &qword_2542AF2C8, MEMORY[0x24BEE7460]);
  sub_236BCF950();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    swift_bridgeObjectRelease();
    sub_236B95F60((uint64_t)v13);
    return 0;
  }
  v17 = v28;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v28, v13, v14);
  swift_getKeyPath();
  sub_236BCF89C();
  swift_release();
  v18 = MEMORY[0x23B7FDBB0](v33, v34, v35, v36);
  v20 = v19;
  swift_bridgeObjectRelease();
  v33 = v18;
  v34 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF2E8);
  v21 = v29;
  sub_236BCF890();
  sub_236B8D728(&qword_2542AF2B8, &qword_2542AF0C0, MEMORY[0x24BEE7460]);
  v22 = v31;
  v23 = sub_236BCF95C();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v21, v22);
  swift_bridgeObjectRelease();
  v24 = v32;
  swift_bridgeObjectRetain();
  v25 = sub_236B8DE1C(v23, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v26 = *(_QWORD *)(v25 + 16);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  if (!v26)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v25;
}

unint64_t Message.init(category:type:content:metadata:)@<X0>(int a1@<W0>, __int16 a2@<W1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t result;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  char v38;
  uint64_t v39;

  v9 = *a4;
  v34 = a4[1];
  v10 = a4[2];
  v33 = *((_BYTE *)a4 + 24);
  v11 = sub_236B8DA6C();
  v13 = v12;
  v39 = a3;
  sub_236B8D1C4(&v39);
  sub_236B8DB8C((unint64_t)&v39);
  swift_beginAccess();
  v14 = *(_QWORD *)aUnknown;
  v15 = qword_2542AFA00;
  swift_bridgeObjectRetain();
  v16 = v39;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_236B8BA30(v14, v15, 4, 0x65566769666E6F63, 0xED00006E6F697372, isUniquelyReferenced_nonNull_native);
  v39 = v16;
  swift_bridgeObjectRelease();
  sub_236BB1F50((uint64_t)&v39, a1, a2);
  sub_236BB2070((unint64_t)&v39);
  sub_236BB21B8(&v39);
  v18 = v39;
  v19 = swift_bridgeObjectRetain();
  v20 = sub_236BB22C0(v19);
  v22 = v21;
  LOBYTE(v15) = v23;
  result = swift_bridgeObjectRelease();
  v38 = v15 & 1;
  v36 = a1;
  v37 = a2;
  v35 = v22;
  if (v10)
  {
    result = swift_bridgeObjectRelease();
    v25 = v9 & 1;
    v26 = (v9 >> 8) & 1;
    v27 = (v9 >> 16) & 1;
    v28 = v33 & 1;
    v11 = v34;
    v13 = v10;
    if (!*(_QWORD *)(v18 + 16))
      goto LABEL_8;
  }
  else
  {
    v28 = 0;
    LOBYTE(v27) = 0;
    LOBYTE(v26) = 0;
    v25 = 0;
    if (!*(_QWORD *)(v18 + 16))
    {
LABEL_8:
      v32 = 0;
      v31 = 0;
      goto LABEL_9;
    }
  }
  result = sub_236B8BFC0(0xD000000000000018, 0x8000000236BD44A0);
  if ((v29 & 1) == 0)
    goto LABEL_8;
  v30 = *(_QWORD *)(v18 + 56) + 24 * result;
  if (*(_BYTE *)(v30 + 16) != 4)
    goto LABEL_8;
  v32 = *(_QWORD *)v30;
  v31 = *(_QWORD *)(v30 + 8);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
LABEL_9:
  *(_DWORD *)a5 = v36;
  *(_WORD *)(a5 + 4) = v37;
  *(_QWORD *)(a5 + 8) = v18;
  *(double *)(a5 + 16) = v20;
  *(_QWORD *)(a5 + 24) = v35;
  *(_BYTE *)(a5 + 32) = v38;
  *(_BYTE *)(a5 + 40) = v25;
  *(_BYTE *)(a5 + 41) = v26;
  *(_BYTE *)(a5 + 42) = v27;
  *(_QWORD *)(a5 + 48) = v11;
  *(_QWORD *)(a5 + 56) = v13;
  *(_BYTE *)(a5 + 64) = v28;
  *(_QWORD *)(a5 + 72) = v32;
  *(_QWORD *)(a5 + 80) = v31;
  return result;
}

uint64_t sub_236B8D1C4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  unint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;

  v2 = sub_236BCF74C();
  v67 = *(_QWORD *)(v2 - 8);
  v68 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v66 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = swift_bridgeObjectRetain();
  v5 = sub_236BAF5A8(v4);
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
    return swift_bridgeObjectRelease();
  v64 = v5;
  v7 = (uint64_t *)(v5 + 40);
  while (1)
  {
    v10 = *(v7 - 1);
    v11 = *v7;
    v12 = *a1;
    v13 = *(_QWORD *)(*a1 + 16);
    swift_bridgeObjectRetain();
    v71 = v7;
    if (v13)
    {
      swift_bridgeObjectRetain();
      v14 = sub_236B8BFC0(v10, v11);
      if ((v15 & 1) != 0)
      {
        v16 = *(_QWORD *)(v12 + 56) + 24 * v14;
        v17 = *(_QWORD *)v16;
        v18 = *(unsigned __int8 *)(v16 + 16);
        v69 = *(_QWORD *)(v16 + 8);
        v70 = v17;
        sub_236B8C348(v17, v69, v18);
      }
      else
      {
        v69 = 0;
        v70 = 0;
        v18 = 255;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v69 = 0;
      v70 = 0;
      v18 = 255;
    }
    v72 = v18;
    v77 = (_QWORD *)v10;
    v78 = v11;
    v19 = v66;
    sub_236BCF740();
    sub_236B8D9A0();
    v20 = sub_236BCFCEC();
    v22 = v21;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v19, v68);
    v75 = v20;
    v76 = v22;
    if (qword_2542AF0E0 != -1)
      swift_once();
    v23 = __swift_instantiateConcreteTypeFromMangledName(qword_2542AF0F8);
    __swift_project_value_buffer(v23, (uint64_t)qword_2542AF0C8);
    v73 = 95;
    v74 = 0xE100000000000000;
    sub_236B8D9E4();
    sub_236B8DA28();
    sub_236B8D728(&qword_2542AF0F0, qword_2542AF0F8, MEMORY[0x24BEE7460]);
    sub_236BCFC08();
    swift_bridgeObjectRelease();
    v24 = (uint64_t)v77;
    v25 = v78;
    swift_bridgeObjectRetain();
    v26 = sub_236B8BFC0(v10, v11);
    v28 = v27;
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0)
    {
      v65 = v6;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v30 = *a1;
      v77 = (_QWORD *)*a1;
      *a1 = 0x8000000000000000;
      v31 = v72;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_236B8C6E8();
        v30 = (uint64_t)v77;
      }
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(v30 + 56) + 24 * v26;
      v33 = *(_QWORD *)v32;
      v34 = *(_QWORD *)(v32 + 8);
      v35 = *(_BYTE *)(v32 + 16);
      sub_236B8D7AC(v26, v30);
      *a1 = v30;
      swift_bridgeObjectRelease();
      sub_236B8C2D4(v33, v34, v35);
      swift_bridgeObjectRelease();
      v6 = v65;
    }
    else
    {
      swift_bridgeObjectRelease();
      v31 = v72;
    }
    if (v31 != 255)
      break;
    swift_bridgeObjectRetain();
    v47 = sub_236B8BFC0(v24, v25);
    v49 = v48;
    swift_bridgeObjectRelease();
    if ((v49 & 1) != 0)
    {
      v50 = v6;
      v51 = swift_isUniquelyReferenced_nonNull_native();
      v52 = *a1;
      v77 = (_QWORD *)*a1;
      *a1 = 0x8000000000000000;
      if ((v51 & 1) == 0)
      {
        sub_236B8C6E8();
        v52 = (uint64_t)v77;
      }
      swift_bridgeObjectRelease();
      v53 = *(_QWORD *)(v52 + 56) + 24 * v47;
      v54 = *(_QWORD *)v53;
      v55 = *(_QWORD *)(v53 + 8);
      v56 = *(_BYTE *)(v53 + 16);
      sub_236B8D7AC(v47, v52);
      *a1 = v52;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_236B8C2D4(v54, v55, v56);
      v6 = v50;
      goto LABEL_6;
    }
LABEL_5:
    swift_bridgeObjectRelease();
LABEL_6:
    v7 = v71 + 2;
    if (!--v6)
      return swift_bridgeObjectRelease();
  }
  v36 = swift_isUniquelyReferenced_nonNull_native();
  v77 = (_QWORD *)*a1;
  v37 = v77;
  *a1 = 0x8000000000000000;
  v39 = sub_236B8BFC0(v24, v25);
  v40 = v37[2];
  v41 = (v38 & 1) == 0;
  v42 = v40 + v41;
  if (!__OFADD__(v40, v41))
  {
    v43 = v38;
    if (v37[3] < v42)
    {
      sub_236B8C3C0(v42, v36);
      v44 = sub_236B8BFC0(v24, v25);
      if ((v43 & 1) != (v45 & 1))
        goto LABEL_41;
      v39 = v44;
      v46 = v77;
      if ((v43 & 1) == 0)
        goto LABEL_32;
LABEL_3:
      v8 = v46[7] + 24 * v39;
      sub_236B8C2D4(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_BYTE *)(v8 + 16));
      v9 = v69;
      *(_QWORD *)v8 = v70;
      *(_QWORD *)(v8 + 8) = v9;
      *(_BYTE *)(v8 + 16) = v31;
LABEL_4:
      *a1 = (uint64_t)v46;
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    if ((v36 & 1) != 0)
    {
      v46 = v77;
      if ((v38 & 1) != 0)
        goto LABEL_3;
    }
    else
    {
      sub_236B8C6E8();
      v46 = v77;
      if ((v43 & 1) != 0)
        goto LABEL_3;
    }
LABEL_32:
    v46[(v39 >> 6) + 8] |= 1 << v39;
    v57 = (uint64_t *)(v46[6] + 16 * v39);
    *v57 = v24;
    v57[1] = v25;
    v58 = v46[7] + 24 * v39;
    v59 = v69;
    *(_QWORD *)v58 = v70;
    *(_QWORD *)(v58 + 8) = v59;
    *(_BYTE *)(v58 + 16) = v31;
    v60 = v46[2];
    v61 = __OFADD__(v60, 1);
    v62 = v60 + 1;
    if (v61)
      goto LABEL_40;
    v46[2] = v62;
    swift_bridgeObjectRetain();
    goto LABEL_4;
  }
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  result = sub_236BCFFD4();
  __break(1u);
  return result;
}

uint64_t sub_236B8D728(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B7FE8AC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_236B8D768()
{
  unint64_t result;

  result = qword_2542AFD68;
  if (!qword_2542AFD68)
  {
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2542AFD68);
  }
  return result;
}

unint64_t sub_236B8D7AC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_236BCFD1C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_236BD0028();
        swift_bridgeObjectRetain();
        sub_236BCFA34();
        v10 = sub_236BD0064();
        result = swift_bridgeObjectRelease();
        v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_OWORD *)(v12 + 16 * v3);
          v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = v15 + 24 * v3;
          v17 = (__int128 *)(v15 + 24 * v6);
          if (24 * v3 < (uint64_t)(24 * v6) || v16 >= (unint64_t)v17 + 24 || (v18 = v3 == v6, v3 = v6, !v18))
          {
            v9 = *v17;
            *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)v16 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_236B8D9A0()
{
  unint64_t result;

  result = qword_2542AFD78;
  if (!qword_2542AFD78)
  {
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2542AFD78);
  }
  return result;
}

unint64_t sub_236B8D9E4()
{
  unint64_t result;

  result = qword_2542AF278;
  if (!qword_2542AF278)
  {
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE0D48], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2542AF278);
  }
  return result;
}

unint64_t sub_236B8DA28()
{
  unint64_t result;

  result = qword_2542AFD70;
  if (!qword_2542AFD70)
  {
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE0D40], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2542AFD70);
  }
  return result;
}

uint64_t sub_236B8DA6C()
{
  void *v0;
  uint64_t v1;
  _BOOL4 v2;
  _QWORD *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  BOOL v7;

  if (qword_2542AF1F0 != -1)
    swift_once();
  v0 = off_2542AFB48;
  v1 = *((_QWORD *)off_2542AFB48 + 2);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  sub_236B87778((double *)(v1 + 16), (uint64_t)v0, &v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  v2 = v7;
  swift_release();
  if (v2)
    sub_236B86180();
  swift_release();
  if (qword_2542AFB68 != -1)
    swift_once();
  v3 = off_2542AFB58;
  v4 = (os_unfair_lock_s *)((char *)off_2542AFB58 + 32);
  swift_retain();
  os_unfair_lock_lock(v4);
  v5 = v3[2];
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v4);
  swift_release();
  return v5;
}

unint64_t sub_236B8DB8C(unint64_t result)
{
  uint64_t v1;
  char v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9[2];
  char v10;

  v1 = *(_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    result = sub_236B8BFC0(0x6D617473656D6974, 0xE900000000000070);
    if ((v2 & 1) != 0)
    {
      if (*(_QWORD *)(v1 + 16) && (v3 = sub_236B8BFC0(0x6D617473656D6974, 0xE900000000000070), (v4 & 1) != 0))
      {
        v5 = *(_QWORD *)(v1 + 56) + 24 * v3;
        v6 = *(_QWORD *)v5;
        v7 = *(_QWORD *)(v5 + 8);
        v8 = *(_BYTE *)(v5 + 16);
        sub_236B8C348(*(_QWORD *)v5, v7, v8);
      }
      else
      {
        v6 = 0;
        v7 = 0;
        v8 = -1;
      }
      sub_236B95E1C(v6, v7, v8, 0xD000000000000011, 0x8000000236BD5CC0);
      sub_236BB1A24(0x6D617473656D6974, 0xE900000000000070, (uint64_t)v9);
      return sub_236B95F4C(v9[0], v9[1], v10);
    }
  }
  return result;
}

uint64_t sub_236B8DC98(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236B8DCB4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236B8DCB4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF58);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236B8DE1C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF2A0);
    v20 = a2[2];
    swift_bridgeObjectRetain();
    v3 = 0;
    v17 = a2 + 7;
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v18 = a2;
    while (1)
    {
      swift_getKeyPath();
      sub_236BCF89C();
      swift_release();
      v5 = MEMORY[0x23B7FDBB0]();
      v7 = v6;
      swift_bridgeObjectRelease();
      if (v20)
      {
        v8 = a2[4] == v5 && a2[5] == v7;
        if (v8 || (result = sub_236BCFF98(), (result & 1) != 0))
        {
LABEL_11:
          swift_bridgeObjectRelease();
          swift_getKeyPath();
          sub_236BCF89C();
          swift_release();
          MEMORY[0x23B7FDBB0]();
          sub_236BCFA58();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_236BCFA58();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = sub_236B8E0D0(0, v4[2] + 1, 1, v4);
          v11 = v4[2];
          v10 = v4[3];
          if (v11 >= v10 >> 1)
            v4 = sub_236B8E0D0((_QWORD *)(v10 > 1), v11 + 1, 1, v4);
          v4[2] = v11 + 1;
          v12 = &v4[2 * v11];
          v12[4] = 8315;
          v12[5] = 0xE200000000000000;
        }
        else
        {
          if (v20 != 1)
          {
            v13 = v17;
            v14 = 1;
            while (1)
            {
              v15 = v14 + 1;
              if (__OFADD__(v14, 1))
                break;
              if (*(v13 - 1) == v5 && *v13 == v7)
                goto LABEL_11;
              result = sub_236BCFF98();
              if ((result & 1) != 0)
                goto LABEL_11;
              v13 += 2;
              ++v14;
              if (v15 == v20)
                goto LABEL_26;
            }
            __break(1u);
            return result;
          }
LABEL_26:
          swift_bridgeObjectRelease();
        }
        a2 = v18;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (++v3 == v19)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v4;
      }
    }
  }
  return MEMORY[0x24BEE4AF8];
}

_QWORD *sub_236B8E0D0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF58);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_236B8E1DC(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_236B8E1DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t Dictionary<>.asSimpleType()(uint64_t a1)
{
  return sub_236B8E4A4(a1);
}

uint64_t sub_236B8E4A4(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD v39[2];
  unsigned __int8 v40;
  _QWORD v41[4];
  uint64_t v42;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEF0);
  result = sub_236BCFE24();
  v3 = (_QWORD *)result;
  v4 = 0;
  v42 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v34 = v6;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v36 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v42 + 48) + 16 * i);
    v18 = *v16;
    v17 = v16[1];
    sub_236B8E794(*(_QWORD *)(v42 + 56) + 32 * i, (uint64_t)v41);
    sub_236B8E794((uint64_t)v41, (uint64_t)&v37);
    swift_bridgeObjectRetain();
    SimpleType.init(_:)((uint64_t)&v37, (uint64_t)v39);
    v19 = v40;
    if (v40 == 255)
    {
      sub_236BC2730();
      swift_allocError();
      v28 = v27;
      __swift_project_boxed_opaque_existential_1(v41, v41[3]);
      swift_getDynamicType();
      v29 = sub_236BD00A0();
      v31 = v30;
      v37 = 0;
      v38 = 0xE000000000000000;
      sub_236BCFE00();
      v32 = v37;
      v33 = v38;
      *v28 = v29;
      v28[1] = v31;
      v28[2] = v32;
      v28[3] = v33;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
      return (uint64_t)v3;
    }
    v21 = v39[0];
    v20 = v39[1];
    result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
    *(_QWORD *)(v36 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v22 = (_QWORD *)(v3[6] + 16 * i);
    *v22 = v18;
    v22[1] = v17;
    v23 = v3[7] + 24 * i;
    *(_QWORD *)v23 = v21;
    *(_QWORD *)(v23 + 8) = v20;
    *(_BYTE *)(v23 + 16) = v19;
    v24 = v3[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v3[2] = v26;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_26;
    if (v13 >= v35)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v34 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v35)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v34 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v35)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v34 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v10 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v35)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v34 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v35)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v34 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_236B8E794(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t SimpleType.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  BOOL v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  double v17;
  uint64_t v18;
  __int128 v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  id v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  unsigned __int8 v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73[5];

  v4 = sub_236BCF7A0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_236B8E794(a1, (uint64_t)v73);
  sub_236B8F33C(0, (unint64_t *)&unk_2542AFEA0);
  if (!swift_dynamicCast())
    goto LABEL_10;
  v8 = (void *)v69;
  if (*MEMORY[0x24BDBD270])
    v9 = (_QWORD)v69 == *MEMORY[0x24BDBD270];
  else
    v9 = 0;
  if (v9)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);

    v13 = 3;
    v12 = 1;
LABEL_21:
    result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = v13;
    return result;
  }
  v10 = (void *)*MEMORY[0x24BDBD268];

  if (v10)
    v11 = v8 == v10;
  else
    v11 = 0;
  if (v11)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    v12 = 0;
    v13 = 3;
    goto LABEL_21;
  }
LABEL_10:
  if (swift_dynamicCast())
  {
    v12 = (char)v69;
LABEL_20:
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    v13 = 0;
    goto LABEL_21;
  }
  if (swift_dynamicCast())
  {
    v12 = (__int16)v69;
    goto LABEL_20;
  }
  if (swift_dynamicCast())
  {
    v12 = (int)v69;
    goto LABEL_20;
  }
  if (swift_dynamicCast())
  {
    v12 = v69;
    goto LABEL_20;
  }
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    v13 = 0;
    v12 = v69;
    goto LABEL_21;
  }
  if (swift_dynamicCast())
  {
    v12 = v69;
LABEL_32:
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    v13 = 1;
    goto LABEL_21;
  }
  if (swift_dynamicCast())
  {
    v12 = (unsigned __int16)v69;
    goto LABEL_32;
  }
  if (swift_dynamicCast())
  {
    v12 = v69;
    goto LABEL_32;
  }
  if (swift_dynamicCast())
  {
    v12 = v69;
    goto LABEL_32;
  }
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    v15 = v69;
    result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = 1;
LABEL_40:
    *(_BYTE *)(a2 + 16) = v16;
    return result;
  }
  if (swift_dynamicCast())
  {
    v17 = *(float *)&v69;
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
    *(double *)a2 = v17;
LABEL_39:
    *(_QWORD *)(a2 + 8) = 0;
    v16 = 2;
    goto LABEL_40;
  }
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    v18 = v69;
    result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
    *(_QWORD *)a2 = v18;
    goto LABEL_39;
  }
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    v19 = v69;
    result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
    *(_OWORD *)a2 = v19;
    v16 = 4;
    goto LABEL_40;
  }
  sub_236B8F33C(0, &qword_2542AFE98);
  if (!swift_dynamicCast())
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542AFD90);
    if (swift_dynamicCast())
    {
      v58 = sub_236B8E4A4(v69);
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
      swift_bridgeObjectRelease();
      result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
      *(_QWORD *)a2 = v58;
LABEL_80:
      *(_QWORD *)(a2 + 8) = 0;
      v16 = 6;
      goto LABEL_40;
    }
    sub_236B8F33C(0, &qword_256442E50);
    if (swift_dynamicCast())
    {
      v34 = (void *)v69;
      *(_QWORD *)&v65 = 0;
      sub_236BCF92C();
      if ((_QWORD)v65)
      {
        v59 = sub_236B8E4A4(v65);
        __swift_destroy_boxed_opaque_existential_1Tm(a1);
        swift_bridgeObjectRelease();

        result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
        *(_QWORD *)a2 = v59;
        goto LABEL_80;
      }

    }
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    v57 = v73;
LABEL_79:
    result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v57);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = -1;
    goto LABEL_40;
  }
  v20 = v72;
  v21 = (uint64_t)objc_msgSend(v72, sel_count);
  v71 = MEMORY[0x24BEE4AF8];
  sub_236BA56D4(0, v21 & ~(v21 >> 63), 0);
  v22 = v20;
  sub_236BCFC80();
  v62 = v22;

  if (v21 < 0)
  {
LABEL_82:
    __break(1u);
LABEL_83:
    swift_once();
LABEL_73:
    v48 = sub_236BCF8C0();
    __swift_project_value_buffer(v48, (uint64_t)qword_256442A50);
    v49 = (id)v21;
    v50 = (id)v21;
    v51 = sub_236BCF8A8();
    v52 = sub_236BCFC20();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      v54 = swift_slowAlloc();
      v73[0] = v54;
      *(_DWORD *)v53 = 136380675;
      *(_QWORD *)&v64 = v53 + 4;
      swift_getErrorValue();
      v55 = sub_236BCFFE0();
      *(_QWORD *)&v69 = sub_236B93FB0(v55, v56, v73);
      sub_236BCFCC8();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_236B83000, v51, v52, "%{private}s", v53, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v54, -1, -1);
      MEMORY[0x23B7FE96C](v53, -1, -1);

    }
    else
    {

    }
    v57 = (uint64_t *)a1;
    goto LABEL_79;
  }
  v23 = v21;
  if (!v21)
  {
LABEL_58:
    v63 = sub_236BC26E8();
    while (1)
    {
      sub_236BCFCBC();
      if (!v66)
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        sub_236BA4C90((uint64_t)&v65);
        v35 = v71;
        __swift_destroy_boxed_opaque_existential_1Tm(a1);

        result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
        *(_QWORD *)a2 = v35;
        *(_QWORD *)(a2 + 8) = 0;
        v16 = 5;
        goto LABEL_40;
      }
      sub_236B8BA20(&v65, &v69);
      sub_236B8E794((uint64_t)&v69, (uint64_t)&v65);
      SimpleType.init(_:)(&v67, &v65);
      v29 = v68;
      if (v68 == 255)
        break;
      v64 = v67;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v69);
      v30 = v71;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_236BA56D4(0, *(_QWORD *)(v30 + 16) + 1, 1);
        v30 = v71;
      }
      v32 = *(_QWORD *)(v30 + 16);
      v31 = *(_QWORD *)(v30 + 24);
      if (v32 >= v31 >> 1)
      {
        sub_236BA56D4(v31 > 1, v32 + 1, 1);
        v30 = v71;
      }
      *(_QWORD *)(v30 + 16) = v32 + 1;
      v33 = v30 + 24 * v32;
      *(_OWORD *)(v33 + 32) = v64;
      *(_BYTE *)(v33 + 48) = v29;
    }
    sub_236BC2730();
    v21 = swift_allocError();
    v43 = v42;
    __swift_project_boxed_opaque_existential_1(&v69, v70);
    swift_getDynamicType();
    v44 = sub_236BD00A0();
    v46 = v45;
    *(_QWORD *)&v65 = 0;
    *((_QWORD *)&v65 + 1) = 0xE000000000000000;
    sub_236BCFE00();
    v47 = v65;
    *(_QWORD *)v43 = v44;
    *(_QWORD *)(v43 + 8) = v46;
    *(_OWORD *)(v43 + 16) = v47;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v69);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);

    swift_release();
LABEL_72:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v73);
    if (qword_256442638 == -1)
      goto LABEL_73;
    goto LABEL_83;
  }
  v63 = sub_236BC26E8();
  while (1)
  {
    if (!v23)
    {
      __break(1u);
      goto LABEL_82;
    }
    result = sub_236BCFCBC();
    if (!v70)
      break;
    sub_236B8E794((uint64_t)&v69, (uint64_t)&v65);
    SimpleType.init(_:)(&v67, &v65);
    v24 = v68;
    if (v68 == 255)
    {
      sub_236BC2730();
      v21 = swift_allocError();
      v37 = v36;
      __swift_project_boxed_opaque_existential_1(&v69, v70);
      swift_getDynamicType();
      v38 = sub_236BD00A0();
      v40 = v39;
      *(_QWORD *)&v65 = 0;
      *((_QWORD *)&v65 + 1) = 0xE000000000000000;
      sub_236BCFE00();
      v41 = v65;
      *(_QWORD *)v37 = v38;
      *(_QWORD *)(v37 + 8) = v40;
      *(_OWORD *)(v37 + 16) = v41;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v69);

      goto LABEL_72;
    }
    v64 = v67;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v69);
    v25 = v71;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_236BA56D4(0, *(_QWORD *)(v25 + 16) + 1, 1);
      v25 = v71;
    }
    v21 = *(_QWORD *)(v25 + 16);
    v26 = *(_QWORD *)(v25 + 24);
    v27 = v21 + 1;
    if (v21 >= v26 >> 1)
    {
      v61 = v21 + 1;
      sub_236BA56D4(v26 > 1, v21 + 1, 1);
      v27 = v61;
      v25 = v71;
    }
    *(_QWORD *)(v25 + 16) = v27;
    v28 = v25 + 24 * v21;
    *(_OWORD *)(v28 + 32) = v64;
    *(_BYTE *)(v28 + 48) = v24;
    if (!--v23)
      goto LABEL_58;
  }
  __break(1u);
  return result;
}

uint64_t sub_236B8F33C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B7FE894]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x23B7FE81C](a1, v6, a5);
}

uint64_t dispatch thunk of SessionProtocol.reporterID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of DefaultsProfile.subscript.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t SummaryConfig.makeNewEventOnChangeFields.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 __swift_memcpy162_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_236B8F4B8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236B857E4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236B8F4D4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_236BA01DC();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_236BB77B0();
      goto LABEL_14;
    }
    sub_236BA17C8();
  }
  v8 = *v3;
  result = sub_236BD001C();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = sub_236BCFFC8();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_236B8F5F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE *__dst;

  v3 = a1[1];
  result = sub_236BCFF5C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_145;
    if (v3)
      return sub_236B90000(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_153;
  v93 = v3;
  v94 = v3 - 2;
  v92 = result;
  v90 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (_BYTE *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_111:
      v82 = v11;
      v91 = v8;
      if (v12 >= 2)
      {
        v83 = *v90;
        do
        {
          v84 = v12 - 2;
          if (v12 < 2)
            goto LABEL_140;
          if (!v83)
            goto LABEL_152;
          v85 = v82;
          v86 = *(_QWORD *)&v82[16 * v84 + 32];
          v87 = *(_QWORD *)&v82[16 * v12 + 24];
          sub_236BB1B14((_BYTE *)(v83 + v86), (_BYTE *)(v83 + *(_QWORD *)&v82[16 * v12 + 16]), v83 + v87, __dst);
          if (v1)
            break;
          if (v87 < v86)
            goto LABEL_141;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v85 = sub_236BC5EC0((uint64_t)v85);
          if (v84 >= *((_QWORD *)v85 + 2))
            goto LABEL_142;
          v88 = &v85[16 * v84 + 32];
          *(_QWORD *)v88 = v86;
          *((_QWORD *)v88 + 1) = v87;
          v89 = *((_QWORD *)v85 + 2);
          if (v12 > v89)
            goto LABEL_143;
          memmove(&v85[16 * v12 + 16], &v85[16 * v12 + 32], 16 * (v89 - v12));
          v82 = v85;
          *((_QWORD *)v85 + 2) = v89 - 1;
          v12 = v89 - 1;
        }
        while (v89 > 2);
      }
LABEL_108:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v91 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v91 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_236BCFB6C();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v93;
    v91 = v7;
    __dst = (_BYTE *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_40;
    if (*(_QWORD *)&aRoot_2[8 * *(char *)(v10 + v9)] == *(_QWORD *)&aRoot_2[8 * *(char *)(v10 + v13)])
      v14 = 0;
    else
      v14 = sub_236BCFF98();
    swift_bridgeObjectRelease_n();
    v9 = v13 + 2;
    v15 = v13;
    if (v13 + 2 < v3)
    {
      while (1)
      {
        if (*(_QWORD *)&aRoot_2[8 * *(char *)(v10 + v15 + 2)] == *(_QWORD *)&aRoot_2[8 * *(char *)(v10 + v15 + 1)])
        {
          swift_bridgeObjectRelease_n();
          if ((v14 & 1) != 0)
          {
            v9 = v15 + 2;
            if (v15 + 2 < v13)
              goto LABEL_146;
            goto LABEL_23;
          }
        }
        else
        {
          v19 = sub_236BCFF98();
          swift_bridgeObjectRelease_n();
          if (((v14 ^ v19) & 1) != 0)
          {
            v9 = v15 + 2;
            if ((v14 & 1) != 0)
              goto LABEL_22;
            goto LABEL_40;
          }
        }
        if (v94 == ++v15)
        {
          v9 = v3;
          if ((v14 & 1) == 0)
            goto LABEL_40;
          goto LABEL_22;
        }
      }
    }
    if ((v14 & 1) != 0)
    {
LABEL_22:
      if (v9 < v13)
        goto LABEL_146;
LABEL_23:
      if (v13 < v9)
      {
        v16 = v9 - 1;
        v17 = v13;
        do
        {
          if (v17 != v16)
          {
            if (!v10)
              goto LABEL_151;
            v18 = *(_BYTE *)(v10 + v17);
            *(_BYTE *)(v10 + v17) = *(_BYTE *)(v10 + v16);
            *(_BYTE *)(v10 + v16) = v18;
          }
          v60 = ++v17 < v16--;
        }
        while (v60);
      }
    }
LABEL_40:
    if (v9 >= v3)
      goto LABEL_60;
    if (__OFSUB__(v9, v13))
      goto LABEL_144;
    if (v9 - v13 >= v92)
      goto LABEL_60;
    if (__OFADD__(v13, v92))
      goto LABEL_147;
    v20 = v13;
    v21 = v13 + v92 >= v3 ? v3 : v13 + v92;
    v95 = v20;
    if (v21 < v20)
      break;
    if (v9 != v21)
    {
      v22 = (char *)(v10 + v9);
      do
      {
        v23 = *(_BYTE *)(v10 + v9);
        v24 = v95;
        v25 = v22;
        while (*(_QWORD *)&aRoot_2[8 * v23] != *(_QWORD *)&aRoot_2[8 * *(v25 - 1)])
        {
          v26 = sub_236BCFF98();
          swift_bridgeObjectRelease_n();
          if ((v26 & 1) == 0)
            goto LABEL_51;
          if (!v10)
            goto LABEL_149;
          v23 = *v25;
          *v25 = *(v25 - 1);
          *(v25 - 1) = v23;
          ++v24;
          --v25;
          if (v9 == v24)
            goto LABEL_51;
        }
        swift_bridgeObjectRelease_n();
LABEL_51:
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      v9 = v21;
    }
    v13 = v95;
LABEL_60:
    if (v9 < v13)
      goto LABEL_139;
    v27 = v13;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_236BC5C90(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v29 = *((_QWORD *)v11 + 2);
    v28 = *((_QWORD *)v11 + 3);
    v12 = v29 + 1;
    if (v29 >= v28 >> 1)
      v11 = sub_236BC5C90((char *)(v28 > 1), v29 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v30 = v11 + 32;
    v31 = &v11[16 * v29 + 32];
    *(_QWORD *)v31 = v27;
    *((_QWORD *)v31 + 1) = v9;
    if (v29)
    {
      v96 = v9;
      while (1)
      {
        v32 = v12 - 1;
        if (v12 >= 4)
        {
          v37 = &v30[16 * v12];
          v38 = *((_QWORD *)v37 - 8);
          v39 = *((_QWORD *)v37 - 7);
          v43 = __OFSUB__(v39, v38);
          v40 = v39 - v38;
          if (v43)
            goto LABEL_128;
          v42 = *((_QWORD *)v37 - 6);
          v41 = *((_QWORD *)v37 - 5);
          v43 = __OFSUB__(v41, v42);
          v35 = v41 - v42;
          v36 = v43;
          if (v43)
            goto LABEL_129;
          v44 = v12 - 2;
          v45 = &v30[16 * v12 - 32];
          v47 = *(_QWORD *)v45;
          v46 = *((_QWORD *)v45 + 1);
          v43 = __OFSUB__(v46, v47);
          v48 = v46 - v47;
          if (v43)
            goto LABEL_131;
          v43 = __OFADD__(v35, v48);
          v49 = v35 + v48;
          if (v43)
            goto LABEL_134;
          if (v49 >= v40)
          {
            v67 = &v30[16 * v32];
            v69 = *(_QWORD *)v67;
            v68 = *((_QWORD *)v67 + 1);
            v43 = __OFSUB__(v68, v69);
            v70 = v68 - v69;
            if (v43)
              goto LABEL_138;
            v60 = v35 < v70;
            goto LABEL_98;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v61 = *((_QWORD *)v11 + 4);
            v62 = *((_QWORD *)v11 + 5);
            v43 = __OFSUB__(v62, v61);
            v54 = v62 - v61;
            v55 = v43;
            goto LABEL_92;
          }
          v34 = *((_QWORD *)v11 + 4);
          v33 = *((_QWORD *)v11 + 5);
          v43 = __OFSUB__(v33, v34);
          v35 = v33 - v34;
          v36 = v43;
        }
        if ((v36 & 1) != 0)
          goto LABEL_130;
        v44 = v12 - 2;
        v50 = &v30[16 * v12 - 32];
        v52 = *(_QWORD *)v50;
        v51 = *((_QWORD *)v50 + 1);
        v53 = __OFSUB__(v51, v52);
        v54 = v51 - v52;
        v55 = v53;
        if (v53)
          goto LABEL_133;
        v56 = &v30[16 * v32];
        v58 = *(_QWORD *)v56;
        v57 = *((_QWORD *)v56 + 1);
        v43 = __OFSUB__(v57, v58);
        v59 = v57 - v58;
        if (v43)
          goto LABEL_136;
        if (__OFADD__(v54, v59))
          goto LABEL_137;
        if (v54 + v59 >= v35)
        {
          v60 = v35 < v59;
LABEL_98:
          if (v60)
            v32 = v44;
          goto LABEL_100;
        }
LABEL_92:
        if ((v55 & 1) != 0)
          goto LABEL_132;
        v63 = &v30[16 * v32];
        v65 = *(_QWORD *)v63;
        v64 = *((_QWORD *)v63 + 1);
        v43 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if (v43)
          goto LABEL_135;
        if (v66 < v54)
          goto LABEL_15;
LABEL_100:
        v71 = v32 - 1;
        if (v32 - 1 >= v12)
        {
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }
        if (!v10)
          goto LABEL_150;
        v72 = v11;
        v73 = v10;
        v74 = &v30[16 * v71];
        v75 = *(_QWORD *)v74;
        v76 = v30;
        v77 = v32;
        v78 = &v30[16 * v32];
        v79 = *((_QWORD *)v78 + 1);
        v80 = v73;
        sub_236BB1B14((_BYTE *)(v73 + *(_QWORD *)v74), (_BYTE *)(v73 + *(_QWORD *)v78), v73 + v79, __dst);
        if (v1)
          goto LABEL_108;
        if (v79 < v75)
          goto LABEL_125;
        if (v77 > *((_QWORD *)v72 + 2))
          goto LABEL_126;
        *(_QWORD *)v74 = v75;
        *(_QWORD *)&v76[16 * v71 + 8] = v79;
        v81 = *((_QWORD *)v72 + 2);
        if (v77 >= v81)
          goto LABEL_127;
        v11 = v72;
        v12 = v81 - 1;
        memmove(v78, v78 + 16, 16 * (v81 - 1 - v77));
        v30 = v76;
        *((_QWORD *)v72 + 2) = v81 - 1;
        v10 = v80;
        v9 = v96;
        if (v81 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v93;
    if (v9 >= v93)
    {
      v8 = v91;
      goto LABEL_111;
    }
  }
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  result = sub_236BCFE0C();
  __break(1u);
  return result;
}

double static Double.seconds(_:)(double a1)
{
  return sub_236B8FD58(&qword_2542AF288, qword_2542AFE28, a1);
}

double sub_236B8FD58(_QWORD *a1, double *a2, double a3)
{
  if (*a1 != -1)
    swift_once();
  return *a2 * a3;
}

uint64_t sub_236B8FDA0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

_QWORD *sub_236B8FE04(_QWORD *result, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 56;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_236B8FF98(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_236BC62CC(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_236B8F5F4(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_236B90000(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  char *v11;
  char v12;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = (char *)(*a4 + a3);
LABEL_6:
    v9 = *(_BYTE *)(v7 + v4);
    v10 = v6;
    v11 = v8;
    while (1)
    {
      if (*(_QWORD *)&aRoot_2[8 * v9] == *(_QWORD *)&aRoot_2[8 * *(v11 - 1)])
      {
        result = swift_bridgeObjectRelease_n();
LABEL_5:
        ++v4;
        ++v8;
        if (v4 == a2)
          return result;
        goto LABEL_6;
      }
      v12 = sub_236BCFF98();
      result = swift_bridgeObjectRelease_n();
      if ((v12 & 1) == 0)
        goto LABEL_5;
      if (!v7)
        break;
      v9 = *v11;
      *v11 = *(v11 - 1);
      *(v11 - 1) = v9;
      ++v10;
      --v11;
      if (v4 == v10)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t static Logger.bluetooth.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AFD30, (uint64_t)qword_2542AFD18, a1);
}

uint64_t static Logger.tailspin.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AFD10, (uint64_t)qword_2542AFCF0, a1);
}

uint64_t static Logger.powerLog.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AFCE8, (uint64_t)qword_2542AFCD0, a1);
}

uint64_t static Logger.service.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AF268, (uint64_t)qword_2542AF248, a1);
}

uint64_t static Logger.rtc.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AFC90, (uint64_t)qword_2542AFC70, a1);
}

uint64_t static Logger.abc.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AFC68, (uint64_t)qword_2542AFC48, a1);
}

uint64_t static Logger.adaptiveVolume.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AFC40, (uint64_t)qword_2542AFC28, a1);
}

uint64_t static Logger.notifications.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AFC20, (uint64_t)qword_2542AFC00, a1);
}

uint64_t static Logger.audioCapture.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AFBF8, (uint64_t)qword_2542AFBE0, a1);
}

uint64_t static Utilities.createEventCategory(from:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  uint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x8_t v10;
  unint64_t v11;
  int *v12;
  int v13;

  v1 = sub_236BCC638(a1);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v4 = 0;
    goto LABEL_10;
  }
  if (v2 < 8)
  {
    v3 = 0;
    LODWORD(v4) = 0;
LABEL_8:
    v11 = v2 - v3;
    v12 = (int *)(v1 + 4 * v3 + 32);
    do
    {
      v13 = *v12++;
      v4 = v13 | v4;
      --v11;
    }
    while (v11);
    goto LABEL_10;
  }
  v3 = v2 & 0x7FFFFFFFFFFFFFF8;
  v5 = (int8x16_t *)(v1 + 48);
  v6 = 0uLL;
  v7 = v2 & 0x7FFFFFFFFFFFFFF8;
  v8 = 0uLL;
  do
  {
    v6 = vorrq_s8(v5[-1], v6);
    v8 = vorrq_s8(*v5, v8);
    v5 += 2;
    v7 -= 8;
  }
  while (v7);
  v9 = vorrq_s8(v8, v6);
  v10 = vorr_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
  v4 = (v10.i32[0] | v10.i32[1]);
  if (v2 != v3)
    goto LABEL_8;
LABEL_10:
  swift_bridgeObjectRelease();
  return v4;
}

ValueMetadata *type metadata accessor for RTCConfig()
{
  return &type metadata for RTCConfig;
}

uint64_t RTCConfig.sampleByServiceType.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_236B902D8()
{
  char v1;
  char v2;
  uint64_t v3;

  if (qword_2542AFFB0 != -1)
    swift_once();
  type metadata accessor for ThermalState(0);
  sub_236BCFC5C();
  if ((sub_236B8FDA0(v3, (uint64_t)&unk_2508278E8) & 1) != 0)
    return sub_236B9F500(&v1, 2);
  else
    return sub_236B85AB0(2, &v2);
}

uint64_t type metadata accessor for OsTransactionHandler()
{
  uint64_t result;

  result = qword_2542AF778;
  if (!qword_2542AF778)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t static OsTransactionHandler.shared.getter()
{
  if (qword_2542AF1D0 != -1)
    swift_once();
  return swift_retain();
}

uint64_t static DefaultsUtilities.platformDefaultUserName.getter()
{
  return 0x656C69626F6DLL;
}

unint64_t static DefaultsUtilities.reportingDomain.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t dispatch thunk of SessionProtocol.appName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of SessionProtocol.serviceConfiguration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of SessionProtocol.configuration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t static DeviceUtilities.isIphone.getter()
{
  return sub_236B84FA4(&qword_2542AF608, byte_2542AF5FC);
}

uint64_t static DeviceUtilities.isAudioMxdEnabled.getter()
{
  return sub_236B84FA4(qword_2542AF548, (unsigned __int8 *)byte_2542AF538);
}

uint64_t Preference.query()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  Preference.sync()();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t isTapToRadarAvailable()
{
  return 1;
}

void sub_236B90598(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_236B90634(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_236B907BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_236B9098C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v4;

  _Unwind_Resume(a1);
}

Class initRadarComponent(void)
{
  Class result;

  if (TapToRadarKitLibrary(void)::sOnce != -1)
    dispatch_once(&TapToRadarKitLibrary(void)::sOnce, &__block_literal_global);
  result = objc_getClass("RadarComponent");
  classRadarComponent = (uint64_t)result;
  getRadarComponentClass = (uint64_t (*)(void))RadarComponentFunction;
  return result;
}

id RadarComponentFunction(void)
{
  return (id)classRadarComponent;
}

Class initRadarDraft(void)
{
  Class result;

  if (TapToRadarKitLibrary(void)::sOnce != -1)
    dispatch_once(&TapToRadarKitLibrary(void)::sOnce, &__block_literal_global);
  result = objc_getClass("RadarDraft");
  classRadarDraft = (uint64_t)result;
  getRadarDraftClass = (uint64_t (*)(void))RadarDraftFunction;
  return result;
}

id RadarDraftFunction(void)
{
  return (id)classRadarDraft;
}

Class initTapToRadarService(void)
{
  Class result;

  if (TapToRadarKitLibrary(void)::sOnce != -1)
    dispatch_once(&TapToRadarKitLibrary(void)::sOnce, &__block_literal_global);
  result = objc_getClass("TapToRadarService");
  classTapToRadarService = (uint64_t)result;
  getTapToRadarServiceClass = (uint64_t (*)(void))TapToRadarServiceFunction;
  return result;
}

id TapToRadarServiceFunction(void)
{
  return (id)classTapToRadarService;
}

void sub_236B910A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_236B91134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_236B911C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_236B911DC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE v47[216];
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  unsigned __int16 v52;
  char v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[13];
  unint64_t v58;

  swift_bridgeObjectRetain();
  if ((a2 & 1) != 0)
  {
    v42 = a2;
    v29 = a3;
    v7 = 261;
  }
  else
  {
    v7 = 5;
    sub_236BBBF48(a1, 5);
    if (v3)
      return swift_bridgeObjectRelease_n();
    v42 = a2;
    v29 = a3;
  }
  v41 = sub_236BBAB38(0, a1, v7);
  v40 = sub_236BBAB44(1, a1, v7);
  v58 = v9;
  v39 = sub_236BBAB44(2, a1, v7);
  v46 = v10;
  v38 = sub_236BBAB44(3, a1, v7);
  v45 = v11;
  v37 = sub_236BBAB44(4, a1, v7);
  v44 = v12;
  v36 = sub_236BBAB44(5, a1, v7);
  v43 = v13;
  v35 = sub_236BBAB38(6, a1, v7);
  v34 = sub_236BBAB50(7u, a1);
  v31 = v14;
  v15 = sub_236BBABF0(9u, a1);
  v33 = sub_236BBAB50(0xAu, a1);
  v17 = v16;
  v32 = sub_236BBAB50(0xBu, a1);
  v19 = v18;
  v30 = sub_236BBAB50(0xCu, a1);
  v21 = v20;
  v22 = sub_236BBAB50(0xDu, a1);
  v24 = v23;
  v25 = sub_236BBAC98(8, a1, v7);
  swift_bridgeObjectRelease();
  CommonConfigFields.init(dict:)(a1, (uint64_t)&v52);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v26 = 0x10000;
    if (!v53)
      v26 = 0;
    v49 = v54;
    v50 = v55;
    v48 = v26 | v52;
    v51 = v56;
    v28 = v15 | ((HIDWORD(v15) & 1) << 32);
    ABCConfig.init(enabled:instance:name:caseType:caseSubType:caseSubTypeContext:onlyFireOncePerSession:snapshotDelay:minInterestedCount:minInterestedDelaySeconds:minFireDelaySeconds:minSessionLength:maxSessionLength:interestedPredicates:interestedPredicatesParsed:commonFields:allowUnknownFields:)(v41, v40, v58, v39, v46, v38, v45, v37, v57, v44, v36, v43, v35, v34, v31 & 1, v27, v28, SBYTE4(v28), *(double *)&v33,
      v17 & 1,
      *(double *)&v32,
      v19 & 1,
      v30,
      v21 & 1,
      v22,
      v24 & 1,
      v25,
      0,
      &v48,
      v42 & 1);
    sub_236B93F68((uint64_t)v57, (uint64_t)v47);
    return sub_236B93F68((uint64_t)v47, v29);
  }
}

uint64_t ABCConfig.init(enabled:instance:name:caseType:caseSubType:caseSubTypeContext:onlyFireOncePerSession:snapshotDelay:minInterestedCount:minInterestedDelaySeconds:minFireDelaySeconds:minSessionLength:maxSessionLength:interestedPredicates:interestedPredicatesParsed:commonFields:allowUnknownFields:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, int a16, int a17, char a18, double a19, char a20,double a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t *a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _OWORD *v55;
  uint8_t *v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v63;
  id v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v89;
  uint64_t v91;
  _OWORD *v93;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _QWORD v108[7];
  id v109;

  v31 = v30;
  v32 = a7;
  v34 = a3;
  v36 = a9;
  v109 = a28;
  v37 = *a29;
  v38 = a29[1];
  v40 = a29[2];
  v39 = a29[3];
  if (a1 != 2 && (a1 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_236B93D8C(v37, v38);
    if (qword_2542AFCB0 != -1)
      swift_once();
    v41 = sub_236BCF8C0();
    __swift_project_value_buffer(v41, (uint64_t)qword_2542AFC98);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42 = sub_236BCF8A8();
    v43 = sub_236BCFC14();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      v45 = swift_slowAlloc();
      *(_QWORD *)&v95 = v45;
      *(_DWORD *)v44 = 136380675;
      v46 = a2;
      if (!v34)
      {
        if (a5)
          v46 = a4;
        else
          v46 = 0x6E776F6E6B6E75;
        if (a5)
          v34 = a5;
        else
          v34 = 0xE700000000000000;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      v108[0] = sub_236B93FB0(v46, v34, (uint64_t *)&v95);
      sub_236BCFCC8();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_236B83000, v42, v43, "Instance disabled. { instance=%{private}s }", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v45, -1, -1);
      MEMORY[0x23B7FE96C](v44, -1, -1);

      v36 = a9;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      v36 = a9;
    }
LABEL_19:
    sub_236B93F44(&v95);
    return sub_236B93F68((uint64_t)&v95, (uint64_t)v36);
  }
  if (a5 && a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_236B93D8C(v37, v38);
    sub_236B93D48();
    swift_allocError();
    *(_QWORD *)v47 = 0xD000000000000033;
    *(_QWORD *)(v47 + 8) = 0x8000000236BD4FE0;
    *(_BYTE *)(v47 + 16) = 1;
    return swift_willThrow();
  }
  v86 = a29[5];
  v87 = *a29;
  v85 = a29[4];
  if (!a3)
  {
    if (!a5)
    {
      sub_236B93D48();
      swift_allocError();
      *(_QWORD *)v58 = 0xD000000000000025;
      *(_QWORD *)(v58 + 8) = 0x8000000236BD4F90;
      *(_BYTE *)(v58 + 16) = 1;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v50 = v37;
      v51 = v38;
      return sub_236B93D8C(v50, v51);
    }
    v89 = a4;
    v82 = a6;
    v83 = a8;
    goto LABEL_34;
  }
  v89 = a4;
  v82 = a6;
  v83 = a8;
  v84 = a29[1];
  swift_bridgeObjectRetain();
  v49 = sub_236BCFE60();
  swift_bridgeObjectRelease();
  sub_236B92080(a30 & 1, 0xD000000000000013, 0x8000000236BD4FC0, a2, v34, v49 != 0, &v95);
  if (v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v50 = v37;
    v51 = v84;
    return sub_236B93D8C(v50, v51);
  }
  v32 = a7;
  v38 = v84;
  if (v95 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_236B93D8C(v37, v84);
    if (qword_2542AFCB0 != -1)
      swift_once();
    v52 = sub_236BCF8C0();
    __swift_project_value_buffer(v52, (uint64_t)qword_2542AFC98);
    v53 = sub_236BCF8A8();
    v54 = sub_236BCFC14();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = v36;
      v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v56 = 0;
      _os_log_impl(&dword_236B83000, v53, v54, "Unknown ABC instance found in config, but allowUnknownFields is true, so continuing.", v56, 2u);
      v57 = v56;
      v36 = v55;
      MEMORY[0x23B7FE96C](v57, -1, -1);
    }

    goto LABEL_19;
  }
  v59 = a2;
  v60 = v34;
  if (a5)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    v59 = v89;
    v60 = a5;
  }
  if ((a20 & 1) != 0)
    a19 = 0.0;
  if ((a22 & 1) != 0)
    a21 = 3600.0;
  v91 = v59;
  v81 = v39;
  if (v109)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v63 = a10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else if (a27)
  {
    v70 = *(_QWORD *)(a27 + 16);
    if (v70)
    {
      v80 = v40;
      v93 = v36;
      *(_QWORD *)&v95 = MEMORY[0x24BEE4AF8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_236BCFDB8();
      v109 = (id)objc_opt_self();
      v71 = a27 + 40;
      do
      {
        swift_bridgeObjectRetain();
        v72 = (void *)sub_236BCF998();
        v73 = objc_msgSend(v109, sel_buildPredicate_, v72);

        if (!v73)
        {
          sub_236B92CD0();
          if (v31)
          {
            swift_bridgeObjectRelease();
            swift_release();
            sub_236B93D8C(v87, v38);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
        }
        v32 = a7;
        v71 += 16;
        swift_bridgeObjectRelease();
        sub_236BCFD94();
        sub_236BCFDC4();
        sub_236BCFDD0();
        sub_236BCFDA0();
        --v70;
      }
      while (v70);
      v109 = (id)v95;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36 = v93;
      v63 = a10;
      v40 = v80;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v63 = a10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v109 = (id)MEMORY[0x24BEE4AF8];
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v63 = a10;
    swift_bridgeObjectRetain();
    v109 = 0;
  }
  if (v38 == 1)
  {
    v64 = v109;
    swift_bridgeObjectRetain();
    v65 = sub_236B92D84(MEMORY[0x24BEE4AF8]);
    CommonConfigFields.init(dict:)(v65, (uint64_t)v108);
    if (v31)
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease_n();
    }
    v68 = v108[0];
    LOBYTE(v66) = BYTE2(v108[0]);
    v38 = v108[1];
    v40 = v108[2];
    v69 = v108[4];
    v81 = v108[3];
    v67 = v108[5];
  }
  else
  {
    v66 = (v87 >> 16) & 1;
    v64 = v109;
    swift_bridgeObjectRetain();
    v67 = v86;
    v68 = v87;
    v69 = v85;
  }
  LOBYTE(v95) = v34 == 0;
  *((_QWORD *)&v95 + 1) = v91;
  *(_QWORD *)&v96 = v60;
  *((_QWORD *)&v96 + 1) = v82;
  *(_QWORD *)&v97 = v32;
  *((_QWORD *)&v97 + 1) = v83;
  *(_QWORD *)&v98 = v63;
  *((_QWORD *)&v98 + 1) = a11;
  *(_QWORD *)&v99 = a12;
  BYTE8(v99) = (a13 == 2) | a13 & 1;
  *(_QWORD *)&v100 = a14;
  BYTE8(v100) = a15 & 1;
  *(_QWORD *)&v101 = v64;
  DWORD2(v101) = a17;
  BYTE12(v101) = a18 & 1;
  *(double *)&v102 = a19;
  *((double *)&v102 + 1) = a21;
  *(_QWORD *)&v103 = a23;
  BYTE8(v103) = a24 & 1;
  *(_QWORD *)&v104 = a25;
  BYTE8(v104) = a26 & 1;
  LOWORD(v105) = v68;
  BYTE2(v105) = v66;
  *((_QWORD *)&v105 + 1) = v38;
  *(_QWORD *)&v106 = v40;
  *((_QWORD *)&v106 + 1) = v81;
  *(_QWORD *)&v107 = v69;
  *((_QWORD *)&v107 + 1) = v67;
  sub_236B93DEC((uint64_t)&v95);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v74 = v106;
  v36[10] = v105;
  v36[11] = v74;
  v36[12] = v107;
  v75 = v102;
  v36[6] = v101;
  v36[7] = v75;
  v76 = v104;
  v36[8] = v103;
  v36[9] = v76;
  v77 = v98;
  v36[2] = v97;
  v36[3] = v77;
  v78 = v100;
  v36[4] = v99;
  v36[5] = v78;
  v79 = v96;
  *v36 = v95;
  v36[1] = v79;
  nullsub_1(v36);
  return sub_236B93E98((uint64_t)&v95);
}

uint64_t ABCConfig.ABCInstanceName.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_236BCFE60();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_236B92080(char a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, _BYTE *a7@<X8>)
{
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t type;
  uint64_t v21;
  uint64_t v22;

  if ((a6 & 1) != 0)
  {
    if ((a1 & 1) != 0)
    {
      if (qword_2542AFCB0 != -1)
        swift_once();
      v12 = sub_236BCF8C0();
      __swift_project_value_buffer(v12, (uint64_t)qword_2542AFC98);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v13 = sub_236BCF8A8();
      v14 = sub_236BCFC2C();
      if (os_log_type_enabled(v13, v14))
      {
        type = v14;
        v15 = swift_slowAlloc();
        v19 = swift_slowAlloc();
        v21 = v19;
        *(_DWORD *)v15 = 136446467;
        swift_bridgeObjectRetain();
        v22 = sub_236B93FB0(a2, a3, &v21);
        sub_236BCFCC8();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v15 + 12) = 2081;
        if (a5)
          v16 = a4;
        else
          v16 = 7104878;
        if (a5)
          v17 = a5;
        else
          v17 = 0xE300000000000000;
        swift_bridgeObjectRetain();
        v22 = sub_236B93FB0(v16, v17, &v21);
        sub_236BCFCC8();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_236B83000, v13, type, "%{public}s %{private}s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B7FE96C](v19, -1, -1);
        MEMORY[0x23B7FE96C](v15, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      *a7 = 1;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_236BCFA58();
      swift_bridgeObjectRelease();
      sub_236BCFA58();
      swift_bridgeObjectRetain();
      sub_236BCFA58();
      swift_bridgeObjectRelease();
      sub_236B93D48();
      swift_allocError();
      *(_QWORD *)v18 = a2;
      *(_QWORD *)(v18 + 8) = a3;
      *(_BYTE *)(v18 + 16) = 1;
      swift_willThrow();
    }
  }
  else
  {
    *a7 = 0;
  }
}

uint64_t sub_236B9238C(char a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  return sub_236B923A0(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_236B923A0(char a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  unsigned __int16 v7;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t type[8];

  v7 = a6;
  if ((a6 & 0x10000) != 0)
  {
    if ((a1 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_236BCFA58();
      swift_bridgeObjectRelease();
      sub_236BCFA58();
      swift_bridgeObjectRetain();
      sub_236BCFA58();
      swift_bridgeObjectRelease();
      sub_236B93D48();
      swift_allocError();
      *(_QWORD *)v19 = a2;
      *(_QWORD *)(v19 + 8) = a3;
      *(_BYTE *)(v19 + 16) = 1;
      return swift_willThrow();
    }
    if (qword_2542AFCB0 != -1)
      swift_once();
    v12 = sub_236BCF8C0();
    __swift_project_value_buffer(v12, (uint64_t)qword_2542AFC98);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v13 = sub_236BCF8A8();
    v14 = sub_236BCFC2C();
    v15 = v14;
    if (os_log_type_enabled(v13, v14))
    {
      *(_DWORD *)type = v15;
      v16 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      v22 = v21;
      *(_DWORD *)v16 = 136446467;
      swift_bridgeObjectRetain();
      sub_236B93FB0(a2, a3, &v22);
      sub_236BCFCC8();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 2081;
      if (a5)
        v17 = a4;
      else
        v17 = 7104878;
      if (a5)
        v18 = a5;
      else
        v18 = 0xE300000000000000;
      swift_bridgeObjectRetain();
      sub_236B93FB0(v17, v18, &v22);
      sub_236BCFCC8();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_236B83000, v13, type[0], "%{public}s %{private}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v21, -1, -1);
      MEMORY[0x23B7FE96C](v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    v7 = 0;
  }
  return a6 & 0x10000 | v7;
}

uint64_t sub_236B926AC(char a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unsigned int v7;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t type[8];

  v7 = a6;
  if ((a6 & 0x100000000) != 0)
  {
    if ((a1 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_236BCFA58();
      swift_bridgeObjectRelease();
      sub_236BCFA58();
      swift_bridgeObjectRetain();
      sub_236BCFA58();
      swift_bridgeObjectRelease();
      sub_236B93D48();
      swift_allocError();
      *(_QWORD *)v19 = a2;
      *(_QWORD *)(v19 + 8) = a3;
      *(_BYTE *)(v19 + 16) = 1;
      return swift_willThrow();
    }
    if (qword_2542AFCB0 != -1)
      swift_once();
    v12 = sub_236BCF8C0();
    __swift_project_value_buffer(v12, (uint64_t)qword_2542AFC98);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v13 = sub_236BCF8A8();
    v14 = sub_236BCFC2C();
    v15 = v14;
    if (os_log_type_enabled(v13, v14))
    {
      *(_DWORD *)type = v15;
      v16 = swift_slowAlloc();
      v21 = swift_slowAlloc();
      v22 = v21;
      *(_DWORD *)v16 = 136446467;
      swift_bridgeObjectRetain();
      sub_236B93FB0(a2, a3, &v22);
      sub_236BCFCC8();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 2081;
      if (a5)
        v17 = a4;
      else
        v17 = 7104878;
      if (a5)
        v18 = a5;
      else
        v18 = 0xE300000000000000;
      swift_bridgeObjectRetain();
      sub_236B93FB0(v17, v18, &v22);
      sub_236BCFCC8();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_236B83000, v13, type[0], "%{public}s %{private}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v21, -1, -1);
      MEMORY[0x23B7FE96C](v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    v7 = 0;
  }
  return v7 | ((HIDWORD(a6) & 1) << 32);
}

void sub_236B929BC(char a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, _BYTE *a7@<X8>)
{
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t type;
  uint64_t v21;
  uint64_t v22;

  if (a6 == 3)
  {
    if ((a1 & 1) != 0)
    {
      if (qword_2542AFCB0 != -1)
        swift_once();
      v12 = sub_236BCF8C0();
      __swift_project_value_buffer(v12, (uint64_t)qword_2542AFC98);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v13 = sub_236BCF8A8();
      v14 = sub_236BCFC2C();
      if (os_log_type_enabled(v13, v14))
      {
        type = v14;
        v15 = swift_slowAlloc();
        v19 = swift_slowAlloc();
        v21 = v19;
        *(_DWORD *)v15 = 136446467;
        swift_bridgeObjectRetain();
        v22 = sub_236B93FB0(a2, a3, &v21);
        sub_236BCFCC8();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v15 + 12) = 2081;
        if (a5)
          v16 = a4;
        else
          v16 = 7104878;
        if (a5)
          v17 = a5;
        else
          v17 = 0xE300000000000000;
        swift_bridgeObjectRetain();
        v22 = sub_236B93FB0(v16, v17, &v21);
        sub_236BCFCC8();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_236B83000, v13, type, "%{public}s %{private}s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x23B7FE96C](v19, -1, -1);
        MEMORY[0x23B7FE96C](v15, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      *a7 = 3;
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_236BCFA58();
      swift_bridgeObjectRelease();
      sub_236BCFA58();
      swift_bridgeObjectRetain();
      sub_236BCFA58();
      swift_bridgeObjectRelease();
      sub_236B93D48();
      swift_allocError();
      *(_QWORD *)v18 = a2;
      *(_QWORD *)(v18 + 8) = a3;
      *(_BYTE *)(v18 + 16) = 1;
      swift_willThrow();
    }
  }
  else
  {
    *a7 = a6;
  }
}

uint64_t sub_236B92CD0()
{
  uint64_t v0;

  sub_236BCFD4C();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  sub_236B93D48();
  swift_allocError();
  *(_QWORD *)v0 = 0xD00000000000002ALL;
  *(_QWORD *)(v0 + 8) = 0x8000000236BD5260;
  *(_BYTE *)(v0 + 16) = 1;
  return swift_willThrow();
}

unint64_t sub_236B92D84(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542AFF08);
  v2 = sub_236BCFE3C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_236B955C4(v6, (uint64_t)&v15, &qword_2542AFDA0);
    v7 = v15;
    v8 = v16;
    result = sub_236B8BFC0(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_236B8BA20(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_236B92EB8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2564426B8);
  v2 = (_QWORD *)sub_236BCFE3C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = (void *)*(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v5;
    result = sub_236BA4D28((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v8;
    v11 = (_QWORD *)(v2[7] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_236B92FC8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _BYTE v13[8];
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF2F8);
  v2 = sub_236BCFE3C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_236B955C4(v6, (uint64_t)v13, &qword_2564426B0);
    v7 = v13[0];
    result = sub_236BA4CD0(v13[0]);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v7;
    result = (unint64_t)sub_236B8BA20(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_236B930F4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2564426A8);
  v2 = (_QWORD *)sub_236BCFE3C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_236B8BFC0(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_236B93214(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF298);
  v2 = sub_236BCFE3C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_236B955C4(v6, (uint64_t)&v13, (uint64_t *)&unk_2542AFE80);
    v7 = v13;
    result = sub_236BA4DB0(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_236B8BA20(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void ABCConfig.instance.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t ABCConfig.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ABCConfig.caseType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ABCConfig.caseSubType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ABCConfig.caseSubTypeContext.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ABCConfig.onlyFireOncePerSession.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t ABCConfig.snapshotDelay.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t ABCConfig.interestedPredicates.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t ABCConfig.minInterestedCount.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 104) | ((unint64_t)*(unsigned __int8 *)(v0 + 108) << 32);
}

double ABCConfig.minInterestedDelaySeconds.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 112);
}

double ABCConfig.minFireDelaySeconds.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 120);
}

uint64_t ABCConfig.minSessionLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

uint64_t ABCConfig.maxSessionLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

uint64_t ABCConfig.commonFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 162);
  v3 = *(_QWORD *)(v1 + 168);
  v4 = *(_QWORD *)(v1 + 176);
  v5 = *(_QWORD *)(v1 + 184);
  v6 = *(_QWORD *)(v1 + 192);
  v7 = *(_QWORD *)(v1 + 200);
  *(_WORD *)a1 = *(_WORD *)(v1 + 160);
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ABCConfig.ABCInstanceName.rawValue.getter()
{
  return 1701736302;
}

uint64_t sub_236B934E0()
{
  return 1;
}

uint64_t sub_236B934E8()
{
  sub_236BD0028();
  sub_236BCFA34();
  return sub_236BD0064();
}

uint64_t sub_236B93530()
{
  return sub_236BCFA34();
}

uint64_t sub_236B93540()
{
  sub_236BD0028();
  sub_236BCFA34();
  return sub_236BD0064();
}

uint64_t sub_236B93584(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236B935B8 + 4 * byte_236BD0B70[a1]))(0x64656C62616E65, 0xE700000000000000);
}

uint64_t sub_236B935B8()
{
  return 0x65636E6174736E69;
}

uint64_t sub_236B935D0()
{
  return 1701667182;
}

uint64_t sub_236B935E0()
{
  return 0x6570795465736163;
}

uint64_t sub_236B935F8()
{
  return 0x5462755365736163;
}

unint64_t sub_236B93618()
{
  return 0xD000000000000012;
}

unint64_t sub_236B936D8()
{
  return 0xD000000000000010;
}

uint64_t sub_236B93700@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_236BCFE60();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_236B93750(_QWORD *a1@<X8>)
{
  *a1 = 1701736302;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_236B93764@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 162);
  v3 = *(_QWORD *)(v1 + 168);
  v4 = *(_QWORD *)(v1 + 176);
  v5 = *(_QWORD *)(v1 + 184);
  v6 = *(_QWORD *)(v1 + 192);
  v7 = *(_QWORD *)(v1 + 200);
  *(_WORD *)a1 = *(_WORD *)(v1 + 160);
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_236B937D4(uint64_t a1, uint64_t a2)
{
  return sub_236B93BD4(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

_DWORD *sub_236B937EC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_236B937FC(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_WORD *sub_236B93808@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void sub_236B93818(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

BOOL sub_236B93824(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_236B93838()
{
  sub_236BD0028();
  sub_236BD004C();
  return sub_236BD0064();
}

uint64_t sub_236B9387C()
{
  return sub_236BD004C();
}

uint64_t sub_236B938A4()
{
  sub_236BD0028();
  sub_236BD004C();
  return sub_236BD0064();
}

uint64_t sub_236B938E4(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_236BCF9A4();
  *a2 = 0;
  return result;
}

uint64_t sub_236B93958(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_236BCF9B0();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_236B939D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_236BCF9BC();
  v2 = sub_236BCF998();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_236B93A14(uint64_t a1, uint64_t a2)
{
  return sub_236B93BD4(a1, a2, MEMORY[0x24BEE0CD8]);
}

_QWORD *sub_236B93A28@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_236B93A38(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

BOOL sub_236B93A44(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_236B93A60()
{
  sub_236B9576C(&qword_256442710, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_236BD119C);
  sub_236B9576C(&qword_256442718, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_236BD113C);
  return sub_236BCFE54();
}

uint64_t sub_236B93AE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_236BCF998();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_236B93B28@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_236BCF9BC();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_236B93B50()
{
  sub_236B9576C(&qword_256442720, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_236BD1044);
  sub_236B9576C(&qword_256442728, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_236BD0FE4);
  return sub_236BCFE54();
}

uint64_t sub_236B93BD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_236BCF9BC();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_236B93C10()
{
  sub_236BCF9BC();
  sub_236BCFA34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_236B93C50()
{
  uint64_t v0;

  sub_236BCF9BC();
  sub_236BD0028();
  sub_236BCFA34();
  v0 = sub_236BD0064();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_236B93CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_236BCF9BC();
  v2 = v1;
  if (v0 == sub_236BCF9BC() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_236BCFF98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

unint64_t sub_236B93D48()
{
  unint64_t result;

  result = qword_2542AF330;
  if (!qword_2542AF330)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD1A8C, &type metadata for ConfigError);
    atomic_store(result, (unint64_t *)&qword_2542AF330);
  }
  return result;
}

uint64_t sub_236B93D8C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_236B93DEC(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_236B93E98(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

double sub_236B93F44(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_236B93F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFFD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_236B93FB0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_236B94080(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_236B8E794((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_236B8E794((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t sub_236B94080(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_236BCFCD4();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_236B94238(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_236BCFD88();
  if (!v8)
  {
    sub_236BCFE0C();
    __break(1u);
LABEL_17:
    result = sub_236BCFE48();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_236B94238(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_236B942CC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_236B94440(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_236B94440(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_236B942CC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_236BC02F4(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_236BCFD58();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_236BCFE0C();
      __break(1u);
LABEL_10:
      v2 = sub_236BCFA7C();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_236BCFE48();
    __break(1u);
LABEL_14:
    result = sub_236BCFE0C();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_236B94440(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF310);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

unint64_t sub_236B94590()
{
  unint64_t result;

  result = qword_256442680;
  if (!qword_256442680)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for ABCConfig.ABCInstanceName, &type metadata for ABCConfig.ABCInstanceName);
    atomic_store(result, (unint64_t *)&qword_256442680);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CommonConfigFields(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ABCConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ABCConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v7;
  *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v8;
  v9 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v9;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ABCConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v6 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v6;
  v7 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v7;
  LOWORD(v7) = *(_WORD *)(a2 + 160);
  *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
  *(_WORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t assignWithTake for ABCConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_BYTE *)(a1 + 162) = *(_BYTE *)(a2 + 162);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ABCConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ABCConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ABCConfig()
{
  return &type metadata for ABCConfig;
}

uint64_t getEnumTagSinglePayload for ABCConfig.ABCInstanceName(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for ABCConfig.ABCInstanceName(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_236B94C04 + 4 * byte_236BD0B7E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_236B94C24 + 4 * byte_236BD0B83[v4]))();
}

_BYTE *sub_236B94C04(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_236B94C24(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_236B94C2C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_236B94C34(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_236B94C3C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_236B94C44(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_236B94C50()
{
  return 0;
}

void type metadata accessor for AudioServiceType(uint64_t a1)
{
  sub_236B95D58(a1, (unint64_t *)&unk_2542AFE48);
}

void type metadata accessor for AudioEventType(uint64_t a1)
{
  sub_236B95D58(a1, &qword_256442690);
}

void type metadata accessor for AudioEventCategory(uint64_t a1)
{
  sub_236B95D58(a1, &qword_256442698);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_236B95D58(a1, &qword_2564426A0);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_236B95D58(a1, &qword_2542AFE38);
}

void type metadata accessor for ThermalState(uint64_t a1)
{
  sub_236B95D58(a1, &qword_2542AFE90);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_236B95D58(a1, &qword_2542AFE58);
}

uint64_t sub_236B94CE4()
{
  return sub_236B9576C(&qword_2542AFE40, (uint64_t (*)(uint64_t))type metadata accessor for AudioServiceType, (uint64_t)&unk_236BD0EB0);
}

unint64_t sub_236B94D10(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  unsigned __int16 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF18);
    v3 = (_QWORD *)sub_236BCFE3C();
    for (i = (_QWORD *)(a1 + 40); ; i += 2)
    {
      v5 = *((_WORD *)i - 4);
      v6 = *i;
      result = sub_236BA4D58(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_WORD *)(v3[6] + 2 * result) = v5;
      *(_QWORD *)(v3[7] + 8 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

_QWORD *sub_236B94DE4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v24[13];
  _BYTE v25[208];
  _BYTE v26[208];
  _BYTE v27[216];

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v6 = *(_QWORD *)(swift_bridgeObjectRetain() + 32);
  swift_bridgeObjectRetain_n();
  sub_236B911DC(v6, a2 & 1, (uint64_t)v27);
  if (v2)
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
    v9 = v3 - 1;
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      swift_bridgeObjectRelease();
      sub_236B93F68((uint64_t)v27, (uint64_t)v25);
      sub_236B93F68((uint64_t)v25, (uint64_t)v26);
      if (sub_236B955AC((uint64_t)v26) != 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = sub_236B9D7E4(0, v7[2] + 1, 1, v7);
        v11 = v7[2];
        v10 = v7[3];
        if (v11 >= v10 >> 1)
          v7 = sub_236B9D7E4((_QWORD *)(v10 > 1), v11 + 1, 1, v7);
        sub_236B93F68((uint64_t)v25, (uint64_t)v24);
        v7[2] = v11 + 1;
        v12 = &v7[26 * v11];
        v12[2] = v24[0];
        v13 = v24[4];
        v14 = v24[2];
        v15 = v24[1];
        v12[5] = v24[3];
        v12[6] = v13;
        v12[3] = v15;
        v12[4] = v14;
        v16 = v24[8];
        v17 = v24[6];
        v18 = v24[5];
        v12[9] = v24[7];
        v12[10] = v16;
        v12[7] = v18;
        v12[8] = v17;
        v19 = v24[12];
        v20 = v24[10];
        v21 = v24[9];
        v12[13] = v24[11];
        v12[14] = v19;
        v12[11] = v21;
        v12[12] = v20;
      }
      if (v9 == v8)
        break;
      v22 = *(_QWORD *)(a1 + 8 * v8 + 40);
      swift_bridgeObjectRetain_n();
      sub_236B911DC(v22, a2 & 1, (uint64_t)v27);
      ++v8;
    }
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_236B94FEC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;

  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v8 = 0;
    v9 = MEMORY[0x24BEE4AF8];
    do
    {
      v55 = v9;
      v10 = 208 * v8 + 32;
      v11 = v8;
      while (1)
      {
        if (v11 >= *(_QWORD *)(v4 + 16))
        {
          __break(1u);
          return result;
        }
        v12 = *(_OWORD *)(v4 + v10 + 176);
        v51 = *(_OWORD *)(v4 + v10 + 160);
        v52 = v12;
        v53 = *(_OWORD *)(v4 + v10 + 192);
        v13 = *(_OWORD *)(v4 + v10 + 112);
        v47 = *(_OWORD *)(v4 + v10 + 96);
        v48 = v13;
        v14 = *(_OWORD *)(v4 + v10 + 144);
        v49 = *(_OWORD *)(v4 + v10 + 128);
        v50 = v14;
        v15 = *(_OWORD *)(v4 + v10 + 48);
        v43 = *(_OWORD *)(v4 + v10 + 32);
        v44 = v15;
        v16 = *(_OWORD *)(v4 + v10 + 80);
        v45 = *(_OWORD *)(v4 + v10 + 64);
        v46 = v16;
        v17 = *(_OWORD *)(v4 + v10 + 16);
        v41 = *(_OWORD *)(v4 + v10);
        v42 = v17;
        v40[3] = &type metadata for ABCConfig;
        v40[4] = &off_2508282A8;
        v18 = (_OWORD *)swift_allocObject();
        v40[0] = v18;
        v19 = *(_OWORD *)(v4 + v10 + 176);
        v18[11] = *(_OWORD *)(v4 + v10 + 160);
        v18[12] = v19;
        v18[13] = *(_OWORD *)(v4 + v10 + 192);
        v20 = *(_OWORD *)(v4 + v10 + 112);
        v18[7] = *(_OWORD *)(v4 + v10 + 96);
        v18[8] = v20;
        v21 = *(_OWORD *)(v4 + v10 + 144);
        v18[9] = *(_OWORD *)(v4 + v10 + 128);
        v18[10] = v21;
        v22 = *(_OWORD *)(v4 + v10 + 48);
        v18[3] = *(_OWORD *)(v4 + v10 + 32);
        v18[4] = v22;
        v23 = *(_OWORD *)(v4 + v10 + 80);
        v18[5] = *(_OWORD *)(v4 + v10 + 64);
        v18[6] = v23;
        v24 = *(_OWORD *)(v4 + v10 + 16);
        v18[1] = *(_OWORD *)(v4 + v10);
        v18[2] = v24;
        sub_236B93DEC((uint64_t)&v41);
        sub_236B93DEC((uint64_t)&v41);
        v25 = sub_236BA72C0(v40, a2, a3);
        if (v3)
        {
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v40);
          sub_236B93E98((uint64_t)&v41);
          v9 = v55;
          swift_release();
          goto LABEL_17;
        }
        v26 = v25;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v40);
        if ((v26 & 1) != 0)
          break;
        ++v11;
        result = sub_236B93E98((uint64_t)&v41);
        v10 += 208;
        if (v5 == v11)
        {
          v9 = v55;
          goto LABEL_17;
        }
      }
      v9 = v55;
      result = swift_isUniquelyReferenced_nonNull_native();
      v54 = v9;
      if ((result & 1) == 0)
      {
        result = sub_236BA55B4(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v54;
      }
      v28 = *(_QWORD *)(v9 + 16);
      v27 = *(_QWORD *)(v9 + 24);
      v29 = v28 + 1;
      if (v28 >= v27 >> 1)
      {
        v55 = v28 + 1;
        result = sub_236BA55B4(v27 > 1, v28 + 1, 1);
        v29 = v55;
        v9 = v54;
      }
      v8 = v11 + 1;
      *(_QWORD *)(v9 + 16) = v29;
      v30 = (_OWORD *)(v9 + 208 * v28);
      v30[2] = v41;
      v31 = v42;
      v32 = v43;
      v33 = v45;
      v30[5] = v44;
      v30[6] = v33;
      v30[3] = v31;
      v30[4] = v32;
      v34 = v46;
      v35 = v47;
      v36 = v49;
      v30[9] = v48;
      v30[10] = v36;
      v30[7] = v34;
      v30[8] = v35;
      v37 = v50;
      v38 = v51;
      v39 = v53;
      v30[13] = v52;
      v30[14] = v39;
      v30[11] = v37;
      v30[12] = v38;
    }
    while (v5 - 1 != v11);
  }
  else
  {
    v9 = MEMORY[0x24BEE4AF8];
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_236B95284(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;
  _BYTE v15[32];
  __int128 v16;
  uint64_t v17;

  v17 = *a1;
  if (!*(_QWORD *)(v17 + 16)
    || (v3 = sub_236BA4CD0(5), (v4 & 1) == 0)
    || (sub_236B8E794(*(_QWORD *)(v17 + 56) + 32 * v3, (uint64_t)v15),
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC0),
        (swift_dynamicCast() & 1) == 0))
  {
    if (qword_2542AFCB0 != -1)
      swift_once();
    v9 = sub_236BCF8C0();
    __swift_project_value_buffer(v9, (uint64_t)qword_2542AFC98);
    v10 = sub_236BCF8A8();
    v11 = sub_236BCFC14();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_236B83000, v10, v11, "No abc section found, or malformed.", v12, 2u);
      MEMORY[0x23B7FE96C](v12, -1, -1);
    }

    return 0;
  }
  v16 = *(_OWORD *)(a1 + 1);
  v6 = a1[3];
  v5 = a1[4];
  v7 = *((_BYTE *)a1 + 40);
  sub_236B954A0((uint64_t)&v17);
  sub_236B954C8((uint64_t)&v16);
  swift_bridgeObjectRetain();
  v8 = sub_236B94DE4(v14, v7);
  sub_236B954F0((uint64_t)&v17);
  sub_236B95518((uint64_t)&v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    sub_236B954A0((uint64_t)&v17);
    sub_236B954C8((uint64_t)&v16);
    swift_bridgeObjectRetain();
    v6 = sub_236B94FEC((uint64_t)v8, v6, v5);
    sub_236B954F0((uint64_t)&v17);
    sub_236B95518((uint64_t)&v16);
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v6 + 16))
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v6;
}

uint64_t sub_236B954A0(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_236B954C8(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_236B954F0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_236B95518(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_236B95540()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_236B955AC(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_236B955C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for Name(uint64_t a1)
{
  sub_236B95D58(a1, &qword_2564426C8);
}

void *__swift_memcpy648_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x288uLL);
}

uint64_t sub_236B95624(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 648))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_236B95644(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 648) = v3;
  return result;
}

void type metadata accessor for kinfo_proc(uint64_t a1)
{
  sub_236B95D58(a1, (unint64_t *)&unk_2564426D0);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_236B95D58(a1, &qword_2542AFE78);
}

uint64_t sub_236B95740()
{
  return sub_236B9576C(&qword_2564426E0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_236BD0FA8);
}

uint64_t sub_236B9576C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x23B7FE8AC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_236B957AC()
{
  return sub_236B9576C((unint64_t *)&unk_2564426E8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_236BD0F7C);
}

uint64_t sub_236B957D8()
{
  return sub_236B9576C(&qword_2542B0010, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_236BD1018);
}

uint64_t sub_236B95804()
{
  return sub_236B9576C(&qword_2564426F8, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_236BD1100);
}

uint64_t sub_236B95830()
{
  return sub_236B9576C(&qword_256442700, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_236BD10D4);
}

uint64_t sub_236B9585C()
{
  return sub_236B9576C(&qword_256442708, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_236BD1170);
}

void *__swift_memcpy352_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x160uLL);
}

uint64_t sub_236B95890(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 352))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_236B958B0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 344) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 352) = v3;
  return result;
}

void type metadata accessor for eproc(uint64_t a1)
{
  sub_236B95D58(a1, &qword_256442730);
}

void *__swift_memcpy296_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x128uLL);
}

uint64_t sub_236B95954(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 296))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_236B95974(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 296) = v3;
  return result;
}

void type metadata accessor for extern_proc(uint64_t a1)
{
  sub_236B95D58(a1, &qword_256442738);
}

__n128 __swift_memcpy76_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_236B95A24(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 76))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_236B95A44(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 72) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 76) = v3;
  return result;
}

void type metadata accessor for _ucred(uint64_t a1)
{
  sub_236B95D58(a1, &qword_256442740);
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_236B95AC4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_236B95AE4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 104) = v3;
  return result;
}

void type metadata accessor for _pcred(uint64_t a1)
{
  sub_236B95D58(a1, &qword_256442748);
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t sub_236B95B68(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_236B95B88(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 144) = v3;
  return result;
}

void type metadata accessor for rusage(uint64_t a1)
{
  sub_236B95D58(a1, &qword_256442750);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for timeval(uint64_t a1)
{
  sub_236B95D58(a1, &qword_256442758);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_236B95C18(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_236B95C38(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for itimerval(uint64_t a1)
{
  sub_236B95D58(a1, &qword_256442760);
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_236B95C8C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_236B95CAC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for vmspace(uint64_t a1)
{
  sub_236B95D58(a1, &qword_256442768);
}

uint64_t sub_236B95CFC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_236B95D1C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for extern_proc.__Unnamed_union_p_un(uint64_t a1)
{
  sub_236B95D58(a1, (unint64_t *)&unk_256442770);
}

void sub_236B95D58(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

unint64_t sub_236B95DB8@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (*(_QWORD *)(a3 + 16) && (result = sub_236B8BFC0(result, a2), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(a3 + 56) + 24 * result;
    v8 = *(_QWORD *)v7;
    v9 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)a4 = *(_QWORD *)v7;
    *(_QWORD *)(a4 + 8) = v9;
    v10 = *(_BYTE *)(v7 + 16);
    *(_BYTE *)(a4 + 16) = v10;
    return sub_236B8C348(v8, v9, v10);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = -1;
  }
  return result;
}

uint64_t sub_236B95E1C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13[2];
  char v14;

  if (a3 == -1)
  {
    sub_236BB1A24(a4, a5, (uint64_t)v13);
    swift_bridgeObjectRelease();
    return sub_236B95F4C(v13[0], v13[1], v14);
  }
  else
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13[0] = *v5;
    *v5 = 0x8000000000000000;
    sub_236B8BA30(a1, a2, a3, a4, a5, isUniquelyReferenced_nonNull_native);
    *v5 = v13[0];
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B7FE8A0](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActiveDevicesFilter()
{
  return &type metadata for ActiveDevicesFilter;
}

uint64_t sub_236B95F4C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_236B8C2D4(a1, a2, a3);
  return a1;
}

uint64_t sub_236B95F60(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF2B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AlertNotification.init(with:message:buttonTitle:alternateButtonTitle:timeout:onAction:onDismiss:onCompletion:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, __int128 a11, __int128 a12, uint64_t a13, uint64_t a14)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(double *)(a9 + 64) = a10;
  *(_OWORD *)(a9 + 72) = a11;
  *(_OWORD *)(a9 + 88) = a12;
  *(_QWORD *)(a9 + 104) = a13;
  *(_QWORD *)(a9 + 112) = a14;
  return result;
}

uint64_t sub_236B95FD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v2 = MEMORY[0x24BEE4B00];
  v3 = a1 + 64;
  v35 = MEMORY[0x24BEE4B00];
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  if (!v6)
    goto LABEL_8;
LABEL_5:
  v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v11 = v10 | (v9 << 6);
  while (1)
  {
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v11);
    v13 = v12[1];
    if (v13)
    {
      v18 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v11);
      v19 = *v12;
      v20 = *(_QWORD *)(v2 + 16);
      v34 = v19;
      if (*(_QWORD *)(v2 + 24) <= v20)
      {
        v22 = v20 + 1;
        swift_bridgeObjectRetain_n();
        v23 = v18;
        sub_236B9E174(v22, 1);
        v2 = v35;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        v21 = v18;
      }
      result = sub_236BCFC8C();
      v24 = v2 + 64;
      v25 = -1 << *(_BYTE *)(v2 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v2 + 64 + 8 * (v26 >> 6))) == 0)
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v25) >> 6;
        while (++v27 != v30 || (v29 & 1) == 0)
        {
          v31 = v27 == v30;
          if (v27 == v30)
            v27 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v24 + 8 * v27);
          if (v32 != -1)
          {
            v28 = __clz(__rbit64(~v32)) + (v27 << 6);
            goto LABEL_37;
          }
        }
        goto LABEL_41;
      }
      v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v2 + 64 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_37:
      *(_QWORD *)(v24 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
      *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v28) = v18;
      v33 = (_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v28);
      *v33 = v34;
      v33[1] = v13;
      ++*(_QWORD *)(v2 + 16);
      result = swift_bridgeObjectRelease();
      if (v6)
        goto LABEL_5;
    }
    else if (v6)
    {
      goto LABEL_5;
    }
LABEL_8:
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v14 >= v7)
      goto LABEL_39;
    v15 = *(_QWORD *)(v3 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v7)
        goto LABEL_39;
      v15 = *(_QWORD *)(v3 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v7)
          goto LABEL_39;
        v15 = *(_QWORD *)(v3 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v7)
            goto LABEL_39;
          v15 = *(_QWORD *)(v3 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v7)
  {
LABEL_39:
    sub_236B96E24();
    return v2;
  }
  v15 = *(_QWORD *)(v3 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v7)
      goto LABEL_39;
    v15 = *(_QWORD *)(v3 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_23;
  }
LABEL_42:
  __break(1u);
  return result;
}

void _s18AudioAnalyticsBase17AlertNotificationV7surfaceyyACFZ_0(double *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTimeInterval v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t inited;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  const __CFAllocator *v22;
  const __CFDictionary *v23;
  __CFUserNotification *v24;
  SInt32 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  SInt32 v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void (*v35)(uint64_t);
  char *v36;
  NSObject *v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  uint64_t (*v50)(uint64_t);
  uint64_t v51;
  void (*v52)(uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  SInt32 v58;
  SInt32 error[3];
  CFOptionFlags responseFlags[20];

  responseFlags[19] = *MEMORY[0x24BDAC8D0];
  v2 = sub_236BCF8C0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  v7 = *((_QWORD *)a1 + 1);
  v8 = *((_QWORD *)a1 + 2);
  v9 = *((_QWORD *)a1 + 3);
  v10 = *((_QWORD *)a1 + 5);
  v57 = *((_QWORD *)a1 + 4);
  v11 = *((_QWORD *)a1 + 7);
  v56 = *((_QWORD *)a1 + 6);
  v12 = a1[8];
  v48 = (uint64_t (*)(uint64_t))*((_QWORD *)a1 + 9);
  v47 = *((_QWORD *)a1 + 10);
  v50 = (uint64_t (*)(uint64_t))*((_QWORD *)a1 + 11);
  v49 = *((_QWORD *)a1 + 12);
  v52 = (void (*)(uint64_t))*((_QWORD *)a1 + 13);
  v51 = *((_QWORD *)a1 + 14);
  if (qword_2542AFC20 != -1)
    swift_once();
  v13 = __swift_project_value_buffer(v2, (uint64_t)qword_2542AFC00);
  v54 = v3;
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v53 = v5;
  v55 = v2;
  v14(v5, v13, v2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2564427E0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_236BD1320;
  if (!*MEMORY[0x24BDBD6D8])
  {
    __break(1u);
    goto LABEL_29;
  }
  v16 = (double *)inited;
  sub_236B96DA0();
  *((_QWORD *)v16 + 4) = sub_236BCFCA4();
  v16[5] = v6;
  *((_QWORD *)v16 + 6) = v7;
  if (!*MEMORY[0x24BDBD6E0])
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  *((_QWORD *)v16 + 7) = sub_236BCFCA4();
  *((_QWORD *)v16 + 8) = v8;
  *((_QWORD *)v16 + 9) = v9;
  if (!*MEMORY[0x24BDBD6F8])
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  swift_bridgeObjectRetain();
  v17 = sub_236BCFCA4();
  v18 = v57;
  *((_QWORD *)v16 + 10) = v17;
  *((_QWORD *)v16 + 11) = v18;
  *((_QWORD *)v16 + 12) = v10;
  if (!*MEMORY[0x24BDBD6F0])
    goto LABEL_31;
  swift_bridgeObjectRetain();
  v19 = sub_236BCFCA4();
  v20 = v56;
  *((_QWORD *)v16 + 13) = v19;
  *((_QWORD *)v16 + 14) = v20;
  *((_QWORD *)v16 + 15) = v11;
  swift_bridgeObjectRetain();
  v21 = sub_236B92EB8((uint64_t)v16);
  sub_236B95FD0(v21);
  swift_bridgeObjectRelease();
  error[0] = -1;
  v22 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  sub_236B96DDC();
  v23 = (const __CFDictionary *)sub_236BCF920();
  swift_bridgeObjectRelease();
  v24 = CFUserNotificationCreate(v22, v12, 0, error, v23);

  if (v24)
  {
    v25 = error[0];
    v26 = sub_236BCF8D8();
    v27 = v55;
    v28 = v54;
    v29 = v53;
    if (v25 != v26)
    {
      v43 = sub_236BCF8A8();
      v44 = sub_236BCFC2C();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v45 = 67109120;
        swift_beginAccess();
        v58 = error[0];
        sub_236BCFCC8();
        _os_log_impl(&dword_236B83000, v43, v44, "Failed to create alert notification. { err=%d }", v45, 8u);
        MEMORY[0x23B7FE96C](v45, -1, -1);
        v46 = v24;
      }
      else
      {
        v46 = v43;
        v43 = v24;
      }

      goto LABEL_25;
    }
    responseFlags[0] = 0;
    v30 = CFUserNotificationReceiveResponse(v24, v12, responseFlags);
    v31 = sub_236BCF8D8();
    if (v30 != (_DWORD)v31)
    {
      v32 = sub_236BCF8A8();
      v33 = sub_236BCFC38();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v34 = 67109120;
        v58 = v30;
        sub_236BCFCC8();
        _os_log_impl(&dword_236B83000, v32, v33, "Failed to interpret overload notification user alert response. { response=%d }", v34, 8u);
        MEMORY[0x23B7FE96C](v34, -1, -1);
      }

    }
    if ((responseFlags[0] & 3) != 0)
    {
      v35 = v52;
      if (v50)
        v31 = v50(v31);
      if (v35)
        goto LABEL_17;
    }
    else
    {
      v31 = v48(v31);
      v35 = v52;
      if (v52)
      {
LABEL_17:
        v35(v31);

LABEL_25:
        (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
        return;
      }
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);

  }
  else
  {
    v36 = v53;
    v37 = sub_236BCF8A8();
    v38 = sub_236BCFC2C();
    v39 = os_log_type_enabled(v37, (os_log_type_t)v38);
    v40 = v55;
    v41 = v54;
    if (v39)
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v42 = 67109120;
      swift_beginAccess();
      v58 = error[0];
      sub_236BCFCC8();
      _os_log_impl(&dword_236B83000, v37, (os_log_type_t)v38, "Failed to create alert notification. { err=%d }", v42, 8u);
      MEMORY[0x23B7FE96C](v42, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v40);
  }
}

uint64_t destroy for AlertNotification(uint64_t a1)
{
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_release();
  if (*(_QWORD *)(a1 + 88))
    result = swift_release();
  if (*(_QWORD *)(a1 + 104))
    return swift_release();
  return result;
}

_QWORD *initializeWithCopy for AlertNotification(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  v8 = a2[9];
  v9 = a2[10];
  a1[8] = a2[8];
  a1[9] = v8;
  a1[10] = v9;
  v11 = a2 + 11;
  v10 = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v10)
  {
    v12 = a2[12];
    a1[11] = v10;
    a1[12] = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 11) = *v11;
  }
  v13 = a2[13];
  if (v13)
  {
    v14 = a2[14];
    a1[13] = v13;
    a1[14] = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  }
  return a1;
}

_QWORD *assignWithCopy for AlertNotification(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  v4 = a2[10];
  a1[9] = a2[9];
  a1[10] = v4;
  swift_retain();
  swift_release();
  v5 = a2[11];
  if (a1[11])
  {
    if (v5)
    {
      v6 = a2[12];
      a1[11] = v5;
      a1[12] = v6;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    v7 = a2[12];
    a1[11] = v5;
    a1[12] = v7;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
LABEL_8:
  v8 = a2[13];
  if (!a1[13])
  {
    if (v8)
    {
      v10 = a2[14];
      a1[13] = v8;
      a1[14] = v10;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
    return a1;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_14;
  }
  v9 = a2[14];
  a1[13] = v8;
  a1[14] = v9;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for AlertNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  v8 = *(_QWORD *)(a2 + 88);
  if (*(_QWORD *)(a1 + 88))
  {
    if (v8)
    {
      v9 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 88) = v8;
      *(_QWORD *)(a1 + 96) = v9;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v8)
  {
    v10 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 88) = v8;
    *(_QWORD *)(a1 + 96) = v10;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
LABEL_8:
  v11 = *(_QWORD *)(a2 + 104);
  if (!*(_QWORD *)(a1 + 104))
  {
    if (v11)
    {
      v13 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 104) = v11;
      *(_QWORD *)(a1 + 112) = v13;
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    return a1;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_14;
  }
  v12 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v12;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertNotification(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlertNotification(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AlertNotification()
{
  return &type metadata for AlertNotification;
}

unint64_t sub_236B96DA0()
{
  unint64_t result;

  result = qword_2564427E8;
  if (!qword_2564427E8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2564427E8);
  }
  return result;
}

unint64_t sub_236B96DDC()
{
  unint64_t result;
  unint64_t v1;

  result = qword_2564427F0;
  if (!qword_2564427F0)
  {
    v1 = sub_236B96DA0();
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_2564427F0);
  }
  return result;
}

uint64_t sub_236B96E24()
{
  return swift_release();
}

uint64_t sub_236B96E2C()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for BluetoothUtility();
  v0 = swift_allocObject();
  result = BluetoothUtility.init()();
  qword_2564427F8 = v0;
  return result;
}

uint64_t BluetoothUtility.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  BluetoothUtility.init()();
  return v0;
}

uint64_t static BluetoothUtility.shared.getter()
{
  if (qword_2564425E0 != -1)
    swift_once();
  return swift_retain();
}

uint64_t BluetoothUtility.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD v15[2];

  v1 = v0;
  v2 = sub_236BCFC44();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_236BCFC50();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_236BCF914();
  MEMORY[0x24BDAC7A8](v7);
  sub_236B97130();
  sub_236BCF8F0();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BEE5758], v3);
  v8 = MEMORY[0x24BEE4AF8];
  v15[1] = MEMORY[0x24BEE4AF8];
  sub_236B9716C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDD8);
  sub_236B971B4();
  sub_236BCFD10();
  *(_QWORD *)(v0 + 16) = sub_236BCFC74();
  v9 = OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_logger;
  if (qword_2542AFD30 != -1)
    swift_once();
  v10 = sub_236BCF8C0();
  v11 = __swift_project_value_buffer(v10, (uint64_t)qword_2542AFD18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v1 + v9, v11, v10);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_subscribers) = v8;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_isRegisteredForNotifications) = 0;
  v12 = (void *)objc_opt_self();
  objc_msgSend(v12, sel_setSharedInstanceQueue_, *(_QWORD *)(v1 + 16));
  v13 = objc_msgSend(v12, sel_sharedInstance);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_bluetoothManager) = v13;
  return v1;
}

unint64_t sub_236B97130()
{
  unint64_t result;

  result = qword_2542AFE68;
  if (!qword_2542AFE68)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2542AFE68);
  }
  return result;
}

unint64_t sub_236B9716C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2542AFE60;
  if (!qword_2542AFE60)
  {
    v1 = sub_236BCFC44();
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&qword_2542AFE60);
  }
  return result;
}

unint64_t sub_236B971B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2542AFDE0;
  if (!qword_2542AFDE0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542AFDD8);
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_2542AFDE0);
  }
  return result;
}

Swift::Bool __swiftcall BluetoothUtility.isAvailable()()
{
  return sub_236B97218();
}

Swift::Bool __swiftcall BluetoothUtility.isEnabled()()
{
  return sub_236B97218();
}

uint64_t sub_236B97218()
{
  unsigned __int8 v1;

  sub_236BCFC5C();
  return v1;
}

uint64_t BluetoothUtility.withPairedDevices<A>(_:)()
{
  return sub_236B97298();
}

uint64_t BluetoothUtility.withConnectedDevices<A>(_:)()
{
  return sub_236B97298();
}

uint64_t sub_236B97298()
{
  return sub_236BCFC5C();
}

uint64_t sub_236B972D4(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;

  v4 = *(void **)(a3 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_bluetoothManager);
  if (v4 && (v5 = objc_msgSend(v4, sel_connectedDevices)) != 0)
  {
    v6 = v5;
    v7 = sub_236BCFB48();

  }
  else
  {
    v7 = 0;
  }
  a1(v7);
  return swift_bridgeObjectRelease();
}

uint64_t BluetoothUtility.startObservingFor(delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  _QWORD v11[6];

  v3 = v2;
  v6 = *(NSObject **)(v3 + 16);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a1;
  v7[4] = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_236B980F4;
  *(_QWORD *)(v8 + 24) = v7;
  v11[4] = sub_236B98110;
  v11[5] = v8;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = sub_236B97778;
  v11[3] = &block_descriptor;
  v9 = _Block_copy(v11);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v6 & 1) != 0)
    __break(1u);
  return result;
}

void sub_236B974BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  v6 = (_QWORD **)(a1 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_subscribers);
  swift_beginAccess();
  v7 = *v6;
  swift_unknownObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v6 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = sub_236B9D90C(0, v7[2] + 1, 1, v7);
    *v6 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = sub_236B9D90C((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v6 = v7;
  }
  v7[2] = v10 + 1;
  v11 = &v7[2 * v10];
  v11[4] = a2;
  v11[5] = a3;
  swift_endAccess();
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_isRegisteredForNotifications) & 1) == 0)
    sub_236B97684();
  swift_retain();
  v12 = sub_236BCF8A8();
  v13 = sub_236BCFC20();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v14 = 134217984;
    sub_236BCFCC8();
    swift_release();
    _os_log_impl(&dword_236B83000, v12, v13, "Number of bluetooth delegates incremented. { count=%ld }", v14, 0xCu);
    MEMORY[0x23B7FE96C](v14, -1, -1);
  }
  else
  {
    swift_release();
  }

}

void sub_236B97684()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  if (qword_2564425E8 != -1)
    swift_once();
  v2 = qword_256446D80;
  v3 = *(_QWORD *)(qword_256446D80 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v3; ++i)
    {
      v5 = *(_QWORD *)(v2 + 8 * i + 32);
      objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_handleBluetoothManagerStateChangeWithNotification_, v5, 0);
    }

    swift_bridgeObjectRelease();
  }
  else
  {

  }
  *(_BYTE *)(v0 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_isRegisteredForNotifications) = 1;
}

uint64_t sub_236B97778(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t BluetoothUtility.stopObservingFor(delegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  _QWORD v11[6];

  v3 = v2;
  v6 = *(NSObject **)(v3 + 16);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a1;
  v7[4] = a2;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = sub_236B98160;
  *(_QWORD *)(v8 + 24) = v7;
  v11[4] = sub_236B982B4;
  v11[5] = v8;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = sub_236B97778;
  v11[3] = &block_descriptor_13;
  v9 = _Block_copy(v11);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v6 & 1) != 0)
    __break(1u);
  return result;
}

void sub_236B978DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  v4 = a1 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_subscribers;
  swift_beginAccess();
  v5 = *(_QWORD *)(*(_QWORD *)v4 + 16);
  if (!v5)
    goto LABEL_7;
  v6 = 0;
  v7 = (_QWORD *)(*(_QWORD *)v4 + 32);
  while (*v7 != a2)
  {
    ++v6;
    v7 += 2;
    if (v5 == v6)
      goto LABEL_9;
  }
  swift_beginAccess();
  sub_236B97A88(v6);
  swift_endAccess();
  swift_unknownObjectRelease();
  if (!*(_QWORD *)(*(_QWORD *)v4 + 16))
  {
LABEL_7:
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_isRegisteredForNotifications) == 1)
      sub_236B97B64();
  }
LABEL_9:
  swift_retain();
  v8 = sub_236BCF8A8();
  v9 = sub_236BCFC20();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v10 = 134217984;
    sub_236BCFCC8();
    swift_release();
    _os_log_impl(&dword_236B83000, v8, v9, "Number of bluetooth delegates decremented. { count=%ld }", v10, 0xCu);
    MEMORY[0x23B7FE96C](v10, -1, -1);
  }
  else
  {
    swift_release();
  }

}

uint64_t sub_236B97A88(unint64_t a1)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_236BCA084(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[2 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

void sub_236B97B64()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  if (qword_2564425E8 != -1)
    swift_once();
  v2 = qword_256446D80;
  v3 = *(_QWORD *)(qword_256446D80 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v3; ++i)
    {
      v5 = *(_QWORD *)(v2 + 8 * i + 32);
      objc_msgSend(v1, sel_removeObserver_name_object_, v0, v5, 0);
    }

    swift_bridgeObjectRelease();
  }
  else
  {

  }
  *(_BYTE *)(v0 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_isRegisteredForNotifications) = 0;
}

uint64_t sub_236B97C40()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t ObjectType;
  void (*v11)(uint64_t, uint64_t);
  _QWORD aBlock[6];
  uint64_t v13;

  v13 = MEMORY[0x24BEE4AF8];
  v1 = *(NSObject **)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = &v13;
  *(_QWORD *)(v2 + 24) = v0;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = sub_236B9829C;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_236B982B4;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_236B97778;
  aBlock[3] = &block_descriptor_23;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = v13;
    v7 = *(_QWORD *)(v13 + 16);
    if (v7)
    {
      swift_bridgeObjectRetain();
      v8 = (uint64_t *)(v6 + 40);
      do
      {
        v9 = *v8;
        ObjectType = swift_getObjectType();
        v11 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
        swift_unknownObjectRetain();
        v11(ObjectType, v9);
        swift_unknownObjectRelease();
        v8 += 2;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
    }
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_236B97DE8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)(a2 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_subscribers);
  swift_beginAccess();
  *a1 = *v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

id sub_236B97EE4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v6;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2564428F0);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_236BD1370;
  v1 = (void *)*MEMORY[0x24BE0F928];
  v2 = (void *)*MEMORY[0x24BE0F9D0];
  *(_QWORD *)(v0 + 32) = *MEMORY[0x24BE0F928];
  *(_QWORD *)(v0 + 40) = v2;
  v6 = (id)*MEMORY[0x24BE0F948];
  *(_QWORD *)(v0 + 48) = *MEMORY[0x24BE0F948];
  qword_256446D80 = v0;
  v3 = v1;
  v4 = v2;
  return v6;
}

uint64_t BluetoothUtility.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_logger;
  v2 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t BluetoothUtility.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_logger;
  v2 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

id sub_236B98050@<X0>(_BYTE *a1@<X8>)
{
  return sub_236B98088((SEL *)&selRef_available, a1);
}

id sub_236B9806C@<X0>(_BYTE *a1@<X8>)
{
  return sub_236B98088((SEL *)&selRef_enabled, a1);
}

id sub_236B98088@<X0>(SEL *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  id result;

  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_bluetoothManager))
    result = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC18AudioAnalyticsBase16BluetoothUtility_bluetoothManager), *a1);
  else
    result = 0;
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_236B980D4()
{
  uint64_t v0;

  return sub_236B972D4(*(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void sub_236B980F4()
{
  uint64_t *v0;

  sub_236B974BC(v0[2], v0[3], v0[4]);
}

uint64_t sub_236B98100()
{
  return swift_deallocObject();
}

uint64_t sub_236B98110()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

void sub_236B98160()
{
  uint64_t v0;

  sub_236B978DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_236B9816C()
{
  return swift_deallocObject();
}

uint64_t dispatch thunk of InterestestedInBluetoothStateChange.bluetoothManagerStateChanged()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_236B98184()
{
  return type metadata accessor for BluetoothUtility();
}

uint64_t type metadata accessor for BluetoothUtility()
{
  uint64_t result;

  result = qword_256442848;
  if (!qword_256442848)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_236B981C8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_236BCF8C0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for BluetoothUtility()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BluetoothUtility.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t sub_236B98278()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_236B9829C()
{
  uint64_t v0;

  return sub_236B97DE8(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_236B982A4()
{
  return swift_deallocObject();
}

uint64_t sub_236B982C0()
{
  return sub_236B980D4();
}

uint64_t Collection.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  void (*v7)(_BYTE *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[32];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v3 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = &v14[-v4];
  sub_236BCFBE4();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v6 = sub_236BCFAF4();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  if ((v6 & 1) != 0)
  {
    v7 = (void (*)(_BYTE *, _QWORD))sub_236BCFBFC();
    v9 = v8;
    v10 = swift_getAssociatedTypeWitness();
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a1, v9, v10);
    v7(v14, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
  }
  else
  {
    v13 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
}

uint64_t Array.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;

  if (MEMORY[0x23B7FDD18](a2, a3) <= a1)
  {
    v6 = 1;
  }
  else
  {
    sub_236BCFB9C();
    v6 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a4, v6, 1, a3);
}

uint64_t zip<A, B, C>(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t TupleTypeMetadata3;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35[16];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, char *, char *, uint64_t, uint64_t);
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v30 = a3;
  v29 = a2;
  v31 = a1;
  v34 = a9;
  v51 = a5;
  v52 = a6;
  v53 = a8;
  v54 = a10;
  v15 = sub_236BCFD64();
  v28 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v27 - v16;
  v18 = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE2620], v15);
  v51 = a4;
  v52 = v15;
  v53 = a7;
  v54 = v18;
  v32 = sub_236BCFD64();
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v20 = (char *)&v27 - v19;
  sub_236BCFFBC();
  sub_236BCFFBC();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v15);
  v45 = a4;
  v46 = a5;
  v47 = a6;
  v48 = a7;
  v49 = a8;
  v50 = a10;
  v36 = a4;
  v37 = a5;
  v38 = a6;
  v39 = a7;
  v40 = a8;
  v41 = a10;
  v42 = sub_236B98A28;
  v43 = &v44;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v22 = v32;
  v23 = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE2620], v32);
  v25 = sub_236B98BD4((void (*)(char *, char *))sub_236B98BA0, (uint64_t)v35, v22, TupleTypeMetadata3, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
  result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v20, v22);
  *v34 = v25;
  return result;
}

uint64_t sub_236B987EC(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t TupleTypeMetadata2;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(uint64_t, char *, uint64_t);
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;

  v38 = a6;
  v39 = a7;
  v41 = a4;
  v42 = a2;
  v43 = a3;
  v40 = a1;
  v37 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v14 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v34 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v34 - v21;
  v23 = (char *)&v34 + *(int *)(v20 + 48) - v21;
  v35 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
  v24((char *)&v34 - v21, a5, AssociatedTypeWitness);
  v36 = *(_QWORD *)(v12 - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v36 + 16);
  v25(v23, v38, v12);
  v26 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v40, v41, v26);
  v41 = &v19[*(int *)(TupleTypeMetadata2 + 48)];
  v27 = v41;
  v24(v19, (uint64_t)v22, AssociatedTypeWitness);
  v25(v27, (uint64_t)v23, v12);
  v28 = v35;
  v29 = *(void (**)(uint64_t, char *, uint64_t))(v35 + 32);
  v29(v42, v19, AssociatedTypeWitness);
  v30 = &v16[*(int *)(TupleTypeMetadata2 + 48)];
  v29((uint64_t)v16, v22, AssociatedTypeWitness);
  v31 = v36;
  v32 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
  v32(v30, v23, v12);
  v32(v43, v30, v12);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v16, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v41, v12);
}

uint64_t sub_236B98A28(uint64_t a1, uint64_t a2, char *a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v6;

  return sub_236B987EC(a1, a2, a3, a4, a5, a6, v6[2], v6[3], v6[4], v6[5]);
}

uint64_t sub_236B98A58@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  uint64_t TupleTypeMetadata3;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v7 = v6 + *(int *)(TupleTypeMetadata2 + 48);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  return a2(a3, a3 + *(int *)(TupleTypeMetadata3 + 48), a3 + *(int *)(TupleTypeMetadata3 + 64), a1, v6, v7);
}

uint64_t sub_236B98BA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_236B98A58(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 64), a2);
}

uint64_t sub_236B98BD4(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  void (*v15)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t result;
  char *v34;
  char *v35;
  char *v36;
  _QWORD v37[2];
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v40 = a8;
  v41 = a5;
  v9 = v8;
  v53 = a4;
  v54 = a1;
  v55 = a2;
  v39 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v52 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)v37 - v12;
  v45 = v13;
  v15 = v14;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v38 = (char *)v37 - v18;
  v19 = sub_236BCFCB0();
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v49 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v37 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v37[1] = (char *)v37 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v48 = *((_QWORD *)v15 - 1);
  MEMORY[0x24BDAC7A8](v27);
  v47 = (char *)v37 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v46 = (char *)v37 - v29;
  v30 = v15;
  v31 = sub_236BCFAE8();
  v57 = sub_236BCFDE8();
  v53 = sub_236BCFDF4();
  sub_236BCFDAC();
  (*(void (**)(char *, _QWORD, _QWORD *))(v48 + 16))(v47, v50, v15);
  v32 = v46;
  v50 = v30;
  result = sub_236BCFADC();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_236BCFCBC();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v24, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v54(v24, v52);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v52, v41);
        return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v24, AssociatedTypeWitness);
      sub_236BCFDDC();
      if (!--v31)
      {
        v34 = v49;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v34 = v49;
LABEL_9:
  sub_236BCFCBC();
  v52 = *(char **)(v17 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v34, 1, AssociatedTypeWitness) == 1)
  {
    v35 = v49;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v43);
    return v57;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v36 = v38;
    v35 = v49;
    while (1)
    {
      v50(v36, v35, AssociatedTypeWitness);
      v54(v36, v51);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
      sub_236BCFDDC();
      sub_236BCFCBC();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v52)(v35, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v36, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v32, v56);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v39 + 32))(v40, v51, v41);
  }
}

uint64_t zip<A, B, C, D>(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t TupleTypeMetadata;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char v56[16];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, char *, uint64_t, char *, void (*)(char *, uint64_t), uint64_t, uint64_t, char *);
  char *v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t AssociatedTypeWitness;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v55 = a8;
  v45 = a7;
  v40 = a5;
  v49 = a4;
  v48 = a3;
  v44 = a2;
  v43 = a1;
  v53 = a9;
  v41 = a10;
  v46 = a13;
  v54 = a12;
  AssociatedTypeWitness = a7;
  v77 = a8;
  v78 = a12;
  v79 = a13;
  v15 = sub_236BCFD64();
  v47 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v36 - v16;
  AssociatedTypeWitness = a5;
  v77 = a6;
  v37 = a6;
  v78 = a10;
  v79 = a11;
  v38 = a11;
  v18 = sub_236BCFD64();
  v42 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v36 - v19;
  v21 = MEMORY[0x24BEE2620];
  v22 = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE2620], v18);
  v39 = v22;
  v23 = MEMORY[0x23B7FE8AC](v21, v15);
  AssociatedTypeWitness = v18;
  v77 = v15;
  v78 = v22;
  v79 = v23;
  v51 = sub_236BCFD64();
  v52 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v50 = (char *)&v36 - v24;
  v25 = v40;
  v26 = v41;
  sub_236BCFFBC();
  v27 = v45;
  v28 = v46;
  sub_236BCFFBC();
  sub_236BCFFBC();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v17, v15);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v18);
  v68 = v25;
  v69 = v37;
  v70 = v27;
  v71 = v55;
  v72 = v26;
  v73 = v38;
  v74 = v54;
  v75 = v28;
  v57 = v25;
  v58 = v37;
  v59 = v27;
  v60 = v55;
  v61 = v26;
  v62 = v38;
  v63 = v54;
  v64 = v28;
  v65 = sub_236B998DC;
  v66 = &v67;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v77 = swift_getAssociatedTypeWitness();
  v78 = swift_getAssociatedTypeWitness();
  v79 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  v30 = v51;
  v31 = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE2620], v51);
  v32 = v50;
  v34 = sub_236B98BD4((void (*)(char *, char *))sub_236B99AB8, (uint64_t)v56, v30, TupleTypeMetadata, MEMORY[0x24BEE4078], v31, MEMORY[0x24BEE40A8], v33);
  result = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v32, v30);
  *v53 = v34;
  return result;
}

uint64_t sub_236B994F8(uint64_t a1, char *a2, uint64_t a3, char *a4, void (*a5)(char *, uint64_t), uint64_t a6, uint64_t a7, char *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(void);
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(uint64_t, char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;

  v64 = a7;
  v65 = a8;
  v61 = a5;
  v62 = a6;
  v69 = a3;
  v70 = a4;
  v67 = a1;
  v68 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v60 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v66 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v63 = (char *)&v54 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v54 - v12;
  v14 = swift_getAssociatedTypeWitness();
  v15 = swift_getAssociatedTypeWitness();
  v16 = swift_getTupleTypeMetadata2();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v72 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v54 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v54 - v23;
  v25 = (char *)&v54 + *(int *)(v22 + 48) - v23;
  v26 = v14;
  v27 = *(_QWORD *)(v14 - 8);
  v28 = *(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v27 + 16);
  v59 = v27;
  v28((char *)&v54 - v23, (void (*)(_QWORD, _QWORD))v61, v14);
  v71 = v15;
  v54 = *(_QWORD *)(v15 - 8);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
  v29(v25, v62, v15);
  v56 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
  v30 = v56;
  v57 = v13;
  v62 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v61 = *(void (**)(char *, uint64_t))(v62 + 16);
  v61(v13, v64);
  v31 = v60;
  v64 = *(_QWORD *)(v60 - 8);
  v55 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
  v55(v30, v65, v60);
  v65 = &v21[*(int *)(v16 + 48)];
  v32 = v65;
  v58 = v26;
  v28(v21, (void (*)(_QWORD, _QWORD))v24, v26);
  v33 = v71;
  v29(v32, (uint64_t)v25, v71);
  v34 = *(void (**)(void))(v27 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v34)(v67, v21, v26);
  v35 = &v72[*(int *)(v16 + 48)];
  v34();
  v36 = v54;
  v37 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
  v37(v35, v25, v33);
  v37(v68, v35, v33);
  v39 = AssociatedTypeWitness;
  v38 = TupleTypeMetadata2;
  v40 = v63;
  v41 = &v63[*(int *)(TupleTypeMetadata2 + 48)];
  v42 = v57;
  ((void (*)(char *, char *, uint64_t))v61)(v63, v57, AssociatedTypeWitness);
  v43 = v56;
  v55(v41, v56, v31);
  v44 = v62;
  v45 = *(void (**)(uint64_t, char *, uint64_t))(v62 + 32);
  v46 = v40;
  v47 = v39;
  v45(v69, v46, v39);
  v48 = *(int *)(v38 + 48);
  v49 = v66;
  v50 = &v66[v48];
  v45((uint64_t)v66, v42, v47);
  v51 = v64;
  v52 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
  v52(v50, v43, v31);
  v52(v70, v50, v31);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v49, v47);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v41, v31);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v72, v58);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v65, v71);
}

uint64_t sub_236B998DC(uint64_t a1, char *a2, uint64_t a3, char *a4, void (*a5)(char *, uint64_t), uint64_t a6, uint64_t a7, char *a8)
{
  return sub_236B994F8(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_236B99910@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  int *TupleTypeMetadata;
  uint64_t v10;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  v10 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6 = a1 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  v7 = v6 + *(int *)(TupleTypeMetadata2 + 48);
  TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  return a2(a3, a3 + TupleTypeMetadata[12], a3 + TupleTypeMetadata[16], a3 + TupleTypeMetadata[20], a1, v10, v6, v7);
}

uint64_t sub_236B99AB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_236B99910(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 80), a2);
}

void sub_236B99AF8()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata3();
  sub_236BCFB84();
  JUMPOUT(0x23B7FE8ACLL);
}

uint64_t sub_236B99BC0()
{
  uint64_t v0;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata();
  v0 = sub_236BCFB84();
  return MEMORY[0x23B7FE8AC](MEMORY[0x24BEE12C8], v0);
}

uint64_t Config.__allocating_init(configPath:allowUnknownFields:platform:encrypted:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  swift_allocObject();
  return Config.init(configPath:allowUnknownFields:platform:encrypted:)(a1, a2, a3, a4, a5, a6);
}

uint64_t Config.init(configPath:allowUnknownFields:platform:encrypted:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, char a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  __SecKey *v51;
  uint64_t v52;
  char v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 *v58;
  __int128 *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t result;
  uint8_t *v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v97;
  int v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int64_t v112;
  int v113;
  int v114;
  _BYTE v115[48];
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  unsigned __int8 v119[32];
  __int128 v120;
  _OWORD v121[2];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;

  v7 = v6;
  LOBYTE(v6) = a6;
  v125 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(v7 + 248) = MEMORY[0x24BEE4B08];
  v11 = v7 + OBJC_IVAR____TtC18AudioAnalyticsBase6Config_logger;
  if (qword_2542AFCB0 != -1)
LABEL_79:
    swift_once();
  v12 = sub_236BCF8C0();
  v13 = __swift_project_value_buffer(v12, (uint64_t)qword_2542AFC98);
  v14 = *(_QWORD *)(v12 - 8);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 16))(v11, v13, v12);
  v15 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v95 = a1;
  v16 = (void *)sub_236BCF998();
  v17 = objc_msgSend(v15, sel_contentsAtPath_, v16);

  v109 = v11;
  v104 = v14;
  v105 = v12;
  v106 = a2;
  if (!v17)
  {
    swift_bridgeObjectRelease();
    sub_236B93D48();
    v21 = (__int128 *)swift_allocError();
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(v22 + 8) = 0;
    *(_BYTE *)(v22 + 16) = 7;
    swift_willThrow();
LABEL_46:
    v53 = 0;
    v54 = 0;
    v97 = 0;
    v99 = 0;
    v101 = 0;
    v103 = 0;
    v111 = 0;
    v113 = 0;
    v114 = 0;
LABEL_47:
    swift_getErrorValue();
    v55 = sub_236BCFFE0();
    v57 = v56;
    swift_beginAccess();
    qword_2542AFA08 = v55;
    qword_2542AFA10 = v57;
    swift_bridgeObjectRelease();
    v58 = v21;
    swift_bridgeObjectRetain();
    v59 = v21;
    v60 = sub_236BCF8A8();
    v61 = sub_236BCFC2C();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = swift_slowAlloc();
      v108 = v53;
      v63 = v54;
      v64 = swift_slowAlloc();
      *(_QWORD *)&v120 = v64;
      *(_DWORD *)v62 = 136380931;
      swift_bridgeObjectRetain();
      *(_QWORD *)v119 = sub_236B93FB0(v95, v106, (uint64_t *)&v120);
      sub_236BCFCC8();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v62 + 12) = 2081;
      swift_getErrorValue();
      v65 = sub_236BCFFE0();
      *(_QWORD *)v119 = sub_236B93FB0(v65, v66, (uint64_t *)&v120);
      sub_236BCFCC8();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_236B83000, v60, v61, "Failed in loadConfig. { configPath=%{private}s, error=%{private}s }", (uint8_t *)v62, 0x16u);
      swift_arrayDestroy();
      v67 = v64;
      v54 = v63;
      MEMORY[0x23B7FE96C](v67, -1, -1);
      MEMORY[0x23B7FE96C](v62, -1, -1);

      if ((v108 & 1) == 0)
        goto LABEL_50;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      if ((v53 & 1) == 0)
      {
LABEL_50:
        if (v54)
        {
          swift_bridgeObjectRelease();
          if (!v97)
            goto LABEL_52;
        }
        else if (!v97)
        {
LABEL_52:
          if (!v99)
            goto LABEL_54;
          goto LABEL_53;
        }
        swift_bridgeObjectRelease();
        if (!v99)
        {
LABEL_54:
          if (v103)
          {
            swift_bridgeObjectRelease();
            if (!v111)
              goto LABEL_56;
          }
          else if (!v111)
          {
LABEL_56:
            if (v113)
              goto LABEL_57;
            goto LABEL_65;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v113)
          {
LABEL_57:
            swift_bridgeObjectRelease();
            if (!v114)
              goto LABEL_58;
            goto LABEL_66;
          }
LABEL_65:
          if (!v114)
          {
LABEL_58:
            if (v101)
            {
LABEL_59:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v104 + 8))(v109, v105);
              swift_bridgeObjectRelease();
LABEL_68:
              swift_deallocPartialClassInstance();
              return 0;
            }
LABEL_67:
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v104 + 8))(v109, v105);
            goto LABEL_68;
          }
LABEL_66:
          swift_bridgeObjectRelease();
          if (v101)
            goto LABEL_59;
          goto LABEL_67;
        }
LABEL_53:
        swift_bridgeObjectRelease();
        goto LABEL_54;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
  v100 = a5;
  v18 = sub_236BCF83C();
  v20 = v19;

  v102 = v18;
  if ((v6 & 1) != 0)
  {
    v51 = (__SecKey *)sub_236BAC610(0xD000000000000084, 0x8000000236BD53D0, (uint8_t *)1);
    v70 = sub_236BAC9F4(v51);
    v72 = v71;

  }
  else
  {
    sub_236B9E0AC(v18, v20);
    v70 = (uint8_t *)v18;
    v72 = v20;
  }
  v94 = v72;
  v23 = (void *)objc_opt_self();
  v24 = (uint64_t)v70;
  v25 = (void *)sub_236BCF824();
  *(_QWORD *)v115 = 0;
  v26 = objc_msgSend(v23, sel_propertyListWithData_options_format_error_, v25, 0, 0, v115);

  if (!v26)
  {
    v50 = *(id *)v115;
    swift_bridgeObjectRelease();
    v21 = (__int128 *)sub_236BCF794();

    swift_willThrow();
    sub_236B9E0F0(v102, v20);
    sub_236B9E0F0(v24, v94);
    goto LABEL_46;
  }
  v92 = v24;
  v93 = v20;
  v27 = *(id *)v115;
  sub_236BCFD04();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542AFD90);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_236B93D48();
    v21 = (__int128 *)swift_allocError();
    *(_OWORD *)v52 = xmmword_236BD1420;
    *(_BYTE *)(v52 + 16) = 7;
    swift_willThrow();
    sub_236B9E0F0(v102, v20);
    sub_236B9E0F0(v24, v94);
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  a1 = v122;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC18AudioAnalyticsBase6Config_plist) = v122;
  *(_QWORD *)(v7 + 232) = v95;
  *(_QWORD *)(v7 + 240) = a2;
  v107 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = sub_236B92FC8(MEMORY[0x24BEE4AF8]);
  v110 = a1 + 64;
  v28 = 1 << *(_BYTE *)(a1 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v7 = v29 & *(_QWORD *)(a1 + 64);
  v112 = (unint64_t)(v28 + 63) >> 6;
  v21 = &v123;
  v30 = swift_bridgeObjectRetain();
  a2 = 0;
  while (1)
  {
    if (v7)
    {
      v32 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v33 = v32 | (a2 << 6);
    }
    else
    {
      v34 = __OFADD__(a2++, 1);
      if (v34)
        goto LABEL_75;
      if (a2 >= v112)
      {
        v7 = v107;
LABEL_73:
        a2 = v102;
        swift_release();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v122 = v6;
        *((_QWORD *)&v122 + 1) = v95;
        *(_QWORD *)&v123 = v106;
        *((_QWORD *)&v123 + 1) = a4;
        *(_QWORD *)&v124 = v100;
        BYTE8(v124) = a3 & 1;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v7 + 80) = sub_236BB9BEC((uint64_t *)&v122);
        *(_QWORD *)(v7 + 88) = sub_236BC6814((uint64_t *)&v122);
        *(_QWORD *)(v7 + 96) = sub_236BC857C((uint64_t *)&v122);
        *(_QWORD *)(v7 + 104) = sub_236BADB3C((uint64_t *)&v122);
        v30 = sub_236B95284((uint64_t *)&v122);
        v21 = 0;
        goto LABEL_76;
      }
      v35 = *(_QWORD *)(v110 + 8 * a2);
      v7 = v107;
      if (!v35)
      {
        v36 = a2 + 1;
        if (a2 + 1 >= v112)
          goto LABEL_73;
        v35 = *(_QWORD *)(v110 + 8 * v36);
        if (!v35)
        {
          v36 = a2 + 2;
          if (a2 + 2 >= v112)
            goto LABEL_73;
          v35 = *(_QWORD *)(v110 + 8 * v36);
          if (!v35)
          {
            v36 = a2 + 3;
            if (a2 + 3 >= v112)
              goto LABEL_73;
            v35 = *(_QWORD *)(v110 + 8 * v36);
            if (!v35)
            {
              v36 = a2 + 4;
              if (a2 + 4 >= v112)
                goto LABEL_73;
              v35 = *(_QWORD *)(v110 + 8 * v36);
              if (!v35)
              {
                while (1)
                {
                  a2 = v36 + 1;
                  if (__OFADD__(v36, 1))
                    break;
                  if (a2 >= v112)
                    goto LABEL_73;
                  v35 = *(_QWORD *)(v110 + 8 * a2);
                  ++v36;
                  if (v35)
                    goto LABEL_29;
                }
                __break(1u);
                goto LABEL_82;
              }
            }
          }
        }
        a2 = v36;
      }
LABEL_29:
      v7 = (v35 - 1) & v35;
      v33 = __clz(__rbit64(v35)) + (a2 << 6);
    }
    v37 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v33);
    v39 = *v37;
    v38 = v37[1];
    sub_236B8E794(*(_QWORD *)(a1 + 56) + 32 * v33, (uint64_t)&v115[16]);
    *(_QWORD *)v115 = v39;
    *(_QWORD *)&v115[8] = v38;
    v122 = *(_OWORD *)v115;
    v123 = *(_OWORD *)&v115[16];
    v124 = *(_OWORD *)&v115[32];
    v40 = *(Swift::String *)v115;
    v120 = *(_OWORD *)v115;
    sub_236B8E794((uint64_t)&v123, (uint64_t)v121);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ConfigSection.init(rawValue:)(v40);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v121);
    v41 = v119[0];
    if (v119[0] != 10)
      break;
LABEL_14:
    v30 = sub_236B9E134((uint64_t)&v122);
  }
  v120 = v122;
  sub_236B8E794((uint64_t)&v123, (uint64_t)v121);
  sub_236B8BA20(v121, v119);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a5 = sub_236BA4CD0(v41);
  v44 = *(_QWORD *)(v6 + 16);
  v45 = (v43 & 1) == 0;
  v30 = v44 + v45;
  if (!__OFADD__(v44, v45))
  {
    v11 = v43;
    if (*(_QWORD *)(v6 + 24) >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_236B9EFD0();
    }
    else
    {
      sub_236B9E720(v30, isUniquelyReferenced_nonNull_native);
      v46 = sub_236BA4CD0(v41);
      if ((v40._countAndFlagsBits & 1) != (v47 & 1))
      {
        result = sub_236BCFFD4();
        __break(1u);
        return result;
      }
      a5 = v46;
    }
    if ((v11 & 1) != 0)
    {
      v31 = (_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * a5);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
      sub_236B8BA20(v119, v31);
    }
    else
    {
      *(_QWORD *)(v6 + 8 * (a5 >> 6) + 64) |= 1 << a5;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + a5) = v41;
      sub_236B8BA20(v119, (_OWORD *)(*(_QWORD *)(v6 + 56) + 32 * a5));
      v48 = *(_QWORD *)(v6 + 16);
      v34 = __OFADD__(v48, 1);
      v49 = v48 + 1;
      if (v34)
      {
        __break(1u);
        goto LABEL_79;
      }
      *(_QWORD *)(v6 + 16) = v49;
    }
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  *(_QWORD *)(v7 + 200) = v30;
  sub_236BB9DE0((char *)&v122, (uint64_t)v115);
  if (v21)
  {
    sub_236B9E0F0(a2, v20);
    sub_236B9E0F0(v92, v94);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v53 = 0;
    v111 = 0;
    v114 = 0;
    v54 = 1;
    v97 = 1;
    v99 = 1;
    v103 = 1;
    v113 = 1;
    v101 = 1;
    goto LABEL_47;
  }
  v73 = v115[2];
  v74 = *(_QWORD *)&v115[40];
  v75 = v118;
  *(_WORD *)(v7 + 112) = *(_WORD *)v115;
  *(_BYTE *)(v7 + 114) = v73;
  *(_OWORD *)(v7 + 120) = *(_OWORD *)&v115[8];
  *(_OWORD *)(v7 + 136) = *(_OWORD *)&v115[24];
  *(_QWORD *)(v7 + 152) = v74;
  v76 = v117;
  *(_OWORD *)(v7 + 160) = v116;
  *(_OWORD *)(v7 + 176) = v76;
  *(_QWORD *)(v7 + 192) = v75;
  *(_QWORD *)(v7 + 208) = sub_236BCC014((uint64_t *)&v122);
  sub_236BBB5A4((uint64_t *)&v122, (uint64_t)v115);
  v21 = 0;
LABEL_82:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v77 = v115[2];
  v78 = *(_QWORD *)&v115[40];
  v79 = v116;
  v80 = *((_QWORD *)&v116 + 1);
  *(_WORD *)(v7 + 16) = *(_WORD *)v115;
  *(_BYTE *)(v7 + 18) = v77;
  *(_OWORD *)(v7 + 24) = *(_OWORD *)&v115[8];
  *(_OWORD *)(v7 + 40) = *(_OWORD *)&v115[24];
  *(_QWORD *)(v7 + 56) = v78;
  *(_BYTE *)(v7 + 64) = v79;
  *(_QWORD *)(v7 + 72) = v80;
  v81 = swift_bridgeObjectRetain();
  v82 = sub_236BA2A0C(v81, 0);
  if (v21)
  {
    sub_236B9E0F0(a2, v20);
    sub_236B9E0F0(v92, v94);
    swift_bridgeObjectRelease();
    v53 = 1;
    v54 = 1;
    v97 = 1;
    v99 = 1;
    v101 = 1;
    v103 = 1;
    v111 = 1;
    v113 = 1;
    v114 = 1;
    goto LABEL_47;
  }
  v84 = v82;
  v85 = v83;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v107 + 216) = v84;
  *(_QWORD *)(v107 + 224) = v85;
  swift_beginAccess();
  *(_QWORD *)aUnknown = v84;
  qword_2542AFA00 = v85;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_retain_n();
  swift_bridgeObjectRetain();
  v86 = sub_236BCF8A8();
  v87 = sub_236BCFC20();
  if (os_log_type_enabled(v86, v87))
  {
    v88 = swift_slowAlloc();
    v89 = swift_slowAlloc();
    *(_QWORD *)&v120 = v89;
    *(_DWORD *)v88 = 136380931;
    swift_bridgeObjectRetain();
    *(_QWORD *)v119 = sub_236B93FB0(v95, v106, (uint64_t *)&v120);
    sub_236BCFCC8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v88 + 12) = 2081;
    v68 = v107;
    v90 = *(_QWORD *)(v107 + 216);
    v91 = *(_QWORD *)(v107 + 224);
    swift_bridgeObjectRetain();
    *(_QWORD *)v119 = sub_236B93FB0(v90, v91, (uint64_t *)&v120);
    sub_236BCFCC8();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_236B83000, v86, v87, "Config loaded. { configPath=%{private}s, configVersion=%{private}s }", (uint8_t *)v88, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x23B7FE96C](v89, -1, -1);
    MEMORY[0x23B7FE96C](v88, -1, -1);
    sub_236B9E0F0(a2, v93);
    sub_236B9E0F0(v92, v94);
  }
  else
  {
    sub_236B9E0F0(a2, v93);
    sub_236B9E0F0(v92, v94);
    v68 = v107;
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }

  return v68;
}

AudioAnalyticsBase::ConfigSection_optional __swiftcall ConfigSection.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  AudioAnalyticsBase::ConfigSection_optional result;
  char v5;

  v2 = v1;
  v3 = sub_236BCFE60();
  result.value = swift_bridgeObjectRelease();
  v5 = 10;
  if (v3 < 0xA)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_236B9AF60(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_236B9AFC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[40];
  uint64_t v9;

  if (*(_QWORD *)(v1 + 16) && (v3 = sub_236B8BFC0(a1 + 12, 0x8000000236BD4E80), (v4 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(v1 + 56) + 32 * v3, (uint64_t)v8);
  else
    memset(v8, 0, 32);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v9 = 0;
LABEL_9:
    sub_236B9CA58(v2);
    v5 = v6;
    swift_bridgeObjectRelease();
    return v5;
  }
  v5 = v9;
  if (!v9)
    goto LABEL_9;
  return v5;
}

void sub_236B9B100(char a1)
{
  __asm { BR              X11 }
}

void sub_236B9B160(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  unint64_t v3;
  char v4;
  _BYTE v5[96];

  if (*(_QWORD *)(v1 + 16) && (v3 = sub_236B8BFC0(a1 + 12, 0x8000000236BD4E80), (v4 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(v1 + 56) + 32 * v3, (uint64_t)v5);
  else
    memset(v5, 0, 32);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  if (!swift_dynamicCast())
    sub_236B9CA58(v2);
}

uint64_t sub_236B9B274(char a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  _OWORD v12[2];
  char v13;

  v5 = a1 & 1;
  if ((a1 & 1) != 0)
    v6 = 0x8000000236BD4F20;
  else
    v6 = 0x8000000236BD4F00;
  if (*(_QWORD *)(a2 + 16)
    && ((a1 & 1) != 0 ? (v7 = 0xD000000000000012) : (v7 = 0xD000000000000018),
        v8 = sub_236B8BFC0(v7, v6),
        (v9 & 1) != 0))
  {
    sub_236B8E794(*(_QWORD *)(a2 + 56) + 32 * v8, (uint64_t)v12);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v13 = 2;
    goto LABEL_15;
  }
  if (v13 == 2)
  {
LABEL_15:
    sub_236B9CCE4(v5, a2, a3);
    return v10 & 1;
  }
  v10 = v13 & 1;
  return v10 & 1;
}

uint64_t sub_236B9B390(unsigned __int8 a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  v7 = sub_236BC442C(a1);
  if (*(_QWORD *)(a2 + 16) && (v9 = sub_236B8BFC0(v7, v8), (v10 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(a2 + 56) + 32 * v9, (uint64_t)v15);
  else
    memset(v15, 0, sizeof(v15));
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  if ((swift_dynamicCast() & 1) != 0 && v14)
    return v13;
  sub_236B9D338(a1, a2, a3);
  if (!v3)
    a2 = v11;
  swift_bridgeObjectRelease();
  return a2;
}

void sub_236B9B494(unsigned __int8 a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  _OWORD v10[2];

  v6 = sub_236BC442C(a1);
  if (*(_QWORD *)(a2 + 16) && (v8 = sub_236B8BFC0(v6, v7), (v9 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(a2 + 56) + 32 * v8, (uint64_t)v10);
  else
    memset(v10, 0, sizeof(v10));
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  if (!swift_dynamicCast())
    sub_236B9D128(a1, a2, a3);
}

uint64_t sub_236B9B574(unsigned __int8 a1, uint64_t a2, char a3)
{
  return sub_236B9B5E4(a1, a2, a3, (uint64_t *)&unk_2542AFD90);
}

uint64_t sub_236B9B5A8(unsigned __int8 a1, uint64_t a2, char a3)
{
  return sub_236B9B5E4(a1, a2, a3, &qword_2542AFDC8);
}

uint64_t sub_236B9B5E4(unsigned __int8 a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _OWORD v16[2];

  v8 = sub_236BC442C(a1);
  if (*(_QWORD *)(a2 + 16) && (v10 = sub_236B8BFC0(v8, v9), (v11 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(a2 + 56) + 32 * v10, (uint64_t)v16);
  else
    memset(v16, 0, sizeof(v16));
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  __swift_instantiateConcreteTypeFromMangledName(a4);
  if ((swift_dynamicCast() & 1) == 0 || (v12 = v15) == 0)
  {
    sub_236B9CF10(a1, a2, a3);
    v12 = v13;
    swift_bridgeObjectRelease();
  }
  return v12;
}

void sub_236B9B6F4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_236B9B74C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[96];

  if (*(_QWORD *)(v1 + 16) && (v3 = sub_236B8BFC0(0x56746C7561666564, 0xEC00000065756C61), (v4 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(v1 + 56) + 32 * v3, (uint64_t)v9);
  else
    memset(v9, 0, 32);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  if ((swift_dynamicCast() & 1) != 0 && v8)
    return v7;
  sub_236B9D548(v2);
  if (!v0)
    v1 = v5;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t Config.__allocating_init(baseConfig:routerConfigs:summaryConfigs:systemMonitorConfigs:ioReportingConfigs:rtcConfig:serverConfig:neededPreviousFields:abcConfigs:tailspinConfigs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, unint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;

  swift_allocObject();
  v17 = sub_236BA2B0C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  swift_release();
  return v17;
}

uint64_t Config.init(baseConfig:routerConfigs:summaryConfigs:systemMonitorConfigs:ioReportingConfigs:rtcConfig:serverConfig:neededPreviousFields:abcConfigs:tailspinConfigs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, unint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  v10 = sub_236BA2B0C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  swift_release();
  return v10;
}

uint64_t static Config.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 216) == *(_QWORD *)(a2 + 216) && *(_QWORD *)(a1 + 224) == *(_QWORD *)(a2 + 224))
    return 1;
  else
    return sub_236BCFF98();
}

uint64_t static Config.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 216) == *(_QWORD *)(a2 + 216) && *(_QWORD *)(a1 + 224) == *(_QWORD *)(a2 + 224))
    return 0;
  else
    return sub_236BCFF98();
}

void sub_236B9B9FC()
{
  uint64_t ObjCClassFromMetadata;
  id v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  type metadata accessor for Config();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v2 = (void *)sub_236BCF998();
  v3 = (void *)sub_236BCF998();
  v4 = objc_msgSend(v1, sel_pathForResource_ofType_, v2, v3);

  if (v4)
  {
    v5 = sub_236BCF9BC();
    v7 = v6;

  }
  else
  {
    v7 = 0xE700000000000000;
    v5 = 0x6E776F6E6B6E75;
  }
  qword_2542AF1D8 = v5;
  unk_2542AF1E0 = v7;
}

uint64_t static Config.defaultConfigPathEncrypted.getter()
{
  return sub_236B9BEA8(&qword_2542AF9E0, &qword_2542AF1D8);
}

Swift::Void __swiftcall Config.updateNeededPreviousFields(workers:)(Swift::OpaquePointer workers)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v3 = *((_QWORD *)workers._rawValue + 2);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v6 = 32;
    do
    {
      v8 = *(_QWORD *)((char *)workers._rawValue + v6);
      v9 = swift_conformsToProtocol2();
      if (v9)
        v10 = v8;
      else
        v10 = 0;
      if (v9)
        v11 = v9;
      else
        v11 = 0;
      if (v10)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = sub_236B9DB4C(0, v5[2] + 1, 1, v5, &qword_2542AF308, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_236BA344C);
        v13 = v5[2];
        v12 = v5[3];
        if (v13 >= v12 >> 1)
          v5 = sub_236B9DB4C((_QWORD *)(v12 > 1), v13 + 1, 1, v5, &qword_2542AF308, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_236BA344C);
        v5[2] = v13 + 1;
        v7 = &v5[2 * v13];
        v7[4] = v10;
        v7[5] = v11;
      }
      v6 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v24 = MEMORY[0x24BEE4B08];
  v22 = v5[2];
  if (v22)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v22; ++i)
    {
      v15 = (*(uint64_t (**)(uint64_t))(v5[2 * i + 5] + 8))(v2);
      swift_retain();
      v16 = sub_236BA2490(v15, v2);
      swift_bridgeObjectRelease();
      swift_release();
      v17 = *(_QWORD *)(v16 + 16);
      if (v17)
      {
        v18 = (uint64_t *)(v16 + 40);
        do
        {
          v19 = *(v18 - 1);
          v20 = *v18;
          swift_bridgeObjectRetain();
          sub_236B9F354(&v23, v19, v20);
          swift_bridgeObjectRelease();
          v18 += 2;
          --v17;
        }
        while (v17);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease_n();
    v21 = v24;
  }
  else
  {
    swift_bridgeObjectRelease();
    v21 = MEMORY[0x24BEE4B08];
  }
  swift_beginAccess();
  *(_QWORD *)(v2 + 248) = v21;
  swift_bridgeObjectRelease();
}

uint64_t sub_236B9BD64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v0 = sub_236BCF800();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v13 - v5;
  if (qword_2542AFBA0 != -1)
    swift_once();
  v7 = __swift_project_value_buffer(v0, (uint64_t)qword_2542AF200);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v4, v7, v0);
  sub_236BCF7D0();
  v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  v9 = sub_236BCF7E8();
  v11 = v10;
  result = ((uint64_t (*)(char *, uint64_t))v8)(v6, v0);
  qword_2542AF9C0 = v9;
  unk_2542AF9C8 = v11;
  return result;
}

uint64_t static Config.assetConfigPath.getter()
{
  return sub_236B9BEA8(&qword_2542AF9D8, &qword_2542AF9C0);
}

uint64_t sub_236B9BEA8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

unint64_t static Config.distributedConfigName.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t static Config.lastErrorMessage.getter()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = qword_2542AFA08;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static Config.lastErrorMessage.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  qword_2542AFA08 = a1;
  qword_2542AFA10 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Config.lastErrorMessage.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t Config.serverConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v2 = *(_WORD *)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 18);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_BYTE *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  *(_WORD *)a1 = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Config.systemMonitorConfigs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Config.ioReportingConfigs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Config.abcConfigs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Config.tailspinConfigs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Config.sortableConfigVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 216);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static Config.configVersion.getter()
{
  uint64_t v0;

  swift_beginAccess();
  v0 = *(_QWORD *)aUnknown;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static Config.configVersion.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(_QWORD *)aUnknown = a1;
  qword_2542AFA00 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Config.configVersion.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t Config.configPath.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 232);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Config.WorkerConfigs.stopOrder.getter()
{
  char *v0;

  return byte_236BD1440[*v0];
}

AudioAnalyticsBase::Config::WorkerConfigs_optional __swiftcall Config.WorkerConfigs.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  AudioAnalyticsBase::Config::WorkerConfigs_optional result;
  char v5;

  v2 = v1;
  v3 = sub_236BCFE60();
  result.value = swift_bridgeObjectRelease();
  v5 = 16;
  if (v3 < 0x10)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static Config.WorkerConfigs.allCases.getter()
{
  return &unk_250827BF0;
}

uint64_t Config.WorkerConfigs.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236B9C298 + 4 * byte_236BD1470[*v0]))(0x6C6F56534F63616DLL, 0xEB00000000656D75);
}

uint64_t sub_236B9C298()
{
  return 0x6F57646F50726961;
}

uint64_t sub_236B9C2B8()
{
  return 6513249;
}

uint64_t sub_236B9C2C8()
{
  return 0x676F4C7265776F70;
}

unint64_t sub_236B9C2E0()
{
  return 0xD000000000000010;
}

uint64_t sub_236B9C3D0()
{
  return 0x6576697470616461;
}

uint64_t sub_236B9C3F4()
{
  return 0x6163696669746F6ELL;
}

unint64_t sub_236B9C418()
{
  return 0xD000000000000019;
}

uint64_t sub_236B9C43C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_236BCA3FC(*a1, *a2);
}

uint64_t sub_236B9C448()
{
  sub_236BD0028();
  Config.WorkerConfigs.rawValue.getter();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

uint64_t sub_236B9C4AC()
{
  Config.WorkerConfigs.rawValue.getter();
  sub_236BCFA34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_236B9C4FC()
{
  sub_236BD0028();
  Config.WorkerConfigs.rawValue.getter();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

AudioAnalyticsBase::Config::WorkerConfigs_optional sub_236B9C55C(Swift::String *a1)
{
  return Config.WorkerConfigs.init(rawValue:)(*a1);
}

uint64_t sub_236B9C568@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Config.WorkerConfigs.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_236B9C58C(_QWORD *a1@<X8>)
{
  *a1 = &unk_250827BF0;
}

uint64_t Config.neededPreviousFields.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 248) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*Config.neededPreviousFields.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t Config.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase6Config_logger;
  v2 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Config.__deallocating_deinit()
{
  Config.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_236B9C790(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)a1 + 216) == *(_QWORD *)(*(_QWORD *)a2 + 216)
    && *(_QWORD *)(*(_QWORD *)a1 + 224) == *(_QWORD *)(*(_QWORD *)a2 + 224))
  {
    return 0;
  }
  else
  {
    return sub_236BCFF98();
  }
}

uint64_t sub_236B9C7BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 216);
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 224);
  if (v3 == *(_QWORD *)(v2 + 216) && v4 == *(_QWORD *)(v2 + 224))
    v6 = 1;
  else
    v6 = sub_236BCFF98() ^ 1;
  return v6 & 1;
}

uint64_t sub_236B9C800(uint64_t a1, uint64_t a2)
{
  char v3;

  if (*(_QWORD *)(*(_QWORD *)a1 + 216) == *(_QWORD *)(*(_QWORD *)a2 + 216)
    && *(_QWORD *)(*(_QWORD *)a1 + 224) == *(_QWORD *)(*(_QWORD *)a2 + 224))
  {
    v3 = 1;
  }
  else
  {
    v3 = sub_236BCFF98() ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_236B9C844(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 216);
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 224);
  if (v3 == *(_QWORD *)(v2 + 216) && v4 == *(_QWORD *)(v2 + 224))
    return 0;
  else
    return sub_236BCFF98();
}

uint64_t sub_236B9C870(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)a1 + 216) == *(_QWORD *)(*(_QWORD *)a2 + 216)
    && *(_QWORD *)(*(_QWORD *)a1 + 224) == *(_QWORD *)(*(_QWORD *)a2 + 224))
  {
    return 1;
  }
  else
  {
    return sub_236BCFF98();
  }
}

uint64_t ConfigSection.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236B9C8C4 + 4 * byte_236BD1480[*v0]))(1953460082, 0xE400000000000000);
}

uint64_t sub_236B9C8C4()
{
  return 0x726576726573;
}

uint64_t sub_236B9C8D8()
{
  return 6517874;
}

uint64_t sub_236B9C8E8()
{
  return 0x656972616D6D7573;
}

uint64_t sub_236B9C904()
{
  return 0x74726F7065526F69;
}

uint64_t sub_236B9C924()
{
  return 6513249;
}

uint64_t sub_236B9C934()
{
  return 0x6F4D6D6574737973;
}

uint64_t sub_236B9C958()
{
  return 0x726574756F72;
}

uint64_t sub_236B9C96C()
{
  return 0x6E6970736C696174;
}

uint64_t sub_236B9C984()
{
  return 1953719668;
}

void sub_236B9C990(char *a1)
{
  sub_236BCACFC(*a1);
}

uint64_t sub_236B9C99C()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_236BD0028();
  sub_236BA4224((uint64_t)v3, v1);
  return sub_236BD0064();
}

void sub_236B9C9E0(uint64_t a1)
{
  char *v1;

  sub_236BA4224(a1, *v1);
}

uint64_t sub_236B9C9E8()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_236BD0028();
  sub_236BA4224((uint64_t)v3, v1);
  return sub_236BD0064();
}

AudioAnalyticsBase::ConfigSection_optional sub_236B9CA28(Swift::String *a1)
{
  return ConfigSection.init(rawValue:)(*a1);
}

uint64_t sub_236B9CA34@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ConfigSection.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_236B9CA58(char a1)
{
  sub_236BCFD4C();
  __asm { BR              X10 }
}

uint64_t sub_236B9CAD4()
{
  unsigned __int8 v0;

  swift_bridgeObjectRelease();
  sub_236BCFA58();
  return ((uint64_t (*)(uint64_t))((char *)sub_236B9CB84 + 4 * byte_236BD148F[v0]))(1953460082);
}

uint64_t sub_236B9CB84()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  sub_236BCFA58();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  sub_236BCFA58();
  sub_236B93D48();
  swift_allocError();
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_BYTE *)(v0 + 16) = 1;
  return swift_willThrow();
}

void sub_236B9CCE4(uint64_t a1, uint64_t a2, char a3)
{
  sub_236BCFD4C();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  __asm { BR              X10 }
}

uint64_t sub_236B9CDB0()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  sub_236BCFA58();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  sub_236BCFA58();
  sub_236B93D48();
  swift_allocError();
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_BYTE *)(v0 + 16) = 1;
  swift_willThrow();
  return 0;
}

void sub_236B9CF10(unsigned __int8 a1, uint64_t a2, char a3)
{
  sub_236BCFD4C();
  sub_236BC442C(a1);
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  __asm { BR              X10 }
}

uint64_t sub_236B9CFC8()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  sub_236BCFA58();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  sub_236BCFA58();
  sub_236B93D48();
  swift_allocError();
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_BYTE *)(v0 + 16) = 1;
  return swift_willThrow();
}

void sub_236B9D128(unsigned __int8 a1, uint64_t a2, char a3)
{
  sub_236BCFD4C();
  sub_236BC442C(a1);
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  __asm { BR              X10 }
}

uint64_t sub_236B9D1D4()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  sub_236BCFA58();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  sub_236BCFA58();
  sub_236B93D48();
  swift_allocError();
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_BYTE *)(v0 + 16) = 1;
  return swift_willThrow();
}

void sub_236B9D338(unsigned __int8 a1, uint64_t a2, char a3)
{
  sub_236BCFD4C();
  sub_236BC442C(a1);
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  __asm { BR              X10 }
}

uint64_t sub_236B9D3E4()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  sub_236BCFA58();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  sub_236BCFA58();
  sub_236B93D48();
  swift_allocError();
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_BYTE *)(v0 + 16) = 1;
  return swift_willThrow();
}

void sub_236B9D548(char a1)
{
  sub_236BCFD4C();
  __asm { BR              X10 }
}

uint64_t sub_236B9D5B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  unsigned __int8 v9;

  swift_bridgeObjectRelease();
  strcpy((char *)&a9, "defaultValue");
  BYTE13(a9) = 0;
  HIWORD(a9) = -5120;
  sub_236BCFA58();
  return ((uint64_t (*)(uint64_t))((char *)sub_236B9D680 + 4 * byte_236BD14C7[v9]))(1953460082);
}

uint64_t sub_236B9D680()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  sub_236BCFA58();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  sub_236BCFA58();
  sub_236B93D48();
  swift_allocError();
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_BYTE *)(v0 + 16) = 1;
  return swift_willThrow();
}

_QWORD *sub_236B9D7E4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542B0000);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 208);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[26 * v8 + 4])
          memmove(v12, a4 + 4, 208 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_236BA21BC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_236B9D90C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_236B9DB4C(a1, a2, a3, a4, &qword_256442928, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))sub_236BA2724);
}

_QWORD *sub_236B9D920(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF20);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4])
          memmove(v12, a4 + 4, 80 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_236BA22AC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_236B9DA40(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF40);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 95;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 7);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_236BA23A0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_236B9DB4C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 17;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4])
          memmove(v16, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

char *sub_236B9DC60(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_236B9DFB8(a1, a2, a3, a4, &qword_256442918);
}

_QWORD *sub_236B9DC6C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256442910);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 648);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[81 * v8 + 4])
          memmove(v12, a4 + 4, 648 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_236BA3534(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_236B9DD94(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF78);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_236BA3624(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_236B9DEA0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256442908);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_236BA370C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_236B9DFAC(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_236B9DFB8(a1, a2, a3, a4, &qword_2542AF300);
}

char *sub_236B9DFB8(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * v12 - 64;
      v13 = v11 + 32;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[v9 + 32])
          memmove(v13, a4 + 32, v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_236BA2640(0, v9, v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_236B9E0AC(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_236B9E0F0(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_236B9E134(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF2E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_236B9E174(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256442938);
  v38 = a2;
  v6 = sub_236BCFE30();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v21);
    v32 = *v31;
    v33 = v31[1];
    if ((v38 & 1) == 0)
    {
      v34 = v30;
      swift_bridgeObjectRetain();
    }
    result = sub_236BCFC8C();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v30;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v18);
    *v19 = v32;
    v19[1] = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_236B9E458(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF18);
  result = sub_236BCFE30();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v31 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_WORD *)(*(_QWORD *)(v5 + 48) + 2 * v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      sub_236BD0028();
      sub_236BD004C();
      result = sub_236BD0064();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_WORD *)(*(_QWORD *)(v7 + 48) + 2 * v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

uint64_t sub_236B9E720(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  _OWORD v20[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF2F8);
  v6 = sub_236BCFE30();
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_27;
  v7 = 1 << *(_BYTE *)(v5 + 32);
  v19 = (_QWORD *)(v5 + 64);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v5 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_18;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v5 + 72);
    v13 = 1;
    if (v12)
      goto LABEL_17;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v5 + 80);
      if (!v12)
      {
        v14 = 3;
        if (v10 > 3)
        {
          v12 = *(_QWORD *)(v5 + 88);
          if (v12)
          {
            v13 = 3;
            goto LABEL_17;
          }
          while (1)
          {
            v13 = v14 + 1;
            if (__OFADD__(v14, 1))
            {
              __break(1u);
              JUMPOUT(0x236B9EAF0);
            }
            if (v13 >= v10)
              break;
            v12 = v19[v13];
            ++v14;
            if (v12)
              goto LABEL_17;
          }
        }
        goto LABEL_22;
      }
LABEL_17:
      v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_18:
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
      v16 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v11);
      if ((a2 & 1) != 0)
        sub_236B8BA20(v16, v20);
      else
        sub_236B8E794((uint64_t)v16, (uint64_t)v20);
      sub_236BD0028();
      __asm { BR              X8 }
    }
  }
LABEL_22:
  swift_release();
  v3 = v2;
  if ((a2 & 1) != 0)
  {
    v17 = 1 << *(_BYTE *)(v5 + 32);
    if (v17 >= 64)
      bzero(v19, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v19 = -1 << v17;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_27:
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t sub_236B9EB18(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t i;
  char v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEF0);
  v40 = a2;
  v6 = sub_236BCFE30();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v30 = *v29;
      v31 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 24 * v21;
      v34 = *(_QWORD *)v32;
      v33 = *(_QWORD *)(v32 + 8);
      v35 = *(_BYTE *)(v32 + 16);
      if ((v40 & 1) == 0)
      {
        sub_236B8C348(v34, v33, v35);
        swift_bridgeObjectRetain();
      }
      sub_236BD0028();
      sub_236BCFA34();
      result = sub_236BD0064();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      v19 = *(_QWORD *)(v7 + 56) + 24 * v17;
      *(_QWORD *)v19 = v34;
      *(_QWORD *)(v19 + 8) = v33;
      *(_BYTE *)(v19 + 16) = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_236B9EE40()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF18);
  v2 = *v0;
  v3 = sub_236BCFE24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 2 * v15;
    v17 = *(_WORD *)(*(_QWORD *)(v2 + 48) + 2 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_WORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_236B9EFD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD v20[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF2F8);
  v2 = *v0;
  v3 = sub_236BCFE24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    sub_236B8E794(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    result = sub_236B8BA20(v20, (_OWORD *)(*(_QWORD *)(v4 + 56) + 32 * v15));
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_236B9F18C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEF0);
  v2 = *v0;
  v3 = sub_236BCFE24();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v25 = *(_BYTE *)(v21 + 16);
    *v24 = v18;
    v24[1] = v19;
    v26 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v26 = v22;
    *(_QWORD *)(v26 + 8) = v23;
    *(_BYTE *)(v26 + 16) = v25;
    sub_236B8C348(v22, v23, v25);
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_236B9F354(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_236BD0028();
  swift_bridgeObjectRetain();
  sub_236BCFA34();
  v8 = sub_236BD0064();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_236BCFF98() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_236BCFF98() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_236BA0944(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_236B9F500(_BYTE *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  sub_236BD0028();
  swift_bridgeObjectRetain();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  v7 = sub_236BD0064();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    v11 = *(_QWORD *)&aRoot_3[8 * (char)a2];
    while (*(_QWORD *)&aRoot_3[8 * *(char *)(*(_QWORD *)(v6 + 48) + v9)] != v11)
    {
      v12 = sub_236BCFF98();
      swift_bridgeObjectRelease_n();
      if ((v12 & 1) != 0)
        goto LABEL_8;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_8:
    swift_bridgeObjectRelease();
    result = 0;
    LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v3 + 48) + v9);
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_236BA0ADC(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v15;
    swift_bridgeObjectRelease();
    result = 1;
  }
  *a1 = a2;
  return result;
}

uint64_t sub_236B9F698(_BYTE *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t *v8;
  uint64_t v10;

  v4 = *v2;
  sub_236BD0028();
  Config.WorkerConfigs.rawValue.getter();
  swift_bridgeObjectRetain();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  v5 = sub_236BD0064() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v10 = *v8;
  *v8 = 0x8000000000000000;
  sub_236BA0C80(a2, v5, isUniquelyReferenced_nonNull_native);
  *v8 = v10;
  swift_bridgeObjectRelease();
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t sub_236B9FC30()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542AFEB0);
  v3 = sub_236BCFD34();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_236BD0028();
      sub_236BCFA34();
      result = sub_236BD0064();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_236B9FF0C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256442D60);
  v3 = sub_236BCFD34();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
      sub_236BD0028();
      sub_236BCFA34();
      swift_bridgeObjectRelease();
      result = sub_236BD0064();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_236BA01DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEC0);
  result = sub_236BCFD34();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = sub_236BD001C();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_236BA045C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256442920);
  v2 = sub_236BCFD34();
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_25;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = (_QWORD *)(v1 + 56);
  if (v3 < 64)
    v5 = ~(-1 << v3);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v1 + 56);
  v7 = (unint64_t)(v3 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v8 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v7 > 1)
  {
    v9 = *(_QWORD *)(v1 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v7 > 2)
    {
      v9 = *(_QWORD *)(v1 + 72);
      if (v9)
        goto LABEL_19;
      v10 = 3;
      if (v7 > 3)
      {
        v9 = *(_QWORD *)(v1 + 80);
        if (!v9)
        {
          v11 = 4;
          if (v7 > 4)
          {
            v9 = *(_QWORD *)(v1 + 88);
            if (v9)
            {
              v10 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v10 = v11 + 1;
              if (__OFADD__(v11, 1))
              {
                __break(1u);
                JUMPOUT(0x236BA0904);
              }
              if (v10 >= v7)
                break;
              v9 = v4[v10];
              ++v11;
              if (v9)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
        v12 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 48) + v8);
        sub_236BD0028();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v13 = 1 << *(_BYTE *)(v1 + 32);
  if (v13 > 63)
    bzero((void *)(v1 + 56), ((unint64_t)(v13 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v4 = -1 << v13;
  *(_QWORD *)(v1 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v0 = v2;
  return result;
}

uint64_t sub_236BA0944(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_236B9FC30();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_236BB75F4();
      goto LABEL_22;
    }
    sub_236BA1280();
  }
  v11 = *v4;
  sub_236BD0028();
  sub_236BCFA34();
  result = sub_236BD0064();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_236BCFF98(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_236BCFFC8();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_236BCFF98();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t sub_236BA0ADC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_13;
  if ((a3 & 1) != 0)
  {
    sub_236B9FF0C();
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_236BB77A4();
      goto LABEL_13;
    }
    sub_236BA152C();
  }
  v9 = *v3;
  sub_236BD0028();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  result = sub_236BD0064();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = ~v10;
    v12 = *(_QWORD *)&aRoot_3[8 * v6];
    while (*(_QWORD *)&aRoot_3[8 * *(char *)(*(_QWORD *)(v9 + 48) + a2)] != v12)
    {
      v13 = sub_236BCFF98();
      result = swift_bridgeObjectRelease_n();
      if ((v13 & 1) != 0)
        goto LABEL_17;
      a2 = (a2 + 1) & v11;
      if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_13;
    }
    goto LABEL_16;
  }
LABEL_13:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v14 + 48) + a2) = v6;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (!v16)
  {
    *(_QWORD *)(v14 + 16) = v17;
    return result;
  }
  __break(1u);
LABEL_16:
  swift_bridgeObjectRelease_n();
LABEL_17:
  result = sub_236BCFFC8();
  __break(1u);
  return result;
}

uint64_t sub_236BA0C80(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;

  v5 = *(_QWORD *)(*v3 + 16);
  v6 = *(_QWORD *)(*v3 + 24);
  if (v6 <= v5 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      sub_236BA045C();
    }
    else
    {
      if (v6 > v5)
      {
        result = (uint64_t)sub_236BB7944();
        goto LABEL_10;
      }
      sub_236BA1A28();
    }
    v8 = *v3;
    sub_236BD0028();
    Config.WorkerConfigs.rawValue.getter();
    sub_236BCFA34();
    swift_bridgeObjectRelease();
    result = sub_236BD0064();
    a2 = result & ~(-1 << *(_BYTE *)(v8 + 32));
    if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v9 = *v13;
  *(_QWORD *)(*v13 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v9 + 48) + a2) = v14;
  v10 = *(_QWORD *)(v9 + 16);
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    JUMPOUT(0x236BA11E4);
  }
  *(_QWORD *)(v9 + 16) = v12;
  return result;
}

uint64_t sub_236BA1280()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542AFEB0);
  v3 = sub_236BCFD34();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_236BD0028();
    swift_bridgeObjectRetain();
    sub_236BCFA34();
    result = sub_236BD0064();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_236BA152C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_256442D60);
  v3 = sub_236BCFD34();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    sub_236BD0028();
    sub_236BCFA34();
    swift_bridgeObjectRelease();
    result = sub_236BD0064();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_236BA17C8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEC0);
  result = sub_236BCFD34();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = sub_236BD001C();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_236BA1A28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256442920);
  v2 = sub_236BCFD34();
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v3 = 1 << *(_BYTE *)(v1 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_retain();
  if (v5)
  {
    v7 = __clz(__rbit64(v5));
    goto LABEL_20;
  }
  if (v6 > 1)
  {
    v8 = *(_QWORD *)(v1 + 64);
    v9 = 1;
    if (v8)
      goto LABEL_19;
    v9 = 2;
    if (v6 > 2)
    {
      v8 = *(_QWORD *)(v1 + 72);
      if (v8)
        goto LABEL_19;
      v9 = 3;
      if (v6 > 3)
      {
        v8 = *(_QWORD *)(v1 + 80);
        if (!v8)
        {
          v10 = 4;
          if (v6 > 4)
          {
            v8 = *(_QWORD *)(v1 + 88);
            if (v8)
            {
              v9 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v9 = v10 + 1;
              if (__OFADD__(v10, 1))
              {
                __break(1u);
                JUMPOUT(0x236BA1E9CLL);
              }
              if (v9 >= v6)
                break;
              v8 = *(_QWORD *)(v1 + 56 + 8 * v9);
              ++v10;
              if (v8)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v7 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_20:
        v11 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 48) + v7);
        sub_236BD0028();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
LABEL_23:
  *v0 = v2;
  return result;
}

void sub_236BA1EDC(uint64_t a1, char a2)
{
  sub_236BCFD4C();
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

uint64_t sub_236BA1F5C()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  sub_236BCFA58();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  sub_236BCFA58();
  sub_236B93D48();
  swift_allocError();
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_BYTE *)(v0 + 16) = 1;
  return swift_willThrow();
}

uint64_t sub_236BA20CC(uint64_t a1, char a2)
{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _OWORD v10[2];

  if (*(_QWORD *)(a1 + 16) && (v4 = sub_236B8BFC0(0x4364656C62616E65, 0xEC00000073657361), (v5 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)v10);
  else
    memset(v10, 0, sizeof(v10));
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
  if ((swift_dynamicCast() & 1) == 0 || (v6 = v9) == 0)
  {
    sub_236BA1EDC(a1, a2);
    v6 = v7;
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t sub_236BA21BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 208 * a1 + 32;
    v6 = a3 + 208 * v4;
    if (v5 >= v6 || v5 + 208 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA22AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 80 * a1 + 32;
    v6 = a3 + 80 * v4;
    if (v5 >= v6 || v5 + 80 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA23A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 7) + 32;
    v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA2490(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v3 = 0;
  v20 = result + 32;
  v4 = MEMORY[0x24BEE4AF8];
  do
  {
    v19 = v4;
    if (v3 <= v2)
      v5 = v2;
    else
      v5 = v3;
    while (1)
    {
      if (v3 == v5)
        goto LABEL_33;
      v6 = (uint64_t *)(v20 + 16 * v3);
      v7 = *v6;
      v8 = v6[1];
      ++v3;
      v9 = *(_QWORD **)(a2 + 72);
      v10 = v9[2];
      if (!v10)
        goto LABEL_23;
      result = v9[4];
      if (result != v7 || v9[5] != v8)
      {
        result = sub_236BCFF98();
        if ((result & 1) == 0)
          break;
      }
LABEL_6:
      if (v3 == v2)
        return v19;
    }
    if (v10 != 1)
    {
      v12 = v9 + 7;
      v13 = 1;
      while (1)
      {
        v14 = v13 + 1;
        if (__OFADD__(v13, 1))
          break;
        result = *(v12 - 1);
        if (result == v7 && *v12 == v8)
          goto LABEL_6;
        result = sub_236BCFF98();
        if ((result & 1) != 0)
          goto LABEL_6;
        v12 += 2;
        ++v13;
        if (v14 == v10)
          goto LABEL_23;
      }
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
LABEL_23:
    swift_bridgeObjectRetain();
    v4 = v19;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_236B8DC98(0, *(_QWORD *)(v19 + 16) + 1, 1);
      v4 = v19;
    }
    v17 = *(_QWORD *)(v4 + 16);
    v16 = *(_QWORD *)(v4 + 24);
    if (v17 >= v16 >> 1)
    {
      result = sub_236B8DC98(v16 > 1, v17 + 1, 1);
      v4 = v19;
    }
    *(_QWORD *)(v4 + 16) = v17 + 1;
    v18 = v4 + 16 * v17;
    *(_QWORD *)(v18 + 32) = v7;
    *(_QWORD *)(v18 + 40) = v8;
  }
  while (v3 != v2);
  return v4;
}

char *sub_236BA2640(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA2724(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256442930);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

void sub_236BA282C(uint64_t a1, char a2)
{
  sub_236BCFD4C();
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

uint64_t sub_236BA28AC()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  sub_236BCFA58();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  sub_236BCFA58();
  sub_236B93D48();
  swift_allocError();
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_BYTE *)(v0 + 16) = 1;
  return swift_willThrow();
}

uint64_t sub_236BA2A0C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  v4 = a1;
  if (*(_QWORD *)(a1 + 16) && (v5 = sub_236B8BFC0(0x65566769666E6F63, 0xED00006E6F697372), (v6 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)v11);
  else
    memset(v11, 0, sizeof(v11));
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  if ((swift_dynamicCast() & 1) != 0 && v10)
    return v9;
  sub_236BA282C(v4, a2);
  if (!v2)
    v4 = v7;
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_236BA2B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, unint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;

  v57 = a6[1];
  v58 = *a6;
  v72 = a6[2];
  v52 = a6[5];
  v53 = a6[3];
  v16 = a6[7];
  v17 = a6[9];
  v63 = a6[10];
  v65 = a6[8];
  v60 = a6[6];
  v62 = *a7;
  v59 = a7[1];
  v70 = a7[3];
  v71 = a6[4];
  v68 = a7[5];
  v69 = a7[4];
  v54 = a7[6];
  v55 = a7[2];
  v56 = a7[7];
  *(_QWORD *)(v10 + 248) = MEMORY[0x24BEE4B08];
  v18 = v10 + OBJC_IVAR____TtC18AudioAnalyticsBase6Config_logger;
  if (qword_2542AFCB0 != -1)
    swift_once();
  v19 = sub_236BCF8C0();
  v20 = __swift_project_value_buffer(v19, (uint64_t)qword_2542AFC98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v18, v20, v19);
  v21 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(v10 + 232) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(v10 + 240) = v21;
  *(_QWORD *)(v10 + OBJC_IVAR____TtC18AudioAnalyticsBase6Config_plist) = *(_QWORD *)(a1
                                                                                   + OBJC_IVAR____TtC18AudioAnalyticsBase6Config_plist);
  if (!a2)
  {
    a2 = *(_QWORD *)(a1 + 80);
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(v10 + 80) = a2;
  v23 = v69;
  v22 = v70;
  v24 = v68;
  v25 = v72;
  v26 = v71;
  v27 = v63;
  v28 = v65;
  if (a3)
  {
    v29 = v16;
    v30 = v17;
    *(_QWORD *)(v10 + 88) = a3;
    if (a4)
      goto LABEL_8;
    goto LABEL_7;
  }
  v37 = *(_QWORD *)(a1 + 88);
  swift_bridgeObjectRetain();
  v27 = v63;
  v28 = v65;
  v30 = v17;
  v29 = v16;
  v22 = v70;
  v26 = v71;
  v25 = v72;
  v24 = v68;
  v23 = v69;
  *(_QWORD *)(v10 + 88) = v37;
  if (!a4)
  {
LABEL_7:
    a4 = *(_QWORD *)(a1 + 96);
    swift_bridgeObjectRetain();
    v27 = v63;
    v28 = v65;
    v30 = v17;
    v29 = v16;
    v22 = v70;
    v26 = v71;
    v25 = v72;
    v24 = v68;
    v23 = v69;
  }
LABEL_8:
  v31 = v58;
  v32 = v60;
  *(_QWORD *)(v10 + 96) = a4;
  if (!a5)
  {
    a5 = *(_QWORD *)(a1 + 104);
    swift_bridgeObjectRetain();
    v27 = v63;
    v28 = v65;
    v30 = v17;
    v29 = v16;
    v22 = v70;
    v26 = v71;
    v25 = v72;
    v24 = v68;
    v23 = v69;
  }
  *(_QWORD *)(v10 + 104) = a5;
  v33 = v57;
  if (v60)
  {
    v34 = (v58 >> 16) & 1;
    v36 = v52;
    v35 = v53;
  }
  else
  {
    v31 = *(_WORD *)(a1 + 112);
    v66 = *(_BYTE *)(a1 + 114);
    v33 = *(_QWORD *)(a1 + 120);
    v73 = *(_QWORD *)(a1 + 128);
    v35 = *(_QWORD *)(a1 + 136);
    v36 = *(_QWORD *)(a1 + 152);
    v61 = *(_QWORD *)(a1 + 160);
    v38 = *(_QWORD *)(a1 + 168);
    v39 = *(_QWORD *)(a1 + 176);
    v40 = *(_QWORD *)(a1 + 192);
    v64 = *(_QWORD *)(a1 + 184);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41 = v38;
    swift_bridgeObjectRetain();
    v28 = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42 = swift_bridgeObjectRetain();
    v30 = v64;
    LOBYTE(v34) = v66;
    v27 = v40;
    v29 = v41;
    v26 = v42;
    v32 = v61;
    v25 = v73;
    v24 = v68;
    v23 = v69;
    v22 = v70;
  }
  *(_WORD *)(v10 + 112) = v31;
  *(_BYTE *)(v10 + 114) = v34;
  *(_QWORD *)(v10 + 120) = v33;
  *(_QWORD *)(v10 + 128) = v25;
  *(_QWORD *)(v10 + 136) = v35;
  *(_QWORD *)(v10 + 144) = v26;
  *(_QWORD *)(v10 + 152) = v36;
  *(_QWORD *)(v10 + 160) = v32;
  *(_QWORD *)(v10 + 168) = v29;
  *(_QWORD *)(v10 + 176) = v28;
  *(_QWORD *)(v10 + 184) = v30;
  *(_QWORD *)(v10 + 192) = v27;
  v43 = v56;
  if (v56)
  {
    v44 = (v62 >> 16) & 1;
    v45 = v55;
    v46 = v54 & 1;
  }
  else
  {
    LOWORD(v62) = *(_WORD *)(a1 + 16);
    LOBYTE(v44) = *(_BYTE *)(a1 + 18);
    v45 = *(_QWORD *)(a1 + 32);
    v59 = *(_QWORD *)(a1 + 24);
    v47 = *(_QWORD *)(a1 + 40);
    v23 = *(_QWORD *)(a1 + 48);
    v48 = *(_QWORD *)(a1 + 56);
    v46 = *(_BYTE *)(a1 + 64);
    v43 = *(_QWORD *)(a1 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = v48;
    v22 = v47;
  }
  *(_WORD *)(v10 + 16) = v62;
  *(_BYTE *)(v10 + 18) = v44;
  *(_QWORD *)(v10 + 24) = v59;
  *(_QWORD *)(v10 + 32) = v45;
  *(_QWORD *)(v10 + 40) = v22;
  *(_QWORD *)(v10 + 48) = v23;
  *(_QWORD *)(v10 + 56) = v24;
  *(_BYTE *)(v10 + 64) = v46;
  *(_QWORD *)(v10 + 72) = v43;
  if (!a8)
  {
    swift_beginAccess();
    a8 = *(_QWORD *)(a1 + 248);
    swift_bridgeObjectRetain();
  }
  v49 = a10;
  swift_beginAccess();
  *(_QWORD *)(v10 + 248) = a8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!a9)
  {
    v51 = *(_QWORD *)(a1 + 200);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v10 + 200) = v51;
    if (a10)
      goto LABEL_22;
LABEL_24:
    v49 = *(_QWORD *)(a1 + 208);
    swift_bridgeObjectRetain();
    goto LABEL_22;
  }
  *(_QWORD *)(v10 + 200) = a9;
  if (!a10)
    goto LABEL_24;
LABEL_22:
  *(_QWORD *)(v10 + 208) = v49;
  *(_QWORD *)(v10 + 216) = 0x746573746F6ELL;
  *(_QWORD *)(v10 + 224) = 0xE600000000000000;
  return v10;
}

unint64_t sub_236BA2F5C()
{
  unint64_t result;

  result = qword_2542AF9F0;
  if (!qword_2542AF9F0)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for Config.WorkerConfigs, &type metadata for Config.WorkerConfigs);
    atomic_store(result, (unint64_t *)&qword_2542AF9F0);
  }
  return result;
}

unint64_t sub_236BA2FA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2564428F8;
  if (!qword_2564428F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256442900);
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2564428F8);
  }
  return result;
}

unint64_t sub_236BA2FF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2542B0050;
  if (!qword_2542B0050)
  {
    v1 = type metadata accessor for Config();
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for Config, v1);
    atomic_store(result, (unint64_t *)&qword_2542B0050);
  }
  return result;
}

uint64_t type metadata accessor for Config()
{
  uint64_t result;

  result = qword_2542AFA28;
  if (!qword_2542AFA28)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_236BA307C()
{
  unint64_t result;

  result = qword_2542AF2D0;
  if (!qword_2542AF2D0)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for ConfigSection, &type metadata for ConfigSection);
    atomic_store(result, (unint64_t *)&qword_2542AF2D0);
  }
  return result;
}

uint64_t sub_236BA30C0()
{
  return type metadata accessor for Config();
}

uint64_t sub_236BA30C8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_236BCF8C0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for Config()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Config.__allocating_init(configPath:allowUnknownFields:platform:encrypted:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of Config.__allocating_init(baseConfig:routerConfigs:summaryConfigs:systemMonitorConfigs:ioReportingConfigs:rtcConfig:serverConfig:neededPreviousFields:abcConfigs:tailspinConfigs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t getEnumTagSinglePayload for Config.WorkerConfigs(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Config.WorkerConfigs(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_236BA3278 + 4 * byte_236BD150A[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_236BA32AC + 4 * byte_236BD1505[v4]))();
}

uint64_t sub_236BA32AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BA32B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BA32BCLL);
  return result;
}

uint64_t sub_236BA32C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BA32D0);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_236BA32D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BA32DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTagSinglePayload for ConfigSection(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfigSection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_236BA33C4 + 4 * byte_236BD1514[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_236BA33F8 + 4 * byte_236BD150F[v4]))();
}

uint64_t sub_236BA33F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BA3400(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BA3408);
  return result;
}

uint64_t sub_236BA3414(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BA341CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_236BA3420(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BA3428(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BA3434(unsigned __int8 *a1)
{
  return *a1;
}

ValueMetadata *type metadata accessor for ConfigSection()
{
  return &type metadata for ConfigSection;
}

char *sub_236BA344C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_236BCFE48();
  __break(1u);
  return result;
}

char *sub_236BA3534(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 648 * a1 + 32);
    v6 = &__dst[648 * v4];
    if (v5 >= v6 || &v5[648 * v4] <= __dst)
    {
      memcpy(__dst, v5, 648 * v4);
      return v6;
    }
  }
  result = (char *)sub_236BCFE48();
  __break(1u);
  return result;
}

char *sub_236BA3624(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_236BCFE48();
  __break(1u);
  return result;
}

char *sub_236BA370C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t CommonConfigFields.init(dict:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char v5;
  int v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  BOOL v49;
  unint64_t j;
  unint64_t v51;
  _QWORD *v52;
  BOOL v53;
  uint64_t v54;
  __int16 v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  int v79;
  char v80;

  if (*(_QWORD *)(a1 + 16)
    && (v4 = sub_236B8BFC0(0xD000000000000010, 0x8000000236BD4450), (v5 & 1) != 0)
    && (sub_236B8E794(*(_QWORD *)(a1 + 56) + 32 * v4, (uint64_t)&v77), (swift_dynamicCast() & 1) != 0))
  {
    v6 = sub_236BCD4A4(v75, v76);
    if ((v6 & 0x10000) != 0)
    {
      *(_QWORD *)&v77 = 0;
      *((_QWORD *)&v77 + 1) = 0xE000000000000000;
      sub_236BCFD4C();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v77 = 0xD000000000000011;
      *((_QWORD *)&v77 + 1) = 0x8000000236BD5670;
      sub_236BCFA58();
      v63 = v77;
      sub_236B93D48();
      swift_allocError();
      *(_OWORD *)v64 = v63;
      *(_BYTE *)(v64 + 16) = 1;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v7 = v6;
    swift_bridgeObjectRelease();
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 1;
  }
  v80 = v8;
  v9 = *(_QWORD *)(a1 + 16);
  v69 = a2;
  v79 = v7;
  if (!v9)
  {
    v12 = 0;
    goto LABEL_20;
  }
  v10 = sub_236B8BFC0(0x73646C697562, 0xE600000000000000);
  if ((v11 & 1) == 0)
  {
    v12 = 0;
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_16;
LABEL_20:
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }
  sub_236B8E794(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)&v77);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
  if (swift_dynamicCast())
    v12 = v75;
  else
    v12 = 0;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_20;
LABEL_16:
  swift_bridgeObjectRetain();
  v13 = sub_236B8BFC0(0x6C616E7265746E69, 0xE900000000000073);
  if ((v14 & 1) == 0)
  {
LABEL_21:
    v15 = 0;
    goto LABEL_22;
  }
  sub_236B8E794(*(_QWORD *)(a1 + 56) + 32 * v13, (uint64_t)&v77);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256442940);
  if (swift_dynamicCast())
    v15 = v75;
  else
    v15 = 0;
LABEL_22:
  v16 = *(_QWORD *)(a1 + 16);
  v73 = v15;
  swift_bridgeObjectRetain();
  v71 = v12;
  v72 = a1;
  if (!v16)
  {
LABEL_36:
    v31 = 0;
    v30 = MEMORY[0x24BEE4AF8];
    goto LABEL_37;
  }
  v17 = sub_236B8BFC0(0xD000000000000010, 0x8000000236BD44D0);
  if ((v18 & 1) == 0
    || (sub_236B8E794(*(_QWORD *)(a1 + 56) + 32 * v17, (uint64_t)&v77),
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8),
        (swift_dynamicCast() & 1) == 0))
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v28 = sub_236B8BFC0(0x6D726F6674616C70, 0xE900000000000073);
      if ((v29 & 1) != 0)
      {
        sub_236B8E794(*(_QWORD *)(a1 + 56) + 32 * v28, (uint64_t)&v77);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v30 = v75;
          v31 = v75;
          goto LABEL_37;
        }
      }
    }
    goto LABEL_36;
  }
  v19 = *(_QWORD *)(v75 + 16);
  v20 = MEMORY[0x24BEE4AF8];
  if (v19)
  {
    *(_QWORD *)&v77 = MEMORY[0x24BEE4AF8];
    sub_236BA5590(0, v19, 0);
    v21 = v77;
    v22 = (uint64_t *)(v75 + 40);
    while (1)
    {
      v24 = *(v22 - 1);
      v23 = *v22;
      swift_bridgeObjectRetain_n();
      v25 = sub_236BCFE60();
      swift_bridgeObjectRelease();
      if (v25 >= 5)
        break;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v77 = v21;
      v27 = *(_QWORD *)(v21 + 16);
      v26 = *(_QWORD *)(v21 + 24);
      if (v27 >= v26 >> 1)
      {
        sub_236BA5590(v26 > 1, v27 + 1, 1);
        v21 = v77;
      }
      v22 += 2;
      *(_QWORD *)(v21 + 16) = v27 + 1;
      *(_BYTE *)(v21 + v27 + 32) = v25;
      if (!--v19)
      {
        swift_bridgeObjectRelease();
        v20 = MEMORY[0x24BEE4AF8];
        goto LABEL_91;
      }
    }
    sub_236B93D48();
    swift_allocError();
    *(_QWORD *)v65 = v24;
    *(_QWORD *)(v65 + 8) = v23;
    *(_BYTE *)(v65 + 16) = 4;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_65:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v21 = MEMORY[0x24BEE4AF8];
LABEL_91:
  *(_QWORD *)&v77 = v20;
  v66 = *(_QWORD *)(v21 + 16);
  if (v66)
  {
    swift_bridgeObjectRetain();
    for (i = 0; i != v66; ++i)
    {
      v68 = (uint64_t)*(&off_2508292D0 + *(char *)(v21 + i + 32));
      sub_236BA5440(v68);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v30 = v77;
  v31 = v77;
LABEL_37:
  v74 = *(_QWORD *)(v30 + 16);
  v70 = v31;
  if (!v74)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_68:
    v55 = v79;
    if (*(_QWORD *)(v72 + 16))
    {
      v56 = sub_236B8BFC0(0xD000000000000012, 0x8000000236BD4470);
      if ((v57 & 1) != 0)
      {
        sub_236B8E794(*(_QWORD *)(v72 + 56) + 32 * v56, (uint64_t)&v77);
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
        if (swift_dynamicCast())
          v58 = v75;
        else
          v58 = 0;
        if (!*(_QWORD *)(v72 + 16))
          goto LABEL_79;
LABEL_77:
        swift_bridgeObjectRetain();
        v59 = sub_236B8BFC0(0xD000000000000018, 0x8000000236BD44A0);
        if ((v60 & 1) != 0)
        {
          sub_236B8E794(*(_QWORD *)(v72 + 56) + 32 * v59, (uint64_t)&v77);
        }
        else
        {
          v77 = 0u;
          v78 = 0u;
        }
LABEL_81:
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v78 + 1))
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
          if (swift_dynamicCast())
            v61 = v75;
          else
            v61 = 0;
        }
        else
        {
          sub_236BA4C90((uint64_t)&v77);
          v61 = 0;
        }
        v62 = v80;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        *(_WORD *)v69 = v55;
        *(_BYTE *)(v69 + 2) = v62;
        *(_QWORD *)(v69 + 8) = v58;
        *(_QWORD *)(v69 + 16) = v61;
        *(_QWORD *)(v69 + 24) = v70;
        *(_QWORD *)(v69 + 32) = v71;
        *(_QWORD *)(v69 + 40) = v73;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v58 = 0;
      if (*(_QWORD *)(v72 + 16))
        goto LABEL_77;
    }
    else
    {
      v58 = 0;
    }
LABEL_79:
    v77 = 0u;
    v78 = 0u;
    swift_bridgeObjectRetain();
    goto LABEL_81;
  }
  result = swift_bridgeObjectRetain();
  v33 = 0;
  while (v33 < *(_QWORD *)(v30 + 16))
  {
    v34 = (uint64_t *)(v30 + 32 + 16 * v33);
    v35 = *v34;
    v36 = v34[1];
    v37 = qword_2542AF618;
    swift_bridgeObjectRetain();
    if (v37 != -1)
      swift_once();
    v38 = off_2542AF610;
    if (!*((_QWORD *)off_2542AF610 + 2))
      goto LABEL_64;
    sub_236BD0028();
    sub_236BCFA34();
    v39 = sub_236BD0064();
    v40 = -1 << v38[32];
    v41 = v39 & ~v40;
    v42 = v38 + 56;
    if (((*(_QWORD *)&v38[((v41 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v41) & 1) == 0)
      goto LABEL_64;
    v43 = *((_QWORD *)v38 + 6);
    v44 = (_QWORD *)(v43 + 16 * v41);
    v45 = *v44 == v35 && v44[1] == v36;
    if (!v45 && (sub_236BCFF98() & 1) == 0)
    {
      v46 = ~v40;
      v47 = (v41 + 1) & ~v40;
      if (((*(_QWORD *)&v42[(v47 >> 3) & 0xFFFFFFFFFFFFF8] >> v47) & 1) == 0)
        goto LABEL_64;
      v48 = (_QWORD *)(v43 + 16 * v47);
      v49 = *v48 == v35 && v48[1] == v36;
      if (!v49 && (sub_236BCFF98() & 1) == 0)
      {
        for (j = v47 + 1; ; j = v51 + 1)
        {
          v51 = j & v46;
          if (((*(_QWORD *)&v42[((j & v46) >> 3) & 0xFFFFFFFFFFFFF8] >> (j & v46)) & 1) == 0)
            break;
          v52 = (_QWORD *)(v43 + 16 * v51);
          v53 = *v52 == v35 && v52[1] == v36;
          if (v53 || (sub_236BCFF98() & 1) != 0)
            goto LABEL_39;
        }
LABEL_64:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_236B93D48();
        swift_allocError();
        *(_QWORD *)v54 = v35;
        *(_QWORD *)(v54 + 8) = v36;
        *(_BYTE *)(v54 + 16) = 3;
        swift_willThrow();
        swift_bridgeObjectRelease();
        goto LABEL_65;
      }
    }
LABEL_39:
    ++v33;
    result = swift_bridgeObjectRelease();
    if (v33 == v74)
    {
      swift_bridgeObjectRelease();
      goto LABEL_68;
    }
  }
  __break(1u);
  return result;
}

void sub_236BA4124(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_236BA4168()
{
  sub_236BCFA34();
  return swift_bridgeObjectRelease();
}

void sub_236BA4224(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_236BA425C()
{
  sub_236BCFA34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_236BA433C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_236BD0028();
    sub_236BCFA34();
    v6 = sub_236BD0064();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_236BCFF98() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_236BCFF98() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

void sub_236BA4470(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_2542AFCB0 != -1)
    swift_once();
  v4 = sub_236BCF8C0();
  __swift_project_value_buffer(v4, (uint64_t)qword_2542AFC98);
  swift_bridgeObjectRetain_n();
  v5 = sub_236BCF8A8();
  v6 = sub_236BCFC2C();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v9 = v8;
    *(_DWORD *)v7 = 136380675;
    swift_bridgeObjectRetain();
    sub_236B93FB0(a1, a2, &v9);
    sub_236BCFCC8();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_236B83000, v5, v6, "Unknown field, but allowing. { field=%{private}s }", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7FE96C](v8, -1, -1);
    MEMORY[0x23B7FE96C](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_236BA460C()
{
  uint64_t v0;

  sub_236BCFD4C();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  sub_236BCFA58();
  sub_236BCFA58();
  sub_236BCFA58();
  sub_236B93D48();
  swift_allocError();
  *(_QWORD *)v0 = 0x206E776F6E6B6E55;
  *(_QWORD *)(v0 + 8) = 0xEF2720646C656966;
  *(_BYTE *)(v0 + 16) = 1;
  return swift_willThrow();
}

uint64_t CommonConfigFields.platforms.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommonConfigFields.builds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommonConfigFields.internals.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CommonKnownFields.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_236BA476C + 4 * byte_236BD18D3[*v0]))(0xD000000000000010, 0x8000000236BD4450);
}

uint64_t sub_236BA476C()
{
  return 0x73646C697562;
}

uint64_t sub_236BA4780(uint64_t a1)
{
  return a1 + 2;
}

AudioAnalyticsBase::CommonKnownFields_optional __swiftcall CommonKnownFields.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  AudioAnalyticsBase::CommonKnownFields_optional result;
  char v5;

  v2 = v1;
  v3 = sub_236BCFE60();
  result.value = swift_bridgeObjectRelease();
  v5 = 9;
  if (v3 < 9)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_236BA486C(char *a1)
{
  sub_236BCA73C(*a1);
}

uint64_t sub_236BA4878()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_236BD0028();
  sub_236BA4124((uint64_t)v3, v1);
  return sub_236BD0064();
}

void sub_236BA48BC(uint64_t a1)
{
  char *v1;

  sub_236BA4124(a1, *v1);
}

uint64_t sub_236BA48C4()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_236BD0028();
  sub_236BA4124((uint64_t)v3, v1);
  return sub_236BD0064();
}

AudioAnalyticsBase::CommonKnownFields_optional sub_236BA4904(Swift::String *a1)
{
  return CommonKnownFields.init(rawValue:)(*a1);
}

uint64_t sub_236BA4910@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CommonKnownFields.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_236BA4934(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

unint64_t sub_236BA496C()
{
  sub_236BCFD4C();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  sub_236BCFA58();
  return 0xD000000000000014;
}

void sub_236BA4C04()
{
  JUMPOUT(0x236BA4BF0);
}

void sub_236BA4C68()
{
  uint64_t v0;

  sub_236BA4934(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_236BA4C90(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_236BA4CD0(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[72];

  sub_236BD0028();
  sub_236BA4224((uint64_t)v4, a1);
  v2 = sub_236BD0064();
  return sub_236BA4E30(a1, v2);
}

unint64_t sub_236BA4D28(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_236BCFC8C();
  return sub_236BA5124(a1, v2);
}

unint64_t sub_236BA4D58(unsigned __int16 a1)
{
  uint64_t v2;

  sub_236BD0028();
  sub_236BD004C();
  v2 = sub_236BD0064();
  return sub_236BA522C(a1, v2);
}

unint64_t sub_236BA4DB0(uint64_t a1)
{
  uint64_t v2;

  sub_236BCF9BC();
  sub_236BD0028();
  sub_236BCFA34();
  v2 = sub_236BD0064();
  swift_bridgeObjectRelease();
  return sub_236BA52CC(a1, v2);
}

uint64_t sub_236BA4E30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_236BA5124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_236B96DA0();
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = sub_236BCFC98();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = sub_236BCFC98();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_236BA522C(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_236BA52CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_236BCF9BC();
    v8 = v7;
    if (v6 == sub_236BCF9BC() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_236BCFF98();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_236BCF9BC();
          v15 = v14;
          if (v13 == sub_236BCF9BC() && v15 == v16)
            break;
          v18 = sub_236BCFF98();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_236BA5440(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_236B8E0D0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA5590(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236BA6498(a1, a2, a3, *v3, &qword_2542AFF30);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236BA55B4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236BA5728(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236BA55D0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236BA58AC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236BA55EC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236BA5A2C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236BA5608(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236BA5BAC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236BA5624(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236BA5D10(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236BA5640(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236BA5E90(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236BA565C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_236BA6018(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_236BA5678(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236BA61B8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236BA5694(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236BA633C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236BA56B0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236BA6498(a1, a2, a3, *v3, &qword_2542AFF50);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236BA56D4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236BA65E0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236BA56F0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236BA6758(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236BA570C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_236BA68C4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_236BA5728(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542B0000);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 208);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[208 * v8])
      memmove(v12, v13, 208 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[208 * v8] || v12 >= &v13[208 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA58AC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF20);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8])
      memmove(v12, v13, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[80 * v8] || v12 >= &v13[80 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA5A2C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF28);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 168);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 168 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA5BAC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF40);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 95;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 7);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  v15 = v8 << 7;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA5D10(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF38);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8])
      memmove(v12, v13, 80 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[80 * v8] || v12 >= &v13[80 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA5E90(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF0E8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA6018(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF60);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 4;
  v13 = a4 + 4;
  v14 = 5 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v10 + 4, a4 + 4, v14 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256442970);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA61AC(char a1, int64_t a2, char a3, char *a4)
{
  return sub_236BA6498(a1, a2, a3, a4, &qword_2542AFF48);
}

uint64_t sub_236BA61B8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256442960);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8])
      memmove(v12, v13, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[88 * v8] || v12 >= &v13[88 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA633C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256442968);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA6498(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v9])
      memmove(v13, v14, v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v9] || v13 >= &v14[v9])
  {
    memcpy(v13, v14, v9);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA65E0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256442958);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA6758(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256442950);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BA68C4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256442908);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

unint64_t sub_236BA6A24()
{
  unint64_t result;

  result = qword_256442948;
  if (!qword_256442948)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for CommonKnownFields, &type metadata for CommonKnownFields);
    atomic_store(result, (unint64_t *)&qword_256442948);
  }
  return result;
}

uint64_t initializeWithCopy for CommonConfigFields(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CommonConfigFields(uint64_t a1, __int16 *a2)
{
  __int16 v4;

  v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CommonConfigFields(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CommonConfigFields(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CommonConfigFields(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CommonKnownFields(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CommonKnownFields(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_236BA6DB8 + 4 * byte_236BD18FD[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_236BA6DEC + 4 * byte_236BD18F8[v4]))();
}

uint64_t sub_236BA6DEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BA6DF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BA6DFCLL);
  return result;
}

uint64_t sub_236BA6E08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BA6E10);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_236BA6E14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BA6E1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommonKnownFields()
{
  return &type metadata for CommonKnownFields;
}

uint64_t sub_236BA6E3C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 6u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for ConfigError(uint64_t a1)
{
  return sub_236BA6E64(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_236BA6E64(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 6u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s18AudioAnalyticsBase11ConfigErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_236BA6E3C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ConfigError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_236BA6E3C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_236BA6E64(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ConfigError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_236BA6E64(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfigError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 7)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfigError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 249;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_236BA6FE8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 6u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 7);
}

uint64_t sub_236BA7000(uint64_t result, unsigned int a2)
{
  if (a2 >= 7)
  {
    *(_QWORD *)result = a2 - 7;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 7;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConfigError()
{
  return &type metadata for ConfigError;
}

uint64_t sub_236BA702C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  void (*v10)(uint64_t, unint64_t);
  uint64_t v11;
  void **v12;
  void *v13;
  uint64_t v14;
  Swift::String v15;
  char v17;

  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  if ((a2 & 1) != 0)
  {
    v10 = sub_236BA4470;
    v11 = *(_QWORD *)(a1 + 16);
    if (v11)
      goto LABEL_3;
LABEL_9:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  swift_retain();
  v10 = (void (*)(uint64_t, unint64_t))sub_236BA76E8;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    goto LABEL_9;
LABEL_3:
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v12 = (void **)(a1 + 40);
  do
  {
    v14 = (uint64_t)*(v12 - 1);
    v13 = *v12;
    swift_bridgeObjectRetain_n();
    v15._countAndFlagsBits = v14;
    v15._object = v13;
    Keys.init(rawValue:)(v15);
    if (v17 == 66)
    {
      v10(v14, (unint64_t)v13);
      if (v4)
      {
        swift_release();
        swift_release();
        swift_bridgeObjectRelease_n();
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    v12 += 2;
    --v11;
  }
  while (v11);
  swift_release();
  swift_bridgeObjectRelease_n();
  return swift_release();
}

id sub_236BA71A8(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;

  if (!a2)
    return 0;
  v2 = (void *)objc_opt_self();
  v3 = (void *)sub_236BCF998();
  v4 = objc_msgSend(v2, sel_buildPredicate_, v3);

  if (!v4)
  {
    sub_236BCFD4C();
    swift_bridgeObjectRelease();
    sub_236BCFA58();
    v4 = (id)0xD00000000000002ALL;
    sub_236B93D48();
    swift_allocError();
    *(_QWORD *)v5 = 0xD00000000000002ALL;
    *(_QWORD *)(v5 + 8) = 0x8000000236BD5260;
    *(_BYTE *)(v5 + 16) = 1;
    swift_willThrow();
  }
  return v4;
}

unint64_t sub_236BA72C0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];

  if (qword_2542AF618 != -1)
    swift_once();
  if ((sub_236BA433C(a2, a3, (uint64_t)off_2542AF610) & 1) != 0)
  {
    v6 = a1[3];
    v7 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v6);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v26, v6, v7);
    v8 = v26[4];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_2542AF570 == -1)
    {
      if (!v8)
        goto LABEL_11;
    }
    else
    {
      swift_once();
      if (!v8)
        goto LABEL_11;
    }
    if (*(_QWORD *)(v8 + 16))
    {
      v9 = sub_236BA8BC0(qword_2542AF560);
      swift_bridgeObjectRelease();
      sub_236BA7680((uint64_t)a1, (uint64_t)v23);
      if ((v9 & 1) == 0)
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
        sub_236BA7680((uint64_t)a1, (uint64_t)v20);
LABEL_15:
        LOBYTE(v10) = 0;
LABEL_26:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
        return v10 & 1;
      }
LABEL_12:
      v12 = v24;
      v13 = v25;
      __swift_project_boxed_opaque_existential_1(v23, v24);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 8))(v26, v12, v13);
      v14 = v26[3];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14)
      {
        if (*(_QWORD *)(v14 + 16))
        {
          v15 = sub_236BA8BC0(a2);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
          sub_236BA7680((uint64_t)a1, (uint64_t)v20);
          if ((v15 & 1) == 0)
            goto LABEL_15;
LABEL_18:
          v16 = v21;
          v17 = v22;
          __swift_project_boxed_opaque_existential_1(v20, v21);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 8))(v26, v16, v17);
          v18 = v26[5];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (qword_2542AF580 != -1)
            swift_once();
          swift_beginAccess();
          if (v18)
          {
            if (*(_QWORD *)(v18 + 16))
              LOBYTE(v10) = sub_236BA8B60(byte_2542AF58B, v18);
            else
              LOBYTE(v10) = 1;
            swift_bridgeObjectRelease();
          }
          else
          {
            LOBYTE(v10) = 1;
          }
          goto LABEL_26;
        }
        swift_bridgeObjectRelease();
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
      sub_236BA7680((uint64_t)a1, (uint64_t)v20);
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
LABEL_11:
    sub_236BA7680((uint64_t)a1, (uint64_t)v23);
    goto LABEL_12;
  }
  sub_236BCFD4C();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  sub_236BCFA58();
  v10 = 0x8000000236BD57A0;
  sub_236B93D48();
  swift_allocError();
  *(_QWORD *)v11 = 0xD000000000000012;
  *(_QWORD *)(v11 + 8) = 0x8000000236BD57A0;
  *(_BYTE *)(v11 + 16) = 1;
  swift_willThrow();
  return v10 & 1;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_236BA7680(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_236BA76C4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_236BA76E8()
{
  return sub_236BA460C();
}

uint64_t String.stringArray.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF58);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_236BD1AD0;
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = a2;
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t Dictionary<>.stringArray.getter()
{
  uint64_t v0;

  v0 = sub_236BCF944();
  swift_bridgeObjectRetain();
  MEMORY[0x23B7FE8AC](MEMORY[0x24BEE0310], v0);
  return sub_236BCFB90();
}

void sub_236BA77E4()
{
  qword_2542B0020 = 0;
}

unint64_t static Constants.machServiceName.getter()
{
  return 0xD000000000000019;
}

uint64_t static Constants.unknown.getter()
{
  return 0x6E776F6E6B6E75;
}

uint64_t static Constants.loadTestWorkerEnv.getter()
{
  return 0x5345545F44414F4CLL;
}

ValueMetadata *type metadata accessor for Constants()
{
  return &type metadata for Constants;
}

uint64_t DefaultsProfile.__allocating_init(profile:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  DefaultsProfile.init(profile:)(a1);
  return v2;
}

char *DefaultsProfile.init(profile:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *((_QWORD *)v1 + 3) = 0;
  swift_unknownObjectWeakInit();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEC8);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *((_QWORD *)v1 + 4) = v3;
  v4 = OBJC_IVAR____TtC18AudioAnalyticsBase15DefaultsProfile_logger;
  if (qword_2542AFD10 != -1)
    swift_once();
  v5 = sub_236BCF8C0();
  v6 = __swift_project_value_buffer(v5, (uint64_t)qword_2542AFCF0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(&v1[v4], v6, v5);
  v7 = &v1[OBJC_IVAR____TtC18AudioAnalyticsBase15DefaultsProfile_profileURL];
  v8 = sub_236BCF800();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 136))(v10);
  sub_236BA7ADC();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v1;
}

uint64_t DefaultsProfile.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(void))(*(_QWORD *)v0 + 144))();
  sub_236BA896C(v0 + 16);
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase15DefaultsProfile_profileURL;
  v2 = sub_236BCF800();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase15DefaultsProfile_logger;
  v4 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t DefaultsProfile.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(void))(*(_QWORD *)v0 + 144))();
  sub_236BA896C(v0 + 16);
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase15DefaultsProfile_profileURL;
  v2 = sub_236BCF800();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase15DefaultsProfile_logger;
  v4 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance();
}

uint64_t sub_236BA7AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_236BA7ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  __objc2_ivar_list **p_ivars;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  void (*v19)(char *, uint64_t);
  void *v20;
  unsigned int v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];

  v1 = v0;
  v2 = sub_236BCF800();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase15DefaultsProfile_logger;
  swift_retain_n();
  v39 = v6;
  v7 = sub_236BCF8A8();
  v8 = sub_236BCFC20();
  p_ivars = &EmbeddedDefaultsProfile.ivars;
  if (os_log_type_enabled(v7, v8))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v38 = v11;
    *(_DWORD *)v10 = 136315138;
    v41[0] = v11;
    v37 = v10 + 4;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC18AudioAnalyticsBase15DefaultsProfile_profileURL, v2);
    v12 = sub_236BCF7E8();
    v14 = v13;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v40 = sub_236B93FB0(v12, v14, v41);
    p_ivars = (__objc2_ivar_list **)(&EmbeddedDefaultsProfile + 48);
    sub_236BCFCC8();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_236B83000, v7, v8, "Reading profile. { profilePath=%s }", v10, 0xCu);
    v15 = v38;
    swift_arrayDestroy();
    MEMORY[0x23B7FE96C](v15, -1, -1);
    MEMORY[0x23B7FE96C](v10, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  v16 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v17 = (char *)p_ivars[126] + v1;
  v18 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v18(v5, v17, v2);
  sub_236BCF7E8();
  v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v5, v2);
  v20 = (void *)sub_236BCF998();
  swift_bridgeObjectRelease();
  v21 = objc_msgSend(v16, sel_fileExistsAtPath_, v20);

  if (v21)
  {
    v18(v5, v17, v2);
    v22 = objc_allocWithZone(MEMORY[0x24BDBCE70]);
    v23 = (void *)sub_236BCF7C4();
    v24 = objc_msgSend(v22, sel_initWithContentsOfURL_, v23);

    v19(v5, v2);
    if (v24 && (v41[0] = 0, sub_236BCF92C(), v24, v41[0]))
    {
      v25 = Dictionary<>.asSimpleType()(v41[0]);
      swift_bridgeObjectRelease();
    }
    else
    {
      v25 = 0;
    }
    swift_bridgeObjectRetain_n();
    v29 = sub_236BCF8A8();
    v30 = sub_236BCFC20();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      v40 = v25;
      v41[0] = v32;
      *(_DWORD *)v31 = 136315138;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_256442978);
      v33 = sub_236BCF9EC();
      v40 = sub_236B93FB0(v33, v34, v41);
      sub_236BCFCC8();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_236B83000, v29, v30, "Read profile. { newContents=%s }", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v32, -1, -1);
      MEMORY[0x23B7FE96C](v31, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v35 = *(_QWORD *)(v1 + 32);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v35 + 24));
    sub_236BA7FF0((uint64_t *)(v35 + 16), v25, (BOOL *)v41);
    os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 24));
    v28 = LOBYTE(v41[0]);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = *(_QWORD *)(v1 + 32);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v26 + 24));
    v27 = *(_QWORD *)(v26 + 16);
    v28 = v27 != 0;
    if (v27)
      swift_bridgeObjectRelease();
    *(_QWORD *)(v26 + 16) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 24));
    swift_release();
  }
  return v28;
}

uint64_t sub_236BA7FF0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  char v6;
  uint64_t v7;

  v6 = a2 == 0;
  if (*a1)
  {
    if (a2)
    {
      swift_bridgeObjectRetain();
      v7 = swift_bridgeObjectRetain();
      v6 = sub_236B89078(v7, a2);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v6 = 0;
    }
    swift_bridgeObjectRelease();
  }
  *a1 = a2;
  *a3 = (v6 & 1) == 0;
  return swift_bridgeObjectRetain();
}

uint64_t EmbeddedDefaultsProfile.__allocating_init(domainName:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  EmbeddedDefaultsProfile.init(domainName:)(a1, a2);
  return v4;
}

uint64_t EmbeddedDefaultsProfile.init(domainName:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v21 = a2;
  v22 = a1;
  v28 = sub_236BCF7AC();
  v26 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v27 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF318);
  MEMORY[0x24BDAC7A8](v4);
  v25 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_236BCF800();
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_236BCFC44();
  MEMORY[0x24BDAC7A8](v9);
  v10 = sub_236BCFC50();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_236BCF914();
  MEMORY[0x24BDAC7A8](v14);
  v15 = OBJC_IVAR____TtC18AudioAnalyticsBase23EmbeddedDefaultsProfile_notificationQueue;
  sub_236B97130();
  swift_retain();
  sub_236BCF908();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BEE5758], v10);
  v31 = MEMORY[0x24BEE4AF8];
  sub_236B9716C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDD8);
  sub_236B971B4();
  v16 = v21;
  sub_236BCFD10();
  *(_QWORD *)(v2 + v15) = sub_236BCFC74();
  *(_DWORD *)(v2 + OBJC_IVAR____TtC18AudioAnalyticsBase23EmbeddedDefaultsProfile_notificationToken) = 0;
  swift_release();
  v17 = v22;
  v31 = v22;
  v32 = v16;
  v29 = 0xD000000000000024;
  v30 = 0x8000000236BD5820;
  v29 = sub_236BCFAC4();
  v30 = v18;
  sub_236BCFA4C();
  v31 = v29;
  v32 = v30;
  if (v17 == 0xD000000000000012 && v16 == 0x8000000236BD5850)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = sub_236BCFF98();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
      sub_236BCFA58();
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v25, 1, 1, v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v27, *MEMORY[0x24BDCD7A0], v28);
  sub_236BCF7F4();
  DefaultsProfile.init(profile:)((uint64_t)v8);
  return v2;
}

uint64_t sub_236BA84A0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  void *v3;
  int *v4;
  _QWORD v6[6];

  v1 = swift_allocObject();
  swift_weakInit();
  v2 = *(NSObject **)(v0 + OBJC_IVAR____TtC18AudioAnalyticsBase23EmbeddedDefaultsProfile_notificationQueue);
  v6[4] = sub_236BA8B58;
  v6[5] = v1;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1107296256;
  v6[2] = sub_236BA86F8;
  v6[3] = &block_descriptor_0;
  v3 = _Block_copy(v6);
  swift_retain();
  swift_release();
  v4 = (int *)(v0 + OBJC_IVAR____TtC18AudioAnalyticsBase23EmbeddedDefaultsProfile_notificationToken);
  swift_beginAccess();
  notify_register_dispatch("com.apple.ManagedConfiguration.profileListChanged", v4, v2, v3);
  swift_endAccess();
  _Block_release(v3);
  return swift_release();
}

uint64_t sub_236BA85A8()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t ObjectType;

  if (qword_2542AFD10 != -1)
    swift_once();
  v0 = sub_236BCF8C0();
  __swift_project_value_buffer(v0, (uint64_t)qword_2542AFCF0);
  v1 = sub_236BCF8A8();
  v2 = sub_236BCFC20();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_236B83000, v1, v2, "Received profileChanged notification.", v3, 2u);
    MEMORY[0x23B7FE96C](v3, -1, -1);
  }

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    v6 = sub_236BA7ADC();
    if (MEMORY[0x23B7FE9D8](v5 + 16))
    {
      v7 = *(_QWORD *)(v5 + 24);
      ObjectType = swift_getObjectType();
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 + 8))(v6 & 1, ObjectType, v7);
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_236BA86F8(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t sub_236BA8734()
{
  uint64_t v0;
  int *v1;

  v1 = (int *)(v0 + OBJC_IVAR____TtC18AudioAnalyticsBase23EmbeddedDefaultsProfile_notificationToken);
  swift_beginAccess();
  return notify_cancel(*v1);
}

void EmbeddedDefaultsProfile.__allocating_init(profile:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void EmbeddedDefaultsProfile.init(profile:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_236BA87D4()
{
  uint64_t v0;

}

uint64_t EmbeddedDefaultsProfile.deinit()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (int *)(v0 + OBJC_IVAR____TtC18AudioAnalyticsBase23EmbeddedDefaultsProfile_notificationToken);
  swift_beginAccess();
  notify_cancel(*v1);
  sub_236BA896C(v0 + 16);
  swift_release();
  v2 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase15DefaultsProfile_profileURL;
  v3 = sub_236BCF800();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  v4 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase15DefaultsProfile_logger;
  v5 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  return v0;
}

uint64_t EmbeddedDefaultsProfile.__deallocating_deinit()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (int *)(v0 + OBJC_IVAR____TtC18AudioAnalyticsBase23EmbeddedDefaultsProfile_notificationToken);
  swift_beginAccess();
  notify_cancel(*v1);
  sub_236BA896C(v0 + 16);
  swift_release();
  v2 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase15DefaultsProfile_profileURL;
  v3 = sub_236BCF800();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  v4 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase15DefaultsProfile_logger;
  v5 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

  return swift_deallocClassInstance();
}

uint64_t sub_236BA896C(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t dispatch thunk of InterestedInDefaultsProfileProtocol.handleProfileChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_236BA8998()
{
  return type metadata accessor for DefaultsProfile(0);
}

uint64_t type metadata accessor for DefaultsProfile(uint64_t a1)
{
  return sub_236BA8A9C(a1, (uint64_t *)&unk_2542AF400);
}

uint64_t sub_236BA89B4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_236BCF800();
  if (v1 <= 0x3F)
  {
    result = sub_236BCF8C0();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for DefaultsProfile()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DefaultsProfile.__allocating_init(profile:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of DefaultsProfile.registerForProfileChangeCallback(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of DefaultsProfile.sync()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t sub_236BA8A80()
{
  return type metadata accessor for EmbeddedDefaultsProfile(0);
}

uint64_t type metadata accessor for EmbeddedDefaultsProfile(uint64_t a1)
{
  return sub_236BA8A9C(a1, (uint64_t *)&unk_2542AF860);
}

uint64_t sub_236BA8A9C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_236BA8AD0()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for EmbeddedDefaultsProfile()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of EmbeddedDefaultsProfile.__allocating_init(domainName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t sub_236BA8B34()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_236BA8B58()
{
  return sub_236BA85A8();
}

BOOL sub_236BA8B60(_BOOL8 result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = result;
  if (*(_BYTE *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 33; ; ++i)
  {
    v5 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    v6 = *(unsigned __int8 *)(a2 + i);
    result = v6 == v3;
    if (v6 == v3 || v5 == v2)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_236BA8BC4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = sub_236BCFF98();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_236BCFF98() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t static DefaultsUtilities.remove(key:applicationID:userName:)()
{
  return _s18AudioAnalyticsBase17DefaultsUtilitiesO3set5value3key13applicationID8userNameyyXlSg_S3StFZ_0(0);
}

id static DefaultsUtilities.setGeneric<A>(value:key:applicationID:userName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id result;

  result = sub_236BA8D3C(a1, a8);
  if (result)
  {
    _s18AudioAnalyticsBase17DefaultsUtilitiesO3set5value3key13applicationID8userNameyyXlSg_S3StFZ_0(result);
    return (id)swift_unknownObjectRelease();
  }
  return result;
}

id sub_236BA8D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14[2];
  uint64_t v15;
  _QWORD v16[4];

  v4 = *(_QWORD *)(a2 - 8);
  v5 = MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v14 - v8;
  if (!swift_dynamicCastMetatype()
    || ((*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, a1, a2), (swift_dynamicCast() & 1) == 0))
  {
    if (swift_dynamicCastMetatype()
      || (swift_conformsToProtocol2() ? (v11 = a2) : (v11 = 0),
          v11 && (swift_conformsToProtocol2() ? (v12 = a2) : (v12 = 0), v12)))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1, a2);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256442988);
      if ((swift_dynamicCast() & 1) != 0)
      {
        sub_236BA960C(v14, (uint64_t)v16);
        __swift_project_boxed_opaque_existential_1(v16, v16[3]);
        sub_236BCFF74();
        v10 = sub_236BCF998();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
        return (id)v10;
      }
      v15 = 0;
      memset(v14, 0, sizeof(v14));
      sub_236BA95CC((uint64_t)v14);
    }
    return 0;
  }
  return objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithBool_, LOBYTE(v16[0]));
}

uint64_t static DefaultsUtilities.mobile.getter()
{
  return 0x656C69626F6DLL;
}

uint64_t static DefaultsUtilities.root.getter()
{
  return 1953460082;
}

uint64_t sub_236BA8F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t result;
  _QWORD v6[2];

  v0 = sub_236BCFC50();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8]();
  v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_236BCFC44();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8]();
  sub_236BCF914();
  MEMORY[0x24BDAC7A8]();
  sub_236B97130();
  sub_236BCF8FC();
  v6[1] = MEMORY[0x24BEE4AF8];
  sub_236B9576C((unint64_t *)&qword_2542AFE60, v4, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDD8);
  sub_236BA9624((unint64_t *)&qword_2542AFDE0, &qword_2542AFDD8);
  sub_236BCFD10();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5750], v0);
  result = sub_236BCFC74();
  qword_2542AF708 = result;
  return result;
}

uint64_t sub_236BA9100()
{
  double v0;
  uint64_t v1;
  uint64_t result;

  if (qword_2542AFE20 != -1)
    swift_once();
  v0 = *(double *)&qword_2542AFE18 * 10.0;
  type metadata accessor for PeriodicClosure();
  v1 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFED8);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v1 + 16) = result;
  *(double *)(v1 + 24) = v0;
  off_2542AF6F8 = (_UNKNOWN *)v1;
  return result;
}

void sub_236BA91A0()
{
  void *v0;
  uint64_t v1;
  _BOOL4 v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;
  BOOL v7;

  if (qword_2542AF700 != -1)
    swift_once();
  v0 = off_2542AF6F8;
  v1 = *((_QWORD *)off_2542AF6F8 + 2);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  sub_236B87778((double *)(v1 + 16), (uint64_t)v0, &v7);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  v2 = v7;
  swift_release();
  if (v2)
  {
    CFPreferencesFlushCaches();
    if (qword_2542AFD58 != -1)
      swift_once();
    v3 = sub_236BCF8C0();
    __swift_project_value_buffer(v3, (uint64_t)qword_2542AFD38);
    oslog = sub_236BCF8A8();
    v4 = sub_236BCFC20();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_236B83000, oslog, v4, "Flushed CFPreferences in-memory cache.", v5, 2u);
      MEMORY[0x23B7FE96C](v5, -1, -1);
    }
    swift_release();

  }
  else
  {
    swift_release();
  }
}

uint64_t _s18AudioAnalyticsBase17DefaultsUtilitiesO3set5value3key13applicationID8userNameyyXlSg_S3StFZ_0(const void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD aBlock[6];

  v2 = sub_236BCF8E4();
  v15 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_236BCF914();
  v13 = *(_QWORD *)(v5 - 8);
  v14 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (__CFString *)sub_236BCF998();
  v9 = (__CFString *)sub_236BCF998();
  v10 = (__CFString *)sub_236BCF998();
  CFPreferencesSetValue(v8, a1, v9, v10, (CFStringRef)*MEMORY[0x24BDBD570]);

  if (qword_2542AF718 != -1)
    swift_once();
  aBlock[4] = sub_236B87774;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_236B87748;
  aBlock[3] = &block_descriptor_3;
  v11 = _Block_copy(aBlock);
  sub_236BCF8FC();
  v16 = MEMORY[0x24BEE4AF8];
  sub_236B9576C(&qword_2542AFD60, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDA8);
  sub_236BA9624((unint64_t *)&unk_2542AFDB0, &qword_2542AFDA8);
  sub_236BCFD10();
  MEMORY[0x23B7FDE08](0, v7, v4, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v14);
  return swift_release();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

ValueMetadata *type metadata accessor for DefaultsUtilities()
{
  return &type metadata for DefaultsUtilities;
}

uint64_t sub_236BA95CC(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442980);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_236BA960C(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_236BA9624(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE12C8], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static DeviceUtilities.currentPlatform.getter()
{
  return sub_236B9BEA8(&qword_2542AF5A0, &qword_2542AF590);
}

AudioAnalyticsBase::OperatingSystem_optional __swiftcall OperatingSystem.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  AudioAnalyticsBase::OperatingSystem_optional result;
  char v5;

  v2 = v1;
  v3 = sub_236BCFE60();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t OperatingSystem.platforms.getter()
{
  return swift_bridgeObjectRetain();
}

void *static OperatingSystem.allCases.getter()
{
  return &unk_250827E20;
}

char *_s18AudioAnalyticsBase13SystemUtilityC10debugErrnoSSyFZ_0()
{
  int v0;
  char *result;

  v0 = MEMORY[0x23B7FDA6C]();
  result = strerror(v0);
  if (result)
  {
    sub_236BCFA64();
    sub_236BCFD4C();
    swift_bridgeObjectRelease();
    sub_236BCFF74();
    sub_236BCFA58();
    swift_bridgeObjectRelease();
    sub_236BCFA58();
    sub_236BCFA58();
    swift_bridgeObjectRelease();
    return (char *)0x3D6F6E727265;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static DeviceUtilities.isInLowPower()()
{
  unsigned __int8 v1;

  if (qword_2542AFFB0 != -1)
    swift_once();
  sub_236BCFC5C();
  return v1;
}

void sub_236BA9870(_BYTE *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  BOOL v5;
  id v6;
  unsigned __int8 v7;
  BOOL v8;

  if (qword_2542AFFC8 != -1)
    swift_once();
  v3 = off_2542AFFF8;
  v4 = *((_QWORD *)off_2542AFFF8 + 2);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  sub_236B87778((double *)(v4 + 16), (uint64_t)v3, &v8);
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
    v5 = v8;
    swift_release();
    if (v5)
    {
      v6 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
      v7 = objc_msgSend(v6, sel_isLowPowerModeEnabled);

      byte_2542AFFB8 = v7;
    }
    swift_release();
    *a1 = byte_2542AFFB8;
  }
}

uint64_t static DeviceUtilities.thermalState()()
{
  uint64_t v1;

  if (qword_2542AFFB0 != -1)
    swift_once();
  type metadata accessor for ThermalState(0);
  sub_236BCFC5C();
  return v1;
}

void sub_236BA9A10(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  BOOL v5;
  id v6;
  id v7;
  BOOL v8;

  if (qword_2542AFFF0 != -1)
    swift_once();
  v3 = off_2542AFFE8;
  v4 = *((_QWORD *)off_2542AFFE8 + 2);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 24));
  sub_236B87778((double *)(v4 + 16), (uint64_t)v3, &v8);
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 24));
    v5 = v8;
    swift_release();
    if (v5)
    {
      v6 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
      v7 = objc_msgSend(v6, sel_thermalState);

      qword_2542AFF98 = (uint64_t)v7;
    }
    swift_release();
    *a1 = qword_2542AFF98;
  }
}

uint64_t static DeviceUtilities.thermalStateString(from:)(uint64_t a1)
{
  uint64_t result;

  result = 1919508838;
  switch(a1)
  {
    case 0:
      result = 0x6C616E696D6F6ELL;
      break;
    case 1:
      return result;
    case 2:
      result = 0x73756F69726573;
      break;
    case 3:
      result = 0x6C61636974697263;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_236BA9BC0()
{
  char v0;
  uint64_t result;
  _BYTE v2[24];
  ValueMetadata *v3;
  unint64_t v4;

  v3 = &type metadata for DeviceUtilities.Features;
  v4 = sub_236BAB9A4();
  v0 = sub_236BCF884();
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  byte_2542AF538 = v0 & 1;
  return result;
}

void sub_236BA9C14()
{
  word_2542AF1B0 = 0;
  qword_2542AF190 = 0xD000000000000017;
  *(_QWORD *)algn_2542AF198 = 0x8000000236BD5A30;
  qword_2542AF1A0 = 0xD00000000000001FLL;
  unk_2542AF1A8 = 0x8000000236BD59C0;
}

uint64_t static DeviceUtilities.isGlitchTailspinEnabled.getter()
{
  char v0;
  char v1;
  char v2;

  if (qword_2542AF1C0 != -1)
    swift_once();
  swift_beginAccess();
  v0 = sub_236B8825C();
  if (v0 == 2)
    v1 = HIBYTE(word_2542AF1B0);
  else
    v1 = v0 & 1;
  if (v0 == 2)
    v2 = HIBYTE(word_2542AF1B0);
  else
    v2 = v0;
  LOBYTE(word_2542AF1B0) = v1;
  swift_endAccess();
  return v2 & 1;
}

void sub_236BA9D00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (qword_2542AF188 != -1)
    swift_once();
  if (byte_2542AF5AE[0] == 1 && (v0 = sub_236B86CF0(), v1))
  {
    v2 = v0;
    v3 = v1;
    if (v0 == 0x7972726163 && v1 == 0xE500000000000000
      || (sub_236BCFF98() & 1) != 0
      || v2 == 0x756F62616B6C6177 && v3 == 0xE900000000000074)
    {
      v4 = 1;
    }
    else
    {
      v4 = sub_236BCFF98();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  byte_2542B001A = v4 & 1;
}

uint64_t static DeviceUtilities.isCarryDevice.getter()
{
  return sub_236B84FA4(&qword_2542AF558, (unsigned __int8 *)&byte_2542B001A);
}

void sub_236BA9E84(uint64_t a1)
{
  sub_236BA9EE8(a1, 0x6363416F69647541, 0xEE0079726F737365, byte_256442993);
}

uint64_t static DeviceUtilities.isHomePod.getter()
{
  return sub_236B84FA4(&qword_2564425F0, byte_256442993);
}

void sub_236BA9ECC(uint64_t a1)
{
  sub_236BA9EE8(a1, 0x656E6F685069, 0xE600000000000000, byte_2542AF5FC);
}

void sub_236BA9EE8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v5;
  void *v6;
  id v7;
  char v8;

  v5 = (id)MobileGestalt_get_current_device();
  if (v5)
  {
    v6 = v5;
    v7 = (id)MobileGestalt_copy_deviceClass_obj();

    if (v7)
    {
      sub_236BCF9BC();

      sub_236B8D9A0();
      v8 = sub_236BCFCF8();
      swift_bridgeObjectRelease();
      *a4 = v8 & 1;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_236BA9FAC()
{
  id v0;
  void *v1;
  int deviceClassNumber;

  v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    v1 = v0;
    deviceClassNumber = MobileGestalt_get_deviceClassNumber();

    byte_256442995 = deviceClassNumber == 11;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static DeviceUtilities.isVision.getter()
{
  return sub_236B84FA4(qword_2542AFFA0, (unsigned __int8 *)&byte_256442995);
}

void sub_236BAA014()
{
  id v0;
  void *v1;
  int internalBuild;
  char v3;
  char v4;
  _BYTE v5[24];
  ValueMetadata *v6;
  unint64_t v7;

  v0 = (id)MobileGestalt_get_current_device();
  if (v0)
  {
    v1 = v0;
    internalBuild = MobileGestalt_get_internalBuild();

    if (internalBuild)
    {
      v6 = &type metadata for AudioAnalytics;
      v7 = sub_236BAB960();
      v3 = sub_236BCF884();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
      v4 = v3 ^ 1;
    }
    else
    {
      v4 = 0;
    }
    byte_2542AF5AE = v4 & 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_236BAA09C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_236BAA0BC();
  qword_2542AF590 = result;
  *(_QWORD *)algn_2542AF598 = v1;
  return result;
}

uint64_t sub_236BAA0BC()
{
  uint64_t result;
  void *v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  result = (uint64_t)(id)MobileGestalt_get_current_device();
  if (result)
  {
    v1 = (void *)result;
    v2 = (id)MobileGestalt_copy_deviceName_obj();

    if (v2)
    {
      v3 = sub_236BCF9BC();
      v5 = v4;

      if (qword_2542AF618 != -1)
        swift_once();
      if ((sub_236BA433C(v3, v5, (uint64_t)off_2542AF610) & 1) == 0)
      {
        if (qword_2542AFD58 != -1)
          swift_once();
        v6 = sub_236BCF8C0();
        __swift_project_value_buffer(v6, (uint64_t)qword_2542AFD38);
        swift_bridgeObjectRetain();
        v7 = sub_236BCF8A8();
        v8 = sub_236BCFC2C();
        if (os_log_type_enabled(v7, v8))
        {
          v9 = (uint8_t *)swift_slowAlloc();
          v10 = swift_slowAlloc();
          v15 = v10;
          *(_DWORD *)v9 = 136380675;
          swift_bridgeObjectRetain();
          sub_236B93FB0(v3, v5, &v15);
          sub_236BCFCC8();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_236B83000, v7, v8, "Unknown platform. Defaulting to iPhone. { platform=%{private}s }", v9, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x23B7FE96C](v10, -1, -1);
          MEMORY[0x23B7FE96C](v9, -1, -1);

          return 0x656E6F685069;
        }
        else
        {
          v3 = 0x656E6F685069;

          swift_bridgeObjectRelease_n();
        }
      }
    }
    else
    {
      if (qword_2542AFD58 != -1)
        swift_once();
      v3 = 0x656E6F685069;
      v11 = sub_236BCF8C0();
      __swift_project_value_buffer(v11, (uint64_t)qword_2542AFD38);
      v12 = sub_236BCF8A8();
      v13 = sub_236BCFC2C();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_236B83000, v12, v13, "MobileGestalt.current.deviceName returned nil. Defaulting to iPhone.", v14, 2u);
        MEMORY[0x23B7FE96C](v14, -1, -1);
      }

    }
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_236BAA3B4(uint64_t a1)
{
  sub_236BAA474(a1, MEMORY[0x24BED8528], &qword_256442998, &qword_2564429A0);
}

uint64_t static DeviceUtilities.marketingProductName.getter()
{
  return sub_236B9BEA8(&qword_2564425F8, &qword_256442998);
}

void sub_236BAA3EC(uint64_t a1)
{
  sub_236BAA474(a1, MEMORY[0x24BED8548], &qword_2564429A8, &qword_2564429B0);
}

uint64_t static DeviceUtilities.productType.getter()
{
  return sub_236B9BEA8(&qword_256442600, &qword_2564429A8);
}

void sub_236BAA424(uint64_t a1)
{
  sub_236BAA474(a1, MEMORY[0x24BED8550], &qword_2564429B8, &qword_2564429C0);
}

uint64_t static DeviceUtilities.productVersion.getter()
{
  return sub_236B9BEA8(qword_256442608, &qword_2564429B8);
}

void sub_236BAA45C(uint64_t a1)
{
  sub_236BAA474(a1, MEMORY[0x24BED84E8], &qword_2542AF560, algn_2542AF568);
}

void sub_236BAA474(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, _QWORD *a4)
{
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = (id)MobileGestalt_get_current_device();
  if (v7)
  {
    v8 = v7;
    v9 = (id)a2();

    if (v9)
    {
      v10 = sub_236BCF9BC();
      v12 = v11;

      *a3 = v10;
      *a4 = v12;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static DeviceUtilities.buildVersion.getter()
{
  return sub_236B9BEA8(&qword_2542AF570, &qword_2542AF560);
}

void sub_236BAA518(uint64_t a1)
{
  sub_236BAA58C(a1, MEMORY[0x24BED8630], byte_2564429C8);
}

uint64_t static DeviceUtilities.isVirtualDevice.getter()
{
  return sub_236B84FA4(qword_256442618, byte_2564429C8);
}

void sub_236BAA548(uint64_t a1)
{
  sub_236BAA58C(a1, MEMORY[0x24BED85E0], byte_2542AF5B1);
}

uint64_t static DeviceUtilities.supportsHaptics.getter()
{
  return sub_236B84FA4(&qword_2542AF5C0, byte_2542AF5B1);
}

void sub_236BAA578(uint64_t a1)
{
  sub_236BAA58C(a1, MEMORY[0x24BED8628], byte_2564429CA);
}

void sub_236BAA58C(uint64_t a1, uint64_t (*a2)(void), _BYTE *a3)
{
  id v5;
  void *v6;
  char v7;

  v5 = (id)MobileGestalt_get_current_device();
  if (v5)
  {
    v6 = v5;
    v7 = a2();

    *a3 = v7;
  }
  else
  {
    __break(1u);
  }
}

uint64_t static DeviceUtilities.isUIBuild.getter()
{
  return sub_236B84FA4(&qword_256442628, byte_2564429CA);
}

uint64_t sub_236BAA5F8()
{
  uint64_t result;

  if (qword_2542AF188 != -1)
    result = swift_once();
  byte_2542AF58B = byte_2542AF5AE[0];
  return result;
}

uint64_t static DeviceUtilities.internalOsInt.getter()
{
  if (qword_2542AF580 != -1)
    swift_once();
  swift_beginAccess();
  return byte_2542AF58B;
}

uint64_t static DeviceUtilities.internalOsInt.setter(char a1)
{
  uint64_t result;

  if (qword_2542AF580 != -1)
    swift_once();
  result = swift_beginAccess();
  byte_2542AF58B = a1;
  return result;
}

uint64_t (*static DeviceUtilities.internalOsInt.modify())()
{
  if (qword_2542AF580 != -1)
    swift_once();
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t static DeviceUtilities.deviceNameXrOS.getter()
{
  return 1397715576;
}

uint64_t sub_236BAA790()
{
  void *v0;
  uint64_t result;

  v0 = (void *)sub_236BB1DE8((uint64_t)&unk_250826758);
  result = swift_arrayDestroy();
  off_2542AF610 = v0;
  return result;
}

uint64_t static DeviceUtilities.platforms.getter()
{
  if (qword_2542AF618 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t static DeviceUtilities.currentOperatingSystem.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_beginAccess();
  *a1 = byte_2542B0040;
  return result;
}

uint64_t static DeviceUtilities.currentOperatingSystem.setter(char *a1)
{
  char v1;
  uint64_t result;

  v1 = *a1;
  result = swift_beginAccess();
  byte_2542B0040 = v1;
  return result;
}

uint64_t (*static DeviceUtilities.currentOperatingSystem.modify())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

const char *sub_236BAA8EC()
{
  return "CoreAudioServices";
}

const char *sub_236BAA900()
{
  return "audiomxd";
}

uint64_t sub_236BAA914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v0 = sub_236BCFC50();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_236BCFC44();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_236BCF914();
  MEMORY[0x24BDAC7A8](v5);
  sub_236B97130();
  sub_236BCF8FC();
  v7[1] = MEMORY[0x24BEE4AF8];
  sub_236B9716C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDD8);
  sub_236B8D728((unint64_t *)&qword_2542AFDE0, &qword_2542AFDD8, MEMORY[0x24BEE12C8]);
  sub_236BCFD10();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5750], v0);
  result = sub_236BCFC74();
  qword_2542AFFE0 = result;
  return result;
}

uint64_t sub_236BAAABC()
{
  double v0;
  uint64_t v1;
  uint64_t result;

  if (qword_2542AF288 != -1)
    swift_once();
  v0 = qword_2542AFE28[0] * 5.0;
  type metadata accessor for PeriodicClosure();
  v1 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFED8);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v1 + 16) = result;
  *(double *)(v1 + 24) = v0;
  off_2542AFFF8 = (_UNKNOWN *)v1;
  return result;
}

uint64_t sub_236BAAB5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (qword_2542AF288 != -1)
    swift_once();
  v0 = qword_2542AFE28;
  type metadata accessor for PeriodicClosure();
  v1 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFED8);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v1 + 16) = result;
  *(_QWORD *)(v1 + 24) = v0;
  off_2542AFFE8 = (_UNKNOWN *)v1;
  return result;
}

uint64_t sub_236BAABF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_236BCF8C0();
  __swift_allocate_value_buffer(v0, qword_2542AF5C8);
  v1 = __swift_project_value_buffer(v0, (uint64_t)qword_2542AF5C8);
  if (qword_2542AFD58 != -1)
    swift_once();
  v2 = __swift_project_value_buffer(v0, (uint64_t)qword_2542AFD38);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t OperatingSystem.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236BAACAC + 4 * byte_236BD1C44[*v0]))(5459817, 0xE300000000000000);
}

uint64_t sub_236BAACAC()
{
  return 0x534F6863746177;
}

uint64_t sub_236BAACC4()
{
  return 1397716596;
}

uint64_t sub_236BAACD8()
{
  return 0x534F63616DLL;
}

uint64_t sub_236BAACEC()
{
  return 1397715576;
}

void sub_236BAACFC(char *a1)
{
  sub_236BCA960(*a1);
}

void sub_236BAAD08()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_236BD0028();
  __asm { BR              X9 }
}

uint64_t sub_236BAAD4C()
{
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

void sub_236BAADC4()
{
  __asm { BR              X10 }
}

uint64_t sub_236BAADF8()
{
  sub_236BCFA34();
  return swift_bridgeObjectRelease();
}

void sub_236BAAE5C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_236BD0028();
  __asm { BR              X9 }
}

uint64_t sub_236BAAE9C()
{
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

AudioAnalyticsBase::OperatingSystem_optional sub_236BAAF14(Swift::String *a1)
{
  return OperatingSystem.init(rawValue:)(*a1);
}

uint64_t sub_236BAAF20()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_236BAAF48 + 4 * byte_236BD1C58[*v0]))();
}

void sub_236BAAF48(_QWORD *a1@<X8>)
{
  *a1 = 0x534F6863746177;
  a1[1] = 0xE700000000000000;
}

void sub_236BAAF64(_QWORD *a1@<X8>)
{
  *a1 = 1397716596;
  a1[1] = 0xE400000000000000;
}

void sub_236BAAF7C(_QWORD *a1@<X8>)
{
  *a1 = 0x534F63616DLL;
  a1[1] = 0xE500000000000000;
}

void sub_236BAAF94(_QWORD *a1@<X8>)
{
  *a1 = 1397715576;
  a1[1] = 0xE400000000000000;
}

void sub_236BAAFA8(_QWORD *a1@<X8>)
{
  *a1 = &unk_250827EB8;
}

uint64_t sub_236BAAFB8()
{
  sub_236BD0028();
  sub_236BD0034();
  return sub_236BD0064();
}

uint64_t sub_236BAAFF8()
{
  return sub_236BD0034();
}

uint64_t sub_236BAB01C()
{
  sub_236BD0028();
  sub_236BD0034();
  return sub_236BD0064();
}

const char *sub_236BAB058()
{
  return "AudioAnalytics";
}

const char *sub_236BAB06C()
{
  return "SimulateCustomer";
}

BOOL _s18AudioAnalyticsBase15DeviceUtilitiesO17hasRootsInstalledSbyFZ_0()
{
  int v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  size_t v14;
  _QWORD v15[4];
  uint64_t v16[4];

  v16[3] = *MEMORY[0x24BDAC8D0];
  v14 = 8;
  v15[0] = 0;
  v0 = sysctlbyname("kern.roots_installed", v15, &v14, 0, 0);
  if (v0 == sub_236BCF8D8())
  {
    if (qword_2542AF5E8 != -1)
      swift_once();
    v1 = sub_236BCF8C0();
    __swift_project_value_buffer(v1, (uint64_t)qword_2542AF5C8);
    v2 = sub_236BCF8A8();
    v3 = sub_236BCFC38();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v4 = 134217984;
      swift_beginAccess();
      v16[0] = v15[0];
      sub_236BCFCC8();
      _os_log_impl(&dword_236B83000, v2, v3, "Installed root info %llu", v4, 0xCu);
      MEMORY[0x23B7FE96C](v4, -1, -1);
    }

    swift_beginAccess();
    return v15[0] != 0;
  }
  else
  {
    v6 = _s18AudioAnalyticsBase13SystemUtilityC10debugErrnoSSyFZ_0();
    v8 = v7;
    if (qword_2542AF5E8 != -1)
      swift_once();
    v9 = sub_236BCF8C0();
    __swift_project_value_buffer(v9, (uint64_t)qword_2542AF5C8);
    swift_bridgeObjectRetain();
    v10 = sub_236BCF8A8();
    v11 = sub_236BCFC2C();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v16[0] = v13;
      *(_DWORD *)v12 = 136380675;
      swift_bridgeObjectRetain();
      v15[1] = sub_236B93FB0((uint64_t)v6, v8, v16);
      sub_236BCFCC8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_236B83000, v10, v11, "hasRootsInstalled(): Unable to query kern.roots_installed { %{private}s }", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v13, -1, -1);
      MEMORY[0x23B7FE96C](v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
}

uint64_t sub_236BAB398(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = result;
    v3 = *(unsigned __int8 *)(result + 32);
    result += 32;
    if (!v3)
      return sub_236BCFA1C();
    v4 = 0;
    v5 = v1 - 1;
    v6 = v2 + 33;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v6 + v4++))
        return sub_236BCFA1C();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _s18AudioAnalyticsBase15DeviceUtilitiesO10hasSerial3SbyFZ_0()
{
  int v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint64_t v16;
  size_t v18;
  uint64_t v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v0 = sysctlbyname("kern.bootargs", 0, &v18, 0, 0);
  if (v0 != sub_236BCF8D8())
  {
    if (qword_2542AF5E8 != -1)
      swift_once();
    v7 = sub_236BCF8C0();
    __swift_project_value_buffer(v7, (uint64_t)qword_2542AF5C8);
    v8 = sub_236BCF8A8();
    v9 = sub_236BCFC2C();
    if (!os_log_type_enabled(v8, v9))
      goto LABEL_15;
    v10 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v10 = 67174657;
    LODWORD(v19[0]) = v0;
    sub_236BCFCC8();
    _os_log_impl(&dword_236B83000, v8, v9, "hasSerial3(): kern.bootargs getsize failed. { result=%{private}d }", v10, 8u);
LABEL_14:
    MEMORY[0x23B7FE96C](v10, -1, -1);
LABEL_15:

LABEL_16:
    v6 = 0;
    return v6 & 1;
  }
  v1 = sub_236BC893C(0, v18);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v1 = (uint64_t)sub_236BCA098(v1);
  v2 = sysctlbyname("kern.bootargs", (void *)(v1 + 32), &v18, 0, 0);
  if (v2 != sub_236BCF8D8())
  {
    swift_bridgeObjectRelease();
    v11 = _s18AudioAnalyticsBase13SystemUtilityC10debugErrnoSSyFZ_0();
    v13 = v12;
    if (qword_2542AF5E8 != -1)
      swift_once();
    v14 = sub_236BCF8C0();
    __swift_project_value_buffer(v14, (uint64_t)qword_2542AF5C8);
    swift_bridgeObjectRetain();
    v8 = sub_236BCF8A8();
    v15 = sub_236BCFC2C();
    if (!os_log_type_enabled(v8, v15))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_16;
    }
    v10 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v19[0] = v16;
    *(_DWORD *)v10 = 136380675;
    swift_bridgeObjectRetain();
    sub_236B93FB0((uint64_t)v11, v13, v19);
    sub_236BCFCC8();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_236B83000, v8, v15, "hasSerial3(): kern.bootargs failed. { %{private}s }", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B7FE96C](v16, -1, -1);
    goto LABEL_14;
  }
  v3 = sub_236BAB398(v1);
  v5 = v4;
  swift_bridgeObjectRelease();
  v19[0] = v3;
  v19[1] = v5;
  sub_236B8D9A0();
  v6 = sub_236BCFCF8();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

void sub_236BAB768(_BYTE *a1@<X8>)
{
  sub_236BA9870(a1);
}

void sub_236BAB77C(_QWORD *a1@<X8>)
{
  sub_236BA9A10(a1);
}

unint64_t sub_236BAB794()
{
  unint64_t result;

  result = qword_2564429D0;
  if (!qword_2564429D0)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for OperatingSystem, &type metadata for OperatingSystem);
    atomic_store(result, (unint64_t *)&qword_2564429D0);
  }
  return result;
}

uint64_t sub_236BAB7D8()
{
  return sub_236B8D728(&qword_2564429D8, &qword_2564429E0, MEMORY[0x24BEE12E0]);
}

ValueMetadata *type metadata accessor for DeviceUtilities()
{
  return &type metadata for DeviceUtilities;
}

uint64_t getEnumTagSinglePayload for OperatingSystem(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for OperatingSystem(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_236BAB8F0 + 4 * byte_236BD1C62[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_236BAB924 + 4 * byte_236BD1C5D[v4]))();
}

uint64_t sub_236BAB924(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BAB92C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BAB934);
  return result;
}

uint64_t sub_236BAB940(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BAB948);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_236BAB94C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BAB954(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

unint64_t sub_236BAB960()
{
  unint64_t result;

  result = qword_2542AF320;
  if (!qword_2542AF320)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD1EA0, &type metadata for AudioAnalytics);
    atomic_store(result, (unint64_t *)&qword_2542AF320);
  }
  return result;
}

unint64_t sub_236BAB9A4()
{
  unint64_t result;

  result = qword_2542AF5F0;
  if (!qword_2542AF5F0)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD1E70, &type metadata for DeviceUtilities.Features);
    atomic_store(result, &qword_2542AF5F0);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

ValueMetadata *type metadata accessor for DeviceUtilities.Features()
{
  return &type metadata for DeviceUtilities.Features;
}

uint64_t _s18AudioAnalyticsBase15DeviceUtilitiesO8FeaturesOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_236BABA80 + 4 * byte_236BD1C67[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_236BABAA0 + 4 * byte_236BD1C6C[v4]))();
}

_BYTE *sub_236BABA80(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_236BABAA0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_236BABAA8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_236BABAB0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_236BABAB8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_236BABAC0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AudioAnalytics()
{
  return &type metadata for AudioAnalytics;
}

unint64_t sub_236BABAE0()
{
  unint64_t result;

  result = qword_2564429E8;
  if (!qword_2564429E8)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD1DE0, &type metadata for AudioAnalytics);
    atomic_store(result, (unint64_t *)&qword_2564429E8);
  }
  return result;
}

unint64_t sub_236BABB28()
{
  unint64_t result;

  result = qword_2564429F0;
  if (!qword_2564429F0)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD1E48, &type metadata for DeviceUtilities.Features);
    atomic_store(result, (unint64_t *)&qword_2564429F0);
  }
  return result;
}

Swift::Double __swiftcall Double.rounded(toPlaces:)(Swift::Int toPlaces)
{
  double v1;
  double v2;
  double v3;

  v2 = v1;
  v3 = __exp10((double)toPlaces);
  return round(v3 * v2) / v3;
}

uint8_t *static EncryptionUtilities.decrypt(data:)(uint64_t a1, uint8_t *a2)
{
  uint64_t v2;
  __SecKey *v4;
  __SecKey *v5;

  v4 = (__SecKey *)sub_236BAC610(0xD000000000000084, 0x8000000236BD53D0, (uint8_t *)1);
  if (!v2)
  {
    v5 = v4;
    a2 = sub_236BAC9F4(v4);

  }
  return a2;
}

BOOL static EncryptionError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t EncryptionError.hash(into:)()
{
  return sub_236BD0034();
}

uint64_t EncryptionError.hashValue.getter()
{
  sub_236BD0028();
  sub_236BD0034();
  return sub_236BD0064();
}

BOOL sub_236BABCA4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_236BABCB8()
{
  sub_236BD0028();
  sub_236BD0034();
  return sub_236BD0064();
}

uint64_t sub_236BABCFC()
{
  return sub_236BD0034();
}

uint64_t sub_236BABD24()
{
  sub_236BD0028();
  sub_236BD0034();
  return sub_236BD0064();
}

SecKeyRef static EncryptionUtilities.buildPrivateKey()()
{
  uint64_t inited;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  const __CFDictionary *v6;
  SecKeyRef RandomKey;
  CFErrorRef v8;
  CFErrorRef *v9;
  _BYTE *v10;
  CFErrorRef v12[18];

  v12[17] = *(CFErrorRef *)MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF68);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_236BD1EE0;
  *(_QWORD *)(inited + 32) = sub_236BCF9BC();
  *(_QWORD *)(inited + 40) = v1;
  if (qword_2542AF720 != -1)
    swift_once();
  v2 = (void *)qword_2542B0F60;
  type metadata accessor for CFString(0);
  *(_QWORD *)(inited + 72) = v3;
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 80) = sub_236BCF9BC();
  *(_QWORD *)(inited + 88) = v4;
  *(_QWORD *)(inited + 120) = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 96) = 256;
  v5 = v2;
  sub_236B92D84(inited);
  v12[0] = 0;
  v6 = (const __CFDictionary *)sub_236BCF920();
  swift_bridgeObjectRelease();
  RandomKey = SecKeyCreateRandomKey(v6, v12);

  if (!RandomKey)
  {
    v8 = v12[0];
    if (v12[0])
    {
      type metadata accessor for CFError(0);
      sub_236BACCAC();
      swift_allocError();
      *v9 = v8;
    }
    else
    {
      sub_236BACCF4();
      swift_allocError();
      *v10 = 0;
    }
    swift_willThrow();
  }
  return RandomKey;
}

SecKeyRef static EncryptionUtilities.getPublicKey(privateKey:)(__SecKey *a1)
{
  SecKeyRef v1;
  _BYTE *v2;

  v1 = SecKeyCopyPublicKey(a1);
  if (!v1)
  {
    sub_236BACCF4();
    swift_allocError();
    *v2 = 0;
    swift_willThrow();
  }
  return v1;
}

uint8_t *static EncryptionUtilities.getBase64(fromKey:)(__SecKey *a1)
{
  CFDataRef v1;
  CFDataRef v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  __CFError *v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v16[3];
  CFErrorRef error[2];

  error[1] = *(CFErrorRef *)MEMORY[0x24BDAC8D0];
  error[0] = 0;
  v1 = SecKeyCopyExternalRepresentation(a1, error);
  if (v1)
  {
    v2 = v1;
    v3 = sub_236BCF83C();
    v5 = v4;
    v6 = (uint8_t *)sub_236BCF830();
    sub_236B9E0F0(v3, v5);

  }
  else
  {
    if (qword_2542AF268 != -1)
      swift_once();
    v7 = sub_236BCF8C0();
    v6 = (uint8_t *)__swift_project_value_buffer(v7, (uint64_t)qword_2542AF248);
    v8 = sub_236BCF8A8();
    v9 = sub_236BCFC2C();
    if (os_log_type_enabled(v8, v9))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v16[0] = v10;
      *(_DWORD *)v6 = 136380675;
      swift_beginAccess();
      if (error[0])
        v11 = error[0];
      __swift_instantiateConcreteTypeFromMangledName(&qword_256442A08);
      v12 = sub_236BCF9EC();
      sub_236B93FB0(v12, v13, v16);
      sub_236BCFCC8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_236B83000, v8, v9, "EncryptionUtilities: Failed in getBase64_fromKey: %{private}s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v10, -1, -1);
      MEMORY[0x23B7FE96C](v6, -1, -1);
    }

    swift_beginAccess();
    if (error[0])

    sub_236BACCF4();
    swift_allocError();
    *v14 = 2;
    swift_willThrow();
  }
  return v6;
}

uint8_t *static EncryptionUtilities.getKey(fromBase64:isPrivateKey:)(uint64_t a1, uint64_t a2, uint8_t *a3)
{
  return sub_236BAC610(a1, a2, a3);
}

const __CFData *static EncryptionUtilities.encryptToData(privateKey:data:)(__SecKey *a1, uint64_t a2, const __CFData *a3)
{
  SecKeyRef v4;
  __SecKey *v5;
  const __CFString *v6;
  CFDataRef EncryptedData;
  _BYTE *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  __CFError *v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v18[3];
  CFErrorRef error[2];

  error[1] = *(CFErrorRef *)MEMORY[0x24BDAC8D0];
  v4 = SecKeyCopyPublicKey(a1);
  if (v4)
  {
    v5 = v4;
    error[0] = 0;
    if (qword_2542AF728 != -1)
      swift_once();
    v6 = (const __CFString *)qword_2542B0F68;
    a3 = (const __CFData *)sub_236BCF824();
    EncryptedData = SecKeyCreateEncryptedData(v5, v6, a3, error);

    if (EncryptedData)
    {
      a3 = (const __CFData *)sub_236BCF83C();

    }
    else
    {
      if (qword_2542AF268 != -1)
        swift_once();
      v9 = sub_236BCF8C0();
      __swift_project_value_buffer(v9, (uint64_t)qword_2542AF248);
      v10 = sub_236BCF8A8();
      v11 = sub_236BCFC2C();
      if (os_log_type_enabled(v10, v11))
      {
        a3 = (const __CFData *)swift_slowAlloc();
        v12 = swift_slowAlloc();
        v18[0] = v12;
        *(_DWORD *)a3 = 136380675;
        swift_beginAccess();
        if (error[0])
          v13 = error[0];
        __swift_instantiateConcreteTypeFromMangledName(&qword_256442A08);
        v14 = sub_236BCF9EC();
        sub_236B93FB0(v14, v15, v18);
        sub_236BCFCC8();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_236B83000, v10, v11, "EncryptionUtilities: Failed in encryptToBase64String: %{private}s", (uint8_t *)a3, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B7FE96C](v12, -1, -1);
        MEMORY[0x23B7FE96C](a3, -1, -1);
      }

      swift_beginAccess();
      if (error[0])

      sub_236BACCF4();
      swift_allocError();
      *v16 = 4;
      swift_willThrow();

    }
  }
  else
  {
    sub_236BACCF4();
    swift_allocError();
    *v8 = 0;
    swift_willThrow();
  }
  return a3;
}

__SecKey *static EncryptionUtilities.decryptToData(privateKey:base64String:)(__SecKey *a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;

  v2 = sub_236BCF818();
  if (v3 >> 60 == 15)
  {
    sub_236BACCF4();
    swift_allocError();
    *v4 = 2;
    swift_willThrow();
  }
  else
  {
    v5 = v2;
    v6 = v3;
    a1 = (__SecKey *)sub_236BAC9F4(a1);
    sub_236BACD38(v5, v6);
  }
  return a1;
}

uint8_t *static EncryptionUtilities.decryptToData(privateKey:data:)(__SecKey *a1)
{
  return sub_236BAC9F4(a1);
}

id sub_236BAC5C4()
{
  qword_2542B0F60 = *MEMORY[0x24BDE9058];
  return (id)qword_2542B0F60;
}

id sub_236BAC5DC()
{
  qword_2542B0F68 = *MEMORY[0x24BDE92E0];
  return (id)qword_2542B0F68;
}

unint64_t static EncryptionUtilities.defaultPrivateKeyBase64.getter()
{
  return 0xD000000000000084;
}

uint8_t *sub_236BAC610(uint64_t a1, uint64_t a2, uint8_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t inited;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  const __CFData *v18;
  const __CFDictionary *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  __CFError *v24;
  uint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v29[3];
  CFErrorRef error[3];

  error[1] = *(CFErrorRef *)MEMORY[0x24BDAC8D0];
  v4 = sub_236BCF818();
  if (v5 >> 60 == 15)
  {
    sub_236BACCF4();
    swift_allocError();
    *v6 = 2;
    swift_willThrow();
  }
  else
  {
    v7 = v4;
    v8 = v5;
    error[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF68);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_236BD1370;
    *(_QWORD *)(inited + 32) = sub_236BCF9BC();
    *(_QWORD *)(inited + 40) = v10;
    if (qword_2542AF720 != -1)
      swift_once();
    v11 = (void *)qword_2542B0F60;
    type metadata accessor for CFString(0);
    *(_QWORD *)(inited + 72) = v12;
    *(_QWORD *)(inited + 48) = v11;
    *(_QWORD *)(inited + 80) = sub_236BCF9BC();
    *(_QWORD *)(inited + 88) = v13;
    *(_QWORD *)(inited + 120) = MEMORY[0x24BEE1768];
    *(_QWORD *)(inited + 96) = 256;
    *(_QWORD *)(inited + 128) = sub_236BCF9BC();
    *(_QWORD *)(inited + 136) = v14;
    v15 = sub_236BCF9BC();
    *(_QWORD *)(inited + 168) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 144) = v15;
    *(_QWORD *)(inited + 152) = v16;
    v17 = v11;
    sub_236B92D84(inited);
    v18 = (const __CFData *)sub_236BCF824();
    v19 = (const __CFDictionary *)sub_236BCF920();
    swift_bridgeObjectRelease();
    a3 = (uint8_t *)SecKeyCreateWithData(v18, v19, error);

    if (a3)
    {
      sub_236BACD38(v7, v8);
    }
    else
    {
      if (qword_2542AF268 != -1)
        swift_once();
      v20 = sub_236BCF8C0();
      __swift_project_value_buffer(v20, (uint64_t)qword_2542AF248);
      v21 = sub_236BCF8A8();
      v22 = sub_236BCFC2C();
      if (os_log_type_enabled(v21, v22))
      {
        a3 = (uint8_t *)swift_slowAlloc();
        v23 = swift_slowAlloc();
        v29[0] = v23;
        *(_DWORD *)a3 = 136380675;
        swift_beginAccess();
        if (error[0])
          v24 = error[0];
        __swift_instantiateConcreteTypeFromMangledName(&qword_256442A08);
        v25 = sub_236BCF9EC();
        sub_236B93FB0(v25, v26, v29);
        sub_236BCFCC8();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_236B83000, v21, v22, "EncryptionUtilities: Failed in getKey_fromBase64: %{private}s", a3, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x23B7FE96C](v23, -1, -1);
        MEMORY[0x23B7FE96C](a3, -1, -1);
      }

      swift_beginAccess();
      if (error[0])

      sub_236BACCF4();
      swift_allocError();
      *v27 = 2;
      swift_willThrow();
      sub_236BACD38(v7, v8);
    }
  }
  return a3;
}

uint8_t *sub_236BAC9F4(__SecKey *a1)
{
  const __CFString *v2;
  const __CFData *v3;
  CFDataRef DecryptedData;
  const __CFData *v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  __CFError *v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v16[3];
  CFErrorRef error[2];

  error[1] = *(CFErrorRef *)MEMORY[0x24BDAC8D0];
  error[0] = 0;
  if (qword_2542AF728 != -1)
    swift_once();
  v2 = (const __CFString *)qword_2542B0F68;
  v3 = (const __CFData *)sub_236BCF824();
  DecryptedData = SecKeyCreateDecryptedData(a1, v2, v3, error);

  if (DecryptedData)
  {
    v5 = DecryptedData;
    v6 = (uint8_t *)sub_236BCF83C();

  }
  else
  {
    if (qword_2542AF268 != -1)
      swift_once();
    v7 = sub_236BCF8C0();
    v6 = (uint8_t *)__swift_project_value_buffer(v7, (uint64_t)qword_2542AF248);
    v8 = sub_236BCF8A8();
    v9 = sub_236BCFC2C();
    if (os_log_type_enabled(v8, v9))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v16[0] = v10;
      *(_DWORD *)v6 = 136380675;
      swift_beginAccess();
      if (error[0])
        v11 = error[0];
      __swift_instantiateConcreteTypeFromMangledName(&qword_256442A08);
      v12 = sub_236BCF9EC();
      sub_236B93FB0(v12, v13, v16);
      sub_236BCFCC8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_236B83000, v8, v9, "EncryptionUtilities: Failed in decryptToData: %{private}s", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v10, -1, -1);
      MEMORY[0x23B7FE96C](v6, -1, -1);
    }

    swift_beginAccess();
    if (error[0])

    sub_236BACCF4();
    swift_allocError();
    *v14 = 5;
    swift_willThrow();
  }
  return v6;
}

unint64_t sub_236BACCAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2564429F8;
  if (!qword_2564429F8)
  {
    type metadata accessor for CFError(255);
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BDCFD90], v1);
    atomic_store(result, (unint64_t *)&qword_2564429F8);
  }
  return result;
}

unint64_t sub_236BACCF4()
{
  unint64_t result;

  result = qword_256442A00;
  if (!qword_256442A00)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for EncryptionError, &type metadata for EncryptionError);
    atomic_store(result, (unint64_t *)&qword_256442A00);
  }
  return result;
}

uint64_t sub_236BACD38(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_236B9E0F0(a1, a2);
  return a1;
}

unint64_t sub_236BACD50()
{
  unint64_t result;

  result = qword_256442A10;
  if (!qword_256442A10)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for EncryptionError, &type metadata for EncryptionError);
    atomic_store(result, (unint64_t *)&qword_256442A10);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for EncryptionError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EncryptionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_236BACE70 + 4 * byte_236BD1EF5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_236BACEA4 + 4 * byte_236BD1EF0[v4]))();
}

uint64_t sub_236BACEA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BACEAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BACEB4);
  return result;
}

uint64_t sub_236BACEC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BACEC8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_236BACECC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BACED4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EncryptionError()
{
  return &type metadata for EncryptionError;
}

ValueMetadata *type metadata accessor for EncryptionUtilities()
{
  return &type metadata for EncryptionUtilities;
}

uint64_t IOReportingConfig.commonFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 2);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  *(_WORD *)a1 = *(_WORD *)v1;
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t IOReportingConfig.group.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IOReportingConfig.subgroup.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_236BACFC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 2);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  *(_WORD *)a1 = *(_WORD *)v1;
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for IOReportingConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IOReportingConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IOReportingConfig(uint64_t a1, __int16 *a2)
{
  __int16 v4;

  v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for IOReportingConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IOReportingConfig(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IOReportingConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for IOReportingConfig()
{
  return &type metadata for IOReportingConfig;
}

uint64_t sub_236BAD3A4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  __int16 v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v42 = MEMORY[0x24BEE4AF8];
    sub_236BA5624(0, v5, 0);
    result = v42;
    v7 = (uint64_t *)(a1 + 32);
    while (1)
    {
      v35 = result;
      v8 = *v7;
      swift_bridgeObjectRetain_n();
      if ((a2 & 1) == 0)
      {
        sub_236BBC43C(v8, 4);
        if (v3)
          break;
      }
      CommonConfigFields.init(dict:)(v8, (uint64_t)&v38);
      if (v3)
        break;
      v9 = *((_QWORD *)&v38 + 1);
      v10 = v39;
      v31 = v7;
      v32 = v5;
      v33 = v40;
      v34 = v41;
      v29 = BYTE2(v38);
      v30 = v38;
      if (*(_QWORD *)(v8 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v11 = sub_236B8BFC0(0x70756F7267, 0xE500000000000000);
        v12 = *((_QWORD *)&v10 + 1);
        v13 = v10;
        v14 = v9;
        if ((v15 & 1) != 0)
        {
          sub_236B8E794(*(_QWORD *)(v8 + 56) + 32 * v11, (uint64_t)&v38);
        }
        else
        {
          v38 = 0u;
          v39 = 0u;
        }
      }
      else
      {
        v38 = 0u;
        v39 = 0u;
        swift_bridgeObjectRetain();
        v14 = v9;
        swift_bridgeObjectRetain();
        v13 = v10;
        swift_bridgeObjectRetain();
        v12 = *((_QWORD *)&v10 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
      v16 = swift_dynamicCast();
      if (v16)
        v17 = v37;
      else
        v17 = 0;
      if (v16)
        v18 = v36;
      else
        v18 = 0;
      if (*(_QWORD *)(v8 + 16))
      {
        swift_bridgeObjectRetain();
        v19 = sub_236B8BFC0(0x70756F7267627573, 0xE800000000000000);
        if ((v20 & 1) != 0)
        {
          sub_236B8E794(*(_QWORD *)(v8 + 56) + 32 * v19, (uint64_t)&v38);
        }
        else
        {
          v38 = 0u;
          v39 = 0u;
        }
      }
      else
      {
        v38 = 0u;
        v39 = 0u;
        swift_bridgeObjectRetain();
      }
      if (swift_dynamicCast())
      {
        v21 = v37;
        v28 = v36;
      }
      else
      {
        v21 = 0;
        v28 = 0;
        v36 = 0;
        v37 = 0;
      }
      v22 = v12;
      swift_bridgeObjectRelease();
      if (!(v17 | v21))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_236B93D48();
        swift_allocError();
        *(_QWORD *)v26 = 0xD00000000000004ALL;
        *(_QWORD *)(v26 + 8) = 0x8000000236BD5AF0;
        *(_BYTE *)(v26 + 16) = 1;
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = v35;
      v42 = v35;
      v24 = *(_QWORD *)(v35 + 16);
      v23 = *(_QWORD *)(v35 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_236BA5624(v23 > 1, v24 + 1, 1);
        result = v42;
      }
      *(_QWORD *)(result + 16) = v24 + 1;
      v25 = result + 80 * v24;
      *(_WORD *)(v25 + 32) = v30;
      *(_BYTE *)(v25 + 34) = v29;
      *(_QWORD *)(v25 + 40) = v14;
      *(_QWORD *)(v25 + 48) = v13;
      *(_QWORD *)(v25 + 56) = v22;
      *(_QWORD *)(v25 + 64) = v33;
      v3 = 0;
      *(_QWORD *)(v25 + 72) = v34;
      *(_QWORD *)(v25 + 80) = v18;
      *(_QWORD *)(v25 + 88) = v17;
      *(_QWORD *)(v25 + 96) = v28;
      *(_QWORD *)(v25 + 104) = v21;
      v7 = v31 + 1;
      v5 = v32 - 1;
      if (v32 == 1)
        return result;
    }
    swift_release();
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

uint64_t sub_236BAD7E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[6];
  uint64_t v42;

  v4 = v3;
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v6 = 0;
    v7 = result + 56;
    v31 = *(_QWORD *)(result + 16);
    v28 = v5 - 1;
    v8 = MEMORY[0x24BEE4AF8];
    v32 = result;
    v29 = result + 56;
    do
    {
      v30 = v8;
      v9 = (_QWORD *)(v7 + 80 * v6);
      v10 = v6;
      while (1)
      {
        if (v10 >= *(_QWORD *)(result + 16))
        {
          __break(1u);
          return result;
        }
        v35 = v10;
        v11 = *((_WORD *)v9 - 12);
        v12 = *((_BYTE *)v9 - 22);
        v40 = v4;
        v13 = *(v9 - 2);
        v14 = *(v9 - 1);
        v15 = v9[2];
        v37 = v9[1];
        v38 = *v9;
        v16 = v9[4];
        v39 = v9[3];
        v17 = v9[5];
        v18 = v9[6];
        v41[3] = &type metadata for IOReportingConfig;
        v41[4] = &off_250829850;
        v19 = swift_allocObject();
        v41[0] = v19;
        *(_WORD *)(v19 + 16) = v11;
        *(_BYTE *)(v19 + 18) = v12;
        *(_QWORD *)(v19 + 24) = v13;
        *(_QWORD *)(v19 + 32) = v14;
        *(_QWORD *)(v19 + 40) = v38;
        *(_QWORD *)(v19 + 48) = v37;
        *(_QWORD *)(v19 + 56) = v15;
        *(_QWORD *)(v19 + 64) = v39;
        *(_QWORD *)(v19 + 72) = v16;
        *(_QWORD *)(v19 + 80) = v17;
        *(_QWORD *)(v19 + 88) = v18;
        swift_bridgeObjectRetain_n();
        v36 = v13;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v20 = sub_236BA72C0(v41, a2, a3);
        if (v40)
        {
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
          v8 = v30;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v8;
        }
        v21 = v20;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
        if ((v21 & 1) != 0)
          break;
        v10 = v35 + 1;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v9 += 10;
        v4 = 0;
        result = v32;
        if (v31 == v35 + 1)
        {
          v8 = v30;
          goto LABEL_17;
        }
      }
      v22 = v30;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v42 = v30;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_236BA5624(0, *(_QWORD *)(v30 + 16) + 1, 1);
        v22 = v42;
      }
      v24 = v22;
      v26 = *(_QWORD *)(v22 + 16);
      v25 = *(_QWORD *)(v22 + 24);
      v4 = 0;
      if (v26 >= v25 >> 1)
      {
        sub_236BA5624(v25 > 1, v26 + 1, 1);
        v4 = 0;
        v24 = v42;
      }
      *(_QWORD *)(v24 + 16) = v26 + 1;
      v27 = v24 + 80 * v26;
      *(_WORD *)(v27 + 32) = v11;
      v6 = v35 + 1;
      *(_BYTE *)(v27 + 34) = v12;
      *(_QWORD *)(v27 + 40) = v36;
      *(_QWORD *)(v27 + 48) = v14;
      *(_QWORD *)(v27 + 56) = v38;
      *(_QWORD *)(v27 + 64) = v37;
      *(_QWORD *)(v27 + 72) = v15;
      *(_QWORD *)(v27 + 80) = v39;
      *(_QWORD *)(v27 + 88) = v16;
      *(_QWORD *)(v27 + 96) = v17;
      *(_QWORD *)(v27 + 104) = v18;
      v8 = v24;
      result = v32;
      v7 = v29;
    }
    while (v28 != v35);
  }
  else
  {
    v8 = MEMORY[0x24BEE4AF8];
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_236BADB3C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;
  _BYTE v15[32];
  __int128 v16;
  uint64_t v17;

  v17 = *a1;
  if (*(_QWORD *)(v17 + 16)
    && (v3 = sub_236BA4CD0(4), (v4 & 1) != 0)
    && (sub_236B8E794(*(_QWORD *)(v17 + 56) + 32 * v3, (uint64_t)v15),
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC0),
        (swift_dynamicCast() & 1) != 0))
  {
    v16 = *(_OWORD *)(a1 + 1);
    v6 = a1[3];
    v5 = a1[4];
    v7 = a1[5] & 1;
    sub_236B954A0((uint64_t)&v17);
    sub_236B954C8((uint64_t)&v16);
    swift_bridgeObjectRetain();
    v8 = sub_236BAD3A4(v14, v7);
    sub_236B954F0((uint64_t)&v17);
    sub_236B95518((uint64_t)&v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v1)
    {
      sub_236B954A0((uint64_t)&v17);
      sub_236B954C8((uint64_t)&v16);
      swift_bridgeObjectRetain();
      v6 = sub_236BAD7E4(v8, v6, v5);
      sub_236B954F0((uint64_t)&v17);
      sub_236B95518((uint64_t)&v16);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (qword_2542AFCB0 != -1)
      swift_once();
    v9 = sub_236BCF8C0();
    __swift_project_value_buffer(v9, (uint64_t)qword_2542AFC98);
    v10 = sub_236BCF8A8();
    v11 = sub_236BCFC20();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_236B83000, v10, v11, "No ioReporting section found.", v12, 2u);
      MEMORY[0x23B7FE96C](v12, -1, -1);
    }

    return 0;
  }
  return v6;
}

uint64_t sub_236BADD48()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_236BADD9C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v34 = MEMORY[0x24BEE4AF8];
  sub_236BA565C(0, v1, 0);
  v2 = v34;
  result = sub_236BAED74(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v26 = v3 + 80;
  v27 = v1;
  v28 = v5;
  v29 = v3 + 64;
  v30 = v3;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v31 = v7;
    v12 = *(_QWORD *)(v3 + 56) + 24 * v6;
    v13 = *(_QWORD *)v12;
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_BYTE *)(v12 + 16);
    v16 = Keys.rawValue.getter();
    v32 = v17;
    v33 = v16;
    result = sub_236B8C348(v13, v14, v15);
    v18 = *(_QWORD *)(v34 + 16);
    v19 = *(_QWORD *)(v34 + 24);
    if (v18 >= v19 >> 1)
      result = sub_236BA565C(v19 > 1, v18 + 1, 1);
    *(_QWORD *)(v34 + 16) = v18 + 1;
    v20 = v34 + 40 * v18;
    *(_QWORD *)(v20 + 32) = v33;
    *(_QWORD *)(v20 + 40) = v32;
    *(_QWORD *)(v20 + 48) = v13;
    *(_QWORD *)(v20 + 56) = v14;
    *(_BYTE *)(v20 + 64) = v15;
    v3 = v30;
    v9 = 1 << *(_BYTE *)(v30 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = v29;
    v21 = *(_QWORD *)(v29 + 8 * v11);
    if ((v21 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v28;
    if (*(_DWORD *)(v30 + 36) != v28)
      goto LABEL_27;
    v22 = v21 & (-2 << (v6 & 0x3F));
    if (v22)
    {
      v9 = __clz(__rbit64(v22)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v27;
    }
    else
    {
      v23 = v11 + 1;
      v24 = (unint64_t)(v9 + 63) >> 6;
      v10 = v27;
      if (v11 + 1 < v24)
      {
        v25 = *(_QWORD *)(v29 + 8 * v23);
        if (v25)
        {
LABEL_20:
          v9 = __clz(__rbit64(v25)) + (v23 << 6);
        }
        else
        {
          while (v24 - 2 != v11)
          {
            v25 = *(_QWORD *)(v26 + 8 * v11++);
            if (v25)
            {
              v23 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v31 + 1;
    v6 = v9;
    if (v31 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t Dictionary<>.subscript.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = Keys.rawValue.getter();
  return sub_236B95E1C(v1, v2, v3, v4, v5);
}

AudioAnalyticsBase::Keys_optional __swiftcall Keys.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  AudioAnalyticsBase::Keys_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = sub_236BCFFA4();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 48;
  switch(v3)
  {
    case 0:
      goto LABEL_50;
    case 1:
      v5 = 1;
      goto LABEL_50;
    case 2:
      v5 = 2;
      goto LABEL_50;
    case 3:
      v5 = 3;
      goto LABEL_50;
    case 4:
      v5 = 4;
      goto LABEL_50;
    case 5:
      v5 = 5;
      goto LABEL_50;
    case 6:
      v5 = 6;
      goto LABEL_50;
    case 7:
      v5 = 7;
      goto LABEL_50;
    case 8:
      v5 = 8;
      goto LABEL_50;
    case 9:
      v5 = 9;
      goto LABEL_50;
    case 10:
      v5 = 10;
      goto LABEL_50;
    case 11:
      v5 = 11;
      goto LABEL_50;
    case 12:
      v5 = 12;
      goto LABEL_50;
    case 13:
      v5 = 13;
      goto LABEL_50;
    case 14:
      v5 = 14;
      goto LABEL_50;
    case 15:
      v5 = 15;
      goto LABEL_50;
    case 16:
      v5 = 16;
      goto LABEL_50;
    case 17:
      v5 = 17;
      goto LABEL_50;
    case 18:
      v5 = 18;
      goto LABEL_50;
    case 19:
      v5 = 19;
      goto LABEL_50;
    case 20:
      v5 = 20;
      goto LABEL_50;
    case 21:
      v5 = 21;
      goto LABEL_50;
    case 22:
      v5 = 22;
      goto LABEL_50;
    case 23:
      v5 = 23;
      goto LABEL_50;
    case 24:
      v5 = 24;
      goto LABEL_50;
    case 25:
      v5 = 25;
      goto LABEL_50;
    case 26:
      v5 = 26;
      goto LABEL_50;
    case 27:
      v5 = 27;
      goto LABEL_50;
    case 28:
      v5 = 28;
      goto LABEL_50;
    case 29:
      v5 = 29;
      goto LABEL_50;
    case 30:
      v5 = 30;
      goto LABEL_50;
    case 31:
      v5 = 31;
      goto LABEL_50;
    case 32:
      v5 = 32;
      goto LABEL_50;
    case 33:
      v5 = 33;
      goto LABEL_50;
    case 34:
      v5 = 34;
      goto LABEL_50;
    case 35:
      v5 = 35;
      goto LABEL_50;
    case 36:
      v5 = 36;
      goto LABEL_50;
    case 37:
      v5 = 37;
      goto LABEL_50;
    case 38:
      v5 = 38;
      goto LABEL_50;
    case 39:
      v5 = 39;
      goto LABEL_50;
    case 40:
      v5 = 40;
      goto LABEL_50;
    case 41:
      v5 = 41;
      goto LABEL_50;
    case 42:
      v5 = 42;
      goto LABEL_50;
    case 43:
      v5 = 43;
      goto LABEL_50;
    case 44:
      v5 = 44;
      goto LABEL_50;
    case 45:
      v5 = 45;
      goto LABEL_50;
    case 46:
      v5 = 46;
      goto LABEL_50;
    case 47:
      v5 = 47;
LABEL_50:
      v6 = v5;
      break;
    case 48:
      break;
    case 49:
      v6 = 49;
      break;
    case 50:
      v6 = 50;
      break;
    case 51:
      v6 = 51;
      break;
    case 52:
      v6 = 52;
      break;
    case 53:
      v6 = 53;
      break;
    case 54:
      v6 = 54;
      break;
    case 55:
      v6 = 55;
      break;
    case 56:
      v6 = 56;
      break;
    case 57:
      v6 = 57;
      break;
    case 58:
      v6 = 58;
      break;
    case 59:
      v6 = 59;
      break;
    case 60:
      v6 = 60;
      break;
    case 61:
      v6 = 61;
      break;
    case 62:
      v6 = 62;
      break;
    case 63:
      v6 = 63;
      break;
    case 64:
      v6 = 64;
      break;
    case 65:
      v6 = 65;
      break;
    default:
      v6 = 66;
      break;
  }
  *v2 = v6;
  return result;
}

void *static Keys.allCases.getter()
{
  return &unk_250827EE0;
}

uint64_t sub_236BAE2E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_236BCA408(*a1, *a2);
}

uint64_t sub_236BAE2EC()
{
  sub_236BD0028();
  Keys.rawValue.getter();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

uint64_t sub_236BAE350()
{
  Keys.rawValue.getter();
  sub_236BCFA34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_236BAE3A0()
{
  sub_236BD0028();
  Keys.rawValue.getter();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

AudioAnalyticsBase::Keys_optional sub_236BAE400(Swift::String *a1)
{
  return Keys.init(rawValue:)(*a1);
}

uint64_t sub_236BAE40C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Keys.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_236BAE430(_QWORD *a1@<X8>)
{
  *a1 = &unk_250827EE0;
}

double sub_236BAE440@<D0>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  double result;
  __int128 v9;
  char v10;

  v4 = *a1;
  LOBYTE(v9) = *a2;
  v5 = Keys.rawValue.getter();
  sub_236B95DB8(v5, v6, v4, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  v7 = v10;
  result = *(double *)&v9;
  *(_OWORD *)a3 = v9;
  *(_BYTE *)(a3 + 16) = v7;
  return result;
}

uint64_t sub_236BAE4A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = Keys.rawValue.getter();
  v6 = v5;
  sub_236BAE75C(v1, v2, v3);
  return sub_236B95E1C(v1, v2, v3, v4, v6);
}

uint64_t (*Dictionary<>.subscript.modify(uint64_t a1, _BYTE *a2))(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  *(_QWORD *)(a1 + 24) = v2;
  *(_BYTE *)(a1 + 17) = *a2;
  v4 = *v2;
  v5 = Keys.rawValue.getter();
  if (*(_QWORD *)(v4 + 16) && (v7 = sub_236B8BFC0(v5, v6), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(v4 + 56) + 24 * v7;
    v10 = *(_QWORD *)v9;
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_BYTE *)(v9 + 16);
    *(_QWORD *)a1 = *(_QWORD *)v9;
    *(_QWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 16) = v12;
    sub_236B8C348(v10, v11, v12);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = -1;
  }
  swift_bridgeObjectRelease();
  return sub_236BAE5D0;
}

uint64_t sub_236BAE5D0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    v6 = Keys.rawValue.getter();
    v8 = v7;
    sub_236BAE75C(v2, v3, v4);
    sub_236B95E1C(v2, v3, v4, v6, v8);
    return sub_236B95F4C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  }
  else
  {
    v10 = Keys.rawValue.getter();
    return sub_236B95E1C(v2, v3, v4, v10, v11);
  }
}

uint64_t Dictionary<>.asStringKeyDict()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (*(_QWORD *)(sub_236BADD9C(a1) + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEF0);
    v1 = sub_236BCFE3C();
  }
  else
  {
    v1 = MEMORY[0x24BEE4B00];
  }
  v4 = v1;
  v2 = swift_bridgeObjectRetain();
  sub_236BAE770(v2, 1, &v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_236BAE75C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1)
    return sub_236B8C348(a1, a2, a3);
  return a1;
}

void sub_236BAE770(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v46 = v5;
  if (v5)
  {
    if (!*(_QWORD *)(a1 + 16))
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v6 = *(_BYTE *)(a1 + 64);
    v8 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 40);
    swift_bridgeObjectRetain();
    v47 = v6;
    sub_236B8C348(v8, v7, v6);
    if (v10)
    {
      v11 = (_QWORD *)*a3;
      v13 = sub_236B8BFC0(v9, v10);
      v14 = v11[2];
      v15 = (v12 & 1) == 0;
      v16 = v14 + v15;
      if (__OFADD__(v14, v15))
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      v17 = v12;
      if (v11[3] >= v16)
      {
        if ((a2 & 1) != 0)
        {
          if ((v12 & 1) == 0)
            goto LABEL_14;
        }
        else
        {
          sub_236B8C6E8();
          if ((v17 & 1) == 0)
            goto LABEL_14;
        }
      }
      else
      {
        sub_236B8C3C0(v16, a2 & 1);
        v18 = sub_236B8BFC0(v9, v10);
        if ((v17 & 1) != (v19 & 1))
        {
LABEL_30:
          sub_236BCFFD4();
          __break(1u);
LABEL_31:
          sub_236BCFD4C();
          sub_236BCFA58();
          sub_236BCFE00();
          sub_236BCFA58();
          sub_236BCFE18();
          __break(1u);
          return;
        }
        v13 = v18;
        if ((v17 & 1) == 0)
        {
LABEL_14:
          v22 = (_QWORD *)*a3;
          *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
          v23 = (uint64_t *)(v22[6] + 16 * v13);
          *v23 = v9;
          v23[1] = v10;
          v24 = v22[7] + 24 * v13;
          *(_QWORD *)v24 = v8;
          *(_QWORD *)(v24 + 8) = v7;
          *(_BYTE *)(v24 + 16) = v6;
          v25 = v22[2];
          v26 = __OFADD__(v25, 1);
          v27 = v25 + 1;
          if (v26)
          {
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
          v22[2] = v27;
          if (v46 != 1)
          {
            v28 = (char *)(a1 + 104);
            v29 = 1;
            while (v29 < *(_QWORD *)(a1 + 16))
            {
              v30 = *v28;
              v8 = *((_QWORD *)v28 - 2);
              v7 = *((_QWORD *)v28 - 1);
              v32 = *((_QWORD *)v28 - 4);
              v31 = *((_QWORD *)v28 - 3);
              swift_bridgeObjectRetain();
              v47 = v30;
              sub_236B8C348(v8, v7, v30);
              if (!v31)
                goto LABEL_25;
              v33 = (_QWORD *)*a3;
              v34 = sub_236B8BFC0(v32, v31);
              v36 = v33[2];
              v37 = (v35 & 1) == 0;
              v26 = __OFADD__(v36, v37);
              v38 = v36 + v37;
              if (v26)
                goto LABEL_28;
              v39 = v35;
              if (v33[3] < v38)
              {
                sub_236B8C3C0(v38, 1);
                v34 = sub_236B8BFC0(v32, v31);
                if ((v39 & 1) != (v40 & 1))
                  goto LABEL_30;
              }
              if ((v39 & 1) != 0)
                goto LABEL_11;
              v41 = (_QWORD *)*a3;
              *(_QWORD *)(*a3 + 8 * (v34 >> 6) + 64) |= 1 << v34;
              v42 = (uint64_t *)(v41[6] + 16 * v34);
              *v42 = v32;
              v42[1] = v31;
              v43 = v41[7] + 24 * v34;
              *(_QWORD *)v43 = v8;
              *(_QWORD *)(v43 + 8) = v7;
              *(_BYTE *)(v43 + 16) = v30;
              v44 = v41[2];
              v26 = __OFADD__(v44, 1);
              v45 = v44 + 1;
              if (v26)
                goto LABEL_29;
              ++v29;
              v41[2] = v45;
              v28 += 40;
              if (v46 == v29)
                goto LABEL_25;
            }
            goto LABEL_27;
          }
          goto LABEL_25;
        }
      }
LABEL_11:
      v20 = (void *)swift_allocError();
      swift_willThrow();
      v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256442A30);
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        sub_236B8C2D4(v8, v7, v47);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }
      goto LABEL_31;
    }
  }
LABEL_25:
  swift_bridgeObjectRelease_n();
}

unint64_t sub_236BAEB7C()
{
  unint64_t result;

  result = qword_256442A18;
  if (!qword_256442A18)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for Keys, &type metadata for Keys);
    atomic_store(result, (unint64_t *)&qword_256442A18);
  }
  return result;
}

unint64_t sub_236BAEBC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256442A20;
  if (!qword_256442A20)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256442A28);
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256442A20);
  }
  return result;
}

uint64_t sub_236BAEC18()
{
  return 0;
}

uint64_t getEnumTagSinglePayload for Keys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xBF)
    goto LABEL_17;
  if (a2 + 65 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 65) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 65;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 65;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 65;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x42;
  v8 = v6 - 66;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Keys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 65) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xBF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xBE)
    return ((uint64_t (*)(void))((char *)&loc_236BAED04 + 4 * byte_236BD210B[v4]))();
  *a1 = a2 + 65;
  return ((uint64_t (*)(void))((char *)sub_236BAED38 + 4 * byte_236BD2106[v4]))();
}

uint64_t sub_236BAED38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BAED40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BAED48);
  return result;
}

uint64_t sub_236BAED54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BAED5CLL);
  *(_BYTE *)result = a2 + 65;
  return result;
}

uint64_t sub_236BAED60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BAED68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BAED74(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_236BAEDFC(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AFCB8);
}

uint64_t sub_236BAEE10(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AF248);
}

uint64_t sub_236BAEE24(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_256442A38);
}

uint64_t static Logger.tests.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_256442630, (uint64_t)qword_256442A38, a1);
}

uint64_t sub_236BAEE54(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_256442A50);
}

uint64_t static Logger.simpleType.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_256442638, (uint64_t)qword_256442A50, a1);
}

uint64_t sub_236BAEE84(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AFC98);
}

uint64_t static Logger.config.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AFCB0, (uint64_t)qword_2542AFC98, a1);
}

uint64_t sub_236BAEEB4(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AFBC0);
}

uint64_t static Logger.mobileAsset.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AFBD8, (uint64_t)qword_2542AFBC0, a1);
}

uint64_t sub_236BAEEE4(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AFC70);
}

uint64_t sub_236BAEEF8(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AFCD0);
}

uint64_t sub_236BAEF0C(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AFC00);
}

uint64_t sub_236BAEF20(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AFD38);
}

uint64_t static Logger.utilities.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AFD58, (uint64_t)qword_2542AFD38, a1);
}

uint64_t sub_236BAEF50(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AFCF0);
}

uint64_t sub_236BAEF64(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AFBE0);
}

uint64_t sub_236BAEF78(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AFD18);
}

uint64_t sub_236BAEF8C(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AF230);
}

uint64_t static Logger.ioreporting.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236B867C8(&qword_2542AFBB8, (uint64_t)qword_2542AF230, a1);
}

uint64_t sub_236BAEFBC(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AFC28);
}

uint64_t sub_236BAEFD0(uint64_t a1)
{
  return sub_236BAEFE4(a1, qword_2542AFC48);
}

uint64_t sub_236BAEFE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_236BCF8C0();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_236BCF8B4();
}

uint64_t Logger.ServiceLoggerCategory.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_236BCFE60();
  result = swift_bridgeObjectRelease();
  v4 = 16;
  if (v2 < 0x10)
    v4 = v2;
  *a1 = v4;
  return result;
}

void *static Logger.ServiceLoggerCategory.allCases.getter()
{
  return &unk_2508280E8;
}

uint64_t Logger.ServiceLoggerCategory.rawValue.getter()
{
  char *v0;

  return *(_QWORD *)&aCarr_0[8 * *v0];
}

uint64_t sub_236BAF0D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_236BCA3F0(*a1, *a2);
}

unint64_t sub_236BAF0E0()
{
  unint64_t result;

  result = qword_256442A68;
  if (!qword_256442A68)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for Logger.ServiceLoggerCategory, &type metadata for Logger.ServiceLoggerCategory);
    atomic_store(result, (unint64_t *)&qword_256442A68);
  }
  return result;
}

uint64_t sub_236BAF124()
{
  sub_236BD0028();
  Logger.ServiceLoggerCategory.rawValue.getter();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

uint64_t sub_236BAF180()
{
  Logger.ServiceLoggerCategory.rawValue.getter();
  sub_236BCFA34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_236BAF1C8()
{
  sub_236BD0028();
  Logger.ServiceLoggerCategory.rawValue.getter();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

uint64_t sub_236BAF220@<X0>(char *a1@<X8>)
{
  return Logger.ServiceLoggerCategory.init(rawValue:)(a1);
}

uint64_t sub_236BAF22C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Logger.ServiceLoggerCategory.rawValue.getter();
  *a1 = result;
  a1[1] = 0xE400000000000000;
  return result;
}

unint64_t sub_236BAF258()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256442A70;
  if (!qword_256442A70)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256442A78);
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256442A70);
  }
  return result;
}

void sub_236BAF2A4(_QWORD *a1@<X8>)
{
  *a1 = &unk_2508280E8;
}

uint64_t _s21ServiceLoggerCategoryOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_236BAF300 + 4 * byte_236BD2305[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_236BAF334 + 4 * byte_236BD2300[v4]))();
}

uint64_t sub_236BAF334(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BAF33C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BAF344);
  return result;
}

uint64_t sub_236BAF350(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BAF358);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_236BAF35C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BAF364(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Logger.ServiceLoggerCategory()
{
  return &type metadata for Logger.ServiceLoggerCategory;
}

uint64_t sub_236BAF380(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v10 = MEMORY[0x24BEE4AF8];
    sub_236B8DC98(0, v2, 0);
    result = v10;
    v4 = (char *)(a1 + 32);
    do
    {
      v5 = *v4++;
      v6 = *(_QWORD *)&aRoot_2[8 * v5];
      v11 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_236B8DC98(v7 > 1, v8 + 1, 1);
        result = v11;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      v9 = result + 16 * v8;
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = 0xE400000000000000;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_236BAF454(char a1, char a2)
{
  char v2;
  char v3;

  if (*(_QWORD *)&aRoot_2[8 * a2] == *(_QWORD *)&aRoot_2[8 * a1])
  {
    swift_bridgeObjectRelease_n();
    v2 = 1;
  }
  else
  {
    v3 = sub_236BCFF98();
    swift_bridgeObjectRelease_n();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_236BAF4CC(char a1, char a2)
{
  char v2;
  char v3;

  if (*(_QWORD *)&aRoot_2[8 * a1] == *(_QWORD *)&aRoot_2[8 * a2])
  {
    swift_bridgeObjectRelease_n();
    v2 = 1;
  }
  else
  {
    v3 = sub_236BCFF98();
    swift_bridgeObjectRelease_n();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_236BAF540(char a1, char a2)
{
  char v2;

  if (*(_QWORD *)&aRoot_2[8 * a2] == *(_QWORD *)&aRoot_2[8 * a1])
    v2 = 0;
  else
    v2 = sub_236BCFF98();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_236BAF5A8(uint64_t a1)
{
  int64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;

  v1 = 0;
  v4 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v3 = v4;
  v5 = 1 << *(_BYTE *)(result - 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v3;
  v23 = result;
  v24 = (unint64_t)(v5 + 63) >> 6;
  v22 = MEMORY[0x24BEE4AF8];
  if ((v6 & v3) != 0)
    goto LABEL_6;
LABEL_7:
  v10 = v1 + 1;
  if (!__OFADD__(v1, 1))
  {
    if (v10 < v24)
    {
      v11 = *(_QWORD *)(v23 + 8 * v10);
      ++v1;
      if (v11)
        goto LABEL_22;
      v1 = v10 + 1;
      if (v10 + 1 >= v24)
        goto LABEL_32;
      v11 = *(_QWORD *)(v23 + 8 * v1);
      if (v11)
        goto LABEL_22;
      v1 = v10 + 2;
      if (v10 + 2 >= v24)
        goto LABEL_32;
      v11 = *(_QWORD *)(v23 + 8 * v1);
      if (v11)
        goto LABEL_22;
      v1 = v10 + 3;
      if (v10 + 3 >= v24)
        goto LABEL_32;
      v11 = *(_QWORD *)(v23 + 8 * v1);
      if (v11)
      {
LABEL_22:
        v7 = (v11 - 1) & v11;
        for (i = __clz(__rbit64(v11)) + (v1 << 6); ; i = v8 | (v1 << 6))
        {
          v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
          v15 = *v13;
          v14 = v13[1];
          v16 = qword_2542AF0E0;
          swift_bridgeObjectRetain();
          if (v16 != -1)
            swift_once();
          v17 = __swift_instantiateConcreteTypeFromMangledName(qword_2542AF0F8);
          __swift_project_value_buffer(v17, (uint64_t)qword_2542AF0C8);
          sub_236B8D768();
          sub_236B8D728(&qword_2542AF0F0, qword_2542AF0F8, MEMORY[0x24BEE7460]);
          if ((sub_236BCF968() & 1) != 0)
          {
            v18 = v22;
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = sub_236B8DC98(0, *(_QWORD *)(v22 + 16) + 1, 1);
              v18 = v22;
            }
            v20 = *(_QWORD *)(v18 + 16);
            v19 = *(_QWORD *)(v18 + 24);
            if (v20 >= v19 >> 1)
            {
              result = sub_236B8DC98(v19 > 1, v20 + 1, 1);
              v18 = v22;
            }
            *(_QWORD *)(v18 + 16) = v20 + 1;
            v22 = v18;
            v21 = v18 + 16 * v20;
            *(_QWORD *)(v21 + 32) = v15;
            *(_QWORD *)(v21 + 40) = v14;
            if (!v7)
              goto LABEL_7;
          }
          else
          {
            result = swift_bridgeObjectRelease();
            if (!v7)
              goto LABEL_7;
          }
LABEL_6:
          v8 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      v12 = v10 + 4;
      if (v12 < v24)
      {
        v11 = *(_QWORD *)(v23 + 8 * v12);
        if (v11)
        {
          v1 = v12;
          goto LABEL_22;
        }
        while (1)
        {
          v1 = v12 + 1;
          if (__OFADD__(v12, 1))
            goto LABEL_34;
          if (v1 >= v24)
            break;
          v11 = *(_QWORD *)(v23 + 8 * v1);
          ++v12;
          if (v11)
            goto LABEL_22;
        }
      }
    }
LABEL_32:
    swift_release();
    return v22;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

unint64_t Message.copy(newCategory:newType:newContent:newMetadata:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  __int16 v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v21;
  __int16 v22;
  char v23;
  int v24;
  __int16 v25;
  __int16 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39[3];
  char v40;

  v8 = *a4;
  v7 = a4[1];
  v9 = a4[2];
  v10 = *((_BYTE *)a4 + 24);
  v11 = *(_DWORD *)v5;
  v12 = *(_WORD *)(v5 + 4);
  v13 = *(unsigned __int8 *)(v5 + 40);
  LODWORD(v14) = *(unsigned __int8 *)(v5 + 41);
  LODWORD(v15) = *(unsigned __int8 *)(v5 + 42);
  v16 = *(_QWORD *)(v5 + 56);
  v34 = *(_QWORD *)(v5 + 48);
  v17 = *(_BYTE *)(v5 + 64);
  if (a3)
  {
    v37 = a3;
    if (v9)
    {
LABEL_3:
      v18 = v8 & 1;
      v14 = (v8 >> 8) & 1;
      v15 = (v8 >> 16) & 1;
      v17 = v10 & 1;
      v16 = v9;
      goto LABEL_6;
    }
  }
  else
  {
    v35 = a1;
    v37 = *(_QWORD *)(v5 + 8);
    v19 = a4[1];
    v32 = v14;
    v33 = v15;
    v20 = v17;
    v21 = v11;
    v22 = v12;
    v23 = *((_BYTE *)a4 + 24);
    swift_bridgeObjectRetain();
    v10 = v23;
    a1 = v35;
    v12 = v22;
    LODWORD(v14) = v32;
    v11 = v21;
    v17 = v20;
    LODWORD(v15) = v33;
    v7 = v19;
    if (v9)
      goto LABEL_3;
  }
  v36 = a1;
  v24 = v11;
  v25 = v12;
  swift_bridgeObjectRetain();
  v7 = v34;
  a1 = v36;
  v18 = v13;
  v12 = v25;
  v11 = v24;
LABEL_6:
  if ((a2 & 0x10000) != 0)
    v26 = v12;
  else
    v26 = a2;
  if ((a1 & 0x100000000) != 0)
    v27 = v11;
  else
    v27 = a1;
  v28 = 256;
  if (!(_DWORD)v14)
    v28 = 0;
  v29 = v28 | v18;
  v30 = 0x10000;
  if (!(_DWORD)v15)
    v30 = 0;
  v39[0] = v29 | v30;
  v39[1] = v7;
  v39[2] = v16;
  v40 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return Message.init(category:type:content:metadata:)(v27, v26, v37, v39, a5);
}

uint64_t Message.audioTag.getter()
{
  uint64_t v0;
  unsigned __int16 v1;
  uint64_t v3;

  v1 = *(_WORD *)(v0 + 4);
  v3 = _s18AudioAnalyticsBase9UtilitiesO24eventCategoryDescription4fromSSSo0a5EventF0V_tFZ_0(*(_DWORD *)v0);
  sub_236BCFA58();
  _s18AudioAnalyticsBase9UtilitiesO20eventTypeDescription4fromSSSo0a5EventF0V_tFZ_0(v1);
  sub_236BCFA58();
  swift_bridgeObjectRelease();
  return v3;
}

Swift::String __swiftcall Message.toString()()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;
  void *v3;
  void *v4;
  void *v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  Swift::String result;
  id v30[4];
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v1 = sub_236BCF9E0();
  MEMORY[0x24BDAC7A8](v1);
  v2 = *(_WORD *)(v0 + 4);
  v3 = *(void **)(v0 + 8);
  v4 = *(void **)(v0 + 16);
  v5 = *(void **)(v0 + 24);
  v6 = *(_BYTE *)(v0 + 32);
  v7 = *(_BYTE *)(v0 + 40);
  v8 = *(_BYTE *)(v0 + 41);
  v9 = *(_BYTE *)(v0 + 42);
  v10 = *(_QWORD *)(v0 + 48);
  v11 = *(_QWORD *)(v0 + 56);
  v12 = *(_BYTE *)(v0 + 64);
  LODWORD(v30[0]) = *(_DWORD *)v0;
  WORD2(v30[0]) = v2;
  v30[1] = v3;
  v30[2] = v4;
  v30[3] = v5;
  v31 = v6;
  v32 = v7;
  v33 = v8;
  v34 = v9;
  v35 = v10;
  v36 = v11;
  v37 = v12;
  v38 = *(_OWORD *)(v0 + 72);
  v13 = Message.flatten()();
  sub_236B8B5D0(v13);
  swift_bridgeObjectRelease();
  v14 = (void *)objc_opt_self();
  v15 = (void *)sub_236BCF920();
  v30[0] = 0;
  v16 = objc_msgSend(v14, sel_dataWithJSONObject_options_error_, v15, 11, v30);

  v17 = v30[0];
  if (!v16)
  {
    v24 = v17;
    v25 = (void *)sub_236BCF794();

    swift_willThrow();
    v18 = 0;
    v20 = 0xF000000000000000;
    goto LABEL_5;
  }
  v18 = sub_236BCF83C();
  v20 = v19;

  sub_236B9E0AC(v18, v20);
  sub_236BCF9D4();
  v21 = sub_236BCF9C8();
  v23 = v22;
  sub_236B9E0F0(v18, v20);
  if (!v23)
  {
LABEL_5:
    v21 = sub_236BCF938();
    v23 = v26;
    swift_release();
    sub_236BACD38(v18, v20);
    goto LABEL_6;
  }
  sub_236B9E0F0(v18, v20);
  swift_release();
LABEL_6:
  v27 = v21;
  v28 = v23;
  result._object = v28;
  result._countAndFlagsBits = v27;
  return result;
}

uint64_t Message.copyPrevious(fields:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t result;
  char v55;
  char v56;
  char isUniquelyReferenced_nonNull_native;
  char v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int64_t v65;
  uint64_t v66;

  v3 = v2;
  v6 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 56);
  v65 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  v64 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (v9)
  {
    v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v12 = v11 | (v10 << 6);
LABEL_22:
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v18 = *v16;
    v17 = v16[1];
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16);
    swift_bridgeObjectRetain();
    if (v19
      && (swift_bridgeObjectRetain(), sub_236B8BFC0(v18, v17), v21 = v20, swift_bridgeObjectRelease(), (v21 & 1) != 0)
      || !*(_QWORD *)(a2 + 16))
    {
LABEL_5:
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_236B8BFC0(v18, v17);
      if ((v22 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v64 = sub_236B8E0D0(0, v64[2] + 1, 1, v64);
      v24 = v64[2];
      v23 = v64[3];
      if (v24 >= v23 >> 1)
        v64 = sub_236B8E0D0((_QWORD *)(v23 > 1), v24 + 1, 1, v64);
      v64[2] = v24 + 1;
      v25 = &v64[2 * v24];
      v25[4] = v18;
      v25[5] = v17;
      if (*(_QWORD *)(a2 + 16))
      {
        swift_bridgeObjectRetain();
        v26 = sub_236B8BFC0(v18, v17);
        if ((v27 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_38;
        }
        v28 = *(_QWORD *)(a2 + 56) + 24 * v26;
        v29 = *(_BYTE *)(v28 + 16);
        v60 = *(_QWORD *)v28;
        v62 = *(_QWORD *)(v28 + 8);
        sub_236B8C348(*(_QWORD *)v28, v62, v29);
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v30 = *(_QWORD **)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0x8000000000000000;
        v32 = sub_236B8BFC0(v18, v17);
        v33 = v30[2];
        v34 = (v31 & 1) == 0;
        v35 = v33 + v34;
        if (__OFADD__(v33, v34))
          goto LABEL_55;
        if (v30[3] >= v35)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v31 & 1) != 0)
              goto LABEL_44;
          }
          else
          {
            v59 = v32;
            v56 = v31;
            sub_236B8C6E8();
            v32 = v59;
            if ((v56 & 1) != 0)
              goto LABEL_44;
          }
        }
        else
        {
          v55 = v31;
          sub_236B8C3C0(v35, isUniquelyReferenced_nonNull_native);
          v36 = sub_236B8BFC0(v18, v17);
          if ((v55 & 1) != (v37 & 1))
            goto LABEL_57;
          v32 = v36;
          if ((v55 & 1) != 0)
          {
LABEL_44:
            v44 = v30[7] + 24 * v32;
            sub_236B8C2D4(*(_QWORD *)v44, *(_QWORD *)(v44 + 8), *(_BYTE *)(v44 + 16));
            *(_QWORD *)v44 = v60;
            *(_QWORD *)(v44 + 8) = v62;
            *(_BYTE *)(v44 + 16) = v29;
            goto LABEL_48;
          }
        }
        v30[(v32 >> 6) + 8] |= 1 << v32;
        v45 = (uint64_t *)(v30[6] + 16 * v32);
        *v45 = v18;
        v45[1] = v17;
        v46 = v30[7] + 24 * v32;
        *(_QWORD *)v46 = v60;
        *(_QWORD *)(v46 + 8) = v62;
        *(_BYTE *)(v46 + 16) = v29;
        v47 = v30[2];
        v48 = __OFADD__(v47, 1);
        v49 = v47 + 1;
        if (v48)
          goto LABEL_56;
        v30[2] = v49;
        swift_bridgeObjectRetain();
LABEL_48:
        *(_QWORD *)(v3 + 8) = v30;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_38:
        swift_bridgeObjectRetain();
        v38 = sub_236B8BFC0(v18, v17);
        v40 = v39;
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0)
          goto LABEL_5;
        v41 = swift_isUniquelyReferenced_nonNull_native();
        v42 = *(_QWORD *)(v3 + 8);
        *(_QWORD *)(v3 + 8) = 0x8000000000000000;
        if ((v41 & 1) == 0)
          sub_236B8C6E8();
        swift_bridgeObjectRelease();
        v43 = *(_QWORD *)(v42 + 56) + 24 * v38;
        v61 = *(_QWORD *)(v43 + 8);
        v63 = *(_QWORD *)v43;
        v58 = *(_BYTE *)(v43 + 16);
        sub_236B8D7AC(v38, v42);
        *(_QWORD *)(v3 + 8) = v42;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_236B8C2D4(v63, v61, v58);
      }
    }
  }
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_54;
  }
  if (v13 >= v65)
    goto LABEL_49;
  v14 = *(_QWORD *)(v6 + 8 * v13);
  ++v10;
  if (v14)
    goto LABEL_21;
  v10 = v13 + 1;
  if (v13 + 1 >= v65)
    goto LABEL_49;
  v14 = *(_QWORD *)(v6 + 8 * v10);
  if (v14)
    goto LABEL_21;
  v10 = v13 + 2;
  if (v13 + 2 >= v65)
    goto LABEL_49;
  v14 = *(_QWORD *)(v6 + 8 * v10);
  if (v14)
  {
LABEL_21:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_22;
  }
  v15 = v13 + 3;
  if (v15 < v65)
  {
    v14 = *(_QWORD *)(v6 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v10 = v15 + 1;
        if (__OFADD__(v15, 1))
          break;
        if (v10 >= v65)
          goto LABEL_49;
        v14 = *(_QWORD *)(v6 + 8 * v10);
        ++v15;
        if (v14)
          goto LABEL_21;
      }
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      result = sub_236BCFFD4();
      __break(1u);
      return result;
    }
    v10 = v15;
    goto LABEL_21;
  }
LABEL_49:
  swift_release();
  if (v64[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
    sub_236B8D728((unint64_t *)&qword_2542AFDD0, &qword_2542AFDC8, MEMORY[0x24BEE12B0]);
    v50 = sub_236BCF974();
    v52 = v51;
    swift_bridgeObjectRelease();
    v53 = swift_isUniquelyReferenced_nonNull_native();
    v66 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0x8000000000000000;
    sub_236B8BA30(v50, v52, 4, 0xD00000000000001DLL, 0x8000000236BD5C00, v53);
    *(_QWORD *)(v3 + 8) = v66;
  }
  return swift_bridgeObjectRelease();
}

uint64_t (*Message.Metadata.isRedundant.modify())()
{
  return nullsub_1;
}

uint64_t Message.Metadata.isBroadcast.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*Message.Metadata.isBroadcast.modify())()
{
  return nullsub_1;
}

uint64_t (*Message.Metadata.isSessionStarted.modify())()
{
  return nullsub_1;
}

uint64_t Message.Metadata.untrustworthyReasons.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Message.Metadata.untrustworthyReasons.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*Message.Metadata.untrustworthyReasons.modify())()
{
  return nullsub_1;
}

uint64_t Message.Metadata.requiresSummaryDecoration.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*Message.Metadata.requiresSummaryDecoration.modify())()
{
  return nullsub_1;
}

uint64_t sub_236BB030C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236BB0348
                                                            + 4 * asc_236BD24D0[a1]))(0x646E756465527369, 0xEB00000000746E61);
}

uint64_t sub_236BB0348()
{
  return 0x6364616F72427369;
}

unint64_t sub_236BB0360()
{
  return 0xD000000000000010;
}

unint64_t sub_236BB037C()
{
  return 0xD000000000000014;
}

uint64_t sub_236BB03C0()
{
  unsigned __int8 *v0;

  return sub_236BB030C(*v0);
}

uint64_t sub_236BB03C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_236BB2D4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_236BB03EC()
{
  return 0;
}

void sub_236BB03F8(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_236BB0404()
{
  sub_236BB2418();
  return sub_236BD0088();
}

uint64_t sub_236BB042C()
{
  sub_236BB2418();
  return sub_236BD0094();
}

uint64_t Message.Metadata.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  _DWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442A80);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(unsigned __int8 *)(v1 + 1);
  v14 = *(unsigned __int8 *)(v1 + 2);
  v15 = v8;
  v9 = *(_QWORD *)(v1 + 8);
  v12 = *(_QWORD *)(v1 + 16);
  v13 = v9;
  v11[1] = *(unsigned __int8 *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236BB2418();
  sub_236BD007C();
  v20 = 0;
  sub_236BCFF20();
  if (!v2)
  {
    v19 = 1;
    sub_236BCFF20();
    v18 = 2;
    sub_236BCFF20();
    v17 = 3;
    sub_236BCFF14();
    v16 = 4;
    sub_236BCFF20();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Message.Metadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442A90);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_236B8DA6C();
  v22 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236BB2418();
  sub_236BD0070();
  if (!v2)
  {
    v27 = 0;
    v10 = sub_236BCFEA8();
    v26 = 1;
    v11 = sub_236BCFEA8();
    v25 = 2;
    v21 = sub_236BCFEA8();
    v24 = 3;
    v19 = sub_236BCFE9C();
    v20 = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v23 = 4;
    v14 = sub_236BCFEA8();
    LODWORD(v22) = v10 & 1;
    v15 = v11 & 1;
    v16 = v21 & 1;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v17 = v14 & 1;
    *(_BYTE *)a2 = v22;
    *(_BYTE *)(a2 + 1) = v15;
    *(_BYTE *)(a2 + 2) = v16;
    v18 = v20;
    *(_QWORD *)(a2 + 8) = v19;
    *(_QWORD *)(a2 + 16) = v18;
    *(_BYTE *)(a2 + 24) = v17;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_236BB084C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Message.Metadata.init(from:)(a1, a2);
}

uint64_t sub_236BB0860(_QWORD *a1)
{
  return Message.Metadata.encode(to:)(a1);
}

void Message.timestamp.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*Message.timestamp.modify())()
{
  return nullsub_1;
}

uint64_t Message.invalidTimestamp.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t static Message.volumeKey.getter()
{
  return 0x6F6973736553584DLL;
}

uint64_t Message.metadata.setter(char *a1)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 2);
  v7 = a1[24];
  result = swift_bridgeObjectRelease();
  *(_BYTE *)(v1 + 40) = v2;
  *(_BYTE *)(v1 + 41) = v3;
  *(_BYTE *)(v1 + 42) = v4;
  *(_QWORD *)(v1 + 48) = v5;
  *(_QWORD *)(v1 + 56) = v6;
  *(_BYTE *)(v1 + 64) = v7;
  return result;
}

uint64_t (*Message.appName.modify())()
{
  return nullsub_1;
}

uint64_t sub_236BB092C()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(qword_2542AF0F8);
  __swift_allocate_value_buffer(v0, qword_2542AF0C8);
  __swift_project_value_buffer(v0, (uint64_t)qword_2542AF0C8);
  return sub_236BCF890();
}

uint64_t sub_236BB0990()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_236BB09D8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEE0);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = v0;
  off_2542AFB50 = (_UNKNOWN *)result;
  return result;
}

uint64_t sub_236BB09D8()
{
  uint64_t v1;
  uint64_t v2;

  sub_236BB32C4();
  v2 = sub_236BCFBC0();
  if (_s18AudioAnalyticsBase15DeviceUtilitiesO17hasRootsInstalledSbyFZ_0())
    sub_236B9F500(&v1, 0);
  if ((_s18AudioAnalyticsBase15DeviceUtilitiesO10hasSerial3SbyFZ_0() & 1) != 0)
    sub_236B9F500(&v1, 1);
  if (qword_2542AFFB0 != -1)
    swift_once();
  type metadata accessor for ThermalState(0);
  sub_236BCFC5C();
  if ((sub_236B8FDA0(v1, (uint64_t)&unk_2508278B8) & 1) != 0)
    sub_236B9F500(&v1, 2);
  return v2;
}

uint64_t sub_236BB0AC8()
{
  double v0;
  uint64_t v1;
  uint64_t result;

  if (qword_2542AF288 != -1)
    swift_once();
  v0 = *(double *)&qword_2542AFE28 * 10.0;
  type metadata accessor for PeriodicClosure();
  v1 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFED8);
  result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v1 + 16) = result;
  *(double *)(v1 + 24) = v0;
  off_2542AFB48 = (_UNKNOWN *)v1;
  return result;
}

uint64_t sub_236BB0B68()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFED0);
  result = swift_allocObject();
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0xE000000000000000;
  off_2542AFB58 = (_UNKNOWN *)result;
  return result;
}

uint64_t UntrustworthyReason.rawValue.getter()
{
  char *v0;

  return *(_QWORD *)&aRoot_2[8 * *v0];
}

uint64_t sub_236BB0BBC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236BB0BF0 + 4 * byte_236BD24D5[a1]))(0x79726F6765746163, 0xE800000000000000);
}

uint64_t sub_236BB0BF0()
{
  return 1701869940;
}

uint64_t sub_236BB0C00()
{
  return 0x746E65746E6F63;
}

uint64_t sub_236BB0C18()
{
  return 0x6D617473656D6974;
}

unint64_t sub_236BB0C34()
{
  return 0xD000000000000010;
}

uint64_t sub_236BB0C50()
{
  return 0x617461646174656DLL;
}

uint64_t sub_236BB0C64()
{
  return 0x656D614E707061;
}

uint64_t sub_236BB0C7C()
{
  unsigned __int8 *v0;

  return sub_236BB0BBC(*v0);
}

uint64_t sub_236BB0C84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_236BB2F64(a1, a2);
  *a3 = result;
  return result;
}

void sub_236BB0CA8(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_236BB0CB4()
{
  sub_236BB245C();
  return sub_236BD0088();
}

uint64_t sub_236BB0CDC()
{
  sub_236BB245C();
  return sub_236BD0094();
}

unint64_t static Message.CommonKeys.timestamp.getter()
{
  return 0xD000000000000015;
}

unint64_t static Message.CommonKeys.invalidTimestamp.getter()
{
  return 0xD000000000000011;
}

unint64_t static Message.CommonKeys.processUptimeMs.getter()
{
  return 0xD000000000000010;
}

unint64_t static Message.CommonKeys.systemUptimeSec.getter()
{
  return 0xD000000000000010;
}

unint64_t static Message.CommonKeys.retainMessage.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_236BB0D90()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_236BB1DE8((uint64_t)&unk_250826A58);
  result = swift_arrayDestroy();
  qword_2542B0F70 = v0;
  return result;
}

uint64_t static Message.== infix(_:_:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_236B8890C(v0);
  swift_bridgeObjectRelease();
  v2 = swift_bridgeObjectRetain();
  v3 = sub_236B8890C(v2);
  swift_bridgeObjectRelease();
  v4 = sub_236B89078((uint64_t)v1, (uint64_t)v3);
  swift_release();
  swift_release();
  return v4 & 1;
}

uint64_t sub_236BB0EEC()
{
  sub_236B9576C(&qword_256442B48, (uint64_t (*)(uint64_t))type metadata accessor for AudioEventCategory, (uint64_t)&unk_236BD0DF4);
  return sub_236BCFB3C();
}

uint64_t sub_236BB0F60()
{
  sub_236B9576C(&qword_256442B48, (uint64_t (*)(uint64_t))type metadata accessor for AudioEventCategory, (uint64_t)&unk_236BD0DF4);
  return sub_236BCFB18();
}

uint64_t sub_236BB0FC4()
{
  sub_236B9576C(&qword_256442B40, (uint64_t (*)(uint64_t))type metadata accessor for AudioEventType, (uint64_t)&unk_236BD0E30);
  return sub_236BCFB30();
}

uint64_t sub_236BB1038()
{
  sub_236B9576C(&qword_256442B40, (uint64_t (*)(uint64_t))type metadata accessor for AudioEventType, (uint64_t)&unk_236BD0E30);
  return sub_236BCFB0C();
}

uint64_t Message.encode(to:)(_QWORD *a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD v14[2];
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442A98);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v24 = *((unsigned __int16 *)v1 + 2);
  v9 = *((_QWORD *)v1 + 1);
  v22 = *((_QWORD *)v1 + 3);
  v23 = v9;
  LODWORD(v9) = *((unsigned __int8 *)v1 + 32);
  v20 = *((unsigned __int8 *)v1 + 40);
  v21 = v9;
  LODWORD(v6) = *((unsigned __int8 *)v1 + 42);
  v15 = *((unsigned __int8 *)v1 + 41);
  v16 = v6;
  v17 = *((_QWORD *)v1 + 6);
  v19 = *((_QWORD *)v1 + 7);
  v18 = *((unsigned __int8 *)v1 + 64);
  v10 = *((_QWORD *)v1 + 10);
  v14[0] = *((_QWORD *)v1 + 9);
  v14[1] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236BB245C();
  sub_236BD007C();
  LODWORD(v25) = v8;
  v29 = 0;
  type metadata accessor for AudioEventCategory(0);
  sub_236B9576C(&qword_256442AA8, (uint64_t (*)(uint64_t))type metadata accessor for AudioEventCategory, (uint64_t)&protocol conformance descriptor for AudioEventCategory);
  sub_236BCFF38();
  if (!v2)
  {
    v11 = v23;
    v12 = v20;
    LOWORD(v25) = v24;
    v29 = 1;
    type metadata accessor for AudioEventType(0);
    sub_236B9576C(&qword_256442AB0, (uint64_t (*)(uint64_t))type metadata accessor for AudioEventType, (uint64_t)&protocol conformance descriptor for AudioEventType);
    sub_236BCFF38();
    v25 = v11;
    v29 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256442AB8);
    sub_236BB2528(&qword_256442AC0, (uint64_t (*)(void))sub_236BB24A0, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    sub_236BCFF38();
    LOBYTE(v25) = 3;
    sub_236BCFF2C();
    LOBYTE(v25) = 4;
    sub_236BCFF08();
    LOBYTE(v25) = v12;
    BYTE1(v25) = v15;
    BYTE2(v25) = v16;
    v26 = v17;
    v27 = v19;
    v28 = v18;
    v29 = 5;
    sub_236BB24E4();
    sub_236BCFF38();
    LOBYTE(v25) = 6;
    sub_236BCFEFC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Message.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  char v37;
  char v38;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442AD8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_236B8DA6C();
  v32 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236BB245C();
  sub_236BD0070();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
  else
  {
    type metadata accessor for AudioEventCategory(0);
    v37 = 0;
    sub_236B9576C(&qword_256442AE0, (uint64_t (*)(uint64_t))type metadata accessor for AudioEventCategory, (uint64_t)&protocol conformance descriptor for AudioEventCategory);
    sub_236BCFEC0();
    v10 = v33;
    type metadata accessor for AudioEventType(0);
    v37 = 1;
    sub_236B9576C(&qword_256442AE8, (uint64_t (*)(uint64_t))type metadata accessor for AudioEventType, (uint64_t)&protocol conformance descriptor for AudioEventType);
    sub_236BCFEC0();
    v11 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256442AB8);
    v37 = 2;
    sub_236BB2528(&qword_256442AF0, (uint64_t (*)(void))sub_236BB259C, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
    sub_236BCFEC0();
    v31 = v33;
    LOBYTE(v33) = 3;
    sub_236BCFEB4();
    v14 = v13;
    LOBYTE(v33) = 4;
    v30 = sub_236BCFE90();
    v38 = v15 & 1;
    v37 = 5;
    sub_236BB25E0();
    sub_236BCFEC0();
    swift_bridgeObjectRelease();
    v28 = BYTE1(v33);
    v29 = v33;
    v27 = BYTE2(v33);
    v26 = v34;
    v32 = v35;
    v25 = v36;
    LOBYTE(v33) = 6;
    v16 = sub_236BCFE84();
    v18 = v17;
    v19 = *(void (**)(char *, uint64_t))(v6 + 8);
    v24 = v16;
    v19(v8, v5);
    swift_bridgeObjectRelease();
    v20 = v38;
    *(_DWORD *)a2 = v10;
    *(_WORD *)(a2 + 4) = v11;
    v21 = v30;
    *(_QWORD *)(a2 + 8) = v31;
    *(_QWORD *)(a2 + 16) = v14;
    *(_QWORD *)(a2 + 24) = v21;
    *(_BYTE *)(a2 + 32) = v20;
    *(_BYTE *)(a2 + 40) = v29;
    *(_BYTE *)(a2 + 41) = v28;
    *(_BYTE *)(a2 + 42) = v27;
    v22 = v32;
    *(_QWORD *)(a2 + 48) = v26;
    *(_QWORD *)(a2 + 56) = v22;
    *(_BYTE *)(a2 + 64) = v25;
    *(_QWORD *)(a2 + 72) = v24;
    *(_QWORD *)(a2 + 80) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_236BB17C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Message.init(from:)(a1, a2);
}

uint64_t sub_236BB17D8(_QWORD *a1)
{
  return Message.encode(to:)(a1);
}

AudioAnalyticsBase::UntrustworthyReason_optional __swiftcall UntrustworthyReason.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  AudioAnalyticsBase::UntrustworthyReason_optional result;
  char v5;

  v2 = v1;
  v3 = sub_236BCFE60();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t sub_236BB1848(char *a1, char *a2)
{
  return sub_236BCA4AC(*a1, *a2);
}

uint64_t sub_236BB1854()
{
  sub_236BD0028();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

uint64_t sub_236BB18AC()
{
  sub_236BCFA34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_236BB18D8()
{
  sub_236BD0028();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

AudioAnalyticsBase::UntrustworthyReason_optional sub_236BB192C(Swift::String *a1)
{
  return UntrustworthyReason.init(rawValue:)(*a1);
}

void sub_236BB1938(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = *(_QWORD *)&aRoot_2[8 * *v1];
  a1[1] = 0xE400000000000000;
}

uint64_t sub_236BB1958(char *a1, char *a2)
{
  return sub_236BAF454(*a1, *a2);
}

uint64_t sub_236BB1964(char *a1, char *a2)
{
  return sub_236BAF4CC(*a1, *a2);
}

uint64_t sub_236BB1970(char *a1, char *a2)
{
  return sub_236BAF540(*a1, *a2);
}

uint64_t sub_236BB197C()
{
  sub_236BB323C();
  return sub_236BCFB24();
}

uint64_t sub_236BB19D8()
{
  sub_236BB323C();
  return sub_236BCFB00();
}

uint64_t sub_236BB1A24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_236B8BFC0(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_236B8C6E8();
      v12 = v15;
    }
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v12 + 56) + 24 * v8;
    v14 = *(_BYTE *)(v13 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v13;
    *(_BYTE *)(a3 + 16) = v14;
    sub_236B8D7AC(v8, v12);
    *v4 = v12;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = -1;
  }
  return result;
}

uint64_t sub_236BB1B14(_BYTE *__src, _BYTE *a2, unint64_t a3, _BYTE *__dst)
{
  _BYTE *v4;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  unint64_t v9;
  _BYTE *v10;
  char v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  char v18;
  uint64_t result;
  _BYTE *v20;
  _BYTE *v21;
  void *v22;

  v22 = __src;
  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a3 - (_QWORD)a2;
  v21 = __dst;
  if (a2 - __src >= (uint64_t)(a3 - (_QWORD)a2))
  {
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_43;
    if (__dst != a2 || a3 <= (unint64_t)__dst)
      memmove(__dst, a2, a3 - (_QWORD)a2);
    v13 = &v4[v9];
    v20 = &v4[v9];
    v22 = v6;
    if (v7 >= v6 || (_BYTE *)a3 == v6)
    {
LABEL_42:
      sub_236BC5D88(&v22, (const void **)&v21, &v20);
      return 1;
    }
    v14 = (_BYTE *)(a3 - 1);
    v15 = v6;
    while (1)
    {
      v16 = (char)*--v15;
      v17 = v14 + 1;
      if (*(_QWORD *)&aRoot_2[8 * (char)*(v13 - 1)] == *(_QWORD *)&aRoot_2[8 * v16])
        break;
      v18 = sub_236BCFF98();
      swift_bridgeObjectRelease_n();
      if ((v18 & 1) == 0)
        goto LABEL_36;
      if (v17 != v6 || v14 >= v6)
        *v14 = *v15;
      v22 = v15;
      if (v15 <= v7)
        goto LABEL_42;
LABEL_41:
      --v14;
      v6 = v15;
      if (v13 <= v4)
        goto LABEL_42;
    }
    swift_bridgeObjectRelease_n();
LABEL_36:
    v20 = v13 - 1;
    if (v17 < v13 || v14 >= v13 || v17 != v13)
      *v14 = *(v13 - 1);
    v15 = v6;
    --v13;
    if (v6 <= v7)
      goto LABEL_42;
    goto LABEL_41;
  }
  if ((v8 & 0x8000000000000000) == 0)
  {
    if (__dst != __src || a2 <= __dst)
      memmove(__dst, __src, v8);
    v10 = &v4[v8];
    v20 = &v4[v8];
    if (v6 != v7 && (unint64_t)v6 < a3)
    {
      while (1)
      {
        if (*(_QWORD *)&aRoot_2[8 * (char)*v6] == *(_QWORD *)&aRoot_2[8 * (char)*v4])
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v11 = sub_236BCFF98();
          swift_bridgeObjectRelease_n();
          if ((v11 & 1) != 0)
          {
            v12 = v6 + 1;
            if (v7 < v6 || v7 >= v12 || v7 != v6)
              *v7 = *v6;
            goto LABEL_18;
          }
        }
        if (v7 != v4)
          *v7 = *v4;
        v21 = ++v4;
        v12 = v6;
LABEL_18:
        ++v7;
        if (v4 < v10)
        {
          v6 = v12;
          if ((unint64_t)v12 < a3)
            continue;
        }
        v22 = v7;
        goto LABEL_42;
      }
    }
    goto LABEL_42;
  }
LABEL_43:
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

uint64_t sub_236BB1DE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_236BCFBC0();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_236B9F354(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t _s18AudioAnalyticsBase19UntrustworthyReasonO1loiySbAC_ACtFZ_0(char *a1, char *a2)
{
  char v2;

  if (*(_QWORD *)&aRoot_2[8 * *a1] == *(_QWORD *)&aRoot_2[8 * *a2])
    v2 = 0;
  else
    v2 = sub_236BCFF98();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_236BB1EE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  sub_236BB3280();
  result = sub_236BCFBC0();
  v7 = result;
  if (v2)
  {
    v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v5 = *v4++;
      sub_236B9F698(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_236BB1F50(uint64_t result, int a2, __int16 a3)
{
  uint64_t *v3;
  char v4;
  char v5;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;

  if (a2 == 7 && a3 == 6)
  {
    v3 = (uint64_t *)result;
    if (qword_2542AF1C0 != -1)
      swift_once();
    swift_beginAccess();
    v4 = sub_236B8825C();
    if (v4 == 2)
      v5 = HIBYTE(word_2542AF1B0);
    else
      v5 = v4 & 1;
    if (v4 == 2)
      v6 = HIBYTE(word_2542AF1B0);
    else
      v6 = v4;
    LOBYTE(word_2542AF1B0) = v5;
    swift_endAccess();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *v3;
    *v3 = 0x8000000000000000;
    sub_236B8BA30(v6 & 1, 0, 3, 0xD000000000000013, 0x8000000236BD5CA0, isUniquelyReferenced_nonNull_native);
    *v3 = v8;
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_236BB2070(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11[2];
  char v12;

  v1 = *(_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    v2 = result;
    result = sub_236B8BFC0(0xD00000000000001ALL, 0x8000000236BD4730);
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(v1 + 56) + 24 * result;
      v5 = *(_QWORD *)v4;
      v6 = *(_QWORD *)(v4 + 8);
      v7 = *(_BYTE *)(v4 + 16);
      v8 = *(_QWORD *)(*(_QWORD *)v2 + 16);
      sub_236B8C348(*(_QWORD *)v4, v6, v7);
      if (v8 && (sub_236B8BFC0(0xD000000000000018, 0x8000000236BD44A0), (v9 & 1) != 0))
      {
        sub_236B8C2D4(v5, v6, v7);
      }
      else
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v11[0] = *(_QWORD *)v2;
        *(_QWORD *)v2 = 0x8000000000000000;
        sub_236B8BA30(v5, v6, v7, 0xD000000000000018, 0x8000000236BD44A0, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)v2 = v11[0];
        swift_bridgeObjectRelease();
      }
      sub_236BB1A24(0xD00000000000001ALL, 0x8000000236BD4730, (uint64_t)v11);
      return sub_236B95F4C(v11[0], v11[1], v12);
    }
  }
  return result;
}

uint64_t *sub_236BB21B8(uint64_t *result)
{
  uint64_t *v1;
  char v2;
  char v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;

  if (*(_QWORD *)(*result + 16))
  {
    v1 = result;
    *(double *)&result = COERCE_DOUBLE(sub_236B8BFC0(0x6F6973736553584DLL, 0xEF656D756C6F566ELL));
    if ((v2 & 1) != 0)
    {
      *(Swift::Double_optional *)(&result - 1) = SimpleType.unwrapToDouble()();
      if ((v3 & 1) == 0)
      {
        *(double *)&v4 = round(*(double *)&result * 10000.0) / 10000.0;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v6 = *v1;
        *v1 = 0x8000000000000000;
        sub_236B8BA30(v4, 0, 2, 0x6F6973736553584DLL, 0xEF656D756C6F566ELL, isUniquelyReferenced_nonNull_native);
        *v1 = v6;
        *(double *)&result = COERCE_DOUBLE(swift_bridgeObjectRelease());
      }
    }
  }
  return result;
}

double sub_236BB22C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  double v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  double v13;
  uint64_t v15;
  double v16;
  __int128 v17;
  char v18;
  Swift::Double_optional v19;

  v2 = sub_236BCF878();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_236BCF86C();
  sub_236BCF860();
  v7 = v6;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (*(_QWORD *)(a1 + 16))
  {
    v8 = sub_236B8BFC0(0xD000000000000015, 0x8000000236BD4530);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD *)(a1 + 56) + 24 * v8;
      v11 = *(_BYTE *)(v10 + 16);
      v17 = *(_OWORD *)v10;
      v18 = v11;
      v19 = SimpleType.unwrapToDouble()();
      if ((v12 & 1) == 0)
      {
        v13 = *(double *)&v19.is_nil;
        if (qword_2542AF280 != -1)
        {
          v16 = *(double *)&v19.is_nil;
          swift_once();
          v13 = v16;
        }
        if (v7 - *(double *)&qword_2542AFE10 <= v13)
          return v13;
      }
    }
  }
  return v7;
}

unint64_t sub_236BB2418()
{
  unint64_t result;

  result = qword_256442A88;
  if (!qword_256442A88)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD29DC, &type metadata for Message.Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442A88);
  }
  return result;
}

unint64_t sub_236BB245C()
{
  unint64_t result;

  result = qword_256442AA0;
  if (!qword_256442AA0)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD298C, &type metadata for Message.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442AA0);
  }
  return result;
}

unint64_t sub_236BB24A0()
{
  unint64_t result;

  result = qword_256442AC8;
  if (!qword_256442AC8)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for SimpleType, &type metadata for SimpleType);
    atomic_store(result, (unint64_t *)&qword_256442AC8);
  }
  return result;
}

unint64_t sub_236BB24E4()
{
  unint64_t result;

  result = qword_256442AD0;
  if (!qword_256442AD0)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for Message.Metadata, &type metadata for Message.Metadata);
    atomic_store(result, (unint64_t *)&qword_256442AD0);
  }
  return result;
}

uint64_t sub_236BB2528(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256442AB8);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x23B7FE8AC](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_236BB259C()
{
  unint64_t result;

  result = qword_256442AF8;
  if (!qword_256442AF8)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for SimpleType, &type metadata for SimpleType);
    atomic_store(result, (unint64_t *)&qword_256442AF8);
  }
  return result;
}

unint64_t sub_236BB25E0()
{
  unint64_t result;

  result = qword_256442B00;
  if (!qword_256442B00)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for Message.Metadata, &type metadata for Message.Metadata);
    atomic_store(result, (unint64_t *)&qword_256442B00);
  }
  return result;
}

unint64_t sub_236BB2628()
{
  unint64_t result;

  result = qword_2542AF748;
  if (!qword_2542AF748)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for UntrustworthyReason, &type metadata for UntrustworthyReason);
    atomic_store(result, (unint64_t *)&qword_2542AF748);
  }
  return result;
}

uint64_t assignWithCopy for Message(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithCopy for Message.Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Message.Metadata(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Message.Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Message.Metadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for Message.CommonKeys()
{
  return &type metadata for Message.CommonKeys;
}

uint64_t getEnumTagSinglePayload for SystemMonitorConfig.MonitorType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UntrustworthyReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_236BB2984 + 4 * byte_236BD24E1[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_236BB29B8 + 4 * byte_236BD24DC[v4]))();
}

uint64_t sub_236BB29B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BB29C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BB29C8);
  return result;
}

uint64_t sub_236BB29D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BB29DCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_236BB29E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BB29E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UntrustworthyReason()
{
  return &type metadata for UntrustworthyReason;
}

uint64_t storeEnumTagSinglePayload for Message.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_236BB2A50 + 4 * byte_236BD24EB[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_236BB2A84 + 4 * byte_236BD24E6[v4]))();
}

uint64_t sub_236BB2A84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BB2A8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BB2A94);
  return result;
}

uint64_t sub_236BB2AA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BB2AA8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_236BB2AAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BB2AB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Message.CodingKeys()
{
  return &type metadata for Message.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Message.Metadata.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_236BB2B1C + 4 * byte_236BD24F5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_236BB2B50 + 4 * byte_236BD24F0[v4]))();
}

uint64_t sub_236BB2B50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BB2B58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BB2B60);
  return result;
}

uint64_t sub_236BB2B6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BB2B74);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_236BB2B78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BB2B80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Message.Metadata.CodingKeys()
{
  return &type metadata for Message.Metadata.CodingKeys;
}

unint64_t sub_236BB2BA0()
{
  unint64_t result;

  result = qword_256442B08;
  if (!qword_256442B08)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD28AC, &type metadata for Message.Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442B08);
  }
  return result;
}

unint64_t sub_236BB2BE8()
{
  unint64_t result;

  result = qword_256442B10;
  if (!qword_256442B10)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD2964, &type metadata for Message.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442B10);
  }
  return result;
}

unint64_t sub_236BB2C30()
{
  unint64_t result;

  result = qword_256442B18;
  if (!qword_256442B18)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD28D4, &type metadata for Message.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442B18);
  }
  return result;
}

unint64_t sub_236BB2C78()
{
  unint64_t result;

  result = qword_256442B20;
  if (!qword_256442B20)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD28FC, &type metadata for Message.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442B20);
  }
  return result;
}

unint64_t sub_236BB2CC0()
{
  unint64_t result;

  result = qword_256442B28;
  if (!qword_256442B28)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD281C, &type metadata for Message.Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442B28);
  }
  return result;
}

unint64_t sub_236BB2D08()
{
  unint64_t result;

  result = qword_256442B30;
  if (!qword_256442B30)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD2844, &type metadata for Message.Metadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442B30);
  }
  return result;
}

uint64_t sub_236BB2D4C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x646E756465527369 && a2 == 0xEB00000000746E61;
  if (v2 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6364616F72427369 && a2 == 0xEB00000000747361 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000236BD5BC0 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000236BD5C40 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000236BD5C60)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_236BCFF98();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_236BB2F64(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x79726F6765746163 && a2 == 0xE800000000000000;
  if (v2 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000236BD5C80 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x656D614E707061 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_236BCFF98();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t sub_236BB323C()
{
  unint64_t result;

  result = qword_256442B38;
  if (!qword_256442B38)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for UntrustworthyReason, &type metadata for UntrustworthyReason);
    atomic_store(result, (unint64_t *)&qword_256442B38);
  }
  return result;
}

unint64_t sub_236BB3280()
{
  unint64_t result;

  result = qword_2542AF9E8;
  if (!qword_2542AF9E8)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for Config.WorkerConfigs, &type metadata for Config.WorkerConfigs);
    atomic_store(result, (unint64_t *)&qword_2542AF9E8);
  }
  return result;
}

unint64_t sub_236BB32C4()
{
  unint64_t result;

  result = qword_2542AF740;
  if (!qword_2542AF740)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for UntrustworthyReason, &type metadata for UntrustworthyReason);
    atomic_store(result, (unint64_t *)&qword_2542AF740);
  }
  return result;
}

uint64_t sub_236BB3310(void (*a1)(uint64_t *__return_ptr, uint64_t *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t *i;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  __int16 v25;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;

  v4 = v3;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v51 = MEMORY[0x24BEE4AF8];
    sub_236BA5678(0, v5, 0);
    v6 = v51;
    for (i = (uint64_t *)(a3 + 32); ; ++i)
    {
      v38 = *i;
      swift_bridgeObjectRetain();
      a1(&v39, &v38, &v37);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      v9 = v39;
      v10 = WORD2(v39);
      v11 = v40;
      v12 = v41;
      v13 = v42;
      v14 = v43;
      v15 = v44;
      v16 = v45;
      v17 = v46;
      v18 = v47;
      v19 = v48;
      v21 = *(_QWORD *)(v6 + 16);
      v20 = *(_QWORD *)(v6 + 24);
      v22 = v49;
      v23 = v50;
      v51 = v6;
      if (v21 >= v20 >> 1)
      {
        v25 = WORD2(v39);
        v34 = v42;
        v35 = v40;
        v32 = v44;
        v33 = v43;
        v30 = v46;
        v31 = v45;
        v28 = v48;
        v29 = v47;
        v27 = v50;
        sub_236BA5678(v20 > 1, v21 + 1, 1);
        v23 = v27;
        v19 = v28;
        v18 = v29;
        v17 = v30;
        v16 = v31;
        v15 = v32;
        v14 = v33;
        v13 = v34;
        v11 = v35;
        v10 = v25;
        v6 = v51;
      }
      *(_QWORD *)(v6 + 16) = v21 + 1;
      v24 = v6 + 88 * v21;
      *(_DWORD *)(v24 + 32) = v9;
      *(_WORD *)(v24 + 36) = v10;
      *(_QWORD *)(v24 + 40) = v11;
      *(_QWORD *)(v24 + 48) = v12;
      *(_QWORD *)(v24 + 56) = v13;
      *(_BYTE *)(v24 + 64) = v14;
      *(_BYTE *)(v24 + 72) = v15;
      *(_BYTE *)(v24 + 73) = v16;
      *(_BYTE *)(v24 + 74) = v17;
      *(_QWORD *)(v24 + 80) = v18;
      *(_QWORD *)(v24 + 88) = v19;
      *(_BYTE *)(v24 + 96) = v22;
      *(_OWORD *)(v24 + 104) = v23;
      if (!--v5)
        return v6;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v6;
}

id static MessageUtilities.readMessages(clazz:filenamePrefix:doSlideTimes:timeRequired:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t ObjCClassFromMetadata;
  id v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  id v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v29 = a4;
  v30 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF318);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_236BCF800();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v28 - v15;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v18 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v32 = a2;
  v33 = a3;
  v19 = (void *)sub_236BCF998();
  v20 = (void *)sub_236BCF998();
  v21 = objc_msgSend(v18, sel_URLForResource_withExtension_, v19, v20);

  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_6;
  }
  sub_236BCF7DC();

  v20 = *(void **)(v11 + 32);
  ((void (*)(char *, char *, uint64_t))v20)(v9, v14, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_6:
    sub_236BB59B4((uint64_t)v9, &qword_2542AF318);
    type metadata accessor for MessageUtilityError();
    sub_236B9576C(&qword_256442B50, (uint64_t (*)(uint64_t))type metadata accessor for MessageUtilityError, (uint64_t)&unk_236BD2B40);
    swift_allocError();
    v24 = v33;
    *v25 = v32;
    v25[1] = v24;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    swift_willThrow();
    return v20;
  }
  ((void (*)(char *, char *, uint64_t))v20)(v16, v9, v10);
  v22 = v31;
  v23 = sub_236BB47A0((uint64_t)v16, (id)(v30 & 1));
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  else
  {
    v27 = v23;
    if ((v29 & 1) != 0)
    {
      v20 = (void *)sub_236BB4CE4((uint64_t)v23, 0, 1, 60.0);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      return v27;
    }
  }
  return v20;
}

uint64_t type metadata accessor for MessageUtilityError()
{
  uint64_t result;

  result = qword_256442BD0;
  if (!qword_256442BD0)
    return swift_getSingletonMetadata();
  return result;
}

id static MessageUtilities.readMessages(from:timeRequired:)(uint64_t a1, void *a2)
{
  return sub_236BB47A0(a1, a2);
}

uint64_t static MessageUtilities.slideTimes(messages:startingDelta:maxPause:)(uint64_t a1, uint64_t a2, char a3, double a4)
{
  return sub_236BB4CE4(a1, a2, a3 & 1, a4);
}

uint64_t sub_236BB385C(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;

  result = sub_236BB46F0(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = sub_236BB59F0(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_236BB38D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, _DWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  uint64_t result;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  int v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int16 v57;
  uint64_t v58;
  __int128 v59;
  char v60;
  char v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  __int128 v77;
  __int128 v78;
  char v79;
  char v80;
  char v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  uint64_t v87;

  v71 = a4;
  v72 = a2;
  v6 = v5;
  v70 = a5;
  v9 = sub_236BCF800();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v67 - v14;
  v16 = *a1;
  v17 = sub_236BB385C(v16);
  if (!v18)
    goto LABEL_11;
  v19 = v18;
  if (!*(_QWORD *)(v16 + 16)
    || (v20 = v17, v21 = sub_236B8BFC0(v17, v18), (v22 & 1) == 0)
    || (sub_236B8E794(*(_QWORD *)(v16 + 56) + 32 * v21, (uint64_t)&v77),
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542AFD90),
        (swift_dynamicCast() & 1) == 0))
  {
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    type metadata accessor for MessageUtilityError();
    sub_236B9576C(&qword_256442B50, (uint64_t (*)(uint64_t))type metadata accessor for MessageUtilityError, (uint64_t)&unk_236BD2B40);
    v6 = swift_allocError();
    v28 = v27;
    v29 = (char *)v27 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(qword_256442B58) + 48);
    *v28 = 0xD000000000000014;
    v28[1] = 0x8000000236BD5E10;
LABEL_12:
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v29, v72, v9);
LABEL_13:
    swift_storeEnumTagMultiPayload();
    result = swift_willThrow();
LABEL_14:
    *v71 = v6;
    return result;
  }
  v23 = v73;
  v24 = Dictionary<>.asSimpleType()(v73);
  if (!v24)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v87 = v24;
  v69 = v24;
  if ((a3 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  if (*(_QWORD *)(v23 + 16))
  {
    swift_bridgeObjectRetain();
    v25 = sub_236B8BFC0(0xD000000000000015, 0x8000000236BD4530);
    if ((v26 & 1) != 0)
    {
      sub_236B8E794(*(_QWORD *)(v23 + 56) + 32 * v25, (uint64_t)&v77);
    }
    else
    {
      v77 = 0u;
      v78 = 0u;
    }
  }
  else
  {
    v77 = 0u;
    v78 = 0u;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v78 + 1))
  {
    sub_236BB59B4((uint64_t)&v77, &qword_2542AFF90);
    goto LABEL_28;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    type metadata accessor for MessageUtilityError();
    sub_236B9576C(&qword_256442B50, (uint64_t (*)(uint64_t))type metadata accessor for MessageUtilityError, (uint64_t)&unk_236BD2B40);
    v6 = swift_allocError();
    v44 = v43;
    v29 = (char *)v43 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(qword_256442B58) + 48);
    *v44 = 0xD000000000000013;
    v44[1] = 0x8000000236BD5E30;
    goto LABEL_12;
  }
LABEL_21:
  *(_QWORD *)&v77 = v20;
  *((_QWORD *)&v77 + 1) = v19;
  v73 = 24415;
  v74 = 0xE200000000000000;
  sub_236B8D9A0();
  v31 = (_QWORD *)sub_236BCFCE0();
  if (v31[2] != 3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    type metadata accessor for MessageUtilityError();
    sub_236B9576C(&qword_256442B50, (uint64_t (*)(uint64_t))type metadata accessor for MessageUtilityError, (uint64_t)&unk_236BD2B40);
    v6 = swift_allocError();
    v40 = v39;
    v41 = (char *)v39 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(qword_256442B58) + 48);
    strcpy((char *)&v77, "Invalid key! ");
    HIWORD(v77) = -4864;
    sub_236BCFA58();
    swift_bridgeObjectRelease();
    v42 = *((_QWORD *)&v77 + 1);
    *v40 = v77;
    v40[1] = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v41, v72, v9);
    goto LABEL_13;
  }
  result = swift_bridgeObjectRelease();
  v32 = v31[2];
  if (!v32)
  {
    __break(1u);
    goto LABEL_45;
  }
  if (v32 == 1)
  {
LABEL_45:
    __break(1u);
    return result;
  }
  v33 = v31[4];
  v34 = v31[5];
  v35 = v31[7];
  v67 = v31[6];
  swift_bridgeObjectRetain();
  v68 = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v36 = sub_236BCECB8(v33, v34);
  v37 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v37(v15, v72, v9);
  if ((v36 & 0x100000000) != 0)
  {
    v45 = sub_236BB3FD4(v33, v34, (uint64_t)v15);
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
LABEL_35:
      result = swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    v38 = v45;
  }
  else
  {
    v38 = v36;
  }
  v46 = *(void (**)(char *, uint64_t))(v10 + 8);
  v46(v15, v9);
  swift_bridgeObjectRelease();
  v47 = v67;
  v48 = sub_236BCDAE4(v67, v68);
  v37(v13, v72, v9);
  if ((v48 & 0x10000) != 0)
  {
    v49 = sub_236BB40FC(v47, v68, (uint64_t)v13);
    if (v6)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v46(v13, v9);
      goto LABEL_35;
    }
    LOWORD(v48) = v49;
  }
  v46(v13, v9);
  swift_bridgeObjectRelease();
  v73 = 0;
  v74 = 0;
  v76 = 0;
  v75 = 0;
  v50 = v69;
  swift_bridgeObjectRetain();
  Message.init(category:type:content:metadata:)(v38, v48, v50, (unint64_t *)&v73, (uint64_t)&v77);
  if (*(_QWORD *)(v50 + 16) && (v51 = sub_236B8BFC0(0xD000000000000010, 0x8000000236BD5BC0), (v52 & 1) != 0))
  {
    v53 = *(_QWORD *)(v50 + 56) + 24 * v51;
    v54 = *(_QWORD *)v53;
    v55 = *(_QWORD *)(v53 + 8);
    v56 = *(unsigned __int8 *)(v53 + 16);
    sub_236B8C348(*(_QWORD *)v53, v55, *(_BYTE *)(v53 + 16));
    swift_bridgeObjectRelease();
    if (v56 == 3)
    {
      v82 = v54 & 1;
      sub_236BB1A24(0xD000000000000010, 0x8000000236BD5BC0, (uint64_t)&v73);
      sub_236B95F4C(v73, v74, v75);
    }
    else
    {
      sub_236B8C2D4(v54, v55, v56);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v57 = WORD2(v77);
  v58 = *((_QWORD *)&v77 + 1);
  v59 = v78;
  v60 = v79;
  v61 = v80;
  v62 = v81;
  v63 = v82;
  v64 = v83;
  v65 = v84;
  v66 = v85;
  result = (uint64_t)v70;
  *v70 = v77;
  *(_WORD *)(result + 4) = v57;
  *(_QWORD *)(result + 8) = v58;
  *(_OWORD *)(result + 16) = v59;
  *(_BYTE *)(result + 32) = v60;
  *(_BYTE *)(result + 40) = v61;
  *(_BYTE *)(result + 41) = v62;
  *(_BYTE *)(result + 42) = v63;
  *(_QWORD *)(result + 48) = v64;
  *(_QWORD *)(result + 56) = v65;
  *(_BYTE *)(result + 64) = v66;
  *(_OWORD *)(result + 72) = v86;
  return result;
}

uint64_t sub_236BB3FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;

  type metadata accessor for MessageUtilityError();
  sub_236B9576C(&qword_256442B50, (uint64_t (*)(uint64_t))type metadata accessor for MessageUtilityError, (uint64_t)&unk_236BD2B40);
  swift_allocError();
  v5 = v4;
  v6 = (char *)v4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(qword_256442B58) + 48);
  sub_236BCFD4C();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  *v5 = 0xD00000000000001CLL;
  v5[1] = 0x8000000236BD5E70;
  v7 = sub_236BCF800();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a3, v7);
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t sub_236BB40FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;

  type metadata accessor for MessageUtilityError();
  sub_236B9576C(&qword_256442B50, (uint64_t (*)(uint64_t))type metadata accessor for MessageUtilityError, (uint64_t)&unk_236BD2B40);
  swift_allocError();
  v5 = v4;
  v6 = (char *)v4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(qword_256442B58) + 48);
  sub_236BCFD4C();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  *v5 = 0xD000000000000018;
  v5[1] = 0x8000000236BD5E50;
  v7 = sub_236BCF800();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a3, v7);
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

double sub_236BB4224@<D0>(uint64_t a1@<X0>, double *a2@<X1>, double a3@<X2>, char a4@<W3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  int v10;
  __int16 v11;
  uint64_t v12;
  double *v13;
  int v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  int v39;
  int v40;
  uint64_t v41;
  char v42;
  unint64_t v43[3];
  char v44;
  _QWORD v45[4];
  char v46;
  char v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  unint64_t v54;

  v10 = *(_DWORD *)a1;
  v11 = *(_WORD *)(a1 + 4);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = (double *)(a1 + 16);
  v14 = *(unsigned __int8 *)(a1 + 32);
  v41 = *(unsigned __int8 *)(a1 + 40);
  v39 = *(unsigned __int8 *)(a1 + 41);
  v40 = *(unsigned __int8 *)(a1 + 42);
  v15 = *(_QWORD *)(a1 + 56);
  v54 = *(_QWORD *)(a1 + 48);
  v42 = *(_BYTE *)(a1 + 64);
  if (!v14)
    v13 = (double *)(a1 + 24);
  v16 = *v13;
  swift_beginAccess();
  v17 = v16 + *a2;
  if ((a4 & 1) == 0)
  {
    v18 = v17 - *a5;
    if (v18 > a3)
    {
      v19 = v18 - a3;
      swift_beginAccess();
      v20 = *a2 - v19;
      *a2 = v20;
      v17 = v16 + v20;
    }
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v45[0] = v12;
  sub_236B8BA30(*(uint64_t *)&v17, 0, 2, 0xD000000000000015, 0x8000000236BD4530, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v22 = 256;
  if (!v39)
    v22 = 0;
  v23 = v22 | v41;
  v24 = 0x10000;
  if (!v40)
    v24 = 0;
  v43[0] = v23 | v24;
  v43[1] = v54;
  v43[2] = v15;
  v44 = v42;
  swift_bridgeObjectRetain();
  Message.init(category:type:content:metadata:)(v10, v11, v12, v43, (uint64_t)v45);
  v25 = v45[0];
  v26 = WORD2(v45[0]);
  v27 = v45[1];
  result = *(double *)&v45[2];
  v29 = v45[3];
  v30 = v46;
  v31 = v47;
  v32 = v48;
  v33 = v49;
  v34 = v50;
  v35 = v51;
  v36 = v52;
  v37 = v53;
  *a5 = v17;
  *(_DWORD *)a6 = v25;
  *(_WORD *)(a6 + 4) = v26;
  *(_QWORD *)(a6 + 8) = v27;
  *(double *)(a6 + 16) = result;
  *(_QWORD *)(a6 + 24) = v29;
  *(_BYTE *)(a6 + 32) = v30;
  *(_BYTE *)(a6 + 40) = v31;
  *(_BYTE *)(a6 + 41) = v32;
  *(_BYTE *)(a6 + 42) = v33;
  *(_QWORD *)(a6 + 48) = v34;
  *(_QWORD *)(a6 + 56) = v35;
  *(_BYTE *)(a6 + 64) = v36;
  *(_OWORD *)(a6 + 72) = v37;
  return result;
}

void sub_236BB4444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = sub_236BCF800();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for MessageUtilityError();
  MEMORY[0x24BDAC7A8](v2);
  sub_236BB5950(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_236BB4504 + 4 * byte_236BD2A70[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_236BB4504()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 64) = 0;
  *(_QWORD *)(v0 - 56) = 0xE000000000000000;
  sub_236BCFD4C();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 - 64) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 - 56) = 0x8000000236BD5D70;
  sub_236BCFA58();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  return *(_QWORD *)(v0 - 64);
}

uint64_t sub_236BB46F0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

id sub_236BB47A0(uint64_t a1, id a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  os_log_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  char v34;
  _QWORD v35[2];
  os_log_t v36;
  void *v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  id v42[4];
  _BYTE v43[32];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v5 = sub_236BCF800();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_236BCF80C();
  if (v2)
    return a2;
  v11 = v9;
  v12 = v10;
  v39 = (int)a2;
  v13 = (void *)objc_opt_self();
  v14 = (void *)sub_236BCF824();
  v42[0] = 0;
  a2 = objc_msgSend(v13, sel_JSONObjectWithData_options_error_, v14, 2, v42);

  v15 = v42[0];
  if (!a2)
  {
    v27 = v15;
    sub_236BCF794();

    swift_willThrow();
    sub_236B9E0F0(v11, v12);
    return a2;
  }
  v40 = v12;
  sub_236BCFD04();
  swift_unknownObjectRelease();
  sub_236B8E794((uint64_t)v43, (uint64_t)v42);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC0);
  if (!swift_dynamicCast())
  {
    a2 = (id)type metadata accessor for MessageUtilityError();
    sub_236B9576C(&qword_256442B50, (uint64_t (*)(uint64_t))type metadata accessor for MessageUtilityError, (uint64_t)&unk_236BD2B40);
    swift_allocError();
    v29 = v28;
    v30 = (char *)v28 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(qword_256442B58) + 48);
    *v29 = 0xD000000000000014;
    v29[1] = 0x8000000236BD5DC0;
LABEL_13:
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v30, a1, v5);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_236B9E0F0(v11, v40);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v43);
    return a2;
  }
  v16 = v41;
  if (!*(_QWORD *)(v41 + 16) || !*(_QWORD *)(*(_QWORD *)(v41 + 32) + 16))
  {
    swift_bridgeObjectRelease();
    a2 = (id)type metadata accessor for MessageUtilityError();
    sub_236B9576C(&qword_256442B50, (uint64_t (*)(uint64_t))type metadata accessor for MessageUtilityError, (uint64_t)&unk_236BD2B40);
    swift_allocError();
    v32 = v31;
    v30 = (char *)v31 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(qword_256442B58) + 48);
    *v32 = 0xD000000000000022;
    v32[1] = 0x8000000236BD5DE0;
    goto LABEL_13;
  }
  if (qword_2542AFD58 != -1)
    swift_once();
  v17 = sub_236BCF8C0();
  __swift_project_value_buffer(v17, (uint64_t)qword_2542AFD38);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  swift_bridgeObjectRetain_n();
  v18 = sub_236BCF8A8();
  v19 = sub_236BCFC38();
  v38 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v37 = (void *)swift_slowAlloc();
    v42[0] = v37;
    *(_DWORD *)v20 = 136380931;
    v35[0] = v20 + 4;
    v36 = v18;
    v21 = sub_236BCF7E8();
    v41 = sub_236B93FB0(v21, v22, (uint64_t *)v42);
    v35[1] = v42;
    sub_236BCFCC8();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_WORD *)(v20 + 12) = 2048;
    v23 = *(_QWORD *)(v16 + 16);
    swift_bridgeObjectRelease();
    v41 = v23;
    sub_236BCFCC8();
    swift_bridgeObjectRelease();
    v24 = v36;
    _os_log_impl(&dword_236B83000, v36, (os_log_type_t)v38, "Successfully parsed json file. { path=\"%{private}s\", entries=%ld }", (uint8_t *)v20, 0x16u);
    v25 = v37;
    swift_arrayDestroy();
    MEMORY[0x23B7FE96C](v25, -1, -1);
    MEMORY[0x23B7FE96C](v20, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

    v26 = swift_bridgeObjectRelease();
  }
  MEMORY[0x24BDAC7A8](v26);
  v35[-2] = a1;
  LOBYTE(v35[-1]) = v34 & 1;
  a2 = (id)sub_236BB3310((void (*)(uint64_t *__return_ptr, uint64_t *, uint64_t *))sub_236BB5994, (uint64_t)&v35[-4], v16);
  sub_236B9E0F0(v11, v40);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v43);
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_236BB4CE4(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  double v20;
  unint64_t v21;
  double v22;
  double *v23;
  unint64_t v24;
  double v25;
  double v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  unsigned __int8 v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  __int128 v64;
  uint64_t v65;
  _QWORD *v66;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  int64_t v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  __int128 v91;
  _QWORD v92[3];
  uint64_t v93;
  char v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  unsigned __int8 v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  __int128 v101;
  uint64_t v102;
  double v103;
  double v104;

  LODWORD(v4) = a3;
  *(_QWORD *)&v77 = a2;
  v7 = sub_236BCF878();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (v11)
  {
    v76 = v7;
    LODWORD(v78) = v4;
    v92[0] = MEMORY[0x24BEE4AF8];
    sub_236BA5694(0, v11, 0);
    v12 = v92[0];
    v13 = *(_QWORD *)(v92[0] + 16);
    v4 = a1;
    v14 = (_BYTE *)(a1 + 64);
    v15 = v11;
    do
    {
      v16 = (uint64_t *)(v14 - 16);
      if (!*v14)
        v16 = (uint64_t *)(v14 - 8);
      v17 = *v16;
      v92[0] = v12;
      v18 = *(_QWORD *)(v12 + 24);
      v19 = v13 + 1;
      if (v13 >= v18 >> 1)
      {
        sub_236BA5694(v18 > 1, v13 + 1, 1);
        v12 = v92[0];
      }
      *(_QWORD *)(v12 + 16) = v19;
      *(_QWORD *)(v12 + 8 * v13 + 32) = v17;
      v14 += 88;
      ++v13;
      --v15;
    }
    while (v15);
    a1 = v4;
    LOBYTE(v4) = v78;
    v7 = v76;
  }
  else
  {
    v19 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v19)
    {
      swift_bridgeObjectRelease();
      v36 = type metadata accessor for MessageUtilityError();
      sub_236B9576C(&qword_256442B50, (uint64_t (*)(uint64_t))type metadata accessor for MessageUtilityError, (uint64_t)&unk_236BD2B40);
      swift_allocError();
      *v66 = 0xD000000000000028;
      v66[1] = 0x8000000236BD5D90;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return v36;
    }
  }
  v20 = *(double *)(v12 + 32);
  v21 = v19 - 1;
  if (v19 == 1)
  {
    v22 = *(double *)(v12 + 32);
  }
  else
  {
    v23 = (double *)(v12 + 40);
    v24 = v19 - 1;
    v22 = *(double *)(v12 + 32);
    do
    {
      v25 = *v23++;
      v26 = v25;
      if (v25 < v22)
        v22 = v26;
      --v24;
    }
    while (v24);
    v27 = (double *)(v12 + 40);
    do
    {
      v28 = *v27++;
      v29 = v28;
      if (v20 < v28)
        v20 = v29;
      --v21;
    }
    while (v21);
  }
  swift_bridgeObjectRelease();
  sub_236BCF86C();
  sub_236BCF860();
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v104 = v31 - a4;
  v103 = v31 - a4 - v22;
  if (qword_2542AFD58 != -1)
    swift_once();
  v32 = sub_236BCF8C0();
  __swift_project_value_buffer(v32, (uint64_t)qword_2542AFD38);
  v33 = sub_236BCF8A8();
  v34 = sub_236BCFC38();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc();
    *(_DWORD *)v35 = 134218496;
    swift_beginAccess();
    *(double *)v92 = v103;
    sub_236BCFCC8();
    *(_WORD *)(v35 + 12) = 2048;
    *(double *)v92 = v22;
    sub_236BCFCC8();
    *(_WORD *)(v35 + 22) = 2048;
    *(double *)v92 = v20;
    sub_236BCFCC8();
    _os_log_impl(&dword_236B83000, v33, v34, "Time info. { timeDelta=%f, minTime=%f, maxTime=%f }", (uint8_t *)v35, 0x20u);
    MEMORY[0x23B7FE96C](v35, -1, -1);
  }

  if (!v11)
    return MEMORY[0x24BEE4AF8];
  LODWORD(v76) = v4 & 1;
  v102 = MEMORY[0x24BEE4AF8];
  sub_236BA5678(0, v11, 0);
  v36 = v102;
  v37 = (_OWORD *)(a1 + 104);
  v38 = v75;
  do
  {
    v78 = v11;
    v39 = *((_WORD *)v37 - 34);
    v40 = *((_QWORD *)v37 - 8);
    v41 = *((_QWORD *)v37 - 7);
    v42 = *((_QWORD *)v37 - 6);
    v43 = *((_BYTE *)v37 - 40);
    v44 = *((_BYTE *)v37 - 32);
    v45 = *((_BYTE *)v37 - 31);
    v46 = *((_BYTE *)v37 - 30);
    v47 = *((_QWORD *)v37 - 3);
    v48 = *((_QWORD *)v37 - 2);
    v49 = *((_BYTE *)v37 - 8);
    v79 = *((_DWORD *)v37 - 18);
    v80 = v39;
    v81 = v40;
    v82 = v41;
    v83 = v42;
    v84 = v43;
    v85 = v44;
    v86 = v45;
    v87 = v46;
    v88 = v47;
    v89 = v48;
    v90 = v49;
    v91 = *v37;
    sub_236BB4224((uint64_t)&v79, &v103, v77, v76, &v104, (uint64_t)v92);
    v50 = v92[0];
    v51 = WORD2(v92[0]);
    v52 = v92[1];
    v53 = v92[2];
    v54 = v93;
    v55 = v94;
    v56 = v95;
    v57 = v96;
    v58 = v97;
    v59 = v98;
    v60 = v99;
    v62 = *(_QWORD *)(v36 + 16);
    v61 = *(_QWORD *)(v36 + 24);
    v63 = v100;
    v64 = v101;
    v102 = v36;
    if (v62 >= v61 >> 1)
    {
      v75 = v38;
      v74 = v93;
      v73 = v95;
      v72 = v96;
      v71 = v97;
      v70 = v98;
      v69 = v99;
      v68 = v101;
      sub_236BA5678(v61 > 1, v62 + 1, 1);
      v64 = v68;
      v60 = v69;
      v59 = v70;
      v58 = v71;
      v57 = v72;
      v56 = v73;
      v54 = v74;
      v38 = v75;
      v36 = v102;
    }
    *(_QWORD *)(v36 + 16) = v62 + 1;
    v65 = v36 + 88 * v62;
    *(_DWORD *)(v65 + 32) = v50;
    *(_WORD *)(v65 + 36) = v51;
    *(_QWORD *)(v65 + 40) = v52;
    *(_QWORD *)(v65 + 48) = v53;
    *(_QWORD *)(v65 + 56) = v54;
    *(_BYTE *)(v65 + 64) = v55;
    *(_BYTE *)(v65 + 72) = v56;
    *(_BYTE *)(v65 + 73) = v57;
    *(_BYTE *)(v65 + 74) = v58;
    *(_QWORD *)(v65 + 80) = v59;
    *(_QWORD *)(v65 + 88) = v60;
    *(_BYTE *)(v65 + 96) = v63;
    v37 = (_OWORD *)((char *)v37 + 88);
    *(_OWORD *)(v65 + 104) = v64;
    v11 = v78 - 1;
  }
  while (v78 != 1);
  return v36;
}

ValueMetadata *type metadata accessor for MessageUtilities()
{
  return &type metadata for MessageUtilities;
}

uint64_t sub_236BB52EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_236BB533C + 4 * byte_236BD2A74[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t sub_236BB5428(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 3:
      goto LABEL_3;
    case 1:
      swift_bridgeObjectRelease();
LABEL_3:
      result = swift_bridgeObjectRelease();
      break;
    case 2:
      swift_bridgeObjectRelease();
      v3 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(qword_256442B58) + 48);
      v4 = sub_236BCF800();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
      break;
    default:
      return result;
  }
  return result;
}

void sub_236BB54CC()
{
  char *v0;

  v0 = (char *)sub_236BB5518 + 4 * byte_236BD2A7C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_236BB5518()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t sub_236BB55B0(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_236BB56C4(result);
    v2 = (char *)&loc_236BB560C + 4 * byte_236BD2A80[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_236BB56C4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MessageUtilityError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_236BB5700(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 2)
  {
    *a1 = *a2;
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(qword_256442B58) + 48);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_236BCF800();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_236BB57AC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_236BB56C4((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *a1 = *a2;
      v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(qword_256442B58) + 48);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = sub_236BCF800();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_236BB5868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_236BB5874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_236BB5884()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_236BB5894()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[8];

  v2[4] = &unk_236BD2AC8;
  v2[5] = &unk_236BD2AE0;
  result = sub_236BCF800();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[6] = v2;
    v2[7] = &unk_236BD2AC8;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_236BB5924()
{
  return sub_236B9576C(&qword_256442B50, (uint64_t (*)(uint64_t))type metadata accessor for MessageUtilityError, (uint64_t)&unk_236BD2B40);
}

uint64_t sub_236BB5950(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MessageUtilityError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_236BB5994@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_236BB38D8(a1, *(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24), a2, a3);
}

uint64_t sub_236BB59B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_236BB59F0(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_236BB5A48()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for NotificationManager();
  v0 = swift_allocObject();
  result = sub_236BB670C();
  qword_256442C10 = v0;
  return result;
}

uint64_t static NotificationManager.shared.getter()
{
  if (qword_256442648 != -1)
    swift_once();
  return swift_retain();
}

Swift::Void __swiftcall NotificationManager.surfaceTapToRadar(_:)(AARadarDraft *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  AARadarDraft *v13;
  os_log_type_t v14;
  uint8_t *v15;
  os_log_t v16[2];
  _QWORD aBlock[6];

  v3 = sub_236BCF8E4();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_236BCF914();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (isTapToRadarAvailable())
  {
    v16[0] = *(os_log_t *)(v1 + 16);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v1;
    *(_QWORD *)(v11 + 24) = a1;
    aBlock[4] = sub_236BB6994;
    aBlock[5] = v11;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_236B87748;
    aBlock[3] = &block_descriptor_2;
    v12 = _Block_copy(aBlock);
    swift_retain();
    v13 = a1;
    sub_236BCF8FC();
    v16[1] = (os_log_t)MEMORY[0x24BEE4AF8];
    sub_236B9576C(&qword_2542AFD60, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDA8);
    sub_236BA9624((unint64_t *)&unk_2542AFDB0, &qword_2542AFDA8);
    sub_236BCFD10();
    MEMORY[0x23B7FDE08](0, v10, v6, v12);
    _Block_release(v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_release();
  }
  else
  {
    v16[0] = (os_log_t)sub_236BCF8A8();
    v14 = sub_236BCFC14();
    if (os_log_type_enabled(v16[0], v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_236B83000, v16[0], v14, "TapToRadar is not available on this platform.", v15, 2u);
      MEMORY[0x23B7FE96C](v15, -1, -1);
    }

  }
}

void sub_236BB5D48(uint64_t a1, void *a2)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  _QWORD v8[6];

  if (qword_2542AF188 != -1)
    swift_once();
  if (byte_2542AF5AE[0] == 1
    && sub_236BB64DC(&OBJC_IVAR____TtC18AudioAnalyticsBase19NotificationManager_radarRequestLastFired, "Less than 10 minutes since last notification. Not spawning notification."))
  {
    v4 = sub_236BCF8A8();
    v5 = sub_236BCFC38();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_236B83000, v4, v5, "Creating TapToRadar Draft.", v6, 2u);
      MEMORY[0x23B7FE96C](v6, -1, -1);
    }

    v8[4] = sub_236BB6B98;
    v8[5] = a1;
    v8[0] = MEMORY[0x24BDAC760];
    v8[1] = 1107296256;
    v8[2] = sub_236BB612C;
    v8[3] = &block_descriptor_9;
    v7 = _Block_copy(v8);
    swift_retain();
    swift_release();
    objc_msgSend(a2, sel_sendForProcessNamed_completionHandler_, 0, v7);
    _Block_release(v7);
  }
}

void sub_236BB5EC4(void *a1)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *oslog;
  uint64_t v14;

  if (a1)
  {
    v2 = a1;
    if (qword_2542AFC20 != -1)
      swift_once();
    v3 = sub_236BCF8C0();
    __swift_project_value_buffer(v3, (uint64_t)qword_2542AFC00);
    v4 = a1;
    v5 = a1;
    oslog = sub_236BCF8A8();
    v6 = sub_236BCFC2C();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v14 = v8;
      *(_DWORD *)v7 = 136380675;
      swift_getErrorValue();
      v9 = sub_236BCFFE0();
      sub_236B93FB0(v9, v10, &v14);
      sub_236BCFCC8();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_236B83000, oslog, v6, "Failed to create radar. { err=%{private}s }", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v8, -1, -1);
      MEMORY[0x23B7FE96C](v7, -1, -1);

      return;
    }

  }
  else
  {
    oslog = sub_236BCF8A8();
    v11 = sub_236BCFC38();
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_236B83000, oslog, v11, "Successfully surfaced overload notification.", v12, 2u);
      MEMORY[0x23B7FE96C](v12, -1, -1);
    }
  }

}

void sub_236BB612C(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

uint64_t NotificationManager.surfaceAlertNotification(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  _QWORD v23[2];
  _QWORD aBlock[6];
  _OWORD v25[7];
  uint64_t v26;

  v2 = v1;
  v4 = sub_236BCF8E4();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_236BCF914();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 96);
  v25[5] = *(_OWORD *)(a1 + 80);
  v25[6] = v14;
  v26 = *(_QWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 16);
  v25[0] = *(_OWORD *)a1;
  v25[1] = v15;
  v16 = *(_OWORD *)(a1 + 48);
  v25[2] = *(_OWORD *)(a1 + 32);
  v25[3] = v16;
  v25[4] = v13;
  v23[0] = *(_QWORD *)(v2 + 16);
  v17 = swift_allocObject();
  v18 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v17 + 88) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v17 + 104) = v18;
  *(_OWORD *)(v17 + 120) = *(_OWORD *)(a1 + 96);
  v19 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v17 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v17 + 40) = v19;
  v20 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v17 + 56) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v17 + 16) = v2;
  *(_QWORD *)(v17 + 136) = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(v17 + 72) = v20;
  aBlock[4] = sub_236BB6A08;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_236B87748;
  aBlock[3] = &block_descriptor_6;
  v21 = _Block_copy(aBlock);
  swift_retain();
  sub_236BB6A14((uint64_t)v25);
  sub_236BCF8FC();
  v23[1] = MEMORY[0x24BEE4AF8];
  sub_236B9576C(&qword_2542AFD60, v5, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDA8);
  sub_236BA9624((unint64_t *)&unk_2542AFDB0, &qword_2542AFDA8);
  sub_236BCFD10();
  MEMORY[0x23B7FDE08](0, v12, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_236BB63E4(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;
  _OWORD v9[7];
  uint64_t v10;

  if (sub_236BB64DC(&OBJC_IVAR____TtC18AudioAnalyticsBase19NotificationManager_alertNotificationLastFired, "Less than 10 minutes since last alert notification. Not spawning notification."))
  {
    v3 = *(_OWORD *)(a2 + 80);
    v9[4] = *(_OWORD *)(a2 + 64);
    v9[5] = v3;
    v9[6] = *(_OWORD *)(a2 + 96);
    v10 = *(_QWORD *)(a2 + 112);
    v4 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v4;
    v5 = *(_OWORD *)(a2 + 48);
    v9[2] = *(_OWORD *)(a2 + 32);
    v9[3] = v5;
    _s18AudioAnalyticsBase17AlertNotificationV7surfaceyyACFZ_0((double *)v9);
    oslog = sub_236BCF8A8();
    v6 = sub_236BCFC38();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_236B83000, oslog, v6, "Surfaced AlertNotification.", v7, 2u);
      MEMORY[0x23B7FE96C](v7, -1, -1);
    }

  }
}

BOOL sub_236BB64DC(uint64_t *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v22;

  v5 = v2;
  v6 = sub_236BCF878();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_236BCF86C();
  sub_236BCF860();
  v11 = v10;
  v12 = *(void (**)(char *, uint64_t))(v7 + 8);
  v12(v9, v6);
  v13 = *a1;
  v14 = v11 - *(double *)(v5 + v13);
  if (qword_2542AFE20 != -1)
    swift_once();
  v15 = *(double *)&qword_2542AFE18 * 10.0;
  if (v14 < *(double *)&qword_2542AFE18 * 10.0)
  {
    v18 = sub_236BCF8A8();
    v19 = sub_236BCFC38();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_236B83000, v18, v19, a2, v20, 2u);
      MEMORY[0x23B7FE96C](v20, -1, -1);
    }

  }
  else
  {
    sub_236BCF86C();
    sub_236BCF860();
    v17 = v16;
    v12(v9, v6);
    *(_QWORD *)(v5 + v13) = v17;
  }
  return v14 >= v15;
}

uint64_t NotificationManager.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase19NotificationManager_logger;
  v2 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t NotificationManager.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase19NotificationManager_logger;
  v2 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_236BB670C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  uint64_t v14;
  unint64_t v15;

  v1 = v0;
  v2 = sub_236BCFC50();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_236BCFC44();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v6);
  v8 = sub_236BCF914();
  MEMORY[0x24BDAC7A8](v8);
  v13[1] = sub_236B97130();
  v14 = 0;
  v15 = 0xE000000000000000;
  sub_236BCFD4C();
  swift_bridgeObjectRelease();
  sub_236BCF8FC();
  v14 = MEMORY[0x24BEE4AF8];
  sub_236B9576C((unint64_t *)&qword_2542AFE60, v7, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDD8);
  sub_236BA9624((unint64_t *)&qword_2542AFDE0, &qword_2542AFDD8);
  sub_236BCFD10();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5750], v2);
  *(_QWORD *)(v0 + 16) = sub_236BCFC74();
  v9 = OBJC_IVAR____TtC18AudioAnalyticsBase19NotificationManager_logger;
  if (qword_2542AFC20 != -1)
    swift_once();
  v10 = sub_236BCF8C0();
  v11 = __swift_project_value_buffer(v10, (uint64_t)qword_2542AFC00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v1 + v9, v11, v10);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18AudioAnalyticsBase19NotificationManager_radarRequestLastFired) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18AudioAnalyticsBase19NotificationManager_alertNotificationLastFired) = 0;
  return v1;
}

uint64_t sub_236BB6968()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_236BB6994()
{
  uint64_t v0;

  sub_236BB5D48(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_236BB699C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(v0 + 112))
    swift_release();
  if (*(_QWORD *)(v0 + 128))
    swift_release();
  return swift_deallocObject();
}

void sub_236BB6A08()
{
  uint64_t v0;

  sub_236BB63E4(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t sub_236BB6A14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 104);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_236BB6AAC(v2);
  sub_236BB6AAC(v3);
  return a1;
}

uint64_t sub_236BB6AAC(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t sub_236BB6ABC()
{
  return type metadata accessor for NotificationManager();
}

uint64_t type metadata accessor for NotificationManager()
{
  uint64_t result;

  result = qword_256442C58;
  if (!qword_256442C58)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_236BB6B00()
{
  uint64_t result;
  unint64_t v1;

  result = sub_236BCF8C0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for NotificationManager()
{
  return swift_lookUpClassMethod();
}

void sub_236BB6B98(void *a1)
{
  sub_236BB5EC4(a1);
}

void OSAllocatedUnfairLock.load()(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  os_unfair_lock_s *v6;

  v5 = a1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a1 + 16);
  v6 = (os_unfair_lock_s *)(a1 + ((*(unsigned int *)(*(_QWORD *)a1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, v5, a2);
  os_unfair_lock_unlock(v6);
}

void OSAllocatedUnfairLock.store(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;

  v5 = a2 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a2 + 16);
  v6 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(_QWORD *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  v7 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, a1, a3);
  os_unfair_lock_unlock(v6);
}

void OSAllocatedUnfairLock.assign<A>(_:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = a3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a3 + 16);
  v4 = (os_unfair_lock_s *)(a3 + ((*(unsigned int *)(*(_QWORD *)a3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v4);
  sub_236BB6D34(v3);
  os_unfair_lock_unlock(v4);
}

uint64_t sub_236BB6D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t))(v1 + 16))((char *)&v5 - v2, v3);
  return swift_setAtWritableKeyPath();
}

void OSAllocatedUnfairLock.exchange(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;

  v7 = a2 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a2 + 16);
  v8 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(_QWORD *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v8);
  v9 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(a4, v7, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, a1, a3);
  os_unfair_lock_unlock(v8);
}

void OSAllocatedUnfairLock<A>.increment()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_236BB6E7C(a1, a2, a3, MEMORY[0x24BEE2F78]);
}

void OSAllocatedUnfairLock<A>.decrement()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_236BB6E7C(a1, a2, a3, MEMORY[0x24BEE2F80]);
}

void sub_236BB6E7C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *, uint64_t, _QWORD))
{
  uint64_t v7;
  os_unfair_lock_s *v8;

  v7 = a1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a1 + 16);
  v8 = (os_unfair_lock_s *)(a1 + ((*(unsigned int *)(*(_QWORD *)a1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v8);
  sub_236BB6F08(v7, a2, a3, a4);
  os_unfair_lock_unlock(v8);
}

uint64_t sub_236BB6F08(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, char *, uint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  void (*v14)(uint64_t, char *, uint64_t, _QWORD);

  v14 = a4;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  sub_236BCFFB0();
  sub_236BCFF8C();
  v14(a1, v8, a2, *(_QWORD *)(v10 + 8));
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

void OSAllocatedUnfairLock<A>.fetchAdd(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_236BB7074(a1, a2, a3, a4, MEMORY[0x24BEE2F78], a5);
}

void OSAllocatedUnfairLock<A>.fetchSub(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_236BB7074(a1, a2, a3, a4, MEMORY[0x24BEE2F80], a5);
}

void sub_236BB7074(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, uint64_t, uint64_t, _QWORD)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  os_unfair_lock_s *v12;

  v11 = a2 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a2 + 16);
  v12 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(_QWORD *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(a6, v11, a3);
  a5(v11, a1, a3, *(_QWORD *)(a4 + 8));
  os_unfair_lock_unlock(v12);
}

uint64_t sub_236BB7120()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for OsTransactionHandler();
  v0 = swift_allocObject();
  result = sub_236BB74BC();
  qword_2542AF770 = v0;
  return result;
}

Swift::Void __swiftcall OsTransactionHandler.sessionStopped(for:)(Swift::Int64 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD v15[4];

  v2 = v1;
  v4 = sub_236BCF878();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v8);
  v9 = v1 + OBJC_IVAR____TtC18AudioAnalyticsBase20OsTransactionHandler_activeReporterIDs;
  swift_beginAccess();
  sub_236BB7AD8(a1);
  swift_endAccess();
  if (*(_QWORD *)(v2 + 24) && !*(_QWORD *)(*(_QWORD *)v9 + 16))
  {
    *(_QWORD *)(v2 + 24) = 0;
    swift_unknownObjectRelease();
    sub_236BCF86C();
    sub_236BCF860();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC18AudioAnalyticsBase20OsTransactionHandler_lastActiveTime) = v11;
    v12 = sub_236BCF8A8();
    v13 = sub_236BCFC20();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v14 = 134217984;
      v15[1] = a1;
      sub_236BCFCC8();
      _os_log_impl(&dword_236B83000, v12, v13, "Marking clean, setting OsTransaction to nil. { reporterID=%lld }", v14, 0xCu);
      MEMORY[0x23B7FE96C](v14, -1, -1);
    }

  }
  os_unfair_lock_unlock(v8);
}

Swift::Bool __swiftcall OsTransactionHandler.inactive()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  os_unfair_lock_s *v5;
  Swift::Bool v6;
  double v7;
  double v8;
  double v9;
  uint64_t v11;

  v1 = sub_236BCF878();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (os_unfair_lock_s *)(*(_QWORD *)(v0 + 16) + 16);
  os_unfair_lock_lock(v5);
  if (*(_QWORD *)(v0 + 24))
  {
    v6 = 0;
  }
  else
  {
    v7 = *(double *)(v0 + OBJC_IVAR____TtC18AudioAnalyticsBase20OsTransactionHandler_lastActiveTime);
    sub_236BCF86C();
    sub_236BCF860();
    v9 = v8;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v6 = v7 < v9 + -10.0;
  }
  os_unfair_lock_unlock(v5);
  return v6;
}

uint64_t OsTransactionHandler.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_unknownObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase20OsTransactionHandler_logger;
  v2 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t OsTransactionHandler.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_unknownObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase20OsTransactionHandler_logger;
  v2 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_236BB74BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0;
  v2 = sub_236BCF878();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEE8);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)(v1 + 24) = 0;
  v7 = OBJC_IVAR____TtC18AudioAnalyticsBase20OsTransactionHandler_logger;
  if (qword_2542AF268 != -1)
    swift_once();
  v8 = sub_236BCF8C0();
  v9 = __swift_project_value_buffer(v8, (uint64_t)qword_2542AF248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v1 + v7, v9, v8);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC18AudioAnalyticsBase20OsTransactionHandler_activeReporterIDs) = MEMORY[0x24BEE4B08];
  v10 = OBJC_IVAR____TtC18AudioAnalyticsBase20OsTransactionHandler_lastActiveTime;
  sub_236BCF86C();
  sub_236BCF860();
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)(v1 + v10) = v12;
  return v1;
}

void *sub_236BB75F4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542AFEB0);
  v2 = *v0;
  v3 = sub_236BCFD28();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_236BB77A4()
{
  return sub_236BB7950((uint64_t *)&unk_256442D60);
}

void *sub_236BB77B0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEC0);
  v2 = *v0;
  v3 = sub_236BCFD28();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_236BB7944()
{
  return sub_236BB7950(&qword_256442920);
}

void *sub_236BB7950(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = sub_236BCFD28();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_236BB7AD8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  v5 = sub_236BD001C();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_236BB77B0();
    v11 = v14;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  sub_236BB7E50(v7);
  *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_236BB7BE0()
{
  return type metadata accessor for OsTransactionHandler();
}

uint64_t sub_236BB7BE8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_236BCF8C0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for OsTransactionHandler()
{
  return swift_lookUpClassMethod();
}

unint64_t sub_236BB7C94(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_236BCFD1C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        sub_236BD0028();
        sub_236BCFA34();
        swift_bridgeObjectRelease();
        v10 = sub_236BD0064() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v10 < v9)
            goto LABEL_5;
        }
        else if (v10 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(v3 + 48);
          v12 = (_BYTE *)(v11 + v2);
          v13 = (_BYTE *)(v11 + v6);
          if (v2 != v6 || (v2 = v6, v12 >= v13 + 1))
          {
            *v12 = *v13;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v14 = *(_QWORD *)(v3 + 16);
  v15 = __OFSUB__(v14, 1);
  v16 = v14 - 1;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v16;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_236BB7E50(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = sub_236BCFD1C();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = sub_236BD001C() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t PeriodicClosure.__allocating_init(at:)(double a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFED8);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v2 + 16) = v3;
  *(double *)(v2 + 24) = a1;
  return v2;
}

uint64_t PeriodicClosure.init(at:)(double a1)
{
  uint64_t v1;
  uint64_t v3;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFED8);
  v3 = swift_allocObject();
  *(_DWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v1 + 16) = v3;
  *(double *)(v1 + 24) = a1;
  return v1;
}

uint64_t sub_236BB8080(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t result;
  BOOL v6;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  sub_236B87778((double *)(v3 + 16), v1, &v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  v4 = v6;
  result = swift_release();
  if (v4)
    return a1(result);
  return result;
}

uint64_t sub_236BB810C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  *(_QWORD *)(v1 + 16) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  return swift_release();
}

uint64_t PeriodicClosure.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t PeriodicClosure.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PeriodicClosure()
{
  return objc_opt_self();
}

uint64_t method lookup function for PeriodicClosure()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PeriodicClosure.__allocating_init(at:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PeriodicClosure.invoke(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PeriodicClosure.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

AudioAnalyticsBase::PreferenceInformation __swiftcall PreferenceInformation.init(key:applicationID:)(Swift::String key, Swift::String applicationID)
{
  Swift::String *v2;
  AudioAnalyticsBase::PreferenceInformation result;

  *v2 = key;
  v2[1] = applicationID;
  result.applicationID = applicationID;
  result.key = key;
  return result;
}

uint64_t PreferenceInformation.key.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PreferenceInformation.applicationID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Preference.set(_:saveToDisk:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = sub_236BCFCB0();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v17 - v11;
  v13 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    result = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 24))((char *)v3 + *(int *)(a3 + 28), (char *)v3 + *(int *)(a3 + 32), v7);
    if ((a2 & 1) != 0)
      return _s18AudioAnalyticsBase17DefaultsUtilitiesO3set5value3key13applicationID8userNameyyXlSg_S3StFZ_0(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, v7);
    (*(void (**)(char *, char *, uint64_t))(v13 + 24))((char *)v3 + *(int *)(a3 + 28), v15, v7);
    if ((a2 & 1) != 0)
      static DefaultsUtilities.setGeneric<A>(value:key:applicationID:userName:)((uint64_t)v15, *v3, v3[1], v3[2], v3[3], 0x656C69626F6DLL, 0xE600000000000000, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v7);
  }
  return result;
}

Swift::Void __swiftcall Preference.reset()()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 24))(v1 + *(int *)(v0 + 28), v1 + *(int *)(v0 + 32));
}

uint64_t Preference.info.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t Preference.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t Preference.initValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 32));
}

uint64_t destroy for PreferenceInformation()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PreferenceInformation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PreferenceInformation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for PreferenceInformation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PreferenceInformation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PreferenceInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PreferenceInformation()
{
  return &type metadata for PreferenceInformation;
}

uint64_t sub_236BB8604()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_236BB860C()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_236BB8684(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + v6;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + v6 + ((v6 + 32) & ~v6)) & (unint64_t)~v6) + v7 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ~v6;
    v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    v14 = a2[3];
    a1[2] = a2[2];
    a1[3] = v14;
    v15 = ((unint64_t)a1 + v6 + 32) & ~v6;
    v16 = ((unint64_t)a2 + v6 + 32) & ~v6;
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(v15, v16, v4);
    v17((v8 + v15) & v12, (v8 + v16) & v12, v4);
  }
  return a1;
}

_QWORD *sub_236BB8784(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a2 + v8 + 32) & ~v8;
  v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(((unint64_t)a1 + v8 + 32) & ~v8, v9, v6);
  v10((*(_QWORD *)(v7 + 64) + v8 + (((unint64_t)a1 + v8 + 32) & ~v8)) & ~v8, (*(_QWORD *)(v7 + 64) + v8 + v9) & ~v8, v6);
  return a1;
}

_QWORD *sub_236BB882C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a2 + v8 + 32) & ~v8;
  v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24);
  v10(((unint64_t)a1 + v8 + 32) & ~v8, v9, v6);
  v10((*(_QWORD *)(v7 + 64) + v8 + (((unint64_t)a1 + v8 + 32) & ~v8)) & ~v8, (*(_QWORD *)(v7 + 64) + v8 + v9) & ~v8, v6);
  return a1;
}

_OWORD *sub_236BB8900(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 32) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 32) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v10(v8, v9, v5);
  v10((*(_QWORD *)(v6 + 64) + v7 + v8) & ~v7, (*(_QWORD *)(v6 + 64) + v7 + v9) & ~v7, v5);
  return a1;
}

_QWORD *sub_236BB8994(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(unint64_t, uint64_t, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)a2 + v10 + 32) & ~v10;
  v12 = *(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 40);
  v12(((unint64_t)a1 + v10 + 32) & ~v10, v11, v8);
  v12((*(_QWORD *)(v9 + 64) + v10 + (((unint64_t)a1 + v10 + 32) & ~v10)) & ~v10, (*(_QWORD *)(v9 + 64) + v10 + v11) & ~v10, v8);
  return a1;
}

uint64_t sub_236BB8A48(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((*(_QWORD *)(v4 + 64) + v7 + ((v7 + 32) & ~v7)) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 32) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_236BB8B28 + 4 * byte_236BD2C90[(v9 - 1)]))();
}

void sub_236BB8B98(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64)
       + *(unsigned __int8 *)(v5 + 80)
       + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

void sub_236BB8DA0(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  void *v40;
  Swift::String v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  BOOL v50;
  int v51;
  __int16 v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int16 v59;
  uint64_t v60;
  id v61;
  _QWORD v62[7];
  int v63;
  char v64;

  swift_bridgeObjectRetain();
  if ((a2 & 1) == 0)
  {
    sub_236BBC458(a1, 7);
    if (v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  CommonConfigFields.init(dict:)(a1, (uint64_t)v62);
  if (v3)
    goto LABEL_5;
  v60 = a3;
  v58 = BYTE2(v62[0]);
  v59 = v62[0];
  v7 = v62[1];
  v8 = v62[2];
  v10 = v62[3];
  v9 = v62[4];
  if ((a2 & 1) != 0)
    v11 = 263;
  else
    v11 = 7;
  v12 = v62[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v63 = v11;
  sub_236BBAEB4(5);
  v61 = sub_236BA71A8(v13, v14);
  v57 = v7;
  v55 = v12;
  v56 = v9;
  v54 = v10;
  swift_bridgeObjectRelease();
  v15 = v61;
  v16 = 1;
  sub_236BBAEB4(1);
  if (v18)
  {
    v19 = v17;
    v20 = v18;
    v21 = sub_236BCDAE4(v17, v18);
    v22 = sub_236B9238C(a2 & 1, 0xD000000000000016, 0x8000000236BD6070, v19, v20, v21 & 0x1FFFF);
    swift_bridgeObjectRelease();
    v16 = HIWORD(v22) & 1;
  }
  else
  {
    LOWORD(v22) = 0;
  }
  sub_236BBAEB4(0);
  if (v24)
  {
    v25 = v23;
    v26 = v24;
    v27 = sub_236BCECB8(v23, v24);
    v28 = sub_236B926AC(a2 & 1, 0xD00000000000001ALL, 0x8000000236BD6050, v25, v26, v27 | ((HIDWORD(v27) & 1) << 32));
    swift_bridgeObjectRelease();
    v29 = HIDWORD(v28) & 1;
  }
  else
  {
    LODWORD(v28) = 0;
    LOBYTE(v29) = 1;
  }
  v48 = v29;
  v30 = v8;
  sub_236BBB044(2);
  v32 = v31;
  v50 = v31 == 2;
  sub_236BBB044(4);
  v49 = v33;
  sub_236BBB1D4(6);
  v35 = v34;
  swift_bridgeObjectRelease();
  v53 = v15;
  v52 = v22;
  v51 = v28;
  if (!v35)
  {
    v63 = v16;
    goto LABEL_25;
  }
  v36 = *(_QWORD *)(v35 + 16);
  if (!v36)
  {
    v63 = v16;
    swift_bridgeObjectRelease();
LABEL_25:
    v46 = MEMORY[0x24BEE4B08];
LABEL_27:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)v60 = v59;
    *(_BYTE *)(v60 + 2) = v58;
    *(_QWORD *)(v60 + 8) = v57;
    *(_QWORD *)(v60 + 16) = v30;
    *(_QWORD *)(v60 + 24) = v54;
    *(_QWORD *)(v60 + 32) = v56;
    *(_QWORD *)(v60 + 40) = v55;
    *(_QWORD *)(v60 + 48) = v61;
    *(_WORD *)(v60 + 56) = v52;
    *(_BYTE *)(v60 + 58) = v63;
    *(_DWORD *)(v60 + 60) = v51;
    *(_BYTE *)(v60 + 64) = v48;
    *(_BYTE *)(v60 + 65) = (v50 | v32) & 1;
    *(_BYTE *)(v60 + 66) = v49 & 1;
    *(_QWORD *)(v60 + 72) = v46;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    return;
  }
  v47 = v32;
  v62[0] = MEMORY[0x24BEE4AF8];
  sub_236BA56B0(0, v36, 0);
  v37 = v62[0];
  v38 = (void **)(v35 + 40);
  while (1)
  {
    v39 = (uint64_t)*(v38 - 1);
    v40 = *v38;
    swift_bridgeObjectRetain_n();
    v41._countAndFlagsBits = v39;
    v41._object = v40;
    Config.WorkerConfigs.init(rawValue:)(v41);
    v42 = v64;
    if (v64 == 16)
      break;
    swift_bridgeObjectRelease();
    v62[0] = v37;
    v44 = *(_QWORD *)(v37 + 16);
    v43 = *(_QWORD *)(v37 + 24);
    if (v44 >= v43 >> 1)
    {
      sub_236BA56B0(v43 > 1, v44 + 1, 1);
      v37 = v62[0];
    }
    v38 += 2;
    *(_QWORD *)(v37 + 16) = v44 + 1;
    *(_BYTE *)(v37 + v44 + 32) = v42;
    if (!--v36)
    {
      v63 = v16;
      swift_bridgeObjectRelease();
      v46 = sub_236BB1EE0(v37);
      swift_release();
      v30 = v8;
      v32 = v47;
      goto LABEL_27;
    }
  }
  sub_236B93D48();
  swift_allocError();
  *(_QWORD *)v45 = v39;
  *(_QWORD *)(v45 + 8) = v40;
  *(_BYTE *)(v45 + 16) = 2;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t RouterConfig.broadcast.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t assignWithCopy for RouterConfig(uint64_t a1, __int16 *a2)
{
  __int16 v4;
  void *v5;
  void *v6;
  id v7;
  __int16 v8;
  int v9;

  v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 48);
  v6 = (void *)*((_QWORD *)a2 + 6);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = v6;

  v8 = a2[28];
  *(_BYTE *)(a1 + 58) = *((_BYTE *)a2 + 58);
  *(_WORD *)(a1 + 56) = v8;
  v9 = *((_DWORD *)a2 + 15);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_DWORD *)(a1 + 60) = v9;
  *(_BYTE *)(a1 + 65) = *((_BYTE *)a2 + 65);
  *(_BYTE *)(a1 + 66) = *((_BYTE *)a2 + 66);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RouterConfig(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_BYTE *)(a1 + 58) = *(_BYTE *)(a2 + 58);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RouterConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RouterConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

_QWORD *sub_236BB9620(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int16 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  int v24;
  char v25;
  __int16 v26;
  uint64_t v27;
  __int128 v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int16 v36;
  char v37;
  int v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v19 = *(_QWORD *)(a1 + 16);
  if (!v19)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v5 = a1;
  v6 = swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v18 = v6;
  while (1)
  {
    v9 = *(_QWORD *)(v5 + 8 * v7 + 32);
    swift_bridgeObjectRetain_n();
    sub_236BB8DA0(v9, a2 & 1, (uint64_t)&v29);
    if (v3)
      break;
    swift_bridgeObjectRelease();
    v10 = v29;
    v11 = v30;
    v12 = v31;
    v13 = v32;
    v43 = v33;
    v27 = v34;
    v28 = v35;
    v25 = v37;
    v26 = v36;
    v23 = v39;
    v24 = v38;
    v21 = v41;
    v22 = v40;
    v20 = v42;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = sub_236B9D920(0, v8[2] + 1, 1, v8);
    v15 = v8[2];
    v14 = v8[3];
    if (v15 >= v14 >> 1)
      v8 = sub_236B9D920((_QWORD *)(v14 > 1), v15 + 1, 1, v8);
    v8[2] = v15 + 1;
    v16 = &v8[10 * v15];
    *((_WORD *)v16 + 16) = v10;
    ++v7;
    *((_BYTE *)v16 + 34) = v11;
    v16[5] = v12;
    v16[6] = v13;
    v16[7] = v43;
    v16[8] = v27;
    *(_OWORD *)(v16 + 9) = v28;
    *((_WORD *)v16 + 44) = v26;
    *((_BYTE *)v16 + 90) = v25;
    *((_DWORD *)v16 + 23) = v24;
    *((_BYTE *)v16 + 96) = v23;
    *((_BYTE *)v16 + 97) = v22;
    *((_BYTE *)v16 + 98) = v21;
    v16[13] = v20;
    v5 = v18;
    if (v19 == v7)
    {
      swift_bridgeObjectRelease();
      return v8;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_236BB982C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int16 v10;
  char v11;
  uint64_t v12;
  void *v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  id v20;
  id v21;
  char v22;
  char v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[6];
  uint64_t v49;

  v4 = v3;
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v6 = 0;
    v7 = MEMORY[0x24BEE4AF8];
    v32 = *(_QWORD *)(result + 16);
    v30 = v5 - 1;
    v35 = result;
    do
    {
      v31 = v7;
      v8 = 80 * v6;
      v9 = v6;
      while (1)
      {
        if (v9 >= *(_QWORD *)(result + 16))
        {
          __break(1u);
          return result;
        }
        v38 = v8;
        v39 = v9;
        v47 = v4;
        v10 = *(_WORD *)(result + v8 + 32);
        v11 = *(_BYTE *)(result + v8 + 34);
        v45 = *(_QWORD *)(result + v8 + 40);
        v12 = *(_QWORD *)(result + v8 + 56);
        v46 = *(_QWORD *)(result + v8 + 48);
        v42 = v12;
        v43 = *(_QWORD *)(result + v8 + 64);
        v13 = *(void **)(result + v8 + 80);
        v40 = *(_QWORD *)(result + v8 + 72);
        v14 = *(_WORD *)(result + v8 + 88);
        v41 = *(_BYTE *)(result + v8 + 90);
        v15 = *(_DWORD *)(result + v8 + 92);
        v44 = *(_BYTE *)(result + v8 + 96);
        v16 = *(_QWORD *)(result + v8 + 104);
        v17 = *(_BYTE *)(result + v8 + 98);
        v18 = *(_BYTE *)(result + v8 + 97);
        v48[3] = &type metadata for RouterConfig;
        v48[4] = &off_25082A158;
        v19 = swift_allocObject();
        v48[0] = v19;
        v34 = v10;
        *(_WORD *)(v19 + 16) = v10;
        *(_BYTE *)(v19 + 18) = v11;
        *(_QWORD *)(v19 + 24) = v45;
        *(_QWORD *)(v19 + 32) = v46;
        *(_QWORD *)(v19 + 40) = v12;
        *(_QWORD *)(v19 + 48) = v43;
        *(_QWORD *)(v19 + 56) = v40;
        *(_QWORD *)(v19 + 64) = v13;
        *(_WORD *)(v19 + 72) = v14;
        *(_BYTE *)(v19 + 74) = v41;
        *(_DWORD *)(v19 + 76) = v15;
        *(_BYTE *)(v19 + 80) = v44;
        *(_BYTE *)(v19 + 81) = v18;
        *(_BYTE *)(v19 + 82) = v17;
        *(_QWORD *)(v19 + 88) = v16;
        v33 = v13;
        v20 = v13;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v21 = v20;
        v22 = sub_236BA72C0(v48, a2, a3);
        if (v47)
        {
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
          v7 = v31;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v7;
        }
        v23 = v22;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
        if ((v23 & 1) != 0)
          break;
        v9 = v39 + 1;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v8 = v38 + 80;
        v4 = 0;
        result = v35;
        if (v32 == v39 + 1)
        {
          v7 = v31;
          goto LABEL_17;
        }
      }
      v7 = v31;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v49 = v31;
      v25 = v39;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_236BA55D0(0, *(_QWORD *)(v31 + 16) + 1, 1);
        v25 = v39;
        v7 = v49;
      }
      v27 = *(_QWORD *)(v7 + 16);
      v26 = *(_QWORD *)(v7 + 24);
      if (v27 >= v26 >> 1)
      {
        v29 = v25;
        sub_236BA55D0(v26 > 1, v27 + 1, 1);
        v25 = v29;
        v7 = v49;
      }
      *(_QWORD *)(v7 + 16) = v27 + 1;
      v28 = v7 + 80 * v27;
      *(_WORD *)(v28 + 32) = v34;
      v6 = v25 + 1;
      *(_BYTE *)(v28 + 34) = v11;
      *(_QWORD *)(v28 + 40) = v45;
      *(_QWORD *)(v28 + 48) = v46;
      *(_QWORD *)(v28 + 56) = v42;
      *(_QWORD *)(v28 + 64) = v43;
      *(_QWORD *)(v28 + 72) = v40;
      *(_QWORD *)(v28 + 80) = v33;
      *(_WORD *)(v28 + 88) = v14;
      *(_BYTE *)(v28 + 90) = v41;
      *(_DWORD *)(v28 + 92) = v15;
      *(_BYTE *)(v28 + 96) = v44;
      *(_BYTE *)(v28 + 97) = v18;
      *(_BYTE *)(v28 + 98) = v17;
      *(_QWORD *)(v28 + 104) = v16;
      v4 = 0;
      result = v35;
    }
    while (v30 != v25);
  }
  else
  {
    v7 = MEMORY[0x24BEE4AF8];
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_236BB9BEC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[32];
  __int128 v13;
  uint64_t v14;

  v14 = *a1;
  if (*(_QWORD *)(v14 + 16)
    && (v4 = sub_236BA4CD0(7), (v5 & 1) != 0)
    && (sub_236B8E794(*(_QWORD *)(v14 + 56) + 32 * v4, (uint64_t)v12),
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC0),
        (swift_dynamicCast() & 1) != 0))
  {
    v13 = *(_OWORD *)(a1 + 1);
    v2 = a1[3];
    v6 = a1[4];
    v7 = *((_BYTE *)a1 + 40);
    sub_236B954A0((uint64_t)&v14);
    sub_236B954C8((uint64_t)&v13);
    swift_bridgeObjectRetain();
    v8 = sub_236BB9620(v11, v7);
    sub_236B954F0((uint64_t)&v14);
    sub_236B95518((uint64_t)&v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v1)
    {
      sub_236B954A0((uint64_t)&v14);
      sub_236B954C8((uint64_t)&v13);
      swift_bridgeObjectRetain();
      v2 = sub_236BB982C((uint64_t)v8, v2, v6);
      sub_236B954F0((uint64_t)&v14);
      sub_236B95518((uint64_t)&v13);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_236B93D48();
    swift_allocError();
    *(_QWORD *)v9 = 0xD000000000000018;
    *(_QWORD *)(v9 + 8) = 0x8000000236BD6030;
    *(_BYTE *)(v9 + 16) = 0;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_236BB9D8C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_236BB9DE0@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[32];

  v3 = *(_QWORD *)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    v5 = sub_236BA4CD0(2);
    if ((v6 & 1) != 0)
    {
      sub_236B8E794(*(_QWORD *)(v3 + 56) + 32 * v5, (uint64_t)v10);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542AFD90);
      if ((swift_dynamicCast() & 1) != 0)
        return sub_236BB9ED4(v9, a1[40], a2);
    }
  }
  sub_236B93D48();
  swift_allocError();
  *(_QWORD *)v8 = 0xD00000000000001BLL;
  *(_QWORD *)(v8 + 8) = 0x8000000236BD6090;
  *(_BYTE *)(v8 + 16) = 0;
  return swift_willThrow();
}

uint64_t sub_236BB9ED4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t i;
  BOOL v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned __int16 v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[7];

  swift_bridgeObjectRetain();
  if ((a2 & 1) == 0)
  {
    sub_236BBBF64(a1, 2);
    if (v3)
      return swift_bridgeObjectRelease_n();
  }
  CommonConfigFields.init(dict:)(a1, (uint64_t)v75);
  if (v3)
    return swift_bridgeObjectRelease();
  v70 = BYTE2(v75[0]);
  v71 = v75[0];
  v9 = v75[1];
  v8 = v75[2];
  v10 = v75[3];
  v11 = v75[4];
  v12 = v75[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_236B9AF60(3);
  v74 = v10;
  v66 = a2;
  v65 = a3;
  v67 = v12;
  v68 = v9;
  v14 = sub_236BB1DE8(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_236B9AF60(1);
  v69 = v14;
  v16 = sub_236BB1DE8(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_236B9AF60(0);
  v73 = v16;
  v18 = sub_236BB1DE8(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_236B9B100(2);
  v72 = v18;
  v59 = v19;
  sub_236BBACAC(4);
  v21 = v20;
  swift_bridgeObjectRelease();
  v22 = v21;
  v23 = v74;
  if (!v22)
  {
    v55 = sub_236B94D10(MEMORY[0x24BEE4AF8]);
    v56 = v11;
    v57 = v69;
LABEL_48:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_WORD *)v65 = v71;
    *(_BYTE *)(v65 + 2) = v70;
    *(_QWORD *)(v65 + 8) = v68;
    *(_QWORD *)(v65 + 16) = v8;
    *(_QWORD *)(v65 + 24) = v23;
    *(_QWORD *)(v65 + 32) = v56;
    *(_QWORD *)(v65 + 40) = v12;
    *(_QWORD *)(v65 + 48) = v57;
    *(_QWORD *)(v65 + 56) = v73;
    *(_QWORD *)(v65 + 64) = v72;
    *(_QWORD *)(v65 + 72) = v59;
    *(_QWORD *)(v65 + 80) = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v63 = v22 + 64;
  v24 = 1 << *(_BYTE *)(v22 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & *(_QWORD *)(v22 + 64);
  v64 = (unint64_t)(v24 + 63) >> 6;
  v27 = swift_bridgeObjectRetain();
  v28 = 0;
  v60 = MEMORY[0x24BEE4B00];
  if (!v26)
    goto LABEL_12;
LABEL_11:
  v29 = __clz(__rbit64(v26));
  v26 &= v26 - 1;
  v30 = v28;
  for (i = v29 | (v28 << 6); ; i = __clz(__rbit64(v34)) + (v33 << 6))
  {
    v36 = v27;
    v37 = (uint64_t *)(*(_QWORD *)(v27 + 48) + 16 * i);
    v39 = *v37;
    v38 = v37[1];
    v40 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * i);
    v41 = sub_236BCD4A4(*v37, v38);
    swift_bridgeObjectRetain();
    v42 = sub_236B9238C(v66 & 1, 0xD00000000000002BLL, 0x8000000236BD60B0, v39, v38, v41 & 0x1FFFF);
    v43 = v42;
    if ((v42 & 0x10000) != 0)
    {
      swift_bridgeObjectRelease();
      v23 = v74;
    }
    else
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v75[0] = v60;
      v45 = sub_236BA4D58(v43);
      v46 = *(_QWORD *)(v60 + 16);
      v47 = (v44 & 1) == 0;
      v48 = v46 + v47;
      if (__OFADD__(v46, v47))
        goto LABEL_50;
      if (*(_QWORD *)(v60 + 24) >= v48)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v62 = v44;
          sub_236B9EE40();
          v44 = v62;
        }
      }
      else
      {
        v61 = v44;
        sub_236B9E458(v48, isUniquelyReferenced_nonNull_native);
        v49 = sub_236BA4D58(v43);
        v51 = v50 & 1;
        v44 = v61;
        if ((v61 & 1) != v51)
          goto LABEL_53;
        v45 = v49;
      }
      v52 = (_QWORD *)v75[0];
      v60 = v75[0];
      if ((v44 & 1) != 0)
      {
        *(_QWORD *)(*(_QWORD *)(v75[0] + 56) + 8 * v45) = v40;
      }
      else
      {
        *(_QWORD *)(v75[0] + 8 * (v45 >> 6) + 64) |= 1 << v45;
        *(_WORD *)(v52[6] + 2 * v45) = v43;
        *(_QWORD *)(v52[7] + 8 * v45) = v40;
        v53 = v52[2];
        v32 = __OFADD__(v53, 1);
        v54 = v53 + 1;
        if (v32)
          goto LABEL_51;
        v52[2] = v54;
      }
      v23 = v74;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v27 = v36;
    v28 = v30;
    if (v26)
      goto LABEL_11;
LABEL_12:
    v32 = __OFADD__(v28, 1);
    v33 = v28 + 1;
    if (v32)
    {
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (v33 >= v64)
      goto LABEL_47;
    v34 = *(_QWORD *)(v63 + 8 * v33);
    if (!v34)
      break;
LABEL_26:
    v26 = (v34 - 1) & v34;
    v30 = v33;
  }
  v35 = v33 + 1;
  if (v33 + 1 >= v64)
    goto LABEL_47;
  v34 = *(_QWORD *)(v63 + 8 * v35);
  if (v34)
    goto LABEL_25;
  v35 = v33 + 2;
  if (v33 + 2 >= v64)
    goto LABEL_47;
  v34 = *(_QWORD *)(v63 + 8 * v35);
  if (v34)
    goto LABEL_25;
  v35 = v33 + 3;
  if (v33 + 3 >= v64)
    goto LABEL_47;
  v34 = *(_QWORD *)(v63 + 8 * v35);
  if (v34)
    goto LABEL_25;
  v35 = v33 + 4;
  if (v33 + 4 >= v64)
    goto LABEL_47;
  v34 = *(_QWORD *)(v63 + 8 * v35);
  if (v34)
    goto LABEL_25;
  v35 = v33 + 5;
  if (v33 + 5 >= v64)
  {
LABEL_47:
    v56 = v11;
    swift_release();
    swift_bridgeObjectRelease();
    v12 = v67;
    v57 = v69;
    v55 = v60;
    goto LABEL_48;
  }
  v34 = *(_QWORD *)(v63 + 8 * v35);
  if (v34)
  {
LABEL_25:
    v33 = v35;
    goto LABEL_26;
  }
  while (1)
  {
    v33 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v33 >= v64)
      goto LABEL_47;
    v34 = *(_QWORD *)(v63 + 8 * v33);
    ++v35;
    if (v34)
      goto LABEL_26;
  }
LABEL_52:
  __break(1u);
LABEL_53:
  type metadata accessor for AudioServiceType(0);
  result = sub_236BCFFD4();
  __break(1u);
  return result;
}

uint64_t RTCConfig.commonFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 2);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  *(_WORD *)a1 = *(_WORD *)v1;
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t RTCConfig.preserveSummaryFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RTCConfig.keepUniqueValueSummaryFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RTCConfig.ignoredSummaryFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RTCConfig.maxSummaryValues.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

uint64_t destroy for RTCConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RTCConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RTCConfig(uint64_t a1, __int16 *a2)
{
  __int16 v4;

  v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RTCConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RTCConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RTCConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_236BBAB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_236BBB420(a1, a2, a3, (uint64_t (*)(void))sub_236B93584);
}

uint64_t sub_236BBAB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_236BBB378(a1, a2, a3, (uint64_t (*)(void))sub_236B93584);
}

uint64_t sub_236BBAB50(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  _OWORD v10[2];
  uint64_t v11;

  v3 = sub_236B93584(a1);
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_236B8BFC0(v3, v4), (v6 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)v10);
  else
    memset(v10, 0, sizeof(v10));
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  v7 = swift_dynamicCast();
  v8 = v11;
  if (!v7)
    return 0;
  return v8;
}

unint64_t sub_236BBABF0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  _OWORD v10[2];
  unsigned int v11;

  v3 = sub_236B93584(a1);
  if (*(_QWORD *)(a2 + 16) && (v5 = sub_236B8BFC0(v3, v4), (v6 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)v10);
  else
    memset(v10, 0, sizeof(v10));
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  v7 = swift_dynamicCast();
  v8 = v11;
  if (!v7)
    v8 = 0;
  return v8 | ((unint64_t)(v7 ^ 1u) << 32);
}

uint64_t sub_236BBAC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_236BBB4F8(a1, a2, a3, (uint64_t (*)(void))sub_236B93584, &qword_2542AFDC8);
}

void sub_236BBACAC(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_236BBACFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  _BYTE v6[80];

  if (*(_QWORD *)(v1 + 16) && (v3 = sub_236B8BFC0(v0 + 12, 0x8000000236BD4E80), (v4 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(v1 + 56) + 32 * v3, (uint64_t)v6);
  else
    memset(v6, 0, 32);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFD88);
  if (swift_dynamicCast())
    return *(_QWORD *)(v2 - 24);
  else
    return 0;
}

uint64_t sub_236BBADDC(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  _OWORD v8[2];
  uint64_t v9;

  if ((a1 & 1) != 0)
    v2 = 0x8000000236BD4F20;
  else
    v2 = 0x8000000236BD4F00;
  if (*(_QWORD *)(a2 + 16)
    && ((a1 & 1) != 0 ? (v4 = 0xD000000000000012) : (v4 = 0xD000000000000018),
        v5 = sub_236B8BFC0(v4, v2),
        (v6 & 1) != 0))
  {
    sub_236B8E794(*(_QWORD *)(a2 + 56) + 32 * v5, (uint64_t)v8);
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
  if (swift_dynamicCast())
    return v9;
  else
    return 0;
}

void sub_236BBAEB4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_236BBAF00()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  _BYTE v4[32];
  uint64_t v5;

  if (*(_QWORD *)(v0 + 16) && (v1 = sub_236B8BFC0(0x6576456F69647561, 0xEE0065707954746ELL), (v2 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(v0 + 56) + 32 * v1, (uint64_t)v4);
  else
    memset(v4, 0, sizeof(v4));
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  if (swift_dynamicCast())
    return v5;
  else
    return 0;
}

void sub_236BBB044(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_236BBB090()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  _BYTE v5[80];

  if (*(_QWORD *)(v0 + 16) && (v2 = sub_236B8BFC0(0x6576456F69647561, 0xEE0065707954746ELL), (v3 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(v0 + 56) + 32 * v2, (uint64_t)v5);
  else
    memset(v5, 0, 32);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  if (swift_dynamicCast())
    return *(unsigned __int8 *)(v1 - 17);
  else
    return 2;
}

void sub_236BBB1D4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_236BBB220()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  _BYTE v5[80];

  if (*(_QWORD *)(v0 + 16) && (v2 = sub_236B8BFC0(0x6576456F69647561, 0xEE0065707954746ELL), (v3 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(v0 + 56) + 32 * v2, (uint64_t)v5);
  else
    memset(v5, 0, 32);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
  if (swift_dynamicCast())
    return *(_QWORD *)(v1 - 24);
  else
    return 0;
}

uint64_t sub_236BBB36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_236BBB378(a1, a2, a3, (uint64_t (*)(void))sub_236BC442C);
}

uint64_t sub_236BBB378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  _OWORD v10[2];
  uint64_t v11;

  v5 = a4();
  if (*(_QWORD *)(a2 + 16) && (v7 = sub_236B8BFC0(v5, v6), (v8 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(a2 + 56) + 32 * v7, (uint64_t)v10);
  else
    memset(v10, 0, sizeof(v10));
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  if (swift_dynamicCast())
    return v11;
  else
    return 0;
}

uint64_t sub_236BBB414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_236BBB420(a1, a2, a3, (uint64_t (*)(void))sub_236BC442C);
}

uint64_t sub_236BBB420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  _OWORD v10[2];
  unsigned __int8 v11;

  v5 = a4();
  if (*(_QWORD *)(a2 + 16) && (v7 = sub_236B8BFC0(v5, v6), (v8 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(a2 + 56) + 32 * v7, (uint64_t)v10);
  else
    memset(v10, 0, sizeof(v10));
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  if (swift_dynamicCast())
    return v11;
  else
    return 2;
}

uint64_t sub_236BBB4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_236BBB4F8(a1, a2, a3, (uint64_t (*)(void))sub_236BC442C, &qword_2542AFDC8);
}

uint64_t sub_236BBB4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_236BBB4F8(a1, a2, a3, (uint64_t (*)(void))sub_236BC442C, (uint64_t *)&unk_2542AFD90);
}

uint64_t sub_236BBB4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_236BBB4F8(a1, a2, a3, (uint64_t (*)(void))sub_236BC442C, &qword_2542AFD80);
}

uint64_t sub_236BBB4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  _OWORD v12[2];
  uint64_t v13;

  v7 = a4();
  if (*(_QWORD *)(a2 + 16) && (v9 = sub_236B8BFC0(v7, v8), (v10 & 1) != 0))
    sub_236B8E794(*(_QWORD *)(a2 + 56) + 32 * v9, (uint64_t)v12);
  else
    memset(v12, 0, sizeof(v12));
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF90);
  __swift_instantiateConcreteTypeFromMangledName(a5);
  if (swift_dynamicCast())
    return v13;
  else
    return 0;
}

void sub_236BBB5A4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  __int16 v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  char v45;
  char v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char type;
  os_log_type_t typea;
  char v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v6 = a1[3];
  v5 = a1[4];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF68);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_236BD1EE0;
  *(_QWORD *)(inited + 32) = 0xD000000000000018;
  *(_QWORD *)(inited + 40) = 0x8000000236BD4F00;
  v8 = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 48) = 0;
  *(_QWORD *)(inited + 72) = v8;
  *(_QWORD *)(inited + 80) = 0xD000000000000012;
  *(_QWORD *)(inited + 88) = 0x8000000236BD4F20;
  *(_QWORD *)(inited + 120) = __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
  *(_QWORD *)(inited + 96) = &unk_250827BC0;
  swift_bridgeObjectRetain();
  v9 = sub_236B92D84(inited);
  v10 = *((_BYTE *)a1 + 40);
  swift_bridgeObjectRetain();
  if ((v10 & 1) == 0)
  {
    sub_236BBC1DC(v9, 1);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  CommonConfigFields.init(dict:)(v9, (uint64_t)&v67);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v63 = v6;
  v64 = v5;
  v62 = a2;
  v60 = BYTE2(v67);
  v61 = v67;
  v11 = v68;
  v12 = v69;
  v14 = v70;
  v13 = v71;
  v15 = v72;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  type = v10;
  v55 = sub_236B9B274(0, v9, 1);
  v58 = sub_236BBD4CC(v9);
  swift_bridgeObjectRelease();
  v59 = v13;
  swift_bridgeObjectRelease();
  v56 = v14;
  swift_bridgeObjectRelease();
  v57 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v73 = *a1;
  v16 = v73;
  if (!*(_QWORD *)(v73 + 16)
    || (v17 = sub_236BA4CD0(1), (v18 & 1) == 0)
    || (sub_236B8E794(*(_QWORD *)(v16 + 56) + 32 * v17, (uint64_t)&v67),
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC0),
        (swift_dynamicCast() & 1) == 0))
  {
    if (qword_2542AFCB0 != -1)
      swift_once();
    v21 = sub_236BCF8C0();
    __swift_project_value_buffer(v21, (uint64_t)qword_2542AFC98);
    v23 = a1[1];
    v22 = a1[2];
    swift_bridgeObjectRetain_n();
    sub_236B954A0((uint64_t)&v73);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_236B954A0((uint64_t)&v73);
    swift_bridgeObjectRetain();
    v24 = sub_236BCF8A8();
    v25 = sub_236BCFC20();
    if (os_log_type_enabled(v24, v25))
    {
      typea = v25;
      v26 = swift_slowAlloc();
      v27 = swift_slowAlloc();
      v67 = v27;
      *(_DWORD *)v26 = 136380931;
      swift_bridgeObjectRetain();
      sub_236B93FB0(v23, v22, &v67);
      sub_236BCFCC8();
      swift_bridgeObjectRelease();
      sub_236B954F0((uint64_t)&v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_236B954F0((uint64_t)&v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2081;
      swift_bridgeObjectRetain();
      sub_236B93FB0(v63, v64, &v67);
      sub_236BCFCC8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_236B83000, v24, typea, "No server section found. Using default. { configPath=%{private}s, platform=%{private}s }", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v27, -1, -1);
      MEMORY[0x23B7FE96C](v26, -1, -1);

    }
    else
    {
      sub_236B954F0((uint64_t)&v73);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_236B954F0((uint64_t)&v73);

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }
    v29 = v56;
    v28 = v57;
    v30 = v59;
LABEL_17:
    v31 = v58;
    v33 = v60;
    v32 = v61;
    v34 = v55;
LABEL_18:
    *(_WORD *)v62 = v32;
    *(_BYTE *)(v62 + 2) = v33;
    *(_QWORD *)(v62 + 8) = v11;
    *(_QWORD *)(v62 + 16) = v28;
    *(_QWORD *)(v62 + 24) = v29;
    *(_QWORD *)(v62 + 32) = v30;
    *(_QWORD *)(v62 + 40) = v15;
    *(_BYTE *)(v62 + 48) = v34 & 1;
    *(_QWORD *)(v62 + 56) = v31;
    return;
  }
  v19 = v66;
  v49 = *(_QWORD *)(v66 + 16);
  if (!v49)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = v56;
    v28 = v57;
    v30 = v59;
    goto LABEL_17;
  }
  v20 = 0;
  v52 = v11;
  while (v20 < *(_QWORD *)(v19 + 16))
  {
    v35 = *(_QWORD *)(v66 + 32 + 8 * v20);
    swift_bridgeObjectRetain_n();
    if ((type & 1) == 0)
      sub_236BBC1DC(v35, 1);
    CommonConfigFields.init(dict:)(v35, (uint64_t)&v67);
    v50 = v20;
    v46 = BYTE2(v67);
    v47 = v67;
    v37 = v68;
    v36 = v69;
    v29 = v70;
    v30 = v71;
    v38 = v72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45 = sub_236B9B274(0, v35, 1);
    v39 = sub_236BBD4CC(v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v51 = v36;
    swift_bridgeObjectRelease();
    v65 = v37;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v29)
    {
      v48 = v38;
      v40 = v29[2];
      v19 = v66;
      if (!v40 || (v11 = v52, v29[4] == v63) && v29[5] == v64 || (sub_236BCFF98() & 1) != 0)
      {
LABEL_45:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v33 = v46;
        v32 = v47;
        v34 = v45;
        v11 = v65;
        v28 = v51;
        v31 = v39;
        v15 = v48;
        goto LABEL_18;
      }
      if (v40 != 1)
      {
        if (v29[6] == v63 && v29[7] == v64 || (sub_236BCFF98() & 1) != 0)
          goto LABEL_45;
        if (v40 != 2)
        {
          v41 = v29 + 9;
          v42 = 2;
          while (1)
          {
            v43 = v42 + 1;
            if (__OFADD__(v42, 1))
              break;
            v44 = *(v41 - 1) == v63 && *v41 == v64;
            if (v44 || (sub_236BCFF98() & 1) != 0)
              goto LABEL_45;
            v41 += 2;
            ++v42;
            if (v43 == v40)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v11 = v52;
              v19 = v66;
              goto LABEL_20;
            }
          }
          __break(1u);
          break;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = v66;
      v11 = v52;
    }
LABEL_20:
    v20 = v50 + 1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v50 + 1 == v49)
      goto LABEL_44;
  }
  __break(1u);
}

uint64_t sub_236BBBF48(uint64_t a1, char a2)
{
  return sub_236BBBF80(a1, a2, sub_236BBC4C8);
}

uint64_t sub_236BBBF64(uint64_t a1, char a2)
{
  return sub_236BBBF80(a1, a2, sub_236BBC710);
}

uint64_t sub_236BBBF80(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;

  v5 = swift_bridgeObjectRetain();
  if (*(_QWORD *)(a3(v5) + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
    sub_236BBD908();
    sub_236BCF974();
    swift_bridgeObjectRelease();
    sub_236BCFD4C();
    swift_bridgeObjectRelease();
    __asm { BR              X10 }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_236BBC1DC(uint64_t a1, char a2)
{
  uint64_t v3;

  v3 = swift_bridgeObjectRetain();
  if (*(_QWORD *)(sub_236BBC958(v3) + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC8);
    sub_236BBD908();
    sub_236BCF974();
    swift_bridgeObjectRelease();
    sub_236BCFD4C();
    swift_bridgeObjectRelease();
    __asm { BR              X10 }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_236BBC43C(uint64_t a1, char a2)
{
  return sub_236BBC1DC(a1, a2);
}

uint64_t sub_236BBC458(uint64_t a1, char a2)
{
  return sub_236BBBF80(a1, a2, sub_236BBCBB8);
}

uint64_t sub_236BBC474(uint64_t a1, char a2)
{
  return sub_236BBBF80(a1, a2, sub_236BBCE00);
}

uint64_t sub_236BBC490(uint64_t a1, char a2)
{
  return sub_236BBBF80(a1, a2, sub_236BBD040);
}

uint64_t sub_236BBC4AC(uint64_t a1, char a2)
{
  return sub_236BBBF80(a1, a2, sub_236BBD288);
}

uint64_t sub_236BBC4C8(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v8 = MEMORY[0x24BEE4AF8];
  if (v6)
    goto LABEL_6;
LABEL_7:
  v11 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v11 < v7)
    {
      v12 = *(_QWORD *)(v3 + 8 * v11);
      ++v2;
      if (v12)
        goto LABEL_22;
      v2 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 2;
      if (v11 + 2 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 3;
      if (v11 + 3 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
      {
LABEL_22:
        v6 = (v12 - 1) & v12;
        for (i = __clz(__rbit64(v12)) + (v2 << 6); ; i = v9 | (v2 << 6))
        {
          v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
          v16 = *v14;
          v15 = (void *)v14[1];
          swift_bridgeObjectRetain_n();
          v17 = sub_236BCFE60();
          swift_bridgeObjectRelease();
          if (v17 >= 0xE
            && (swift_bridgeObjectRetain(),
                v18._countAndFlagsBits = v16,
                v18._object = v15,
                CommonKnownFields.init(rawValue:)(v18),
                v23 == 9))
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
              result = sub_236B8DC98(0, *(_QWORD *)(v8 + 16) + 1, 1);
            v20 = *(_QWORD *)(v8 + 16);
            v19 = *(_QWORD *)(v8 + 24);
            v21 = v20 + 1;
            if (v20 >= v19 >> 1)
            {
              result = sub_236B8DC98(v19 > 1, v20 + 1, 1);
              v21 = v20 + 1;
            }
            *(_QWORD *)(v8 + 16) = v21;
            v22 = v8 + 16 * v20;
            *(_QWORD *)(v22 + 32) = v16;
            *(_QWORD *)(v22 + 40) = v15;
            if (!v6)
              goto LABEL_7;
          }
          else
          {
            result = swift_bridgeObjectRelease();
            if (!v6)
              goto LABEL_7;
          }
LABEL_6:
          v9 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      v13 = v11 + 4;
      if (v13 < v7)
      {
        v12 = *(_QWORD *)(v3 + 8 * v13);
        if (v12)
        {
          v2 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          v2 = v13 + 1;
          if (__OFADD__(v13, 1))
            goto LABEL_33;
          if (v2 >= v7)
            break;
          v12 = *(_QWORD *)(v3 + 8 * v2);
          ++v13;
          if (v12)
            goto LABEL_22;
        }
      }
    }
LABEL_31:
    swift_release();
    return v8;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_236BBC710(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v8 = MEMORY[0x24BEE4AF8];
  if (v6)
    goto LABEL_6;
LABEL_7:
  v11 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v11 < v7)
    {
      v12 = *(_QWORD *)(v3 + 8 * v11);
      ++v2;
      if (v12)
        goto LABEL_22;
      v2 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 2;
      if (v11 + 2 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 3;
      if (v11 + 3 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
      {
LABEL_22:
        v6 = (v12 - 1) & v12;
        for (i = __clz(__rbit64(v12)) + (v2 << 6); ; i = v9 | (v2 << 6))
        {
          v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
          v16 = *v14;
          v15 = (void *)v14[1];
          swift_bridgeObjectRetain_n();
          v17 = sub_236BCFE60();
          swift_bridgeObjectRelease();
          if (v17 >= 5
            && (swift_bridgeObjectRetain(),
                v18._countAndFlagsBits = v16,
                v18._object = v15,
                CommonKnownFields.init(rawValue:)(v18),
                v23 == 9))
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
              result = sub_236B8DC98(0, *(_QWORD *)(v8 + 16) + 1, 1);
            v20 = *(_QWORD *)(v8 + 16);
            v19 = *(_QWORD *)(v8 + 24);
            v21 = v20 + 1;
            if (v20 >= v19 >> 1)
            {
              result = sub_236B8DC98(v19 > 1, v20 + 1, 1);
              v21 = v20 + 1;
            }
            *(_QWORD *)(v8 + 16) = v21;
            v22 = v8 + 16 * v20;
            *(_QWORD *)(v22 + 32) = v16;
            *(_QWORD *)(v22 + 40) = v15;
            if (!v6)
              goto LABEL_7;
          }
          else
          {
            result = swift_bridgeObjectRelease();
            if (!v6)
              goto LABEL_7;
          }
LABEL_6:
          v9 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      v13 = v11 + 4;
      if (v13 < v7)
      {
        v12 = *(_QWORD *)(v3 + 8 * v13);
        if (v12)
        {
          v2 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          v2 = v13 + 1;
          if (__OFADD__(v13, 1))
            goto LABEL_33;
          if (v2 >= v7)
            break;
          v12 = *(_QWORD *)(v3 + 8 * v2);
          ++v13;
          if (v12)
            goto LABEL_22;
        }
      }
    }
LABEL_31:
    swift_release();
    return v8;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_236BBC958(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  char v23;

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v22 = (unint64_t)(v4 + 63) >> 6;
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
    goto LABEL_6;
LABEL_7:
  v10 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v10 < v22)
    {
      v11 = *(_QWORD *)(v3 + 8 * v10);
      ++v2;
      if (v11)
        goto LABEL_22;
      v2 = v10 + 1;
      if (v10 + 1 >= v22)
        goto LABEL_31;
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (v11)
        goto LABEL_22;
      v2 = v10 + 2;
      if (v10 + 2 >= v22)
        goto LABEL_31;
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (v11)
        goto LABEL_22;
      v2 = v10 + 3;
      if (v10 + 3 >= v22)
        goto LABEL_31;
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (v11)
      {
LABEL_22:
        v6 = (v11 - 1) & v11;
        for (i = __clz(__rbit64(v11)) + (v2 << 6); ; i = v8 | (v2 << 6))
        {
          v13 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
          v15 = *v13;
          v14 = (void *)v13[1];
          swift_bridgeObjectRetain_n();
          v16 = sub_236BCFE60();
          swift_bridgeObjectRelease();
          if (v16 >= 2
            && (swift_bridgeObjectRetain(),
                v17._countAndFlagsBits = v15,
                v17._object = v14,
                CommonKnownFields.init(rawValue:)(v17),
                v23 == 9))
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
              result = sub_236B8DC98(0, *(_QWORD *)(v7 + 16) + 1, 1);
            v19 = *(_QWORD *)(v7 + 16);
            v18 = *(_QWORD *)(v7 + 24);
            v20 = v19 + 1;
            if (v19 >= v18 >> 1)
            {
              result = sub_236B8DC98(v18 > 1, v19 + 1, 1);
              v20 = v19 + 1;
            }
            *(_QWORD *)(v7 + 16) = v20;
            v21 = v7 + 16 * v19;
            *(_QWORD *)(v21 + 32) = v15;
            *(_QWORD *)(v21 + 40) = v14;
            if (!v6)
              goto LABEL_7;
          }
          else
          {
            result = swift_bridgeObjectRelease();
            if (!v6)
              goto LABEL_7;
          }
LABEL_6:
          v8 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      v12 = v10 + 4;
      if (v12 < v22)
      {
        v11 = *(_QWORD *)(v3 + 8 * v12);
        if (v11)
        {
          v2 = v12;
          goto LABEL_22;
        }
        while (1)
        {
          v2 = v12 + 1;
          if (__OFADD__(v12, 1))
            goto LABEL_33;
          if (v2 >= v22)
            break;
          v11 = *(_QWORD *)(v3 + 8 * v2);
          ++v12;
          if (v11)
            goto LABEL_22;
        }
      }
    }
LABEL_31:
    swift_release();
    return v7;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_236BBCBB8(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v8 = MEMORY[0x24BEE4AF8];
  if (v6)
    goto LABEL_6;
LABEL_7:
  v11 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v11 < v7)
    {
      v12 = *(_QWORD *)(v3 + 8 * v11);
      ++v2;
      if (v12)
        goto LABEL_22;
      v2 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 2;
      if (v11 + 2 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 3;
      if (v11 + 3 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
      {
LABEL_22:
        v6 = (v12 - 1) & v12;
        for (i = __clz(__rbit64(v12)) + (v2 << 6); ; i = v9 | (v2 << 6))
        {
          v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
          v16 = *v14;
          v15 = (void *)v14[1];
          swift_bridgeObjectRetain_n();
          v17 = sub_236BCFE60();
          swift_bridgeObjectRelease();
          if (v17 >= 7
            && (swift_bridgeObjectRetain(),
                v18._countAndFlagsBits = v16,
                v18._object = v15,
                CommonKnownFields.init(rawValue:)(v18),
                v23 == 9))
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
              result = sub_236B8DC98(0, *(_QWORD *)(v8 + 16) + 1, 1);
            v20 = *(_QWORD *)(v8 + 16);
            v19 = *(_QWORD *)(v8 + 24);
            v21 = v20 + 1;
            if (v20 >= v19 >> 1)
            {
              result = sub_236B8DC98(v19 > 1, v20 + 1, 1);
              v21 = v20 + 1;
            }
            *(_QWORD *)(v8 + 16) = v21;
            v22 = v8 + 16 * v20;
            *(_QWORD *)(v22 + 32) = v16;
            *(_QWORD *)(v22 + 40) = v15;
            if (!v6)
              goto LABEL_7;
          }
          else
          {
            result = swift_bridgeObjectRelease();
            if (!v6)
              goto LABEL_7;
          }
LABEL_6:
          v9 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      v13 = v11 + 4;
      if (v13 < v7)
      {
        v12 = *(_QWORD *)(v3 + 8 * v13);
        if (v12)
        {
          v2 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          v2 = v13 + 1;
          if (__OFADD__(v13, 1))
            goto LABEL_33;
          if (v2 >= v7)
            break;
          v12 = *(_QWORD *)(v3 + 8 * v2);
          ++v13;
          if (v12)
            goto LABEL_22;
        }
      }
    }
LABEL_31:
    swift_release();
    return v8;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_236BBCE00(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  Swift::String v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = v1;
  v3 = result;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = MEMORY[0x24BEE4AF8];
  if (v8)
    goto LABEL_6;
LABEL_7:
  v13 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v13 < v9)
    {
      v14 = *(_QWORD *)(v5 + 8 * v13);
      ++v4;
      if (v14)
        goto LABEL_22;
      v4 = v13 + 1;
      if (v13 + 1 >= v9)
        goto LABEL_31;
      v14 = *(_QWORD *)(v5 + 8 * v4);
      if (v14)
        goto LABEL_22;
      v4 = v13 + 2;
      if (v13 + 2 >= v9)
        goto LABEL_31;
      v14 = *(_QWORD *)(v5 + 8 * v4);
      if (v14)
        goto LABEL_22;
      v4 = v13 + 3;
      if (v13 + 3 >= v9)
        goto LABEL_31;
      v14 = *(_QWORD *)(v5 + 8 * v4);
      if (v14)
      {
LABEL_22:
        v8 = (v14 - 1) & v14;
        for (i = __clz(__rbit64(v14)) + (v4 << 6); ; i = v11 | (v4 << 6))
        {
          v16 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * i);
          v18 = *v16;
          v17 = (void *)v16[1];
          swift_bridgeObjectRetain_n();
          if (sub_236BC62F4() == 16
            && (swift_bridgeObjectRetain(),
                v19._countAndFlagsBits = v18,
                v19._object = v17,
                CommonKnownFields.init(rawValue:)(v19),
                v25 == 9))
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            v24 = v2;
            if ((result & 1) == 0)
              result = sub_236B8DC98(0, *(_QWORD *)(v10 + 16) + 1, 1);
            v21 = *(_QWORD *)(v10 + 16);
            v20 = *(_QWORD *)(v10 + 24);
            v22 = v21 + 1;
            if (v21 >= v20 >> 1)
            {
              result = sub_236B8DC98(v20 > 1, v21 + 1, 1);
              v22 = v21 + 1;
            }
            *(_QWORD *)(v10 + 16) = v22;
            v23 = v10 + 16 * v21;
            *(_QWORD *)(v23 + 32) = v18;
            *(_QWORD *)(v23 + 40) = v17;
            v2 = v24;
            if (!v8)
              goto LABEL_7;
          }
          else
          {
            result = swift_bridgeObjectRelease();
            if (!v8)
              goto LABEL_7;
          }
LABEL_6:
          v11 = __clz(__rbit64(v8));
          v8 &= v8 - 1;
        }
      }
      v15 = v13 + 4;
      if (v15 < v9)
      {
        v14 = *(_QWORD *)(v5 + 8 * v15);
        if (v14)
        {
          v4 = v15;
          goto LABEL_22;
        }
        while (1)
        {
          v4 = v15 + 1;
          if (__OFADD__(v15, 1))
            goto LABEL_33;
          if (v4 >= v9)
            break;
          v14 = *(_QWORD *)(v5 + 8 * v4);
          ++v15;
          if (v14)
            goto LABEL_22;
        }
      }
    }
LABEL_31:
    swift_release();
    return v10;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_236BBD040(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v8 = MEMORY[0x24BEE4AF8];
  if (v6)
    goto LABEL_6;
LABEL_7:
  v11 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v11 < v7)
    {
      v12 = *(_QWORD *)(v3 + 8 * v11);
      ++v2;
      if (v12)
        goto LABEL_22;
      v2 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 2;
      if (v11 + 2 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 3;
      if (v11 + 3 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
      {
LABEL_22:
        v6 = (v12 - 1) & v12;
        for (i = __clz(__rbit64(v12)) + (v2 << 6); ; i = v9 | (v2 << 6))
        {
          v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
          v16 = *v14;
          v15 = (void *)v14[1];
          swift_bridgeObjectRetain_n();
          v17 = sub_236BCFE60();
          swift_bridgeObjectRelease();
          if (v17 >= 6
            && (swift_bridgeObjectRetain(),
                v18._countAndFlagsBits = v16,
                v18._object = v15,
                CommonKnownFields.init(rawValue:)(v18),
                v23 == 9))
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
              result = sub_236B8DC98(0, *(_QWORD *)(v8 + 16) + 1, 1);
            v20 = *(_QWORD *)(v8 + 16);
            v19 = *(_QWORD *)(v8 + 24);
            v21 = v20 + 1;
            if (v20 >= v19 >> 1)
            {
              result = sub_236B8DC98(v19 > 1, v20 + 1, 1);
              v21 = v20 + 1;
            }
            *(_QWORD *)(v8 + 16) = v21;
            v22 = v8 + 16 * v20;
            *(_QWORD *)(v22 + 32) = v16;
            *(_QWORD *)(v22 + 40) = v15;
            if (!v6)
              goto LABEL_7;
          }
          else
          {
            result = swift_bridgeObjectRelease();
            if (!v6)
              goto LABEL_7;
          }
LABEL_6:
          v9 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      v13 = v11 + 4;
      if (v13 < v7)
      {
        v12 = *(_QWORD *)(v3 + 8 * v13);
        if (v12)
        {
          v2 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          v2 = v13 + 1;
          if (__OFADD__(v13, 1))
            goto LABEL_33;
          if (v2 >= v7)
            break;
          v12 = *(_QWORD *)(v3 + 8 * v2);
          ++v13;
          if (v12)
            goto LABEL_22;
        }
      }
    }
LABEL_31:
    swift_release();
    return v8;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_236BBD288(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v8 = MEMORY[0x24BEE4AF8];
  if (v6)
    goto LABEL_6;
LABEL_7:
  v11 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v11 < v7)
    {
      v12 = *(_QWORD *)(v3 + 8 * v11);
      ++v2;
      if (v12)
        goto LABEL_22;
      v2 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 2;
      if (v11 + 2 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 3;
      if (v11 + 3 >= v7)
        goto LABEL_31;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
      {
LABEL_22:
        v6 = (v12 - 1) & v12;
        for (i = __clz(__rbit64(v12)) + (v2 << 6); ; i = v9 | (v2 << 6))
        {
          v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * i);
          v16 = *v14;
          v15 = (void *)v14[1];
          swift_bridgeObjectRetain_n();
          v17 = sub_236BCFE60();
          swift_bridgeObjectRelease();
          if (v17
            && (swift_bridgeObjectRetain(),
                v18._countAndFlagsBits = v16,
                v18._object = v15,
                CommonKnownFields.init(rawValue:)(v18),
                v23 == 9))
          {
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
              result = sub_236B8DC98(0, *(_QWORD *)(v8 + 16) + 1, 1);
            v20 = *(_QWORD *)(v8 + 16);
            v19 = *(_QWORD *)(v8 + 24);
            v21 = v20 + 1;
            if (v20 >= v19 >> 1)
            {
              result = sub_236B8DC98(v19 > 1, v20 + 1, 1);
              v21 = v20 + 1;
            }
            *(_QWORD *)(v8 + 16) = v21;
            v22 = v8 + 16 * v20;
            *(_QWORD *)(v22 + 32) = v16;
            *(_QWORD *)(v22 + 40) = v15;
            if (!v6)
              goto LABEL_7;
          }
          else
          {
            result = swift_bridgeObjectRelease();
            if (!v6)
              goto LABEL_7;
          }
LABEL_6:
          v9 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      v13 = v11 + 4;
      if (v13 < v7)
      {
        v12 = *(_QWORD *)(v3 + 8 * v13);
        if (v12)
        {
          v2 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          v2 = v13 + 1;
          if (__OFADD__(v13, 1))
            goto LABEL_33;
          if (v2 >= v7)
            break;
          v12 = *(_QWORD *)(v3 + 8 * v2);
          ++v13;
          if (v12)
            goto LABEL_22;
        }
      }
    }
LABEL_31:
    swift_release();
    return v8;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

_QWORD *sub_236BBD4CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v1 = sub_236BBADDC(1, a1);
  if (v1)
    v2 = (_QWORD *)v1;
  else
    v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = sub_236B8E0D0(0, v2[2] + 1, 1, v2);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = sub_236B8E0D0((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  v6 = &v3[2 * v5];
  v6[4] = 0xD000000000000010;
  v6[5] = 0x8000000236BD4770;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t ServerConfig.commonFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 2);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  *(_WORD *)a1 = *(_WORD *)v1;
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t ServerConfig.monitorClientConnections.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ServerConfig.skipPreviousFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for ServerConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ServerConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ServerConfig(uint64_t a1, __int16 *a2)
{
  __int16 v4;

  v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ServerConfig(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ServerConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ServerConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServerConfig()
{
  return &type metadata for ServerConfig;
}

unint64_t sub_236BBD908()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2542AFDD0;
  if (!qword_2542AFDD0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2542AFDC8);
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_2542AFDD0);
  }
  return result;
}

uint64_t dispatch thunk of SessionProtocol.serviceType.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of SessionProtocol.serviceType.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of SessionProtocol.clientProcessName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SessionProtocol.pid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of SessionProtocol.processOnQueue(message:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of SessionProtocol.processAsync(message:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t sub_236BBD984(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char *v21;
  void (*v22)(char *, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;

  v27 = a5;
  v28 = a8;
  v33 = a1;
  v34 = a2;
  v26 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v35 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v31 = (char *)&v24 - v13;
  v36 = a4;
  MEMORY[0x24BDAC7A8](v12);
  v30 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = swift_getAssociatedTypeWitness();
  v29 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v24 - v16;
  v18 = sub_236BCFBD8();
  if (!v18)
    return sub_236BCFB60();
  v19 = v18;
  v25 = v15;
  v39 = sub_236BCFDE8();
  v32 = sub_236BCFDF4();
  sub_236BCFDAC();
  v36 = v17;
  result = sub_236BCFBCC();
  if (v19 < 0)
  {
    __break(1u);
  }
  else
  {
    v21 = v31;
    while (1)
    {
      v22 = (void (*)(char *, _QWORD))sub_236BCFBFC();
      (*(void (**)(char *))(v11 + 16))(v21);
      v22(v38, 0);
      v23 = v37;
      v33(v21, v35);
      if (v23)
        break;
      v37 = 0;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
      sub_236BCFDDC();
      sub_236BCFBF0();
      if (!--v19)
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
        return v39;
      }
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v21, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v25);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v28, v35, v27);
  }
  return result;
}

uint64_t Dictionary<>.asStringAny()(uint64_t a1)
{
  return sub_236B8B5D0(a1);
}

Swift::Double_optional __swiftcall SimpleType.unwrapToDouble()()
{
  unsigned __int8 *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  Swift::Bool v6;
  Swift::Double_optional result;

  v1 = *v0;
  v2 = *(unsigned int *)(v0 + 1) | ((unint64_t)(*(unsigned __int16 *)(v0 + 5) | (v0[7] << 16)) << 32);
  v3 = *(uint64_t *)v0;
  switch(v0[16])
  {
    case 0u:
      v4 = (double)(uint64_t)(v1 | (v2 << 8));
      *(double *)&v3 = v4;
      break;
    case 1u:
      v4 = (double)(v1 | (v2 << 8));
      *(double *)&v3 = v4;
      break;
    case 2u:
      break;
    case 3u:
      LOBYTE(v3) = 0;
      break;
    case 4u:
      v5 = *((_QWORD *)v0 + 1);
      swift_bridgeObjectRetain();
      LOBYTE(v3) = sub_236BC1FC0(v3, v5);
      break;
    default:
      LOBYTE(v3) = 0;
      break;
  }
  v6 = v3;
  result.value = v4;
  result.is_nil = v6;
  return result;
}

Swift::Bool __swiftcall SimpleType.isTrue()()
{
  uint64_t v0;
  double v1;
  Swift::Bool result;
  uint64_t v3;
  char v4;

  v1 = *(double *)v0;
  switch(*(_BYTE *)(v0 + 16))
  {
    case 0:
    case 1:
      result = *(_QWORD *)&v1 == 1;
      break;
    case 2:
      result = v1 == 1.0;
      break;
    case 3:
      result = LOBYTE(v1) & 1;
      break;
    case 4:
      v3 = sub_236BCF9F8();
      v4 = sub_236BA8BC0(v3);
      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      result = v4 & 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void SimpleType.hash(into:)()
{
  __asm { BR              X11 }
}

uint64_t sub_236BBDE44()
{
  sub_236BD0034();
  return sub_236BD0058();
}

uint64_t sub_236BBDE94()
{
  sub_236BD0034();
  return sub_236BCFA34();
}

uint64_t sub_236BBDEBC()
{
  uint64_t v0;
  uint64_t v1;

  sub_236BD0034();
  return sub_236BC1E7C(v1, v0);
}

uint64_t sub_236BBDEDC()
{
  uint64_t v0;
  uint64_t v1;

  sub_236BD0034();
  return sub_236BC0EE4(v1, v0);
}

uint64_t sub_236BBDF00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

uint64_t sub_236BBE2D8()
{
  return 12383;
}

void sub_236BBE2E8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_236BBE2F4()
{
  sub_236BC24E8();
  return sub_236BD0088();
}

uint64_t sub_236BBE31C()
{
  sub_236BC24E8();
  return sub_236BD0094();
}

uint64_t sub_236BBE344()
{
  sub_236BC2570();
  return sub_236BD0088();
}

uint64_t sub_236BBE36C()
{
  sub_236BC2570();
  return sub_236BD0094();
}

uint64_t sub_236BBE394()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236BBE3BC + 4 * byte_236BD2E38[*v0]))(7630441, 0xE300000000000000);
}

uint64_t sub_236BBE3BC()
{
  return 1953393013;
}

uint64_t sub_236BBE3CC()
{
  return 0x656C62756F64;
}

uint64_t sub_236BBE3E0()
{
  return 1819242338;
}

uint64_t sub_236BBE3F0()
{
  return 0x676E69727473;
}

uint64_t sub_236BBE404()
{
  return 0x7961727261;
}

uint64_t sub_236BBE418()
{
  return 0x616E6F6974636964;
}

uint64_t sub_236BBE434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_236BC3204(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_236BBE458()
{
  sub_236BC2460();
  return sub_236BD0088();
}

uint64_t sub_236BBE480()
{
  sub_236BC2460();
  return sub_236BD0094();
}

uint64_t sub_236BBE4A8()
{
  sub_236BC24A4();
  return sub_236BD0088();
}

uint64_t sub_236BBE4D0()
{
  sub_236BC24A4();
  return sub_236BD0094();
}

uint64_t sub_236BBE4F8()
{
  sub_236BC25B4();
  return sub_236BD0088();
}

uint64_t sub_236BBE520()
{
  sub_236BC25B4();
  return sub_236BD0094();
}

uint64_t sub_236BBE548()
{
  sub_236BC263C();
  return sub_236BD0088();
}

uint64_t sub_236BBE570()
{
  sub_236BC263C();
  return sub_236BD0094();
}

uint64_t sub_236BBE598()
{
  sub_236BC252C();
  return sub_236BD0088();
}

uint64_t sub_236BBE5C0()
{
  sub_236BC252C();
  return sub_236BD0094();
}

uint64_t sub_236BBE5E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_236BCFF98();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_236BBE664()
{
  sub_236BC25F8();
  return sub_236BD0088();
}

uint64_t sub_236BBE68C()
{
  sub_236BC25F8();
  return sub_236BD0094();
}

void SimpleType.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442D70);
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442D78);
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v27 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442D80);
  v25 = *(_QWORD *)(v7 - 8);
  v26 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v24 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442D88);
  v22 = *(_QWORD *)(v9 - 8);
  v23 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v21 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442D90);
  v19 = *(_QWORD *)(v11 - 8);
  v20 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v18 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442D98);
  v16[3] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442DA0);
  v16[2] = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442DA8);
  v34 = *(_QWORD *)(v14 - 8);
  v35 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v33 = *v1;
  v16[1] = v1[1];
  v15 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_236BC2460();
  sub_236BD007C();
  __asm { BR              X9 }
}

uint64_t sub_236BBE950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 - 96) = 0;
  sub_236BC263C();
  v4 = *(_QWORD *)(v3 - 112);
  sub_236BCFEF0();
  sub_236BCFF44();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 272) + 8))(v1, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 120) + 8))(v0, v4);
}

uint64_t SimpleType.hashValue.getter()
{
  sub_236BD0028();
  SimpleType.hash(into:)();
  return sub_236BD0064();
}

uint64_t SimpleType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  _QWORD v29[6];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;

  v49 = a2;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442E00);
  v39 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v47 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442E08);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v46 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442E10);
  v37 = *(_QWORD *)(v6 - 8);
  v38 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v45 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442E18);
  v35 = *(_QWORD *)(v8 - 8);
  v36 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v44 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442E20);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v43 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442E28);
  v31 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v42 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442E30);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442E38);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v50 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v21);
  sub_236BC2460();
  v22 = v51;
  sub_236BD0070();
  if (!v22)
  {
    v29[4] = v16;
    v29[2] = v14;
    v29[3] = v13;
    v30 = v18;
    v29[5] = 0;
    v51 = v20;
    v23 = sub_236BCFEE4();
    if (*(_QWORD *)(v23 + 16) == 1)
      __asm { BR              X9 }
    v24 = sub_236BCFD7C();
    swift_allocError();
    v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256442E40);
    *v26 = &type metadata for SimpleType;
    v27 = v51;
    sub_236BCFE78();
    sub_236BCFD70();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x24BEE26D0], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v17);
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v50);
}

void sub_236BBF184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v2 - 312) = v0;
  *(_BYTE *)(v2 - 96) = 1;
  sub_236BC25F8();
  v3 = *(_QWORD *)(v2 - 176);
  v4 = *(_QWORD *)(v2 - 104);
  v5 = *(_QWORD *)(v2 - 280);
  sub_236BCFE6C();
  if (v5)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x236BBF14CLL);
  }
  v6 = *(_QWORD *)(v2 - 256);
  sub_236BCFED8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 264) + 8))(v3, v6);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 272) + 8))(v4, v1);
  JUMPOUT(0x236BBF538);
}

void sub_236BBF1F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v2 - 96) = 2;
  sub_236BC25B4();
  v3 = *(_QWORD *)(v2 - 168);
  v4 = *(_QWORD *)(v2 - 104);
  v5 = *(_QWORD *)(v2 - 280);
  sub_236BCFE6C();
  if (!v5)
  {
    v6 = v3;
    v7 = *(_QWORD *)(v2 - 240);
    sub_236BCFEB4();
    *(_QWORD *)(v2 - 280) = 0;
    v8 = *(_QWORD *)(v2 - 272);
    *(_QWORD *)(v2 - 312) = v0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 248) + 8))(v6, v7);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v1);
    JUMPOUT(0x236BBF780);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 272) + 8))(v4, v1);
  JUMPOUT(0x236BBF158);
}

void sub_236BBF3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 - 312) = v0;
  *(_BYTE *)(v1 - 96) = 6;
  sub_236BC24A4();
  v2 = *(_QWORD *)(v1 - 280);
  sub_236BCFE6C();
  if (v2)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x236BBF150);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256442AB8);
  sub_236BB2528(&qword_256442AF0, (uint64_t (*)(void))sub_236BB259C, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
  sub_236BCFEC0();
  *(_QWORD *)(v1 - 280) = 0;
  JUMPOUT(0x236BBF74CLL);
}

uint64_t sub_236BBF794@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SimpleType.init(from:)(a1, a2);
}

void sub_236BBF7A8(_QWORD *a1)
{
  SimpleType.encode(to:)(a1);
}

uint64_t sub_236BBF7BC()
{
  sub_236BD0028();
  SimpleType.hash(into:)();
  return sub_236BD0064();
}

uint64_t sub_236BBF810()
{
  sub_236BD0028();
  SimpleType.hash(into:)();
  return sub_236BD0064();
}

uint64_t ConversionError.errorDescription.getter()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_236BCFD4C();
  sub_236BCFA58();
  sub_236BCFA58();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  sub_236BCFA58();
  swift_bridgeObjectRelease();
  sub_236BCFA58();
  return 0;
}

uint64_t static SimpleType.initOrThrow(_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  unsigned __int8 v16;

  sub_236B8E794((uint64_t)a1, (uint64_t)&v13);
  result = SimpleType.init(_:)((uint64_t)&v13, (uint64_t)&v15);
  v5 = v16;
  if (v16 == 255)
  {
    sub_236BC2730();
    swift_allocError();
    v7 = v6;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    swift_getDynamicType();
    v8 = sub_236BD00A0();
    v10 = v9;
    v13 = 0;
    v14 = 0xE000000000000000;
    sub_236BCFE00();
    v11 = v13;
    v12 = v14;
    *v7 = v8;
    v7[1] = v10;
    v7[2] = v11;
    v7[3] = v12;
    return swift_willThrow();
  }
  else
  {
    *(_OWORD *)a2 = v15;
    *(_BYTE *)(a2 + 16) = v5;
  }
  return result;
}

uint64_t SimpleType.init(integerLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

void SimpleType.init(floatLiteral:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
}

uint64_t SimpleType.init(BOOLeanLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result & 1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 3;
  return result;
}

uint64_t SimpleType.init(stringLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = 4;
  return result;
}

_QWORD *sub_236BBFAAC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

_QWORD *sub_236BBFABC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 2;
  return result;
}

unsigned __int8 *sub_236BBFAD0@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 3;
  return result;
}

_QWORD *sub_236BBFAE4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = result[1];
  *(_QWORD *)a2 = *result;
  *(_QWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 16) = 4;
  return result;
}

uint64_t SimpleType.description.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  char v11;

  v1 = *v0;
  v3 = *(_QWORD *)v0;
  v2 = *((_QWORD *)v0 + 1);
  v4 = v0[16];
  switch(v4)
  {
    case 0:
      *(_QWORD *)&v10 = *(_QWORD *)v0;
      goto LABEL_5;
    case 1:
      *(_QWORD *)&v10 = *(_QWORD *)v0;
LABEL_5:
      v8 = sub_236BCFF74();
      goto LABEL_7;
    case 2:
      v8 = sub_236BCFBA8();
LABEL_7:
      v3 = v8;
      break;
    case 3:
      if ((v1 & 1) != 0)
        v3 = 1702195828;
      else
        v3 = 0x65736C6166;
      break;
    case 4:
      swift_bridgeObjectRetain();
      break;
    default:
      v5 = *(unsigned __int16 *)(v0 + 5) | (v0[7] << 16);
      v6 = *(unsigned int *)(v0 + 1);
      *(_QWORD *)&v10 = *(_QWORD *)v0;
      *((_QWORD *)&v10 + 1) = v2;
      v11 = v4;
      v7 = swift_allocObject();
      sub_236BC279C(&v10, v7 + 16);
      *(_QWORD *)&v10 = sub_236BC27B4;
      *((_QWORD *)&v10 + 1) = v7;
      sub_236B8C348(v3, v2, v4);
      sub_236B8C348(v3, v2, v4);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256442E68);
      v3 = sub_236BCF9EC();
      sub_236B8C2D4((v6 << 8) | (v5 << 40) | v1, v2, v4);
      break;
  }
  return v3;
}

uint64_t SimpleType.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 5;
  return result;
}

uint64_t SimpleType.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFEF0);
    v3 = sub_236BCFE3C();
  }
  else
  {
    v3 = MEMORY[0x24BEE4B00];
  }
  v6 = v3;
  v4 = swift_bridgeObjectRetain();
  sub_236BC03D0(v4, 1, &v6);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 16) = 6;
  return result;
}

uint64_t sub_236BBFD58@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 5;
  return result;
}

Swift::UInt64_optional __swiftcall SimpleType.unwrapToUInt()()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  char v10;
  char v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  Swift::Bool v21;
  uint64_t v22;
  unsigned __int8 *v23;
  char v24;
  _QWORD v25[3];
  Swift::UInt64_optional result;

  LOBYTE(v1) = 0;
  v2 = *v0;
  v3 = *(_QWORD *)v0;
  switch(v0[16])
  {
    case 0u:
      v4 = *(unsigned __int16 *)(v0 + 5) | (v0[7] << 16);
      v1 = (v4 >> 23) & 1;
      v3 = ((v4 << 40) | ((unint64_t)*(unsigned int *)(v0 + 1) << 8) | v2) & ~((uint64_t)(v4 << 40) >> 63);
      goto LABEL_43;
    case 1u:
      goto LABEL_43;
    case 3u:
      LOBYTE(v1) = 0;
      v3 = v2 & 1;
      goto LABEL_43;
    case 4u:
      v5 = *((_QWORD *)v0 + 1);
      v6 = HIBYTE(v5) & 0xF;
      v7 = v3 & 0xFFFFFFFFFFFFLL;
      if ((v5 & 0x2000000000000000) != 0)
        v8 = HIBYTE(v5) & 0xF;
      else
        v8 = v3 & 0xFFFFFFFFFFFFLL;
      if (!v8)
        goto LABEL_13;
      if ((v5 & 0x1000000000000000) == 0)
      {
        if ((v5 & 0x2000000000000000) == 0)
        {
          if ((v3 & 0x1000000000000000) != 0)
            v9 = (unsigned __int8 *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v9 = (unsigned __int8 *)sub_236BCFD88();
          v3 = (uint64_t)sub_236BC07AC(v9, v7, 10);
          v11 = v10 & 1;
          goto LABEL_41;
        }
        v25[0] = v3;
        v25[1] = v5 & 0xFFFFFFFFFFFFFFLL;
        if (v3 == 43)
        {
          if (v6)
          {
            v16 = v6 - 1;
            if (v6 != 1)
            {
              v3 = 0;
              v17 = (unsigned __int8 *)v25 + 1;
              while (1)
              {
                v18 = *v17 - 48;
                if (v18 > 9)
                  break;
                if (!is_mul_ok(v3, 0xAuLL))
                  break;
                v15 = __CFADD__(10 * v3, v18);
                v3 = 10 * v3 + v18;
                if (v15)
                  break;
                v11 = 0;
                ++v17;
                if (!--v16)
                  goto LABEL_41;
              }
            }
            goto LABEL_40;
          }
        }
        else
        {
          if (v3 != 45)
          {
            if (v6)
            {
              v3 = 0;
              v19 = (unsigned __int8 *)v25;
              while (1)
              {
                v20 = *v19 - 48;
                if (v20 > 9)
                  break;
                if (!is_mul_ok(v3, 0xAuLL))
                  break;
                v15 = __CFADD__(10 * v3, v20);
                v3 = 10 * v3 + v20;
                if (v15)
                  break;
                v11 = 0;
                ++v19;
                if (!--v6)
                  goto LABEL_41;
              }
            }
            goto LABEL_40;
          }
          if (v6)
          {
            v12 = v6 - 1;
            if (v6 != 1)
            {
              v3 = 0;
              v13 = (unsigned __int8 *)v25 + 1;
              while (1)
              {
                v14 = *v13 - 48;
                if (v14 > 9)
                  break;
                if (!is_mul_ok(v3, 0xAuLL))
                  break;
                v15 = 10 * v3 >= (unint64_t)v14;
                v3 = 10 * v3 - v14;
                if (!v15)
                  break;
                v11 = 0;
                ++v13;
                if (!--v12)
                  goto LABEL_41;
              }
            }
LABEL_40:
            v3 = 0;
            v11 = 1;
            goto LABEL_41;
          }
          __break(1u);
        }
        __break(1u);
        JUMPOUT(0x236BBFFD0);
      }
      v22 = v3;
      sub_236B8C348(v3, v5, 4);
      v23 = sub_236BC2100(v22, v5, 10);
      v11 = v24;
      sub_236B8C2D4(v22, v5, 4);
      v3 = (uint64_t)v23;
LABEL_41:
      LOBYTE(v1) = v11 & 1;
      if ((v11 & 1) != 0)
        v3 = 0;
LABEL_43:
      v21 = v1;
      result.value = v3;
      result.is_nil = v21;
      return result;
    default:
LABEL_13:
      v3 = 0;
      LOBYTE(v1) = 1;
      goto LABEL_43;
  }
}

Swift::String_optional __swiftcall SimpleType.unwrapToString()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String_optional result;

  if (*(_BYTE *)(v0 + 16) == 4)
  {
    v3 = v0;
    v2 = *(_QWORD *)v0;
    v1 = *(void **)(v3 + 8);
    swift_bridgeObjectRetain();
  }
  else
  {
    v2 = 0;
    v1 = 0;
  }
  v4 = v2;
  v5 = v1;
  result.value._object = v5;
  result.value._countAndFlagsBits = v4;
  return result;
}

Swift::OpaquePointer_optional __swiftcall Array.asSimpleType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::Bool v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::OpaquePointer_optional result;

  v10 = v0;
  v8 = v1;
  v2 = sub_236BCFB84();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256442A30);
  v4 = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE12E0], v2);
  v5 = (void *)sub_236BBD984((void (*)(char *, char *))sub_236BC27D4, (uint64_t)&v7, v2, (char *)&type metadata for SimpleType, v3, v4, MEMORY[0x24BEE3F20], (uint64_t)&v9);
  result.value._rawValue = v5;
  result.is_nil = v6;
  return result;
}

uint64_t sub_236BC0268@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  uint64_t v11[4];

  v11[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
  static SimpleType.initOrThrow(_:)(v11, a4);
  result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v11);
  if (v4)
    *a3 = v4;
  return result;
}

_QWORD *sub_236BC02F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF310);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_236BC0358(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_236BCFAB8();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x23B7FDC34](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

void sub_236BC03D0(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  id v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  char v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if (!*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    return;
  }
  v45 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v9 = *(_BYTE *)(a1 + 64);
  swift_bridgeObjectRetain();
  v10 = *a3;
  swift_bridgeObjectRetain();
  sub_236B8C348(v8, v7, v9);
  v12 = sub_236B8BFC0(v6, v5);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (*(_QWORD *)(v10 + 24) >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_236B9F18C();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = a3;
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v23 = (uint64_t *)(v22[6] + 16 * v12);
    *v23 = v6;
    v23[1] = v5;
    v24 = v22[7] + 24 * v12;
    *(_QWORD *)v24 = v8;
    *(_QWORD *)(v24 + 8) = v7;
    *(_BYTE *)(v24 + 16) = v9;
    v25 = v22[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v27;
    v28 = v45 - 1;
    if (v45 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v29 = (char *)(a1 + 104);
    while (1)
    {
      v31 = *((_QWORD *)v29 - 4);
      v30 = *((_QWORD *)v29 - 3);
      v8 = *((_QWORD *)v29 - 2);
      v7 = *((_QWORD *)v29 - 1);
      v9 = *v29;
      v32 = *v21;
      swift_bridgeObjectRetain();
      sub_236B8C348(v8, v7, v9);
      v33 = sub_236B8BFC0(v31, v30);
      v35 = *(_QWORD *)(v32 + 16);
      v36 = (v34 & 1) == 0;
      v26 = __OFADD__(v35, v36);
      v37 = v35 + v36;
      if (v26)
        break;
      v38 = v34;
      if (*(_QWORD *)(v32 + 24) < v37)
      {
        sub_236B9EB18(v37, 1);
        v33 = sub_236B8BFC0(v31, v30);
        if ((v38 & 1) != (v39 & 1))
          goto LABEL_25;
      }
      if ((v38 & 1) != 0)
        goto LABEL_10;
      v21 = a3;
      v40 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v33 >> 6) + 64) |= 1 << v33;
      v41 = (uint64_t *)(v40[6] + 16 * v33);
      *v41 = v31;
      v41[1] = v30;
      v42 = v40[7] + 24 * v33;
      *(_QWORD *)v42 = v8;
      *(_QWORD *)(v42 + 8) = v7;
      *(_BYTE *)(v42 + 16) = v9;
      v43 = v40[2];
      v26 = __OFADD__(v43, 1);
      v44 = v43 + 1;
      if (v26)
        goto LABEL_24;
      v29 += 40;
      v40[2] = v44;
      if (!--v28)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_236B9EB18(v15, a2 & 1);
  v17 = sub_236B8BFC0(v6, v5);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256442A30);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_236B8C2D4(v8, v7, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_236BCFFD4();
  __break(1u);
LABEL_26:
  sub_236BCFD4C();
  sub_236BCFA58();
  sub_236BCFE00();
  sub_236BCFA58();
  sub_236BCFE18();
  __break(1u);
}

unsigned __int8 *sub_236BC07AC(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v13 = v9 * a3;
              v14 = v11 + v12;
              v15 = v13 >= v14;
              v9 = v13 - v14;
              if (!v15)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v25 = a3 + 48;
      v26 = a3 + 55;
      v27 = a3 + 87;
      if (a3 > 10)
      {
        v25 = 58;
      }
      else
      {
        v27 = 97;
        v26 = 65;
      }
      if (result)
      {
        v28 = 0;
        do
        {
          v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27)
                return 0;
              v30 = -87;
            }
            else
            {
              v30 = -55;
            }
          }
          else
          {
            v30 = -48;
          }
          if (!is_mul_ok(v28, a3))
            return 0;
          v31 = v28 * a3;
          v32 = v29 + v30;
          v15 = __CFADD__(v31, v32);
          v28 = v31 + v32;
          if (v15)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v16 = a2 - 1;
  if (a2 == 1)
    return 0;
  v17 = a3 + 48;
  v18 = a3 + 55;
  v19 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v19 = 97;
    v18 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v20 = result + 1;
  do
  {
    v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19)
          return 0;
        v22 = -87;
      }
      else
      {
        v22 = -55;
      }
    }
    else
    {
      v22 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v23 = v9 * a3;
    v24 = v21 + v22;
    v15 = __CFADD__(v23, v24);
    v9 = v23 + v24;
    if (v15)
      return 0;
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t sub_236BC0A28()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_236BCFAD0();
  v4 = sub_236BC0AA4(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_236BC0AA4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_236BC0BE8(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_236BC02F4(v9, 0);
      v12 = sub_236BC0CD4((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x23B7FDBC8](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x23B7FDBC8);
LABEL_9:
      sub_236BCFD88();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x23B7FDBC8]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_236BC0BE8(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_236BC0358(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_236BC0358(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_236BCFAA0();
  }
  __break(1u);
  return result;
}

unint64_t sub_236BC0CD4(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_236BC0358(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_236BCFAAC();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_236BCFD88();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_236BC0358(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_236BCFA88();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_236BC0EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  int64_t v15;

  v14 = (_QWORD *)(a2 + 64);
  v2 = 1 << *(_BYTE *)(a2 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a2 + 64);
  v15 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v4)
  {
    v5 = __clz(__rbit64(v4));
    goto LABEL_16;
  }
  if (v15 > 1)
  {
    v6 = v14[1];
    v7 = 1;
    if (v6)
      goto LABEL_15;
    v7 = 2;
    if (v15 <= 2)
      goto LABEL_17;
    v6 = v14[2];
    if (v6)
    {
LABEL_15:
      v5 = __clz(__rbit64(v6)) + (v7 << 6);
LABEL_16:
      v9 = *(_QWORD *)(a2 + 56) + 24 * v5;
      v10 = *(_QWORD *)v9;
      v11 = *(_QWORD *)(v9 + 8);
      v12 = *(unsigned __int8 *)(v9 + 16);
      swift_bridgeObjectRetain();
      sub_236B8C348(v10, v11, v12);
      sub_236BCFA34();
      swift_bridgeObjectRelease();
      __asm { BR              X8 }
    }
    v8 = 3;
    if (v15 > 3)
    {
      v6 = v14[3];
      if (v6)
      {
        v7 = 3;
        goto LABEL_15;
      }
      while (1)
      {
        v7 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          JUMPOUT(0x236BC1D64);
        }
        if (v7 >= v15)
          break;
        v6 = v14[v7];
        ++v8;
        if (v6)
          goto LABEL_15;
      }
    }
  }
LABEL_17:
  swift_release();
  return sub_236BD0034();
}

uint64_t sub_236BC1E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_236BD0034();
  if (v3)
    __asm { BR              X9 }
  return result;
}

uint64_t sub_236BC1FC0(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  int v3;
  _BYTE *v4;
  _QWORD v6[3];
  uint64_t v7;

  v7 = 0;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_236BCFD40();
    swift_bridgeObjectRelease();
    v3 = LOBYTE(v6[0]);
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v6[0] = a1;
    v6[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    v3 = (a1 > 0x20u || ((0x100003E01uLL >> a1) & 1) == 0)
      && (v4 = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0
      && *v4 == 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
      v2 = (_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v2 = (_BYTE *)sub_236BCFD88();
    sub_236BC34AC(v2, (BOOL *)v6);
    v3 = LOBYTE(v6[0]);
    swift_bridgeObjectRelease();
  }
  if (v3)
    return v7;
  else
    return 0;
}

unsigned __int8 *sub_236BC2100(uint64_t a1, uint64_t a2, int64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_236BCFAC4();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_236BC0A28();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_236BCFD88();
  }
LABEL_7:
  v11 = sub_236BC21E4(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_236BC21E4(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  unint64_t v32;
  unsigned __int8 v33;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v14 = v9 * a3;
              v15 = v11 + v12;
              v16 = v14 >= v15;
              v9 = v14 - v15;
              if (!v16)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      v26 = a3 + 48;
      v27 = a3 + 55;
      v28 = a3 + 87;
      if (a3 > 10)
      {
        v26 = 58;
      }
      else
      {
        v28 = 97;
        v27 = 65;
      }
      if (result)
      {
        v29 = 0;
        do
        {
          v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              v13 = 0;
              if (v30 < 0x61 || v30 >= v28)
                return (unsigned __int8 *)v13;
              v31 = -87;
            }
            else
            {
              v31 = -55;
            }
          }
          else
          {
            v31 = -48;
          }
          if (!is_mul_ok(v29, a3))
            return 0;
          v32 = v29 * a3;
          v33 = v30 + v31;
          v16 = __CFADD__(v32, v33);
          v29 = v32 + v33;
          if (v16)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  v17 = a2 - 1;
  if (a2 == 1)
    return 0;
  v18 = a3 + 48;
  v19 = a3 + 55;
  v20 = a3 + 87;
  if (a3 > 10)
  {
    v18 = 58;
  }
  else
  {
    v20 = 97;
    v19 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v21 = result + 1;
  do
  {
    v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        v13 = 0;
        if (v22 < 0x61 || v22 >= v20)
          return (unsigned __int8 *)v13;
        v23 = -87;
      }
      else
      {
        v23 = -55;
      }
    }
    else
    {
      v23 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v24 = v9 * a3;
    v25 = v22 + v23;
    v16 = __CFADD__(v24, v25);
    v9 = v24 + v25;
    if (v16)
      return 0;
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

unint64_t sub_236BC2460()
{
  unint64_t result;

  result = qword_256442DB0;
  if (!qword_256442DB0)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3A78, &type metadata for SimpleType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442DB0);
  }
  return result;
}

unint64_t sub_236BC24A4()
{
  unint64_t result;

  result = qword_256442DB8;
  if (!qword_256442DB8)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3A28, &type metadata for SimpleType.DictionaryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442DB8);
  }
  return result;
}

unint64_t sub_236BC24E8()
{
  unint64_t result;

  result = qword_256442DC0;
  if (!qword_256442DC0)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD39D8, &type metadata for SimpleType.ArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442DC0);
  }
  return result;
}

unint64_t sub_236BC252C()
{
  unint64_t result;

  result = qword_256442DD8;
  if (!qword_256442DD8)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3988, &type metadata for SimpleType.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442DD8);
  }
  return result;
}

unint64_t sub_236BC2570()
{
  unint64_t result;

  result = qword_256442DE0;
  if (!qword_256442DE0)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3938, &type metadata for SimpleType.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442DE0);
  }
  return result;
}

unint64_t sub_236BC25B4()
{
  unint64_t result;

  result = qword_256442DE8;
  if (!qword_256442DE8)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD38E8, &type metadata for SimpleType.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442DE8);
  }
  return result;
}

unint64_t sub_236BC25F8()
{
  unint64_t result;

  result = qword_256442DF0;
  if (!qword_256442DF0)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3898, &type metadata for SimpleType.UintCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442DF0);
  }
  return result;
}

unint64_t sub_236BC263C()
{
  unint64_t result;

  result = qword_256442DF8;
  if (!qword_256442DF8)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3848, &type metadata for SimpleType.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442DF8);
  }
  return result;
}

uint64_t sub_236BC2680(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256442DC8);
    v8 = a2();
    result = MEMORY[0x23B7FE8AC](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_236BC26E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256442E58;
  if (!qword_256442E58)
  {
    v1 = sub_236BCF7A0();
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BDCD530], v1);
    atomic_store(result, (unint64_t *)&qword_256442E58);
  }
  return result;
}

unint64_t sub_236BC2730()
{
  unint64_t result;

  result = qword_256442E60;
  if (!qword_256442E60)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for ConversionError, &type metadata for ConversionError);
    atomic_store(result, (unint64_t *)&qword_256442E60);
  }
  return result;
}

uint64_t sub_236BC2774()
{
  uint64_t v0;

  sub_236B8C2D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject();
}

uint64_t sub_236BC279C(__int128 *a1, uint64_t a2)
{
  __int128 v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 16) = *((_BYTE *)a1 + 16);
  *(_OWORD *)a2 = v2;
  return a2;
}

void sub_236BC27B4(uint64_t *a1@<X8>)
{
  SimpleType.unwrap()(a1);
}

uint64_t sub_236BC27D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_236BC0268(a1, *(_QWORD *)(v3 + 16), a2, a3);
}

unint64_t sub_236BC27F4()
{
  unint64_t result;

  result = qword_2542AF328;
  if (!qword_2542AF328)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for SimpleType, &type metadata for SimpleType);
    atomic_store(result, (unint64_t *)&qword_2542AF328);
  }
  return result;
}

uint64_t sub_236BC283C()
{
  return MEMORY[0x24BEE4058];
}

uint64_t sub_236BC2848()
{
  return MEMORY[0x24BEE1440];
}

uint64_t sub_236BC2854()
{
  return MEMORY[0x24BEE1358];
}

unint64_t sub_236BC2864()
{
  unint64_t result;

  result = qword_256442E78;
  if (!qword_256442E78)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for SimpleType, &type metadata for SimpleType);
    atomic_store(result, (unint64_t *)&qword_256442E78);
  }
  return result;
}

uint64_t sub_236BC28A8()
{
  return MEMORY[0x24BEE0D80];
}

unint64_t sub_236BC28B8()
{
  unint64_t result;

  result = qword_256442E80;
  if (!qword_256442E80)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for SimpleType, &type metadata for SimpleType);
    atomic_store(result, (unint64_t *)&qword_256442E80);
  }
  return result;
}

uint64_t sub_236BC28FC()
{
  return MEMORY[0x24BEE0D90];
}

uint64_t sub_236BC2908()
{
  return MEMORY[0x24BEE0D88];
}

uint64_t assignWithCopy for SimpleType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_236B8C348(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_236B8C2D4(v6, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for ConversionError()
{
  return &type metadata for ConversionError;
}

uint64_t storeEnumTagSinglePayload for SimpleType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_236BC29C4 + 4 * byte_236BD2E6C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_236BC29F8 + 4 * byte_236BD2E67[v4]))();
}

uint64_t sub_236BC29F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BC2A00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BC2A08);
  return result;
}

uint64_t sub_236BC2A14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BC2A1CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_236BC2A20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BC2A28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SimpleType.CodingKeys()
{
  return &type metadata for SimpleType.CodingKeys;
}

ValueMetadata *type metadata accessor for SimpleType.IntCodingKeys()
{
  return &type metadata for SimpleType.IntCodingKeys;
}

ValueMetadata *type metadata accessor for SimpleType.UintCodingKeys()
{
  return &type metadata for SimpleType.UintCodingKeys;
}

ValueMetadata *type metadata accessor for SimpleType.DoubleCodingKeys()
{
  return &type metadata for SimpleType.DoubleCodingKeys;
}

ValueMetadata *type metadata accessor for SimpleType.BoolCodingKeys()
{
  return &type metadata for SimpleType.BoolCodingKeys;
}

ValueMetadata *type metadata accessor for SimpleType.StringCodingKeys()
{
  return &type metadata for SimpleType.StringCodingKeys;
}

ValueMetadata *type metadata accessor for SimpleType.ArrayCodingKeys()
{
  return &type metadata for SimpleType.ArrayCodingKeys;
}

uint64_t _s18AudioAnalyticsBase10SimpleTypeO13IntCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_236BC2AE8 + 4 * byte_236BD2E71[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_236BC2B08 + 4 * byte_236BD2E76[v4]))();
}

_BYTE *sub_236BC2AE8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_236BC2B08(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_236BC2B10(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_236BC2B18(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_236BC2B20(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_236BC2B28(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SimpleType.DictionaryCodingKeys()
{
  return &type metadata for SimpleType.DictionaryCodingKeys;
}

unint64_t sub_236BC2B48()
{
  unint64_t result;

  result = qword_256442E88;
  if (!qword_256442E88)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3318, &type metadata for SimpleType.DictionaryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442E88);
  }
  return result;
}

unint64_t sub_236BC2B90()
{
  unint64_t result;

  result = qword_256442E90;
  if (!qword_256442E90)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD33D0, &type metadata for SimpleType.ArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442E90);
  }
  return result;
}

unint64_t sub_236BC2BD8()
{
  unint64_t result;

  result = qword_256442E98;
  if (!qword_256442E98)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3488, &type metadata for SimpleType.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442E98);
  }
  return result;
}

unint64_t sub_236BC2C20()
{
  unint64_t result;

  result = qword_256442EA0;
  if (!qword_256442EA0)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3540, &type metadata for SimpleType.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442EA0);
  }
  return result;
}

unint64_t sub_236BC2C68()
{
  unint64_t result;

  result = qword_256442EA8;
  if (!qword_256442EA8)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD35F8, &type metadata for SimpleType.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442EA8);
  }
  return result;
}

unint64_t sub_236BC2CB0()
{
  unint64_t result;

  result = qword_256442EB0;
  if (!qword_256442EB0)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD36B0, &type metadata for SimpleType.UintCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442EB0);
  }
  return result;
}

unint64_t sub_236BC2CF8()
{
  unint64_t result;

  result = qword_256442EB8;
  if (!qword_256442EB8)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3768, &type metadata for SimpleType.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442EB8);
  }
  return result;
}

unint64_t sub_236BC2D40()
{
  unint64_t result;

  result = qword_256442EC0;
  if (!qword_256442EC0)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3820, &type metadata for SimpleType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442EC0);
  }
  return result;
}

unint64_t sub_236BC2D88()
{
  unint64_t result;

  result = qword_256442EC8;
  if (!qword_256442EC8)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD36D8, &type metadata for SimpleType.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442EC8);
  }
  return result;
}

unint64_t sub_236BC2DD0()
{
  unint64_t result;

  result = qword_256442ED0;
  if (!qword_256442ED0)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3700, &type metadata for SimpleType.IntCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442ED0);
  }
  return result;
}

unint64_t sub_236BC2E18()
{
  unint64_t result;

  result = qword_256442ED8;
  if (!qword_256442ED8)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3620, &type metadata for SimpleType.UintCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442ED8);
  }
  return result;
}

unint64_t sub_236BC2E60()
{
  unint64_t result;

  result = qword_256442EE0;
  if (!qword_256442EE0)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3648, &type metadata for SimpleType.UintCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442EE0);
  }
  return result;
}

unint64_t sub_236BC2EA8()
{
  unint64_t result;

  result = qword_256442EE8;
  if (!qword_256442EE8)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3568, &type metadata for SimpleType.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442EE8);
  }
  return result;
}

unint64_t sub_236BC2EF0()
{
  unint64_t result;

  result = qword_256442EF0;
  if (!qword_256442EF0)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3590, &type metadata for SimpleType.DoubleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442EF0);
  }
  return result;
}

unint64_t sub_236BC2F38()
{
  unint64_t result;

  result = qword_256442EF8;
  if (!qword_256442EF8)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD34B0, &type metadata for SimpleType.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442EF8);
  }
  return result;
}

unint64_t sub_236BC2F80()
{
  unint64_t result;

  result = qword_256442F00;
  if (!qword_256442F00)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD34D8, &type metadata for SimpleType.BoolCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442F00);
  }
  return result;
}

unint64_t sub_236BC2FC8()
{
  unint64_t result;

  result = qword_256442F08;
  if (!qword_256442F08)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD33F8, &type metadata for SimpleType.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442F08);
  }
  return result;
}

unint64_t sub_236BC3010()
{
  unint64_t result;

  result = qword_256442F10;
  if (!qword_256442F10)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3420, &type metadata for SimpleType.StringCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442F10);
  }
  return result;
}

unint64_t sub_236BC3058()
{
  unint64_t result;

  result = qword_256442F18;
  if (!qword_256442F18)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3340, &type metadata for SimpleType.ArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442F18);
  }
  return result;
}

unint64_t sub_236BC30A0()
{
  unint64_t result;

  result = qword_256442F20;
  if (!qword_256442F20)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3368, &type metadata for SimpleType.ArrayCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442F20);
  }
  return result;
}

unint64_t sub_236BC30E8()
{
  unint64_t result;

  result = qword_256442F28;
  if (!qword_256442F28)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3288, &type metadata for SimpleType.DictionaryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442F28);
  }
  return result;
}

unint64_t sub_236BC3130()
{
  unint64_t result;

  result = qword_256442F30;
  if (!qword_256442F30)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD32B0, &type metadata for SimpleType.DictionaryCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442F30);
  }
  return result;
}

unint64_t sub_236BC3178()
{
  unint64_t result;

  result = qword_256442F38;
  if (!qword_256442F38)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD3790, &type metadata for SimpleType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442F38);
  }
  return result;
}

unint64_t sub_236BC31C0()
{
  unint64_t result;

  result = qword_256442F40;
  if (!qword_256442F40)
  {
    result = MEMORY[0x23B7FE8AC](&unk_236BD37B8, &type metadata for SimpleType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256442F40);
  }
  return result;
}

uint64_t sub_236BC3204(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7630441 && a2 == 0xE300000000000000;
  if (v2 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1953393013 && a2 == 0xE400000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C62756F64 && a2 == 0xE600000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1819242338 && a2 == 0xE400000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x676E69727473 && a2 == 0xE600000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7961727261 && a2 == 0xE500000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x616E6F6974636964 && a2 == 0xEA00000000007972)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_236BCFF98();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

_BYTE *sub_236BC34AC@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

Swift::String __swiftcall String.init(with4cc:)(Swift::UInt32 with4cc)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = sub_236BCF98C();
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall String.init(with4cc:)(Swift::Int32 with4cc)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = sub_236BCF98C();
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

void sub_236BC35BC(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int16 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

  swift_bridgeObjectRetain();
  if ((a2 & 1) == 0)
  {
    sub_236BBC474(a1, 3);
    if (v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  CommonConfigFields.init(dict:)(a1, (uint64_t)&v91);
  if (v3)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    return;
  }
  v7 = (__int16)v91;
  v8 = BYTE2(v91);
  v86 = v92;
  v87 = v93;
  v88 = v94;
  v89 = v95;
  if ((a2 & 1) != 0)
    v9 = 259;
  else
    v9 = 3;
  v90 = v96;
  v10 = sub_236B9B390(1u, a1, v9);
  v12 = sub_236BCDAE4(v10, v11);
  if ((v12 & 0x10000) != 0
    || (v78 = v12,
        swift_bridgeObjectRelease(),
        v13 = sub_236B9B390(0, a1, v9),
        v15 = sub_236BCECB8(v13, v14),
        (v15 & 0x100000000) != 0))
  {
    v91 = 0;
    v92 = 0xE000000000000000;
    sub_236BCFD4C();
    sub_236BCFA58();
    sub_236BCFA58();
    v20 = (uint64_t)v91;
    v21 = v92;
    sub_236B93D48();
    swift_allocError();
    *(_QWORD *)v22 = v20;
    *(_QWORD *)(v22 + 8) = v21;
    *(_BYTE *)(v22 + 16) = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    goto LABEL_12;
  }
  v77 = v15;
  swift_bridgeObjectRelease();
  sub_236B9B494(0xBu, a1, v9);
  v17 = v16;
  v18 = sub_236B9B5A8(0xEu, a1, v9);
  v19 = swift_bridgeObjectRetain();
  sub_236BA702C(v19, a2 & 1, 0xD000000000000013, 0x8000000236BD46B0);
  v85 = v18;
  swift_bridgeObjectRelease();
  v30 = sub_236B9B390(0xDu, a1, v9);
  v32 = v31;
  v76 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF58);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_236BD1AD0;
  *(_QWORD *)(inited + 32) = v76;
  v84 = v32;
  *(_QWORD *)(inited + 40) = v32;
  swift_bridgeObjectRetain();
  sub_236BA702C(inited, a2 & 1, 0x695474757074756FLL, 0xEF646C656946656DLL);
  swift_setDeallocating();
  swift_arrayDestroy();
  v75 = sub_236BBB4BC(8, a1, v9);
  if (v75)
  {
    v34 = swift_bridgeObjectRetain();
    sub_236BA702C(v34, a2 & 1, 0x6E696E6E75527369, 0xEF73646C65694667);
    swift_bridgeObjectRelease();
  }
  v35 = sub_236BBB36C(9, a1, v9);
  if (v36)
  {
    v83 = (unint64_t)sub_236BA71A8(v35, v36);
    swift_bridgeObjectRelease();
  }
  else
  {
    v83 = 0;
  }
  if (!(v75 | v83))
  {
    swift_bridgeObjectRelease();
    sub_236B93D48();
    swift_allocError();
    *(_QWORD *)v37 = 0xD000000000000041;
    *(_QWORD *)(v37 + 8) = 0x8000000236BD6250;
    v23 = 1;
    *(_BYTE *)(v37 + 16) = 1;
    swift_willThrow();
    v83 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v24 = 1;
    v25 = 1;
    v26 = 1;
    goto LABEL_12;
  }
  v82 = sub_236BBB4BC(2, a1, v9);
  if (v82)
  {
    v38 = swift_bridgeObjectRetain();
    sub_236BA702C(v38, a2 & 1, 0xD000000000000018, 0x8000000236BD45B0);
    swift_bridgeObjectRelease();
  }
  v39 = sub_236BBB4E4(10, a1, v9);
  if (v39)
  {
    v40 = v39;
    v41 = swift_bridgeObjectRetain();
    v42 = sub_236BC4E60(v41);
    sub_236BA702C((uint64_t)v42, a2 & 1, 0xD00000000000001ALL, 0x8000000236BD4660);
    swift_release();
    swift_bridgeObjectRelease();
    v81 = sub_236BC4F44(v40);
    swift_bridgeObjectRelease();
  }
  else
  {
    v81 = 0;
  }
  v74 = sub_236BBB414(6, a1, v9);
  v73 = sub_236BBB414(7, a1, v9);
  v43 = sub_236B9B574(3u, a1, v9);
  v44 = swift_bridgeObjectRetain();
  v45 = sub_236BC4E60(v44);
  swift_bridgeObjectRelease();
  sub_236BA702C((uint64_t)v45, a2 & 1, 0x56746C7561666564, 0xED00007365756C61);
  swift_release();
  v80 = Dictionary<>.asSimpleType()(v43);
  if (!v80)
  {
    swift_bridgeObjectRetain();
    v64 = sub_236BCF938();
    v66 = v65;
    swift_bridgeObjectRelease();
    sub_236B93D48();
    swift_allocError();
    *(_QWORD *)v67 = v64;
    *(_QWORD *)(v67 + 8) = v66;
    *(_BYTE *)(v67 + 16) = 5;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = 0;
    v23 = 1;
    v24 = 1;
    v25 = 1;
    v26 = 1;
    v27 = 1;
LABEL_42:
    v29 = 1;
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v23)
    {
      swift_bridgeObjectRelease();
      if (!v24)
        goto LABEL_14;
    }
    else if (!v24)
    {
LABEL_14:
      if (v25)
        goto LABEL_15;
      goto LABEL_22;
    }
    swift_bridgeObjectRelease();
    if (v25)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      if (!v26)
        goto LABEL_16;
      goto LABEL_23;
    }
LABEL_22:
    if (!v26)
    {
LABEL_16:
      if (v27)
        goto LABEL_17;
      goto LABEL_24;
    }
LABEL_23:

    if (v27)
    {
LABEL_17:
      swift_bridgeObjectRelease();
      if (!v28)
        goto LABEL_18;
      goto LABEL_25;
    }
LABEL_24:
    if (!v28)
    {
LABEL_18:
      if (!v29)
        return;
      goto LABEL_26;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v29)
      return;
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  v79 = sub_236BBB4BC(5, a1, v9);
  v46 = sub_236BBB4D0(15, a1, v9);
  swift_bridgeObjectRelease();
  if (!v46)
    v46 = sub_236B92D84(MEMORY[0x24BEE4AF8]);
  v47 = Dictionary<>.asSimpleType()(v46);
  if (!v47)
  {
    swift_bridgeObjectRetain();
    v68 = sub_236BCF938();
    v70 = v69;
    swift_bridgeObjectRelease();
    sub_236B93D48();
    swift_allocError();
    *(_QWORD *)v71 = v68;
    *(_QWORD *)(v71 + 8) = v70;
    *(_BYTE *)(v71 + 16) = 5;
    swift_willThrow();
    swift_bridgeObjectRelease();
    v23 = 1;
    v24 = 1;
    v25 = 1;
    v26 = 1;
    v27 = 1;
    v28 = 1;
    goto LABEL_42;
  }
  v48 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v49 = sub_236BB1DE8((uint64_t)&unk_250827360);
  swift_arrayDestroy();
  v50 = swift_bridgeObjectRetain();
  v51 = sub_236BC41F4(v50, v49);
  v52 = MEMORY[0x24BEE4AF8];
  if (v82)
    v53 = v82;
  else
    v53 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v54 = sub_236BC633C(v53, v51);
  swift_bridgeObjectRelease();
  if (v75)
    v52 = v75;
  swift_bridgeObjectRetain();
  v55 = sub_236BC633C(v52, v54);
  swift_bridgeObjectRelease();
  v56 = swift_bridgeObjectRetain();
  sub_236BC41F4(v56, v55);
  v57 = swift_bridgeObjectRetain();
  v58 = sub_236BC4D7C(v57);
  swift_bridgeObjectRelease();
  v91 = v58;
  sub_236BC51DC((uint64_t *)&v91);
  swift_bridgeObjectRelease();
  v72 = (uint64_t)v91;
  v59 = swift_bridgeObjectRetain();
  v60 = sub_236BC41F4(v59, MEMORY[0x24BEE4B08]);
  swift_bridgeObjectRetain();
  sub_236BC633C(v53, v60);
  swift_bridgeObjectRelease();
  v61 = swift_bridgeObjectRetain();
  v62 = sub_236BC4D7C(v61);
  swift_bridgeObjectRelease();
  v91 = v62;
  sub_236BC51DC((uint64_t *)&v91);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v63 = (uint64_t)v91;
  *(_WORD *)a3 = v7;
  *(_BYTE *)(a3 + 2) = v8;
  *(_QWORD *)(a3 + 8) = v86;
  *(_QWORD *)(a3 + 16) = v87;
  *(_QWORD *)(a3 + 24) = v88;
  *(_QWORD *)(a3 + 32) = v89;
  *(_QWORD *)(a3 + 40) = v90;
  *(_WORD *)(a3 + 48) = v78;
  *(_DWORD *)(a3 + 52) = v77;
  *(_QWORD *)(a3 + 56) = v17;
  *(_QWORD *)(a3 + 64) = v85;
  *(_QWORD *)(a3 + 72) = v76;
  *(_QWORD *)(a3 + 80) = v84;
  *(_QWORD *)(a3 + 88) = v75;
  *(_QWORD *)(a3 + 96) = v83;
  *(_QWORD *)(a3 + 104) = v81;
  *(_QWORD *)(a3 + 112) = v79;
  *(_QWORD *)(a3 + 120) = v48;
  *(_QWORD *)(a3 + 128) = v80;
  *(_QWORD *)(a3 + 136) = v82;
  *(_QWORD *)(a3 + 144) = v72;
  *(_QWORD *)(a3 + 152) = v63;
  *(_BYTE *)(a3 + 160) = v74 & 1;
  *(_BYTE *)(a3 + 161) = v73 & 1;
}

AudioAnalyticsBase::SummaryConfig::DataType_optional __swiftcall SummaryConfig.DataType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  AudioAnalyticsBase::SummaryConfig::DataType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_236BCFE60();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t sub_236BC41F4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_236B9F354(&v17, v12, v13);
    result = swift_bridgeObjectRelease();
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t SummaryConfig.audioEventType.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 48);
}

uint64_t SummaryConfig.audioEventCategory.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 52);
}

double SummaryConfig.minimumRunningTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

uint64_t SummaryConfig.outputTimeField.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SummaryConfig.requiredDynamicCreationKeyValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SummaryConfig.alsoIncludeInEventFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SummaryConfig.calculatedIncludeInEventFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SummaryConfig.DataType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236BC43F8 + 4 * byte_236BD3AD0[*v0]))(0x676E69727473, 0xE600000000000000);
}

uint64_t sub_236BC43F8()
{
  return 7630441;
}

uint64_t sub_236BC4408()
{
  return 0x74616F6C66;
}

uint64_t sub_236BC441C()
{
  return 1819242338;
}

uint64_t sub_236BC442C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_236BC4464 + 4 * byte_236BD3AD4[a1]))(0xD000000000000012, 0x8000000236BD62A0);
}

uint64_t sub_236BC4464()
{
  return 0x6576456F69647541;
}

uint64_t sub_236BC4488(uint64_t a1)
{
  return a1 + 6;
}

void sub_236BC45C8(char *a1)
{
  sub_236BCABD0(*a1);
}

unint64_t sub_236BC45D8()
{
  unint64_t result;

  result = qword_256442F48;
  if (!qword_256442F48)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for SummaryConfig.DataType, &type metadata for SummaryConfig.DataType);
    atomic_store(result, (unint64_t *)&qword_256442F48);
  }
  return result;
}

void sub_236BC461C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_236BD0028();
  __asm { BR              X9 }
}

uint64_t sub_236BC4664()
{
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

void sub_236BC46C0()
{
  __asm { BR              X10 }
}

uint64_t sub_236BC46F8()
{
  sub_236BCFA34();
  return swift_bridgeObjectRelease();
}

void sub_236BC4740()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_236BD0028();
  __asm { BR              X9 }
}

uint64_t sub_236BC4784()
{
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

AudioAnalyticsBase::SummaryConfig::DataType_optional sub_236BC47E0(Swift::String *a1)
{
  return SummaryConfig.DataType.init(rawValue:)(*a1);
}

uint64_t sub_236BC47EC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_236BC4818 + 4 * byte_236BD3AF0[*v0]))();
}

void sub_236BC4818(_QWORD *a1@<X8>)
{
  *a1 = 7630441;
  a1[1] = 0xE300000000000000;
}

void sub_236BC482C(_QWORD *a1@<X8>)
{
  *a1 = 0x74616F6C66;
  a1[1] = 0xE500000000000000;
}

void sub_236BC4844(_QWORD *a1@<X8>)
{
  *a1 = 1819242338;
  a1[1] = 0xE400000000000000;
}

uint64_t assignWithCopy for SummaryConfig(uint64_t a1, __int16 *a2)
{
  __int16 v4;
  void *v5;
  void *v6;
  id v7;

  v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 48) = a2[24];
  *(_DWORD *)(a1 + 52) = *((_DWORD *)a2 + 13);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 96);
  v6 = (void *)*((_QWORD *)a2 + 12);
  *(_QWORD *)(a1 + 96) = v6;
  v7 = v6;

  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_BYTE *)(a1 + 161) = *((_BYTE *)a2 + 161);
  return a1;
}

uint64_t assignWithTake for SummaryConfig(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();

  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  return a1;
}

uint64_t getEnumTagSinglePayload for SummaryConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 162))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SummaryConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 160) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 162) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 162) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SummaryConfig.DataType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SummaryConfig.DataType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_236BC4CFC + 4 * byte_236BD3AF9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_236BC4D30 + 4 * byte_236BD3AF4[v4]))();
}

uint64_t sub_236BC4D30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BC4D38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BC4D40);
  return result;
}

uint64_t sub_236BC4D4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BC4D54);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_236BC4D58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BC4D60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SummaryConfig.DataType()
{
  return &type metadata for SummaryConfig.DataType;
}

_QWORD *sub_236BC4D7C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF58);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_236BC5ED4((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_236B96E24();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

_QWORD *sub_236BC4E60(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF58);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = sub_236BC60D0((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_236B96E24();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_236BC4F44(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542AFEF8);
  result = sub_236BCFE24();
  v3 = (_QWORD *)result;
  v4 = 0;
  v31 = a1;
  v7 = *(_QWORD *)(a1 + 64);
  v6 = a1 + 64;
  v5 = v7;
  v8 = 1 << *(_BYTE *)(v6 - 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v5;
  v28 = v6;
  v29 = (unint64_t)(v8 + 63) >> 6;
  v30 = result + 64;
  if ((v9 & v5) == 0)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v11 | (v4 << 6); ; i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v31 + 48) + 16 * i);
    v17 = *v16;
    v18 = v16[1];
    v19 = (uint64_t *)(*(_QWORD *)(v31 + 56) + 16 * i);
    v21 = *v19;
    v20 = v19[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v22 = sub_236BCFE60();
    swift_bridgeObjectRelease();
    if (v22 > 3)
    {
      sub_236B93D48();
      swift_allocError();
      *(_QWORD *)v27 = v21;
      *(_QWORD *)(v27 + 8) = v20;
      *(_BYTE *)(v27 + 16) = 5;
      swift_bridgeObjectRetain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v3;
    }
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v30 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v23 = (_QWORD *)(v3[6] + 16 * i);
    *v23 = v17;
    v23[1] = v18;
    *(_BYTE *)(v3[7] + i) = v22;
    v24 = v3[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v3[2] = v26;
    if (v10)
      goto LABEL_4;
LABEL_5:
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_26;
    if (v13 >= v29)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    ++v4;
    if (!v14)
    {
      v4 = v13 + 1;
      if (v13 + 1 >= v29)
        return (uint64_t)v3;
      v14 = *(_QWORD *)(v28 + 8 * v4);
      if (!v14)
      {
        v4 = v13 + 2;
        if (v13 + 2 >= v29)
          return (uint64_t)v3;
        v14 = *(_QWORD *)(v28 + 8 * v4);
        if (!v14)
          break;
      }
    }
LABEL_18:
    v10 = (v14 - 1) & v14;
  }
  v15 = v13 + 3;
  if (v15 >= v29)
    return (uint64_t)v3;
  v14 = *(_QWORD *)(v28 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v29)
      return (uint64_t)v3;
    v14 = *(_QWORD *)(v28 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_18;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_236BC51DC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_236BC62E0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_236BC5244(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_236BC5244(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_236BCFF5C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_236BC592C(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_236BC59F8((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_236BC5EC0((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_236BCFB6C();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_236BCFF98();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_236BCFF98()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_236BC5C90(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_236BC5C90((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_236BC59F8((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_236BCFF98() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_236BCFE0C();
  __break(1u);
  return result;
}

uint64_t sub_236BC592C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_236BCFF98(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_236BC59F8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_236BCFF98() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_236BCFF98() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_236BC5E18((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_236BCFE48();
  __break(1u);
  return result;
}

char *sub_236BC5C90(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256442F50);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_236BC5D88(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  int64_t v4;
  char *result;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 < 0)
  {
    result = (char *)sub_236BCFE48();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
      return (char *)memmove(result, v3, v4);
  }
  return result;
}

char *sub_236BC5E18(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_236BCFE48();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_236BC5EC0(uint64_t a1)
{
  return sub_236BC5C90(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_236BC5ED4(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_236BC60D0(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_236BC62CC(uint64_t a1)
{
  return sub_236BA61AC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_236BC62E0(uint64_t a1)
{
  return sub_236B8DCB4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_236BC62F4()
{
  unint64_t v0;

  v0 = sub_236BCFE60();
  swift_bridgeObjectRelease();
  if (v0 >= 0x10)
    return 16;
  else
    return v0;
}

uint64_t sub_236BC633C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = (uint64_t *)(a1 + 40);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      swift_bridgeObjectRetain();
      sub_236B9F354(&v7, v4, v5);
      swift_bridgeObjectRelease();
      v3 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return a2;
}

uint64_t sub_236BC63B8(int64_t *a1, char a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t *v9;
  int64_t i;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int16 v25;
  _OWORD v26[10];
  __int16 v27;
  uint64_t v28;

  v3 = a1[2];
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v28 = MEMORY[0x24BEE4AF8];
    sub_236BA55EC(0, v3, 0);
    v4 = v28;
    v7 = a1[4];
    swift_bridgeObjectRetain_n();
    sub_236BC35BC(v7, a2 & 1, (uint64_t)v26);
    if (v2)
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      v9 = a1 + 5;
      for (i = v3 - 1; ; --i)
      {
        swift_bridgeObjectRelease();
        v19 = v26[4];
        v20 = v26[5];
        v16 = v26[1];
        v17 = v26[2];
        v18 = v26[3];
        v23 = v26[8];
        v24 = v26[9];
        v21 = v26[6];
        v22 = v26[7];
        v25 = v27;
        v12 = *(_QWORD *)(v4 + 16);
        v11 = *(_QWORD *)(v4 + 24);
        v15 = v26[0];
        v28 = v4;
        if (v12 >= v11 >> 1)
        {
          sub_236BA55EC(v11 > 1, v12 + 1, 1);
          v4 = v28;
        }
        *(_QWORD *)(v4 + 16) = v12 + 1;
        v13 = v4 + 168 * v12;
        *(_OWORD *)(v13 + 48) = v16;
        *(_OWORD *)(v13 + 64) = v17;
        *(_OWORD *)(v13 + 32) = v15;
        *(_OWORD *)(v13 + 112) = v20;
        *(_OWORD *)(v13 + 128) = v21;
        *(_OWORD *)(v13 + 80) = v18;
        *(_OWORD *)(v13 + 96) = v19;
        *(_WORD *)(v13 + 192) = v25;
        *(_OWORD *)(v13 + 160) = v23;
        *(_OWORD *)(v13 + 176) = v24;
        *(_OWORD *)(v13 + 144) = v22;
        if (!i)
          break;
        v14 = *v9++;
        swift_bridgeObjectRetain_n();
        sub_236BC35BC(v14, a2 & 1, (uint64_t)v26);
      }
    }
  }
  return v4;
}

uint64_t sub_236BC658C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _QWORD v37[5];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int16 v48;
  unint64_t v49;
  unint64_t v50;

  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v8 = 0;
    v9 = MEMORY[0x24BEE4AF8];
    do
    {
      v50 = v9;
      v10 = 168 * v8 + 32;
      v11 = v8;
      while (1)
      {
        if (v11 >= *(_QWORD *)(v4 + 16))
        {
          __break(1u);
          return result;
        }
        v12 = *(_OWORD *)(v4 + v10 + 144);
        v46 = *(_OWORD *)(v4 + v10 + 128);
        v47 = v12;
        v48 = *(_WORD *)(v4 + v10 + 160);
        v13 = *(_OWORD *)(v4 + v10 + 80);
        v42 = *(_OWORD *)(v4 + v10 + 64);
        v43 = v13;
        v14 = *(_OWORD *)(v4 + v10 + 112);
        v44 = *(_OWORD *)(v4 + v10 + 96);
        v45 = v14;
        v15 = *(_OWORD *)(v4 + v10 + 16);
        v38 = *(_OWORD *)(v4 + v10);
        v39 = v15;
        v16 = *(_OWORD *)(v4 + v10 + 48);
        v40 = *(_OWORD *)(v4 + v10 + 32);
        v41 = v16;
        v37[3] = &type metadata for SummaryConfig;
        v37[4] = &off_25082AB50;
        v17 = swift_allocObject();
        v37[0] = v17;
        v18 = *(_OWORD *)(v4 + v10 + 144);
        *(_OWORD *)(v17 + 144) = *(_OWORD *)(v4 + v10 + 128);
        *(_OWORD *)(v17 + 160) = v18;
        *(_WORD *)(v17 + 176) = *(_WORD *)(v4 + v10 + 160);
        v19 = *(_OWORD *)(v4 + v10 + 80);
        *(_OWORD *)(v17 + 80) = *(_OWORD *)(v4 + v10 + 64);
        *(_OWORD *)(v17 + 96) = v19;
        v20 = *(_OWORD *)(v4 + v10 + 112);
        *(_OWORD *)(v17 + 112) = *(_OWORD *)(v4 + v10 + 96);
        *(_OWORD *)(v17 + 128) = v20;
        v21 = *(_OWORD *)(v4 + v10 + 16);
        *(_OWORD *)(v17 + 16) = *(_OWORD *)(v4 + v10);
        *(_OWORD *)(v17 + 32) = v21;
        v22 = *(_OWORD *)(v4 + v10 + 48);
        *(_OWORD *)(v17 + 48) = *(_OWORD *)(v4 + v10 + 32);
        *(_OWORD *)(v17 + 64) = v22;
        sub_236BC6A50((uint64_t)&v38);
        sub_236BC6A50((uint64_t)&v38);
        v23 = sub_236BA72C0(v37, a2, a3);
        if (v3)
        {
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
          sub_236BC6B4C((uint64_t)&v38);
          v9 = v50;
          swift_release();
          goto LABEL_17;
        }
        v24 = v23;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
        if ((v24 & 1) != 0)
          break;
        ++v11;
        result = sub_236BC6B4C((uint64_t)&v38);
        v10 += 168;
        if (v5 == v11)
        {
          v9 = v50;
          goto LABEL_17;
        }
      }
      v9 = v50;
      result = swift_isUniquelyReferenced_nonNull_native();
      v49 = v9;
      if ((result & 1) == 0)
      {
        result = sub_236BA55EC(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v49;
      }
      v26 = *(_QWORD *)(v9 + 16);
      v25 = *(_QWORD *)(v9 + 24);
      v27 = v26 + 1;
      if (v26 >= v25 >> 1)
      {
        v50 = v26 + 1;
        result = sub_236BA55EC(v25 > 1, v26 + 1, 1);
        v27 = v50;
        v9 = v49;
      }
      v8 = v11 + 1;
      *(_QWORD *)(v9 + 16) = v27;
      v28 = v9 + 168 * v26;
      v29 = v38;
      v30 = v40;
      *(_OWORD *)(v28 + 48) = v39;
      *(_OWORD *)(v28 + 64) = v30;
      *(_OWORD *)(v28 + 32) = v29;
      v31 = v41;
      v32 = v42;
      v33 = v44;
      *(_OWORD *)(v28 + 112) = v43;
      *(_OWORD *)(v28 + 128) = v33;
      *(_OWORD *)(v28 + 80) = v31;
      *(_OWORD *)(v28 + 96) = v32;
      v34 = v45;
      v35 = v46;
      v36 = v47;
      *(_WORD *)(v28 + 192) = v48;
      *(_OWORD *)(v28 + 160) = v35;
      *(_OWORD *)(v28 + 176) = v36;
      *(_OWORD *)(v28 + 144) = v34;
    }
    while (v5 - 1 != v11);
  }
  else
  {
    v9 = MEMORY[0x24BEE4AF8];
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_236BC6814(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int64_t *v11;
  _BYTE v12[32];
  __int128 v13;
  uint64_t v14;

  v14 = *a1;
  if (*(_QWORD *)(v14 + 16)
    && (v4 = sub_236BA4CD0(3), (v5 & 1) != 0)
    && (sub_236B8E794(*(_QWORD *)(v14 + 56) + 32 * v4, (uint64_t)v12),
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC0),
        (swift_dynamicCast() & 1) != 0))
  {
    v13 = *(_OWORD *)(a1 + 1);
    v2 = a1[3];
    v6 = a1[4];
    v7 = *((_BYTE *)a1 + 40);
    sub_236B954A0((uint64_t)&v14);
    sub_236B954C8((uint64_t)&v13);
    swift_bridgeObjectRetain();
    v8 = sub_236BC63B8(v11, v7);
    sub_236B954F0((uint64_t)&v14);
    sub_236B95518((uint64_t)&v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v1)
    {
      sub_236B954A0((uint64_t)&v14);
      sub_236B954C8((uint64_t)&v13);
      swift_bridgeObjectRetain();
      v2 = sub_236BC658C(v8, v2, v6);
      sub_236B954F0((uint64_t)&v14);
      sub_236B95518((uint64_t)&v13);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_236B93D48();
    swift_allocError();
    *(_QWORD *)v9 = 0xD00000000000001BLL;
    *(_QWORD *)(v9 + 8) = 0x8000000236BD61B0;
    *(_BYTE *)(v9 + 16) = 0;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_236BC69B4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_236BC6A50(uint64_t a1)
{
  id v2;
  void *v4;

  v4 = *(void **)(a1 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v2 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_236BC6B4C(uint64_t a1)
{
  void *v3;

  v3 = *(void **)(a1 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_236BC6C44@<X0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  char v16;
  __int16 v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  __int16 v48;
  unint64_t v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[25];
  char v58;

  swift_bridgeObjectRetain();
  if ((a2 & 1) == 0)
  {
    sub_236BBC490(a1, 6);
    if (v3)
      return swift_bridgeObjectRelease_n();
  }
  CommonConfigFields.init(dict:)(a1, (uint64_t)&v51);
  if (v3)
    return swift_bridgeObjectRelease();
  v50 = a3;
  v48 = v51;
  v46 = BYTE2(v51);
  v8 = *((_QWORD *)&v51 + 1);
  v9 = v52;
  v10 = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_236B9B6F4(5);
  v12 = v11;
  v14 = v13;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = v14;
  v15._object = v12;
  SystemMonitorConfig.MonitorType.init(rawValue:)(v15);
  sub_236B929BC(a2 & 1, 0xD00000000000001BLL, 0x8000000236BD62E0, v14, (unint64_t)v12, v51, &v58);
  swift_bridgeObjectRelease();
  v16 = v58;
  if (v58 == 3)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    sub_236BC8920(&v51);
    return sub_236BC88C0((uint64_t)&v51, (uint64_t)v50);
  }
  if (!v58)
  {
    v17 = v48;
    v18 = v46;
LABEL_12:
    v21 = sub_236BCFF98();
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
    {
      v19 = 0x646573756E75;
      v20 = 0xE600000000000000;
    }
    else
    {
      sub_236B9B6F4(2);
      v19 = v22;
      v20 = v23;
    }
    goto LABEL_15;
  }
  v17 = v48;
  v18 = v46;
  if (v58 != 1)
    goto LABEL_12;
  v19 = 0x646573756E75;
  swift_bridgeObjectRelease();
  v20 = 0xE600000000000000;
LABEL_15:
  swift_bridgeObjectRetain();
  sub_236B9B6F4(3);
  v49 = v20;
  v25 = v24;
  v27 = v26;
  swift_bridgeObjectRetain();
  sub_236B9B6F4(4);
  v47 = v27;
  v43 = v28;
  v30 = v29;
  swift_bridgeObjectRetain();
  sub_236B9B6F4(1);
  v45 = v30;
  v42 = v31;
  v44 = v32;
  swift_bridgeObjectRetain();
  sub_236B9B6F4(0);
  v34 = v33;
  v36 = v35;
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = v34;
  v37._object = v36;
  SystemMonitorConfig.DataType.init(rawValue:)(v37);
  if (v58 == 4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_236B93D48();
    swift_allocError();
    *(_QWORD *)v38 = 0xD000000000000029;
    *(_QWORD *)(v38 + 8) = 0x8000000236BD6300;
    *(_BYTE *)(v38 + 16) = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOWORD(v51) = v17;
    BYTE2(v51) = v18;
    *((_QWORD *)&v51 + 1) = v8;
    v52 = v9;
    v53 = (unint64_t)v10;
    LOBYTE(v54) = v16;
    *((_QWORD *)&v54 + 1) = v25;
    *(_QWORD *)&v55 = v47;
    *((_QWORD *)&v55 + 1) = v19;
    *(_QWORD *)&v56 = v49;
    *((_QWORD *)&v56 + 1) = v43;
    *(_QWORD *)v57 = v45;
    *(_QWORD *)&v57[8] = v42;
    *(_QWORD *)&v57[16] = v44;
    v57[24] = v58;
    sub_236BC8780((uint64_t)&v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39 = v56;
    v50[4] = v55;
    v50[5] = v39;
    v50[6] = *(_OWORD *)v57;
    *(_OWORD *)((char *)v50 + 105) = *(_OWORD *)&v57[9];
    v40 = v52;
    *v50 = v51;
    v50[1] = v40;
    v41 = v54;
    v50[2] = v53;
    v50[3] = v41;
    nullsub_1(v50);
    return sub_236BC8820((uint64_t)&v51);
  }
}

AudioAnalyticsBase::SystemMonitorConfig::MonitorType_optional __swiftcall SystemMonitorConfig.MonitorType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  AudioAnalyticsBase::SystemMonitorConfig::MonitorType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_236BCFE60();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

AudioAnalyticsBase::SystemMonitorConfig::DataType_optional __swiftcall SystemMonitorConfig.DataType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  AudioAnalyticsBase::SystemMonitorConfig::DataType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_236BCFE60();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t SystemMonitorConfig.commonFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 2);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  *(_WORD *)a1 = *(_WORD *)v1;
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void SystemMonitorConfig.monitorType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

uint64_t SystemMonitorConfig.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SystemMonitorConfig.domain.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SystemMonitorConfig.notification.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SystemMonitorConfig.defaultValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

void SystemMonitorConfig.dataType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 120);
}

uint64_t SystemMonitorConfig.DataType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_236BC764C + 4 * byte_236BD3C30[*v0]))(0x676E69727473, 0xE600000000000000);
}

uint64_t sub_236BC764C()
{
  return 7630441;
}

uint64_t sub_236BC765C()
{
  return 0x656C62756F64;
}

uint64_t sub_236BC766C()
{
  return 1819242338;
}

void sub_236BC767C(char *a1)
{
  sub_236BCA510(*a1);
}

void sub_236BC7688()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_236BD0028();
  __asm { BR              X9 }
}

uint64_t sub_236BC76D0()
{
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

void sub_236BC7728()
{
  __asm { BR              X10 }
}

uint64_t sub_236BC7760()
{
  sub_236BCFA34();
  return swift_bridgeObjectRelease();
}

void sub_236BC77A4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_236BD0028();
  __asm { BR              X9 }
}

uint64_t sub_236BC77E8()
{
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

AudioAnalyticsBase::SystemMonitorConfig::DataType_optional sub_236BC7840(Swift::String *a1)
{
  return SystemMonitorConfig.DataType.init(rawValue:)(*a1);
}

uint64_t sub_236BC784C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_236BC7878 + 4 * byte_236BD3C40[*v0]))();
}

void sub_236BC7878(_QWORD *a1@<X8>)
{
  *a1 = 7630441;
  a1[1] = 0xE300000000000000;
}

void sub_236BC788C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x656C62756F64;
  a1[1] = v1;
}

void sub_236BC78A0(_QWORD *a1@<X8>)
{
  *a1 = 1819242338;
  a1[1] = 0xE400000000000000;
}

uint64_t SystemMonitorConfig.MonitorType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x796669746F6ELL;
  if (*v0 != 1)
    v1 = 0x726568746FLL;
  if (*v0)
    return v1;
  else
    return 0x73746C7561666564;
}

unint64_t sub_236BC790C()
{
  unint64_t result;

  result = qword_2542AF738;
  if (!qword_2542AF738)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for SystemMonitorConfig.DataType, &type metadata for SystemMonitorConfig.DataType);
    atomic_store(result, (unint64_t *)&qword_2542AF738);
  }
  return result;
}

uint64_t sub_236BC7950(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_236BCA634(*a1, *a2);
}

unint64_t sub_236BC7960()
{
  unint64_t result;

  result = qword_2542AF730;
  if (!qword_2542AF730)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for SystemMonitorConfig.MonitorType, &type metadata for SystemMonitorConfig.MonitorType);
    atomic_store(result, (unint64_t *)&qword_2542AF730);
  }
  return result;
}

uint64_t sub_236BC79A4()
{
  sub_236BD0028();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

uint64_t sub_236BC7A3C()
{
  sub_236BCFA34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_236BC7AB0()
{
  sub_236BD0028();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

AudioAnalyticsBase::SystemMonitorConfig::MonitorType_optional sub_236BC7B44(Swift::String *a1)
{
  return SystemMonitorConfig.MonitorType.init(rawValue:)(*a1);
}

void sub_236BC7B50(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE600000000000000;
  v5 = 0x796669746F6ELL;
  if (v2 != 1)
  {
    v5 = 0x726568746FLL;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x73746C7561666564;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t destroy for SystemMonitorConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SystemMonitorConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SystemMonitorConfig(uint64_t a1, __int16 *a2)
{
  __int16 v4;

  v4 = *a2;
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  return a1;
}

__n128 __swift_memcpy121_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for SystemMonitorConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v7;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemMonitorConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 121))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemMonitorConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 121) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 121) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemMonitorConfig()
{
  return &type metadata for SystemMonitorConfig;
}

uint64_t storeEnumTagSinglePayload for SystemMonitorConfig.DataType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_236BC801C + 4 * byte_236BD3C4F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_236BC8050 + 4 * byte_236BD3C4A[v4]))();
}

uint64_t sub_236BC8050(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BC8058(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BC8060);
  return result;
}

uint64_t sub_236BC806C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BC8074);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_236BC8078(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BC8080(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for SystemMonitorConfig.MonitorType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_236BC80D8 + 4 * byte_236BD3C59[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_236BC810C + 4 * byte_236BD3C54[v4]))();
}

uint64_t sub_236BC810C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BC8114(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BC811CLL);
  return result;
}

uint64_t sub_236BC8128(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BC8130);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_236BC8134(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BC813C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_QWORD *sub_236BC8148(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD v21[6];
  _OWORD v22[2];
  _BYTE v23[128];
  _BYTE v24[128];
  _OWORD v25[8];

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v6 = *(_QWORD *)(swift_bridgeObjectRetain() + 32);
  swift_bridgeObjectRetain_n();
  sub_236BC6C44(v6, a2 & 1, v25);
  if (v2)
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
    v9 = v3 - 1;
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      swift_bridgeObjectRelease();
      sub_236BC88C0((uint64_t)v25, (uint64_t)v23);
      sub_236BC88C0((uint64_t)v23, (uint64_t)v24);
      if (sub_236BC8908((uint64_t)v24) != 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = sub_236B9DA40(0, v7[2] + 1, 1, v7);
        v11 = v7[2];
        v10 = v7[3];
        if (v11 >= v10 >> 1)
          v7 = sub_236B9DA40((_QWORD *)(v10 > 1), v11 + 1, 1, v7);
        sub_236BC88C0((uint64_t)v23, (uint64_t)v21);
        v7[2] = v11 + 1;
        v12 = &v7[16 * v11];
        v13 = v21[3];
        v14 = v21[0];
        v15 = v21[1];
        v12[4] = v21[2];
        v12[5] = v13;
        v12[2] = v14;
        v12[3] = v15;
        v17 = v21[5];
        v16 = v22[0];
        v18 = v21[4];
        *(_OWORD *)((char *)v12 + 137) = *(_OWORD *)((char *)v22 + 9);
        v12[7] = v17;
        v12[8] = v16;
        v12[6] = v18;
      }
      if (v9 == v8)
        break;
      v19 = *(_QWORD *)(a1 + 8 * v8 + 40);
      swift_bridgeObjectRetain_n();
      sub_236BC6C44(v19, a2 & 1, v25);
      ++v8;
    }
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_236BC8324(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[5];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[2];
  unint64_t v39;
  unint64_t v40;

  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v8 = 0;
    v9 = MEMORY[0x24BEE4AF8];
    do
    {
      v40 = v9;
      v10 = (v8 << 7) | 0x20;
      v11 = v8;
      while (1)
      {
        if (v11 >= *(_QWORD *)(v4 + 16))
        {
          __break(1u);
          return result;
        }
        v12 = *(_OWORD *)(v4 + v10 + 80);
        v36 = *(_OWORD *)(v4 + v10 + 64);
        v37 = v12;
        v38[0] = *(_OWORD *)(v4 + v10 + 96);
        *(_OWORD *)((char *)v38 + 9) = *(_OWORD *)(v4 + v10 + 105);
        v13 = *(_OWORD *)(v4 + v10 + 16);
        v32 = *(_OWORD *)(v4 + v10);
        v33 = v13;
        v14 = *(_OWORD *)(v4 + v10 + 48);
        v34 = *(_OWORD *)(v4 + v10 + 32);
        v35 = v14;
        v31[3] = &type metadata for SystemMonitorConfig;
        v31[4] = &off_25082AD38;
        v15 = (_OWORD *)swift_allocObject();
        v31[0] = v15;
        v16 = *(_OWORD *)(v4 + v10 + 80);
        v15[5] = *(_OWORD *)(v4 + v10 + 64);
        v15[6] = v16;
        v15[7] = *(_OWORD *)(v4 + v10 + 96);
        *(_OWORD *)((char *)v15 + 121) = *(_OWORD *)(v4 + v10 + 105);
        v17 = *(_OWORD *)(v4 + v10 + 16);
        v15[1] = *(_OWORD *)(v4 + v10);
        v15[2] = v17;
        v18 = *(_OWORD *)(v4 + v10 + 48);
        v15[3] = *(_OWORD *)(v4 + v10 + 32);
        v15[4] = v18;
        sub_236BC8780((uint64_t)&v32);
        sub_236BC8780((uint64_t)&v32);
        v19 = sub_236BA72C0(v31, a2, a3);
        if (v3)
        {
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
          sub_236BC8820((uint64_t)&v32);
          v9 = v40;
          swift_release();
          goto LABEL_17;
        }
        v20 = v19;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
        if ((v20 & 1) != 0)
          break;
        ++v11;
        result = sub_236BC8820((uint64_t)&v32);
        v10 += 128;
        if (v5 == v11)
        {
          v9 = v40;
          goto LABEL_17;
        }
      }
      v9 = v40;
      result = swift_isUniquelyReferenced_nonNull_native();
      v39 = v9;
      if ((result & 1) == 0)
      {
        result = sub_236BA5608(0, *(_QWORD *)(v9 + 16) + 1, 1);
        v9 = v39;
      }
      v22 = *(_QWORD *)(v9 + 16);
      v21 = *(_QWORD *)(v9 + 24);
      v23 = v22 + 1;
      if (v22 >= v21 >> 1)
      {
        v40 = v22 + 1;
        result = sub_236BA5608(v21 > 1, v22 + 1, 1);
        v23 = v40;
        v9 = v39;
      }
      v8 = v11 + 1;
      *(_QWORD *)(v9 + 16) = v23;
      v24 = (_OWORD *)(v9 + (v22 << 7));
      v25 = v32;
      v26 = v33;
      v27 = v35;
      v24[4] = v34;
      v24[5] = v27;
      v24[2] = v25;
      v24[3] = v26;
      v28 = v36;
      v29 = v37;
      v30 = v38[0];
      *(_OWORD *)((char *)v24 + 137) = *(_OWORD *)((char *)v38 + 9);
      v24[7] = v29;
      v24[8] = v30;
      v24[6] = v28;
    }
    while (v5 - 1 != v11);
  }
  else
  {
    v9 = MEMORY[0x24BEE4AF8];
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_236BC857C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[32];
  __int128 v13;
  uint64_t v14;

  v14 = *a1;
  if (*(_QWORD *)(v14 + 16)
    && (v4 = sub_236BA4CD0(6), (v5 & 1) != 0)
    && (sub_236B8E794(*(_QWORD *)(v14 + 56) + 32 * v4, (uint64_t)v12),
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC0),
        (swift_dynamicCast() & 1) != 0))
  {
    v13 = *(_OWORD *)(a1 + 1);
    v2 = a1[3];
    v6 = a1[4];
    v7 = *((_BYTE *)a1 + 40);
    sub_236B954A0((uint64_t)&v14);
    sub_236B954C8((uint64_t)&v13);
    swift_bridgeObjectRetain();
    v8 = sub_236BC8148(v11, v7);
    sub_236B954F0((uint64_t)&v14);
    sub_236B95518((uint64_t)&v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v1)
    {
      sub_236B954A0((uint64_t)&v14);
      sub_236B954C8((uint64_t)&v13);
      swift_bridgeObjectRetain();
      v2 = sub_236BC8324((uint64_t)v8, v2, v6);
      sub_236B954F0((uint64_t)&v14);
      sub_236B95518((uint64_t)&v13);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_236B93D48();
    swift_allocError();
    *(_QWORD *)v9 = 0xD00000000000001FLL;
    *(_QWORD *)(v9 + 8) = 0x8000000236BD62C0;
    *(_BYTE *)(v9 + 16) = 0;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_236BC871C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_236BC8780(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_236BC8820(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_236BC88C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2542AF2D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_236BC8908(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_236BC8920(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 105) = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_236BC893C(int a1, size_t a2)
{
  uint64_t v4;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = sub_236BCFE0C();
    __break(1u);
  }
  else
  {
    if (!a2)
      return MEMORY[0x24BEE4AF8];
    v4 = sub_236BCFB6C();
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return v4;
  }
  return result;
}

uint64_t sub_236BC89F4(const void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (a2 < 0)
  {
    result = sub_236BCFE0C();
    __break(1u);
  }
  else
  {
    v2 = a2;
    if (!a2)
      return MEMORY[0x24BEE4AF8];
    type metadata accessor for kinfo_proc(0);
    v4 = sub_236BCFB6C();
    *(_QWORD *)(v4 + 16) = v2;
    v5 = 32;
    do
    {
      memcpy((void *)(v4 + v5), a1, 0x288uLL);
      v5 += 648;
      --v2;
    }
    while (v2);
    return v4;
  }
  return result;
}

uint64_t SystemUtility.__allocating_init(logger:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = swift_allocObject();
  v3 = v2 + OBJC_IVAR____TtC18AudioAnalyticsBase13SystemUtility_logger;
  v4 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, a1, v4);
  return v2;
}

uint64_t SystemUtility.init(logger:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC18AudioAnalyticsBase13SystemUtility_logger;
  v4 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(v3, a1, v4);
  return v1;
}

uint64_t SystemUtility.setSysctl<A>(_:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[7];
  uint64_t v16;

  v9 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64);
  v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = 0;
  v11 = (unsigned int *)(v10 + 16);
  v15[2] = a4;
  v15[3] = v10;
  v15[4] = a1;
  v15[5] = a2;
  v15[6] = v9;
  v16 = v4;
  sub_236BC8E8C(a3, (uint64_t)sub_236BC8E64, (uint64_t)v15, a4, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v12);
  swift_beginAccess();
  v13 = *v11;
  swift_release();
  return v13;
}

uint64_t sub_236BC8C54()
{
  return swift_deallocObject();
}

void sub_236BC8C64(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5)
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;

  v8 = sub_236BCFA04();
  LODWORD(a5) = sysctlbyname((const char *)(v8 + 32), 0, 0, a1, a5);
  swift_release();
  swift_beginAccess();
  *(_DWORD *)(a2 + 16) = a5;
  if ((_DWORD)a5 != sub_236BCF8D8())
  {
    swift_retain();
    v9 = sub_236BCF8A8();
    v10 = sub_236BCFC2C();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc();
      v12 = swift_slowAlloc();
      v15 = v12;
      *(_DWORD *)v11 = 67109379;
      swift_beginAccess();
      sub_236BCFCC8();
      swift_release();
      *(_WORD *)(v11 + 8) = 2081;
      v13 = _s18AudioAnalyticsBase13SystemUtilityC10debugErrnoSSyFZ_0();
      sub_236B93FB0((uint64_t)v13, v14, &v15);
      sub_236BCFCC8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_236B83000, v9, v10, "An error occurred in sysctlbyname { returnCode=%d, %{private}s }", (uint8_t *)v11, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v12, -1, -1);
      MEMORY[0x23B7FE96C](v11, -1, -1);
    }
    else
    {
      swift_release();
    }

  }
}

void sub_236BC8E64(void *a1)
{
  uint64_t v1;

  sub_236BC8C64(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_236BC8E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t, char *);
  uint64_t result;
  uint64_t v17;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x24BDAC7A8]();
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v15(v12, v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

Swift::Int32 __swiftcall SystemUtility.pgrep(_:allUsers:)(Swift::String _, Swift::Bool allUsers)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int32 v11;
  _QWORD *v12;
  uid_t v13;
  uint64_t v14;
  uid_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v40;
  size_t v41;
  __int128 v42;
  char v43;
  uint64_t v44;
  _BYTE v45[37];
  uint64_t v46;
  int v47;
  __int128 v48;
  __int128 v49;
  int v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  __int128 v63;
  _BYTE v64[28];
  __int128 v65;
  int v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[28];
  uint64_t v74;
  __int16 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80;
  __int128 v81;
  uint64_t v82;
  int v83;
  __int128 v84;
  __int128 v85;
  __int16 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int16 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v2 = HIBYTE(_._object) & 0xF;
  if (((uint64_t)_._object & 0x2000000000000000) == 0)
    v2 = _._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v2)
  {
    v24 = sub_236BCF8A8();
    v25 = sub_236BCFC38();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_236B83000, v24, v25, "pgrep failure. Zero-length process name provided.", v26, 2u);
      MEMORY[0x23B7FE96C](v26, -1, -1);
    }

    return -1;
  }
  swift_bridgeObjectRetain();
  v4 = sub_236BCA0C0(16);
  v6 = v5;
  v40 = v7;
  v9 = v8;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF78);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_236BD3E30;
  *(_QWORD *)(v10 + 32) = 0xE00000001;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  v41 = 0;
  v11 = sysctl((int *)(v10 + 32), 3u, 0, &v41, 0, 0);
  if (v11 != sub_236BCF8D8())
  {
    swift_bridgeObjectRelease();
    v27 = sub_236BCF8A8();
    v28 = sub_236BCFC38();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      *(_QWORD *)&v42 = v30;
      *(_DWORD *)v29 = 67109379;
      swift_beginAccess();
      LODWORD(v44) = v11;
      sub_236BCFCC8();
      *(_WORD *)(v29 + 8) = 2081;
      v31 = _s18AudioAnalyticsBase13SystemUtilityC10debugErrnoSSyFZ_0();
      v44 = sub_236B93FB0((uint64_t)v31, v32, (uint64_t *)&v42);
      sub_236BCFCC8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_236B83000, v27, v28, "pgrep failure: sysctl. Failed to get proc list buffer size. { returnCode=%d, %{private}s } ", (uint8_t *)v29, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v30, -1, -1);
      MEMORY[0x23B7FE96C](v29, -1, -1);
    }

    swift_setDeallocating();
    swift_deallocClassInstance();
    return v11;
  }
  memset(v45, 0, sizeof(v45));
  v46 = 0;
  v47 = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v61 = 0;
  v74 = 0;
  v75 = 0;
  v80 = 0;
  v87 = 0;
  v48 = 0u;
  v49 = 0u;
  v50 = 0;
  v53 = 0;
  v51 = 0u;
  v52 = 0u;
  v60 = 0;
  v58 = 0u;
  v59 = 0;
  memset(v64, 0, sizeof(v64));
  v63 = 0u;
  v65 = 0u;
  v62 = 0;
  v66 = 0;
  v72 = 0u;
  memset(v73, 0, sizeof(v73));
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v67 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v81 = 0u;
  v83 = 0;
  v82 = 0;
  v84 = 0u;
  v85 = 0u;
  v86 = 0;
  v88 = 0u;
  v89 = 0;
  v90 = 0;
  v91 = 0u;
  v92 = 0u;
  v12 = (_QWORD *)sub_236BC89F4(v45, (uint64_t)v41 / 648);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v12 = sub_236BCA0AC(v12);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = (uint64_t)sub_236B9DD94(0, 6, 0, (char *)v10);
  v11 = sysctl((int *)(v10 + 32), 3u, v12 + 4, &v41, 0, 0);
  if (v11 != sub_236BCF8D8())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33 = sub_236BCF8A8();
    v34 = sub_236BCFC38();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc();
      v36 = swift_slowAlloc();
      v44 = v36;
      *(_DWORD *)v35 = 67109379;
      swift_beginAccess();
      sub_236BCFCC8();
      *(_WORD *)(v35 + 8) = 2081;
      v37 = _s18AudioAnalyticsBase13SystemUtilityC10debugErrnoSSyFZ_0();
      sub_236B93FB0((uint64_t)v37, v38, &v44);
      sub_236BCFCC8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_236B83000, v33, v34, "pgrep failure: sysctl. Failed to get proc list. { returnCode=%d, %{private}s } ", (uint8_t *)v35, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v36, -1, -1);
      MEMORY[0x23B7FE96C](v35, -1, -1);
    }
    swift_bridgeObjectRelease();

    return v11;
  }
  v13 = geteuid();
  v14 = v12[2];
  if (!v14)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return -1;
  }
  v15 = v13;
  v16 = v4 >> 16;
  swift_bridgeObjectRetain();
  v17 = (char *)v12 + 275;
  v18 = v9;
  while (1)
  {
    v11 = *(_DWORD *)(v17 - 203);
    if (v15 != *(_DWORD *)(v17 + 177) && !allUsers)
      goto LABEL_14;
    v20 = v17[16];
    v42 = *(_OWORD *)v17;
    v43 = v20;
    v21 = sub_236BCFA70();
    if (v11 >= 1)
      break;
    swift_bridgeObjectRelease();
LABEL_13:
    v9 = v18;
LABEL_14:
    v17 += 648;
    if (!--v14)
    {
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
  }
  if ((v22 & 0x2000000000000000) != 0)
    v23 = HIBYTE(v22) & 0xF;
  else
    v23 = v21 & 0xFFFFFFFFFFFFLL;
  if (v21 == v40 && v22 == v9 && !v16 && v23 == v6 >> 16)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  v19 = sub_236BCFF68();
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0)
    goto LABEL_13;
  swift_bridgeObjectRelease();
LABEL_41:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

Swift::Int32 __swiftcall SystemUtility.pkill(_:signal:)(Swift::String _, Swift::Int32 signal)
{
  void *object;
  uint64_t countAndFlagsBits;
  Swift::Int32 v5;
  Swift::Int32 v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v18;

  object = _._object;
  countAndFlagsBits = _._countAndFlagsBits;
  v5 = SystemUtility.pgrep(_:allUsers:)(_, 1);
  if (v5 < 1)
  {
    swift_bridgeObjectRetain_n();
    v13 = sub_236BCF8A8();
    v14 = sub_236BCFC38();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v18 = v16;
      *(_DWORD *)v15 = 136380675;
      swift_bridgeObjectRetain();
      sub_236B93FB0(countAndFlagsBits, (unint64_t)object, &v18);
      sub_236BCFCC8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_236B83000, v13, v14, "Unable to retrieve pid for process. { procName=%{private}s }", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v16, -1, -1);
      MEMORY[0x23B7FE96C](v15, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    return -1;
  }
  else
  {
    v6 = kill(v5, signal);
    if (v6 != sub_236BCF8D8())
    {
      v7 = sub_236BCF8A8();
      v8 = sub_236BCFC38();
      if (os_log_type_enabled(v7, v8))
      {
        v9 = swift_slowAlloc();
        v10 = swift_slowAlloc();
        v18 = v10;
        *(_DWORD *)v9 = 67109379;
        sub_236BCFCC8();
        *(_WORD *)(v9 + 8) = 2081;
        v11 = _s18AudioAnalyticsBase13SystemUtilityC10debugErrnoSSyFZ_0();
        sub_236B93FB0((uint64_t)v11, v12, &v18);
        sub_236BCFCC8();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_236B83000, v7, v8, "Failed to kill process { returnCode=%d, %{private}s }", (uint8_t *)v9, 0x12u);
        swift_arrayDestroy();
        MEMORY[0x23B7FE96C](v10, -1, -1);
        MEMORY[0x23B7FE96C](v9, -1, -1);
      }

    }
  }
  return v6;
}

Swift::Int32_optional __swiftcall SystemUtility.spawn(cmd:)(Swift::OpaquePointer cmd)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  char *const *v7;
  int v8;
  unsigned __int8 v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  const char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unsigned int v32;
  __int16 v33;
  sigset_t v34;
  sigset_t v35;
  uint64_t v36;
  uint64_t v37;
  posix_spawnattr_t v38[2];

  v38[1] = *(posix_spawnattr_t *)MEMORY[0x24BDAC8D0];
  v38[0] = 0;
  v2 = posix_spawnattr_init(v38);
  if (v2 != sub_236BCF8D8())
  {
    v11 = sub_236BCF8A8();
    v12 = sub_236BCFC2C();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v14 = swift_slowAlloc();
      v37 = v14;
      *(_DWORD *)v13 = 67109379;
      sub_236BCFCC8();
      *(_WORD *)(v13 + 8) = 2081;
      v15 = _s18AudioAnalyticsBase13SystemUtilityC10debugErrnoSSyFZ_0();
      v36 = sub_236B93FB0((uint64_t)v15, v16, &v37);
      sub_236BCFCC8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_236B83000, v11, v12, "posix_spawnattr_init failed. { returnCode=%d, %{private}s }", (uint8_t *)v13, 0x12u);
      v9 = 1;
      swift_arrayDestroy();
      MEMORY[0x23B7FE96C](v14, -1, -1);
      MEMORY[0x23B7FE96C](v13, -1, -1);

      v10 = 0;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  v35 = 0;
  sigemptyset(&v35);
  v3 = posix_spawnattr_setsigmask(v38, &v35);
  if (v3 != sub_236BCF8D8())
  {
    v11 = sub_236BCF8A8();
    v17 = sub_236BCFC2C();
    if (!os_log_type_enabled(v11, v17))
      goto LABEL_22;
    v18 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v37 = v19;
    *(_DWORD *)v18 = 67109379;
    LODWORD(v36) = v3;
    sub_236BCFCC8();
    *(_WORD *)(v18 + 8) = 2081;
    v20 = _s18AudioAnalyticsBase13SystemUtilityC10debugErrnoSSyFZ_0();
    v36 = sub_236B93FB0((uint64_t)v20, v21, &v37);
    sub_236BCFCC8();
    swift_bridgeObjectRelease();
    v22 = "posix_spawnattr_setsigmask failed. { returnCode=%d, %{private}s }";
LABEL_21:
    _os_log_impl(&dword_236B83000, v11, v17, v22, (uint8_t *)v18, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x23B7FE96C](v19, -1, -1);
    MEMORY[0x23B7FE96C](v18, -1, -1);
    goto LABEL_22;
  }
  v34 = 0;
  sigfillset(&v34);
  v4 = posix_spawnattr_setsigdefault(v38, &v34);
  if (v4 != sub_236BCF8D8())
  {
    v11 = sub_236BCF8A8();
    v17 = sub_236BCFC2C();
    if (!os_log_type_enabled(v11, v17))
      goto LABEL_22;
    v18 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v37 = v19;
    *(_DWORD *)v18 = 67109379;
    LODWORD(v36) = v4;
    sub_236BCFCC8();
    *(_WORD *)(v18 + 8) = 2081;
    v23 = _s18AudioAnalyticsBase13SystemUtilityC10debugErrnoSSyFZ_0();
    v36 = sub_236B93FB0((uint64_t)v23, v24, &v37);
    sub_236BCFCC8();
    swift_bridgeObjectRelease();
    v22 = "posix_spawnattr_setsigdefault failed. { returnCode=%d, %{private}s }";
    goto LABEL_21;
  }
  v33 = 0;
  v5 = posix_spawnattr_getflags(v38, &v33);
  if (v5 != sub_236BCF8D8())
  {
    v11 = sub_236BCF8A8();
    v17 = sub_236BCFC2C();
    if (!os_log_type_enabled(v11, v17))
      goto LABEL_22;
    v18 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v37 = v19;
    *(_DWORD *)v18 = 67109379;
    LODWORD(v36) = v5;
    sub_236BCFCC8();
    *(_WORD *)(v18 + 8) = 2081;
    v25 = _s18AudioAnalyticsBase13SystemUtilityC10debugErrnoSSyFZ_0();
    v36 = sub_236B93FB0((uint64_t)v25, v26, &v37);
    sub_236BCFCC8();
    swift_bridgeObjectRelease();
    v22 = "posix_spawnattr_getflags failed. { returnCode=%d, %{private}s }";
    goto LABEL_21;
  }
  v33 |= 0xCu;
  v6 = posix_spawnattr_setflags(v38, v33);
  if (v6 != sub_236BCF8D8())
  {
    v11 = sub_236BCF8A8();
    v17 = sub_236BCFC2C();
    if (!os_log_type_enabled(v11, v17))
      goto LABEL_22;
    v18 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v37 = v19;
    *(_DWORD *)v18 = 67109379;
    LODWORD(v36) = v6;
    sub_236BCFCC8();
    *(_WORD *)(v18 + 8) = 2081;
    v27 = _s18AudioAnalyticsBase13SystemUtilityC10debugErrnoSSyFZ_0();
    v36 = sub_236B93FB0((uint64_t)v27, v28, &v37);
    sub_236BCFCC8();
    swift_bridgeObjectRelease();
    v22 = "posix_spawnattr_setflags failed. { returnCode=%d, %{private}s }";
    goto LABEL_21;
  }
  v32 = 0;
  v7 = (char *const *)sub_236BCA148((uint64_t)cmd._rawValue);
  if (!*((_QWORD *)v7 + 2))
    __break(1u);
  v8 = posix_spawnp((pid_t *)&v32, *((const char **)v7 + 4), 0, v38, v7 + 4, 0);
  swift_bridgeObjectRelease();
  if (v8 != sub_236BCF8D8())
  {
    v11 = sub_236BCF8A8();
    v17 = sub_236BCFC2C();
    if (os_log_type_enabled(v11, v17))
    {
      v18 = swift_slowAlloc();
      v19 = swift_slowAlloc();
      v37 = v19;
      *(_DWORD *)v18 = 67109379;
      LODWORD(v36) = v8;
      sub_236BCFCC8();
      *(_WORD *)(v18 + 8) = 2081;
      v29 = _s18AudioAnalyticsBase13SystemUtilityC10debugErrnoSSyFZ_0();
      v36 = sub_236B93FB0((uint64_t)v29, v30, &v37);
      sub_236BCFCC8();
      swift_bridgeObjectRelease();
      v22 = "posix_spawnp failed. { returnCode=%d, %{private}s }";
      goto LABEL_21;
    }
LABEL_22:

    v10 = 0;
    v9 = 1;
    goto LABEL_23;
  }
  v9 = 0;
  v10 = v32;
LABEL_23:
  LOBYTE(v38[0]) = v9;
  return (Swift::Int32_optional)(v10 | ((unint64_t)v9 << 32));
}

char *sub_236BC9FC4@<X0>(const char *a1@<X0>, char **a2@<X8>)
{
  char *result;

  result = strdup(a1);
  *a2 = result;
  return result;
}

uint64_t SystemUtility.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase13SystemUtility_logger;
  v2 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t SystemUtility.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC18AudioAnalyticsBase13SystemUtility_logger;
  v2 = sub_236BCF8C0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

_QWORD *sub_236BCA084(_QWORD *a1)
{
  return sub_236B9D90C(0, a1[2], 0, a1);
}

char *sub_236BCA098(uint64_t a1)
{
  return sub_236B9DC60(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_236BCA0AC(_QWORD *a1)
{
  return sub_236B9DC6C(0, a1[2], 0, a1);
}

uint64_t sub_236BCA0C0(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_236BCFA40();
    return sub_236BCFAD0();
  }
  return result;
}

_QWORD *sub_236BCA148(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char __s1[8];
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_236BA570C(0, v1, 0);
    v4 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v5 = *v4;
      if ((*v4 & 0x1000000000000000) != 0)
        break;
      if ((v5 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)__s1 = *(v4 - 1);
        v14 = v5 & 0xFFFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain();
        v6 = __s1;
      }
      else
      {
        if ((*(v4 - 1) & 0x1000000000000000) == 0)
          break;
        swift_bridgeObjectRetain();
        v6 = (char *)((v5 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      v15 = strdup(v6);
LABEL_9:
      swift_bridgeObjectRelease();
      v7 = v15;
      v2 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_236BA570C(0, v2[2] + 1, 1);
        v2 = v16;
      }
      v9 = v2[2];
      v8 = v2[3];
      if (v9 >= v8 >> 1)
      {
        sub_236BA570C(v8 > 1, v9 + 1, 1);
        v2 = v16;
      }
      v4 += 2;
      v2[2] = v9 + 1;
      v2[v9 + 4] = v7;
      if (!--v1)
        goto LABEL_16;
    }
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_256442F58);
    sub_236BCFD40();
    goto LABEL_9;
  }
LABEL_16:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_236B9DEA0(0, v2[2] + 1, 1, v2);
  v11 = v2[2];
  v10 = v2[3];
  if (v11 >= v10 >> 1)
    v2 = sub_236B9DEA0((_QWORD *)(v10 > 1), v11 + 1, 1, v2);
  v2[2] = v11 + 1;
  v2[v11 + 4] = 0;
  return v2;
}

uint64_t sub_236BCA32C()
{
  return type metadata accessor for SystemUtility();
}

uint64_t type metadata accessor for SystemUtility()
{
  uint64_t result;

  result = qword_2542AF340;
  if (!qword_2542AF340)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_236BCA370()
{
  uint64_t result;
  unint64_t v1;

  result = sub_236BCF8C0();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SystemUtility()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SystemUtility.__allocating_init(logger:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_236BCA3F0(uint64_t a1, uint64_t a2)
{
  return sub_236BCA414(a1, a2, Logger.ServiceLoggerCategory.rawValue.getter);
}

uint64_t sub_236BCA3FC(uint64_t a1, uint64_t a2)
{
  return sub_236BCA414(a1, a2, Config.WorkerConfigs.rawValue.getter);
}

uint64_t sub_236BCA408(uint64_t a1, uint64_t a2)
{
  return sub_236BCA414(a1, a2, Keys.rawValue.getter);
}

uint64_t sub_236BCA414(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = a3();
  v6 = v5;
  if (v4 == a3() && v6 == v7)
    v9 = 1;
  else
    v9 = sub_236BCFF98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_236BCA4AC(char a1, char a2)
{
  char v2;

  if (*(_QWORD *)&aRoot_4[8 * a1] == *(_QWORD *)&aRoot_4[8 * a2])
    v2 = 1;
  else
    v2 = sub_236BCFF98();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

void sub_236BCA510(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_236BCA558(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_236BCA5A4 + 4 * byte_236BD3E74[a2]))(7630441);
}

uint64_t sub_236BCA5A4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 7630441 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = sub_236BCFF98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_236BCA634(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x796669746F6ELL;
    else
      v3 = 0x726568746FLL;
    if (v2 == 1)
      v4 = 0xE600000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x796669746F6ELL;
      else
        v6 = 0x726568746FLL;
      if (v5 == 1)
        v7 = 0xE600000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE800000000000000;
    v3 = 0x73746C7561666564;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v3 != 0x73746C7561666564)
  {
LABEL_21:
    v8 = sub_236BCFF98();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_236BCA73C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_236BCA788(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_236BCA84C + 4 * byte_236BD3E81[a2]))(0x73646C697562);
}

uint64_t sub_236BCA84C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x73646C697562 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_236BCFF98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_236BCA960(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_236BCA9A0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_236BCAA0C + 4 * byte_236BD3E8F[a2]))(0x534F6863746177);
}

uint64_t sub_236BCAA0C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x534F6863746177 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_236BCFF98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_236BCAAC0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6573616870;
    else
      v3 = 0x73747469726973;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0xE700000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6573616870;
      else
        v6 = 0x73747469726973;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE700000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE800000000000000;
    v3 = 0x64616F6C7265766FLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v3 != 0x64616F6C7265766FLL)
  {
LABEL_21:
    v8 = sub_236BCFF98();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_236BCABD0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_236BCAC18(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_236BCAC68 + 4 * byte_236BD3E98[a2]))(7630441);
}

uint64_t sub_236BCAC68(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 7630441 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = sub_236BCFF98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_236BCACFC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_236BCAD3C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_236BCAE24 + 4 * byte_236BD3EA6[a2]))(0x726576726573);
}

uint64_t sub_236BCAE24(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x726576726573 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_236BCFF98();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_236BCAF64@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int16 v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;

  swift_bridgeObjectRetain();
  if ((a2 & 1) == 0)
  {
    sub_236BBC4AC(a1, 8);
    if (v3)
      return swift_bridgeObjectRelease_n();
  }
  CommonConfigFields.init(dict:)(a1, (uint64_t)&v30);
  if (v3)
    return swift_bridgeObjectRelease();
  v37 = v31;
  v38 = v30;
  v8 = v32;
  v9 = v33;
  v10 = v34;
  v11 = v35;
  v12 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v28 = v11;
  v29 = sub_236BA20CC(a1, 8);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(v29 + 16);
  if (v13)
  {
    v24 = v12;
    v25 = v10;
    v26 = v9;
    v27 = v8;
    v14 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    v15 = (char *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v17 = *(v14 - 1);
      v16 = *v14;
      swift_bridgeObjectRetain_n();
      v18 = sub_236BCFE60();
      swift_bridgeObjectRelease();
      if (v18 >= 3)
      {
        if ((a2 & 1) == 0)
        {
          sub_236B93D48();
          swift_allocError();
          *(_QWORD *)v23 = v17;
          *(_QWORD *)(v23 + 8) = v16;
          *(_BYTE *)(v23 + 16) = 5;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v15 = sub_236B9DFAC(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
        v20 = *((_QWORD *)v15 + 2);
        v19 = *((_QWORD *)v15 + 3);
        if (v20 >= v19 >> 1)
          v15 = sub_236B9DFAC((char *)(v19 > 1), v20 + 1, 1, v15);
        *((_QWORD *)v15 + 2) = v20 + 1;
        v15[v20 + 32] = v18;
      }
      v14 += 2;
      if (!--v13)
      {
        v21 = v24;
        swift_bridgeObjectRelease();
        v22 = v28;
        swift_bridgeObjectRelease();
        v10 = v25;
        swift_bridgeObjectRelease();
        v9 = v26;
        swift_bridgeObjectRelease();
        v8 = v27;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
  }
  swift_bridgeObjectRelease();
  v22 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v12;
  v15 = (char *)MEMORY[0x24BEE4AF8];
LABEL_19:
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v15;
  *(_WORD *)(a3 + 8) = v38;
  *(_BYTE *)(a3 + 10) = v37;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = v10;
  *(_QWORD *)(a3 + 40) = v22;
  *(_QWORD *)(a3 + 48) = v21;
  return result;
}

AudioAnalyticsBase::TailspinConfig::CaseName_optional __swiftcall TailspinConfig.CaseName.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  AudioAnalyticsBase::TailspinConfig::CaseName_optional result;
  char v5;

  v2 = v1;
  v3 = sub_236BCFE60();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t TailspinConfig.enabledCases.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TailspinConfig.commonFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 10);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  *(_WORD *)a1 = *(_WORD *)(v1 + 8);
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 TailspinConfig.commonFields.setter(__int16 *a1)
{
  uint64_t v1;
  __int16 v2;
  char v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __int128 v7;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 2);
  v6 = *(__n128 *)(a1 + 12);
  v7 = *(_OWORD *)(a1 + 4);
  v4 = *((_QWORD *)a1 + 5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_WORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 10) = v3;
  result = v6;
  *(_OWORD *)(v1 + 16) = v7;
  *(__n128 *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 48) = v4;
  return result;
}

uint64_t (*TailspinConfig.commonFields.modify())()
{
  return nullsub_1;
}

void *static TailspinConfig.CaseName.allCases.getter()
{
  return &unk_250828258;
}

uint64_t TailspinConfig.CaseName.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6573616870;
  if (*v0 != 1)
    v1 = 0x73747469726973;
  if (*v0)
    return v1;
  else
    return 0x64616F6C7265766FLL;
}

uint64_t sub_236BCB4DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_236BCAAC0(*a1, *a2);
}

unint64_t sub_236BCB4EC()
{
  unint64_t result;

  result = qword_256442F60;
  if (!qword_256442F60)
  {
    result = MEMORY[0x23B7FE8AC](&protocol conformance descriptor for TailspinConfig.CaseName, &type metadata for TailspinConfig.CaseName);
    atomic_store(result, (unint64_t *)&qword_256442F60);
  }
  return result;
}

uint64_t sub_236BCB530()
{
  sub_236BD0028();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

uint64_t sub_236BCB5CC()
{
  sub_236BCFA34();
  return swift_bridgeObjectRelease();
}

uint64_t sub_236BCB644()
{
  sub_236BD0028();
  sub_236BCFA34();
  swift_bridgeObjectRelease();
  return sub_236BD0064();
}

AudioAnalyticsBase::TailspinConfig::CaseName_optional sub_236BCB6DC(Swift::String *a1)
{
  return TailspinConfig.CaseName.init(rawValue:)(*a1);
}

void sub_236BCB6E8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE800000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x6573616870;
  if (v2 != 1)
  {
    v5 = 0x73747469726973;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x64616F6C7265766FLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_236BCB748()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256442F68;
  if (!qword_256442F68)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256442F70);
    result = MEMORY[0x23B7FE8AC](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256442F68);
  }
  return result;
}

void sub_236BCB794(_QWORD *a1@<X8>)
{
  *a1 = &unk_250828280;
}

uint64_t sub_236BCB7A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_BYTE *)(v1 + 10);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  *(_WORD *)a1 = *(_WORD *)(v1 + 8);
  *(_BYTE *)(a1 + 2) = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for TailspinConfig()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TailspinConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TailspinConfig(uint64_t a1, uint64_t a2)
{
  __int16 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_WORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TailspinConfig(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TailspinConfig(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TailspinConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TailspinConfig()
{
  return &type metadata for TailspinConfig;
}

uint64_t storeEnumTagSinglePayload for TailspinConfig.CaseName(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_236BCBB44 + 4 * byte_236BD3EB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_236BCBB78 + 4 * byte_236BD3EB0[v4]))();
}

uint64_t sub_236BCBB78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BCBB80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x236BCBB88);
  return result;
}

uint64_t sub_236BCBB94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x236BCBB9CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_236BCBBA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_236BCBBA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TailspinConfig.CaseName()
{
  return &type metadata for TailspinConfig.CaseName;
}

uint64_t sub_236BCBBC4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  __int16 v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v29 = MEMORY[0x24BEE4AF8];
    sub_236BA5640(0, v4, 0);
    v5 = v29;
    v8 = (uint64_t *)(a1 + 32);
    v22 = a2 & 1;
    while (1)
    {
      v9 = *v8;
      swift_bridgeObjectRetain_n();
      sub_236BCAF64(v9, v22, (uint64_t)&v23);
      if (v3)
        break;
      swift_bridgeObjectRelease();
      v10 = v23;
      v11 = v24;
      v12 = v25;
      v13 = v26;
      v14 = v27;
      v15 = v28;
      v29 = v5;
      v17 = *(_QWORD *)(v5 + 16);
      v16 = *(_QWORD *)(v5 + 24);
      if (v17 >= v16 >> 1)
      {
        v20 = v27;
        v21 = v26;
        sub_236BA5640(v16 > 1, v17 + 1, 1);
        v14 = v20;
        v13 = v21;
        v5 = v29;
      }
      *(_QWORD *)(v5 + 16) = v17 + 1;
      v18 = v5 + 56 * v17;
      *(_QWORD *)(v18 + 32) = v10;
      *(_WORD *)(v18 + 40) = v11;
      *(_BYTE *)(v18 + 42) = v12;
      *(_OWORD *)(v18 + 48) = v13;
      *(_OWORD *)(v18 + 64) = v14;
      *(_QWORD *)(v18 + 80) = v15;
      ++v8;
      --v4;
      v3 = 0;
      if (!v4)
        return v5;
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t sub_236BCBD20(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  unint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  uint64_t v38;

  v4 = v3;
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v6 = 0;
    v7 = MEMORY[0x24BEE4AF8];
    v30 = *(_QWORD *)(result + 16);
    v28 = v5 - 1;
    v32 = result;
    do
    {
      v29 = v7;
      v8 = 56 * v6;
      v9 = v6;
      while (1)
      {
        if (v9 >= *(_QWORD *)(result + 16))
        {
          __break(1u);
          return result;
        }
        v35 = v9;
        v36 = v4;
        v10 = *(_QWORD *)(result + v8 + 32);
        v11 = *(_WORD *)(result + v8 + 40);
        v12 = *(_BYTE *)(result + v8 + 42);
        v13 = *(_QWORD *)(result + v8 + 48);
        v14 = *(_QWORD *)(result + v8 + 56);
        v16 = *(_QWORD *)(result + v8 + 64);
        v15 = *(_QWORD *)(result + v8 + 72);
        v17 = *(_QWORD *)(result + v8 + 80);
        v37[3] = &type metadata for TailspinConfig;
        v37[4] = &off_25082AFB0;
        v18 = swift_allocObject();
        v37[0] = v18;
        *(_QWORD *)(v18 + 16) = v10;
        v31 = v11;
        *(_WORD *)(v18 + 24) = v11;
        *(_BYTE *)(v18 + 26) = v12;
        *(_QWORD *)(v18 + 32) = v13;
        *(_QWORD *)(v18 + 40) = v14;
        *(_QWORD *)(v18 + 48) = v16;
        *(_QWORD *)(v18 + 56) = v15;
        *(_QWORD *)(v18 + 64) = v17;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v19 = sub_236BA72C0(v37, a2, a3);
        if (v36)
        {
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
          v7 = v29;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v7;
        }
        v20 = v19;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
        if ((v20 & 1) != 0)
          break;
        v9 = v35 + 1;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v8 += 56;
        v4 = 0;
        result = v32;
        if (v30 == v35 + 1)
        {
          v7 = v29;
          goto LABEL_17;
        }
      }
      v21 = v29;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v38 = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_236BA5640(0, *(_QWORD *)(v29 + 16) + 1, 1);
        v21 = v38;
      }
      v23 = v21;
      v24 = *(_QWORD *)(v21 + 16);
      v25 = *(_QWORD *)(v23 + 24);
      v26 = v24 + 1;
      v4 = 0;
      if (v24 >= v25 >> 1)
      {
        sub_236BA5640(v25 > 1, v24 + 1, 1);
        v26 = v24 + 1;
        v4 = 0;
        v23 = v38;
      }
      *(_QWORD *)(v23 + 16) = v26;
      v27 = v23 + 56 * v24;
      *(_QWORD *)(v27 + 32) = v10;
      v6 = v35 + 1;
      *(_WORD *)(v27 + 40) = v31;
      *(_BYTE *)(v27 + 42) = v12;
      *(_QWORD *)(v27 + 48) = v13;
      *(_QWORD *)(v27 + 56) = v14;
      *(_QWORD *)(v27 + 64) = v16;
      *(_QWORD *)(v27 + 72) = v15;
      *(_QWORD *)(v27 + 80) = v17;
      v7 = v23;
      result = v32;
    }
    while (v28 != v35);
  }
  else
  {
    v7 = MEMORY[0x24BEE4AF8];
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_236BCC014(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[32];
  __int128 v13;
  uint64_t v14;

  v14 = *a1;
  if (*(_QWORD *)(v14 + 16)
    && (v4 = sub_236BA4CD0(8), (v5 & 1) != 0)
    && (sub_236B8E794(*(_QWORD *)(v14 + 56) + 32 * v4, (uint64_t)v12),
        __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDC0),
        (swift_dynamicCast() & 1) != 0))
  {
    v13 = *(_OWORD *)(a1 + 1);
    v2 = a1[3];
    v6 = a1[4];
    v7 = *((_BYTE *)a1 + 40);
    sub_236B954A0((uint64_t)&v14);
    sub_236B954C8((uint64_t)&v13);
    swift_bridgeObjectRetain();
    v8 = sub_236BCBBC4(v11, v7);
    sub_236B954F0((uint64_t)&v14);
    sub_236B95518((uint64_t)&v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v1)
    {
      sub_236B954A0((uint64_t)&v14);
      sub_236B954C8((uint64_t)&v13);
      swift_bridgeObjectRetain();
      v2 = sub_236BCBD20(v8, v2, v6);
      sub_236B954F0((uint64_t)&v14);
      sub_236B95518((uint64_t)&v13);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_236B93D48();
    swift_allocError();
    *(_QWORD *)v9 = 0xD00000000000001ALL;
    *(_QWORD *)(v9 + 8) = 0x8000000236BD6360;
    *(_BYTE *)(v9 + 16) = 0;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_236BCC1B4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

double static Double.minutes(_:)(double a1)
{
  return sub_236B8FD58(&qword_2542AFE20, (double *)&qword_2542AFE18, a1);
}

void sub_236BCC21C()
{
  qword_2542AFE28 = 0x3FF0000000000000;
}

double static Double.oneSecond.getter()
{
  return sub_236BCC288(&qword_2542AF288, (uint64_t)qword_2542AFE28);
}

double sub_236BCC248(uint64_t a1)
{
  return sub_236BCC2E4(a1, &qword_2542AF288, qword_2542AFE28, (double *)&qword_2542AFE18);
}

double static Double.oneMinute.getter()
{
  return sub_236BCC288(&qword_2542AFE20, (uint64_t)&qword_2542AFE18);
}

double sub_236BCC288(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(double *)a2;
}

double sub_236BCC2C0(uint64_t a1)
{
  return sub_236BCC2E4(a1, &qword_2542AFE20, (double *)&qword_2542AFE18, qword_2542AFDF8);
}

double sub_236BCC2E4(uint64_t a1, _QWORD *a2, double *a3, double *a4)
{
  double result;

  if (*a2 != -1)
    swift_once();
  result = *a3 * 60.0;
  *a4 = result;
  return result;
}

double static Double.oneHour.getter()
{
  return sub_236BCC288(&qword_2542AFE08, (uint64_t)qword_2542AFDF8);
}

double sub_236BCC350()
{
  double result;

  if (qword_2542AFE08 != -1)
    swift_once();
  result = qword_2542AFDF8[0] * 24.0;
  *(double *)&qword_2542AFDE8 = qword_2542AFDF8[0] * 24.0;
  return result;
}

double static Double.oneDay.getter()
{
  return sub_236BCC288(&qword_2542AFDF0, (uint64_t)&qword_2542AFDE8);
}

double sub_236BCC3BC()
{
  double result;

  if (qword_2542AFDF0 != -1)
    swift_once();
  result = *(double *)&qword_2542AFDE8 * 7.0;
  *(double *)&qword_256442F78 = *(double *)&qword_2542AFDE8 * 7.0;
  return result;
}

double static Double.oneWeek.getter()
{
  return sub_236BCC288(qword_256442658, (uint64_t)&qword_256442F78);
}

double sub_236BCC428()
{
  double result;

  if (qword_2542AFDF0 != -1)
    swift_once();
  result = *(double *)&qword_2542AFDE8 * 365.0;
  *(double *)&qword_2542AFE10 = *(double *)&qword_2542AFDE8 * 365.0;
  return result;
}

double static Double.oneYear.getter()
{
  return sub_236BCC288(&qword_2542AF280, (uint64_t)&qword_2542AFE10);
}

double static Double.hours(_:)(double a1)
{
  return sub_236B8FD58(&qword_2542AFE08, qword_2542AFDF8, a1);
}

double static Double.days(_:)(double a1)
{
  return sub_236B8FD58(&qword_2542AFDF0, (double *)&qword_2542AFDE8, a1);
}

double static Double.weeks(_:)(double a1)
{
  return sub_236B8FD58(qword_256442658, (double *)&qword_256442F78, a1);
}

double static Double.years(_:)(double a1)
{
  return sub_236B8FD58(&qword_2542AF280, (double *)&qword_2542AFE10, a1);
}

Swift::String __swiftcall Double.toDateString(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  Swift::String result;
  uint64_t v15;

  v1 = sub_236BCF878();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
  v6 = (void *)sub_236BCF998();
  objc_msgSend(v5, sel_setDateFormat_, v6);

  sub_236BCF854();
  v7 = (void *)sub_236BCF848();
  v8 = objc_msgSend(v5, sel_stringFromDate_, v7);

  v9 = sub_236BCF9BC();
  v11 = v10;

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v12 = v9;
  v13 = v11;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

uint64_t sub_236BCC638(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  int *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_236B8F4B8(0, v2, 0);
    result = v9;
    v4 = (int *)(a1 + 32);
    do
    {
      v6 = *v4++;
      v5 = v6;
      v10 = result;
      v8 = *(_QWORD *)(result + 16);
      v7 = *(_QWORD *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        sub_236B8F4B8(v7 > 1, v8 + 1, 1);
        result = v10;
      }
      *(_QWORD *)(result + 16) = v8 + 1;
      *(_DWORD *)(result + 4 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t static Utilities.eventType(from:)(uint64_t a1, uint64_t a2)
{
  return sub_236BCC734(a1, a2, (uint64_t (*)(void))sub_236BCDAE4);
}

uint64_t static Utilities.eventCategory(from:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = sub_236BCECB8(a1, a2);
  return v2 | ((HIDWORD(v2) & 1) << 32);
}

uint64_t static Utilities.serviceType(from:)(uint64_t a1, uint64_t a2)
{
  return sub_236BCC734(a1, a2, (uint64_t (*)(void))sub_236BCD4A4);
}

uint64_t sub_236BCC734(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FFFF;
}

uint64_t static Utilities.applicationName(from:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  char v4;
  uint64_t v5;

  v1 = 0x6E776F6E6B6E55;
  if (*(_QWORD *)(a1 + 16))
  {
    v3 = sub_236B8BFC0(0xD000000000000018, 0x8000000236BD44A0);
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(a1 + 56) + 24 * v3;
      if (*(_BYTE *)(v5 + 16) == 4)
      {
        v1 = *(_QWORD *)v5;
        swift_bridgeObjectRetain();
      }
    }
  }
  return v1;
}

id static Utilities.generateError(with:code:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inited;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  __swift_instantiateConcreteTypeFromMangledName(qword_256442F98);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_236BD1AD0;
  *(_QWORD *)(inited + 32) = sub_236BCF9BC();
  *(_QWORD *)(inited + 40) = v7;
  *(_QWORD *)(inited + 48) = a1;
  *(_QWORD *)(inited + 56) = a2;
  swift_bridgeObjectRetain();
  v8 = sub_236B930F4(inited);
  sub_236BCC904(v8);
  swift_bridgeObjectRelease();
  v9 = objc_allocWithZone(MEMORY[0x24BDD1540]);
  v10 = (void *)sub_236BCF998();
  v11 = (void *)sub_236BCF920();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v9, sel_initWithDomain_code_userInfo_, v10, a3, v11);

  return v12;
}

unint64_t sub_236BCC904(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t result;
  int64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];

  v1 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_2542AFF08);
    v2 = (_QWORD *)sub_236BCFE3C();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v32 = v1 + 64;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v31 = (unint64_t)(63 - v3) >> 6;
  v6 = &v37;
  v7 = &v39;
  result = swift_bridgeObjectRetain();
  i = 0;
  v10 = MEMORY[0x24BEE4AD8] + 8;
  v11 = MEMORY[0x24BEE0D00];
  if (v5)
    goto LABEL_10;
LABEL_11:
  v20 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v20 >= v31)
    goto LABEL_32;
  v21 = *(_QWORD *)(v32 + 8 * v20);
  v22 = i + 1;
  if (!v21)
  {
    v22 = i + 2;
    if (i + 2 >= v31)
      goto LABEL_32;
    v21 = *(_QWORD *)(v32 + 8 * v22);
    if (!v21)
    {
      v22 = i + 3;
      if (i + 3 >= v31)
        goto LABEL_32;
      v21 = *(_QWORD *)(v32 + 8 * v22);
      if (!v21)
      {
        v22 = i + 4;
        if (i + 4 >= v31)
          goto LABEL_32;
        v21 = *(_QWORD *)(v32 + 8 * v22);
        if (!v21)
        {
          v23 = i + 5;
          if (i + 5 < v31)
          {
            v21 = *(_QWORD *)(v32 + 8 * v23);
            if (v21)
            {
              v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v22 = v23 + 1;
              if (__OFADD__(v23, 1))
                goto LABEL_36;
              if (v22 >= v31)
                break;
              v21 = *(_QWORD *)(v32 + 8 * v22);
              ++v23;
              if (v21)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_236B96E24();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v34 = (v21 - 1) & v21;
  v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    v24 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v19);
    v35 = *v24;
    v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_236B8BA20(v6, v7);
    sub_236B8BA20(v7, v40);
    sub_236B8BA20(v40, &v38);
    result = sub_236B8BFC0(v35, v36);
    v25 = result;
    if ((v26 & 1) != 0)
    {
      v33 = i;
      v12 = v7;
      v13 = v6;
      v14 = v1;
      v15 = v11;
      v16 = v10;
      v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v17 = v35;
      v17[1] = v36;
      v10 = v16;
      v11 = v15;
      v1 = v14;
      v6 = v13;
      v7 = v12;
      i = v33;
      v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      result = (unint64_t)sub_236B8BA20(&v38, v18);
      v5 = v34;
      if (!v34)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v27 = (uint64_t *)(v2[6] + 16 * result);
    *v27 = v35;
    v27[1] = v36;
    result = (unint64_t)sub_236B8BA20(&v38, (_OWORD *)(v2[7] + 32 * result));
    v28 = v2[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_34;
    v2[2] = v30;
    v5 = v34;
    if (!v34)
      goto LABEL_11;
LABEL_10:
    v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_236BCCC6C(int a1)
{
  int v1;
  unint64_t result;

  v1 = a1 + 1;
  result = 0x636972656E6547;
  switch(v1)
  {
    case 0:
      result = 0x6E776F6E6B6E55;
      break;
    case 2:
      return result;
    case 3:
      result = 0x64726F636552;
      break;
    case 4:
      result = 0x7475706E49;
      break;
    case 5:
      result = 0x6B63616279616C50;
      break;
    case 6:
      result = 0x74757074754FLL;
      break;
    case 7:
      result = 0xD000000000000011;
      break;
    case 8:
      result = 20297;
      break;
    case 9:
      result = 0x7075746553;
      break;
    case 10:
      result = 0x6552746E65696C43;
      break;
    case 11:
      result = 0x6168436574756F52;
      break;
    case 12:
      result = 0x726F727245;
      break;
    case 13:
      result = 0x74726F7065524F49;
      break;
    case 14:
      result = 0x616D726F66726550;
      break;
    case 15:
      result = 0x656D756C6F56;
      break;
    case 16:
      result = 0x65736E61707845;
      break;
    case 17:
      result = 0x48676E6972616548;
      break;
    case 18:
      result = 0x73646F50726941;
      break;
    case 19:
      result = 0x6F72506563696F56;
      break;
    case 21:
      result = 0x6C616974617053;
      break;
    case 22:
      result = 0x556F5478694D5056;
      break;
    case 23:
      result = 0x6863746157;
      break;
    default:
      result = 0x656E696665646E55;
      break;
  }
  return result;
}

unint64_t sub_236BCCED0()
{
  unint64_t result;

  result = sub_236BCCF2C(493);
  qword_256442F80 = result;
  return result;
}

uint64_t static Utilities.reportingFolderAttributes.getter()
{
  return sub_236BCD008(&qword_256442668);
}

unint64_t sub_236BCCF0C()
{
  unint64_t result;

  result = sub_236BCCF2C(484);
  qword_256442F88 = result;
  return result;
}

unint64_t sub_236BCCF2C(uint64_t a1)
{
  uint64_t inited;
  void *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;

  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFF70);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_236BD1370;
  v3 = (void *)*MEMORY[0x24BDD0CC8];
  v4 = MEMORY[0x24BEE1768];
  v5 = (void **)MEMORY[0x24BDD0CB0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDD0CC8];
  *(_QWORD *)(inited + 40) = a1;
  v6 = *v5;
  *(_QWORD *)(inited + 64) = v4;
  *(_QWORD *)(inited + 72) = v6;
  v7 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 80) = 0x656C69626F6DLL;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  v8 = (void *)*MEMORY[0x24BDD0C78];
  *(_QWORD *)(inited + 104) = v7;
  *(_QWORD *)(inited + 112) = v8;
  *(_QWORD *)(inited + 144) = v7;
  *(_QWORD *)(inited + 120) = 0x656C69626F6DLL;
  *(_QWORD *)(inited + 128) = 0xE600000000000000;
  v9 = v3;
  v10 = v6;
  v11 = v8;
  return sub_236B93214(inited);
}

uint64_t static Utilities.reportingFileAttributes.getter()
{
  return sub_236BCD008(&qword_256442670);
}

uint64_t sub_236BCD008(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_236BCD040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];

  v0 = sub_236BCFC50();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_236BCFC44();
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_236BCF914();
  MEMORY[0x24BDAC7A8](v5);
  sub_236B97130();
  sub_236BCF8FC();
  v7[1] = MEMORY[0x24BEE4AF8];
  sub_236B9716C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_2542AFDD8);
  sub_236B971B4();
  sub_236BCFD10();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BEE5750], v0);
  result = sub_236BCFC74();
  qword_256442F90 = result;
  return result;
}

id static Utilities.reportingServerQueue.getter()
{
  if (qword_256442678 != -1)
    swift_once();
  return (id)qword_256442F90;
}

uint64_t sub_236BCD210()
{
  uint64_t v0;

  v0 = sub_236BCF800();
  __swift_allocate_value_buffer(v0, qword_2542AFB78);
  __swift_project_value_buffer(v0, (uint64_t)qword_2542AFB78);
  return sub_236BCF7B8();
}

uint64_t static Utilities.audioAnalyticsDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236BCD2D0(&qword_2542AFB90, (uint64_t)qword_2542AFB78, a1);
}

uint64_t sub_236BCD290(uint64_t a1)
{
  return sub_236BCD390(a1, qword_2542B0028);
}

uint64_t static Utilities.logDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236BCD2D0(&qword_2542B0048, (uint64_t)qword_2542B0028, a1);
}

uint64_t sub_236BCD2D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_236BCF800();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_236BCD338(uint64_t a1)
{
  return sub_236BCD390(a1, qword_2542AF200);
}

uint64_t static Utilities.configDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236BCD2D0(&qword_2542AFBA0, (uint64_t)qword_2542AF200, a1);
}

uint64_t sub_236BCD370(uint64_t a1)
{
  return sub_236BCD390(a1, qword_2542AF218);
}

uint64_t sub_236BCD390(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v3 = sub_236BCF800();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v5, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  if (qword_2542AFB90 != -1)
    swift_once();
  v8 = __swift_project_value_buffer(v3, (uint64_t)qword_2542AFB78);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v8, v3);
  sub_236BCF7D0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t static Utilities.tailspinDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_236BCD2D0(qword_2542AFBA8, (uint64_t)qword_2542AF218, a1);
}

uint64_t sub_236BCD4A4(uint64_t a1, uint64_t a2)
{
  char v4;
  int v5;
  char v7;

  if (a1 == 0x6E6F6870656C6574 && a2 == 0xE900000000000079 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 2;
  }
  else if (a1 == 1769105779 && a2 == 0xE400000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 1;
  }
  else if (a1 == 0x736D72616C61 && a2 == 0xE600000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 4;
  }
  else if (a1 == 0x73636974706168 && a2 == 0xE700000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 3;
  }
  else if (a1 == 0x636972656E6567 && a2 == 0xE700000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v5 = 0;
    v4 = 0;
  }
  else if (a1 == 0x6F6C41646E617473 && a2 == 0xEA0000000000656ELL || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 5;
  }
  else if (a1 == 0x747541646E756F73 && a2 == 0xEF6769666E6F436FLL || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 6;
  }
  else if (a1 == 0x6D726F46676E6F6CLL && a2 == 0xED00006F69647541 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000236BD64A0 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 8;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000236BD6480 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 9;
  }
  else if (a1 == 0x737472656C61 && a2 == 0xE600000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 10;
  }
  else if (a1 == 1953719668 && a2 == 0xE400000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 11;
  }
  else if (a1 == 0x6567617355697061 && a2 == 0xE800000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 12;
  }
  else if (a1 == 0x6F536D6574737973 && a2 == 0xEC00000073646E75 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 13;
  }
  else if (a1 == 0x616E41646E756F73 && a2 == 0xED0000736973796CLL || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 14;
  }
  else if (a1 == 0x657275636573 && a2 == 0xE600000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 15;
  }
  else if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000)
  {
    v4 = 0;
    v5 = 0xFFFF;
  }
  else
  {
    v7 = sub_236BCFF98();
    v4 = v7 ^ 1;
    if ((v7 & 1) != 0)
      v5 = 0xFFFF;
    else
      v5 = 0;
  }
  return v5 & 0xFFFEFFFF | ((v4 & 1) << 16);
}

uint64_t sub_236BCDAE4(uint64_t a1, uint64_t a2)
{
  int v5;
  char v6;
  char v8;

  if (a1 == 0x636972656E6547 && a2 == 0xE700000000000000)
    return 0;
  if ((sub_236BCFF98() & 1) != 0)
  {
    v5 = 0;
    v6 = 0;
  }
  else if (a1 == 0x7472617453 && a2 == 0xE500000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 1;
  }
  else if (a1 == 1886352467 && a2 == 0xE400000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 2;
  }
  else if (a1 == 0x7075746553 && a2 == 0xE500000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 5;
  }
  else if (a1 == 0x726F727245 && a2 == 0xE500000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 6;
  }
  else if (a1 == 0x7465446575737349 && a2 == 0xED0000726F746365 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 7;
  }
  else if (a1 == 0x6E776F6E6B6E55 && a2 == 0xE700000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 0xFFFF;
  }
  else if (a1 == 0x6574617669746341 && a2 == 0xE800000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 3;
  }
  else if (a1 == 0x6176697463616544 && a2 == 0xEA00000000006574 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 4;
  }
  else if (a1 == 0x766972444944494DLL && a2 == 0xEA00000000007265 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 10;
  }
  else if (a1 == 0x676F4C7265776F50 && a2 == 0xE800000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 8;
  }
  else if (a1 == 0x6F4C79726F6D654DLL && a2 == 0xE900000000000067 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 19;
  }
  else if (a1 == 0x696E556F69647541 && a2 == 0xEE00656761735574 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 9;
  }
  else if (a1 == 0x7972616D6D7553 && a2 == 0xE700000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 11;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000236BD6560 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 12;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000236BD6540 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 14;
  }
  else if (a1 == 0x7078456F69647541 && a2 == 0xED0000657275736FLL || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 13;
  }
  else if (a1 == 0x694B726F736E6553 && a2 == 0xE900000000000074 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 15;
  }
  else if (a1 == 0x656C706D6953 && a2 == 0xE600000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 16;
  }
  else if (a1 == 0x6172676F74736948 && a2 == 0xE90000000000006DLL || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 17;
  }
  else if (a1 == 0x6574617453 && a2 == 0xE500000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v6 = 0;
    v5 = 18;
  }
  else if (a1 == 0x6E49646F50726941 && a2 == 0xEA00000000006F66)
  {
    v6 = 0;
    v5 = 20;
  }
  else
  {
    v8 = sub_236BCFF98();
    v6 = v8 ^ 1;
    if ((v8 & 1) != 0)
      v5 = 20;
    else
      v5 = 0;
  }
  return v5 & 0xFFFEFFFF | ((v6 & 1) << 16);
}

unint64_t sub_236BCE2CC(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v7;

  if (a1 == 0x636972656E6547 && a2 == 0xE700000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 1;
  }
  else if (a1 == 0x64726F636552 && a2 == 0xE600000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 2;
  }
  else if (a1 == 0x6B63616279616C50 && a2 == 0xE800000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000236BD6580 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 6;
  }
  else if (a1 == 0x7475706E49 && a2 == 0xE500000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 3;
  }
  else if (a1 == 0x74757074754FLL && a2 == 0xE600000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 5;
  }
  else if (a1 == 20297 && a2 == 0xE200000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 7;
  }
  else if (a1 == 0x7075746553 && a2 == 0xE500000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 8;
  }
  else if (a1 == 0x6552746E65696C43 && a2 == 0xED00007473657571 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 9;
  }
  else if (a1 == 0x6168436574756F52 && a2 == 0xEB0000000065676ELL || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 10;
  }
  else if (a1 == 0x726F727245 && a2 == 0xE500000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 11;
  }
  else if (a1 == 0x74726F7065524F49 && a2 == 0xEB00000000676E69 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 12;
  }
  else if (a1 == 0x616D726F66726550 && a2 == 0xEB0000000065636ELL || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 13;
  }
  else if (a1 == 0x656D756C6F56 && a2 == 0xE600000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 14;
  }
  else if (a1 == 0x65736E61707845 && a2 == 0xE700000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 15;
  }
  else if (a1 == 0x6F72506563696F56 && a2 == 0xEE00726F73736563 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 18;
  }
  else if (a1 == 0x48676E6972616548 && a2 == 0xED000068746C6165 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 16;
  }
  else if (a1 == 0x73646F50726941 && a2 == 0xE700000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 17;
  }
  else if (a1 == 0x6C616974617053 && a2 == 0xE700000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 20;
  }
  else if (a1 == 0x556F5478694D5056 && a2 == 0xED00006B6E696C70 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 21;
  }
  else if (a1 == 0x6863746157 && a2 == 0xE500000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 22;
  }
  else if (a1 == 0x6E776F6E6B6E55 && a2 == 0xE700000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 0xFFFFFFFFLL;
  }
  else if (a1 == 1229211981 && a2 == 0xE400000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 0x4000000;
  }
  else if (a1 == 0x6E6F6973736553 && a2 == 0xE700000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 0x8000000;
  }
  else if (a1 == 5264196 && a2 == 0xE300000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 0x10000000;
  }
  else if (a1 == 4997448 && a2 == 0xE300000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 0x20000000;
  }
  else if (a1 == 0x676E6974756F52 && a2 == 0xE700000000000000 || (sub_236BCFF98() & 1) != 0)
  {
    v4 = 0;
    v5 = 0x40000000;
  }
  else if (a1 == 0x786F626C6F6F54 && a2 == 0xE700000000000000)
  {
    v4 = 0;
    v5 = 0x80000000;
  }
  else
  {
    v7 = sub_236BCFF98();
    v4 = v7 ^ 1;
    v5 = 0x80000000;
    if ((v7 & 1) == 0)
      v5 = 0;
  }
  return v5 | ((unint64_t)(v4 & 1) << 32);
}

unint64_t sub_236BCECB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t *v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;

  sub_236B8D9A0();
  if ((sub_236BCFCF8() & 1) != 0)
  {
    v4 = sub_236BCFCE0();
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = 0;
      v7 = (uint64_t *)(v4 + 40);
      do
      {
        v8 = sub_236BCE2CC(*(v7 - 1), *v7);
        if ((v8 & 0x100000000) != 0)
          v9 = 0;
        else
          v9 = v8;
        v6 |= v9;
        v7 += 2;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
      LOBYTE(v10) = v6 == 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      v6 = 0;
      LOBYTE(v10) = 1;
    }
  }
  else
  {
    v11 = sub_236BCE2CC(a1, a2);
    v6 = v11;
    v10 = HIDWORD(v11) & 1;
  }
  return v6 | ((unint64_t)v10 << 32);
}

ValueMetadata *type metadata accessor for Utilities()
{
  return &type metadata for Utilities;
}

uint64_t ValueWithChangeIndicator.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  ValueWithChangeIndicator.init(_:)(a1);
  return v2;
}

uint64_t *ValueWithChangeIndicator.init(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  *((_BYTE *)v1 + 16) = 0;
  v4 = (uint64_t)v1 + *(_QWORD *)(v3 + 104);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 56))(v4, 1, 1, *(_QWORD *)(v3 + 80));
  swift_beginAccess();
  v5 = sub_236BCFCB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
  swift_endAccess();
  return v1;
}

uint64_t sub_236BCEEC8(uint64_t a1)
{
  uint64_t v2;

  sub_236BCF220(a1);
  v2 = sub_236BCFCB0();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

void (*sub_236BCEF10(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = sub_236BCFCB0();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v3[4] = v7;
  sub_236BCF09C((uint64_t)v7);
  return sub_236BCEF98;
}

void sub_236BCEF98(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    sub_236BCF220((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    sub_236BCF220(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t sub_236BCF030()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_236BCF060(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 16) = a1;
  return result;
}

uint64_t sub_236BCF09C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 104);
  swift_beginAccess();
  v4 = sub_236BCFCB0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_236BCF10C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 104);
  swift_beginAccess();
  v4 = sub_236BCFCB0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t ValueWithChangeIndicator.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  v2 = sub_236BCFCB0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ValueWithChangeIndicator.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  v2 = sub_236BCFCB0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_236BCF220(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  void (*v23)(char *, uint64_t);
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;

  v2 = v1;
  v45 = a1;
  v39 = *v1;
  v3 = *(_QWORD *)(v39 + 80);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v40 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_236BCFCB0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v42 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v8 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v10 = (char *)&v36 - v9;
  v11 = *(_QWORD *)(v6 - 8);
  v12 = MEMORY[0x24BDAC7A8](v8);
  v46 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v41 = (char *)&v36 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v36 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v36 - v19;
  sub_236BCF09C((uint64_t)&v36 - v19);
  v43 = v4;
  v44 = v3;
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  v22 = v21(v20, 1, v3);
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v20, v6);
  if (v22 != 1)
  {
    v38 = v2;
    sub_236BCF09C((uint64_t)v18);
    v37 = TupleTypeMetadata2;
    v26 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v25 = v45;
    v24(v10, v45, v6);
    v24(v26, (uint64_t)v18, v6);
    v27 = v44;
    if (v21(v10, 1, v44) == 1)
    {
      v23(v18, v6);
      v28 = v21(v26, 1, v27);
      v29 = v38;
      if (v28 == 1)
      {
        v23(v10, v6);
        goto LABEL_11;
      }
    }
    else
    {
      v30 = v41;
      v24(v41, (uint64_t)v10, v6);
      if (v21(v26, 1, v27) != 1)
      {
        v31 = v40;
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v26, v27);
        LODWORD(v42) = sub_236BCF980();
        v32 = v25;
        v33 = *(void (**)(char *, uint64_t))(v43 + 8);
        v33(v31, v27);
        v23(v18, v6);
        v33(v30, v27);
        v25 = v32;
        v23(v10, v6);
        v29 = v38;
        if ((v42 & 1) != 0)
          goto LABEL_11;
LABEL_10:
        swift_beginAccess();
        *((_BYTE *)v29 + 16) = 1;
        goto LABEL_11;
      }
      v23(v18, v6);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v27);
      v29 = v38;
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v37);
    goto LABEL_10;
  }
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v25 = v45;
LABEL_11:
  v34 = (uint64_t)v46;
  v24(v46, v25, v6);
  return sub_236BCF10C(v34);
}

uint64_t sub_236BCF590()
{
  return sub_236BCEEC4();
}

uint64_t sub_236BCF5B0(uint64_t a1)
{
  return sub_236BCF220(a1);
}

uint64_t sub_236BCF5D0()
{
  return 16;
}

__n128 sub_236BCF5DC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_236BCF5E8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_236BCF030();
  *a1 = result & 1;
  return result;
}

uint64_t sub_236BCF614(char *a1)
{
  return sub_236BCF060(*a1);
}

uint64_t sub_236BCF638()
{
  return 16;
}

__n128 sub_236BCF644(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_236BCF654()
{
  uint64_t result;
  unint64_t v1;

  result = sub_236BCFCB0();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ValueWithChangeIndicator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ValueWithChangeIndicator);
}

uint64_t method lookup function for ValueWithChangeIndicator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ValueWithChangeIndicator.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ValueWithChangeIndicator.value.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of ValueWithChangeIndicator.value.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ValueWithChangeIndicator.value.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ValueWithChangeIndicator.didChange.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of WorkerProtocol.stop()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of WorkerProtocol.isStarted.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SummaryDecorator.addDecoratorData(_:operatingSystem:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static ProvidesNeededPreviousFields.getNeededPreviousFields(config:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_236BCF740()
{
  return MEMORY[0x24BDCB6C0]();
}

uint64_t sub_236BCF74C()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t sub_236BCF758()
{
  return MEMORY[0x24BDCB8E8]();
}

uint64_t sub_236BCF764()
{
  return MEMORY[0x24BDCB930]();
}

uint64_t sub_236BCF770()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t sub_236BCF77C()
{
  return MEMORY[0x24BDCBE68]();
}

uint64_t sub_236BCF788()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t sub_236BCF794()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_236BCF7A0()
{
  return MEMORY[0x24BDCD520]();
}

uint64_t sub_236BCF7AC()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t sub_236BCF7B8()
{
  return MEMORY[0x24BDCD860]();
}

uint64_t sub_236BCF7C4()
{
  return MEMORY[0x24BDCD8D0]();
}

uint64_t sub_236BCF7D0()
{
  return MEMORY[0x24BDCD928]();
}

uint64_t sub_236BCF7DC()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t sub_236BCF7E8()
{
  return MEMORY[0x24BDCD9F8]();
}

uint64_t sub_236BCF7F4()
{
  return MEMORY[0x24BDCDA70]();
}

uint64_t sub_236BCF800()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_236BCF80C()
{
  return MEMORY[0x24BDCDB78]();
}

uint64_t sub_236BCF818()
{
  return MEMORY[0x24BDCDC08]();
}

uint64_t sub_236BCF824()
{
  return MEMORY[0x24BDCDCA0]();
}

uint64_t sub_236BCF830()
{
  return MEMORY[0x24BDCDCA8]();
}

uint64_t sub_236BCF83C()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t sub_236BCF848()
{
  return MEMORY[0x24BDCE5D8]();
}

uint64_t sub_236BCF854()
{
  return MEMORY[0x24BDCE778]();
}

uint64_t sub_236BCF860()
{
  return MEMORY[0x24BDCE780]();
}

uint64_t sub_236BCF86C()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t sub_236BCF878()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_236BCF884()
{
  return MEMORY[0x24BE30BE0]();
}

uint64_t sub_236BCF890()
{
  return MEMORY[0x24BEE73C0]();
}

uint64_t sub_236BCF89C()
{
  return MEMORY[0x24BEE7408]();
}

uint64_t sub_236BCF8A8()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_236BCF8B4()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_236BCF8C0()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_236BCF8CC()
{
  return MEMORY[0x24BEE76B0]();
}

uint64_t sub_236BCF8D8()
{
  return MEMORY[0x24BEE5370]();
}

uint64_t sub_236BCF8E4()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t sub_236BCF8F0()
{
  return MEMORY[0x24BEE54C0]();
}

uint64_t sub_236BCF8FC()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_236BCF908()
{
  return MEMORY[0x24BEE54D0]();
}

uint64_t sub_236BCF914()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_236BCF920()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_236BCF92C()
{
  return MEMORY[0x24BDCF828]();
}

uint64_t sub_236BCF938()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t sub_236BCF944()
{
  return MEMORY[0x24BEE0300]();
}

uint64_t sub_236BCF950()
{
  return MEMORY[0x24BEE75B8]();
}

uint64_t sub_236BCF95C()
{
  return MEMORY[0x24BEE75F8]();
}

uint64_t sub_236BCF968()
{
  return MEMORY[0x24BEE7600]();
}

uint64_t sub_236BCF974()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_236BCF980()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_236BCF98C()
{
  return MEMORY[0x24BDCF8A0]();
}

uint64_t sub_236BCF998()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_236BCF9A4()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_236BCF9B0()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_236BCF9BC()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_236BCF9C8()
{
  return MEMORY[0x24BDCFA48]();
}

uint64_t sub_236BCF9D4()
{
  return MEMORY[0x24BDCFAC8]();
}

uint64_t sub_236BCF9E0()
{
  return MEMORY[0x24BDCFAF8]();
}

uint64_t sub_236BCF9EC()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_236BCF9F8()
{
  return MEMORY[0x24BEE0A08]();
}

uint64_t sub_236BCFA04()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t sub_236BCFA10()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_236BCFA1C()
{
  return MEMORY[0x24BEE0AD0]();
}

uint64_t sub_236BCFA28()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t sub_236BCFA34()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_236BCFA40()
{
  return MEMORY[0x24BEE0B80]();
}

uint64_t sub_236BCFA4C()
{
  return MEMORY[0x24BEE0BB0]();
}

uint64_t sub_236BCFA58()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_236BCFA64()
{
  return MEMORY[0x24BEE0BE8]();
}

uint64_t sub_236BCFA70()
{
  return MEMORY[0x24BEE0BF0]();
}

uint64_t sub_236BCFA7C()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_236BCFA88()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_236BCFA94()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_236BCFAA0()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t sub_236BCFAAC()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_236BCFAB8()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_236BCFAC4()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_236BCFAD0()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_236BCFADC()
{
  return MEMORY[0x24BEE0DE8]();
}

uint64_t sub_236BCFAE8()
{
  return MEMORY[0x24BEE0DF8]();
}

uint64_t sub_236BCFAF4()
{
  return MEMORY[0x24BEE0F30]();
}

uint64_t sub_236BCFB00()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_236BCFB0C()
{
  return MEMORY[0x24BEE1050]();
}

uint64_t sub_236BCFB18()
{
  return MEMORY[0x24BEE1058]();
}

uint64_t sub_236BCFB24()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_236BCFB30()
{
  return MEMORY[0x24BEE10D0]();
}

uint64_t sub_236BCFB3C()
{
  return MEMORY[0x24BEE10D8]();
}

uint64_t sub_236BCFB48()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_236BCFB54()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t sub_236BCFB60()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_236BCFB6C()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_236BCFB78()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t sub_236BCFB84()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_236BCFB90()
{
  return MEMORY[0x24BEE1288]();
}

uint64_t sub_236BCFB9C()
{
  return MEMORY[0x24BEE1308]();
}

uint64_t sub_236BCFBA8()
{
  return MEMORY[0x24BEE1370]();
}

uint64_t sub_236BCFBB4()
{
  return MEMORY[0x24BEE1598]();
}

uint64_t sub_236BCFBC0()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_236BCFBCC()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t sub_236BCFBD8()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_236BCFBE4()
{
  return MEMORY[0x24BEE18F8]();
}

uint64_t sub_236BCFBF0()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t sub_236BCFBFC()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t sub_236BCFC08()
{
  return MEMORY[0x24BEE7668]();
}

uint64_t sub_236BCFC14()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t sub_236BCFC20()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t sub_236BCFC2C()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_236BCFC38()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_236BCFC44()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t sub_236BCFC50()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t sub_236BCFC5C()
{
  return MEMORY[0x24BEE5780]();
}

uint64_t sub_236BCFC68()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t sub_236BCFC74()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t sub_236BCFC80()
{
  return MEMORY[0x24BDD0158]();
}

uint64_t sub_236BCFC8C()
{
  return MEMORY[0x24BEE5BB8]();
}

uint64_t sub_236BCFC98()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_236BCFCA4()
{
  return MEMORY[0x24BDD0258]();
}

uint64_t sub_236BCFCB0()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_236BCFCBC()
{
  return MEMORY[0x24BEE1E70]();
}

uint64_t sub_236BCFCC8()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_236BCFCD4()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_236BCFCE0()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t sub_236BCFCEC()
{
  return MEMORY[0x24BDD0548]();
}

uint64_t sub_236BCFCF8()
{
  return MEMORY[0x24BDD0638]();
}

uint64_t sub_236BCFD04()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_236BCFD10()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_236BCFD1C()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_236BCFD28()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_236BCFD34()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_236BCFD40()
{
  return MEMORY[0x24BEE24F0]();
}

uint64_t sub_236BCFD4C()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_236BCFD58()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_236BCFD64()
{
  return MEMORY[0x24BEE2610]();
}

uint64_t sub_236BCFD70()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_236BCFD7C()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_236BCFD88()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_236BCFD94()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_236BCFDA0()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_236BCFDAC()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_236BCFDB8()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_236BCFDC4()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_236BCFDD0()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_236BCFDDC()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_236BCFDE8()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_236BCFDF4()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_236BCFE00()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_236BCFE0C()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_236BCFE18()
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_236BCFE24()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_236BCFE30()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_236BCFE3C()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_236BCFE48()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_236BCFE54()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_236BCFE60()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_236BCFE6C()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_236BCFE78()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_236BCFE84()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_236BCFE90()
{
  return MEMORY[0x24BEE32E8]();
}

uint64_t sub_236BCFE9C()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_236BCFEA8()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_236BCFEB4()
{
  return MEMORY[0x24BEE3360]();
}

uint64_t sub_236BCFEC0()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_236BCFECC()
{
  return MEMORY[0x24BEE33A0]();
}

uint64_t sub_236BCFED8()
{
  return MEMORY[0x24BEE33C0]();
}

uint64_t sub_236BCFEE4()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_236BCFEF0()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_236BCFEFC()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_236BCFF08()
{
  return MEMORY[0x24BEE3438]();
}

uint64_t sub_236BCFF14()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_236BCFF20()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_236BCFF2C()
{
  return MEMORY[0x24BEE34B0]();
}

uint64_t sub_236BCFF38()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_236BCFF44()
{
  return MEMORY[0x24BEE34F0]();
}

uint64_t sub_236BCFF50()
{
  return MEMORY[0x24BEE3510]();
}

uint64_t sub_236BCFF5C()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_236BCFF68()
{
  return MEMORY[0x24BEE3550]();
}

uint64_t sub_236BCFF74()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_236BCFF80()
{
  return MEMORY[0x24BEE3910]();
}

uint64_t sub_236BCFF8C()
{
  return MEMORY[0x24BEE39E0]();
}

uint64_t sub_236BCFF98()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_236BCFFA4()
{
  return MEMORY[0x24BEE3D50]();
}

uint64_t sub_236BCFFB0()
{
  return MEMORY[0x24BEE3DD8]();
}

uint64_t sub_236BCFFBC()
{
  return MEMORY[0x24BEE3E18]();
}

uint64_t sub_236BCFFC8()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_236BCFFD4()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_236BCFFE0()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t sub_236BCFFEC()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_236BCFFF8()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_236BD0004()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_236BD0010()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_236BD001C()
{
  return MEMORY[0x24BEE42D8]();
}

uint64_t sub_236BD0028()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_236BD0034()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_236BD0040()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_236BD004C()
{
  return MEMORY[0x24BEE4308]();
}

uint64_t sub_236BD0058()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_236BD0064()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_236BD0070()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_236BD007C()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_236BD0088()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_236BD0094()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_236BD00A0()
{
  return MEMORY[0x24BEE4A98]();
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x24BDBC150](applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC178](key, applicationID, userName, hostName);
}

uint64_t CFPreferencesFlushCaches()
{
  return MEMORY[0x24BDBC180]();
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x24BDBC1A8](key, value, applicationID, userName, hostName);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x24BDBC920](allocator, flags, error, dictionary, timeout);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return MEMORY[0x24BDBC950](userNotification, responseFlags, timeout);
}

uint64_t MobileGestalt_copy_deviceClass_obj()
{
  return MEMORY[0x24BED84F8]();
}

uint64_t MobileGestalt_copy_deviceName_obj()
{
  return MEMORY[0x24BED8500]();
}

uint64_t MobileGestalt_get_current_device()
{
  return MEMORY[0x24BED8580]();
}

uint64_t MobileGestalt_get_deviceClassNumber()
{
  return MEMORY[0x24BED8588]();
}

uint64_t MobileGestalt_get_internalBuild()
{
  return MEMORY[0x24BED8610]();
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDE8AA8](key, error);
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return (SecKeyRef)MEMORY[0x24BDE8AC8](key);
}

CFDataRef SecKeyCreateDecryptedData(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef ciphertext, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDE8AE8](key, algorithm, ciphertext, error);
}

CFDataRef SecKeyCreateEncryptedData(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef plaintext, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDE8B00](key, algorithm, plaintext, error);
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x24BDE8B30](parameters, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x24BDE8B40](keyData, attributes, error);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x24BDAC7D8](a1);
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return MEMORY[0x24BEE4B48]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

uid_t geteuid(void)
{
  return MEMORY[0x24BDAE5F8]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x24BDAE958]();
}

int kill(pid_t a1, int a2)
{
  return MEMORY[0x24BDAE978](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x24BDAF138](*(_QWORD *)&token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x24BDAF170](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x24BEDCFD8](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_end_catch(void)
{
  MEMORY[0x24BEDD050]();
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x24BEDD088](name);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x24BDAF438]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

int posix_spawnattr_getflags(const posix_spawnattr_t *a1, __int16 *a2)
{
  return MEMORY[0x24BDAF648](a1, a2);
}

int posix_spawnattr_init(posix_spawnattr_t *a1)
{
  return MEMORY[0x24BDAF650](a1);
}

int posix_spawnattr_setflags(posix_spawnattr_t *a1, __int16 a2)
{
  return MEMORY[0x24BDAF660](a1, a2);
}

int posix_spawnattr_setsigdefault(posix_spawnattr_t *a1, const sigset_t *a2)
{
  return MEMORY[0x24BDAF670](a1, a2);
}

int posix_spawnattr_setsigmask(posix_spawnattr_t *a1, const sigset_t *a2)
{
  return MEMORY[0x24BDAF678](a1, a2);
}

int posix_spawnp(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return MEMORY[0x24BDAF680](a1, a2, a3, a4, __argv, __envp);
}

int sigemptyset(sigset_t *a1)
{
  return MEMORY[0x24BDAFDF0](a1);
}

int sigfillset(sigset_t *a1)
{
  return MEMORY[0x24BDAFDF8](a1);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x24BDAFF10](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x24BEE4BF0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x24BEE4C50]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x24BEE4CD0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x24BEE4DF0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x24BEE4E00]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x24BEE4F28]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x24BDB00F8](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x24BDB0100](a1, a2, a3, a4, a5);
}

