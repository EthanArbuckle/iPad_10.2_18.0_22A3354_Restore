_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t objectdestroyTm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();

  a1(*(_QWORD *)(v1 + 40));
  return swift_deallocObject();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

id HKTableFormatter.init(_:gregorianCalendar:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v17;

  v4 = type metadata accessor for SleepingSampleAggregateDaySummary();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v9 = (void *)sub_23DC2A340();
  v10 = objc_msgSend(v8, sel_initWithColumnTitles_, v9);

  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v13 = *(_QWORD *)(v5 + 72);
    v14 = v10;
    do
    {
      sub_23DBB2B6C(v12, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregateDaySummary);
      sub_23DBB14B8((uint64_t)v7);
      sub_23DBB2BB0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregateDaySummary);
      v12 += v13;
      --v11;
    }
    while (v11);

  }
  v15 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a2, v15);
  swift_bridgeObjectRelease();
  return v10;
}

void sub_23DBB14B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  void *v61;
  id v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  _QWORD *v69;
  uint64_t v70;
  void *object;
  uint64_t countAndFlagsBits;
  void *v73;
  id v74;
  Swift::String v75;
  char *v76;
  _QWORD *v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  id v96;
  id v97;
  id v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  void *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  id v140;
  char *v141;
  char *v142;
  int *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t (*v147)(uint64_t, uint64_t, uint64_t);
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;

  v124 = sub_23DC2A940();
  v123 = *(_QWORD *)(v124 - 8);
  MEMORY[0x24BDAC7A8](v124);
  v122 = (uint64_t)&v115 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2914(0, &qword_256CE9500, &qword_256CE9508, 0x24BDD1950, MEMORY[0x24BDCB508]);
  v121 = v3;
  v120 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v119 = (uint64_t)&v115 - v4;
  sub_23DBB2914(0, &qword_256CE9510, &qword_256CE9508, 0x24BDD1950, MEMORY[0x24BDCB588]);
  v118 = v5;
  v117 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v116 = (char *)&v115 - v6;
  v135 = sub_23DC29D88();
  v144 = *(_QWORD *)(v135 - 8);
  MEMORY[0x24BDAC7A8](v135);
  v137 = (char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2A64(0, &qword_256CE9518, (uint64_t (*)(void))sub_23DBB2974, MEMORY[0x24BEE13C8], MEMORY[0x24BDCD4A8]);
  v133 = v8;
  v136 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v141 = (char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v131 = (char *)&v115 - v11;
  sub_23DBB29B8();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v139 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v138 = (char *)&v115 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v134 = (uint64_t)&v115 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v132 = (uint64_t)&v115 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v130 = (char *)&v115 - v21;
  v22 = sub_23DC29D64();
  v146 = *(_QWORD *)(v22 - 8);
  v147 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v22;
  MEMORY[0x24BDAC7A8](v22);
  v145 = (char *)&v115 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v24);
  v142 = (char *)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2A64(0, (unint64_t *)&qword_256CE9528, (uint64_t (*)(void))sub_23DBB2AC0, MEMORY[0x24BEE1768], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDCC908]);
  v129 = v26;
  v143 = *(int **)(v26 - 8);
  v27 = MEMORY[0x24BDAC7A8](v26);
  v127 = (char *)&v115 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v128 = (char *)&v115 - v29;
  v148 = (_QWORD *)sub_23DC29DD0();
  v126 = *(v148 - 1);
  MEMORY[0x24BDAC7A8](v148);
  v31 = (char *)&v115 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_23DC29E48();
  v32 = *(_QWORD *)(v125 - 8);
  MEMORY[0x24BDAC7A8](v125);
  v34 = (char *)&v115 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_23DC29DF4();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)&v115 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2D74(0, (unint64_t *)&qword_256CE9D80, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
  v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_23DC2B210;
  sub_23DC29DC4();
  sub_23DC2A148();
  sub_23DC29DB8();
  v40 = sub_23DC29E3C();
  v42 = v41;
  (*(void (**)(char *, _QWORD *))(v126 + 8))(v31, v148);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v125);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v35);
  *(_QWORD *)(v39 + 32) = v40;
  *(_QWORD *)(v39 + 40) = v42;
  v43 = (uint64_t)v130;
  v148 = (_QWORD *)v39;
  v44 = a1;
  v150 = sub_23DC2A124();
  sub_23DC29ED8();
  sub_23DBB2AC0();
  v45 = v127;
  sub_23DC29CD4();
  v46 = v145;
  sub_23DC29D58();
  v47 = v128;
  v48 = v129;
  MEMORY[0x24263D348](v46, v129);
  (*(void (**)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(v146 + 8))(v46, v147);
  v49 = (void (*)(char *, uint64_t))*((_QWORD *)v143 + 1);
  v49(v45, v48);
  sub_23DBB2B04();
  sub_23DC2A514();
  v49(v47, v48);
  v50 = v44;
  v51 = (int *)type metadata accessor for SleepingSampleAggregateDaySummary();
  v52 = v44 + v51[5];
  v53 = type metadata accessor for SleepingSampleAggregate();
  sub_23DBB2B6C(v52 + *(int *)(v53 + 24), v43, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBB2914(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8, 0x24BDD3E50, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDD2048]);
  v55 = v54;
  v56 = *(_QWORD *)(v54 - 8);
  v147 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
  v57 = v147(v43, 1, v54);
  v143 = v51;
  v145 = (char *)v53;
  v146 = v56;
  if (v57 == 1)
  {
    sub_23DBB2BB0(v43, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    v58 = 0xA600000000000000;
    v59 = 0x9380E29380E2;
    v60 = v131;
  }
  else
  {
    v61 = (void *)sub_23DC2A040();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v43, v55);
    v62 = objc_msgSend((id)objc_opt_self(), sel__countPerMinuteUnit);
    objc_msgSend(v61, (SEL)0x1F3F06C8ALL, v62);
    v149 = v63;
    sub_23DC29ED8();
    sub_23DBB2974();
    v64 = v141;
    sub_23DC29D1C();
    v65 = v137;
    sub_23DC29D70();
    v66 = v131;
    v67 = v133;
    MEMORY[0x24263D390](v65, v133);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v65, v135);
    v68 = *(void (**)(char *, uint64_t))(v136 + 8);
    v68(v64, v67);
    sub_23DBB2CF0();
    sub_23DC2A160();
    v68(v66, v67);
    v51 = v143;

    v53 = (uint64_t)v145;
    v59 = v150;
    v58 = v151;
    v60 = v66;
  }
  v69 = v148;
  v148[8] = v59;
  v69[9] = v58;
  v70 = v132;
  sub_23DBB2B6C(v50 + v51[6] + *(int *)(v53 + 24), v132, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if (v147(v70, 1, v55) == 1)
  {
    sub_23DBB2BB0(v70, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    object = (void *)0xA600000000000000;
    countAndFlagsBits = 0x9380E29380E2;
  }
  else
  {
    v73 = (void *)sub_23DC2A040();
    (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v70, v55);
    LOBYTE(v150) = 2;
    v74 = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
    v75 = HKQuantity.formattedValue(for:unit:)((HealthBalance::SleepingSampleDataType)&v150, (HKUnit)v74);
    countAndFlagsBits = v75._countAndFlagsBits;
    object = v75._object;

    v53 = (uint64_t)v145;
  }
  v76 = v141;
  v77 = v148;
  v148[10] = countAndFlagsBits;
  v77[11] = object;
  v78 = v134;
  sub_23DBB2B6C(v50 + v51[7] + *(int *)(v53 + 24), v134, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  v79 = v147(v78, 1, v55);
  v80 = v144;
  if (v79 == 1)
  {
    sub_23DBB2BB0(v78, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    v81 = 0xA600000000000000;
    v82 = 0x9380E29380E2;
  }
  else
  {
    v83 = (void *)sub_23DC2A040();
    (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v78, v55);
    v141 = (char *)objc_msgSend((id)objc_opt_self(), sel__countPerMinuteUnit);
    objc_msgSend(v83, sel_doubleValueForUnit_, v141);
    v149 = v84;
    sub_23DC29ED8();
    sub_23DBB2974();
    sub_23DC29D1C();
    v150 = 1;
    sub_23DBB2C54();
    sub_23DBB2CB0(&qword_256CE9558, (uint64_t (*)(uint64_t))sub_23DBB2C54, MEMORY[0x24BEE30C8]);
    v85 = v76;
    v86 = v137;
    sub_23DC29D7C();
    v87 = v133;
    MEMORY[0x24263D390](v86, v133);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v86, v135);
    v88 = *(void (**)(char *, uint64_t))(v136 + 8);
    v88(v85, v87);
    sub_23DBB2CF0();
    sub_23DC2A160();
    v88(v60, v87);
    v51 = v143;

    v53 = (uint64_t)v145;
    v82 = v150;
    v81 = v151;
  }
  v89 = (uint64_t)v138;
  v90 = v148;
  v148[12] = v82;
  v90[13] = v81;
  sub_23DBB2B6C(v50 + v51[8] + *(int *)(v53 + 24), v89, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if (v147(v89, 1, v55) == 1)
  {
    sub_23DBB2BB0(v89, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    v91 = 0xA600000000000000;
    v92 = 0x9380E29380E2;
    v93 = (uint64_t)v139;
    v94 = v146;
  }
  else
  {
    v95 = (void *)sub_23DC2A040();
    v94 = v146;
    (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v89, v55);
    v96 = objc_msgSend((id)objc_opt_self(), sel__changeInDegreeFahrenheitUnit);
    v97 = v95;
    v98 = v96;
    v99 = v116;
    Measurement<>.init(wristTemperatureForFormatting:unit:)(v97, v98);
    v100 = v119;
    static FormatStyle<>.wristTemperature(unit:)((uint64_t)v98, v119);
    sub_23DBB2BEC();
    v101 = v118;
    v102 = v121;
    sub_23DC29BB4();
    v103 = v100;
    v51 = v143;
    v104 = v102;
    v53 = (uint64_t)v145;
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v103, v104);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v99, v101);

    v92 = v150;
    v91 = v151;
    v93 = (uint64_t)v139;
  }
  v105 = v148;
  v148[14] = v92;
  v105[15] = v91;
  sub_23DBB2B6C(v50 + v51[9] + *(int *)(v53 + 24), v93, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if (v147(v93, 1, v55) == 1)
  {
    sub_23DBB2BB0(v93, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    v106 = 0xA600000000000000;
    v107 = 0x9380E29380E2;
  }
  else
  {
    v108 = (void *)sub_23DC2A040();
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v55);
    v109 = objc_msgSend((id)objc_opt_self(), sel_secondUnit);
    v110 = v108;
    sub_23DC29098(v110);

    v111 = v122;
    static FormatStyle<>.sleepDuration.getter(v122);
    sub_23DBB2CB0(&qword_256CE9540, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0AF0], MEMORY[0x24BDD0AE8]);
    v112 = v124;
    sub_23DC2A94C();
    (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v111, v112);

    v107 = v150;
    v106 = v151;
  }
  v113 = v148;
  v148[16] = v107;
  v113[17] = v106;
  v114 = (void *)sub_23DC2A340();
  swift_bridgeObjectRelease();
  objc_msgSend(v140, sel_appendRow_, v114);

}

void type metadata accessor for HKWorkoutActivityType(uint64_t a1)
{
  sub_23DBB2D74(a1, &qword_256CE94A8, (uint64_t)&unk_250E88C08, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKFeatureIdentifier(uint64_t a1)
{
  sub_23DBB2D74(a1, qword_25431F0B0, (uint64_t)&unk_250E88C28, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(uint64_t a1)
{
  sub_23DBB2D74(a1, &qword_256CE94B0, (uint64_t)&unk_250E88C50, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
  sub_23DBB2D74(a1, &qword_25431F2A8, (uint64_t)&unk_250E88C78, MEMORY[0x24BEE4D40]);
}

uint64_t sub_23DBB22B8()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBB22FC()
{
  return sub_23DC2A88C();
}

uint64_t sub_23DBB2324()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

BOOL sub_23DBB2364(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_23DBB2378@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_23DBB2388(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_23DBB2394(uint64_t a1, uint64_t a2)
{
  return sub_23DBB2778(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t sub_23DBB23B0(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_23DC2A22C();
  *a2 = 0;
  return result;
}

uint64_t sub_23DBB2424(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_23DC2A238();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_23DBB24A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_23DC2A244();
  v2 = sub_23DC2A220();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_23DBB24E0(uint64_t a1, uint64_t a2)
{
  return sub_23DBB2778(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t sub_23DBB24F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_23DC2A244();
  v2 = v1;
  if (v0 == sub_23DC2A244() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_23DBB2580()
{
  sub_23DBB2CB0(&qword_256CE94F0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DC2B380);
  sub_23DBB2CB0(&qword_256CE94F8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DC2B328);
  return sub_23DC2A6F4();
}

uint64_t sub_23DBB2604()
{
  return sub_23DBB2CB0(&qword_256CE94B8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DC2B2F0);
}

uint64_t sub_23DBB2630()
{
  return sub_23DBB2CB0(&qword_256CE94C0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DC2B2C8);
}

uint64_t sub_23DBB265C()
{
  return sub_23DBB2CB0(&qword_256CE94C8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t)&unk_23DC2B358);
}

uint64_t sub_23DBB2688@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_23DC2A220();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_23DBB26CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_23DC2A244();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23DBB26F4()
{
  sub_23DBB2CB0(&qword_25431F098, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DC2B5C0);
  sub_23DBB2CB0(&qword_256CE94E8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DC2B468);
  return sub_23DC2A6F4();
}

uint64_t sub_23DBB2778(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_23DC2A244();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_23DBB27B4()
{
  sub_23DC2A244();
  sub_23DC2A28C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DBB27F4()
{
  uint64_t v0;

  sub_23DC2A244();
  sub_23DC2A880();
  sub_23DC2A28C();
  v0 = sub_23DC2A8B0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_23DBB2864()
{
  return sub_23DBB2CB0(&qword_256CE94D0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DC2B430);
}

uint64_t sub_23DBB2890()
{
  return sub_23DBB2CB0(&qword_256CE94D8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DC2B408);
}

uint64_t sub_23DBB28BC()
{
  return sub_23DBB2CB0(&qword_256CE94E0, (uint64_t (*)(uint64_t))type metadata accessor for HKWorkoutActivityType, (uint64_t)&unk_23DC2B558);
}

uint64_t sub_23DBB28E8()
{
  return sub_23DBB2CB0(&qword_25431F0A0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DC2B498);
}

void sub_23DBB2914(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_23DBB2A2C(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t sub_23DBB2974()
{
  unint64_t result;

  result = qword_256CE9520;
  if (!qword_256CE9520)
  {
    result = MEMORY[0x24263E440](MEMORY[0x24BEE13D0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&qword_256CE9520);
  }
  return result;
}

void sub_23DBB29B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25431FB48)
  {
    sub_23DBB2914(255, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8, 0x24BDD3E50, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDD2048]);
    v0 = sub_23DC2A4C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25431FB48);
  }
}

uint64_t sub_23DBB2A2C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_23DBB2A64(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t sub_23DBB2AC0()
{
  unint64_t result;

  result = qword_256CE9530;
  if (!qword_256CE9530)
  {
    result = MEMORY[0x24263E440](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_256CE9530);
  }
  return result;
}

unint64_t sub_23DBB2B04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CE9538;
  if (!qword_256CE9538)
  {
    sub_23DBB2A64(255, (unint64_t *)&qword_256CE9528, (uint64_t (*)(void))sub_23DBB2AC0, MEMORY[0x24BEE1768], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDCC908]);
    result = MEMORY[0x24263E440](MEMORY[0x24BDCC928], v1);
    atomic_store(result, (unint64_t *)&qword_256CE9538);
  }
  return result;
}

uint64_t sub_23DBB2B6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23DBB2BB0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_23DBB2BEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CE9548;
  if (!qword_256CE9548)
  {
    sub_23DBB2914(255, &qword_256CE9500, &qword_256CE9508, 0x24BDD1950, MEMORY[0x24BDCB508]);
    result = MEMORY[0x24263E440](MEMORY[0x24BDCB518], v1);
    atomic_store(result, (unint64_t *)&qword_256CE9548);
  }
  return result;
}

void sub_23DBB2C54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE9550)
  {
    v0 = sub_23DC2A6E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE9550);
  }
}

uint64_t sub_23DBB2CB0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x24263E440](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DBB2CF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CE9560;
  if (!qword_256CE9560)
  {
    sub_23DBB2A64(255, &qword_256CE9518, (uint64_t (*)(void))sub_23DBB2974, MEMORY[0x24BEE13C8], MEMORY[0x24BDCD4A8]);
    result = MEMORY[0x24263E440](MEMORY[0x24BDCD4C0], v1);
    atomic_store(result, (unint64_t *)&qword_256CE9560);
  }
  return result;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_23DBB2D74(a1, &qword_25431EDF8, (uint64_t)&unk_250E88C98, MEMORY[0x24BEE4D40]);
}

void sub_23DBB2D74(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

HealthBalance::BalanceURLBuilder::Route_optional __swiftcall BalanceURLBuilder.Route.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthBalance::BalanceURLBuilder::Route_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23DC2A700();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t BalanceURLBuilder.Route.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23DBB2E4C + 4 * byte_23DC2B620[*v0]))(0xD000000000000011, 0x800000023DC31820);
}

uint64_t sub_23DBB2E4C()
{
  return 0x5265636E616C6162;
}

uint64_t sub_23DBB2E6C()
{
  return 0x7961446E65766573;
}

uint64_t sub_23DBB2E90()
{
  return 0x654D796144656E6FLL;
}

void sub_23DBB2EB4(char *a1)
{
  sub_23DBC5B20(*a1);
}

void sub_23DBB2EC0()
{
  char *v0;

  sub_23DBF3B20(*v0);
}

void sub_23DBB2EC8()
{
  __asm { BR              X10 }
}

uint64_t sub_23DBB2F08()
{
  sub_23DC2A28C();
  return swift_bridgeObjectRelease();
}

void sub_23DBB2F84(uint64_t a1)
{
  char *v1;

  sub_23DBF4344(a1, *v1);
}

HealthBalance::BalanceURLBuilder::Route_optional sub_23DBB2F8C(Swift::String *a1)
{
  return BalanceURLBuilder.Route.init(rawValue:)(*a1);
}

uint64_t sub_23DBB2F98()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23DBB2FCC + 4 * byte_23DC2B628[*v0]))();
}

void sub_23DBB2FCC(_QWORD *a1@<X8>)
{
  *a1 = 0x5265636E616C6162;
  a1[1] = 0xEB000000006D6F6FLL;
}

void sub_23DBB2FF0(_QWORD *a1@<X8>)
{
  *a1 = 0x7961446E65766573;
  a1[1] = 0xEF7363697274654DLL;
}

void sub_23DBB3018(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "oneDayMetrics");
  *(_WORD *)(a1 + 14) = -4864;
}

HealthBalance::BalanceURLBuilder::Source_optional __swiftcall BalanceURLBuilder.Source.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthBalance::BalanceURLBuilder::Source_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23DC2A700();
  result.value = swift_bridgeObjectRelease();
  v5 = 10;
  if (v3 < 0xA)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t BalanceURLBuilder.Source.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DBB30C8 + 4 * byte_23DC2B62C[*v0]))(0x7974697669746361, 0xE800000000000000);
}

uint64_t sub_23DBB30C8()
{
  return 0x7373656E746966;
}

uint64_t sub_23DBB30E0()
{
  return 0x704168746C616568;
}

uint64_t sub_23DBB314C()
{
  return 0x7070416863746177;
}

unint64_t sub_23DBB3160()
{
  return 0xD000000000000010;
}

void sub_23DBB317C()
{
  JUMPOUT(0x23DBB3194);
}

uint64_t sub_23DBB31A0()
{
  return 0x746567646977;
}

void sub_23DBB31B4(char *a1)
{
  sub_23DBC5860(*a1);
}

uint64_t sub_23DBB31C0()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_23DC2A880();
  sub_23DBF4024((uint64_t)v3, v1);
  return sub_23DC2A8B0();
}

void sub_23DBB3204(uint64_t a1)
{
  char *v1;

  sub_23DBF4024(a1, *v1);
}

uint64_t sub_23DBB320C()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_23DC2A880();
  sub_23DBF4024((uint64_t)v3, v1);
  return sub_23DC2A8B0();
}

HealthBalance::BalanceURLBuilder::Source_optional sub_23DBB324C(Swift::String *a1)
{
  return BalanceURLBuilder.Source.init(rawValue:)(*a1);
}

uint64_t sub_23DBB3258@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = BalanceURLBuilder.Source.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t BalanceURLBuilder.RoutingKey.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DBB32A8 + 4 * byte_23DC2B636[*v0]))(0x6574756F72, 0xE500000000000000);
}

uint64_t sub_23DBB32A8()
{
  return 0x656372756F73;
}

uint64_t sub_23DBB32BC()
{
  return 0x6144746567726174;
}

unint64_t sub_23DBB32D8()
{
  return 0xD000000000000015;
}

unint64_t sub_23DBB32F8()
{
  return 0xD000000000000013;
}

uint64_t sub_23DBB3314()
{
  return 0x6163696669746F6ELL;
}

HealthBalance::BalanceURLBuilder::RoutingKey_optional __swiftcall BalanceURLBuilder.RoutingKey.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthBalance::BalanceURLBuilder::RoutingKey_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23DC2A700();
  result.value = swift_bridgeObjectRelease();
  v5 = 6;
  if (v3 < 6)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_23DBB3390(char *a1)
{
  sub_23DBC5CB8(*a1);
}

void sub_23DBB339C()
{
  char *v0;

  sub_23DBF3C04(*v0);
}

void sub_23DBB33A4(uint64_t a1)
{
  char *v1;

  sub_23DBF4164(a1, *v1);
}

void sub_23DBB33AC(uint64_t a1)
{
  char *v1;

  sub_23DBF4244(a1, *v1);
}

HealthBalance::BalanceURLBuilder::RoutingKey_optional sub_23DBB33B4(Swift::String *a1)
{
  return BalanceURLBuilder.RoutingKey.init(rawValue:)(*a1);
}

uint64_t sub_23DBB33C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = BalanceURLBuilder.RoutingKey.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

HealthBalance::BalanceURLBuilder __swiftcall BalanceURLBuilder.init()()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  id v2;
  void *v3;
  unsigned __int8 v4;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_isAppleWatch);

    *v1 = v4;
  }
  else
  {
    __break(1u);
  }
  return (HealthBalance::BalanceURLBuilder)v2;
}

uint64_t BalanceURLBuilder.url(route:source:)@<X0>(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v20 = 0xD000000000000011;
  sub_23DBB89B8(0, &qword_256CE9568, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v20 - v8;
  v10 = sub_23DC29CB0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  v21 = *a2;
  v15 = *v3;
  sub_23DC29CA4();
  if ((v15 & 1) == 0)
    sub_23DC2A244();
  sub_23DC29C98();
  sub_23DC29C5C();
  v22 = 47;
  v23 = 0xE100000000000000;
  if ((_DWORD)v14 != 4)
    __asm { BR              X9 }
  v16 = v21;
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC29C74();
  LOBYTE(v22) = v16;
  sub_23DBB3984((unsigned __int8 *)&v22);
  sub_23DC29C50();
  v17 = sub_23DC29D94();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, v17) == 1)
  {
    sub_23DBB73A8((uint64_t)v9, &qword_256CE9568, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    v22 = 0;
    v23 = 0xE000000000000000;
    sub_23DC2A5A4();
    swift_bridgeObjectRelease();
    v22 = 0xD00000000000001FLL;
    v23 = 0x800000023DC31D70;
    v20 = 7104878;
    sub_23DC2A2A4();
    swift_bridgeObjectRelease();
    sub_23DC2A2A4();
    __asm { BR              X9 }
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(a3, v9, v17);
}

void sub_23DBB37FC()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = 0x5265636E616C6162;
  JUMPOUT(0x23DBB3760);
}

void sub_23DBB3820()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = 0x7961446E65766573;
  JUMPOUT(0x23DBB3760);
}

void sub_23DBB3848()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = 0x654D796144656E6FLL;
  JUMPOUT(0x23DBB3760);
}

void sub_23DBB3870()
{
  uint64_t v0;

  sub_23DC2A2A4(0x704168746C616568, 0xE900000000000070);
  swift_bridgeObjectRelease(0xE900000000000070);
  sub_23DC2A694("Fatal error", 11, 2, *(_QWORD *)(v0 - 96), *(_QWORD *)(v0 - 88), "HealthBalance/BalanceURLBuilder.swift", 37, 2, 96, 0);
  __break(1u);
}

void sub_23DBB38D8()
{
  uint64_t v0;
  uint64_t v1;

  sub_23DC2A2A4(0x7070416863746177, v0);
  swift_bridgeObjectRelease(v0);
  sub_23DC2A694("Fatal error", 11, 2, *(_QWORD *)(v1 - 96), *(_QWORD *)(v1 - 88), "HealthBalance/BalanceURLBuilder.swift", 37, 2, 96, 0);
  __break(1u);
}

void sub_23DBB38EC()
{
  JUMPOUT(0x23DBB3934);
}

void sub_23DBB3904()
{
  JUMPOUT(0x23DBB3918);
}

void sub_23DBB3924()
{
  JUMPOUT(0x23DBB3934);
}

void sub_23DBB3984(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v3 = sub_23DC29C20();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v28 = (char *)v26 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v30 = (char *)v26 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v26 - v12;
  v27 = *a1;
  v14 = sub_23DC29C2C();
  if (v14)
  {
    v15 = v14;
    v31 = *(_QWORD *)(v14 + 16);
    v32 = MEMORY[0x24BEE4AF8];
    if (v31)
    {
      v26[0] = v7;
      v26[1] = v1;
      v16 = 0;
      v29 = v3;
      do
      {
        if (v16 >= *(_QWORD *)(v15 + 16))
        {
          __break(1u);
          JUMPOUT(0x23DBB3DACLL);
        }
        v17 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
        v18 = *(_QWORD *)(v4 + 72);
        (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v13, v15 + v17 + v18 * v16, v3);
        if (sub_23DC29C08() == 0x656372756F73 && v19 == 0xE600000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v20 = sub_23DC2A7FC();
          swift_bridgeObjectRelease();
          if ((v20 & 1) == 0)
          {
            v21 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
            v21(v30, v13, v3);
            v22 = v32;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_23DBCC958(0, *(_QWORD *)(v22 + 16) + 1, 1);
              v22 = v32;
            }
            v24 = *(_QWORD *)(v22 + 16);
            v23 = *(_QWORD *)(v22 + 24);
            if (v24 >= v23 >> 1)
            {
              sub_23DBCC958(v23 > 1, v24 + 1, 1);
              v22 = v32;
            }
            *(_QWORD *)(v22 + 16) = v24 + 1;
            v25 = v22 + v17 + v24 * v18;
            v3 = v29;
            v21((char *)v25, v30, v29);
            v32 = v22;
            goto LABEL_6;
          }
        }
        (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
LABEL_6:
        ++v16;
      }
      while (v31 != v16);
    }
    swift_bridgeObjectRelease();
  }
  __asm { BR              X9 }
}

uint64_t BalanceURLBuilder.queryString(for:)(uint64_t *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v2 = v1;
  sub_23DBB89B8(0, (unint64_t *)&qword_256CE9570, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v21 - v5;
  v7 = sub_23DC29CB0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v2) = *v2;
  sub_23DC29CA4();
  if ((v2 & 1) == 0)
    sub_23DC2A244();
  sub_23DC29C98();
  sub_23DC29C5C();
  v11 = *a1;
  v12 = a1[1];
  swift_bridgeObjectRetain();
  sub_23DBB4034(v11, v12);
  v13 = type metadata accessor for SleepingSampleChangeNotification();
  v14 = (char *)a1 + *(int *)(v13 + 20);
  v15 = sub_23DC2A154();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v6, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v6, 0, 1, v15);
  sub_23DBB43D4((uint64_t)v6);
  v17 = (char *)a1 + *(int *)(v13 + 24);
  v18 = *(_QWORD *)v17;
  if (v17[8] == 1)
  {
    sub_23DBB4A08(v18 != 0);
  }
  else
  {
    sub_23DBB4A08(0);
    v21 = v18;
    v22 = 0;
    sub_23DBB4DC0(&v21);
  }
  v19 = sub_23DC29C80();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v19;
}

uint64_t sub_23DBB4034(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;

  v33 = a1;
  v5 = 0xEE0044496E6F6974;
  v6 = sub_23DC29C20();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v35 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v34 = (char *)&v31 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v38 = (char *)&v31 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v31 - v14;
  v36 = v2;
  v16 = sub_23DC29C2C();
  v17 = MEMORY[0x24BEE4AF8];
  if (v16)
  {
    v18 = v16;
    v39 = *(_QWORD *)(v16 + 16);
    v40 = MEMORY[0x24BEE4AF8];
    if (v39)
    {
      v32 = a2;
      v19 = 0;
      v37 = v6;
      while (1)
      {
        if (v19 >= *(_QWORD *)(v18 + 16))
        {
          __break(1u);
LABEL_25:
          v17 = sub_23DBDEBA8(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
LABEL_20:
          v29 = *(_QWORD *)(v17 + 16);
          v28 = *(_QWORD *)(v17 + 24);
          if (v29 >= v28 >> 1)
            v17 = sub_23DBDEBA8(v28 > 1, v29 + 1, 1, v17);
          *(_QWORD *)(v17 + 16) = v29 + 1;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(v17+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v29, v5, v6);
          (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v6);
          return sub_23DC29C38();
        }
        v20 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
        v21 = *(_QWORD *)(v7 + 72);
        (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v15, v18 + v20 + v21 * v19, v6);
        v22 = sub_23DC29C08();
        v17 = v23;
        if (v22 == 0x6163696669746F6ELL && v23 == 0xEE0044496E6F6974)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v3 = sub_23DC2A7FC();
          swift_bridgeObjectRelease();
          if ((v3 & 1) == 0)
          {
            v24 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
            v24(v38, v15, v6);
            v17 = v40;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_23DBCC958(0, *(_QWORD *)(v17 + 16) + 1, 1);
              v17 = v40;
            }
            v26 = *(_QWORD *)(v17 + 16);
            v25 = *(_QWORD *)(v17 + 24);
            v3 = v26 + 1;
            if (v26 >= v25 >> 1)
            {
              sub_23DBCC958(v25 > 1, v26 + 1, 1);
              v17 = v40;
            }
            *(_QWORD *)(v17 + 16) = v3;
            v27 = v17 + v20 + v26 * v21;
            v6 = v37;
            v24((char *)v27, v38, v37);
            v40 = v17;
            v5 = 0xEE0044496E6F6974;
            goto LABEL_6;
          }
        }
        (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
LABEL_6:
        if (v39 == ++v19)
        {
          v17 = v40;
          a2 = v32;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  v3 = (uint64_t)v34;
  v5 = (unint64_t)v35;
  if (a2)
  {
    sub_23DC29BFC();
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v3, v6);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_25;
    goto LABEL_20;
  }
  return sub_23DC29C38();
}

uint64_t sub_23DBB43D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;

  v3 = sub_23DC29D64();
  v57 = *(_QWORD *)(v3 - 8);
  v58 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v55 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v5);
  v51 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB8ACC();
  v56 = v7;
  v53 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v52 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v54 = (char *)&v48 - v10;
  sub_23DBB89B8(0, (unint64_t *)&qword_256CE9570, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v11);
  v62 = (uint64_t)&v48 - v12;
  v13 = sub_23DC2A154();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v64 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_23DC29C20();
  v16 = *(_QWORD *)(v66 - 8);
  v17 = MEMORY[0x24BDAC7A8](v66);
  v59 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v63 = (char *)&v48 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v67 = (char *)&v48 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v48 - v23;
  v25 = sub_23DC29C2C();
  v26 = MEMORY[0x24BEE4AF8];
  if (v25)
  {
    v27 = (char *)v25;
    v69 = MEMORY[0x24BEE4AF8];
    v28 = *(_QWORD *)(v25 + 16);
    if (v28)
    {
      v49 = v14;
      v50 = v13;
      v60 = v1;
      v61 = a1;
      v14 = 0;
      v13 = v66;
      v65 = v28;
      while (1)
      {
        if (v14 >= *((_QWORD *)v27 + 2))
        {
          __break(1u);
LABEL_26:
          v26 = sub_23DBDEBA8(0, *(_QWORD *)(v26 + 16) + 1, 1, v26);
LABEL_21:
          v45 = *(_QWORD *)(v26 + 16);
          v44 = *(_QWORD *)(v26 + 24);
          a1 = v61;
          if (v45 >= v44 >> 1)
            v26 = sub_23DBDEBA8(v44 > 1, v45 + 1, 1, v26);
          *(_QWORD *)(v26 + 16) = v45 + 1;
          v46 = v66;
          (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v26+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v45, v27, v66);
          (*(void (**)(char *, uint64_t))(v16 + 8))(v63, v46);
          (*(void (**)(char *, uint64_t))(v14 + 8))(v64, v13);
          goto LABEL_24;
        }
        v29 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
        v30 = *(_QWORD *)(v16 + 72);
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v24, &v27[v29 + v30 * v14], v13);
        if (sub_23DC29C08() == 0x6144746567726174 && v31 == 0xE900000000000079)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v26 = sub_23DC2A7FC();
          swift_bridgeObjectRelease();
          if ((v26 & 1) == 0)
          {
            v32 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
            v32(v67, v24, v13);
            v33 = v69;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_23DBCC958(0, *(_QWORD *)(v33 + 16) + 1, 1);
              v33 = v69;
            }
            v35 = *(_QWORD *)(v33 + 16);
            v34 = *(_QWORD *)(v33 + 24);
            v26 = v35 + 1;
            if (v35 >= v34 >> 1)
            {
              sub_23DBCC958(v34 > 1, v35 + 1, 1);
              v33 = v69;
            }
            *(_QWORD *)(v33 + 16) = v26;
            v36 = v33 + v29 + v35 * v30;
            v13 = v66;
            v32((char *)v36, v67, v66);
            v69 = v33;
            v28 = v65;
            goto LABEL_6;
          }
        }
        (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v13);
LABEL_6:
        if (v28 == ++v14)
        {
          v26 = v69;
          v1 = v60;
          a1 = v61;
          v13 = v50;
          v14 = v49;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  v37 = v62;
  sub_23DBB8B24(a1, v62, (unint64_t *)&qword_256CE9570, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v37, 1, v13) != 1)
  {
    v60 = v1;
    v61 = a1;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v64, v37, v13);
    v68 = sub_23DC2A124();
    sub_23DC29ED8();
    sub_23DBB2AC0();
    v38 = v52;
    sub_23DC29CD4();
    v39 = v55;
    sub_23DC29D58();
    v40 = v54;
    v41 = v56;
    MEMORY[0x24263D348](v39, v56);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v39, v58);
    v42 = *(void (**)(char *, uint64_t))(v53 + 8);
    v42(v38, v41);
    sub_23DBB2B04();
    sub_23DC2A514();
    v42(v40, v41);
    v43 = v63;
    sub_23DC29BFC();
    swift_bridgeObjectRelease();
    v27 = v59;
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v59, v43, v66);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_26;
    goto LABEL_21;
  }
  sub_23DBB73A8(v37, (unint64_t *)&qword_256CE9570, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488]);
LABEL_24:
  sub_23DC29C38();
  return sub_23DBB73A8(a1, (unint64_t *)&qword_256CE9570, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488]);
}

uint64_t sub_23DBB4A08(int a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void (*v21)(char *, char *, unint64_t);
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  const char *v38;
  unint64_t v39;

  v32 = a1;
  v35 = sub_23DC29C20();
  v3 = *(_QWORD *)(v35 - 8);
  v4 = MEMORY[0x24BDAC7A8](v35);
  v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v33 = (char *)v31 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v36 = (char *)v31 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v31 - v11;
  v13 = sub_23DC29C2C();
  v14 = MEMORY[0x24BEE4AF8];
  if (v13)
  {
    v15 = v13;
    v39 = MEMORY[0x24BEE4AF8];
    v16 = *(char **)(v13 + 16);
    if (v16)
    {
      v31[0] = v6;
      v31[1] = v1;
      v17 = 0;
      v38 = "daySummaryDescription";
      v37 = 0x800000023DC31950;
      v14 = v35;
      v34 = v16;
      while (1)
      {
        if (v17 >= *(_QWORD *)(v15 + 16))
        {
          __break(1u);
LABEL_25:
          v14 = sub_23DBDEBA8(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
LABEL_20:
          v27 = *(_QWORD *)(v14 + 16);
          v26 = *(_QWORD *)(v14 + 24);
          if (v27 >= v26 >> 1)
            v14 = sub_23DBDEBA8(v26 > 1, v27 + 1, 1, v14);
          *(_QWORD *)(v14 + 16) = v27 + 1;
          v28 = v14
              + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
              + *(_QWORD *)(v3 + 72) * v27;
          v29 = v35;
          (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v28, v16, v35);
          (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v2, v29);
          return sub_23DC29C38();
        }
        v2 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
        v18 = *(_QWORD *)(v3 + 72);
        (*(void (**)(char *, unint64_t, unint64_t))(v3 + 16))(v12, v15 + v2 + v18 * v17, v14);
        if (sub_23DC29C08() == 0xD000000000000013 && v19 == v37)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v20 = sub_23DC2A7FC();
          swift_bridgeObjectRelease();
          if ((v20 & 1) == 0)
          {
            v21 = *(void (**)(char *, char *, unint64_t))(v3 + 32);
            v21(v36, v12, v14);
            v22 = v39;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_23DBCC958(0, *(_QWORD *)(v22 + 16) + 1, 1);
              v22 = v39;
            }
            v24 = *(_QWORD *)(v22 + 16);
            v23 = *(_QWORD *)(v22 + 24);
            if (v24 >= v23 >> 1)
            {
              sub_23DBCC958(v23 > 1, v24 + 1, 1);
              v22 = v39;
            }
            *(_QWORD *)(v22 + 16) = v24 + 1;
            v25 = v22 + v2 + v24 * v18;
            v14 = v35;
            v21((char *)v25, v36, v35);
            v39 = v22;
            v16 = v34;
            goto LABEL_6;
          }
        }
        (*(void (**)(char *, unint64_t))(v3 + 8))(v12, v14);
LABEL_6:
        if (v16 == (char *)++v17)
        {
          v14 = v39;
          v6 = (char *)v31[0];
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  v2 = (unint64_t)v33;
  if (v32 != 2)
  {
    sub_23DC29BFC();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, v2, v35);
    v16 = v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_25;
    goto LABEL_20;
  }
  return sub_23DC29C38();
}

uint64_t sub_23DBB4DC0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  unint64_t v40;
  unint64_t v41;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;

  v2 = v1;
  v4 = sub_23DC29D64();
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v51 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v6);
  v47 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB8ACC();
  v52 = v8;
  v49 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v48 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v50 = (char *)&v43 - v11;
  v12 = sub_23DC29C20();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v43 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v58 = (char *)&v43 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v43 - v22;
  v46 = *a1;
  v55 = *((unsigned __int8 *)a1 + 8);
  v24 = sub_23DC29C2C();
  v25 = MEMORY[0x24BEE4AF8];
  v57 = v12;
  if (v24)
  {
    v26 = v24;
    v62 = MEMORY[0x24BEE4AF8];
    v56 = *(char **)(v24 + 16);
    if (v56)
    {
      v43 = v19;
      v44 = v16;
      v45 = v2;
      v19 = 0;
      v60 = "omplete";
      v59 = 0x800000023DC31930;
      v27 = v56;
      while (1)
      {
        if ((unint64_t)v19 >= *(_QWORD *)(v26 + 16))
        {
          __break(1u);
LABEL_25:
          v25 = sub_23DBDEBA8(0, *(_QWORD *)(v25 + 16) + 1, 1, v25);
LABEL_20:
          v41 = *(_QWORD *)(v25 + 16);
          v40 = *(_QWORD *)(v25 + 24);
          if (v41 >= v40 >> 1)
            v25 = sub_23DBDEBA8(v40 > 1, v41 + 1, 1, v25);
          *(_QWORD *)(v25 + 16) = v41 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v25+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v41, v16, v12);
          (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v12);
          return sub_23DC29C38();
        }
        v28 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
        v16 = *(char **)(v13 + 72);
        (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v23, v26 + v28 + (_QWORD)v16 * (_QWORD)v19, v12);
        if (sub_23DC29C08() == 0xD000000000000015 && v29 == v59)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v25 = sub_23DC2A7FC();
          swift_bridgeObjectRelease();
          if ((v25 & 1) == 0)
          {
            v30 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
            v30(v58, v23, v12);
            v31 = v62;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_23DBCC958(0, *(_QWORD *)(v31 + 16) + 1, 1);
              v31 = v62;
            }
            v33 = *(_QWORD *)(v31 + 16);
            v32 = *(_QWORD *)(v31 + 24);
            v25 = v33 + 1;
            if (v33 >= v32 >> 1)
            {
              sub_23DBCC958(v32 > 1, v33 + 1, 1);
              v31 = v62;
            }
            *(_QWORD *)(v31 + 16) = v25;
            v34 = v31 + v28 + v33 * (_QWORD)v16;
            v12 = v57;
            v30((char *)v34, v58, v57);
            v62 = v31;
            v27 = v56;
            goto LABEL_6;
          }
        }
        (*(void (**)(char *, uint64_t))(v13 + 8))(v23, v12);
LABEL_6:
        if (v27 == ++v19)
        {
          v25 = v62;
          v16 = v44;
          v19 = v43;
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  if ((v55 & 1) == 0)
  {
    v61 = v46;
    sub_23DC29ED8();
    sub_23DBB2AC0();
    v35 = v48;
    sub_23DC29CD4();
    v36 = v51;
    sub_23DC29D58();
    v37 = v50;
    v38 = v52;
    MEMORY[0x24263D348](v36, v52);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v36, v54);
    v39 = *(void (**)(char *, uint64_t))(v49 + 8);
    v39(v35, v38);
    sub_23DBB2B04();
    sub_23DC2A514();
    v39(v37, v38);
    v12 = v57;
    sub_23DC29BFC();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v19, v12);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_25;
    goto LABEL_20;
  }
  return sub_23DC29C38();
}

uint64_t BalanceURLBuilder.updateActivity(_:withURL:)(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  char v29;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD v34[2];

  v3 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCBB78];
  sub_23DBB89B8(0, &qword_256CE9578, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBB78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v31 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v31 - v11;
  v33 = *v1;
  sub_23DC29C44();
  sub_23DBB8B24((uint64_t)v12, (uint64_t)v10, &qword_256CE9578, v3);
  v13 = sub_23DC29CB0();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v10, 1, v13) == 1)
  {
    sub_23DBB73A8((uint64_t)v10, &qword_256CE9578, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBB78]);
    v16 = 4;
  }
  else
  {
    v32 = v14;
    v17 = sub_23DC29C68();
    v19 = v18;
    v34[0] = 47;
    v34[1] = 0xE100000000000000;
    MEMORY[0x24BDAC7A8](v17);
    *(&v31 - 2) = (uint64_t)v34;
    swift_bridgeObjectRetain();
    v20 = (_QWORD *)sub_23DBB73EC(0x7FFFFFFFFFFFFFFFLL, 1, sub_23DBB81FC, (uint64_t)(&v31 - 4), v17, v19);
    swift_bridgeObjectRelease();
    if (v20[2])
    {
      v21 = v20[4];
      v22 = v20[5];
      v31 = a1;
      v24 = v20[6];
      v23 = v20[7];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25 = MEMORY[0x24263D8DC](v21, v22, v24, v23);
      v27 = v26;
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = v25;
      v28._object = v27;
      BalanceURLBuilder.Route.init(rawValue:)(v28);
      v16 = v34[0];
    }
    else
    {
      swift_bridgeObjectRelease();
      v16 = 4;
      LOBYTE(v34[0]) = 4;
    }
    v14 = v32;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v13);
  }
  LOBYTE(v34[0]) = v16;
  sub_23DBB56D8((unsigned __int8 *)v34);
  sub_23DBB8B24((uint64_t)v12, (uint64_t)v7, &qword_256CE9578, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBB78]);
  if (v15(v7, 1, v13) == 1)
  {
    sub_23DBB73A8((uint64_t)v7, &qword_256CE9578, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBB78]);
    v29 = 10;
  }
  else
  {
    sub_23DBB58E8(v34);
    v29 = v34[0];
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v13);
  }
  LOBYTE(v34[0]) = v29;
  sub_23DBB5B50((unsigned __int8 *)v34);
  return sub_23DBB73A8((uint64_t)v12, &qword_256CE9578, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBB78]);
}

HealthBalance::BalanceURLBuilder::Route_optional sub_23DBB55E4@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  HealthBalance::BalanceURLBuilder::Route_optional result;
  _QWORD v15[4];
  _QWORD v16[2];

  v2 = sub_23DC29C68();
  v4 = v3;
  v16[0] = 47;
  v16[1] = 0xE100000000000000;
  v15[2] = v16;
  swift_bridgeObjectRetain();
  v5 = (_QWORD *)sub_23DBB73EC(0x7FFFFFFFFFFFFFFFLL, 1, sub_23DBB81FC, (uint64_t)v15, v2, v4);
  swift_bridgeObjectRelease();
  if (v5[2])
  {
    v6 = v5[4];
    v7 = v5[5];
    v8 = v5[6];
    v9 = v5[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24263D8DC](v6, v7, v8, v9);
    v12 = v11;
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = v10;
    v13._object = v12;
    return BalanceURLBuilder.Route.init(rawValue:)(v13);
  }
  else
  {
    result.value = swift_bridgeObjectRelease();
    *a1 = 4;
  }
  return result;
}

unsigned __int8 *sub_23DBB56D8(unsigned __int8 *result)
{
  uint64_t v1;

  v1 = *result;
  if ((_DWORD)v1 != 4)
  {
    sub_23DBB89B8(0, (unint64_t *)&qword_256CE95A8, (uint64_t (*)(uint64_t))sub_23DBB8A10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_23DC2B900;
    sub_23DC2A2A4();
    swift_bridgeObjectRelease();
    sub_23DC2A2A4();
    sub_23DC2A2A4();
    sub_23DC2A568();
    __asm { BR              X10 }
  }
  return result;
}

char sub_23DBB58E8@<W0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  char *v23;
  _BYTE *v24;

  v2 = sub_23DC29C20();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB89B8(0, &qword_256CE9598, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v23 - v8;
  v10 = sub_23DC29C2C();
  if (!v10)
    goto LABEL_16;
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v23 = v9;
    v24 = a1;
    v12 = v10 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    while (1)
    {
      v14(v5, v12, v2);
      if (sub_23DC29C08() == 0x656372756F73 && v15 == 0xE600000000000000)
        break;
      v16 = sub_23DC2A7FC();
      swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
        goto LABEL_11;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v12 += v13;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        v17 = 1;
        v9 = v23;
        a1 = v24;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    v9 = v23;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v23, v5, v2);
    v17 = 0;
    a1 = v24;
  }
  else
  {
    v17 = 1;
  }
LABEL_12:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, v17, 1, v2);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    LOBYTE(v10) = sub_23DBB73A8((uint64_t)v9, &qword_256CE9598, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB988]);
LABEL_16:
    *a1 = 10;
    return v10;
  }
  v18 = sub_23DC29C14();
  v20 = v19;
  LOBYTE(v10) = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  if (!v20)
    goto LABEL_16;
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  LOBYTE(v10) = BalanceURLBuilder.Source.init(rawValue:)(v21);
  return v10;
}

unsigned __int8 *sub_23DBB5B50(unsigned __int8 *result)
{
  uint64_t v1;

  v1 = *result;
  if ((_DWORD)v1 != 10)
  {
    sub_23DBB89B8(0, (unint64_t *)&qword_256CE95A8, (uint64_t (*)(uint64_t))sub_23DBB8A10, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    *(_OWORD *)(swift_initStackObject() + 16) = xmmword_23DC2B900;
    sub_23DC2A2A4();
    swift_bridgeObjectRelease();
    sub_23DC2A2A4();
    sub_23DC2A2A4();
    sub_23DC2A568();
    __asm { BR              X10 }
  }
  return result;
}

HealthBalance::BalanceURLBuilder::Route_optional __swiftcall BalanceURLBuilder.route(activity:)(NSUserActivity activity)
{
  _BYTE *v1;

  return (HealthBalance::BalanceURLBuilder::Route_optional)sub_23DBB5E70((uint64_t (*)(uint64_t, unint64_t))BalanceURLBuilder.Route.init(rawValue:), 4, v1);
}

uint64_t BalanceURLBuilder.route(url:)@<X0>(_BYTE *a1@<X8>)
{
  return sub_23DBB604C((void (*)(void))sub_23DBB55E4, 4, a1);
}

HealthBalance::BalanceURLBuilder::Source_optional __swiftcall BalanceURLBuilder.source(activity:)(NSUserActivity activity)
{
  _BYTE *v1;

  return (HealthBalance::BalanceURLBuilder::Source_optional)sub_23DBB5E70((uint64_t (*)(uint64_t, unint64_t))BalanceURLBuilder.Source.init(rawValue:), 10, v1);
}

uint64_t sub_23DBB5E70@<X0>(uint64_t (*a1)(uint64_t, unint64_t)@<X3>, char a2@<W4>, _BYTE *a3@<X8>)
{
  void *v3;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;

  v7 = objc_msgSend(v3, sel_userInfo);
  if (!v7)
  {
    v15 = 0u;
    v16 = 0u;
LABEL_10:
    result = sub_23DBB8880((uint64_t)&v15);
    goto LABEL_11;
  }
  v8 = v7;
  v9 = sub_23DC2A178();

  v13 = 0;
  v14 = 0xE000000000000000;
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  sub_23DC2A2A4();
  sub_23DC2A568();
  if (*(_QWORD *)(v9 + 16) && (v10 = sub_23DBF0CC0((uint64_t)&v13), (v11 & 1) != 0))
  {
    sub_23DBB8948(*(_QWORD *)(v9 + 56) + 32 * v10, (uint64_t)&v15);
  }
  else
  {
    v15 = 0u;
    v16 = 0u;
  }
  sub_23DBB8914((uint64_t)&v13);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v16 + 1))
    goto LABEL_10;
  result = swift_dynamicCast();
  if ((result & 1) != 0)
    return a1(v13, v14);
LABEL_11:
  *a3 = a2;
  return result;
}

uint64_t BalanceURLBuilder.source(url:)@<X0>(_BYTE *a1@<X8>)
{
  return sub_23DBB604C((void (*)(void))sub_23DBB58E8, 10, a1);
}

uint64_t sub_23DBB604C@<X0>(void (*a1)(void)@<X1>, char a2@<W2>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  sub_23DBB89B8(0, &qword_256CE9578, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBB78], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v12 - v7;
  sub_23DC29C44();
  v9 = sub_23DC29CB0();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    result = sub_23DBB73A8((uint64_t)v8, &qword_256CE9578, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBB78]);
    *a3 = a2;
  }
  else
  {
    a1();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  return result;
}

uint64_t BalanceURLBuilder.notification(forQueryString:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  char v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t *v26;
  uint64_t v27;
  char v28;

  sub_23DBB89B8(0, (unint64_t *)&qword_256CE9570, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v25 - v3;
  v5 = sub_23DC2A154();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23DC29CB0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC29CA4();
  swift_bridgeObjectRetain();
  sub_23DC29C8C();
  v13 = sub_23DBB6428();
  if (v14)
  {
    v15 = v13;
    v16 = v14;
    sub_23DBB66AC((uint64_t)v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_bridgeObjectRelease();
      sub_23DBB73A8((uint64_t)v4, (unint64_t *)&qword_256CE9570, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488]);
    }
    else
    {
      v26 = a1;
      v17 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v17(v8, v4, v5);
      v18 = sub_23DBB6BFC();
      if (v18 != 2)
      {
        v21 = v18;
        v25 = v17;
        if (v18)
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
          v22 = 1;
          a1 = v26;
        }
        else
        {
          sub_23DBB6E94((uint64_t)&v27);
          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
          a1 = v26;
          if ((v28 & 1) != 0)
          {
            (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
          v22 = v27;
        }
        v23 = type metadata accessor for SleepingSampleChangeNotification();
        v25((char *)a1 + *(int *)(v23 + 20), v8, v5);
        *a1 = v15;
        a1[1] = v16;
        v24 = (char *)a1 + *(int *)(v23 + 24);
        *(_QWORD *)v24 = v22;
        v24[8] = v21 != 0;
        return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a1, 0, 1, v23);
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      a1 = v26;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
LABEL_7:
  v19 = type metadata accessor for SleepingSampleChangeNotification();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a1, 1, 1, v19);
}

uint64_t sub_23DBB6428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;

  v0 = sub_23DC29C20();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB89B8(0, &qword_256CE9598, v4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v18 - v6;
  v8 = sub_23DC29C2C();
  v9 = v8;
  if (v8)
  {
    v10 = *(_QWORD *)(v8 + 16);
    if (v10)
    {
      v18 = v8;
      v19 = v7;
      v11 = v8 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
      v12 = *(_QWORD *)(v1 + 72);
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v13(v3, v11, v0);
        if (sub_23DC29C08() == 0x6163696669746F6ELL && v14 == 0xEE0044496E6F6974)
          break;
        v15 = sub_23DC2A7FC();
        swift_bridgeObjectRelease();
        if ((v15 & 1) != 0)
          goto LABEL_12;
        (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
        v11 += v12;
        if (!--v10)
        {
          swift_bridgeObjectRelease();
          v16 = 1;
          v7 = v19;
          goto LABEL_13;
        }
      }
      swift_bridgeObjectRelease();
LABEL_12:
      swift_bridgeObjectRelease();
      v7 = v19;
      (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v19, v3, v0);
      v16 = 0;
    }
    else
    {
      v16 = 1;
    }
LABEL_13:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v7, v16, 1, v0);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v7, 1, v0) == 1)
    {
      sub_23DBB73A8((uint64_t)v7, &qword_256CE9598, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB988]);
      return 0;
    }
    else
    {
      v9 = sub_23DC29C14();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v7, v0);
    }
  }
  return v9;
}

uint64_t sub_23DBB66AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _QWORD v46[2];
  char *v47;
  uint64_t v48;
  _QWORD v49[3];

  v2 = sub_23DC29C20();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB89B8(0, &qword_256CE9598, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v46 - v8;
  v10 = sub_23DC29C2C();
  if (!v10)
    goto LABEL_67;
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v47 = v9;
    v48 = a1;
    v12 = v10 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v46[1] = v10;
    swift_bridgeObjectRetain();
    while (1)
    {
      v14(v5, v12, v2);
      if (sub_23DC29C08() == 0x6144746567726174 && v15 == 0xE900000000000079)
        break;
      v16 = sub_23DC2A7FC();
      swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
        goto LABEL_11;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v12 += v13;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        v17 = 1;
        v9 = v47;
        a1 = v48;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    v9 = v47;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v47, v5, v2);
    v17 = 0;
    a1 = v48;
  }
  else
  {
    v17 = 1;
  }
LABEL_12:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, v17, 1, v2);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    sub_23DBB73A8((uint64_t)v9, &qword_256CE9598, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB988]);
LABEL_67:
    v44 = sub_23DC2A154();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(a1, 1, 1, v44);
  }
  v18 = sub_23DC29C14();
  v20 = v19;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  if (!v20)
    goto LABEL_67;
  v22 = HIBYTE(v20) & 0xF;
  v23 = v18 & 0xFFFFFFFFFFFFLL;
  if ((v20 & 0x2000000000000000) != 0)
    v24 = HIBYTE(v20) & 0xF;
  else
    v24 = v18 & 0xFFFFFFFFFFFFLL;
  if (!v24)
  {
    swift_bridgeObjectRelease();
    goto LABEL_67;
  }
  if ((v20 & 0x1000000000000000) != 0)
  {
    sub_23DBB79E0(v18, v20, 10);
    v27 = v45;
    goto LABEL_58;
  }
  if ((v20 & 0x2000000000000000) == 0)
  {
    if ((v18 & 0x1000000000000000) != 0)
      v25 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v25 = (unsigned __int8 *)sub_23DC2A5F8();
    sub_23DBB7AC4(v25, v23, 10);
    v27 = v26 & 1;
LABEL_58:
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      sub_23DC2A118();
      v40 = sub_23DC2A154();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(a1, 0, 1, v40);
    }
    goto LABEL_67;
  }
  v49[0] = v18;
  v49[1] = v20 & 0xFFFFFFFFFFFFFFLL;
  if (v18 == 43)
  {
    if (!v22)
      goto LABEL_71;
    if (v22 == 1 || (BYTE1(v18) - 48) > 9u)
      goto LABEL_45;
    if (v22 != 2)
    {
      if ((BYTE2(v18) - 48) > 9u)
        goto LABEL_45;
      v28 = 10 * (BYTE1(v18) - 48) + (BYTE2(v18) - 48);
      v29 = v22 - 3;
      if (v29)
      {
        v30 = (unsigned __int8 *)v49 + 3;
        while (1)
        {
          v31 = *v30 - 48;
          if (v31 > 9)
            goto LABEL_45;
          v32 = 10 * v28;
          if ((unsigned __int128)(v28 * (__int128)10) >> 64 != (10 * v28) >> 63)
            goto LABEL_45;
          v28 = v32 + v31;
          if (__OFADD__(v32, v31))
            goto LABEL_45;
          v27 = 0;
          ++v30;
          if (!--v29)
            goto LABEL_58;
        }
      }
    }
LABEL_57:
    v27 = 0;
    goto LABEL_58;
  }
  if (v18 != 45)
  {
    if (!v22 || (v18 - 48) > 9u)
      goto LABEL_45;
    if (v22 != 1)
    {
      if ((BYTE1(v18) - 48) > 9u)
        goto LABEL_45;
      v33 = 10 * (v18 - 48) + (BYTE1(v18) - 48);
      v34 = v22 - 2;
      if (v34)
      {
        v35 = (unsigned __int8 *)v49 + 2;
        while (1)
        {
          v36 = *v35 - 48;
          if (v36 > 9)
            goto LABEL_45;
          v37 = 10 * v33;
          if ((unsigned __int128)(v33 * (__int128)10) >> 64 != (10 * v33) >> 63)
            goto LABEL_45;
          v33 = v37 + v36;
          if (__OFADD__(v37, v36))
            goto LABEL_45;
          v27 = 0;
          ++v35;
          if (!--v34)
            goto LABEL_58;
        }
      }
    }
    goto LABEL_57;
  }
  if (v22)
  {
    if (v22 != 1 && (BYTE1(v18) - 48) <= 9u)
    {
      if (v22 == 2)
      {
        v27 = 0;
        goto LABEL_58;
      }
      if ((BYTE2(v18) - 48) <= 9u)
      {
        v38 = -10 * (BYTE1(v18) - 48) - (BYTE2(v18) - 48);
        v39 = v22 - 3;
        if (!v39)
          goto LABEL_57;
        v41 = (unsigned __int8 *)v49 + 3;
        while (1)
        {
          v42 = *v41 - 48;
          if (v42 > 9)
            break;
          v43 = 10 * v38;
          if ((unsigned __int128)(v38 * (__int128)10) >> 64 != (10 * v38) >> 63)
            break;
          v38 = v43 - v42;
          if (__OFSUB__(v43, v42))
            break;
          v27 = 0;
          ++v41;
          if (!--v39)
            goto LABEL_58;
        }
      }
    }
LABEL_45:
    v27 = 1;
    goto LABEL_58;
  }
  __break(1u);
LABEL_71:
  __break(1u);
  return result;
}

uint64_t sub_23DBB6BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD v21[2];
  char *v22;
  unint64_t v23;

  v0 = sub_23DC29C20();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB89B8(0, &qword_256CE9598, v4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v21 - v6;
  v8 = sub_23DC29C2C();
  if (!v8)
    return 2;
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v21[1] = v8;
    v22 = v7;
    v10 = v8 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v11 = *(_QWORD *)(v1 + 72);
    v12 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    swift_bridgeObjectRetain();
    v23 = 0x800000023DC31950;
    while (1)
    {
      v12(v3, v10, v0);
      if (sub_23DC29C08() == 0xD000000000000013 && v13 == v23)
        break;
      v14 = sub_23DC2A7FC();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
        goto LABEL_11;
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v10 += v11;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        v15 = 1;
        v7 = v22;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_11:
    v7 = v22;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v7, v3, v0);
    v15 = 0;
  }
  else
  {
    v15 = 1;
  }
LABEL_12:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v7, v15, 1, v0);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v7, 1, v0) == 1)
  {
    sub_23DBB73A8((uint64_t)v7, &qword_256CE9598, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB988]);
    return 2;
  }
  sub_23DC29C14();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v7, v0);
  if (!v17)
    return 2;
  v18 = sub_23DC2A700();
  swift_bridgeObjectRelease();
  if (v18 == 1)
    v19 = 1;
  else
    v19 = 2;
  if (v18)
    return v19;
  else
    return 0;
}

uint64_t sub_23DBB6E94@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unsigned __int8 *v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD v46[3];

  v2 = sub_23DC29C20();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB89B8(0, &qword_256CE9598, v6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v42 - v8;
  result = sub_23DC29C2C();
  if (!result)
    goto LABEL_67;
  v11 = *(_QWORD *)(result + 16);
  if (v11)
  {
    v43 = v9;
    v44 = a1;
    v12 = result + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v42 = result;
    swift_bridgeObjectRetain();
    v45 = 0x800000023DC31930;
    while (1)
    {
      v14(v5, v12, v2);
      if (sub_23DC29C08() == 0xD000000000000015 && v15 == v45)
        break;
      v16 = sub_23DC2A7FC();
      swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
        goto LABEL_11;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v12 += v13;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        v17 = 1;
        v9 = v43;
        a1 = v44;
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    v9 = v43;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v43, v5, v2);
    v17 = 0;
    a1 = v44;
  }
  else
  {
    v17 = 1;
  }
LABEL_12:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v9, v17, 1, v2);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    result = sub_23DBB73A8((uint64_t)v9, &qword_256CE9598, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB988]);
    goto LABEL_67;
  }
  v18 = sub_23DC29C14();
  v20 = v19;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  if (!v20)
    goto LABEL_67;
  v21 = HIBYTE(v20) & 0xF;
  v22 = v18 & 0xFFFFFFFFFFFFLL;
  if ((v20 & 0x2000000000000000) != 0)
    v23 = HIBYTE(v20) & 0xF;
  else
    v23 = v18 & 0xFFFFFFFFFFFFLL;
  if (!v23)
  {
    result = swift_bridgeObjectRelease();
    goto LABEL_67;
  }
  if ((v20 & 0x1000000000000000) != 0)
  {
    v25 = (uint64_t)sub_23DBB79E0(v18, v20, 10);
    v27 = v41;
    goto LABEL_58;
  }
  if ((v20 & 0x2000000000000000) == 0)
  {
    if ((v18 & 0x1000000000000000) != 0)
      v24 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v24 = (unsigned __int8 *)sub_23DC2A5F8();
    v25 = (uint64_t)sub_23DBB7AC4(v24, v22, 10);
    v27 = v26 & 1;
LABEL_58:
    result = swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      v37 = 0;
LABEL_68:
      *(_QWORD *)a1 = v25;
      *(_BYTE *)(a1 + 8) = v37;
      return result;
    }
LABEL_67:
    v25 = 0;
    v37 = 1;
    goto LABEL_68;
  }
  v46[0] = v18;
  v46[1] = v20 & 0xFFFFFFFFFFFFFFLL;
  if (v18 == 43)
  {
    if (!v21)
      goto LABEL_72;
    if (v21 == 1 || (BYTE1(v18) - 48) > 9u)
      goto LABEL_45;
    v25 = (BYTE1(v18) - 48);
    if (v21 != 2)
    {
      if ((BYTE2(v18) - 48) > 9u)
        goto LABEL_45;
      v25 = 10 * (BYTE1(v18) - 48) + (BYTE2(v18) - 48);
      v28 = v21 - 3;
      if (v28)
      {
        v29 = (unsigned __int8 *)v46 + 3;
        while (1)
        {
          v30 = *v29 - 48;
          if (v30 > 9)
            goto LABEL_45;
          v31 = 10 * v25;
          if ((unsigned __int128)(v25 * (__int128)10) >> 64 != (10 * v25) >> 63)
            goto LABEL_45;
          v25 = v31 + v30;
          if (__OFADD__(v31, v30))
            goto LABEL_45;
          v27 = 0;
          ++v29;
          if (!--v28)
            goto LABEL_58;
        }
      }
    }
LABEL_57:
    v27 = 0;
    goto LABEL_58;
  }
  if (v18 != 45)
  {
    if (!v21 || (v18 - 48) > 9u)
      goto LABEL_45;
    v25 = (v18 - 48);
    if (v21 != 1)
    {
      if ((BYTE1(v18) - 48) > 9u)
        goto LABEL_45;
      v25 = 10 * (v18 - 48) + (BYTE1(v18) - 48);
      v32 = v21 - 2;
      if (v32)
      {
        v33 = (unsigned __int8 *)v46 + 2;
        while (1)
        {
          v34 = *v33 - 48;
          if (v34 > 9)
            goto LABEL_45;
          v35 = 10 * v25;
          if ((unsigned __int128)(v25 * (__int128)10) >> 64 != (10 * v25) >> 63)
            goto LABEL_45;
          v25 = v35 + v34;
          if (__OFADD__(v35, v34))
            goto LABEL_45;
          v27 = 0;
          ++v33;
          if (!--v32)
            goto LABEL_58;
        }
      }
    }
    goto LABEL_57;
  }
  if (v21)
  {
    if (v21 != 1 && (BYTE1(v18) - 48) <= 9u)
    {
      if (v21 == 2)
      {
        v27 = 0;
        v25 = -(uint64_t)(BYTE1(v18) - 48);
        goto LABEL_58;
      }
      if ((BYTE2(v18) - 48) <= 9u)
      {
        v25 = -10 * (BYTE1(v18) - 48) - (BYTE2(v18) - 48);
        v36 = v21 - 3;
        if (!v36)
          goto LABEL_57;
        v38 = (unsigned __int8 *)v46 + 3;
        while (1)
        {
          v39 = *v38 - 48;
          if (v39 > 9)
            break;
          v40 = 10 * v25;
          if ((unsigned __int128)(v25 * (__int128)10) >> 64 != (10 * v25) >> 63)
            break;
          v25 = v40 - v39;
          if (__OFSUB__(v40, v39))
            break;
          v27 = 0;
          ++v38;
          if (!--v36)
            goto LABEL_58;
        }
      }
    }
LABEL_45:
    v25 = 0;
    v27 = 1;
    goto LABEL_58;
  }
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

uint64_t sub_23DBB73A8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_23DBB89B8(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_23DBB73EC(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  unint64_t v48;
  _QWORD v50[4];

  v50[3] = a4;
  if (a1 < 0)
    goto LABEL_42;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = MEMORY[0x24BEE4AF8];
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    sub_23DBB7888(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  v42 = a1;
  v43 = v10;
  v48 = 4 * v12;
  v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v14 = 15;
  v15 = 15;
  v16 = 15;
  while (1)
  {
    v50[0] = sub_23DC2A2F8();
    v50[1] = v17;
    v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
      break;
    v14 = sub_23DC2A298();
LABEL_9:
    if (v48 == v14 >> 14)
      goto LABEL_29;
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    v14 = sub_23DC2A298();
    *(_QWORD *)(v47 + 16) = v14;
    v15 = v14;
    v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14)
    goto LABEL_41;
  v20 = sub_23DC2A310();
  v44 = v21;
  v45 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_23DBDEBBC(0, v13[2] + 1, 1, v13);
  v27 = v13[2];
  v26 = v13[3];
  if (v27 >= v26 >> 1)
    v13 = sub_23DBDEBBC((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
  v13[2] = v27 + 1;
  v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(_QWORD *)(v43 + 16) = v13;
  v29 = sub_23DC2A298();
  v14 = v29;
  *(_QWORD *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    v15 = v29;
    v16 = v29;
    goto LABEL_9;
  }
  v16 = v29;
  v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    v31 = sub_23DC2A310();
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_23DBDEBBC(0, v13[2] + 1, 1, v13);
    v39 = v13[2];
    v38 = v13[3];
    if (v39 >= v38 >> 1)
      v13 = sub_23DBDEBBC((_QWORD *)(v38 > 1), v39 + 1, 1, v13);
    v13[2] = v39 + 1;
    v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(_QWORD *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  sub_23DC2A688();
  __break(1u);
LABEL_42:
  result = sub_23DC2A688();
  __break(1u);
  return result;
}

uint64_t sub_23DBB7888(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 16) >> 14;
  v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1)
    return v5 ^ 1u;
  if (a1 >> 14 >= v4)
  {
    v7 = sub_23DC2A310();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    v14 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = sub_23DBDEBBC(0, v14[2] + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = sub_23DBDEBBC((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *(_QWORD *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  result = sub_23DC2A688();
  __break(1u);
  return result;
}

unsigned __int8 *sub_23DBB79E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_23DC2A304();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_23DBB7D40();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_23DC2A5F8();
  }
LABEL_7:
  v11 = sub_23DBB7AC4(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_23DBB7AC4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_23DBB7D40()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_23DC2A310();
  v4 = sub_23DBB7DBC(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23DBB7DBC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_23DBB7F00(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_23DBF0AA0(v9, 0);
      v12 = sub_23DBB7FEC((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x24263D8E8](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x24263D8E8);
LABEL_9:
      sub_23DC2A5F8();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x24263D8E8]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_23DBB7F00(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_23DBF0B00(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_23DBF0B00(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_23DC2A2D4();
  }
  __break(1u);
  return result;
}

unint64_t sub_23DBB7FEC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_23DBF0B00(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_23DC2A2E0();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_23DC2A5F8();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_23DBF0B00(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_23DC2A2BC();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_23DBB81FC(_QWORD *a1)
{
  return sub_23DBB8A78(a1) & 1;
}

unint64_t sub_23DBB8218()
{
  unint64_t result;

  result = qword_256CE9580;
  if (!qword_256CE9580)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for BalanceURLBuilder.Route, &type metadata for BalanceURLBuilder.Route);
    atomic_store(result, (unint64_t *)&qword_256CE9580);
  }
  return result;
}

unint64_t sub_23DBB8260()
{
  unint64_t result;

  result = qword_256CE9588;
  if (!qword_256CE9588)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for BalanceURLBuilder.Source, &type metadata for BalanceURLBuilder.Source);
    atomic_store(result, (unint64_t *)&qword_256CE9588);
  }
  return result;
}

unint64_t sub_23DBB82A8()
{
  unint64_t result;

  result = qword_256CE9590;
  if (!qword_256CE9590)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for BalanceURLBuilder.RoutingKey, &type metadata for BalanceURLBuilder.RoutingKey);
    atomic_store(result, (unint64_t *)&qword_256CE9590);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PlatformSpecificAppBundleProvider(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BalanceURLBuilder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DBB83D8 + 4 * byte_23DC2B661[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DBB840C + 4 * byte_23DC2B65C[v4]))();
}

uint64_t sub_23DBB840C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBB8414(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBB841CLL);
  return result;
}

uint64_t sub_23DBB8428(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBB8430);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DBB8434(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBB843C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BalanceURLBuilder()
{
  return &type metadata for BalanceURLBuilder;
}

uint64_t getEnumTagSinglePayload for BalanceURLBuilder.Route(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BalanceURLBuilder.Route(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23DBB8534 + 4 * byte_23DC2B66B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23DBB8568 + 4 * byte_23DC2B666[v4]))();
}

uint64_t sub_23DBB8568(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBB8570(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBB8578);
  return result;
}

uint64_t sub_23DBB8584(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBB858CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23DBB8590(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBB8598(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BalanceURLBuilder.Route()
{
  return &type metadata for BalanceURLBuilder.Route;
}

uint64_t getEnumTagSinglePayload for BalanceURLBuilder.Source(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BalanceURLBuilder.Source(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_23DBB8694 + 4 * byte_23DC2B675[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_23DBB86C8 + 4 * byte_23DC2B670[v4]))();
}

uint64_t sub_23DBB86C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBB86D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBB86D8);
  return result;
}

uint64_t sub_23DBB86E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBB86ECLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_23DBB86F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBB86F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BalanceURLBuilder.Source()
{
  return &type metadata for BalanceURLBuilder.Source;
}

uint64_t getEnumTagSinglePayload for BalanceURLBuilder.RoutingKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BalanceURLBuilder.RoutingKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23DBB87F0 + 4 * byte_23DC2B67F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23DBB8824 + 4 * byte_23DC2B67A[v4]))();
}

uint64_t sub_23DBB8824(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBB882C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBB8834);
  return result;
}

uint64_t sub_23DBB8840(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBB8848);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23DBB884C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBB8854(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBB8860(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_23DBB8868(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for BalanceURLBuilder.RoutingKey()
{
  return &type metadata for BalanceURLBuilder.RoutingKey;
}

uint64_t sub_23DBB8880(uint64_t a1)
{
  uint64_t v2;

  sub_23DBB88BC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23DBB88BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE95A0)
  {
    v0 = sub_23DC2A4C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE95A0);
  }
}

uint64_t sub_23DBB8914(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t sub_23DBB8948(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23DBB8984()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23DBB89A8()
{
  return swift_deallocObject();
}

void sub_23DBB89B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_23DBB8A10()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CE95B0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CE95B0);
  }
}

uint64_t sub_23DBB8A78(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_23DC2A7FC() & 1;
}

void sub_23DBB8ACC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE9528)
  {
    sub_23DBB2AC0();
    v0 = sub_23DC29CEC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE9528);
  }
}

uint64_t sub_23DBB8B24(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_23DBB89B8(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_23DBB8B84(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = type metadata accessor for SleepingSampleDaySummary();
  v24 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v20 - v11;
  v13 = MEMORY[0x24BEE4AF8];
  v25 = MEMORY[0x24BEE4AF8];
  v22 = *(_QWORD *)(a3 + 16);
  if (v22)
  {
    v14 = 0;
    v15 = MEMORY[0x24BEE4AF8];
    v20[1] = a2;
    v21 = a3;
    v20[0] = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v13 = *(_QWORD *)(v24 + 72);
      sub_23DBB2B6C(a3 + v16 + v13 * v14, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
      v17 = a1(v12);
      if (v3)
      {
        sub_23DBB2BB0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
        swift_release();
        swift_bridgeObjectRelease();
        return v13;
      }
      if ((v17 & 1) != 0)
      {
        sub_23DBB954C((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_23DBCC984(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v25;
        v19 = *(_QWORD *)(v25 + 16);
        v18 = *(_QWORD *)(v25 + 24);
        if (v19 >= v18 >> 1)
        {
          sub_23DBCC984(v18 > 1, v19 + 1, 1);
          v15 = v25;
        }
        *(_QWORD *)(v15 + 16) = v19 + 1;
        result = sub_23DBB954C(v23, v15 + v16 + v19 * v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        result = sub_23DBB2BB0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
      }
      if (v22 == ++v14)
      {
        v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t SleepingSampleSummaryDemoDatasetManager.settingsProvider.getter()
{
  return swift_retain();
}

uint64_t SleepingSampleSummaryDemoDatasetManager.__allocating_init(settingsProvider:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t SleepingSampleSummaryDemoDatasetManager.init(settingsProvider:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t SleepingSampleSummaryDemoDatasetManager.isDemoDatasetEnabled.getter()
{
  id v0;
  uint64_t result;
  void *v2;

  if (SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.getter())
    return 1;
  result = (uint64_t)objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (result)
  {
    v2 = (void *)result;
    v0 = objc_msgSend((id)result, sel_runningInStoreDemoModeF201);

    return (uint64_t)v0;
  }
  __break(1u);
  return result;
}

uint64_t static SleepingSampleSummaryDemoDatasetManager.demoDaySummaries(in:now:watchFeatureCapabilities:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32[16];
  uint64_t v33;
  char v34[16];
  void *v35;
  char *v36;
  uint64_t v37;
  char *v38;

  v27 = a1;
  v28 = a2;
  v31 = a4;
  v6 = sub_23DC29E48();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DC2A154();
  v29 = *(_QWORD *)(v10 - 8);
  v30 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23DC29F80();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v26 - v18;
  v20 = *a3;
  v21 = a1 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v22(v19, v21, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
  v22(v17, (uint64_t)v19, v13);
  sub_23DC2A10C();
  v35 = &unk_250E876A0;
  v36 = v12;
  v37 = v20;
  v38 = v19;
  v23 = sub_23DBB9324((uint64_t)&unk_250E876A0, (void (*)(uint64_t, double, double, double, double, double))sub_23DBB9170, (uint64_t)v34);
  v33 = v27;
  v24 = sub_23DBB8B84((uint64_t (*)(char *))sub_23DBB947C, (uint64_t)v32, v23);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
  result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v19, v13);
  *v31 = v24;
  return result;
}

uint64_t sub_23DBB901C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, char *a4@<X4>, uint64_t a5@<X8>, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t)@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>, double a10@<D4>)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;

  v20 = sub_23DC2A154();
  v21 = *(_QWORD *)(v20 - 8);
  result = MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(a2 + 16) - 1;
  v26 = __OFSUB__(v25, a1);
  v27 = v25 - a1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    result = -v27;
    if (!__OFSUB__(0, v27))
    {
      sub_23DC2A130();
      static SleepingSampleDaySummary.relativeComparisons(on:heart:spO2:rr:wtr:asleep:calendar:hasBaseline:)((uint64_t)v24, a6, 0, COERCE_DOUBLE((a3 << 63 >> 63) & *(_QWORD *)&a8), (a3 & 1) == 0, a7, 0, COERCE_DOUBLE(*(_QWORD *)&a9 & (a3 << 62 >> 63)), a5, (a3 & 2) == 0, a10, 0, a4, 1u);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_23DBB9170@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  uint64_t v7;

  return sub_23DBB901C(a1, *(_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 32), *(char **)(v7 + 40), a2, a3, a4, a5, a6, a7);
}

uint64_t sub_23DBB917C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  char v12;
  char v13;
  uint64_t v15;

  sub_23DBB9590();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DC2A154();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2CB0((unint64_t *)&qword_25431FAC8, v11, MEMORY[0x24BDD24A8]);
  v12 = sub_23DC2A1B4();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  sub_23DBB2B6C(a2, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DBB9590);
  if ((v12 & 1) != 0)
    v13 = sub_23DC2A1C0();
  else
    v13 = 0;
  sub_23DBB2BB0((uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DBB9590);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v13 & 1;
}

uint64_t SleepingSampleSummaryDemoDatasetManager.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t SleepingSampleSummaryDemoDatasetManager.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_23DBB9324(uint64_t a1, void (*a2)(uint64_t, double, double, double, double, double), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  void (*v16)(uint64_t, double, double, double, double, double);
  uint64_t v17;
  uint64_t v18;

  v16 = a2;
  v17 = a3;
  v4 = type metadata accessor for SleepingSampleDaySummary();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BEE4AF8];
  sub_23DBCC984(0, 0, 0);
  v8 = v18;
  v9 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v15 = a1;
  if (v9)
  {
    v10 = 0;
    v11 = (double *)(a1 + 64);
    do
    {
      v16(v10, *(v11 - 4), *(v11 - 3), *(v11 - 2), *(v11 - 1), *v11);
      v18 = v8;
      v13 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_23DBCC984(v12 > 1, v13 + 1, 1);
        v8 = v18;
      }
      ++v10;
      *(_QWORD *)(v8 + 16) = v13 + 1;
      sub_23DBB954C((uint64_t)v7, v8+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v13);
      v11 += 5;
    }
    while (v9 != v10);
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_23DBB947C(uint64_t a1)
{
  uint64_t v1;

  return sub_23DBB917C(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t type metadata accessor for SleepingSampleSummaryDemoDatasetManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for SleepingSampleSummaryDemoDatasetManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepingSampleSummaryDemoDatasetManager.__allocating_init(settingsProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_23DBB94CC()
{
  return sub_23DBB2CB0(&qword_25431EF48, (uint64_t (*)(uint64_t))sub_23DBB94F8, MEMORY[0x24BEE12E0]);
}

void sub_23DBB94F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25431EF40)
  {
    type metadata accessor for SleepingSampleDaySummary();
    v0 = sub_23DC2A3A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25431EF40);
  }
}

uint64_t sub_23DBB954C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepingSampleDaySummary();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23DBB9590()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25431FB40)
  {
    sub_23DC2A154();
    sub_23DBB2CB0((unint64_t *)&qword_25431FAC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
    v0 = sub_23DC2A1D8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25431FB40);
  }
}

Swift::Bool __swiftcall _HKBehavior.supportsBalanceWidgetFeatureStatus()()
{
  void *v0;

  return objc_msgSend(v0, sel_isAppleWatch);
}

uint64_t WarmupProgress.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t WarmupProgress.count.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*WarmupProgress.count.modify())()
{
  return nullsub_1;
}

uint64_t WarmupProgress.requiredCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t WarmupProgress.requiredCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*WarmupProgress.requiredCount.modify())()
{
  return nullsub_1;
}

BOOL WarmupProgress.isComplete.getter()
{
  _QWORD *v0;

  return *v0 >= v0[1];
}

HealthBalance::WarmupProgress __swiftcall WarmupProgress.init(count:requiredCount:)(Swift::Int count, Swift::Int requiredCount)
{
  Swift::Int *v2;
  HealthBalance::WarmupProgress result;

  *v2 = count;
  v2[1] = requiredCount;
  result.requiredCount = requiredCount;
  result.count = count;
  return result;
}

BOOL static WarmupProgress.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL sub_23DBB9698(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23DBB96B0()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBB96F4()
{
  return sub_23DC2A88C();
}

uint64_t sub_23DBB971C()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBB975C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6465726975716572;
  else
    return 0x746E756F63;
}

uint64_t sub_23DBB97A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBB9E40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DBB97C4()
{
  return 0;
}

void sub_23DBB97D0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23DBB97DC()
{
  sub_23DBB9954();
  return sub_23DC2A964();
}

uint64_t sub_23DBB9804()
{
  sub_23DBB9954();
  return sub_23DC2A970();
}

uint64_t WarmupProgress.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];
  char v11;
  char v12;

  sub_23DBB9AE8(0, &qword_256CE95B8, MEMORY[0x24BEE3520]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v10 - v7;
  v10[1] = *(_QWORD *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBB9954();
  sub_23DC2A8C8();
  v12 = 0;
  sub_23DC2A7B4();
  if (!v2)
  {
    v11 = 1;
    sub_23DC2A7B4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23DBB9954()
{
  unint64_t result;

  result = qword_256CE95C0;
  if (!qword_256CE95C0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2BABC, &type metadata for WarmupProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE95C0);
  }
  return result;
}

uint64_t WarmupProgress.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  sub_23DBB9AE8(0, &qword_256CE95C8, MEMORY[0x24BEE33E0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBB9954();
  sub_23DC2A8BC();
  if (!v2)
  {
    v15 = 0;
    v10 = sub_23DC2A754();
    v14 = 1;
    v12 = sub_23DC2A754();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v10;
    a2[1] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_23DBB9AE8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DBB9954();
    v7 = a3(a1, &type metadata for WarmupProgress.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

BOOL sub_23DBB9B44(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_23DBB9B5C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return WarmupProgress.init(from:)(a1, a2);
}

uint64_t sub_23DBB9B70(_QWORD *a1)
{
  return WarmupProgress.encode(to:)(a1);
}

HealthBalance::WarmupProgress __swiftcall WarmupProgress.init(daysRemaining:requiredCount:)(Swift::Int daysRemaining, Swift::Int requiredCount)
{
  Swift::Int *v2;
  HealthBalance::WarmupProgress result;

  if (__OFSUB__(requiredCount, daysRemaining))
  {
    __break(1u);
  }
  else
  {
    *v2 = (requiredCount - daysRemaining) & ~((requiredCount - daysRemaining) >> 63);
    v2[1] = requiredCount;
  }
  result.requiredCount = requiredCount;
  result.count = daysRemaining;
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for WarmupProgress(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WarmupProgress(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for WarmupProgress()
{
  return &type metadata for WarmupProgress;
}

uint64_t getEnumTagSinglePayload for WarmupProgress.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WarmupProgress.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DBB9CDC + 4 * byte_23DC2B95D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DBB9D10 + 4 * byte_23DC2B958[v4]))();
}

uint64_t sub_23DBB9D10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBB9D18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBB9D20);
  return result;
}

uint64_t sub_23DBB9D2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBB9D34);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DBB9D38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBB9D40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23DBB9D4C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for WarmupProgress.CodingKeys()
{
  return &type metadata for WarmupProgress.CodingKeys;
}

unint64_t sub_23DBB9D6C()
{
  unint64_t result;

  result = qword_256CE95D0;
  if (!qword_256CE95D0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2BA94, &type metadata for WarmupProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE95D0);
  }
  return result;
}

unint64_t sub_23DBB9DB4()
{
  unint64_t result;

  result = qword_256CE95D8;
  if (!qword_256CE95D8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2BA04, &type metadata for WarmupProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE95D8);
  }
  return result;
}

unint64_t sub_23DBB9DFC()
{
  unint64_t result;

  result = qword_256CE95E0;
  if (!qword_256CE95E0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2BA2C, &type metadata for WarmupProgress.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE95E0);
  }
  return result;
}

uint64_t sub_23DBB9E40(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E756F63 && a2 == 0xE500000000000000;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6465726975716572 && a2 == 0xED0000746E756F43)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

HKQuantity __swiftcall HKQuantity.init(celsius:)(Swift::Double celsius)
{
  return (HKQuantity)sub_23DBBA19C((SEL *)&selRef_degreeCelsiusUnit, celsius);
}

HKQuantity __swiftcall HKQuantity.init(celsiusChange:)(Swift::Double celsiusChange)
{
  return (HKQuantity)sub_23DBBA19C((SEL *)&selRef__changeInDegreeCelsiusUnit, celsiusChange);
}

HKQuantity __swiftcall HKQuantity.init(duration:)(Swift::tuple_hour_Int_minute_Int duration)
{
  Swift::Int minute;
  Swift::Int hour;
  HKQuantity result;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  Class isa;
  id v8;

  minute = duration.minute;
  hour = duration.hour;
  result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_minuteUnit);
  v4 = 60 * hour;
  if ((unsigned __int128)(hour * (__int128)60) >> 64 == (60 * hour) >> 63)
  {
    v5 = __OFADD__(v4, minute);
    v6 = v4 + minute;
    if (!v5)
    {
      isa = result.super.isa;
      v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_quantityWithUnit_doubleValue_, result.super.isa, (double)v6);

      return (HKQuantity)v8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

HKQuantity __swiftcall HKQuantity.init(duration:)(Swift::tuple_hour_Int_minute_Int_second_Int duration)
{
  Swift::Int second;
  Swift::Int minute;
  Swift::Int hour;
  HKQuantity result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  id v11;

  second = duration.second;
  minute = duration.minute;
  hour = duration.hour;
  result.super.isa = (Class)objc_msgSend((id)objc_opt_self(), sel_secondUnit);
  if ((unsigned __int128)(hour * (__int128)60) >> 64 != (60 * hour) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  v5 = 3600 * hour;
  if ((unsigned __int128)(60 * hour * (__int128)60) >> 64 != (3600 * hour) >> 63)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = 60 * minute;
  if ((unsigned __int128)(minute * (__int128)60) >> 64 != (60 * minute) >> 63)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v7 = __OFADD__(v5, v6);
  v8 = v5 + v6;
  if (v7)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v7 = __OFADD__(v8, second);
  v9 = v8 + second;
  if (!v7)
  {
    isa = result.super.isa;
    v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_quantityWithUnit_doubleValue_, result.super.isa, (double)v9);

    return (HKQuantity)v11;
  }
LABEL_11:
  __break(1u);
  return result;
}

HKQuantity __swiftcall HKQuantity.init(percent:)(Swift::Double percent)
{
  void *ObjCClassFromMetadata;
  id v3;
  id v4;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v3 = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
  v4 = objc_msgSend(ObjCClassFromMetadata, sel_quantityWithUnit_doubleValue_, v3, percent / 100.0);

  return (HKQuantity)v4;
}

HKQuantity __swiftcall HKQuantity.init(perMinute:)(Swift::Double perMinute)
{
  return (HKQuantity)sub_23DBBA19C((SEL *)&selRef__countPerMinuteUnit, perMinute);
}

HKQuantity __swiftcall HKQuantity.init(s:)(Swift::Double s)
{
  return (HKQuantity)sub_23DBBA19C((SEL *)&selRef_secondUnit, s);
}

id sub_23DBBA19C(SEL *a1, double a2)
{
  void *ObjCClassFromMetadata;
  id v5;
  id v6;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v5 = objc_msgSend((id)objc_opt_self(), *a1);
  v6 = objc_msgSend(ObjCClassFromMetadata, sel_quantityWithUnit_doubleValue_, v5, a2);

  return v6;
}

uint64_t SleepingSampleBaseline.middle.getter()
{
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  return sub_23DC2A040();
}

uint64_t SleepingSampleBaseline.medialRange.getter()
{
  type metadata accessor for SleepingSampleBaseline();
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  return sub_23DC2A040();
}

uint64_t type metadata accessor for SleepingSampleBaseline()
{
  uint64_t result;

  result = qword_25431F750;
  if (!qword_25431F750)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DBBA2D4(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_23DBB2A2C(255, a3);
    v4 = sub_23DC2A058();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t SleepingSampleBaseline.iqr.getter()
{
  type metadata accessor for SleepingSampleBaseline();
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  return sub_23DC2A040();
}

uint64_t SleepingSampleBaseline.iqrMedialRange.getter()
{
  type metadata accessor for SleepingSampleBaseline();
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  return sub_23DC2A040();
}

uint64_t SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  id v16;
  _QWORD v18[2];

  v10 = type metadata accessor for SleepingSampleBaseline();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(a2, sel_containsQuantity_, a1))
  {
    sub_23DBB2A2C(0, (unint64_t *)&qword_25431FAD8);
    v18[1] = a4;
    v14 = a1;
    sub_23DC2A064();
    sub_23DBB2A2C(0, (unint64_t *)&qword_25431F878);
    v15 = a2;
    sub_23DC2A064();
    v16 = a3;
    sub_23DC2A064();
    sub_23DC2A064();

    sub_23DBBA574((uint64_t)v13, a5);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a5, 0, 1, v10);
  }
  else
  {

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a5, 1, 1, v10);
  }
}

uint64_t sub_23DBBA574(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SleepingSampleBaseline.median.getter()
{
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  return sub_23DC2A040();
}

uint64_t SleepingSampleBaseline.hash(into:)()
{
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  sub_23DBBA6DC();
  sub_23DC2A190();
  type metadata accessor for SleepingSampleBaseline();
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  sub_23DBBA77C();
  sub_23DC2A190();
  sub_23DC2A190();
  return sub_23DC2A190();
}

unint64_t sub_23DBBA6DC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256CE95E8;
  if (!qword_256CE95E8)
  {
    sub_23DBBA2D4(255, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
    v2 = v1;
    v3 = sub_23DBBA81C(&qword_256CE95F0, (unint64_t *)&qword_25431FAD8, 0x24BDD3E50, MEMORY[0x24BEE5BD8]);
    result = MEMORY[0x24263E440](MEMORY[0x24BDD2068], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CE95E8);
  }
  return result;
}

unint64_t sub_23DBBA77C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256CE95F8;
  if (!qword_256CE95F8)
  {
    sub_23DBBA2D4(255, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v2 = v1;
    v3 = sub_23DBBA81C(&qword_256CE9600, (unint64_t *)&qword_25431F878, 0x24BDD3E60, MEMORY[0x24BEE5BD8]);
    result = MEMORY[0x24263E440](MEMORY[0x24BDD2068], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CE95F8);
  }
  return result;
}

uint64_t sub_23DBBA81C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_23DBB2A2C(255, a2);
    result = MEMORY[0x24263E440](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static SleepingSampleBaseline.== infix(_:_:)()
{
  sub_23DBB2A2C(0, (unint64_t *)&qword_25431FAD8);
  sub_23DBBA81C(&qword_256CE9608, (unint64_t *)&qword_25431FAD8, 0x24BDD3E50, MEMORY[0x24BEE5BE0]);
  if ((sub_23DC2A04C() & 1) != 0
    && (type metadata accessor for SleepingSampleBaseline(),
        sub_23DBB2A2C(0, (unint64_t *)&qword_25431F878),
        sub_23DBBA81C(&qword_256CE9610, (unint64_t *)&qword_25431F878, 0x24BDD3E60, MEMORY[0x24BEE5BE0]),
        (sub_23DC2A04C() & 1) != 0)
    && (sub_23DC2A04C() & 1) != 0)
  {
    return sub_23DC2A04C();
  }
  else
  {
    return 0;
  }
}

BOOL sub_23DBBA9BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23DBBA9D0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DBBAA0C + 4 * byte_23DC2BB10[*v0]))(0x7257656C6464696DLL, 0xED00007265707061);
}

unint64_t sub_23DBBAA0C()
{
  return 0xD000000000000012;
}

uint64_t sub_23DBBAA28()
{
  return 0x7070617257727169;
}

unint64_t sub_23DBBAA44()
{
  return 0xD000000000000015;
}

uint64_t sub_23DBBAA64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBBC4A0(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DBBAA88(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_23DBBAA94()
{
  sub_23DBBAD10();
  return sub_23DC2A964();
}

uint64_t sub_23DBBAABC()
{
  sub_23DBBAD10();
  return sub_23DC2A970();
}

uint64_t SleepingSampleBaseline.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = v1;
  sub_23DBBB654(0, &qword_25431EF68, MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBBAD10();
  sub_23DC2A8C8();
  v19 = 0;
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  sub_23DBBB6B0(&qword_25431EF28, MEMORY[0x24BDD2060]);
  sub_23DC2A7C0();
  if (!v2)
  {
    v10 = type metadata accessor for SleepingSampleBaseline();
    v15[2] = v3;
    v15[3] = v10;
    v18 = 1;
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v12 = v11;
    v13 = sub_23DBBAD54(&qword_25431EF30, MEMORY[0x24BDD2060]);
    sub_23DC2A7C0();
    v15[0] = v13;
    v15[1] = v12;
    v17 = 2;
    sub_23DC2A7C0();
    v16 = 3;
    sub_23DC2A7C0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_23DBBAD10()
{
  unint64_t result;

  result = qword_25431F8F8;
  if (!qword_25431F8F8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2BCEC, &type metadata for SleepingSampleBaseline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F8F8);
  }
  return result;
}

uint64_t sub_23DBBAD54(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_23DBBA2D4(255, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    result = MEMORY[0x24263E440](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t SleepingSampleBaseline.hashValue.getter()
{
  sub_23DC2A880();
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  sub_23DBBA6DC();
  sub_23DC2A190();
  type metadata accessor for SleepingSampleBaseline();
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  sub_23DBBA77C();
  sub_23DC2A190();
  sub_23DC2A190();
  sub_23DC2A190();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleBaseline.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void (*v31)(uint64_t, char *, uint64_t);
  char *v32;
  char *v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int *v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;

  v40 = a2;
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  v46 = v3;
  v42 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v41 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v44 = (char *)&v35 - v6;
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v47 = v7;
  v43 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v45 = (char *)&v35 - v11;
  sub_23DBBB654(0, &qword_25431F2B0, MEMORY[0x24BEE33E0]);
  v49 = v12;
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v35 - v14;
  v16 = type metadata accessor for SleepingSampleBaseline();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBBAD10();
  v48 = v15;
  v19 = v50;
  sub_23DC2A8BC();
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = v44;
  v37 = v10;
  v38 = (int *)v16;
  v50 = v13;
  v21 = v18;
  v39 = a1;
  v22 = v46;
  v54 = 0;
  v23 = sub_23DBBB6B0(&qword_25431F260, MEMORY[0x24BDD2078]);
  v24 = v45;
  v25 = v47;
  sub_23DC2A760();
  v35 = v23;
  v36 = (uint64_t)v21;
  v26 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v26(v21, v24, v25);
  v53 = 1;
  sub_23DBBAD54(&qword_25431F268, MEMORY[0x24BDD2078]);
  v27 = v20;
  sub_23DC2A760();
  v45 = (char *)v26;
  v28 = v36;
  v29 = v25;
  v30 = v27;
  v31 = *(void (**)(uint64_t, char *, uint64_t))(v42 + 32);
  v31(v36 + v38[5], v30, v22);
  v52 = 2;
  v32 = v37;
  sub_23DC2A760();
  ((void (*)(uint64_t, char *, uint64_t))v45)(v28 + v38[6], v32, v29);
  v51 = 3;
  v33 = v41;
  sub_23DC2A760();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v48, v49);
  v31(v28 + v38[7], v33, v22);
  sub_23DBBB708(v28, v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  return sub_23DBBB74C(v28);
}

uint64_t sub_23DBBB364()
{
  sub_23DC2A880();
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  sub_23DBBA6DC();
  sub_23DC2A190();
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  sub_23DBBA77C();
  sub_23DC2A190();
  sub_23DC2A190();
  sub_23DC2A190();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBBB468()
{
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  sub_23DBBA6DC();
  sub_23DC2A190();
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  sub_23DBBA77C();
  sub_23DC2A190();
  sub_23DC2A190();
  return sub_23DC2A190();
}

uint64_t sub_23DBBB554()
{
  sub_23DC2A880();
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  sub_23DBBA6DC();
  sub_23DC2A190();
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  sub_23DBBA77C();
  sub_23DC2A190();
  sub_23DC2A190();
  sub_23DC2A190();
  return sub_23DC2A8B0();
}

void sub_23DBBB654(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DBBAD10();
    v7 = a3(a1, &type metadata for SleepingSampleBaseline.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DBBB6B0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_23DBBA2D4(255, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
    result = MEMORY[0x24263E440](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DBBB708(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DBBB74C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DBBB788@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleBaseline.init(from:)(a1, a2);
}

uint64_t sub_23DBBB79C(_QWORD *a1)
{
  return SleepingSampleBaseline.encode(to:)(a1);
}

uint64_t sub_23DBBB7B0()
{
  sub_23DBB2A2C(0, (unint64_t *)&qword_25431FAD8);
  sub_23DBBA81C(&qword_256CE9608, (unint64_t *)&qword_25431FAD8, 0x24BDD3E50, MEMORY[0x24BEE5BE0]);
  if ((sub_23DC2A04C() & 1) != 0
    && (sub_23DBB2A2C(0, (unint64_t *)&qword_25431F878),
        sub_23DBBA81C(&qword_256CE9610, (unint64_t *)&qword_25431F878, 0x24BDD3E60, MEMORY[0x24BEE5BE0]),
        (sub_23DC2A04C() & 1) != 0)
    && (sub_23DC2A04C() & 1) != 0)
  {
    return sub_23DC2A04C();
  }
  else
  {
    return 0;
  }
}

unint64_t SleepingSampleBaseline.description.getter()
{
  void *v0;
  void *v1;
  void *v2;

  sub_23DC2A5A4();
  swift_bridgeObjectRelease();
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v0 = (void *)sub_23DC2A040();
  sub_23DC27F70();

  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  type metadata accessor for SleepingSampleBaseline();
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  v1 = (void *)sub_23DC2A040();
  sub_23DBFA72C();

  sub_23DC2A25C();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  v2 = (void *)sub_23DC2A040();
  sub_23DC27F70();

  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  return 0xD00000000000001FLL;
}

unint64_t sub_23DBBBAC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CE9618;
  if (!qword_256CE9618)
  {
    v1 = type metadata accessor for SleepingSampleBaseline();
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleBaseline, v1);
    atomic_store(result, (unint64_t *)&qword_256CE9618);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for SleepingSampleBaseline(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
    v8 = v7;
    v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v9(a1, a2, v7);
    v10 = a3[5];
    v11 = &a1[v10];
    v12 = &a2[v10];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v14 = v13;
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v15(v11, v12, v13);
    v9(&a1[a3[6]], &a2[a3[6]], v8);
    v15(&a1[a3[7]], &a2[a3[7]], v14);
  }
  return a1;
}

uint64_t destroy for SleepingSampleBaseline(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11)(uint64_t, uint64_t);

  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v5 = v4;
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  v7 = a1 + a2[5];
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  v9 = v8;
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v11(v7, v8);
  v6(a1 + a2[6], v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v11)(a1 + a2[7], v9);
}

uint64_t initializeWithCopy for SleepingSampleBaseline(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v7 = v6;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  v13 = v12;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v14(v10, v11, v12);
  v8(a1 + a3[6], a2 + a3[6], v7);
  v14(a1 + a3[7], a2 + a3[7], v13);
  return a1;
}

uint64_t assignWithCopy for SleepingSampleBaseline(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v7 = v6;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  v13 = v12;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24);
  v14(v10, v11, v12);
  v8(a1 + a3[6], a2 + a3[6], v7);
  v14(a1 + a3[7], a2 + a3[7], v13);
  return a1;
}

uint64_t initializeWithTake for SleepingSampleBaseline(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v7 = v6;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  v13 = v12;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
  v14(v10, v11, v12);
  v8(a1 + a3[6], a2 + a3[6], v7);
  v14(a1 + a3[7], a2 + a3[7], v13);
  return a1;
}

uint64_t assignWithTake for SleepingSampleBaseline(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v7 = v6;
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a1 + v9;
  v11 = a2 + v9;
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  v13 = v12;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40);
  v14(v10, v11, v12);
  v8(a1 + a3[6], a2 + a3[6], v7);
  v14(a1 + a3[7], a2 + a3[7], v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleBaseline()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBBC0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v8 = v11;
    v12 = *(_QWORD *)(v11 - 8);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleBaseline()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBBC198(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23DBBC244()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DBBA2D4(319, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  if (v0 <= 0x3F)
  {
    sub_23DBBA2D4(319, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for SleepingSampleBaseline.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23DBBC348 + 4 * byte_23DC2BB19[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23DBBC37C + 4 * byte_23DC2BB14[v4]))();
}

uint64_t sub_23DBBC37C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBBC384(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBBC38CLL);
  return result;
}

uint64_t sub_23DBBC398(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBBC3A0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23DBBC3A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBBC3AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleBaseline.CodingKeys()
{
  return &type metadata for SleepingSampleBaseline.CodingKeys;
}

unint64_t sub_23DBBC3CC()
{
  unint64_t result;

  result = qword_256CE9620;
  if (!qword_256CE9620)
  {
    result = MEMORY[0x24263E440](&unk_23DC2BCC4, &type metadata for SleepingSampleBaseline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9620);
  }
  return result;
}

unint64_t sub_23DBBC414()
{
  unint64_t result;

  result = qword_25431F908;
  if (!qword_25431F908)
  {
    result = MEMORY[0x24263E440](&unk_23DC2BC34, &type metadata for SleepingSampleBaseline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F908);
  }
  return result;
}

unint64_t sub_23DBBC45C()
{
  unint64_t result;

  result = qword_25431F900;
  if (!qword_25431F900)
  {
    result = MEMORY[0x24263E440](&unk_23DC2BC5C, &type metadata for SleepingSampleBaseline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F900);
  }
  return result;
}

uint64_t sub_23DBBC4A0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7257656C6464696DLL && a2 == 0xED00007265707061;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023DC31F60 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7070617257727169 && a2 == 0xEA00000000007265 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023DC31F80)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t SleepingSampleBaselineComparison.aggregate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DBB2B6C(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
}

uint64_t SleepingSampleBaselineComparison.aggregate.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23DBBC784(a1, v1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
}

uint64_t (*SleepingSampleBaselineComparison.aggregate.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleBaselineComparison.availability.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleBaselineComparison();
  return sub_23DBB2B6C(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
}

uint64_t type metadata accessor for SleepingSampleBaselineComparison()
{
  uint64_t result;

  result = qword_25431F838;
  if (!qword_25431F838)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SleepingSampleBaselineComparison.availability.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleBaselineComparison();
  return sub_23DBBC784(a1, v1 + *(int *)(v3 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
}

uint64_t sub_23DBBC784(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t (*SleepingSampleBaselineComparison.availability.modify())()
{
  type metadata accessor for SleepingSampleBaselineComparison();
  return nullsub_1;
}

uint64_t SleepingSampleBaselineComparison.baseline.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleBaselineComparison();
  return sub_23DBBC834(v1 + *(int *)(v3 + 24), a1, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
}

uint64_t sub_23DBBC834(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_23DBBF348(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t SleepingSampleBaselineComparison.baseline.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleBaselineComparison() + 24);
  return sub_23DBBC8B0(a1, v3);
}

uint64_t sub_23DBBC8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBBF348(0, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*SleepingSampleBaselineComparison.baseline.modify())()
{
  type metadata accessor for SleepingSampleBaselineComparison();
  return nullsub_1;
}

uint64_t SleepingSampleBaselineComparison.relativeComparison.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  double v20;
  double v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  double v27;
  double v28;
  double v29;
  uint64_t result;
  void *v31;
  id v32;
  id v33;
  double v34;
  double v35;
  id v36;
  double v37;
  double v38;
  _QWORD v39[2];

  v1 = v0;
  sub_23DBBF348(0, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v39 - v3;
  v5 = type metadata accessor for SleepingSampleBaseline();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SleepingSampleAggregate();
  sub_23DBB2B6C(v1 + *(int *)(v12 + 24), (uint64_t)v11, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v11, 1, v13) == 1)
  {
    sub_23DBB2BB0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_23DBB29B8);
LABEL_9:
    *(double *)&result = 0.0;
    return result;
  }
  v16 = (void *)sub_23DC2A040();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v14);
  v17 = type metadata accessor for SleepingSampleBaselineComparison();
  sub_23DBBC834(v1 + *(int *)(v17 + 24), (uint64_t)v4, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {

    sub_23DBBCD88((uint64_t)v4);
    goto LABEL_9;
  }
  sub_23DBBCEB0((uint64_t)v4, (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
  v18 = (void *)sub_23DC2A040();
  v19 = objc_msgSend(v16, sel__unit);
  objc_msgSend(v18, sel_doubleValueForUnit_, v19);
  v21 = v20;

  v22 = (void *)sub_23DC2A040();
  v23 = objc_msgSend(v16, sel_compare_, v22);

  if (v23 == (id)-1)
  {
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v31 = (void *)sub_23DC2A040();
    v32 = objc_msgSend(v31, sel_minimum);

    v33 = objc_msgSend(v16, sel__unit);
    objc_msgSend(v32, sel_doubleValueForUnit_, v33);
    v35 = v34;

    v29 = v21 - v35;
    if (v21 - v35 == 0.0)
      goto LABEL_8;
LABEL_11:
    v36 = objc_msgSend(v16, sel__unit);
    objc_msgSend(v16, sel_doubleValueForUnit_, v36);
    v38 = v37;

    sub_23DBB2BB0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
    *(double *)&result = (v38 - v21) / v29;
    return result;
  }
  if (v23 == (id)1)
  {
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v24 = (void *)sub_23DC2A040();
    v25 = objc_msgSend(v24, sel_maximum);

    v26 = objc_msgSend(v16, sel__unit);
    objc_msgSend(v25, sel_doubleValueForUnit_, v26);
    v28 = v27;

    v29 = v28 - v21;
    if (v28 - v21 == 0.0)
    {
LABEL_8:
      sub_23DBB2BB0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);

      goto LABEL_9;
    }
    goto LABEL_11;
  }
  if (v23)
  {
    type metadata accessor for ComparisonResult(0);
    v39[1] = v23;
    *(double *)&result = COERCE_DOUBLE(sub_23DC2A820());
    __break(1u);
  }
  else
  {
    sub_23DBB2BB0((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);

    *(double *)&result = 0.0;
  }
  return result;
}

uint64_t sub_23DBBCD88(uint64_t a1)
{
  uint64_t v2;

  sub_23DBBF348(0, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t SleepingSampleBaselineComparison.morningIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DC2A154();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SleepingSampleBaselineComparison.init(aggregate:availability:baseline:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = type metadata accessor for SleepingSampleBaselineComparison();
  v9 = a4 + *(int *)(v8 + 24);
  v10 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  sub_23DBBCEB0(a1, a4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
  sub_23DBBCEB0(a2, a4 + *(int *)(v8 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  return sub_23DBBC8B0(a3, v9);
}

uint64_t sub_23DBBCEB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t SleepingSampleBaselineComparison.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int *v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v1 = v0;
  v2 = type metadata accessor for SleepingSampleBaseline();
  v52 = *(_QWORD *)(v2 - 8);
  v53 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v44 = (uint64_t)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBBF348(0, &qword_25431F760, v4);
  MEMORY[0x24BDAC7A8](v5);
  v51 = (uint64_t)&v42 - v6;
  v7 = sub_23DC29E48();
  v49 = *(_QWORD *)(v7 - 8);
  v50 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v43 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBBF348(0, &qword_25431F748, v9);
  MEMORY[0x24BDAC7A8](v10);
  v48 = (uint64_t)&v42 - v11;
  v12 = sub_23DC29BF0();
  v46 = *(_QWORD *)(v12 - 8);
  v47 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v42 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBBF348(0, &qword_25431F880, v14);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v42 - v16;
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v19 = v18;
  v20 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v42 - v21;
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  v26 = (int *)type metadata accessor for SleepingSampleAggregate();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  sub_23DC2A190();
  sub_23DBB2B6C(v0 + v26[6], (uint64_t)v25, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v45 = v19;
  if (v27(v25, 1, v19) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v28 = v45;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v25, v45);
    sub_23DC2A898();
    sub_23DBBA6DC();
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v28);
  }
  sub_23DBBC834(v0 + v26[7], (uint64_t)v17, &qword_25431F880, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
  v30 = v46;
  v29 = v47;
  v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 48))(v17, 1, v47);
  v32 = v53;
  v33 = v50;
  if (v31 == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v34 = v42;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v42, v17, v29);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9638, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB890]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v34, v29);
  }
  v35 = v48;
  sub_23DBBC834(v1 + v26[8], v48, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v36 = v49;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v35, 1, v33) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v37 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v43, v35, v33);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v33);
  }
  sub_23DC2A88C();
  v38 = type metadata accessor for SleepingSampleBaselineComparison();
  SleepingSampleBaselineAvailability.hash(into:)();
  v39 = v51;
  sub_23DBBC834(v1 + *(int *)(v38 + 24), v51, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v39, 1, v32) == 1)
    return sub_23DC2A898();
  v41 = v44;
  sub_23DBBCEB0(v39, v44, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
  sub_23DC2A898();
  sub_23DBBA6DC();
  sub_23DC2A190();
  sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
  sub_23DBBA77C();
  sub_23DC2A190();
  sub_23DC2A190();
  sub_23DC2A190();
  return sub_23DBB2BB0(v41, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
}

uint64_t sub_23DBBD518()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6962616C69617661;
  if (*v0 != 1)
    v1 = 0x656E696C65736162;
  if (*v0)
    return v1;
  else
    return 0x7461676572676761;
}

uint64_t sub_23DBBD580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBC2178(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DBBD5A4(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_23DBBD5B0()
{
  sub_23DBBF7D8();
  return sub_23DC2A964();
}

uint64_t sub_23DBBD5D8()
{
  sub_23DBBF7D8();
  return sub_23DC2A970();
}

uint64_t SleepingSampleBaselineComparison.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  sub_23DBB2A64(0, &qword_25431EFB0, (uint64_t (*)(void))sub_23DBBF7D8, (uint64_t)&type metadata for SleepingSampleBaselineComparison.CodingKeys, MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBBF7D8();
  sub_23DC2A8C8();
  v12 = 0;
  type metadata accessor for SleepingSampleAggregate();
  sub_23DBB2CB0(&qword_25431EF00, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAggregate, (uint64_t)&protocol conformance descriptor for SleepingSampleAggregate);
  sub_23DC2A7C0();
  if (!v1)
  {
    type metadata accessor for SleepingSampleBaselineComparison();
    v11 = 1;
    type metadata accessor for SleepingSampleBaselineAvailability();
    sub_23DBB2CB0(&qword_25431EF20, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineAvailability, (uint64_t)&protocol conformance descriptor for SleepingSampleBaselineAvailability);
    sub_23DC2A7C0();
    v10 = 2;
    type metadata accessor for SleepingSampleBaseline();
    sub_23DBB2CB0(&qword_25431EEF0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t)&protocol conformance descriptor for SleepingSampleBaseline);
    sub_23DC2A790();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SleepingSampleBaselineComparison.hashValue.getter()
{
  sub_23DC2A880();
  SleepingSampleBaselineComparison.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleBaselineComparison.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  char v36;
  char v37;

  v25 = a2;
  sub_23DBBF348(0, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  MEMORY[0x24BDAC7A8](v3);
  v26 = (char *)v24 - v4;
  v28 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v28);
  v27 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x24BDAC7A8](v29);
  v30 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2A64(0, &qword_25431F2F8, (uint64_t (*)(void))sub_23DBBF7D8, (uint64_t)&type metadata for SleepingSampleBaselineComparison.CodingKeys, MEMORY[0x24BEE33E0]);
  v32 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v24 - v9;
  v11 = type metadata accessor for SleepingSampleBaselineComparison();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t)&v14[*(int *)(v12 + 24)];
  v16 = type metadata accessor for SleepingSampleBaseline();
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v33 = v15;
  v17(v15, 1, 1, v16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBBF7D8();
  v31 = v10;
  v18 = (uint64_t)v34;
  sub_23DC2A8BC();
  if (v18)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return sub_23DBBCD88(v33);
  }
  else
  {
    v24[1] = v16;
    v19 = (uint64_t)v27;
    v34 = a1;
    v37 = 0;
    sub_23DBB2CB0(&qword_25431F220, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAggregate, (uint64_t)&protocol conformance descriptor for SleepingSampleAggregate);
    v20 = (uint64_t)v30;
    v21 = v31;
    sub_23DC2A760();
    sub_23DBBCEB0(v20, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
    v36 = 1;
    sub_23DBB2CB0(&qword_25431F240, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineAvailability, (uint64_t)&protocol conformance descriptor for SleepingSampleBaselineAvailability);
    sub_23DC2A760();
    sub_23DBBCEB0(v19, (uint64_t)&v14[*(int *)(v11 + 20)], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v35 = 2;
    sub_23DBB2CB0(&qword_25431F210, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t)&protocol conformance descriptor for SleepingSampleBaseline);
    v22 = (uint64_t)v26;
    sub_23DC2A730();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v21, v32);
    sub_23DBBC8B0(v22, v33);
    sub_23DBB2B6C((uint64_t)v14, v25, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    return sub_23DBB2BB0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  }
}

uint64_t sub_23DBBDC40()
{
  sub_23DC2A880();
  SleepingSampleBaselineComparison.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBBDC80()
{
  sub_23DC2A880();
  SleepingSampleBaselineComparison.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBBDCB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleBaselineComparison.init(from:)(a1, a2);
}

uint64_t sub_23DBBDCCC(_QWORD *a1)
{
  return SleepingSampleBaselineComparison.encode(to:)(a1);
}

uint64_t SleepingSampleBaselineComparison.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v19[2];
  uint64_t v20;
  unint64_t v21;

  v1 = type metadata accessor for SleepingSampleBaseline();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v19 - v6;
  sub_23DBBF348(0, &qword_25431F760, v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v19 - v13;
  v20 = 0;
  v21 = 0xE000000000000000;
  sub_23DC2A5A4();
  sub_23DC2A2A4();
  sub_23DC2A2A4();
  SleepingSampleAggregate.description.getter();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  v15 = type metadata accessor for SleepingSampleBaselineComparison();
  type metadata accessor for SleepingSampleBaselineAvailability();
  sub_23DC2A670();
  sub_23DC2A2A4();
  sub_23DBBC834(v0 + *(int *)(v15 + 24), (uint64_t)v14, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  sub_23DBBC834((uint64_t)v14, (uint64_t)v12, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v12, 1, v1) != 1)
  {
    sub_23DBBCEB0((uint64_t)v12, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
    sub_23DBB2B6C((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
    sub_23DC2A25C();
    sub_23DBB2BB0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
  }
  sub_23DBBCD88((uint64_t)v14);
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  v16 = SleepingSampleBaselineComparison.relativeComparison.getter();
  if ((v17 & 1) == 0)
  {
    v19[1] = v16;
    sub_23DC2A25C();
  }
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  return v20;
}

uint64_t SleepingSampleBaselineComparison.Classification.init(baselineComparison:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  double v4;
  char v5;
  char v6;
  uint64_t result;
  char v8;

  v4 = COERCE_DOUBLE(SleepingSampleBaselineComparison.relativeComparison.getter());
  v6 = v5;
  result = sub_23DBB2BB0(a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  if ((v6 & 1) != 0)
  {
    v8 = 3;
  }
  else if (v4 >= -1.0)
  {
    v8 = 2 * (v4 <= 1.0);
  }
  else
  {
    v8 = 1;
  }
  *a2 = v8;
  return result;
}

HealthBalance::SleepingSampleBaselineComparison::Classification __swiftcall SleepingSampleBaselineComparison.Classification.init(relativeComparison:)(Swift::Double relativeComparison)
{
  char *v1;
  char v2;
  HealthBalance::SleepingSampleBaselineComparison::Classification result;

  v2 = 2 * (relativeComparison <= 1.0);
  if (relativeComparison < -1.0)
    v2 = 1;
  *v1 = v2;
  return result;
}

double static SleepingSampleBaselineComparison.relativeMedialRange.getter()
{
  return -1.0;
}

BOOL SleepingSampleBaselineComparison.Classification.isOutOfRange.getter()
{
  unsigned __int8 *v0;

  return *v0 < 2u;
}

BOOL static SleepingSampleBaselineComparison.Classification.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepingSampleBaselineComparison.Classification.hash(into:)()
{
  return sub_23DC2A88C();
}

uint64_t sub_23DBBE108()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DBBE130 + 4 * byte_23DC2BD40[*v0]))(1751607656, 0xE400000000000000);
}

uint64_t sub_23DBBE130()
{
  return 7827308;
}

uint64_t sub_23DBBE140()
{
  return 0x6C616369707974;
}

uint64_t sub_23DBBE158()
{
  return 0x616C696176616E75;
}

uint64_t sub_23DBBE178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBC22F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DBBE19C()
{
  sub_23DBBF92C();
  return sub_23DC2A964();
}

uint64_t sub_23DBBE1C4()
{
  sub_23DBBF92C();
  return sub_23DC2A970();
}

uint64_t sub_23DBBE1EC()
{
  return 0;
}

void sub_23DBBE1F8(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23DBBE204()
{
  sub_23DBBF8E8();
  return sub_23DC2A964();
}

uint64_t sub_23DBBE22C()
{
  sub_23DBBF8E8();
  return sub_23DC2A970();
}

uint64_t sub_23DBBE254@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_23DBBE280()
{
  sub_23DBBF8A4();
  return sub_23DC2A964();
}

uint64_t sub_23DBBE2A8()
{
  sub_23DBBF8A4();
  return sub_23DC2A970();
}

uint64_t sub_23DBBE2D0()
{
  sub_23DBBF860();
  return sub_23DC2A964();
}

uint64_t sub_23DBBE2F8()
{
  sub_23DBBF860();
  return sub_23DC2A970();
}

uint64_t sub_23DBBE320()
{
  sub_23DBBF81C();
  return sub_23DC2A964();
}

uint64_t sub_23DBBE348()
{
  sub_23DBBF81C();
  return sub_23DC2A970();
}

void SleepingSampleBaselineComparison.Classification.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[13];

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  sub_23DBB2A64(0, &qword_256CE9648, (uint64_t (*)(void))sub_23DBBF81C, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.UnavailableCodingKeys, MEMORY[0x24BEE3520]);
  v13[10] = *(_QWORD *)(v4 - 8);
  v13[11] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v13[9] = (char *)v13 - v5;
  sub_23DBB2A64(0, &qword_256CE9658, (uint64_t (*)(void))sub_23DBBF860, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.TypicalCodingKeys, v3);
  v13[7] = *(_QWORD *)(v6 - 8);
  v13[8] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v13[6] = (char *)v13 - v7;
  sub_23DBB2A64(0, &qword_256CE9668, (uint64_t (*)(void))sub_23DBBF8A4, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.LowCodingKeys, v3);
  v13[4] = *(_QWORD *)(v8 - 8);
  v13[5] = v8;
  MEMORY[0x24BDAC7A8](v8);
  v13[3] = (char *)v13 - v9;
  sub_23DBB2A64(0, &qword_256CE9678, (uint64_t (*)(void))sub_23DBBF8E8, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.HighCodingKeys, v3);
  v13[1] = *(_QWORD *)(v10 - 8);
  v13[2] = v10;
  MEMORY[0x24BDAC7A8](v10);
  sub_23DBB2A64(0, &qword_256CE9688, (uint64_t (*)(void))sub_23DBBF92C, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.CodingKeys, v3);
  v13[12] = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBBF92C();
  sub_23DC2A8C8();
  __asm { BR              X9 }
}

uint64_t sub_23DBBE594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 68) = 0;
  sub_23DBBF8E8();
  sub_23DC2A778();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 184) + 8))(v0, *(_QWORD *)(v3 - 176));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 96) + 8))(v2, v1);
}

uint64_t SleepingSampleBaselineComparison.Classification.hashValue.getter()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleBaselineComparison.Classification.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v34 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_23DBB2A64(0, &qword_256CE9698, (uint64_t (*)(void))sub_23DBBF81C, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.UnavailableCodingKeys, MEMORY[0x24BEE33E0]);
  v36 = *(_QWORD *)(v4 - 8);
  v37 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v35 = (char *)v24 - v5;
  sub_23DBB2A64(0, &qword_256CE96A0, (uint64_t (*)(void))sub_23DBBF860, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.TypicalCodingKeys, v3);
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v33 = (char *)v24 - v7;
  sub_23DBB2A64(0, &qword_256CE96A8, (uint64_t (*)(void))sub_23DBBF8A4, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.LowCodingKeys, v3);
  v28 = *(_QWORD *)(v8 - 8);
  v29 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v32 = (char *)v24 - v9;
  sub_23DBB2A64(0, &qword_256CE96B0, (uint64_t (*)(void))sub_23DBBF8E8, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.HighCodingKeys, v3);
  v26 = *(_QWORD *)(v10 - 8);
  v27 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v24 - v11;
  sub_23DBB2A64(0, &qword_256CE96B8, (uint64_t (*)(void))sub_23DBBF92C, (uint64_t)&type metadata for SleepingSampleBaselineComparison.Classification.CodingKeys, v3);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)v24 - v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBBF92C();
  v18 = v38;
  sub_23DC2A8BC();
  if (!v18)
  {
    v24[1] = v12;
    v25 = v15;
    v38 = a1;
    v19 = sub_23DC2A76C();
    if (*(_QWORD *)(v19 + 16) == 1)
      __asm { BR              X9 }
    v20 = sub_23DC2A5E0();
    swift_allocError();
    v22 = v21;
    sub_23DBBF970();
    *v22 = &type metadata for SleepingSampleBaselineComparison.Classification;
    sub_23DC2A718();
    sub_23DC2A5C8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v14);
    a1 = v38;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_23DBBEA98()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 67) = 1;
  sub_23DBBF8A4();
  sub_23DC2A70C();
  if (!v0)
    JUMPOUT(0x23DBBEB78);
  JUMPOUT(0x23DBBEA4CLL);
}

void sub_23DBBEAE0()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 66) = 2;
  sub_23DBBF860();
  sub_23DC2A70C();
  if (!v0)
    JUMPOUT(0x23DBBEB24);
  JUMPOUT(0x23DBBEA4CLL);
}

void sub_23DBBEB30()
{
  uint64_t v0;
  uint64_t v1;

  *(_BYTE *)(v1 - 65) = 3;
  sub_23DBBF81C();
  sub_23DC2A70C();
  if (!v0)
    JUMPOUT(0x23DBBEB78);
  JUMPOUT(0x23DBBEA4CLL);
}

uint64_t sub_23DBBEBA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleBaselineComparison.Classification.init(from:)(a1, a2);
}

void sub_23DBBEBBC(_QWORD *a1)
{
  SleepingSampleBaselineComparison.Classification.encode(to:)(a1);
}

uint64_t SleepingSampleBaselineComparison.classification.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double v6;
  char v7;
  char v8;
  uint64_t result;
  char v10;
  uint64_t v11;

  v3 = type metadata accessor for SleepingSampleBaselineComparison();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(v1, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v6 = COERCE_DOUBLE(SleepingSampleBaselineComparison.relativeComparison.getter());
  v8 = v7;
  result = sub_23DBB2BB0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  if ((v8 & 1) != 0)
  {
    v10 = 3;
  }
  else if (v6 >= -1.0)
  {
    v10 = 2 * (v6 <= 1.0);
  }
  else
  {
    v10 = 1;
  }
  *a1 = v10;
  return result;
}

BOOL SleepingSampleBaselineComparison.isOutOfRange.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  char v5;
  char v6;
  uint64_t v8;

  v1 = type metadata accessor for SleepingSampleBaselineComparison();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(v0, (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v4 = COERCE_DOUBLE(SleepingSampleBaselineComparison.relativeComparison.getter());
  v6 = v5;
  sub_23DBB2BB0((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  if ((v6 & 1) != 0)
    return 0;
  if (v4 >= -1.0)
    return v4 > 1.0;
  return 1;
}

BOOL SleepingSampleBaselineComparison.hasRelativeComparison.getter()
{
  char v0;

  SleepingSampleBaselineComparison.relativeComparison.getter();
  return (v0 & 1) == 0;
}

uint64_t SleepingSampleBaselineComparison.isWarmupDay.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unsigned int v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  sub_23DBBF348(0, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v9 - v2;
  v4 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SleepingSampleAggregate() + 36));
  if (v4 < 3)
    return 0;
  if (v4 == 3)
    return 1;
  v6 = type metadata accessor for SleepingSampleBaselineComparison();
  sub_23DBBC834(v0 + *(int *)(v6 + 24), (uint64_t)v3, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  v7 = type metadata accessor for SleepingSampleBaseline();
  v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v3, 1, v7) == 1;
  sub_23DBBCD88((uint64_t)v3);
  return v5;
}

BOOL SleepingSampleBaselineComparison.hasData.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v11;

  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SleepingSampleAggregate();
  sub_23DBB2B6C(v0 + *(int *)(v4 + 24), (uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v5);
  if (v8 == 1)
  {
    sub_23DBB2BB0((uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  }
  else
  {
    v9 = (void *)sub_23DC2A040();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);

  }
  return v8 != 1;
}

uint64_t SleepingSampleBaselineComparison.warmupDaysRequired.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (uint64_t *)((char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for SleepingSampleBaselineComparison();
  sub_23DBB2B6C(v0 + *(int *)(v4 + 20), (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23DBBFA90();
      v7 = *(uint64_t *)((char *)v3 + *(int *)(v6 + 64));
      sub_23DBB2BB0((uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    }
    else
    {
      sub_23DBB2BB0((uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      v7 = 6;
    }
  }
  else
  {
    v7 = *v3;
  }
  result = v7 + 1;
  if (__OFADD__(v7, 1))
    __break(1u);
  return result;
}

uint64_t SleepingSampleBaselineComparison.warmupDaysRemaining.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  _BOOL8 v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (uint64_t *)((char *)&v18 - v5);
  v7 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for SleepingSampleAggregate() + 36)) < 3u;
  v8 = v0 + *(int *)(type metadata accessor for SleepingSampleBaselineComparison() + 20);
  sub_23DBB2B6C(v8, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23DBBFA90();
      v11 = *(uint64_t *)((char *)v6 + *(int *)(v10 + 64));
      sub_23DBB2BB0((uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    }
    else
    {
      sub_23DBB2BB0((uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      v11 = 6;
    }
  }
  else
  {
    v11 = *v6;
  }
  sub_23DBB2B6C(v8, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
      sub_23DBBFA90();
    else
      sub_23DBBFAFC();
    v14 = *(_QWORD *)&v4[*(int *)(v13 + 48)];
    result = sub_23DBB2BB0((uint64_t)v4, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  }
  else
  {
    v14 = 0;
  }
  v15 = v11 - v14;
  if (__OFSUB__(v11, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = __OFADD__(v15, v7);
    v17 = v15 + v7;
    if (!v16)
      return v17 & ~(v17 >> 63);
  }
  __break(1u);
  return result;
}

BOOL SleepingSampleBaselineComparison.isInRefinement.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for SleepingSampleBaselineComparison();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(v1 + *(int *)(v2 + 20), (uint64_t)v7, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
    goto LABEL_6;
  if (EnumCaseMultiPayload == 1)
    sub_23DBBFA90();
  else
    sub_23DBBFAFC();
  v11 = *(_QWORD *)&v7[*(int *)(v10 + 48)];
  sub_23DBB2BB0((uint64_t)v7, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  if (v11 < 6)
  {
LABEL_6:
    sub_23DBB2B6C(v1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
LABEL_9:
    v12 = 0;
    goto LABEL_10;
  }
  sub_23DBB2B6C(v1, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  if ((unint64_t)v11 > 0x13)
    goto LABEL_9;
  v12 = SleepingSampleBaselineComparison.warmupDaysRemaining.getter() == 0;
LABEL_10:
  sub_23DBB2BB0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  return v12;
}

void sub_23DBBF348(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23DC2A4C0();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t _s13HealthBalance32SleepingSampleBaselineComparisonV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  uint64_t v29;
  char *v30;

  v4 = type metadata accessor for SleepingSampleBaseline();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBC24A0();
  v9 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBBF348(0, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v29 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v29 - v19;
  if (!static SleepingSampleAggregate.== infix(_:_:)(a1, a2))
    return 0;
  v30 = v7;
  v21 = type metadata accessor for SleepingSampleBaselineComparison();
  if ((_s13HealthBalance34SleepingSampleBaselineAvailabilityO2eeoiySbAC_ACtFZ_0(a1 + *(int *)(v21 + 20), a2 + *(int *)(v21 + 20)) & 1) == 0)return 0;
  v22 = a1 + *(int *)(v21 + 24);
  v29 = v4;
  sub_23DBBC834(v22, (uint64_t)v20, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  sub_23DBBC834(a2 + *(int *)(v21 + 24), (uint64_t)v18, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  v23 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_23DBBC834((uint64_t)v20, (uint64_t)v11, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  v24 = v29;
  sub_23DBBC834((uint64_t)v18, v23, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v25((uint64_t)v11, 1, v24) == 1)
  {
    sub_23DBBCD88((uint64_t)v18);
    sub_23DBBCD88((uint64_t)v20);
    if (v25(v23, 1, v24) == 1)
    {
      sub_23DBBCD88((uint64_t)v11);
      return 1;
    }
    goto LABEL_8;
  }
  sub_23DBBC834((uint64_t)v11, (uint64_t)v15, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  if (v25(v23, 1, v24) == 1)
  {
    sub_23DBBCD88((uint64_t)v18);
    sub_23DBBCD88((uint64_t)v20);
    sub_23DBB2BB0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
LABEL_8:
    sub_23DBB2BB0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_23DBC24A0);
    return 0;
  }
  v27 = (uint64_t)v30;
  sub_23DBBCEB0(v23, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
  sub_23DBB2A2C(0, (unint64_t *)&qword_25431FAD8);
  sub_23DBBA81C(&qword_256CE9608, (unint64_t *)&qword_25431FAD8, 0x24BDD3E50, MEMORY[0x24BEE5BE0]);
  if ((sub_23DC2A04C() & 1) != 0
    && (sub_23DBB2A2C(0, (unint64_t *)&qword_25431F878),
        sub_23DBBA81C(&qword_256CE9610, (unint64_t *)&qword_25431F878, 0x24BDD3E60, MEMORY[0x24BEE5BE0]),
        (sub_23DC2A04C() & 1) != 0)
    && (sub_23DC2A04C() & 1) != 0)
  {
    v28 = sub_23DC2A04C();
    sub_23DBB2BB0(v27, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
    sub_23DBBCD88((uint64_t)v18);
    sub_23DBBCD88((uint64_t)v20);
    sub_23DBB2BB0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
    sub_23DBBCD88((uint64_t)v11);
    if ((v28 & 1) != 0)
      return 1;
  }
  else
  {
    sub_23DBB2BB0(v27, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
    sub_23DBBCD88((uint64_t)v18);
    sub_23DBBCD88((uint64_t)v20);
    sub_23DBB2BB0((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
    sub_23DBBCD88((uint64_t)v11);
  }
  return 0;
}

unint64_t sub_23DBBF7D8()
{
  unint64_t result;

  result = qword_25431F9D0;
  if (!qword_25431F9D0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C408, &type metadata for SleepingSampleBaselineComparison.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F9D0);
  }
  return result;
}

unint64_t sub_23DBBF81C()
{
  unint64_t result;

  result = qword_256CE9650;
  if (!qword_256CE9650)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C3B8, &type metadata for SleepingSampleBaselineComparison.Classification.UnavailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9650);
  }
  return result;
}

unint64_t sub_23DBBF860()
{
  unint64_t result;

  result = qword_256CE9660;
  if (!qword_256CE9660)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C368, &type metadata for SleepingSampleBaselineComparison.Classification.TypicalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9660);
  }
  return result;
}

unint64_t sub_23DBBF8A4()
{
  unint64_t result;

  result = qword_256CE9670;
  if (!qword_256CE9670)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C318, &type metadata for SleepingSampleBaselineComparison.Classification.LowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9670);
  }
  return result;
}

unint64_t sub_23DBBF8E8()
{
  unint64_t result;

  result = qword_256CE9680;
  if (!qword_256CE9680)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C2C8, &type metadata for SleepingSampleBaselineComparison.Classification.HighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9680);
  }
  return result;
}

unint64_t sub_23DBBF92C()
{
  unint64_t result;

  result = qword_256CE9690;
  if (!qword_256CE9690)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C278, &type metadata for SleepingSampleBaselineComparison.Classification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9690);
  }
  return result;
}

void sub_23DBBF970()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CE96C0)
  {
    sub_23DBBF9DC();
    sub_23DC2A5D4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CE96C0);
  }
}

unint64_t sub_23DBBF9DC()
{
  unint64_t result;

  result = qword_256CE96C8;
  if (!qword_256CE96C8)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_256CE96C8);
  }
  return result;
}

void sub_23DBBFA18()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25431FB50)
  {
    sub_23DC2A154();
    sub_23DBB2CB0((unint64_t *)&qword_25431FAC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
    v0 = sub_23DC2A454();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25431FB50);
  }
}

void sub_23DBBFA90()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_256CE96D0)
  {
    sub_23DBBFA18();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_256CE96D0);
  }
}

void sub_23DBBFAFC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25431FA68)
  {
    sub_23DBBFA18();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25431FA68);
  }
}

uint64_t sub_23DBBFB64()
{
  return sub_23DBB2CB0(&qword_256CE96D8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t)&protocol conformance descriptor for SleepingSampleBaselineComparison);
}

unint64_t sub_23DBBFB94()
{
  unint64_t result;

  result = qword_25431ED80;
  if (!qword_25431ED80)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleBaselineComparison.Classification, &type metadata for SleepingSampleBaselineComparison.Classification);
    atomic_store(result, (unint64_t *)&qword_25431ED80);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for SleepingSampleBaselineComparison(char *a1, char *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DC2A154();
    v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v57(a1, a2, v7);
    v8 = (int *)type metadata accessor for SleepingSampleAggregate();
    v9 = v8[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = sub_23DC29F80();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = v8[6];
    v14 = &a1[v13];
    v15 = &a2[v13];
    sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
    v17 = v16;
    v18 = *(_QWORD *)(v16 - 8);
    v56 = v18;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v15, 1, v16))
    {
      sub_23DBB29B8();
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v14, v15, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v17);
    }
    v21 = v8[7];
    v22 = &a1[v21];
    v23 = &a2[v21];
    v24 = sub_23DC29BF0();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      sub_23DBBF348(0, &qword_25431F880, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v27 = v8[8];
    v28 = &a1[v27];
    v29 = &a2[v27];
    v30 = sub_23DC29E48();
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      sub_23DBBF348(0, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    a1[v8[9]] = a2[v8[9]];
    v33 = *(int *)(a3 + 20);
    v34 = &a1[v33];
    v35 = &a2[v33];
    v36 = type metadata accessor for SleepingSampleBaselineAvailability();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v57(v34, v35, v7);
      sub_23DBBFA18();
      v57(&v34[*(int *)(v40 + 36)], &v35[*(int *)(v40 + 36)], v7);
      sub_23DBBFAFC();
      *(_QWORD *)&v34[*(int *)(v41 + 48)] = *(_QWORD *)&v35[*(int *)(v41 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v57(v34, v35, v7);
      sub_23DBBFA18();
      v57(&v34[*(int *)(v38 + 36)], &v35[*(int *)(v38 + 36)], v7);
      sub_23DBBFA90();
      *(_QWORD *)&v34[*(int *)(v39 + 48)] = *(_QWORD *)&v35[*(int *)(v39 + 48)];
      *(_QWORD *)&v34[*(int *)(v39 + 64)] = *(_QWORD *)&v35[*(int *)(v39 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    v42 = *(int *)(a3 + 24);
    v43 = &a1[v42];
    v44 = &a2[v42];
    v45 = (int *)type metadata accessor for SleepingSampleBaseline();
    v46 = *((_QWORD *)v45 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v46 + 48))(v44, 1, v45))
    {
      sub_23DBBF348(0, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      v48 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
      v48(v43, v44, v17);
      v49 = v45[5];
      v58 = &v43[v49];
      v50 = &v44[v49];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v52 = v51;
      v53 = v17;
      v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
      v54(v58, v50, v51);
      v48(&v43[v45[6]], &v44[v45[6]], v53);
      v54(&v43[v45[7]], &v44[v45[7]], v52);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v46 + 56))(v43, 0, 1, v45);
    }
  }
  return a1;
}

uint64_t destroy for SleepingSampleBaselineComparison(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t result;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);

  v4 = sub_23DC2A154();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = (int *)type metadata accessor for SleepingSampleAggregate();
  v7 = a1 + v6[5];
  v8 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + v6[6];
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
  v13 = a1 + v6[7];
  v14 = sub_23DC29BF0();
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v16 = a1 + v6[8];
  v17 = sub_23DC29E48();
  v18 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  v19 = a1 + *(int *)(a2 + 20);
  type metadata accessor for SleepingSampleBaselineAvailability();
  if (swift_getEnumCaseMultiPayload() - 1 <= 1)
  {
    v5(v19, v4);
    sub_23DBBFA18();
    v5(v19 + *(int *)(v20 + 36), v4);
  }
  v21 = a1 + *(int *)(a2 + 24);
  v22 = (int *)type metadata accessor for SleepingSampleBaseline();
  result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v22 - 1) + 48))(v21, 1, v22);
  if (!(_DWORD)result)
  {
    v24 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v24(v21, v11);
    v25 = v21 + v22[5];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v27 = v26;
    v28 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8);
    v28(v25, v26);
    v24(v21 + v22[6], v11);
    return ((uint64_t (*)(uint64_t, uint64_t))v28)(v21 + v22[7], v27);
  }
  return result;
}

uint64_t initializeWithCopy for SleepingSampleBaselineComparison(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;

  v6 = sub_23DC2A154();
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v56(a1, a2, v6);
  v7 = (int *)type metadata accessor for SleepingSampleAggregate();
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = v7[6];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  v57 = a3;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
  {
    v18 = v17;
    sub_23DBB29B8();
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v13, v14, v16);
    v18 = v17;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
  }
  v20 = v7[7];
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  v23 = sub_23DC29BF0();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_23DBBF348(0, &qword_25431F880, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v21, v22, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v26 = v7[8];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  v29 = sub_23DC29E48();
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    sub_23DBBF348(0, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v32 = v18;
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  v33 = *(int *)(v57 + 20);
  v34 = (char *)(a1 + v33);
  v35 = (char *)(a2 + v33);
  v36 = type metadata accessor for SleepingSampleBaselineAvailability();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v56((uint64_t)v34, (uint64_t)v35, v6);
    sub_23DBBFA18();
    v56((uint64_t)&v34[*(int *)(v40 + 36)], (uint64_t)&v35[*(int *)(v40 + 36)], v6);
    sub_23DBBFAFC();
    *(_QWORD *)&v34[*(int *)(v41 + 48)] = *(_QWORD *)&v35[*(int *)(v41 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v56((uint64_t)v34, (uint64_t)v35, v6);
    sub_23DBBFA18();
    v56((uint64_t)&v34[*(int *)(v38 + 36)], (uint64_t)&v35[*(int *)(v38 + 36)], v6);
    sub_23DBBFA90();
    *(_QWORD *)&v34[*(int *)(v39 + 48)] = *(_QWORD *)&v35[*(int *)(v39 + 48)];
    *(_QWORD *)&v34[*(int *)(v39 + 64)] = *(_QWORD *)&v35[*(int *)(v39 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  v42 = *(int *)(v57 + 24);
  v43 = (char *)(a1 + v42);
  v44 = (char *)(a2 + v42);
  v45 = (int *)type metadata accessor for SleepingSampleBaseline();
  v46 = *((_QWORD *)v45 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v46 + 48))(v44, 1, v45))
  {
    sub_23DBBF348(0, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v48 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v48(v43, v44, v16);
    v49 = v45[5];
    v58 = &v43[v49];
    v50 = &v44[v49];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v52 = v51;
    v53 = v16;
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
    v54(v58, v50, v51);
    v48(&v43[v45[6]], &v44[v45[6]], v53);
    v54(&v43[v45[7]], &v44[v45[7]], v52);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v46 + 56))(v43, 0, 1, v45);
  }
  return a1;
}

uint64_t assignWithCopy for SleepingSampleBaselineComparison(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int EnumCaseMultiPayload;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int *v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t, int *);
  int v57;
  int v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;

  v6 = sub_23DC2A154();
  v75 = *(_QWORD *)(v6 - 8);
  v76 = v6;
  (*(void (**)(uint64_t, uint64_t))(v75 + 24))(a1, a2);
  v7 = (int *)type metadata accessor for SleepingSampleAggregate();
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = v7[6];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v16 = v15;
  v77 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v77 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v16);
  v78 = a3;
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v77 + 16))(v13, v14, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v13, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v77 + 8))(v13, v16);
LABEL_6:
    sub_23DBB29B8();
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v77 + 24))(v13, v14, v16);
LABEL_7:
  v21 = v7[7];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = sub_23DC29BF0();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    sub_23DBBF348(0, &qword_25431F880, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 24))(v22, v23, v24);
LABEL_13:
  v30 = v7[8];
  v31 = (void *)(a1 + v30);
  v32 = (void *)(a2 + v30);
  v33 = sub_23DC29E48();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    v38 = v78;
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v38 = v78;
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
LABEL_18:
    sub_23DBBF348(0, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 24))(v31, v32, v33);
LABEL_19:
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  if (a1 != a2)
  {
    v40 = *(int *)(v38 + 20);
    v41 = (char *)(a1 + v40);
    v42 = (char *)(a2 + v40);
    sub_23DBB2BB0(a1 + v40, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v43 = type metadata accessor for SleepingSampleBaselineAvailability();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v48 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
      v48(v41, v42, v76);
      sub_23DBBFA18();
      v48(&v41[*(int *)(v49 + 36)], &v42[*(int *)(v49 + 36)], v76);
      sub_23DBBFAFC();
      *(_QWORD *)&v41[*(int *)(v50 + 48)] = *(_QWORD *)&v42[*(int *)(v50 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v45 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
      v45(v41, v42, v76);
      sub_23DBBFA18();
      v45(&v41[*(int *)(v46 + 36)], &v42[*(int *)(v46 + 36)], v76);
      sub_23DBBFA90();
      *(_QWORD *)&v41[*(int *)(v47 + 48)] = *(_QWORD *)&v42[*(int *)(v47 + 48)];
      *(_QWORD *)&v41[*(int *)(v47 + 64)] = *(_QWORD *)&v42[*(int *)(v47 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
  }
  v51 = *(int *)(v38 + 24);
  v52 = (char *)(a1 + v51);
  v53 = (char *)(a2 + v51);
  v54 = (int *)type metadata accessor for SleepingSampleBaseline();
  v55 = *((_QWORD *)v54 - 1);
  v56 = *(uint64_t (**)(char *, uint64_t, int *))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56(v53, 1, v54);
  if (v57)
  {
    if (!v58)
    {
      v60 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
      v60(v52, v53, v16);
      v61 = v54[5];
      v79 = &v52[v61];
      v62 = &v53[v61];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v64 = v63;
      v65 = v16;
      v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 16);
      v66(v79, v62, v63);
      v60(&v52[v54[6]], &v53[v54[6]], v65);
      v66(&v52[v54[7]], &v53[v54[7]], v64);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v55 + 56))(v52, 0, 1, v54);
      return a1;
    }
  }
  else
  {
    if (!v58)
    {
      v67 = *(void (**)(char *, char *, uint64_t))(v77 + 24);
      v67(v52, v53, v16);
      v68 = v54[5];
      v69 = &v52[v68];
      v70 = &v53[v68];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v72 = v71;
      v73 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 24);
      v73(v69, v70, v71);
      v67(&v52[v54[6]], &v53[v54[6]], v16);
      v73(&v52[v54[7]], &v53[v54[7]], v72);
      return a1;
    }
    sub_23DBB2BB0((uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
  }
  sub_23DBBF348(0, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  return a1;
}

uint64_t initializeWithTake for SleepingSampleBaselineComparison(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  int EnumCaseMultiPayload;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;

  v6 = sub_23DC2A154();
  v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v56(a1, a2, v6);
  v7 = (int *)type metadata accessor for SleepingSampleAggregate();
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = v7[6];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  v57 = a3;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
  {
    v18 = v17;
    sub_23DBB29B8();
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v13, v14, v16);
    v18 = v17;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
  }
  v20 = v7[7];
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  v23 = sub_23DC29BF0();
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    sub_23DBBF348(0, &qword_25431F880, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v24 + 32))(v21, v22, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v26 = v7[8];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  v29 = sub_23DC29E48();
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    sub_23DBBF348(0, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v27, v28, v29);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  v32 = v18;
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  v33 = *(int *)(v57 + 20);
  v34 = (char *)(a1 + v33);
  v35 = (char *)(a2 + v33);
  v36 = type metadata accessor for SleepingSampleBaselineAvailability();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v56((uint64_t)v34, (uint64_t)v35, v6);
    sub_23DBBFA18();
    v56((uint64_t)&v34[*(int *)(v40 + 36)], (uint64_t)&v35[*(int *)(v40 + 36)], v6);
    sub_23DBBFAFC();
    *(_QWORD *)&v34[*(int *)(v41 + 48)] = *(_QWORD *)&v35[*(int *)(v41 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v56((uint64_t)v34, (uint64_t)v35, v6);
    sub_23DBBFA18();
    v56((uint64_t)&v34[*(int *)(v38 + 36)], (uint64_t)&v35[*(int *)(v38 + 36)], v6);
    sub_23DBBFA90();
    *(_QWORD *)&v34[*(int *)(v39 + 48)] = *(_QWORD *)&v35[*(int *)(v39 + 48)];
    *(_QWORD *)&v34[*(int *)(v39 + 64)] = *(_QWORD *)&v35[*(int *)(v39 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  v42 = *(int *)(v57 + 24);
  v43 = (char *)(a1 + v42);
  v44 = (char *)(a2 + v42);
  v45 = (int *)type metadata accessor for SleepingSampleBaseline();
  v46 = *((_QWORD *)v45 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v46 + 48))(v44, 1, v45))
  {
    sub_23DBBF348(0, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v48 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    v48(v43, v44, v16);
    v49 = v45[5];
    v58 = &v43[v49];
    v50 = &v44[v49];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v52 = v51;
    v53 = v16;
    v54 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 32);
    v54(v58, v50, v51);
    v48(&v43[v45[6]], &v44[v45[6]], v53);
    v54(&v43[v45[7]], &v44[v45[7]], v52);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v46 + 56))(v43, 0, 1, v45);
  }
  return a1;
}

uint64_t assignWithTake for SleepingSampleBaselineComparison(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  int EnumCaseMultiPayload;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int *v54;
  uint64_t v55;
  uint64_t (*v56)(char *, uint64_t, int *);
  int v57;
  int v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;

  v6 = sub_23DC2A154();
  v75 = *(_QWORD *)(v6 - 8);
  v76 = v6;
  (*(void (**)(uint64_t, uint64_t))(v75 + 40))(a1, a2);
  v7 = (int *)type metadata accessor for SleepingSampleAggregate();
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = v7[6];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v16 = v15;
  v77 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v77 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v16);
  v78 = a3;
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v77 + 32))(v13, v14, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v13, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v77 + 8))(v13, v16);
LABEL_6:
    sub_23DBB29B8();
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v77 + 40))(v13, v14, v16);
LABEL_7:
  v21 = v7[7];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = sub_23DC29BF0();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    sub_23DBBF348(0, &qword_25431F880, (void (*)(uint64_t))MEMORY[0x24BDCB878]);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_13:
  v30 = v7[8];
  v31 = (void *)(a1 + v30);
  v32 = (void *)(a2 + v30);
  v33 = sub_23DC29E48();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    v38 = v78;
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v31, v32, v33);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  v38 = v78;
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
LABEL_18:
    sub_23DBBF348(0, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v31, v32, v33);
LABEL_19:
  *(_BYTE *)(a1 + v7[9]) = *(_BYTE *)(a2 + v7[9]);
  if (a1 != a2)
  {
    v40 = *(int *)(v38 + 20);
    v41 = (char *)(a1 + v40);
    v42 = (char *)(a2 + v40);
    sub_23DBB2BB0(a1 + v40, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v43 = type metadata accessor for SleepingSampleBaselineAvailability();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v48 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
      v48(v41, v42, v76);
      sub_23DBBFA18();
      v48(&v41[*(int *)(v49 + 36)], &v42[*(int *)(v49 + 36)], v76);
      sub_23DBBFAFC();
      *(_QWORD *)&v41[*(int *)(v50 + 48)] = *(_QWORD *)&v42[*(int *)(v50 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v45 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
      v45(v41, v42, v76);
      sub_23DBBFA18();
      v45(&v41[*(int *)(v46 + 36)], &v42[*(int *)(v46 + 36)], v76);
      sub_23DBBFA90();
      *(_QWORD *)&v41[*(int *)(v47 + 48)] = *(_QWORD *)&v42[*(int *)(v47 + 48)];
      *(_QWORD *)&v41[*(int *)(v47 + 64)] = *(_QWORD *)&v42[*(int *)(v47 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
  }
  v51 = *(int *)(v38 + 24);
  v52 = (char *)(a1 + v51);
  v53 = (char *)(a2 + v51);
  v54 = (int *)type metadata accessor for SleepingSampleBaseline();
  v55 = *((_QWORD *)v54 - 1);
  v56 = *(uint64_t (**)(char *, uint64_t, int *))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56(v53, 1, v54);
  if (v57)
  {
    if (!v58)
    {
      v60 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
      v60(v52, v53, v16);
      v61 = v54[5];
      v79 = &v52[v61];
      v62 = &v53[v61];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v64 = v63;
      v65 = v16;
      v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 32);
      v66(v79, v62, v63);
      v60(&v52[v54[6]], &v53[v54[6]], v65);
      v66(&v52[v54[7]], &v53[v54[7]], v64);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v55 + 56))(v52, 0, 1, v54);
      return a1;
    }
  }
  else
  {
    if (!v58)
    {
      v67 = *(void (**)(char *, char *, uint64_t))(v77 + 40);
      v67(v52, v53, v16);
      v68 = v54[5];
      v69 = &v52[v68];
      v70 = &v53[v68];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v72 = v71;
      v73 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 40);
      v73(v69, v70, v71);
      v67(&v52[v54[6]], &v53[v54[6]], v16);
      v73(&v52[v54[7]], &v53[v54[7]], v72);
      return a1;
    }
    sub_23DBB2BB0((uint64_t)v52, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
  }
  sub_23DBBF348(0, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
  memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleBaselineComparison()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBC18F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for SleepingSampleAggregate();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for SleepingSampleBaselineAvailability();
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 20);
    }
    else
    {
      sub_23DBBF348(0, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
      v8 = v14;
      v12 = *(_QWORD *)(v14 - 8);
      v13 = *(int *)(a3 + 24);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleBaselineComparison()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBC19A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = type metadata accessor for SleepingSampleAggregate();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for SleepingSampleBaselineAvailability();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 20);
    }
    else
    {
      sub_23DBBF348(0, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
      v10 = v16;
      v14 = *(_QWORD *)(v16 - 8);
      v15 = *(int *)(a4 + 24);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23DBC1A58()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for SleepingSampleAggregate();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SleepingSampleBaselineAvailability();
    if (v1 <= 0x3F)
    {
      sub_23DBBF348(319, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.Classification()
{
  return &type metadata for SleepingSampleBaselineComparison.Classification;
}

uint64_t _s13HealthBalance32SleepingSampleBaselineComparisonV14ClassificationOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23DBC1B6C + 4 * byte_23DC2BD51[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23DBC1BA0 + 4 * byte_23DC2BD4C[v4]))();
}

uint64_t sub_23DBC1BA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBC1BA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBC1BB0);
  return result;
}

uint64_t sub_23DBC1BBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBC1BC4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23DBC1BC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBC1BD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.Classification.CodingKeys()
{
  return &type metadata for SleepingSampleBaselineComparison.Classification.CodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.Classification.HighCodingKeys()
{
  return &type metadata for SleepingSampleBaselineComparison.Classification.HighCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.Classification.LowCodingKeys()
{
  return &type metadata for SleepingSampleBaselineComparison.Classification.LowCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.Classification.TypicalCodingKeys()
{
  return &type metadata for SleepingSampleBaselineComparison.Classification.TypicalCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.Classification.UnavailableCodingKeys()
{
  return &type metadata for SleepingSampleBaselineComparison.Classification.UnavailableCodingKeys;
}

uint64_t getEnumTagSinglePayload for SleepingSampleBaselineComparison.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleBaselineComparison.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DBC1D08 + 4 * byte_23DC2BD5B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DBC1D3C + 4 * byte_23DC2BD56[v4]))();
}

uint64_t sub_23DBC1D3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBC1D44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBC1D4CLL);
  return result;
}

uint64_t sub_23DBC1D58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBC1D60);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DBC1D64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBC1D6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineComparison.CodingKeys()
{
  return &type metadata for SleepingSampleBaselineComparison.CodingKeys;
}

unint64_t sub_23DBC1D8C()
{
  unint64_t result;

  result = qword_256CE96E0;
  if (!qword_256CE96E0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C058, &type metadata for SleepingSampleBaselineComparison.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE96E0);
  }
  return result;
}

unint64_t sub_23DBC1DD4()
{
  unint64_t result;

  result = qword_256CE96E8;
  if (!qword_256CE96E8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C250, &type metadata for SleepingSampleBaselineComparison.Classification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE96E8);
  }
  return result;
}

unint64_t sub_23DBC1E1C()
{
  unint64_t result;

  result = qword_256CE96F0;
  if (!qword_256CE96F0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C1C0, &type metadata for SleepingSampleBaselineComparison.Classification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE96F0);
  }
  return result;
}

unint64_t sub_23DBC1E64()
{
  unint64_t result;

  result = qword_256CE96F8;
  if (!qword_256CE96F8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C1E8, &type metadata for SleepingSampleBaselineComparison.Classification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE96F8);
  }
  return result;
}

unint64_t sub_23DBC1EAC()
{
  unint64_t result;

  result = qword_256CE9700;
  if (!qword_256CE9700)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C170, &type metadata for SleepingSampleBaselineComparison.Classification.HighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9700);
  }
  return result;
}

unint64_t sub_23DBC1EF4()
{
  unint64_t result;

  result = qword_256CE9708;
  if (!qword_256CE9708)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C198, &type metadata for SleepingSampleBaselineComparison.Classification.HighCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9708);
  }
  return result;
}

unint64_t sub_23DBC1F3C()
{
  unint64_t result;

  result = qword_256CE9710;
  if (!qword_256CE9710)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C120, &type metadata for SleepingSampleBaselineComparison.Classification.LowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9710);
  }
  return result;
}

unint64_t sub_23DBC1F84()
{
  unint64_t result;

  result = qword_256CE9718;
  if (!qword_256CE9718)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C148, &type metadata for SleepingSampleBaselineComparison.Classification.LowCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9718);
  }
  return result;
}

unint64_t sub_23DBC1FCC()
{
  unint64_t result;

  result = qword_256CE9720;
  if (!qword_256CE9720)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C0D0, &type metadata for SleepingSampleBaselineComparison.Classification.TypicalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9720);
  }
  return result;
}

unint64_t sub_23DBC2014()
{
  unint64_t result;

  result = qword_256CE9728;
  if (!qword_256CE9728)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C0F8, &type metadata for SleepingSampleBaselineComparison.Classification.TypicalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9728);
  }
  return result;
}

unint64_t sub_23DBC205C()
{
  unint64_t result;

  result = qword_256CE9730;
  if (!qword_256CE9730)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C080, &type metadata for SleepingSampleBaselineComparison.Classification.UnavailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9730);
  }
  return result;
}

unint64_t sub_23DBC20A4()
{
  unint64_t result;

  result = qword_256CE9738;
  if (!qword_256CE9738)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C0A8, &type metadata for SleepingSampleBaselineComparison.Classification.UnavailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9738);
  }
  return result;
}

unint64_t sub_23DBC20EC()
{
  unint64_t result;

  result = qword_25431F9E0;
  if (!qword_25431F9E0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2BFC8, &type metadata for SleepingSampleBaselineComparison.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F9E0);
  }
  return result;
}

unint64_t sub_23DBC2134()
{
  unint64_t result;

  result = qword_25431F9D8;
  if (!qword_25431F9D8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2BFF0, &type metadata for SleepingSampleBaselineComparison.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F9D8);
  }
  return result;
}

uint64_t sub_23DBC2178(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7461676572676761 && a2 == 0xE900000000000065;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E696C65736162 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23DBC22F0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1751607656 && a2 == 0xE400000000000000;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7827308 && a2 == 0xE300000000000000 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C616369707974 && a2 == 0xE700000000000000 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x616C696176616E75 && a2 == 0xEB00000000656C62)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void sub_23DBC24A0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CE9740)
  {
    sub_23DBBF348(255, &qword_25431F760, (void (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CE9740);
  }
}

uint64_t TrainingLoadChronicBaseline.init(target:firstDayWithData:minConsecutiveDaysOfDataRequired:chronicBaselineCandidate:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t ChronicBaseline;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  double *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  double v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;

  v55 = a5;
  v54 = a4;
  v59 = a3;
  v60 = a6;
  v62 = a1;
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  v8 = MEMORY[0x24BDAC7A8](ChronicBaseline);
  v56 = (uint64_t)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v53 = (double *)((char *)&v50 - v10);
  sub_23DBC2A3C();
  v12 = v11;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v50 - v16;
  sub_23DBBFA18();
  v57 = v18;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v58 = (uint64_t)&v50 - v22;
  sub_23DBC2AA0();
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_23DC2A154();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v61 = (char *)&v50 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(a2, (uint64_t)v25, (uint64_t (*)(_QWORD))sub_23DBC2AA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    sub_23DBB2BB0(a2, (uint64_t (*)(_QWORD))sub_23DBC2AA0);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v62, v26);
    sub_23DBB2BB0((uint64_t)v25, (uint64_t (*)(_QWORD))sub_23DBC2AA0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    v50 = v12;
    v51 = a2;
    v52 = ChronicBaseline;
    v30 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v30(v61, v25, v26);
    sub_23DBB2CB0((unint64_t *)&qword_25431FAC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
    result = sub_23DC2A1C0();
    if ((result & 1) != 0)
    {
      v31 = v50;
      v32 = &v17[*(int *)(v50 + 48)];
      v33 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
      v33(v17, v61, v26);
      v33(v32, v62, v26);
      v34 = &v15[*(int *)(v31 + 48)];
      v33(v15, v17, v26);
      v33(v34, v32, v26);
      v30(v21, v15, v26);
      v35 = *(void (**)(char *, uint64_t))(v27 + 8);
      v35(v34, v26);
      v36 = &v15[*(int *)(v31 + 48)];
      v30(v15, v17, v26);
      v30(v36, v32, v26);
      v30(&v21[*(int *)(v57 + 36)], v36, v26);
      v35(v15, v26);
      v37 = (uint64_t)v21;
      v38 = v58;
      sub_23DBBCEB0(v37, v58, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      sub_23DBB2CB0(&qword_256CE9748, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
      sub_23DC2A4F0();
      v39 = v59;
      if (v63 >= v59)
      {
        sub_23DBB2BB0(v51, (uint64_t (*)(_QWORD))sub_23DBC2AA0);
        v35(v62, v26);
        sub_23DBB2BB0(v38, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        v35(v61, v26);
        v48 = v54;
        if ((v55 & 1) != 0)
          v48 = 0.0;
        v49 = v53;
        *v53 = v48;
        swift_storeEnumTagMultiPayload();
        v47 = (uint64_t)v49;
      }
      else
      {
        sub_23DBBFA90();
        v40 = v39;
        v42 = *(int *)(v41 + 48);
        v43 = *(int *)(v41 + 64);
        v44 = (void (*)(uint64_t, uint64_t))v35;
        v45 = v56;
        sub_23DBB2B6C(v38, v56, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        sub_23DC2A4F0();
        v46 = v63;
        sub_23DBB2BB0(v51, (uint64_t (*)(_QWORD))sub_23DBC2AA0);
        v44((uint64_t)v62, v26);
        sub_23DBB2BB0(v38, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        v44((uint64_t)v61, v26);
        *(_QWORD *)(v45 + v42) = v46;
        *(_QWORD *)(v45 + v43) = v40;
        swift_storeEnumTagMultiPayload();
        v47 = v45;
      }
      return sub_23DBBCEB0(v47, v60, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t type metadata accessor for TrainingLoadChronicBaseline()
{
  uint64_t result;

  result = qword_25431EC20;
  if (!qword_25431EC20)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DBC2A3C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_25431F890)
  {
    sub_23DC2A154();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_25431F890);
  }
}

void sub_23DBC2AA0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE9570)
  {
    sub_23DC2A154();
    v0 = sub_23DC2A4C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE9570);
  }
}

uint64_t TrainingLoadChronicBaseline.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t ChronicBaseline;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v11;

  v1 = v0;
  sub_23DBBFA18();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  MEMORY[0x24BDAC7A8](ChronicBaseline);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(v1, (uint64_t)v7, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23DC2A88C();
      return sub_23DC2A8A4();
    }
    else
    {
      return sub_23DC2A88C();
    }
  }
  else
  {
    sub_23DBBFA90();
    sub_23DBBCEB0((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    sub_23DC2A88C();
    sub_23DC2A154();
    sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
    sub_23DC2A190();
    sub_23DC2A190();
    sub_23DC2A88C();
    sub_23DC2A88C();
    return sub_23DBB2BB0((uint64_t)v4, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  }
}

uint64_t sub_23DBC2CBC()
{
  return 1;
}

uint64_t sub_23DBC2CC4()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBC2D04()
{
  return sub_23DC2A88C();
}

uint64_t sub_23DBC2D28()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBC2D64()
{
  return 0x656E696C65736162;
}

uint64_t sub_23DBC2D7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x656E696C65736162 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23DC2A7FC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23DBC2E10()
{
  sub_23DBC4098();
  return sub_23DC2A964();
}

uint64_t sub_23DBC2E38()
{
  sub_23DBC4098();
  return sub_23DC2A970();
}

uint64_t sub_23DBC2E60()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0x6C62616C69617661;
  if (*v0)
    return v1;
  else
    return 0x617461446F6ELL;
}

uint64_t sub_23DBC2EC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBC4CF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DBC2EE4()
{
  sub_23DBC4164();
  return sub_23DC2A964();
}

uint64_t sub_23DBC2F0C()
{
  sub_23DBC4164();
  return sub_23DC2A970();
}

uint64_t sub_23DBC2F34()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746E756F63;
  if (*v0 != 1)
    v1 = 0x6465726975716572;
  if (*v0)
    return v1;
  else
    return 0x64657A796C616E61;
}

uint64_t sub_23DBC2F98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBC4E40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DBC2FBC()
{
  sub_23DBC40DC();
  return sub_23DC2A964();
}

uint64_t sub_23DBC2FE4()
{
  sub_23DBC40DC();
  return sub_23DC2A970();
}

uint64_t sub_23DBC300C()
{
  sub_23DBC4120();
  return sub_23DC2A964();
}

uint64_t sub_23DBC3034()
{
  sub_23DBC4120();
  return sub_23DC2A970();
}

uint64_t TrainingLoadChronicBaseline.encode(to:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t ChronicBaseline;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int EnumCaseMultiPayload;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  sub_23DBB2A64(0, &qword_256CE9750, (uint64_t (*)(void))sub_23DBC4098, (uint64_t)&type metadata for TrainingLoadChronicBaseline.AvailableCodingKeys, MEMORY[0x24BEE3520]);
  v41 = v3;
  v35 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v40 = (char *)&v34 - v4;
  sub_23DBB2A64(0, &qword_256CE9760, (uint64_t (*)(void))sub_23DBC40DC, (uint64_t)&type metadata for TrainingLoadChronicBaseline.InsufficientDataCodingKeys, v2);
  v42 = v5;
  v36 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v43 = (char *)&v34 - v6;
  sub_23DBBFA18();
  v39 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v38 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2A64(0, &qword_256CE9770, (uint64_t (*)(void))sub_23DBC4120, (uint64_t)&type metadata for TrainingLoadChronicBaseline.NoDataCodingKeys, v2);
  v37 = v9;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v34 - v11;
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  MEMORY[0x24BDAC7A8](ChronicBaseline);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2A64(0, &qword_256CE9780, (uint64_t (*)(void))sub_23DBC4164, (uint64_t)&type metadata for TrainingLoadChronicBaseline.CodingKeys, v2);
  v46 = v16;
  v44 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v34 - v17;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBC4164();
  v45 = v18;
  sub_23DC2A8C8();
  sub_23DBB2B6C(v48, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v54 = 2;
      sub_23DBC4098();
      v20 = v40;
      v22 = v45;
      v21 = v46;
      sub_23DC2A778();
      v23 = v41;
      sub_23DC2A7A8();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v20, v23);
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v22, v21);
    }
    else
    {
      v49 = 0;
      sub_23DBC4120();
      v33 = v45;
      v32 = v46;
      sub_23DC2A778();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v37);
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v33, v32);
    }
  }
  else
  {
    sub_23DBBFA90();
    v26 = *(_QWORD *)&v15[*(int *)(v25 + 64)];
    v27 = v38;
    sub_23DBBCEB0((uint64_t)v15, v38, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    v53 = 1;
    sub_23DBC40DC();
    v29 = v45;
    v28 = v46;
    sub_23DC2A778();
    v52 = 0;
    sub_23DBC41A8((unint64_t *)&unk_25431EF50, &qword_25431EF38, MEMORY[0x24BDD2498], MEMORY[0x24BEE1B98]);
    v30 = v42;
    v31 = v47;
    sub_23DC2A7C0();
    if (!v31)
    {
      v48 = v26;
      v51 = 1;
      sub_23DC2A7B4();
      v50 = 2;
      sub_23DC2A7B4();
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v43, v30);
    sub_23DBB2BB0(v27, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v29, v28);
  }
}

uint64_t TrainingLoadChronicBaseline.hashValue.getter()
{
  sub_23DC2A880();
  TrainingLoadChronicBaseline.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t TrainingLoadChronicBaseline.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t ChronicBaseline;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;

  v58 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_23DBB2A64(0, &qword_256CE9790, (uint64_t (*)(void))sub_23DBC4098, (uint64_t)&type metadata for TrainingLoadChronicBaseline.AvailableCodingKeys, MEMORY[0x24BEE33E0]);
  v57 = v4;
  v53 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v59 = (char *)&v49 - v5;
  sub_23DBB2A64(0, &qword_256CE9798, (uint64_t (*)(void))sub_23DBC40DC, (uint64_t)&type metadata for TrainingLoadChronicBaseline.InsufficientDataCodingKeys, v3);
  v63 = v6;
  v54 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v62 = (char *)&v49 - v7;
  sub_23DBB2A64(0, &qword_256CE97A0, (uint64_t (*)(void))sub_23DBC4120, (uint64_t)&type metadata for TrainingLoadChronicBaseline.NoDataCodingKeys, v3);
  v55 = *(_QWORD *)(v8 - 8);
  v56 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v61 = (char *)&v49 - v9;
  sub_23DBB2A64(0, &qword_256CE97A8, (uint64_t (*)(void))sub_23DBC4164, (uint64_t)&type metadata for TrainingLoadChronicBaseline.CodingKeys, v3);
  v11 = v10;
  v60 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v49 - v12;
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  v15 = MEMORY[0x24BDAC7A8](ChronicBaseline);
  v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v49 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v49 - v21;
  v23 = a1[3];
  v64 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v23);
  sub_23DBC4164();
  v24 = v65;
  sub_23DC2A8BC();
  if (v24)
    goto LABEL_9;
  v50 = v17;
  v51 = v22;
  v52 = (uint64_t)v20;
  v26 = v61;
  v25 = v62;
  v27 = v63;
  v65 = ChronicBaseline;
  v28 = sub_23DC2A76C();
  if (*(_QWORD *)(v28 + 16) != 1)
  {
    v30 = sub_23DC2A5E0();
    swift_allocError();
    v32 = v31;
    sub_23DBBF970();
    *v32 = v65;
    sub_23DC2A718();
    sub_23DC2A5C8();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, *MEMORY[0x24BEE26D0], v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v11);
LABEL_9:
    v36 = (uint64_t)v64;
    return __swift_destroy_boxed_opaque_existential_1(v36);
  }
  if (*(_BYTE *)(v28 + 32))
  {
    if (*(_BYTE *)(v28 + 32) == 1)
    {
      v70 = 1;
      sub_23DBC40DC();
      sub_23DC2A70C();
      sub_23DBBFA18();
      v69 = 0;
      sub_23DBC41A8((unint64_t *)&unk_25431F290, (unint64_t *)&unk_25431F270, MEMORY[0x24BDD24B8], MEMORY[0x24BEE1BC8]);
      v29 = v25;
      sub_23DC2A760();
      v68 = 1;
      v41 = sub_23DC2A754();
      sub_23DBBFA90();
      v42 = v27;
      v44 = v43;
      *(_QWORD *)(v52 + *(int *)(v43 + 48)) = v41;
      v67 = 2;
      v45 = sub_23DC2A754();
      v46 = v60;
      v61 = (char *)*(int *)(v44 + 64);
      v47 = v45;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v29, v42);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v13, v11);
      v48 = v52;
      *(_QWORD *)&v61[v52] = v47;
    }
    else
    {
      v71 = 2;
      sub_23DBC4098();
      v34 = v59;
      sub_23DC2A70C();
      v35 = v57;
      sub_23DC2A748();
      v39 = v38;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v11);
      v48 = (uint64_t)v50;
      *v50 = v39;
    }
    swift_storeEnumTagMultiPayload();
    v33 = (uint64_t)v51;
    sub_23DBBCEB0(v48, (uint64_t)v51, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
  }
  else
  {
    v66 = 0;
    sub_23DBC4120();
    sub_23DC2A70C();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v26, v56);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v13, v11);
    v33 = (uint64_t)v51;
    swift_storeEnumTagMultiPayload();
  }
  v40 = (uint64_t)v64;
  sub_23DBBCEB0(v33, v58, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
  v36 = v40;
  return __swift_destroy_boxed_opaque_existential_1(v36);
}

uint64_t sub_23DBC3C3C()
{
  sub_23DC2A880();
  TrainingLoadChronicBaseline.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBC3C7C()
{
  sub_23DC2A880();
  TrainingLoadChronicBaseline.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBC3CB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TrainingLoadChronicBaseline.init(from:)(a1, a2);
}

uint64_t sub_23DBC3CC8(_QWORD *a1)
{
  return TrainingLoadChronicBaseline.encode(to:)(a1);
}

uint64_t _s13HealthBalance27TrainingLoadChronicBaselineO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t ChronicBaseline;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  double *v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(_QWORD);
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned __int8 v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a2;
  sub_23DBBFA18();
  v4 = v3;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v38 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v38 - v11;
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  v14 = MEMORY[0x24BDAC7A8](ChronicBaseline);
  v16 = (double *)((char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v14);
  v42 = (uint64_t)&v38 - v17;
  sub_23DBC4FB0();
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (double *)&v21[*(int *)(v19 + 48)];
  sub_23DBB2B6C(a1, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
  sub_23DBB2B6C(v43, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23DBB2B6C((uint64_t)v21, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v24 = *v16 == *v22;
LABEL_15:
        v32 = (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline;
        goto LABEL_16;
      }
    }
    else if (swift_getEnumCaseMultiPayload() == 2)
    {
      v24 = 1;
      goto LABEL_15;
    }
  }
  else
  {
    v43 = v4;
    v25 = (uint64_t)v7;
    v26 = v42;
    sub_23DBB2B6C((uint64_t)v21, v42, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
    sub_23DBBFA90();
    v28 = *(int *)(v27 + 48);
    v29 = *(_QWORD *)(v26 + v28);
    v30 = *(int *)(v27 + 64);
    v31 = *(_QWORD *)(v26 + v30);
    if (!swift_getEnumCaseMultiPayload())
    {
      v40 = v29;
      v41 = v31;
      v33 = *(_QWORD *)((char *)v22 + v30);
      v38 = *(_QWORD *)((char *)v22 + v28);
      v39 = v33;
      sub_23DBBCEB0((uint64_t)v22, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      sub_23DC2A154();
      sub_23DBB2CB0(&qword_256CE9818, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B0]);
      v34 = v42;
      v35 = sub_23DC2A1F0();
      sub_23DBB2B6C(v34, (uint64_t)v10, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      sub_23DBB2B6C((uint64_t)v12, v25, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      if ((v35 & 1) != 0)
      {
        v36 = sub_23DC2A1F0();
        sub_23DBB2BB0(v25, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        sub_23DBB2BB0((uint64_t)v10, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        sub_23DBB2BB0((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        sub_23DBB2BB0(v42, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        if (v41 == v39)
          v24 = v36 & (v40 == v38);
        else
          v24 = 0;
      }
      else
      {
        sub_23DBB2BB0(v25, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        sub_23DBB2BB0((uint64_t)v10, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        sub_23DBB2BB0((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        sub_23DBB2BB0(v42, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        v24 = 0;
      }
      goto LABEL_15;
    }
    sub_23DBB2BB0(v42, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  }
  v24 = 0;
  v32 = (uint64_t (*)(_QWORD))sub_23DBC4FB0;
LABEL_16:
  sub_23DBB2BB0((uint64_t)v21, v32);
  return v24;
}

unint64_t sub_23DBC4098()
{
  unint64_t result;

  result = qword_256CE9758;
  if (!qword_256CE9758)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C92C, &type metadata for TrainingLoadChronicBaseline.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9758);
  }
  return result;
}

unint64_t sub_23DBC40DC()
{
  unint64_t result;

  result = qword_256CE9768;
  if (!qword_256CE9768)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C8DC, &type metadata for TrainingLoadChronicBaseline.InsufficientDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9768);
  }
  return result;
}

unint64_t sub_23DBC4120()
{
  unint64_t result;

  result = qword_256CE9778;
  if (!qword_256CE9778)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C88C, &type metadata for TrainingLoadChronicBaseline.NoDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9778);
  }
  return result;
}

unint64_t sub_23DBC4164()
{
  unint64_t result;

  result = qword_256CE9788;
  if (!qword_256CE9788)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C83C, &type metadata for TrainingLoadChronicBaseline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9788);
  }
  return result;
}

uint64_t sub_23DBC41A8(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_23DBBFA18();
    v10 = v9;
    v11 = sub_23DBB2CB0(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], a3);
    result = MEMORY[0x24263E440](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DBC4228()
{
  return sub_23DBB2CB0(&qword_256CE97B0, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadChronicBaseline, (uint64_t)&protocol conformance descriptor for TrainingLoadChronicBaseline);
}

uint64_t *initializeBufferWithCopyOfBuffer for TrainingLoadChronicBaseline(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v8 = sub_23DC2A154();
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    v9(a1, a2, v8);
    sub_23DBBFA18();
    v9((uint64_t *)((char *)a1 + *(int *)(v10 + 36)), (uint64_t *)((char *)a2 + *(int *)(v10 + 36)), v8);
    sub_23DBBFA90();
    *(uint64_t *)((char *)a1 + *(int *)(v11 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v11 + 48));
    *(uint64_t *)((char *)a1 + *(int *)(v11 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v11 + 64));
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for TrainingLoadChronicBaseline(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v3 = sub_23DC2A154();
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
    v5(a1, v3);
    sub_23DBBFA18();
    return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + *(int *)(v4 + 36), v3);
  }
  return result;
}

char *initializeWithCopy for TrainingLoadChronicBaseline(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23DC2A154();
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    sub_23DBBFA18();
    v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
    sub_23DBBFA90();
    *(_QWORD *)&a1[*(int *)(v9 + 48)] = *(_QWORD *)&a2[*(int *)(v9 + 48)];
    *(_QWORD *)&a1[*(int *)(v9 + 64)] = *(_QWORD *)&a2[*(int *)(v9 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithCopy for TrainingLoadChronicBaseline(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_23DBB2BB0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23DC2A154();
      v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      sub_23DBBFA18();
      v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
      sub_23DBBFA90();
      *(_QWORD *)&a1[*(int *)(v9 + 48)] = *(_QWORD *)&a2[*(int *)(v9 + 48)];
      *(_QWORD *)&a1[*(int *)(v9 + 64)] = *(_QWORD *)&a2[*(int *)(v9 + 64)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

char *initializeWithTake for TrainingLoadChronicBaseline(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23DC2A154();
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    sub_23DBBFA18();
    v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
    sub_23DBBFA90();
    *(_QWORD *)&a1[*(int *)(v9 + 48)] = *(_QWORD *)&a2[*(int *)(v9 + 48)];
    *(_QWORD *)&a1[*(int *)(v9 + 64)] = *(_QWORD *)&a2[*(int *)(v9 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for TrainingLoadChronicBaseline(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_23DBB2BB0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23DC2A154();
      v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      sub_23DBBFA18();
      v7(&a1[*(int *)(v8 + 36)], &a2[*(int *)(v8 + 36)], v6);
      sub_23DBBFA90();
      *(_QWORD *)&a1[*(int *)(v9 + 48)] = *(_QWORD *)&a2[*(int *)(v9 + 48)];
      *(_QWORD *)&a1[*(int *)(v9 + 64)] = *(_QWORD *)&a2[*(int *)(v9 + 64)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleBaselineAvailability(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for SleepingSampleBaselineAvailability(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_23DBC4754()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_23DBC4764()
{
  unint64_t v0;
  uint64_t v1;
  _QWORD v2[6];

  sub_23DBBFA18();
  if (v0 <= 0x3F)
  {
    v1 = MEMORY[0x24BEE0178] + 64;
    swift_getTupleTypeLayout3();
    v2[4] = v2;
    v2[5] = v1;
    swift_initEnumMetadataMultiPayload();
  }
}

ValueMetadata *type metadata accessor for TrainingLoadChronicBaseline.CodingKeys()
{
  return &type metadata for TrainingLoadChronicBaseline.CodingKeys;
}

ValueMetadata *type metadata accessor for TrainingLoadChronicBaseline.NoDataCodingKeys()
{
  return &type metadata for TrainingLoadChronicBaseline.NoDataCodingKeys;
}

uint64_t _s13HealthBalance27TrainingLoadChronicBaselineO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DBC4864 + 4 * byte_23DC2C465[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DBC4898 + 4 * byte_23DC2C460[v4]))();
}

uint64_t sub_23DBC4898(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBC48A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBC48A8);
  return result;
}

uint64_t sub_23DBC48B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBC48BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DBC48C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBC48C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadChronicBaseline.InsufficientDataCodingKeys()
{
  return &type metadata for TrainingLoadChronicBaseline.InsufficientDataCodingKeys;
}

uint64_t getEnumTagSinglePayload for TrainingLoadChronicBaseline.AvailableCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for TrainingLoadChronicBaseline.AvailableCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DBC4974 + 4 * byte_23DC2C46A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DBC4994 + 4 * byte_23DC2C46F[v4]))();
}

_BYTE *sub_23DBC4974(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DBC4994(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DBC499C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DBC49A4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DBC49AC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DBC49B4(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_23DBC49C0()
{
  return 0;
}

ValueMetadata *type metadata accessor for TrainingLoadChronicBaseline.AvailableCodingKeys()
{
  return &type metadata for TrainingLoadChronicBaseline.AvailableCodingKeys;
}

unint64_t sub_23DBC49DC()
{
  unint64_t result;

  result = qword_256CE97B8;
  if (!qword_256CE97B8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C654, &type metadata for TrainingLoadChronicBaseline.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE97B8);
  }
  return result;
}

unint64_t sub_23DBC4A24()
{
  unint64_t result;

  result = qword_256CE97C0;
  if (!qword_256CE97C0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C70C, &type metadata for TrainingLoadChronicBaseline.InsufficientDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE97C0);
  }
  return result;
}

unint64_t sub_23DBC4A6C()
{
  unint64_t result;

  result = qword_256CE97C8;
  if (!qword_256CE97C8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C814, &type metadata for TrainingLoadChronicBaseline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE97C8);
  }
  return result;
}

unint64_t sub_23DBC4AB4()
{
  unint64_t result;

  result = qword_256CE97D0;
  if (!qword_256CE97D0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C784, &type metadata for TrainingLoadChronicBaseline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE97D0);
  }
  return result;
}

unint64_t sub_23DBC4AFC()
{
  unint64_t result;

  result = qword_256CE97D8;
  if (!qword_256CE97D8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C7AC, &type metadata for TrainingLoadChronicBaseline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE97D8);
  }
  return result;
}

unint64_t sub_23DBC4B44()
{
  unint64_t result;

  result = qword_256CE97E0;
  if (!qword_256CE97E0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C734, &type metadata for TrainingLoadChronicBaseline.NoDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE97E0);
  }
  return result;
}

unint64_t sub_23DBC4B8C()
{
  unint64_t result;

  result = qword_256CE97E8;
  if (!qword_256CE97E8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C75C, &type metadata for TrainingLoadChronicBaseline.NoDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE97E8);
  }
  return result;
}

unint64_t sub_23DBC4BD4()
{
  unint64_t result;

  result = qword_256CE97F0;
  if (!qword_256CE97F0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C67C, &type metadata for TrainingLoadChronicBaseline.InsufficientDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE97F0);
  }
  return result;
}

unint64_t sub_23DBC4C1C()
{
  unint64_t result;

  result = qword_256CE97F8;
  if (!qword_256CE97F8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C6A4, &type metadata for TrainingLoadChronicBaseline.InsufficientDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE97F8);
  }
  return result;
}

unint64_t sub_23DBC4C64()
{
  unint64_t result;

  result = qword_256CE9800;
  if (!qword_256CE9800)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C5C4, &type metadata for TrainingLoadChronicBaseline.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9800);
  }
  return result;
}

unint64_t sub_23DBC4CAC()
{
  unint64_t result;

  result = qword_256CE9808;
  if (!qword_256CE9808)
  {
    result = MEMORY[0x24263E440](&unk_23DC2C5EC, &type metadata for TrainingLoadChronicBaseline.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9808);
  }
  return result;
}

uint64_t sub_23DBC4CF0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x617461446F6ELL && a2 == 0xE600000000000000;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023DC32060 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C62616C69617661 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23DBC4E40(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64657A796C616E61 && a2 == 0xED000065676E6152;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E756F63 && a2 == 0xE500000000000000 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6465726975716572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_23DBC4FB0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CE9810)
  {
    type metadata accessor for TrainingLoadChronicBaseline();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CE9810);
  }
}

void sub_23DBC5010(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23DBC507C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23DBC50F8 + 4 * byte_23DC2C986[a2]))(0xD000000000000010);
}

uint64_t sub_23DBC50F8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000010 && v1 == 0x800000023DC319C0)
    v2 = 1;
  else
    v2 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23DBC51AC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000024;
  v3 = 0x800000023DC31A80;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000029;
    else
      v5 = 0xD00000000000002BLL;
    if (v4 == 1)
      v6 = 0x800000023DC31AB0;
    else
      v6 = 0x800000023DC31AE0;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000024;
  v6 = 0x800000023DC31A80;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0xD000000000000029;
    else
      v2 = 0xD00000000000002BLL;
    if (v7 == 1)
      v3 = 0x800000023DC31AB0;
    else
      v3 = 0x800000023DC31AE0;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
    v8 = 1;
  else
    v8 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_23DBC52A8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23DBC530C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23DBC5394 + 4 * byte_23DC2C991[a2]))(0x656E696C65736162);
}

uint64_t sub_23DBC5394(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656E696C65736162 && v1 == 0xED000065676E6152)
    v2 = 1;
  else
    v2 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23DBC5464(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1852141679;
    else
      v3 = 0x7373696D736964;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE700000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1852141679;
      else
        v6 = 0x7373696D736964;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE700000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1684956531;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1684956531)
  {
LABEL_21:
    v8 = sub_23DC2A7FC();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_23DBC555C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23DBC55A4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23DBC5600 + 4 * byte_23DC2C99B[a2]))(1954047342);
}

uint64_t sub_23DBC5600(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1954047342 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23DBC56A4(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6163696669746F4ELL;
    else
      v3 = 0x7065656C53;
    if (v2 == 1)
      v4 = 0xED0000736E6F6974;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6163696669746F4ELL;
      else
        v6 = 0x7065656C53;
      if (v5 == 1)
        v7 = 0xED0000736E6F6974;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x656D6F636C6557;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x656D6F636C6557)
  {
LABEL_21:
    v8 = sub_23DC2A7FC();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23DBC57CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter();
  v2 = v1;
  if (v0 == HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void sub_23DBC5860(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23DBC58B0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23DBC59B8 + 4 * byte_23DC2C9AA[a2]))(0x7373656E746966);
}

uint64_t sub_23DBC59B8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7373656E746966 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_23DBC5B20(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23DBC5B6C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23DBC5BF0 + 4 * byte_23DC2C9B8[a2]))(0x5265636E616C6162);
}

uint64_t sub_23DBC5BF0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x5265636E616C6162 && v1 == 0xEB000000006D6F6FLL)
    v2 = 1;
  else
    v2 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_23DBC5CB8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23DBC5D00(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23DBC5DAC + 4 * byte_23DC2C9C2[a2]))(0x656372756F73);
}

uint64_t sub_23DBC5DAC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656372756F73 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t TrainingLoadSampleDaySummary.morningIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DC2A154();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t TrainingLoadSampleDaySummary.morningIndex.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DC2A154();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*TrainingLoadSampleDaySummary.morningIndex.modify())()
{
  return nullsub_1;
}

uint64_t TrainingLoadSampleDaySummary.baselineRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t SampleDaySummary;

  SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  return sub_23DBB2B6C(v1 + *(int *)(SampleDaySummary + 20), a1, (uint64_t (*)(_QWORD))sub_23DBBFA18);
}

uint64_t type metadata accessor for TrainingLoadSampleDaySummary()
{
  uint64_t result;

  result = qword_25431EC30;
  if (!qword_25431EC30)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t TrainingLoadSampleDaySummary.baselineRange.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t SampleDaySummary;

  SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  return sub_23DBBC784(a1, v1 + *(int *)(SampleDaySummary + 20), (uint64_t (*)(_QWORD))sub_23DBBFA18);
}

uint64_t (*TrainingLoadSampleDaySummary.baselineRange.modify())()
{
  type metadata accessor for TrainingLoadSampleDaySummary();
  return nullsub_1;
}

uint64_t TrainingLoadSampleDaySummary.activityType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for TrainingLoadSampleDaySummary() + 24));
}

uint64_t TrainingLoadSampleDaySummary.activityType.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for TrainingLoadSampleDaySummary();
  v6 = v2 + *(int *)(result + 24);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TrainingLoadSampleDaySummary.activityType.modify())()
{
  type metadata accessor for TrainingLoadSampleDaySummary();
  return nullsub_1;
}

uint64_t TrainingLoadSampleDaySummary.band.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TrainingLoadSampleDaySummary();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t TrainingLoadSampleDaySummary.band.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for TrainingLoadSampleDaySummary();
  *(_BYTE *)(v1 + *(int *)(result + 28)) = v2;
  return result;
}

uint64_t (*TrainingLoadSampleDaySummary.band.modify())()
{
  type metadata accessor for TrainingLoadSampleDaySummary();
  return nullsub_1;
}

uint64_t TrainingLoadSampleDaySummary.trainingLoad.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t SampleDaySummary;

  SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  return sub_23DBB2B6C(v1 + *(int *)(SampleDaySummary + 32), a1, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadBaselineComparison);
}

uint64_t TrainingLoadSampleDaySummary.trainingLoad.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t SampleDaySummary;

  SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  return sub_23DBBC784(a1, v1 + *(int *)(SampleDaySummary + 32), (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadBaselineComparison);
}

uint64_t (*TrainingLoadSampleDaySummary.trainingLoad.modify())()
{
  type metadata accessor for TrainingLoadSampleDaySummary();
  return nullsub_1;
}

uint64_t TrainingLoadSampleDaySummary.init(morningIndex:baselineRange:trainingLoad:activityType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  int *SampleDaySummary;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char v18;
  char v20;

  SampleDaySummary = (int *)type metadata accessor for TrainingLoadSampleDaySummary();
  v12 = a6 + SampleDaySummary[6];
  *(_QWORD *)v12 = 0;
  *(_BYTE *)(v12 + 8) = 1;
  v13 = SampleDaySummary[7];
  *(_BYTE *)(a6 + v13) = 5;
  v14 = sub_23DC2A154();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(a6, a1, v14);
  sub_23DBB2B6C(a2, a6 + SampleDaySummary[5], (uint64_t (*)(_QWORD))sub_23DBBFA18);
  sub_23DBB2B6C(a3, a6 + SampleDaySummary[8], (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadBaselineComparison);
  v16 = a3 + *(int *)(type metadata accessor for TrainingLoadBaselineComparison() + 24);
  if ((*(_BYTE *)(v16 + 8) & 1) != 0)
  {
    sub_23DBB2BB0(a3, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadBaselineComparison);
    sub_23DBB2BB0(a2, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
    v18 = 5;
  }
  else
  {
    TrainingLoadBand.init(fractionalDifferenceFromChronicBaseline:)(*(Swift::Double *)v16);
    sub_23DBB2BB0(a3, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadBaselineComparison);
    sub_23DBB2BB0(a2, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
    v18 = v20;
  }
  *(_BYTE *)(a6 + v13) = v18;
  *(_QWORD *)v12 = a4;
  *(_BYTE *)(v12 + 8) = a5 & 1;
  return result;
}

uint64_t static TrainingLoadSampleDaySummary.fake(on:unit:analyzedBaselineRange:hasData:acuteBaseline:chronicBaseline:calendar:activityType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X7>, char *a8@<X8>, double a9@<D0>, unsigned __int8 a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t BaselineComparison;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t AcuteBaseline;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  int *SampleDaySummary;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t ChronicBaseline;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81;

  v72 = a7;
  v69 = a6;
  v70 = a4;
  v68 = a5;
  v77 = a1;
  v78 = a3;
  v79 = a8;
  sub_23DBBFA18();
  MEMORY[0x24BDAC7A8](v12);
  v76 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23DC2A154();
  v71 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  v18 = MEMORY[0x24BDAC7A8](BaselineComparison);
  v75 = (uint64_t)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v67 - v20;
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  v22 = MEMORY[0x24BDAC7A8](ChronicBaseline);
  v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v67 - v25;
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  AcuteBaseline = type metadata accessor for TrainingLoadAcuteBaseline();
  v31 = MEMORY[0x24BDAC7A8](AcuteBaseline);
  v33 = (char *)&v67 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v31);
  v36 = (char *)&v67 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v80 = (uint64_t)&v67 - v37;
  v38 = objc_msgSend((id)objc_opt_self(), sel_quantityWithUnit_doubleValue_, a2, a9);
  v74 = BaselineComparison;
  if (v38)
  {
    v39 = v38;
    sub_23DBC68B0();
    v40 = v39;
    sub_23DC2A064();
    sub_23DBC6894(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v29, 0, 1, v41);

  }
  else
  {
    sub_23DBC6894(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v29, 1, 1, v42);
  }
  v43 = v70;
  sub_23DBBCEB0((uint64_t)v29, (uint64_t)v36, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBBCEB0((uint64_t)v36, v80, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadAcuteBaseline);
  if ((v43 & 1) != 0)
  {
    v44 = v26;
    v45 = v71;
    if ((v69 & 1) != 0)
    {
      sub_23DBBFA90();
      v47 = *(int *)(v46 + 48);
      v48 = *(int *)(v46 + 64);
      sub_23DBB2B6C(v78, (uint64_t)v44, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      *(_QWORD *)((char *)v44 + v47) = sub_23DC2A13C();
      *(_QWORD *)((char *)v44 + v48) = 28;
    }
    else
    {
      *v44 = v68;
    }
  }
  else
  {
    v44 = v26;
    v45 = v71;
  }
  LODWORD(v71) = a10;
  swift_storeEnumTagMultiPayload();
  sub_23DBB2B6C(v80, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadAcuteBaseline);
  ChronicBaseline = (uint64_t)v44;
  sub_23DBB2B6C((uint64_t)v44, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
  TrainingLoadBaselineComparison.init(acuteBaseline:chronicBaseline:)((uint64_t)v33, (uint64_t)v24, (uint64_t)v21);
  v49 = (uint64_t)v21;
  v50 = v45;
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
  v51(v16, v77, v14);
  v52 = v76;
  sub_23DBB2B6C(v78, v76, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  v78 = v49;
  v53 = v75;
  sub_23DBB2B6C(v49, v75, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadBaselineComparison);
  SampleDaySummary = (int *)type metadata accessor for TrainingLoadSampleDaySummary();
  v55 = v14;
  v56 = v16;
  v57 = v79;
  v58 = &v79[SampleDaySummary[6]];
  *(_QWORD *)v58 = 0;
  v58[8] = 1;
  v59 = SampleDaySummary[7];
  v57[v59] = 5;
  v51(v57, (uint64_t)v56, v55);
  sub_23DBB2B6C(v52, (uint64_t)&v57[SampleDaySummary[5]], (uint64_t (*)(_QWORD))sub_23DBBFA18);
  sub_23DBB2B6C(v53, (uint64_t)&v57[SampleDaySummary[8]], (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadBaselineComparison);
  v60 = v53 + *(int *)(v74 + 24);
  if ((*(_BYTE *)(v60 + 8) & 1) != 0)
  {
    sub_23DBB2BB0(v53, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadBaselineComparison);
    sub_23DBB2BB0(v52, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v56, v55);
    v61 = 5;
  }
  else
  {
    TrainingLoadBand.init(fractionalDifferenceFromChronicBaseline:)(*(Swift::Double *)v60);
    sub_23DBB2BB0(v53, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadBaselineComparison);
    sub_23DBB2BB0(v52, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v56, v55);
    v61 = v81;
  }
  v62 = v72;
  v63 = ChronicBaseline;
  v64 = v78;
  v65 = v71;
  v79[v59] = v61;
  *(_QWORD *)v58 = v62;
  v58[8] = v65 & 1;
  sub_23DBB2BB0(v64, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadBaselineComparison);
  sub_23DBB2BB0(v63, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
  return sub_23DBB2BB0(v80, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadAcuteBaseline);
}

void sub_23DBC6894(uint64_t a1)
{
  sub_23DBB89B8(a1, &qword_25431FAD0, (uint64_t (*)(uint64_t))sub_23DBC68B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDD2048]);
}

unint64_t sub_23DBC68B0()
{
  unint64_t result;

  result = qword_25431FAD8;
  if (!qword_25431FAD8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25431FAD8);
  }
  return result;
}

uint64_t TrainingLoadSampleDaySummary.hash(into:)()
{
  uint64_t v0;
  uint64_t SampleDaySummary;

  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  sub_23DC2A190();
  sub_23DBBFA18();
  sub_23DC2A190();
  if (*(_BYTE *)(v0 + *(int *)(SampleDaySummary + 24) + 8) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    sub_23DC2A898();
    sub_23DC2A88C();
  }
  if (*(_BYTE *)(v0 + *(int *)(SampleDaySummary + 28)) == 5)
  {
    sub_23DC2A898();
  }
  else
  {
    sub_23DC2A898();
    sub_23DC2A88C();
  }
  return TrainingLoadBaselineComparison.hash(into:)();
}

uint64_t TrainingLoadSampleDaySummary.hashValue.getter()
{
  sub_23DC2A880();
  TrainingLoadSampleDaySummary.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBC6A5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DC2A154();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_23DBC6A94()
{
  sub_23DC2A880();
  TrainingLoadSampleDaySummary.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBC6AD4()
{
  sub_23DC2A880();
  TrainingLoadSampleDaySummary.hash(into:)();
  return sub_23DC2A8B0();
}

void sub_23DBC6B10(char *a1)
{
  sub_23DBC52A8(*a1);
}

void sub_23DBC6B1C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23DC2A880();
  __asm { BR              X9 }
}

uint64_t sub_23DBC6B70()
{
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

void sub_23DBC6C0C()
{
  __asm { BR              X10 }
}

uint64_t sub_23DBC6C50()
{
  sub_23DC2A28C();
  return swift_bridgeObjectRelease();
}

void sub_23DBC6CD8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23DC2A880();
  __asm { BR              X9 }
}

uint64_t sub_23DBC6D28()
{
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBC6DC4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23DBC8ED8();
  *a1 = result;
  return result;
}

uint64_t sub_23DBC6DF0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23DBC6E28 + 4 * byte_23DC2C9D7[*v0]))();
}

void sub_23DBC6E28(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "baselineRange");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_23DBC6E50(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "activityType");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_23DBC6E74(_QWORD *a1@<X8>)
{
  *a1 = 1684955490;
  a1[1] = 0xE400000000000000;
}

void sub_23DBC6E88(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "trainingLoad");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_23DBC6EAC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DBC6EE4 + 4 * byte_23DC2C9DC[*v0]))(0x49676E696E726F6DLL, 0xEC0000007865646ELL);
}

uint64_t sub_23DBC6EE4()
{
  return 0x656E696C65736162;
}

uint64_t sub_23DBC6F08()
{
  return 0x7974697669746361;
}

uint64_t sub_23DBC6F28()
{
  return 1684955490;
}

uint64_t sub_23DBC6F38()
{
  return 0x676E696E69617274;
}

uint64_t sub_23DBC6F58@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23DBC8ED8();
  *a1 = result;
  return result;
}

void sub_23DBC6F7C(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_23DBC6F88()
{
  sub_23DBC7AE4();
  return sub_23DC2A964();
}

uint64_t sub_23DBC6FB0()
{
  sub_23DBC7AE4();
  return sub_23DC2A970();
}

uint64_t TrainingLoadSampleDaySummary.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t SampleDaySummary;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t BaselineComparison;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v33 = a2;
  BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  MEMORY[0x24BDAC7A8](BaselineComparison);
  v31 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBBFA18();
  v34 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v37 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_23DC2A154();
  v35 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v40 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBC7C24(0, &qword_256CE9820, MEMORY[0x24BEE33E0]);
  v38 = v7;
  v36 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v28 - v8;
  SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  v11 = MEMORY[0x24BDAC7A8](SampleDaySummary);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = &v13[*(int *)(v11 + 24)];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  v15 = *(int *)(v11 + 28);
  v13[v15] = 5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBC7AE4();
  v16 = (uint64_t)v41;
  sub_23DC2A8BC();
  if (v16)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v29 = v15;
  v30 = v14;
  v17 = (uint64_t)v37;
  v41 = a1;
  v49 = 0;
  sub_23DBB2CB0((unint64_t *)&unk_25431F270, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B8]);
  v18 = v39;
  v19 = v38;
  sub_23DC2A760();
  v21 = v9;
  v22 = (uint64_t)v13;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v13, v40, v18);
  v48 = 1;
  sub_23DBC41A8((unint64_t *)&unk_25431F290, (unint64_t *)&unk_25431F270, MEMORY[0x24BDD24B8], MEMORY[0x24BEE1BC8]);
  sub_23DC2A760();
  sub_23DBBCEB0(v17, (uint64_t)&v13[*(int *)(SampleDaySummary + 20)], (uint64_t (*)(_QWORD))sub_23DBBFA18);
  sub_23DBC7B28(0, &qword_256CE9830);
  v40 = 0;
  v47 = 2;
  sub_23DBC7C80(&qword_256CE9838, MEMORY[0x24BEE1EB8], MEMORY[0x24BEE4AC0]);
  v23 = v40;
  sub_23DC2A760();
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v21, v19);
    v24 = v35;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v13, v18);
  }
  else
  {
    if (v43 != 1)
    {
      v25 = v30;
      *(_QWORD *)v30 = v42;
      v25[8] = 0;
    }
    v26 = v33;
    sub_23DBC7B28(0, &qword_256CE9840);
    v45 = 3;
    sub_23DBC7B6C(&qword_256CE9848, (uint64_t (*)(void))sub_23DBC7BE0, MEMORY[0x24BEE4AC0]);
    sub_23DC2A760();
    v13[v29] = v46;
    v44 = 4;
    sub_23DBB2CB0(&qword_256CE9858, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadBaselineComparison, (uint64_t)&protocol conformance descriptor for TrainingLoadBaselineComparison);
    v27 = (uint64_t)v31;
    sub_23DC2A760();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v21, v19);
    sub_23DBBCEB0(v27, v22 + *(int *)(SampleDaySummary + 32), (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadBaselineComparison);
    sub_23DBB2B6C(v22, v26, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSampleDaySummary);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    return sub_23DBB2BB0(v22, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSampleDaySummary);
  }
}

uint64_t TrainingLoadSampleDaySummary.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t SampleDaySummary;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  _BYTE v15[16];
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v3 = v1;
  sub_23DBC7C24(0, &qword_256CE9860, MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = &v15[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBC7AE4();
  sub_23DC2A8C8();
  v19 = 0;
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_25431EF38, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD2498]);
  sub_23DC2A7C0();
  if (!v2)
  {
    SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
    v18 = 1;
    sub_23DBBFA18();
    sub_23DBC41A8((unint64_t *)&unk_25431EF50, &qword_25431EF38, MEMORY[0x24BDD2498], MEMORY[0x24BEE1B98]);
    sub_23DC2A7C0();
    v11 = (uint64_t *)(v3 + *(int *)(SampleDaySummary + 24));
    v12 = *((_BYTE *)v11 + 8);
    if ((v12 & 1) != 0)
      v13 = 0;
    else
      v13 = *v11;
    v16 = v13;
    v17 = v12;
    v15[15] = 2;
    sub_23DBC7B28(0, &qword_256CE9830);
    sub_23DBC7C80(&qword_256CE9868, MEMORY[0x24BEE1E90], MEMORY[0x24BEE4AA8]);
    sub_23DC2A7C0();
    v15[14] = *(_BYTE *)(v3 + *(int *)(SampleDaySummary + 28));
    v15[13] = 3;
    sub_23DBC7B28(0, &qword_256CE9840);
    sub_23DBC7B6C(&qword_256CE9870, (uint64_t (*)(void))sub_23DBC7CEC, MEMORY[0x24BEE4AA8]);
    sub_23DC2A7C0();
    v15[12] = 4;
    type metadata accessor for TrainingLoadBaselineComparison();
    sub_23DBB2CB0(&qword_256CE9880, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadBaselineComparison, (uint64_t)&protocol conformance descriptor for TrainingLoadBaselineComparison);
    sub_23DC2A7C0();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_23DBC7814@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TrainingLoadSampleDaySummary.init(from:)(a1, a2);
}

uint64_t sub_23DBC7828(_QWORD *a1)
{
  return TrainingLoadSampleDaySummary.encode(to:)(a1);
}

uint64_t _s13HealthBalance28TrainingLoadSampleDaySummaryV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _QWORD *v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t BaselineComparison;
  uint64_t v28;
  double *v29;
  char v30;
  double *v31;
  char v32;
  uint64_t v33;
  int *SampleDaySummary;
  uint64_t v35;
  uint64_t v36;

  sub_23DBBFA18();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v33 - v8;
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9748, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
  sub_23DC2A4F0();
  if (v36)
    return 0;
  SampleDaySummary = (int *)type metadata accessor for TrainingLoadSampleDaySummary();
  v35 = a2;
  v10 = SampleDaySummary[5];
  v11 = a1 + v10;
  v12 = a2 + v10;
  sub_23DBB2CB0(&qword_256CE9818, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B0]);
  v13 = sub_23DC2A1F0();
  sub_23DBB2B6C(v11, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  sub_23DBB2B6C(v12, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  if ((v13 & 1) == 0)
  {
    sub_23DBB2BB0((uint64_t)v7, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    sub_23DBB2BB0((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    return 0;
  }
  v14 = sub_23DC2A1F0();
  sub_23DBB2BB0((uint64_t)v7, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  sub_23DBB2BB0((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  if ((v14 & 1) == 0)
    return 0;
  v15 = SampleDaySummary[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = *(_BYTE *)(a1 + v15 + 8);
  v18 = (_QWORD *)(v35 + v15);
  v19 = *(unsigned __int8 *)(v35 + v15 + 8);
  if ((v17 & 1) != 0)
  {
    if (!v19)
      return 0;
  }
  else
  {
    if (*v16 != *v18)
      LOBYTE(v19) = 1;
    if ((v19 & 1) != 0)
      return 0;
  }
  v21 = SampleDaySummary[7];
  v22 = *(unsigned __int8 *)(a1 + v21);
  v23 = *(unsigned __int8 *)(v35 + v21);
  if (v22 == 5)
  {
    if (v23 == 5)
      goto LABEL_18;
    return 0;
  }
  result = 0;
  if (v23 != 5 && v22 == v23)
  {
LABEL_18:
    v24 = SampleDaySummary[8];
    v25 = a1 + v24;
    v26 = v35 + v24;
    if ((static TrainingLoadAcuteBaseline.== infix(_:_:)(a1 + v24, v35 + v24) & 1) != 0)
    {
      BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
      if ((static TrainingLoadChronicBaseline.== infix(_:_:)(v25 + *(int *)(BaselineComparison + 20), v26 + *(int *)(BaselineComparison + 20)) & 1) != 0)
      {
        v28 = *(int *)(BaselineComparison + 24);
        v29 = (double *)(v25 + v28);
        v30 = *(_BYTE *)(v25 + v28 + 8);
        v31 = (double *)(v26 + v28);
        v32 = *(_BYTE *)(v26 + v28 + 8);
        if ((v30 & 1) != 0)
        {
          if ((v32 & 1) != 0)
            return 1;
        }
        else
        {
          if (*v29 != *v31)
            v32 = 1;
          if ((v32 & 1) == 0)
            return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_23DBC7AE4()
{
  unint64_t result;

  result = qword_256CE9828;
  if (!qword_256CE9828)
  {
    result = MEMORY[0x24263E440](&unk_23DC2CC3C, &type metadata for TrainingLoadSampleDaySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9828);
  }
  return result;
}

void sub_23DBC7B28(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_23DC2A4C0();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_23DBC7B6C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_23DBC7B28(255, &qword_256CE9840);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x24263E440](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DBC7BE0()
{
  unint64_t result;

  result = qword_256CE9850;
  if (!qword_256CE9850)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for TrainingLoadBand, &type metadata for TrainingLoadBand);
    atomic_store(result, (unint64_t *)&qword_256CE9850);
  }
  return result;
}

void sub_23DBC7C24(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DBC7AE4();
    v7 = a3(a1, &type metadata for TrainingLoadSampleDaySummary.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DBC7C80(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_23DBC7B28(255, &qword_256CE9830);
    v8 = a2;
    result = MEMORY[0x24263E440](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DBC7CEC()
{
  unint64_t result;

  result = qword_256CE9878;
  if (!qword_256CE9878)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for TrainingLoadBand, &type metadata for TrainingLoadBand);
    atomic_store(result, (unint64_t *)&qword_256CE9878);
  }
  return result;
}

uint64_t sub_23DBC7D30(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_23DBB2CB0((unint64_t *)&unk_256CE9D50, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary, (uint64_t)&protocol conformance descriptor for TrainingLoadSampleDaySummary);
  a1[2] = sub_23DBB2CB0(&qword_256CE9888, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary, (uint64_t)&protocol conformance descriptor for TrainingLoadSampleDaySummary);
  result = sub_23DBB2CB0(&qword_256CE9D60, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary, (uint64_t)&protocol conformance descriptor for TrainingLoadSampleDaySummary);
  a1[3] = result;
  return result;
}

uint64_t sub_23DBC7DA8()
{
  return sub_23DBB2CB0(&qword_256CE9890, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary, (uint64_t)&protocol conformance descriptor for TrainingLoadSampleDaySummary);
}

char *initializeBufferWithCopyOfBuffer for TrainingLoadSampleDaySummary(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t BaselineComparison;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t ChronicBaseline;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DC2A154();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v8(&a1[v9], &a2[v9], v7);
    sub_23DBBFA18();
    v13 = v12;
    v8(&v10[*(int *)(v12 + 36)], &v11[*(int *)(v12 + 36)], v7);
    v14 = a3[6];
    v15 = a3[7];
    v16 = &a1[v14];
    v17 = &a2[v14];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v18 = a2[v15];
    v16[8] = v17[8];
    a1[v15] = v18;
    v19 = a3[8];
    v20 = &a1[v19];
    v21 = &a2[v19];
    sub_23DBC6894(0);
    v23 = v22;
    v24 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v21, 1, v22))
    {
      sub_23DBB29B8();
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v20, v21, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v20, 0, 1, v23);
    }
    BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
    v28 = *(int *)(BaselineComparison + 20);
    v29 = &v20[v28];
    v30 = &v21[v28];
    ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(ChronicBaseline - 8) + 64));
    }
    else
    {
      v8(v29, v30, v7);
      v8(&v29[*(int *)(v13 + 36)], &v30[*(int *)(v13 + 36)], v7);
      sub_23DBBFA90();
      *(_QWORD *)&v29[*(int *)(v32 + 48)] = *(_QWORD *)&v30[*(int *)(v32 + 48)];
      *(_QWORD *)&v29[*(int *)(v32 + 64)] = *(_QWORD *)&v30[*(int *)(v32 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    v33 = *(int *)(BaselineComparison + 24);
    v34 = &v20[v33];
    v35 = &v21[v33];
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v34[8] = v35[8];
  }
  return a1;
}

uint64_t destroy for TrainingLoadSampleDaySummary(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  void (*v14)(uint64_t, uint64_t);

  v4 = sub_23DC2A154();
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v14(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v14(v5, v4);
  sub_23DBBFA18();
  v7 = v6;
  v14(v5 + *(int *)(v6 + 36), v4);
  v8 = a1 + *(int *)(a2 + 32);
  sub_23DBC6894(0);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
  v12 = v8 + *(int *)(type metadata accessor for TrainingLoadBaselineComparison() + 20);
  type metadata accessor for TrainingLoadChronicBaseline();
  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v14(v12, v4);
    return ((uint64_t (*)(uint64_t, uint64_t))v14)(v12 + *(int *)(v7 + 36), v4);
  }
  return result;
}

uint64_t initializeWithCopy for TrainingLoadSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t BaselineComparison;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t ChronicBaseline;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_23DBBFA18();
  v12 = v11;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v13 = a3[6];
  v14 = a3[7];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v17 = *(_BYTE *)(a2 + v14);
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = v17;
  v18 = a3[8];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  sub_23DBC6894(0);
  v22 = v21;
  v23 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v21))
  {
    sub_23DBB29B8();
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v19, v20, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
  }
  BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  v26 = *(int *)(BaselineComparison + 20);
  v27 = &v19[v26];
  v28 = &v20[v26];
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(ChronicBaseline - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v7((uint64_t)&v27[*(int *)(v12 + 36)], (uint64_t)&v28[*(int *)(v12 + 36)], v6);
    sub_23DBBFA90();
    *(_QWORD *)&v27[*(int *)(v30 + 48)] = *(_QWORD *)&v28[*(int *)(v30 + 48)];
    *(_QWORD *)&v27[*(int *)(v30 + 64)] = *(_QWORD *)&v28[*(int *)(v30 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  v31 = *(int *)(BaselineComparison + 24);
  v32 = &v19[v31];
  v33 = &v20[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  return a1;
}

uint64_t assignWithCopy for TrainingLoadSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t BaselineComparison;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t ChronicBaseline;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;

  v6 = sub_23DC2A154();
  v39 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_23DBBFA18();
  v12 = v11;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  *(_BYTE *)(v14 + 8) = *((_BYTE *)v15 + 8);
  *(_QWORD *)v14 = v16;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v17 = a3[8];
  v18 = (char *)(a1 + v17);
  v19 = (char *)(a2 + v17);
  sub_23DBC6894(0);
  v21 = v20;
  v22 = *(_QWORD *)(v20 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v7) = v23(v18, 1, v20);
  v24 = v23(v19, 1, v21);
  if ((_DWORD)v7)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v18, v19, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v18, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v21);
LABEL_6:
    sub_23DBB29B8();
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v18, v19, v21);
LABEL_7:
  BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  v27 = BaselineComparison;
  if (a1 != a2)
  {
    v28 = *(int *)(BaselineComparison + 20);
    v29 = &v18[v28];
    v30 = &v19[v28];
    sub_23DBB2BB0((uint64_t)&v18[v28], (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
    ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(ChronicBaseline - 8) + 64));
    }
    else
    {
      v32 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
      v32(v29, v30, v6);
      v32(&v29[*(int *)(v12 + 36)], &v30[*(int *)(v12 + 36)], v6);
      sub_23DBBFA90();
      *(_QWORD *)&v29[*(int *)(v33 + 48)] = *(_QWORD *)&v30[*(int *)(v33 + 48)];
      *(_QWORD *)&v29[*(int *)(v33 + 64)] = *(_QWORD *)&v30[*(int *)(v33 + 64)];
      swift_storeEnumTagMultiPayload();
    }
  }
  v34 = *(int *)(v27 + 24);
  v35 = &v18[v34];
  v36 = &v19[v34];
  v37 = *(_QWORD *)v36;
  v35[8] = v36[8];
  *(_QWORD *)v35 = v37;
  return a1;
}

uint64_t initializeWithTake for TrainingLoadSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t BaselineComparison;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t ChronicBaseline;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_23DBBFA18();
  v12 = v11;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v13 = a3[6];
  v14 = a3[7];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v17 = *(_BYTE *)(a2 + v14);
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = v17;
  v18 = a3[8];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  sub_23DBC6894(0);
  v22 = v21;
  v23 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v21))
  {
    sub_23DBB29B8();
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v19, v20, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
  }
  BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  v26 = *(int *)(BaselineComparison + 20);
  v27 = &v19[v26];
  v28 = &v20[v26];
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(ChronicBaseline - 8) + 64));
  }
  else
  {
    v7((uint64_t)v27, (uint64_t)v28, v6);
    v7((uint64_t)&v27[*(int *)(v12 + 36)], (uint64_t)&v28[*(int *)(v12 + 36)], v6);
    sub_23DBBFA90();
    *(_QWORD *)&v27[*(int *)(v30 + 48)] = *(_QWORD *)&v28[*(int *)(v30 + 48)];
    *(_QWORD *)&v27[*(int *)(v30 + 64)] = *(_QWORD *)&v28[*(int *)(v30 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  v31 = *(int *)(BaselineComparison + 24);
  v32 = &v19[v31];
  v33 = &v20[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  v32[8] = v33[8];
  return a1;
}

uint64_t assignWithTake for TrainingLoadSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t BaselineComparison;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t ChronicBaseline;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v39;

  v6 = sub_23DC2A154();
  v39 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_23DBBFA18();
  v12 = v11;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v13 = a3[6];
  v14 = a3[7];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v17 = *(_BYTE *)(a2 + v14);
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v14) = v17;
  v18 = a3[8];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  sub_23DBC6894(0);
  v22 = v21;
  v23 = *(_QWORD *)(v21 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v7) = v24(v19, 1, v21);
  v25 = v24(v20, 1, v22);
  if ((_DWORD)v7)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v19, v20, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v19, v22);
LABEL_6:
    sub_23DBB29B8();
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v19, v20, v22);
LABEL_7:
  BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  v28 = BaselineComparison;
  if (a1 != a2)
  {
    v29 = *(int *)(BaselineComparison + 20);
    v30 = &v19[v29];
    v31 = &v20[v29];
    sub_23DBB2BB0((uint64_t)&v19[v29], (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
    ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(ChronicBaseline - 8) + 64));
    }
    else
    {
      v33 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
      v33(v30, v31, v6);
      v33(&v30[*(int *)(v12 + 36)], &v31[*(int *)(v12 + 36)], v6);
      sub_23DBBFA90();
      *(_QWORD *)&v30[*(int *)(v34 + 48)] = *(_QWORD *)&v31[*(int *)(v34 + 48)];
      *(_QWORD *)&v30[*(int *)(v34 + 64)] = *(_QWORD *)&v31[*(int *)(v34 + 64)];
      swift_storeEnumTagMultiPayload();
    }
  }
  v35 = *(int *)(v28 + 24);
  v36 = &v19[v35];
  v37 = &v20[v35];
  *(_QWORD *)v36 = *(_QWORD *)v37;
  v36[8] = v37[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for TrainingLoadSampleDaySummary()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBC8A50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t BaselineComparison;
  uint64_t v12;
  int v13;
  unsigned int v14;

  v6 = sub_23DC2A154();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  sub_23DBBFA18();
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
  {
    BaselineComparison = v9;
    v12 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, BaselineComparison);
  }
  if ((_DWORD)a2 != 250)
  {
    BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
    v10 = *(_QWORD *)(BaselineComparison - 8);
    v12 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, BaselineComparison);
  }
  if (*(unsigned __int8 *)(a1 + a3[7]) <= 5u)
    v13 = 5;
  else
    v13 = *(unsigned __int8 *)(a1 + a3[7]);
  v14 = v13 - 5;
  if (*(unsigned __int8 *)(a1 + a3[7]) >= 5u)
    return v14;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TrainingLoadSampleDaySummary()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DBC8B2C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t BaselineComparison;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_23DC2A154();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    BaselineComparison = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_23DBBFA18();
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      BaselineComparison = v13;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 250)
      {
        *(_BYTE *)(a1 + a4[7]) = a2 + 5;
        return;
      }
      BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
      v14 = *(_QWORD *)(BaselineComparison - 8);
      v15 = a4[8];
    }
    v12 = a1 + v15;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, BaselineComparison);
}

void sub_23DBC8BF0()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_23DC2A154();
  if (v0 <= 0x3F)
  {
    sub_23DBBFA18();
    if (v1 <= 0x3F)
    {
      type metadata accessor for TrainingLoadBaselineComparison();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t getEnumTagSinglePayload for TrainingLoadBand(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TrainingLoadSampleDaySummary.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23DBC8D80 + 4 * byte_23DC2C9E6[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23DBC8DB4 + 4 * byte_23DC2C9E1[v4]))();
}

uint64_t sub_23DBC8DB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBC8DBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBC8DC4);
  return result;
}

uint64_t sub_23DBC8DD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBC8DD8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23DBC8DDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBC8DE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadSampleDaySummary.CodingKeys()
{
  return &type metadata for TrainingLoadSampleDaySummary.CodingKeys;
}

unint64_t sub_23DBC8E04()
{
  unint64_t result;

  result = qword_256CE9898;
  if (!qword_256CE9898)
  {
    result = MEMORY[0x24263E440](&unk_23DC2CC14, &type metadata for TrainingLoadSampleDaySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9898);
  }
  return result;
}

unint64_t sub_23DBC8E4C()
{
  unint64_t result;

  result = qword_256CE98A0;
  if (!qword_256CE98A0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2CB4C, &type metadata for TrainingLoadSampleDaySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE98A0);
  }
  return result;
}

unint64_t sub_23DBC8E94()
{
  unint64_t result;

  result = qword_256CE98A8;
  if (!qword_256CE98A8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2CB74, &type metadata for TrainingLoadSampleDaySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE98A8);
  }
  return result;
}

uint64_t sub_23DBC8ED8()
{
  unint64_t v0;

  v0 = sub_23DC2A700();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t static SleepingSampleDaySummaryCollectionQuery.AggregationInterval.== infix(_:_:)()
{
  return 1;
}

uint64_t SleepingSampleDaySummaryCollectionQuery.AggregationInterval.hash(into:)()
{
  return sub_23DC2A88C();
}

uint64_t SleepingSampleDaySummaryCollectionQuery.AggregationInterval.hashValue.getter()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

id SleepingSampleDaySummaryCollectionQuery.query.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t SleepingSampleDaySummaryCollectionQuery.__allocating_init(gregorianDayRange:aggregationInterval:continueAfterInitialResults:resultsHandler:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = swift_allocObject();
  SleepingSampleDaySummaryCollectionQuery.init(gregorianDayRange:aggregationInterval:continueAfterInitialResults:resultsHandler:)(a1, v10, a3, a4, a5);
  return v9;
}

uint64_t SleepingSampleDaySummaryCollectionQuery.init(gregorianDayRange:aggregationInterval:continueAfterInitialResults:resultsHandler:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  _QWORD *v20;
  uint64_t v21;
  objc_class *v22;
  objc_class *v23;
  _BYTE *v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  objc_super v37;

  v32 = a4;
  v33 = a5;
  v35 = a3;
  v6 = sub_23DC29F80();
  v34 = *(_QWORD *)(v6 - 8);
  v7 = v34;
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB9590();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for GregorianDayRange();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(a1, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for GregorianDayRange);
  v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v18 = swift_allocObject();
  sub_23DBBCEB0((uint64_t)v16, v18 + v17, (uint64_t (*)(_QWORD))type metadata accessor for GregorianDayRange);
  sub_23DBB2B6C(a1, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DBB9590);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v19(v9, a1 + *(int *)(v13 + 20), v6);
  v20 = (_QWORD *)swift_allocObject();
  v21 = v33;
  v20[2] = v32;
  v20[3] = v21;
  v20[4] = sub_23DBC95BC;
  v20[5] = v18;
  sub_23DBC9BAC(0);
  v23 = v22;
  v24 = objc_allocWithZone(v22);
  v25 = (uint64_t *)&v24[qword_25431F7A0];
  *v25 = 0;
  v25[1] = 0;
  *(_QWORD *)&v24[qword_25431F7B0] = MEMORY[0x24BEE4AF8];
  v26 = &v24[qword_254322208];
  *v26 = 0;
  v26[1] = 0;
  sub_23DBB2B6C((uint64_t)v12, (uint64_t)&v24[qword_254322200], (uint64_t (*)(_QWORD))sub_23DBB9590);
  v19(&v24[qword_254322210], (uint64_t)v9, v6);
  v24[qword_254322218] = v35;
  v27 = *v25;
  *v25 = (uint64_t)sub_23DBC9B9C;
  v25[1] = (uint64_t)v20;
  swift_retain();
  sub_23DBC9C24(v27);
  sub_23DBC9C34();
  v28 = (void *)sub_23DC2A340();
  v37.receiver = v24;
  v37.super_class = v23;
  v29 = objc_msgSendSuper2(&v37, sel_initWithQueryDescriptors_, v28);
  swift_release();

  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
  sub_23DBB2BB0((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DBB9590);
  sub_23DBB2BB0(a1, (uint64_t (*)(_QWORD))type metadata accessor for GregorianDayRange);
  result = v36;
  *(_QWORD *)(v36 + 16) = v29;
  return result;
}

unint64_t sub_23DBC92D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  sub_23DBB89B8(0, &qword_256CE9958, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummaryCollection, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v20 - v5;
  v23 = type metadata accessor for SleepingSampleDaySummaryCollection();
  v7 = *(_QWORD *)(v23 - 8);
  v8 = MEMORY[0x24BDAC7A8](v23);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v20 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    return MEMORY[0x24BEE4AF8];
  v14 = 0;
  v15 = MEMORY[0x24BEE4AF8];
  v21 = a1;
  v22 = a2;
  do
  {
    if (__OFADD__(v14, 7))
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v16 = v14 + 7;
    v24 = v14;
    sub_23DBC95F8(&v24, 7, (char *)a1, a2, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v23) == 1)
    {
      sub_23DBC9DD4((uint64_t)v6);
    }
    else
    {
      sub_23DBBCEB0((uint64_t)v6, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummaryCollection);
      sub_23DBBCEB0((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummaryCollection);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = sub_23DBDECDC(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
      v18 = *(_QWORD *)(v15 + 16);
      v17 = *(_QWORD *)(v15 + 24);
      if (v18 >= v17 >> 1)
        v15 = sub_23DBDECDC(v17 > 1, v18 + 1, 1, v15);
      *(_QWORD *)(v15 + 16) = v18 + 1;
      sub_23DBBCEB0((uint64_t)v10, v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v18, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummaryCollection);
      a1 = v21;
      a2 = v22;
    }
    v14 = v16;
  }
  while (v16 < v13);
  return v15;
}

uint64_t sub_23DBC94F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for GregorianDayRange();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = sub_23DC2A154();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  sub_23DBB9590();
  v5(v3 + *(int *)(v6 + 36), v4);
  v7 = v3 + *(int *)(v1 + 20);
  v8 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_deallocObject();
}

unint64_t sub_23DBC95BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GregorianDayRange() - 8) + 80);
  return sub_23DBC92D8(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_23DBC95F8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  int64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v6 = v5;
  sub_23DBC2A3C();
  v71 = v12;
  v13 = MEMORY[0x24BDAC7A8](v12);
  v68 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v67 = (char *)&v55 - v15;
  sub_23DBB9590();
  v69 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for GregorianDayRange();
  MEMORY[0x24BDAC7A8](v70);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for SleepingSampleDaySummary();
  v22 = MEMORY[0x24BDAC7A8](v21);
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v55 - v24;
  v27 = *a1;
  if (__OFADD__(v27, a2))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v28 = *((_QWORD *)a3 + 2);
  if (v28 >= (uint64_t)(v27 + a2))
    v28 = v27 + a2;
  if (v28 < (uint64_t)v27)
    goto LABEL_19;
  if ((v27 & 0x8000000000000000) != 0)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v28 == v27)
  {
    v29 = type metadata accessor for SleepingSampleDaySummaryCollection();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a5, 1, 1, v29);
  }
  if (v28 <= v27)
    goto LABEL_21;
  v63 = v28 - v27;
  v64 = v18;
  v65 = v28;
  v66 = v25;
  v18 = &a3[(*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80)];
  a2 = *(_QWORD *)(v23 + 72);
  sub_23DBB2B6C((uint64_t)&v18[a2 * v27], (uint64_t)&v55 - v24, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
  if (v65 - 1 < v27)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v62 = a4;
  v31 = v66;
  sub_23DBB2B6C((uint64_t)&v18[a2 * (v65 - 1)], v66, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
  a2 = sub_23DC2A154();
  sub_23DBB2CB0((unint64_t *)&qword_25431FAC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
  swift_bridgeObjectRetain();
  if ((sub_23DC2A1C0() & 1) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v55 = v18;
  v56 = v27;
  v60 = a5;
  v61 = v5;
  v32 = v71;
  v33 = a3;
  v34 = v67;
  v35 = &v67[*(int *)(v71 + 48)];
  v36 = *(_QWORD **)(a2 - 8);
  v57 = v26;
  v58 = v20;
  v37 = (void (*)(char *, char *, uint64_t))v36[2];
  v37(v67, v26, a2);
  v37(v35, (char *)v31, a2);
  v38 = *(int *)(v32 + 48);
  v59 = v33;
  v39 = v68;
  v40 = &v68[v38];
  v37(v68, v34, a2);
  v37(v40, v35, a2);
  v41 = (void (*)(char *, char *, uint64_t))v36[4];
  v42 = (uint64_t)v64;
  v41(v64, v39, a2);
  v43 = (void (*)(char *, uint64_t))v36[1];
  v43(v40, a2);
  v44 = &v39[*(int *)(v32 + 48)];
  v41(v39, v34, a2);
  v41(v44, v35, a2);
  v18 = v59;
  v41((char *)(v42 + *(int *)(v69 + 36)), v44, a2);
  a5 = (uint64_t)v58;
  v43(v39, a2);
  sub_23DBBCEB0(v42, a5, (uint64_t (*)(_QWORD))sub_23DBB9590);
  v45 = *(int *)(v70 + 20);
  v46 = v62 + v45;
  v47 = a5 + v45;
  v48 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v47, v46, v48);
  sub_23DC2A808();
  swift_unknownObjectRetain_n();
  v49 = swift_dynamicCastClass();
  if (!v49)
  {
    swift_bridgeObjectRelease();
    v49 = MEMORY[0x24BEE4AF8];
  }
  v50 = *(_QWORD *)(v49 + 16);
  swift_release();
  v51 = v50 == v63;
  v6 = v60;
  a2 = v56;
  if (v51)
  {
    v52 = swift_dynamicCastClass();
    if (!v52)
    {
      swift_bridgeObjectRelease();
      v52 = MEMORY[0x24BEE4AF8];
    }
    goto LABEL_17;
  }
LABEL_24:
  v54 = (2 * v65) | 1;
  swift_bridgeObjectRelease();
  v52 = sub_23DBC9E28((uint64_t)v18, (uint64_t)v55, a2, v54);
LABEL_17:
  swift_bridgeObjectRelease();
  sub_23DBB2BB0(v66, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
  sub_23DBB2BB0((uint64_t)v57, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
  sub_23DBBCEB0(a5, v6, (uint64_t (*)(_QWORD))type metadata accessor for GregorianDayRange);
  v53 = type metadata accessor for SleepingSampleDaySummaryCollection();
  *(_QWORD *)(v6 + *(int *)(v53 + 20)) = v52;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v6, 0, 1, v53);
}

void sub_23DBC9AD4(uint64_t a1, id a2, char a3, void (*a4)(uint64_t, id, uint64_t), uint64_t a5, uint64_t (*a6)(id))
{
  uint64_t v9;
  id v10;

  if ((a3 & 1) != 0)
  {
    v10 = a2;
    a4(a1, a2, 1);
    sub_23DBC9DC8(a2, 1);
  }
  else
  {
    v9 = a6(a2);
    a4(a1, (id)v9, 0);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_23DBC9B70()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23DBC9B9C(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;

  sub_23DBC9AD4(a1, a2, a3 & 1, *(void (**)(uint64_t, id, uint64_t))(v3 + 16), *(_QWORD *)(v3 + 24), *(uint64_t (**)(id))(v3 + 32));
}

void sub_23DBC9BAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_25431ED78)
  {
    v2 = type metadata accessor for SleepingSampleDaySummary();
    v3 = sub_23DBB2CB0(&qword_25431ED70, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleDaySummary);
    v5 = type metadata accessor for SleepingSampleDaySummaryQuery(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_25431ED78);
  }
}

uint64_t sub_23DBC9C24(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

unint64_t sub_23DBC9C34()
{
  unint64_t result;

  result = qword_25431F2A0;
  if (!qword_25431F2A0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25431F2A0);
  }
  return result;
}

uint64_t SleepingSampleDaySummaryCollectionQuery.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SleepingSampleDaySummaryCollectionQuery.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

unint64_t sub_23DBC9CB4()
{
  unint64_t result;

  result = qword_256CE98B0;
  if (!qword_256CE98B0)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDaySummaryCollectionQuery.AggregationInterval, &type metadata for SleepingSampleDaySummaryCollectionQuery.AggregationInterval);
    atomic_store(result, (unint64_t *)&qword_256CE98B0);
  }
  return result;
}

uint64_t type metadata accessor for SleepingSampleDaySummaryCollectionQuery()
{
  return objc_opt_self();
}

uint64_t method lookup function for SleepingSampleDaySummaryCollectionQuery()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepingSampleDaySummaryCollectionQuery.__allocating_init(gregorianDayRange:aggregationInterval:continueAfterInitialResults:resultsHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t storeEnumTagSinglePayload for SleepingSampleDaySummaryCollectionQuery.AggregationInterval(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DBC9D6C + 4 * byte_23DC2CC90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DBC9D8C + 4 * byte_23DC2CC95[v4]))();
}

_BYTE *sub_23DBC9D6C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DBC9D8C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DBC9D94(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DBC9D9C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DBC9DA4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DBC9DAC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDaySummaryCollectionQuery.AggregationInterval()
{
  return &type metadata for SleepingSampleDaySummaryCollectionQuery.AggregationInterval;
}

void sub_23DBC9DC8(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

uint64_t sub_23DBC9DD4(uint64_t a1)
{
  uint64_t v2;

  sub_23DBB89B8(0, &qword_256CE9958, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummaryCollection, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DBC9E28(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  size_t v12;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_21;
  if (!v5)
    return MEMORY[0x24BEE4AF8];
  if (v5 <= 0)
  {
    v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if (v4 != a3)
    {
LABEL_10:
      if (v5 < 0)
        goto LABEL_24;
      v14 = *(_QWORD *)(type metadata accessor for SleepingSampleDaySummary() - 8);
      v15 = (char *)v11 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
      v16 = *(_QWORD *)(v14 + 72);
      v17 = a2 + v16 * a3;
      v18 = v16 * v5;
      v19 = &v15[v18];
      v20 = v17 + v18;
      if (v17 < (unint64_t)v19 && (unint64_t)v15 < v20)
        goto LABEL_24;
      swift_arrayInitWithCopy();
      return (uint64_t)v11;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_23DBB89B8(0, &qword_256CE9960, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v8 = *(_QWORD *)(type metadata accessor for SleepingSampleDaySummary() - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = (_QWORD *)swift_allocObject();
  v12 = _swift_stdlib_malloc_size(v11);
  if (v9)
  {
    if (v12 - v10 == 0x8000000000000000 && v9 == -1)
      goto LABEL_23;
    v11[2] = v5;
    v11[3] = 2 * ((uint64_t)(v12 - v10) / v9);
    if (v4 != a3)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

uint64_t TrainingLoadAcuteBaseline.init(quantity:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    sub_23DBC68B0();
    v7 = a1;
    sub_23DC2A064();
    sub_23DBC6894(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 0, 1, v8);

  }
  else
  {
    sub_23DBC6894(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 1, 1, v9);
  }
  return sub_23DBBCEB0((uint64_t)v6, a2, (uint64_t (*)(_QWORD))sub_23DBB29B8);
}

uint64_t TrainingLoadAcuteBaseline.quantity.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = v0;
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBCA1B4(v1, (uint64_t)v4);
  sub_23DBC6894(0);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v5) == 1)
  {
    sub_23DBB2BB0((uint64_t)v4, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    return 0;
  }
  else
  {
    v8 = sub_23DC2A040();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  return v8;
}

uint64_t sub_23DBCA1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBB29B8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t TrainingLoadAcuteBaseline.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  sub_23DBC6894(0);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBCA1B4(v0, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
    return sub_23DC2A898();
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  sub_23DC2A898();
  sub_23DBCB894((unint64_t *)&qword_256CE95E8, sub_23DBCA328, MEMORY[0x24BDD2068]);
  sub_23DC2A190();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_23DBCA328()
{
  return sub_23DBB2CB0(&qword_256CE95F0, (uint64_t (*)(uint64_t))sub_23DBC68B0, MEMORY[0x24BEE5BD8]);
}

uint64_t sub_23DBCA348()
{
  return 0x797469746E617571;
}

uint64_t sub_23DBCA36C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x797469746E617571 && a2 == 0xEF72657070617257)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23DC2A7FC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23DBCA424()
{
  sub_23DBCB06C();
  return sub_23DC2A964();
}

uint64_t sub_23DBCA44C()
{
  sub_23DBCB06C();
  return sub_23DC2A970();
}

uint64_t TrainingLoadAcuteBaseline.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_23DBCB0B0(0, &qword_256CE9968, MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBCB06C();
  sub_23DC2A8C8();
  sub_23DBC6894(0);
  sub_23DBB2CB0(&qword_25431EF28, (uint64_t (*)(uint64_t))sub_23DBC6894, MEMORY[0x24BDD2060]);
  sub_23DC2A790();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t TrainingLoadAcuteBaseline.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v1 = v0;
  sub_23DBC6894(0);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC2A880();
  sub_23DBCA1B4(v1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    sub_23DC2A898();
    sub_23DBCB894((unint64_t *)&qword_256CE95E8, sub_23DBCA328, MEMORY[0x24BDD2068]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return sub_23DC2A8B0();
}

uint64_t TrainingLoadAcuteBaseline.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t AcuteBaseline;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v18 = a2;
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v4);
  v19 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBCB0B0(0, &qword_256CE9978, MEMORY[0x24BEE33E0]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  AcuteBaseline = type metadata accessor for TrainingLoadAcuteBaseline();
  MEMORY[0x24BDAC7A8](AcuteBaseline);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBCB06C();
  sub_23DC2A8BC();
  if (!v2)
  {
    v14 = v18;
    sub_23DBC6894(0);
    sub_23DBB2CB0(&qword_25431F260, (uint64_t (*)(uint64_t))sub_23DBC6894, MEMORY[0x24BDD2078]);
    v15 = (uint64_t)v19;
    sub_23DC2A730();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_23DBBCEB0(v15, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    sub_23DBBCEB0((uint64_t)v13, v14, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadAcuteBaseline);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23DBCA8CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  sub_23DBC6894(0);
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBCA1B4(v0, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
    return sub_23DC2A898();
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  sub_23DC2A898();
  sub_23DBCB894((unint64_t *)&qword_256CE95E8, sub_23DBCA328, MEMORY[0x24BDD2068]);
  sub_23DC2A190();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_23DBCA9FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v1 = v0;
  sub_23DBC6894(0);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC2A880();
  sub_23DBCA1B4(v1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    sub_23DC2A898();
    sub_23DBCB894((unint64_t *)&qword_256CE95E8, sub_23DBCA328, MEMORY[0x24BDD2068]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return sub_23DC2A8B0();
}

uint64_t sub_23DBCAB4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TrainingLoadAcuteBaseline.init(from:)(a1, a2);
}

uint64_t sub_23DBCAB60(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_23DBCB0B0(0, &qword_256CE9968, MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBCB06C();
  sub_23DC2A8C8();
  sub_23DBC6894(0);
  sub_23DBB2CB0(&qword_25431EF28, (uint64_t (*)(uint64_t))sub_23DBC6894, MEMORY[0x24BDD2060]);
  sub_23DC2A790();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t TrainingLoadAcuteBaseline.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  unint64_t v11;
  unint64_t v12;

  v1 = v0;
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0xD000000000000024;
  v12 = 0x800000023DC32170;
  sub_23DBCA1B4(v1, (uint64_t)v4);
  sub_23DBC6894(0);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v5) == 1)
  {
    sub_23DBB2BB0((uint64_t)v4, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  }
  else
  {
    v8 = sub_23DC2A040();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
    v10[1] = v8;
    sub_23DBC68B0();
    sub_23DC2A25C();
  }
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  return v11;
}

BOOL _s13HealthBalance25TrainingLoadAcuteBaselineV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;

  sub_23DBC6894(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBCB834();
  v10 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v27 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v27 - v20;
  sub_23DBCA1B4(a1, (uint64_t)&v27 - v20);
  sub_23DBCA1B4(a2, (uint64_t)v19);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_23DBCA1B4((uint64_t)v21, (uint64_t)v12);
  sub_23DBCA1B4((uint64_t)v19, v22);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v23((uint64_t)v12, 1, v5) == 1)
  {
    sub_23DBB2BB0((uint64_t)v19, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    sub_23DBB2BB0((uint64_t)v21, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    if (v23(v22, 1, v5) == 1)
    {
      sub_23DBB2BB0((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DBB29B8);
      return 1;
    }
    goto LABEL_6;
  }
  sub_23DBCA1B4((uint64_t)v12, (uint64_t)v16);
  if (v23(v22, 1, v5) == 1)
  {
    sub_23DBB2BB0((uint64_t)v19, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    sub_23DBB2BB0((uint64_t)v21, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v16, v5);
LABEL_6:
    sub_23DBB2BB0((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DBCB834);
    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v22, v5);
  sub_23DBCB894((unint64_t *)&qword_256CE9A38, sub_23DBCB8F8, MEMORY[0x24BDD2070]);
  v24 = sub_23DC2A1F0();
  v25 = *(void (**)(char *, uint64_t))(v6 + 8);
  v25(v8, v5);
  sub_23DBB2BB0((uint64_t)v19, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBB2BB0((uint64_t)v21, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  v25(v16, v5);
  sub_23DBB2BB0((uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  return (v24 & 1) != 0;
}

unint64_t sub_23DBCB06C()
{
  unint64_t result;

  result = qword_256CE9970;
  if (!qword_256CE9970)
  {
    result = MEMORY[0x24263E440](&unk_23DC2CF50, &type metadata for TrainingLoadAcuteBaseline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9970);
  }
  return result;
}

void sub_23DBCB0B0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DBCB06C();
    v7 = a3(a1, &type metadata for TrainingLoadAcuteBaseline.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t type metadata accessor for TrainingLoadAcuteBaseline()
{
  uint64_t result;

  result = qword_256CE99E0;
  if (!qword_256CE99E0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DBCB148()
{
  return sub_23DBB2CB0(&qword_256CE9980, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadAcuteBaseline, (uint64_t)&protocol conformance descriptor for TrainingLoadAcuteBaseline);
}

uint64_t *initializeBufferWithCopyOfBuffer for TrainingLoadAcuteBaseline(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_23DBB29B8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    sub_23DBC6894(0);
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
  }
  return a1;
}

uint64_t destroy for TrainingLoadAcuteBaseline(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  sub_23DBC6894(0);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *initializeWithCopy for TrainingLoadAcuteBaseline(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_23DBC6894(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v4))
  {
    sub_23DBB29B8();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for TrainingLoadAcuteBaseline(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;

  sub_23DBC6894(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v4);
  v9 = v7(a2, 1, v5);
  if (!v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    sub_23DBB29B8();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  return a1;
}

void *initializeWithTake for TrainingLoadAcuteBaseline(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_23DBC6894(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v4))
  {
    sub_23DBB29B8();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for TrainingLoadAcuteBaseline(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;

  sub_23DBC6894(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v4);
  v9 = v7(a2, 1, v5);
  if (!v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    sub_23DBB29B8();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrainingLoadAcuteBaseline()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBCB5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBB29B8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TrainingLoadAcuteBaseline()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBCB618(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBB29B8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_23DBCB658()
{
  unint64_t v0;

  sub_23DBB29B8();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for TrainingLoadAcuteBaseline.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DBCB700 + 4 * asc_23DC2CD80[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DBCB720 + 4 * byte_23DC2CD85[v4]))();
}

_BYTE *sub_23DBCB700(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DBCB720(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DBCB728(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DBCB730(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DBCB738(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DBCB740(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadAcuteBaseline.CodingKeys()
{
  return &type metadata for TrainingLoadAcuteBaseline.CodingKeys;
}

unint64_t sub_23DBCB760()
{
  unint64_t result;

  result = qword_256CE9A18;
  if (!qword_256CE9A18)
  {
    result = MEMORY[0x24263E440](&unk_23DC2CF28, &type metadata for TrainingLoadAcuteBaseline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9A18);
  }
  return result;
}

unint64_t sub_23DBCB7A8()
{
  unint64_t result;

  result = qword_256CE9A20;
  if (!qword_256CE9A20)
  {
    result = MEMORY[0x24263E440](&unk_23DC2CE98, &type metadata for TrainingLoadAcuteBaseline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9A20);
  }
  return result;
}

unint64_t sub_23DBCB7F0()
{
  unint64_t result;

  result = qword_256CE9A28;
  if (!qword_256CE9A28)
  {
    result = MEMORY[0x24263E440](&unk_23DC2CEC0, &type metadata for TrainingLoadAcuteBaseline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9A28);
  }
  return result;
}

void sub_23DBCB834()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CE9A30)
  {
    sub_23DBB29B8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CE9A30);
  }
}

uint64_t sub_23DBCB894(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_23DBC6894(255);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x24263E440](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DBCB8F8()
{
  return sub_23DBB2CB0(&qword_256CE9608, (uint64_t (*)(uint64_t))sub_23DBC68B0, MEMORY[0x24BEE5BE0]);
}

uint64_t String.init<A>(describingOptional:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];
  _QWORD v10[2];

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a2;
  v9[2] = a2;
  v9[3] = sub_23DBCBC08;
  v9[4] = v4;
  v5 = sub_23DC2A4C0();
  sub_23DBCB9F4((void (*)(char *, char *))sub_23DBCBC10, (uint64_t)v9, MEMORY[0x24BEE4078], MEMORY[0x24BEE0D00], v6, (uint64_t)v10);
  swift_release();
  if (v10[1])
    v7 = v10[0];
  else
    v7 = 7104878;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return v7;
}

uint64_t sub_23DBCB9F4@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *);
  uint64_t v29;

  v26 = a5;
  v27 = a2;
  v28 = a1;
  v29 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v10);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v29, 1, 1, a4);
  v25 = a3;
  v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v12, v25);
  return result;
}

uint64_t sub_23DBCBB8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  return sub_23DC2A25C();
}

uint64_t sub_23DBCBBF8()
{
  return swift_deallocObject();
}

uint64_t sub_23DBCBC08(uint64_t a1)
{
  return sub_23DBCBB8C(a1);
}

uint64_t sub_23DBCBC10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(v1 + 24))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t TrainingLoadDataType.hash(into:)()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8) != 1)
    sub_23DC2A88C();
  return sub_23DC2A88C();
}

uint64_t static TrainingLoadDataType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
  if (*(_QWORD *)a2)
    v4 = *(unsigned __int8 *)(a2 + 8);
  else
    v4 = 0;
  if (*(_QWORD *)a2)
    v2 = 0;
  if (*(_QWORD *)a1)
    v5 = v4;
  else
    v5 = v2;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v5;
  else
    return v3;
}

uint64_t TrainingLoadDataType.hashValue.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_23DC2A880();
  if (v1 != 1)
    sub_23DC2A88C();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBCBD38()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_23DC2A880();
  if (v1 != 1)
    sub_23DC2A88C();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBCBDA0()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8) != 1)
    sub_23DC2A88C();
  return sub_23DC2A88C();
}

uint64_t sub_23DBCBDEC()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_23DC2A880();
  if (v1 != 1)
    sub_23DC2A88C();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBCBE50(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
  if (*(_QWORD *)a2)
    v4 = *(unsigned __int8 *)(a2 + 8);
  else
    v4 = 0;
  if (*(_QWORD *)a2)
    v2 = 0;
  if (*(_QWORD *)a1)
    v5 = v4;
  else
    v5 = v2;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v5;
  else
    return v3;
}

unint64_t sub_23DBCBE90()
{
  unint64_t result;

  result = qword_256CE9A40;
  if (!qword_256CE9A40)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for TrainingLoadDataType, &type metadata for TrainingLoadDataType);
    atomic_store(result, (unint64_t *)&qword_256CE9A40);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TrainingLoadDataType(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TrainingLoadDataType(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_23DBCBF24(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23DBCBF40(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadDataType()
{
  return &type metadata for TrainingLoadDataType;
}

uint64_t sub_23DBCBF70()
{
  uint64_t v0;

  v0 = sub_23DC29FF8();
  __swift_allocate_value_buffer(v0, qword_25431F3C8);
  __swift_project_value_buffer(v0, (uint64_t)qword_25431F3C8);
  return sub_23DC29FEC();
}

uint64_t static Logger.balance.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_25431F3A8 != -1)
    swift_once();
  v2 = sub_23DC29FF8();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_25431F3C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static OS_os_log.balance.getter()
{
  sub_23DBCC0A8();
  return sub_23DC2A4B4();
}

unint64_t sub_23DBCC0A8()
{
  unint64_t result;

  result = qword_25431EA60;
  if (!qword_25431EA60)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25431EA60);
  }
  return result;
}

uint64_t SleepingSampleDaySummaryCollection.init(gregorianDayRange:daySummaries:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  sub_23DBBCEB0(a1, a3, (uint64_t (*)(_QWORD))type metadata accessor for GregorianDayRange);
  result = type metadata accessor for SleepingSampleDaySummaryCollection();
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for SleepingSampleDaySummaryCollection()
{
  uint64_t result;

  result = qword_25431F248;
  if (!qword_25431F248)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SleepingSampleDaySummaryCollection.gregorianDayRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DBB2B6C(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for GregorianDayRange);
}

uint64_t SleepingSampleDaySummaryCollection.gregorianDayRange.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23DBCC18C(a1, v1);
}

uint64_t sub_23DBCC18C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GregorianDayRange();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*SleepingSampleDaySummaryCollection.gregorianDayRange.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummaryCollection.morningIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DBB2B6C(v1, a1, (uint64_t (*)(_QWORD))sub_23DBB9590);
}

uint64_t SleepingSampleDaySummaryCollection.daySummaries.getter()
{
  type metadata accessor for SleepingSampleDaySummaryCollection();
  return swift_bridgeObjectRetain();
}

uint64_t SleepingSampleDaySummaryCollection.daySummaries.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for SleepingSampleDaySummaryCollection() + 20);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*SleepingSampleDaySummaryCollection.daySummaries.modify())()
{
  type metadata accessor for SleepingSampleDaySummaryCollection();
  return nullsub_1;
}

size_t SleepingSampleDaySummaryCollection.baselineComparisons.getter()
{
  uint64_t v0;
  uint64_t v1;
  size_t v2;

  type metadata accessor for SleepingSampleDaySummaryCollection();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_23DBCC300(v0);
  swift_bridgeObjectRelease();
  v2 = sub_23DBCD3DC(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_23DBCC300(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v15 = MEMORY[0x24BEE4AF8];
    sub_23DBCC9B0(0, v1, 0);
    v2 = v15;
    v4 = (int *)type metadata accessor for SleepingSampleDaySummary();
    v5 = *((_QWORD *)v4 - 1);
    v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v14 = *(_QWORD *)(v5 + 72);
    sub_23DBCE024(0);
    v7 = *(_QWORD *)(type metadata accessor for SleepingSampleBaselineComparison() - 8);
    v8 = *(_QWORD *)(v7 + 72);
    v13 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    do
    {
      v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_23DC2D050;
      sub_23DBB2B6C(v6 + v4[8], v9 + v13, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      sub_23DBB2B6C(v6 + v4[9], v9 + v13 + v8, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      sub_23DBB2B6C(v6 + v4[10], v9 + v13 + 2 * v8, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      sub_23DBB2B6C(v6 + v4[11], v9 + v13 + 3 * v8, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      sub_23DBB2B6C(v6 + v4[12], v9 + v13 + 4 * v8, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      v11 = *(_QWORD *)(v15 + 16);
      v10 = *(_QWORD *)(v15 + 24);
      if (v11 >= v10 >> 1)
        sub_23DBCC9B0(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v15 + 16) = v11 + 1;
      *(_QWORD *)(v15 + 8 * v11 + 32) = v9;
      v6 += v14;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23DBCC4EC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    sub_23DBCC9CC(0, v1, 0);
    v2 = v11;
    v4 = *(_QWORD *)(type metadata accessor for SleepingSampleDaySummary() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = SleepingSampleDaySummary.outOfRangeMetricCount.getter();
      v9 = *(_QWORD *)(v11 + 16);
      v8 = *(_QWORD *)(v11 + 24);
      if (v9 >= v8 >> 1)
        sub_23DBCC9CC(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v11 + 16) = v9 + 1;
      *(_QWORD *)(v11 + 8 * v9 + 32) = v7;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t SleepingSampleDaySummaryCollection.outOfRangeMetricCount.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;

  type metadata accessor for SleepingSampleDaySummaryCollection();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_23DBCC4EC(v0);
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(v1 + 32);
    while (1)
    {
      v6 = *v5++;
      v7 = __OFADD__(v4, v6);
      v4 += v6;
      if (v7)
        break;
      if (!--v3)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
    v4 = 0;
LABEL_7:
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

uint64_t SleepingSampleDaySummaryCollection.baselineComparisons(for:)(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for SleepingSampleDaySummary();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SleepingSampleBaselineComparison();
  MEMORY[0x24BDAC7A8](v7);
  v14 = *a1;
  v8 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for SleepingSampleDaySummaryCollection() + 20));
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v15 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_23DBCC9E8(0, v9, 0);
    v10 = v8 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v11 = *(_QWORD *)(v4 + 72);
    v13[4] = v3 + 48;
    v13[5] = v11;
    v13[2] = v3 + 40;
    v13[3] = v3 + 44;
    v13[0] = v8;
    v13[1] = v3 + 36;
    sub_23DBB2B6C(v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4AF8];
}

size_t sub_23DBCC8C4()
{
  uint64_t v0;
  uint64_t v1;
  size_t v2;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_23DBCC300(v0);
  swift_bridgeObjectRelease();
  v2 = sub_23DBCD3DC(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_23DBCC92C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DBB2B6C(v1, a1, (uint64_t (*)(_QWORD))sub_23DBB9590);
}

uint64_t sub_23DBCC958(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DBCCAA4(a1, a2, a3, (_QWORD *)*v3, sub_23DBCE0FC, (uint64_t (*)(_QWORD))MEMORY[0x24BDCB988]);
  *v3 = result;
  return result;
}

uint64_t sub_23DBCC984(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DBCCAA4(a1, a2, a3, (_QWORD *)*v3, sub_23DBCDFEC, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
  *v3 = result;
  return result;
}

uint64_t sub_23DBCC9B0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DBCCC84(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23DBCC9CC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DBCCE1C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DBCC9E8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DBCCAA4(a1, a2, a3, (_QWORD *)*v3, sub_23DBCE024, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  *v3 = result;
  return result;
}

uint64_t sub_23DBCCA14(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DBCCF84(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23DBCCA30(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DBCCAA4(a1, a2, a3, (_QWORD *)*v3, sub_23DBCE008, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSampleDaySummary);
  *v3 = result;
  return result;
}

uint64_t sub_23DBCCA5C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23DBCD11C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23DBCCA78(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23DBCCAA4(a1, a2, a3, (_QWORD *)*v3, sub_23DBCDFD0, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
  *v3 = result;
  return result;
}

uint64_t sub_23DBCCAA4(char a1, int64_t a2, char a3, _QWORD *a4, void (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  a5(0);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

uint64_t sub_23DBCCC84(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_23DBB89B8(0, &qword_256CE9A68, (uint64_t (*)(uint64_t))sub_23DBCE0A0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_23DBCE0A0(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

uint64_t sub_23DBCCE1C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DBCE040(0, &qword_256CE9A60);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

uint64_t sub_23DBCCF84(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_23DBB89B8(0, &qword_256CE9A48, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityRequirementIdentifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

uint64_t sub_23DBCD11C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DBCE040(0, &qword_256CE9A58);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

uint64_t sub_23DBCD284(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DBCE040(0, &qword_25431F140);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

size_t sub_23DBCD3DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;

  sub_23DBCE084(0);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v44 = (uint64_t)v41 - v6;
  v7 = type metadata accessor for SleepingSampleBaselineComparison();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v46 = (uint64_t)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v42 = (v10 + 32) & ~v10;
  v47 = (char *)(MEMORY[0x24BEE4AF8] + v42);
  v41[1] = v10 | 7;
  result = swift_bridgeObjectRetain();
  v48 = 0;
  v49 = 0;
  v13 = 0;
LABEL_4:
  v16 = *(_QWORD *)(a1 + 16);
  if (v13 != v16)
  {
    if (v13 < v16)
    {
      while (1)
      {
        v17 = *(_QWORD *)(a1 + 32 + 8 * v13);
        swift_bridgeObjectRetain();
        result = swift_bridgeObjectRelease();
        if (v17)
          break;
LABEL_9:
        ++v13;
        v18 = *(_QWORD *)(a1 + 16);
        if (v13 == v18)
          goto LABEL_37;
        if (v13 >= v18)
          goto LABEL_43;
      }
      v14 = *(_QWORD *)(v17 + 16);
      if (!v14)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5, 1, 1, v7);
        result = sub_23DBB2BB0((uint64_t)v5, (uint64_t (*)(_QWORD))sub_23DBCE084);
        goto LABEL_9;
      }
      v15 = 0;
      ++v13;
      while (1)
      {
        if (v15 >= v14)
          goto LABEL_44;
        v45 = v11;
        v19 = *(_QWORD *)(v8 + 72);
        v49 = v15;
        v43 = v19;
        sub_23DBB2B6C(v17 + v42 + v19 * v15, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
        v20 = v44;
        sub_23DBBCEB0((uint64_t)v5, v44, (uint64_t (*)(_QWORD))sub_23DBCE084);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7) == 1)
        {
          swift_bridgeObjectRelease();
          v11 = v45;
          goto LABEL_38;
        }
        result = sub_23DBBCEB0(v20, v46, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
        v21 = v48;
        if (!v48)
          break;
        v22 = v45;
LABEL_35:
        v35 = __OFSUB__(v21, 1);
        v36 = v21 - 1;
        if (v35)
          goto LABEL_45;
        v48 = v36;
        ++v49;
        v37 = (uint64_t)v47;
        result = sub_23DBBCEB0(v46, (uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
        v47 = (char *)(v37 + v43);
        v11 = v22;
        v14 = *(_QWORD *)(v17 + 16);
        v15 = v49;
        if (v49 == v14)
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v5, 1, 1, v7);
          result = sub_23DBB2BB0((uint64_t)v5, (uint64_t (*)(_QWORD))sub_23DBCE084);
          goto LABEL_4;
        }
      }
      v23 = v45[3];
      if ((uint64_t)((v23 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_47;
      v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
      if (v24 <= 1)
        v25 = 1;
      else
        v25 = v24;
      sub_23DBCE024(0);
      v26 = v42;
      v27 = v43;
      v48 = (char *)v25;
      v22 = (_QWORD *)swift_allocObject();
      result = _swift_stdlib_malloc_size(v22);
      if (!v27)
        goto LABEL_48;
      v28 = result - v26;
      if (result - v26 == 0x8000000000000000 && v27 == -1)
        goto LABEL_49;
      v30 = v28 / v27;
      v22[2] = v48;
      v22[3] = 2 * (v28 / v27);
      v31 = (char *)v22 + v26;
      v32 = v45[3] >> 1;
      v33 = v32 * v27;
      if (!v45[2])
      {
LABEL_34:
        v47 = &v31[v33];
        v21 = (char *)((v30 & 0x7FFFFFFFFFFFFFFFLL) - v32);
        result = swift_release();
        goto LABEL_35;
      }
      if (v22 < v45 || v31 >= (char *)v45 + v26 + v33)
      {
        v34 = v45[3] >> 1;
        v47 = (char *)v30;
        v48 = (char *)v22 + v26;
        v41[0] = v33;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (v22 == v45)
        {
LABEL_33:
          v45[2] = 0;
          goto LABEL_34;
        }
        v34 = v45[3] >> 1;
        v47 = (char *)v30;
        v48 = (char *)v22 + v26;
        v41[0] = v33;
        swift_arrayInitWithTakeBackToFront();
      }
      v33 = v41[0];
      v32 = v34;
      v30 = (uint64_t)v47;
      v31 = v48;
      goto LABEL_33;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
LABEL_37:
  v20 = v44;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v44, 1, 1, v7);
  swift_bridgeObjectRelease();
LABEL_38:
  swift_bridgeObjectRelease();
  result = sub_23DBB2BB0(v20, (uint64_t (*)(_QWORD))sub_23DBCE084);
  v38 = v11[3];
  if (v38 < 2)
    return (size_t)v11;
  v39 = v38 >> 1;
  v35 = __OFSUB__(v39, v48);
  v40 = v39 - (_QWORD)v48;
  if (!v35)
  {
    v11[2] = v40;
    return (size_t)v11;
  }
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t _s13HealthBalance34SleepingSampleDaySummaryCollectionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;

  sub_23DBB9590();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v16 - v8;
  sub_23DC2A154();
  sub_23DBCE0BC(&qword_256CE9818, MEMORY[0x24BDD24B0]);
  v10 = sub_23DC2A1F0();
  sub_23DBB2B6C(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DBB9590);
  sub_23DBB2B6C(a2, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_23DBB9590);
  if ((v10 & 1) == 0)
  {
    sub_23DBB2BB0((uint64_t)v7, (uint64_t (*)(_QWORD))sub_23DBB9590);
    sub_23DBB2BB0((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DBB9590);
LABEL_6:
    v14 = 0;
    return v14 & 1;
  }
  v11 = sub_23DC2A1F0();
  sub_23DBB2BB0((uint64_t)v7, (uint64_t (*)(_QWORD))sub_23DBB9590);
  sub_23DBB2BB0((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DBB9590);
  if ((v11 & 1) == 0)
    goto LABEL_6;
  v12 = type metadata accessor for GregorianDayRange();
  if ((MEMORY[0x24263D5AC](a1 + *(int *)(v12 + 20), a2 + *(int *)(v12 + 20)) & 1) == 0)
    goto LABEL_6;
  v13 = type metadata accessor for SleepingSampleDaySummaryCollection();
  v14 = sub_23DC0F0FC(*(_QWORD *)(a1 + *(int *)(v13 + 20)), *(_QWORD *)(a2 + *(int *)(v13 + 20)));
  return v14 & 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleDaySummaryCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DC2A154();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_23DBB9590();
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    v10 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_23DC29F80();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SleepingSampleDaySummaryCollection(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_23DC2A154();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(a1, v2);
  sub_23DBB9590();
  v3(a1 + *(int *)(v4 + 36), v2);
  v5 = a1 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v6 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SleepingSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_23DBB9590();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SleepingSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_23DBB9590();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SleepingSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_23DBB9590();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for SleepingSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_23DBB9590();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleDaySummaryCollection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBCDE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for GregorianDayRange();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleDaySummaryCollection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBCDEE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for GregorianDayRange();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_23DBCDF5C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GregorianDayRange();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_23DBCDFD0(uint64_t a1)
{
  sub_23DBB89B8(a1, &qword_256CE9A50, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAggregate, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_23DBCDFEC(uint64_t a1)
{
  sub_23DBB89B8(a1, &qword_256CE9960, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_23DBCE008(uint64_t a1)
{
  sub_23DBB89B8(a1, (unint64_t *)&unk_256CE9D90, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_23DBCE024(uint64_t a1)
{
  sub_23DBB89B8(a1, (unint64_t *)&unk_25431FA78, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

void sub_23DBCE040(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_23DC2A7E4();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_23DBCE084(uint64_t a1)
{
  sub_23DBB89B8(a1, &qword_25431F238, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_23DBCE0A0(uint64_t a1)
{
  sub_23DBB89B8(a1, &qword_256CE9A70, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
}

uint64_t sub_23DBCE0BC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23DC2A154();
    result = MEMORY[0x24263E440](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23DBCE0FC(uint64_t a1)
{
  sub_23DBB89B8(a1, (unint64_t *)&unk_256CE9DB0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB988], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
}

uint64_t TrainingLoadBaselineComparison.init(acuteBaseline:chronicBaseline:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t ChronicBaseline;
  uint64_t v10;
  double *v11;
  uint64_t BaselineComparison;
  uint64_t v13;
  double v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  double v20;
  double v21;
  uint64_t v22;

  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  MEMORY[0x24BDAC7A8](ChronicBaseline);
  v11 = (double *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  v13 = a3 + *(int *)(BaselineComparison + 24);
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  sub_23DBB2B6C(a1, a3, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadAcuteBaseline);
  sub_23DBB2B6C(a2, a3 + *(int *)(BaselineComparison + 20), (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
  sub_23DBB2B6C(a2, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v14 = *v11;
    if (*v11 == 0.0)
    {
      sub_23DBB2BB0(a2, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
      result = sub_23DBB2BB0(a1, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadAcuteBaseline);
      *(_QWORD *)v13 = 0;
      *(_BYTE *)(v13 + 8) = 1;
    }
    else
    {
      sub_23DBB2B6C(a1, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DBB29B8);
      sub_23DBC6894(0);
      v17 = v16;
      v18 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v8, 1, v16) == 1)
      {
        sub_23DBB2BB0((uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DBB29B8);
        sub_23DBB2BB0(a2, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
        result = sub_23DBB2BB0(a1, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadAcuteBaseline);
        *(_QWORD *)v13 = 0;
        *(_BYTE *)(v13 + 8) = 1;
      }
      else
      {
        v19 = (void *)sub_23DC2A040();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v17);
        objc_msgSend(v19, sel__value);
        v21 = v20;

        sub_23DBB2BB0(a2, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
        result = sub_23DBB2BB0(a1, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadAcuteBaseline);
        *(double *)v13 = (v21 - v14) / v14;
        *(_BYTE *)(v13 + 8) = 0;
      }
    }
  }
  else
  {
    sub_23DBB2BB0(a2, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
    sub_23DBB2BB0(a1, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadAcuteBaseline);
    *(_QWORD *)v13 = 0;
    *(_BYTE *)(v13 + 8) = 1;
    return sub_23DBB2BB0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
  }
  return result;
}

uint64_t static TrainingLoadBaselineComparison.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t BaselineComparison;
  uint64_t v5;
  double *v6;
  char v7;
  double *v8;
  char v9;

  if (!_s13HealthBalance25TrainingLoadAcuteBaselineV2eeoiySbAC_ACtFZ_0(a1, a2))
    return 0;
  BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  if ((_s13HealthBalance27TrainingLoadChronicBaselineO2eeoiySbAC_ACtFZ_0(a1 + *(int *)(BaselineComparison + 20), a2 + *(int *)(BaselineComparison + 20)) & 1) == 0)return 0;
  v5 = *(int *)(BaselineComparison + 24);
  v6 = (double *)(a1 + v5);
  v7 = *(_BYTE *)(a1 + v5 + 8);
  v8 = (double *)(a2 + v5);
  v9 = *(_BYTE *)(a2 + v5 + 8);
  if ((v7 & 1) != 0)
  {
    if ((v9 & 1) == 0)
      return 0;
  }
  else
  {
    if (*v6 != *v8)
      v9 = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t type metadata accessor for TrainingLoadBaselineComparison()
{
  uint64_t result;

  result = qword_25431EC40;
  if (!qword_25431EC40)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t TrainingLoadBaselineComparison.acuteBaseline.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DBB2B6C(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadAcuteBaseline);
}

uint64_t TrainingLoadBaselineComparison.chronicBaseline.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t BaselineComparison;

  BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  return sub_23DBB2B6C(v1 + *(int *)(BaselineComparison + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
}

uint64_t TrainingLoadBaselineComparison.fractionalBaselineDifferenceFromChronic.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for TrainingLoadBaselineComparison() + 24));
}

uint64_t TrainingLoadBaselineComparison.fractionalBaselineDifferenceFromChronic.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for TrainingLoadBaselineComparison();
  v6 = v2 + *(int *)(result + 24);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*TrainingLoadBaselineComparison.fractionalBaselineDifferenceFromChronic.modify())()
{
  type metadata accessor for TrainingLoadBaselineComparison();
  return nullsub_1;
}

uint64_t TrainingLoadBaselineComparison.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  uint64_t BaselineComparison;
  uint64_t v13;

  v1 = v0;
  sub_23DBC6894(0);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(v1, (uint64_t)v9, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    sub_23DC2A898();
    sub_23DBBA6DC();
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  TrainingLoadChronicBaseline.hash(into:)();
  if (*(_BYTE *)(v1 + *(int *)(BaselineComparison + 24) + 8) == 1)
    return sub_23DC2A898();
  sub_23DC2A898();
  return sub_23DC2A8A4();
}

uint64_t sub_23DBCE6E4()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x4263696E6F726863;
  if (*v0 != 1)
    v1 = 0xD000000000000027;
  if (*v0)
    return v1;
  else
    return 0x7361426574756361;
}

uint64_t sub_23DBCE75C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBCFBA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DBCE780()
{
  sub_23DBCEE40();
  return sub_23DC2A964();
}

uint64_t sub_23DBCE7A8()
{
  sub_23DBCEE40();
  return sub_23DC2A970();
}

uint64_t TrainingLoadBaselineComparison.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  sub_23DBCEE84(0, &qword_256CE9A78, MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBCEE40();
  sub_23DC2A8C8();
  v9[15] = 0;
  type metadata accessor for TrainingLoadAcuteBaseline();
  sub_23DBB2CB0(&qword_256CE9A88, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadAcuteBaseline, (uint64_t)&protocol conformance descriptor for TrainingLoadAcuteBaseline);
  sub_23DC2A7C0();
  if (!v1)
  {
    type metadata accessor for TrainingLoadBaselineComparison();
    v9[14] = 1;
    type metadata accessor for TrainingLoadChronicBaseline();
    sub_23DBB2CB0(&qword_256CE9A90, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadChronicBaseline, (uint64_t)&protocol conformance descriptor for TrainingLoadChronicBaseline);
    sub_23DC2A7C0();
    v9[13] = 2;
    sub_23DC2A784();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t TrainingLoadBaselineComparison.hashValue.getter()
{
  sub_23DC2A880();
  TrainingLoadBaselineComparison.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t TrainingLoadBaselineComparison.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t BaselineComparison;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t ChronicBaseline;
  char *v25;
  uint64_t AcuteBaseline;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;
  char v32;
  char v33;

  v23 = a2;
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  MEMORY[0x24BDAC7A8](ChronicBaseline);
  v25 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AcuteBaseline = type metadata accessor for TrainingLoadAcuteBaseline();
  MEMORY[0x24BDAC7A8](AcuteBaseline);
  v27 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBCEE84(0, &qword_256CE9A98, MEMORY[0x24BEE33E0]);
  v29 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - v7;
  BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
  v10 = MEMORY[0x24BDAC7A8](BaselineComparison);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = &v12[*(int *)(v10 + 24)];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBCEE40();
  v28 = v8;
  v14 = v30;
  sub_23DC2A8BC();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v30 = (uint64_t *)v13;
  v15 = (uint64_t)v25;
  v16 = v6;
  v33 = 0;
  sub_23DBB2CB0(&qword_256CE9AA0, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadAcuteBaseline, (uint64_t)&protocol conformance descriptor for TrainingLoadAcuteBaseline);
  v17 = (uint64_t)v27;
  sub_23DC2A760();
  sub_23DBBCEB0(v17, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadAcuteBaseline);
  v32 = 1;
  sub_23DBB2CB0(&qword_256CE9AA8, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadChronicBaseline, (uint64_t)&protocol conformance descriptor for TrainingLoadChronicBaseline);
  sub_23DC2A760();
  sub_23DBBCEB0(v15, (uint64_t)&v12[*(int *)(BaselineComparison + 20)], (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
  v31 = 2;
  v18 = sub_23DC2A724();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v28, v29);
  v21 = v30;
  *v30 = v18;
  *((_BYTE *)v21 + 8) = v20 & 1;
  sub_23DBB2B6C((uint64_t)v12, v23, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadBaselineComparison);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23DBB2BB0((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadBaselineComparison);
}

uint64_t sub_23DBCED1C()
{
  sub_23DC2A880();
  TrainingLoadBaselineComparison.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBCED5C()
{
  sub_23DC2A880();
  TrainingLoadBaselineComparison.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBCED94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TrainingLoadBaselineComparison.init(from:)(a1, a2);
}

uint64_t sub_23DBCEDA8(_QWORD *a1)
{
  return TrainingLoadBaselineComparison.encode(to:)(a1);
}

uint64_t sub_23DBCEDBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double *v7;
  char v8;
  double *v9;
  int v10;

  if ((static TrainingLoadAcuteBaseline.== infix(_:_:)() & 1) != 0
    && (static TrainingLoadChronicBaseline.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0)
  {
    v6 = *(int *)(a3 + 24);
    v7 = (double *)(a1 + v6);
    v8 = *(_BYTE *)(a1 + v6 + 8);
    v9 = (double *)(a2 + v6);
    v10 = *(unsigned __int8 *)(a2 + v6 + 8);
    if ((v8 & 1) != 0)
    {
      if (v10)
        return 1;
    }
    else
    {
      if (*v7 != *v9)
        LOBYTE(v10) = 1;
      if ((v10 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

unint64_t sub_23DBCEE40()
{
  unint64_t result;

  result = qword_256CE9A80;
  if (!qword_256CE9A80)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D2CC, &type metadata for TrainingLoadBaselineComparison.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9A80);
  }
  return result;
}

void sub_23DBCEE84(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DBCEE40();
    v7 = a3(a1, &type metadata for TrainingLoadBaselineComparison.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DBCEEE0()
{
  return sub_23DBB2CB0(&qword_256CE9AB0, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadBaselineComparison, (uint64_t)&protocol conformance descriptor for TrainingLoadBaselineComparison);
}

uint64_t *initializeBufferWithCopyOfBuffer for TrainingLoadBaselineComparison(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t ChronicBaseline;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_23DBC6894(0);
    v8 = v7;
    v9 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      sub_23DBB29B8();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(ChronicBaseline - 8) + 64));
    }
    else
    {
      v16 = sub_23DC2A154();
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(v13, v14, v16);
      sub_23DBBFA18();
      v17(&v13[*(int *)(v18 + 36)], &v14[*(int *)(v18 + 36)], v16);
      sub_23DBBFA90();
      *(_QWORD *)&v13[*(int *)(v19 + 48)] = *(_QWORD *)&v14[*(int *)(v19 + 48)];
      *(_QWORD *)&v13[*(int *)(v19 + 64)] = *(_QWORD *)&v14[*(int *)(v19 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    v20 = *(int *)(a3 + 24);
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
  }
  return a1;
}

uint64_t destroy for TrainingLoadBaselineComparison(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  sub_23DBC6894(0);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  v7 = a1 + *(int *)(a2 + 20);
  type metadata accessor for TrainingLoadChronicBaseline();
  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v9 = sub_23DC2A154();
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v11(v7, v9);
    sub_23DBBFA18();
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v7 + *(int *)(v10 + 36), v9);
  }
  return result;
}

char *initializeWithCopy for TrainingLoadBaselineComparison(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t ChronicBaseline;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  sub_23DBC6894(0);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    sub_23DBB29B8();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(ChronicBaseline - 8) + 64));
  }
  else
  {
    v14 = sub_23DC2A154();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v15(v11, v12, v14);
    sub_23DBBFA18();
    v15(&v11[*(int *)(v16 + 36)], &v12[*(int *)(v16 + 36)], v14);
    sub_23DBBFA90();
    *(_QWORD *)&v11[*(int *)(v17 + 48)] = *(_QWORD *)&v12[*(int *)(v17 + 48)];
    *(_QWORD *)&v11[*(int *)(v17 + 64)] = *(_QWORD *)&v12[*(int *)(v17 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  return a1;
}

char *assignWithCopy for TrainingLoadBaselineComparison(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t ChronicBaseline;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  sub_23DBC6894(0);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 1, v6);
  v11 = v9(a2, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 24))(a1, a2, v7);
      if (a1 == a2)
        goto LABEL_12;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(a1, v7);
LABEL_7:
    sub_23DBB29B8();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    if (a1 == a2)
      goto LABEL_12;
    goto LABEL_8;
  }
  if (v11)
    goto LABEL_7;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(a1, a2, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  if (a1 == a2)
    goto LABEL_12;
LABEL_8:
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  sub_23DBB2BB0((uint64_t)&a1[v13], (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(ChronicBaseline - 8) + 64));
  }
  else
  {
    v17 = sub_23DC2A154();
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v14, v15, v17);
    sub_23DBBFA18();
    v18(&v14[*(int *)(v19 + 36)], &v15[*(int *)(v19 + 36)], v17);
    sub_23DBBFA90();
    *(_QWORD *)&v14[*(int *)(v20 + 48)] = *(_QWORD *)&v15[*(int *)(v20 + 48)];
    *(_QWORD *)&v14[*(int *)(v20 + 64)] = *(_QWORD *)&v15[*(int *)(v20 + 64)];
    swift_storeEnumTagMultiPayload();
  }
LABEL_12:
  v21 = *(int *)(a3 + 24);
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *(_QWORD *)v23;
  v22[8] = v23[8];
  *(_QWORD *)v22 = v24;
  return a1;
}

char *initializeWithTake for TrainingLoadBaselineComparison(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t ChronicBaseline;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  sub_23DBC6894(0);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    sub_23DBB29B8();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(ChronicBaseline - 8) + 64));
  }
  else
  {
    v14 = sub_23DC2A154();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
    v15(v11, v12, v14);
    sub_23DBBFA18();
    v15(&v11[*(int *)(v16 + 36)], &v12[*(int *)(v16 + 36)], v14);
    sub_23DBBFA90();
    *(_QWORD *)&v11[*(int *)(v17 + 48)] = *(_QWORD *)&v12[*(int *)(v17 + 48)];
    *(_QWORD *)&v11[*(int *)(v17 + 64)] = *(_QWORD *)&v12[*(int *)(v17 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  v18 = *(int *)(a3 + 24);
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  return a1;
}

char *assignWithTake for TrainingLoadBaselineComparison(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t ChronicBaseline;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  sub_23DBC6894(0);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(a1, 1, v6);
  v11 = v9(a2, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 40))(a1, a2, v7);
      if (a1 == a2)
        goto LABEL_12;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(a1, v7);
LABEL_7:
    sub_23DBB29B8();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    if (a1 == a2)
      goto LABEL_12;
    goto LABEL_8;
  }
  if (v11)
    goto LABEL_7;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  if (a1 == a2)
    goto LABEL_12;
LABEL_8:
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  sub_23DBB2BB0((uint64_t)&a1[v13], (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadChronicBaseline);
  ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(ChronicBaseline - 8) + 64));
  }
  else
  {
    v17 = sub_23DC2A154();
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
    v18(v14, v15, v17);
    sub_23DBBFA18();
    v18(&v14[*(int *)(v19 + 36)], &v15[*(int *)(v19 + 36)], v17);
    sub_23DBBFA90();
    *(_QWORD *)&v14[*(int *)(v20 + 48)] = *(_QWORD *)&v15[*(int *)(v20 + 48)];
    *(_QWORD *)&v14[*(int *)(v20 + 64)] = *(_QWORD *)&v15[*(int *)(v20 + 64)];
    swift_storeEnumTagMultiPayload();
  }
LABEL_12:
  v21 = *(int *)(a3 + 24);
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for TrainingLoadBaselineComparison()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBCF878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AcuteBaseline;
  uint64_t v7;
  uint64_t ChronicBaseline;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  AcuteBaseline = type metadata accessor for TrainingLoadAcuteBaseline();
  v7 = *(_QWORD *)(AcuteBaseline - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    ChronicBaseline = AcuteBaseline;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ChronicBaseline - 8) + 48);
  }
  return v9(v10, a2, ChronicBaseline);
}

uint64_t storeEnumTagSinglePayload for TrainingLoadBaselineComparison()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBCF8F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t AcuteBaseline;
  uint64_t v9;
  uint64_t ChronicBaseline;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  AcuteBaseline = type metadata accessor for TrainingLoadAcuteBaseline();
  v9 = *(_QWORD *)(AcuteBaseline - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    ChronicBaseline = AcuteBaseline;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    ChronicBaseline = type metadata accessor for TrainingLoadChronicBaseline();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ChronicBaseline - 8) + 56);
  }
  return v11(v12, a2, a2, ChronicBaseline);
}

void sub_23DBCF974()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DBB29B8();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TrainingLoadChronicBaseline();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for TrainingLoadBaselineComparison.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DBCFA4C + 4 * byte_23DC2D0F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DBCFA80 + 4 * asc_23DC2D0F0[v4]))();
}

uint64_t sub_23DBCFA80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBCFA88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBCFA90);
  return result;
}

uint64_t sub_23DBCFA9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBCFAA4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DBCFAA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBCFAB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadBaselineComparison.CodingKeys()
{
  return &type metadata for TrainingLoadBaselineComparison.CodingKeys;
}

unint64_t sub_23DBCFAD0()
{
  unint64_t result;

  result = qword_256CE9AB8;
  if (!qword_256CE9AB8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D2A4, &type metadata for TrainingLoadBaselineComparison.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9AB8);
  }
  return result;
}

unint64_t sub_23DBCFB18()
{
  unint64_t result;

  result = qword_256CE9AC0;
  if (!qword_256CE9AC0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D214, &type metadata for TrainingLoadBaselineComparison.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9AC0);
  }
  return result;
}

unint64_t sub_23DBCFB60()
{
  unint64_t result;

  result = qword_256CE9AC8;
  if (!qword_256CE9AC8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D23C, &type metadata for TrainingLoadBaselineComparison.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9AC8);
  }
  return result;
}

uint64_t sub_23DBCFBA4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7361426574756361 && a2 == 0xED0000656E696C65;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4263696E6F726863 && a2 == 0xEF656E696C657361 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000027 && a2 == 0x800000023DC321C0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t static HKKeyValueDomain.sleepingSampleChangeNotificationStateDomainName.getter()
{
  return 0xD000000000000025;
}

id static HKKeyValueDomain.makeSleepingSampleChangeNotificationStateDomain(for:)(void *a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;

  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v3 = a1;
  v4 = (void *)sub_23DC2A220();
  v5 = objc_msgSend(v2, sel_initWithCategory_domainName_healthStore_, 0, v4, v3);

  return v5;
}

uint64_t HKKeyValueDomain.SleepingSampleChangeNotificationStateKey.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_23DC2A700();
  result = swift_bridgeObjectRelease();
  v4 = 6;
  if (v2 < 6)
    v4 = v2;
  *a1 = v4;
  return result;
}

void *static HKKeyValueDomain.SleepingSampleChangeNotificationStateKey.allCases.getter()
{
  return &unk_250E881D8;
}

uint64_t HKKeyValueDomain.SleepingSampleChangeNotificationStateKey.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DBCFE7C + 4 * byte_23DC2D320[*v0]))(0x64657A796C616E61, 0xEC00000065746144);
}

unint64_t sub_23DBCFE7C()
{
  return 0xD000000000000010;
}

unint64_t sub_23DBCFE98()
{
  return 0xD000000000000019;
}

void sub_23DBCFF08(char *a1)
{
  sub_23DBC5010(*a1);
}

void sub_23DBCFF14()
{
  char *v0;

  sub_23DBF3D08(*v0);
}

void sub_23DBCFF1C(uint64_t a1)
{
  char *v1;

  sub_23DBF3EBC(a1, *v1);
}

void sub_23DBCFF24(uint64_t a1)
{
  char *v1;

  sub_23DBF44C8(a1, *v1);
}

uint64_t sub_23DBCFF2C@<X0>(char *a1@<X8>)
{
  return HKKeyValueDomain.SleepingSampleChangeNotificationStateKey.init(rawValue:)(a1);
}

uint64_t sub_23DBCFF38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = HKKeyValueDomain.SleepingSampleChangeNotificationStateKey.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_23DBCFF5C(_QWORD *a1@<X8>)
{
  *a1 = &unk_250E881D8;
}

void HKKeyValueDomain.setDismissedByHighlightAlertDate(_:)()
{
  void *v0;
  void *v1;
  uint64_t ObjectType;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[6];

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = (void *)sub_23DC29E0C();
  v4 = (void *)sub_23DC2A220();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = ObjectType;
  v7[4] = sub_23DBD03D0;
  v7[5] = v5;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1107296256;
  v7[2] = sub_23DBD03D8;
  v7[3] = &block_descriptor;
  v6 = _Block_copy(v7);
  swift_release();
  objc_msgSend(v1, sel_setDate_forKey_completion_, v3, v4, v6);
  _Block_release(v6);

}

void sub_23DBD0060(char a1, void *a2)
{
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  id v11;
  id v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *oslog;
  uint64_t v23;

  if ((a1 & 1) == 0)
  {
    if (qword_25431F3A8 != -1)
      swift_once();
    v10 = sub_23DC29FF8();
    __swift_project_value_buffer(v10, (uint64_t)qword_25431F3C8);
    v11 = a2;
    v12 = a2;
    oslog = sub_23DC29FE0();
    v13 = sub_23DC2A46C();
    if (os_log_type_enabled(oslog, v13))
    {
      v14 = swift_slowAlloc();
      v15 = swift_slowAlloc();
      v23 = v15;
      *(_DWORD *)v14 = 136446466;
      v16 = sub_23DC2A97C();
      sub_23DBF0610(v16, v17, &v23);
      sub_23DC2A4CC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      if (a2)
      {
        v18 = a2;
        sub_23DBD083C();
        v19 = sub_23DC2A25C();
        v21 = v20;
      }
      else
      {
        v21 = 0xE300000000000000;
        v19 = 7104878;
      }
      sub_23DBF0610(v19, v21, &v23);
      sub_23DC2A4CC();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_23DBAF000, oslog, v13, "[%{public}s] Error saving dismissal date: %{public}s)", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24263E4E8](v15, -1, -1);
      v8 = v14;
      goto LABEL_15;
    }

LABEL_12:
    return;
  }
  if (qword_25431F3A8 != -1)
    swift_once();
  v2 = sub_23DC29FF8();
  __swift_project_value_buffer(v2, (uint64_t)qword_25431F3C8);
  oslog = sub_23DC29FE0();
  v3 = sub_23DC2A46C();
  if (!os_log_type_enabled(oslog, v3))
    goto LABEL_12;
  v4 = (uint8_t *)swift_slowAlloc();
  v5 = swift_slowAlloc();
  v23 = v5;
  *(_DWORD *)v4 = 136446210;
  v6 = sub_23DC2A97C();
  sub_23DBF0610(v6, v7, &v23);
  sub_23DC2A4CC();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_23DBAF000, oslog, v3, "[%{public}s] Saved dismissal date", v4, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x24263E4E8](v5, -1, -1);
  v8 = (uint64_t)v4;
LABEL_15:
  MEMORY[0x24263E4E8](v8, -1, -1);

}

uint64_t sub_23DBD03C0()
{
  return swift_deallocObject();
}

void sub_23DBD03D0(char a1, void *a2)
{
  sub_23DBD0060(a1, a2);
}

void sub_23DBD03D8(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

uint64_t HKKeyValueDomain.resetValuesForAllKeys()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = v0;
  return swift_task_switch();
}

uint64_t sub_23DBD0450()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_23DBD04E0;
  v2 = swift_continuation_init();
  v0[10] = MEMORY[0x24BDAC760];
  v3 = v0 + 10;
  v3[1] = 0x40000000;
  v3[2] = sub_23DBD0588;
  v3[3] = &block_descriptor_1;
  v3[4] = v2;
  objc_msgSend(v1, sel_setValueForAllKeys_completion_, 0, v3);
  return swift_continuation_await();
}

uint64_t sub_23DBD04E0()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 128) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_23DBD0540()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DBD054C()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DBD0588(uint64_t a1, int a2, void *a3)
{
  uint64_t result;
  _QWORD *v5;
  id v6;

  if (a2)
    return swift_continuation_throwingResume();
  if (a3)
  {
    sub_23DBD083C();
    swift_allocError();
    *v5 = a3;
    v6 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id static HKKeyValueDomain.makeSyncedUnprotectedApplicationStateDomain(for:)(void *a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;

  v2 = objc_allocWithZone(MEMORY[0x24BDD3C98]);
  v3 = a1;
  v4 = (void *)sub_23DC2A220();
  v5 = objc_msgSend(v2, sel_initWithCategory_domainName_healthStore_, 4, v4, v3);

  return v5;
}

unint64_t sub_23DBD068C()
{
  unint64_t result;

  result = qword_256CE9AD8;
  if (!qword_256CE9AD8)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for HKKeyValueDomain.SleepingSampleChangeNotificationStateKey, &type metadata for HKKeyValueDomain.SleepingSampleChangeNotificationStateKey);
    atomic_store(result, (unint64_t *)&qword_256CE9AD8);
  }
  return result;
}

unint64_t sub_23DBD06D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CE9AE0;
  if (!qword_256CE9AE0)
  {
    sub_23DBD071C();
    result = MEMORY[0x24263E440](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256CE9AE0);
  }
  return result;
}

void sub_23DBD071C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE9AE8)
  {
    v0 = sub_23DC2A3A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE9AE8);
  }
}

uint64_t _s40SleepingSampleChangeNotificationStateKeyOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23DBD07BC + 4 * byte_23DC2D32B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23DBD07F0 + 4 * byte_23DC2D326[v4]))();
}

uint64_t sub_23DBD07F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBD07F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBD0800);
  return result;
}

uint64_t sub_23DBD080C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBD0814);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23DBD0818(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBD0820(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HKKeyValueDomain.SleepingSampleChangeNotificationStateKey()
{
  return &type metadata for HKKeyValueDomain.SleepingSampleChangeNotificationStateKey;
}

unint64_t sub_23DBD083C()
{
  unint64_t result;

  result = qword_25431EE18;
  if (!qword_25431EE18)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25431EE18);
  }
  return result;
}

uint64_t SleepingSampleAggregate.quantity.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SleepingSampleAggregate();
  sub_23DBB2B6C(v0 + *(int *)(v4 + 24), (uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBC6894(0);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v5) == 1)
  {
    sub_23DBB2BB0((uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    return 0;
  }
  else
  {
    v8 = sub_23DC2A040();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);
  }
  return v8;
}

uint64_t type metadata accessor for SleepingSampleAggregate()
{
  uint64_t result;

  result = qword_25431F768;
  if (!qword_25431F768)
    return swift_getSingletonMetadata();
  return result;
}

BOOL SleepingSampleAggregate.Availability.couldResolveToValue.getter()
{
  unsigned __int8 *v0;

  return *v0 > 2u;
}

BOOL static SleepingSampleAggregate.Availability.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepingSampleAggregate.Availability.hash(into:)()
{
  return sub_23DC2A88C();
}

uint64_t sub_23DBD0A08(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DBD0A38 + 4 * byte_23DC2D480[a1]))(0x617461446F6ELL, 0xE600000000000000);
}

unint64_t sub_23DBD0A38()
{
  return 0xD000000000000010;
}

unint64_t sub_23DBD0A58()
{
  return 0xD000000000000018;
}

uint64_t sub_23DBD0A80()
{
  return 0x6C62616C69617661;
}

uint64_t sub_23DBD0A9C()
{
  sub_23DBD4678();
  return sub_23DC2A964();
}

uint64_t sub_23DBD0AC4()
{
  sub_23DBD4678();
  return sub_23DC2A970();
}

uint64_t sub_23DBD0AEC()
{
  unsigned __int8 *v0;

  return sub_23DBD0A08(*v0);
}

uint64_t sub_23DBD0AF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBD6124(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DBD0B18()
{
  sub_23DBD47CC();
  return sub_23DC2A964();
}

uint64_t sub_23DBD0B40()
{
  sub_23DBD47CC();
  return sub_23DC2A970();
}

uint64_t sub_23DBD0B68()
{
  sub_23DBD46BC();
  return sub_23DC2A964();
}

uint64_t sub_23DBD0B90()
{
  sub_23DBD46BC();
  return sub_23DC2A970();
}

uint64_t sub_23DBD0BB8()
{
  sub_23DBD4700();
  return sub_23DC2A964();
}

uint64_t sub_23DBD0BE0()
{
  sub_23DBD4700();
  return sub_23DC2A970();
}

uint64_t sub_23DBD0C08()
{
  sub_23DBD4744();
  return sub_23DC2A964();
}

uint64_t sub_23DBD0C30()
{
  sub_23DBD4744();
  return sub_23DC2A970();
}

uint64_t sub_23DBD0C58()
{
  sub_23DBD4788();
  return sub_23DC2A964();
}

uint64_t sub_23DBD0C80()
{
  sub_23DBD4788();
  return sub_23DC2A970();
}

void SleepingSampleAggregate.Availability.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[16];

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  sub_23DBB2A64(0, &qword_25431EF88, (uint64_t (*)(void))sub_23DBD4678, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.AvailableCodingKeys, MEMORY[0x24BEE3520]);
  v15[11] = *(_QWORD *)(v4 - 8);
  v15[12] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v15[10] = (char *)v15 - v5;
  sub_23DBB2A64(0, &qword_25431EF98, (uint64_t (*)(void))sub_23DBD46BC, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.EstablishingBaselineDataCodingKeys, v3);
  v15[8] = *(_QWORD *)(v6 - 8);
  v15[9] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v15[7] = (char *)v15 - v7;
  sub_23DBB2A64(0, &qword_25431EFA0, (uint64_t (*)(void))sub_23DBD4700, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.InsufficientBaselineDataCodingKeys, v3);
  v15[5] = *(_QWORD *)(v8 - 8);
  v15[6] = v8;
  MEMORY[0x24BDAC7A8](v8);
  v15[4] = (char *)v15 - v9;
  sub_23DBB2A64(0, &qword_25431EF90, (uint64_t (*)(void))sub_23DBD4744, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.InsufficientDataCodingKeys, v3);
  v15[2] = *(_QWORD *)(v10 - 8);
  v15[3] = v10;
  MEMORY[0x24BDAC7A8](v10);
  v15[1] = (char *)v15 - v11;
  sub_23DBB2A64(0, &qword_25431EF80, (uint64_t (*)(void))sub_23DBD4788, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.NoDataCodingKeys, v3);
  v15[0] = v12;
  MEMORY[0x24BDAC7A8](v12);
  sub_23DBB2A64(0, &qword_25431EF78, (uint64_t (*)(void))sub_23DBD47CC, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.CodingKeys, v3);
  v15[14] = *(_QWORD *)(v13 - 8);
  v15[15] = v13;
  MEMORY[0x24BDAC7A8](v13);
  v14 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBD47CC();
  sub_23DC2A8C8();
  __asm { BR              X9 }
}

uint64_t sub_23DBD0F1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 - 69) = 0;
  sub_23DBD4788();
  v4 = *(_QWORD *)(v3 - 88);
  sub_23DC2A778();
  (*(void (**)(uint64_t, _QWORD))(v0 + 8))(v2, *(_QWORD *)(v3 - 208));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 96) + 8))(v1, v4);
}

uint64_t SleepingSampleAggregate.Availability.hashValue.getter()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleAggregate.Availability.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v28[17];
  _QWORD *v29;

  v28[16] = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_23DBB2A64(0, &qword_25431F2D0, (uint64_t (*)(void))sub_23DBD4678, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.AvailableCodingKeys, MEMORY[0x24BEE33E0]);
  v28[9] = *(_QWORD *)(v4 - 8);
  v28[10] = v4;
  MEMORY[0x24BDAC7A8](v4);
  v28[14] = (char *)v28 - v5;
  sub_23DBB2A64(0, &qword_25431F2E0, (uint64_t (*)(void))sub_23DBD46BC, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.EstablishingBaselineDataCodingKeys, v3);
  v28[7] = *(_QWORD *)(v6 - 8);
  v28[8] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v28[11] = (char *)v28 - v7;
  sub_23DBB2A64(0, &qword_25431F2E8, (uint64_t (*)(void))sub_23DBD4700, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.InsufficientBaselineDataCodingKeys, v3);
  v28[5] = *(_QWORD *)(v8 - 8);
  v28[6] = v8;
  MEMORY[0x24BDAC7A8](v8);
  v28[13] = (char *)v28 - v9;
  sub_23DBB2A64(0, &qword_25431F2D8, (uint64_t (*)(void))sub_23DBD4744, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.InsufficientDataCodingKeys, v3);
  v28[3] = *(_QWORD *)(v10 - 8);
  v28[4] = v10;
  MEMORY[0x24BDAC7A8](v10);
  v28[12] = (char *)v28 - v11;
  sub_23DBB2A64(0, &qword_25431F2C8, (uint64_t (*)(void))sub_23DBD4788, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.NoDataCodingKeys, v3);
  v28[15] = v12;
  v28[2] = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v28 - v13;
  sub_23DBB2A64(0, &qword_25431F2C0, (uint64_t (*)(void))sub_23DBD47CC, (uint64_t)&type metadata for SleepingSampleAggregate.Availability.CodingKeys, v3);
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v28 - v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBD47CC();
  v20 = v29;
  sub_23DC2A8BC();
  if (!v20)
  {
    v28[1] = v14;
    v21 = v17;
    v29 = a1;
    v22 = v19;
    v23 = sub_23DC2A76C();
    if (*(_QWORD *)(v23 + 16) == 1)
      __asm { BR              X9 }
    v24 = sub_23DC2A5E0();
    swift_allocError();
    v26 = v25;
    sub_23DBBF970();
    *v26 = &type metadata for SleepingSampleAggregate.Availability;
    sub_23DC2A718();
    sub_23DC2A5C8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, *MEMORY[0x24BEE26D0], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v16);
    a1 = v29;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23DBD1638@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleAggregate.Availability.init(from:)(a1, a2);
}

void sub_23DBD164C(_QWORD *a1)
{
  SleepingSampleAggregate.Availability.encode(to:)(a1);
}

uint64_t SleepingSampleAggregate.morningIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DC2A154();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SleepingSampleAggregate.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleAggregate() + 20);
  v4 = sub_23DC29F80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SleepingSampleAggregate.sampleDateInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleAggregate();
  return sub_23DBB2B6C(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(_QWORD))sub_23DBD4810);
}

uint64_t SleepingSampleAggregate.latestSampleCreationDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleAggregate();
  return sub_23DBB2B6C(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(_QWORD))sub_23DBD482C);
}

uint64_t SleepingSampleAggregate.availability.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SleepingSampleAggregate();
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t SleepingSampleAggregate.sampleEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SleepingSampleAggregate();
  sub_23DBB2B6C(v1 + *(int *)(v6 + 28), (uint64_t)v5, (uint64_t (*)(_QWORD))sub_23DBD4810);
  v7 = sub_23DC29BF0();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) == 1)
  {
    sub_23DBB2BB0((uint64_t)v5, (uint64_t (*)(_QWORD))sub_23DBD4810);
    v9 = sub_23DC29E48();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
  else
  {
    sub_23DC29BC0();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
    v11 = sub_23DC29E48();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 0, 1, v11);
  }
}

uint64_t SleepingSampleAggregate.init(morningIndex:gregorianCalendar:quantity:sampleDateInterval:latestSampleCreationDate:availability:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, id a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned __int8 *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a4;
  v28 = a5;
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *a6;
  v15 = sub_23DC2A154();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v25 = a1;
  v17(a7, a1, v15);
  v18 = (int *)type metadata accessor for SleepingSampleAggregate();
  v19 = a7 + v18[5];
  v20 = sub_23DC29F80();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v19, a2, v20);
  if (a3)
  {
    sub_23DBC68B0();
    a3 = a3;
    sub_23DC2A064();
    sub_23DBC6894(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v14, 0, 1, v22);
  }
  else
  {
    sub_23DBC6894(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v14, 1, 1, v23);
  }
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a2, v20);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v25, v15);

  sub_23DBBCEB0((uint64_t)v14, a7 + v18[6], (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBBCEB0(v27, a7 + v18[7], (uint64_t (*)(_QWORD))sub_23DBD4810);
  result = sub_23DBBCEB0(v28, a7 + v18[8], (uint64_t (*)(_QWORD))sub_23DBD482C);
  *(_BYTE *)(a7 + v18[9]) = v26;
  return result;
}

uint64_t SleepingSampleAggregate.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = v0;
  v2 = sub_23DC29E48();
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v31 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v4);
  v34 = (uint64_t)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DC29BF0();
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBC6894(0);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  v19 = (int *)type metadata accessor for SleepingSampleAggregate();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  sub_23DC2A190();
  sub_23DBB2B6C(v0 + v19[6], (uint64_t)v18, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v18, v12);
    sub_23DC2A898();
    sub_23DBCB894((unint64_t *)&qword_256CE95E8, sub_23DBCA328, MEMORY[0x24BDD2068]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  sub_23DBB2B6C(v0 + v19[7], (uint64_t)v10, (uint64_t (*)(_QWORD))sub_23DBD4810);
  v21 = v32;
  v20 = v33;
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v10, 1, v33);
  v24 = v35;
  v23 = v36;
  if (v22 == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v25 = v30;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v30, v10, v20);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9638, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB890]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
  }
  v26 = v34;
  sub_23DBB2B6C(v1 + v19[8], v34, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1, v23) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v27 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v31, v26, v23);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  }
  return sub_23DC2A88C();
}

uint64_t sub_23DBD1EA8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DBD1EE4 + 4 * byte_23DC2D48F[a1]))(0x49676E696E726F6DLL, 0xEC0000007865646ELL);
}

unint64_t sub_23DBD1EE4()
{
  return 0xD000000000000011;
}

uint64_t sub_23DBD1F00()
{
  return 0x797469746E617571;
}

unint64_t sub_23DBD1F24()
{
  return 0xD000000000000012;
}

uint64_t sub_23DBD1F5C()
{
  return 0x6962616C69617661;
}

uint64_t sub_23DBD1F7C()
{
  unsigned __int8 *v0;

  return sub_23DBD1EA8(*v0);
}

uint64_t sub_23DBD1F84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBD6328(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DBD1FA8(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_23DBD1FB4()
{
  sub_23DBD4848();
  return sub_23DC2A964();
}

uint64_t sub_23DBD1FDC()
{
  sub_23DBD4848();
  return sub_23DC2A970();
}

uint64_t SleepingSampleAggregate.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = v1;
  sub_23DBB2A64(0, &qword_25431EF70, (uint64_t (*)(void))sub_23DBD4848, (uint64_t)&type metadata for SleepingSampleAggregate.CodingKeys, MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBD4848();
  sub_23DC2A8C8();
  v19 = 0;
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_25431EF38, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD2498]);
  sub_23DC2A7C0();
  if (!v2)
  {
    v10 = type metadata accessor for SleepingSampleAggregate();
    v18 = 1;
    sub_23DC29F80();
    sub_23DBB2CB0(&qword_25431EEE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF2F8]);
    sub_23DC2A7C0();
    v17 = 2;
    sub_23DBC6894(0);
    sub_23DBB2CB0(&qword_25431EF28, (uint64_t (*)(uint64_t))sub_23DBC6894, MEMORY[0x24BDD2060]);
    sub_23DC2A790();
    v16 = 3;
    sub_23DC29BF0();
    sub_23DBB2CB0(&qword_25431EEC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB888]);
    sub_23DC2A790();
    v15 = 4;
    sub_23DC29E48();
    sub_23DBB2CB0(&qword_25431EED8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_23DC2A790();
    v14 = *(_BYTE *)(v3 + *(int *)(v10 + 36));
    v13 = 5;
    sub_23DBD488C();
    sub_23DC2A7C0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t SleepingSampleAggregate.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = v0;
  v2 = sub_23DC29E48();
  v33 = *(_QWORD *)(v2 - 8);
  v34 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v30 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v4);
  v32 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DC29BF0();
  v31 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v29 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBC6894(0);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC2A880();
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  v19 = (int *)type metadata accessor for SleepingSampleAggregate();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  sub_23DC2A190();
  sub_23DBB2B6C(v0 + v19[6], (uint64_t)v18, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v18, v12);
    sub_23DC2A898();
    sub_23DBCB894((unint64_t *)&qword_256CE95E8, sub_23DBCA328, MEMORY[0x24BDD2068]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  sub_23DBB2B6C(v0 + v19[7], (uint64_t)v10, (uint64_t (*)(_QWORD))sub_23DBD4810);
  v20 = v31;
  v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v10, 1, v6);
  v23 = v33;
  v22 = v34;
  if (v21 == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v24 = v29;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v29, v10, v6);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9638, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB890]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v6);
  }
  v25 = v32;
  sub_23DBB2B6C(v1 + v19[8], v32, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v25, 1, v22) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v26 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v30, v25, v22);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  }
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleAggregate.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v31 = a2;
  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v3);
  v32 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v5);
  v33 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v7);
  v34 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_23DC29F80();
  v35 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v36 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DC2A154();
  v37 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v40 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2A64(0, &qword_25431F2B8, (uint64_t (*)(void))sub_23DBD4848, (uint64_t)&type metadata for SleepingSampleAggregate.CodingKeys, MEMORY[0x24BEE33E0]);
  v42 = v12;
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v30 - v14;
  v16 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBD4848();
  v41 = v15;
  v19 = (uint64_t)v43;
  sub_23DC2A8BC();
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = v37;
  v21 = v39;
  v43 = a1;
  v50 = 0;
  sub_23DBB2CB0((unint64_t *)&unk_25431F270, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B8]);
  v22 = v38;
  sub_23DC2A760();
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v18, v40, v22);
  v49 = 1;
  sub_23DBB2CB0(&qword_25431F208, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF310]);
  v23 = v36;
  sub_23DC2A760();
  v24 = v21;
  v25 = (int *)v16;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v18[*(int *)(v16 + 20)], v23, v24);
  sub_23DBC6894(0);
  v48 = 2;
  sub_23DBB2CB0(&qword_25431F260, (uint64_t (*)(uint64_t))sub_23DBC6894, MEMORY[0x24BDD2078]);
  v26 = (uint64_t)v34;
  sub_23DC2A730();
  v30 = v25;
  sub_23DBBCEB0(v26, (uint64_t)&v18[v25[6]], (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DC29BF0();
  v47 = 3;
  sub_23DBB2CB0(&qword_25431F1F8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB8A8]);
  v27 = (uint64_t)v33;
  v40 = 0;
  sub_23DC2A730();
  sub_23DBBCEB0(v27, (uint64_t)&v18[v25[7]], (uint64_t (*)(_QWORD))sub_23DBD4810);
  sub_23DC29E48();
  v46 = 4;
  sub_23DBB2CB0(&qword_25431F200, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
  v28 = (uint64_t)v32;
  sub_23DC2A730();
  sub_23DBBCEB0(v28, (uint64_t)&v18[v25[8]], (uint64_t (*)(_QWORD))sub_23DBD482C);
  v44 = 5;
  sub_23DBD48D0();
  sub_23DC2A760();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v41, v42);
  v18[v25[9]] = v45;
  sub_23DBB2B6C((uint64_t)v18, v31, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  return sub_23DBB2BB0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
}

uint64_t sub_23DBD2D94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleAggregate.init(from:)(a1, a2);
}

uint64_t sub_23DBD2DA8(_QWORD *a1)
{
  return SleepingSampleAggregate.encode(to:)(a1);
}

uint64_t sub_23DBD2DC0(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = v2;
  v5 = sub_23DC29E48();
  v37 = *(_QWORD *)(v5 - 8);
  v38 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v33 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v7);
  v36 = (uint64_t)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23DC29BF0();
  v34 = *(_QWORD *)(v9 - 8);
  v35 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v32 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBC6894(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  sub_23DC2A190();
  sub_23DBB2B6C(v2 + a2[6], (uint64_t)v21, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v21, v15);
    sub_23DC2A898();
    sub_23DBCB894((unint64_t *)&qword_256CE95E8, sub_23DBCA328, MEMORY[0x24BDD2068]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  sub_23DBB2B6C(v2 + a2[7], (uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DBD4810);
  v23 = v34;
  v22 = v35;
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v13, 1, v35);
  v26 = v37;
  v25 = v38;
  if (v24 == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v27 = v32;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v32, v13, v22);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9638, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB890]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v22);
  }
  v28 = v36;
  sub_23DBB2B6C(v4 + a2[8], v36, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v28, 1, v25) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v29 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v33, v28, v25);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
  }
  return sub_23DC2A88C();
}

uint64_t sub_23DBD31E4(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = v2;
  v5 = sub_23DC29E48();
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v32 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v7);
  v34 = (uint64_t)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23DC29BF0();
  v33 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v31 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBC6894(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC2A880();
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  sub_23DC2A190();
  sub_23DBB2B6C(v2 + a2[6], (uint64_t)v21, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v21, v15);
    sub_23DC2A898();
    sub_23DBCB894((unint64_t *)&qword_256CE95E8, sub_23DBCA328, MEMORY[0x24BDD2068]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  }
  sub_23DBB2B6C(v2 + a2[7], (uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DBD4810);
  v22 = v33;
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48))(v13, 1, v9);
  v25 = v35;
  v24 = v36;
  if (v23 == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v26 = v31;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v31, v13, v9);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9638, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB890]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v26, v9);
  }
  v27 = v34;
  sub_23DBB2B6C(v4 + a2[8], v34, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v27, 1, v24) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v28 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 32))(v32, v27, v24);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
  }
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleAggregate.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v1 = v0;
  v2 = sub_23DC29E48();
  v54 = *(_QWORD *)(v2 - 8);
  v55 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v52 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v4);
  v53 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DC29DD0();
  v50 = *(_QWORD *)(v6 - 8);
  v51 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v49 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23DC29DF4();
  v47 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v46 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4914();
  MEMORY[0x24BDAC7A8](v10);
  v45 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23DC29FA4();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = 0;
  v59 = 0xE000000000000000;
  sub_23DC2A5A4();
  sub_23DC2A2A4();
  sub_23DC2A2A4();
  v56 = sub_23DC2A124();
  sub_23DC2A7D8();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  v22 = (int *)type metadata accessor for SleepingSampleAggregate();
  sub_23DC29F68();
  sub_23DC29F98();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  sub_23DBB2B6C(v0 + v22[6], (uint64_t)v17, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBC6894(0);
  v24 = v23;
  v25 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v17, 1, v23) == 1)
  {
    sub_23DBB2BB0((uint64_t)v17, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  }
  else
  {
    v26 = (void *)sub_23DC2A040();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v17, v24);
    v27 = sub_23DC27F70();
    v29 = v28;

    v56 = v27;
    v57 = v29;
    sub_23DC2A25C();
  }
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  sub_23DBB2B6C(v1 + v22[7], (uint64_t)v14, (uint64_t (*)(_QWORD))sub_23DBD4810);
  v30 = sub_23DC29BF0();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v14, 1, v30);
  v34 = v54;
  v33 = v55;
  if (v32 == 1)
  {
    sub_23DBB2BB0((uint64_t)v14, (uint64_t (*)(_QWORD))sub_23DBD4810);
  }
  else
  {
    v35 = v45;
    DateInterval.range.getter(v45);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v30);
    v36 = v46;
    sub_23DC29DB8();
    v37 = v49;
    sub_23DC29DC4();
    v38 = sub_23DC2A448();
    v40 = v39;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v51);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v48);
    sub_23DBB2BB0((uint64_t)v35, (uint64_t (*)(_QWORD))sub_23DBD4914);
    v56 = v38;
    v57 = v40;
    sub_23DC2A25C();
  }
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  v41 = v53;
  sub_23DBB2B6C(v1 + v22[8], v53, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v41, 1, v33) != 1)
  {
    v42 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v52, v41, v33);
    v56 = 0;
    v57 = 0xE000000000000000;
    sub_23DC2A5A4();
    swift_bridgeObjectRelease();
    v56 = 0xD00000000000001ALL;
    v57 = 0x800000023DC322B0;
    sub_23DBB2CB0(&qword_256CE9AF8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE988]);
    sub_23DC2A7D8();
    sub_23DC2A2A4();
    swift_bridgeObjectRelease();
    sub_23DC2A2A4();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v42, v33);
  }
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  LOBYTE(v56) = *(_BYTE *)(v1 + v22[9]);
  sub_23DC2A670();
  sub_23DC2A2A4();
  return v58;
}

BOOL _s13HealthBalance23SleepingSampleAggregateV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  int *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, int *);
  int *v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD);
  uint64_t v50;
  char *v51;
  char v52;
  void (*v53)(char *, int *);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char v72;
  void (*v73)(char *, uint64_t);
  int *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char *v81;
  char v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  uint64_t v110;

  v95 = sub_23DC29E48();
  v98 = *(_QWORD *)(v95 - 8);
  MEMORY[0x24BDAC7A8](v95);
  v92 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD65E4(0);
  v96 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v100 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v93 = (uint64_t)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v99 = (char *)&v84 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v105 = (uint64_t)&v84 - v12;
  v104 = sub_23DC29BF0();
  v102 = *(_QWORD *)(v104 - 8);
  MEMORY[0x24BDAC7A8](v104);
  v94 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD65F8(0);
  v101 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v103 = (uint64_t)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v97 = (uint64_t)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v107 = (uint64_t)&v84 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v106 = (uint64_t)&v84 - v21;
  sub_23DBC6894(0);
  v108 = *((_QWORD *)v22 - 1);
  v109 = v22;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBCB834();
  v26 = v25;
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)&v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  v30 = MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v84 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v30);
  v35 = (char *)&v84 - v34;
  MEMORY[0x24BDAC7A8](v33);
  v37 = (char *)&v84 - v36;
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9748, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
  sub_23DC2A4F0();
  if (v110)
    return 0;
  v89 = v26;
  v90 = v35;
  v91 = v37;
  v88 = v32;
  v87 = v24;
  v38 = v108;
  v39 = v109;
  v40 = (int *)type metadata accessor for SleepingSampleAggregate();
  if ((MEMORY[0x24263D5AC](a1 + v40[5], a2 + v40[5]) & 1) == 0)
    return 0;
  v41 = v40[6];
  v85 = a1;
  v42 = (uint64_t)v91;
  sub_23DBB2B6C(a1 + v41, (uint64_t)v91, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  v43 = v40[6];
  v86 = a2;
  v44 = (uint64_t)v90;
  sub_23DBB2B6C(a2 + v43, (uint64_t)v90, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  v45 = (uint64_t)&v28[*(int *)(v89 + 48)];
  sub_23DBB2B6C(v42, (uint64_t)v28, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBB2B6C(v44, v45, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  v46 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v38 + 48);
  v47 = v39;
  if (v46((uint64_t)v28, 1, v39) == 1)
  {
    sub_23DBB2BB0(v44, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    sub_23DBB2BB0(v42, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    if (v46(v45, 1, v39) == 1)
    {
      sub_23DBB2BB0((uint64_t)v28, (uint64_t (*)(_QWORD))sub_23DBB29B8);
      goto LABEL_10;
    }
LABEL_8:
    v49 = (uint64_t (*)(_QWORD))sub_23DBCB834;
    v50 = (uint64_t)v28;
LABEL_23:
    sub_23DBB2BB0(v50, v49);
    return 0;
  }
  v48 = (uint64_t)v88;
  sub_23DBB2B6C((uint64_t)v28, (uint64_t)v88, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if (v46(v45, 1, v39) == 1)
  {
    sub_23DBB2BB0((uint64_t)v90, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    sub_23DBB2BB0((uint64_t)v91, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    (*(void (**)(uint64_t, int *))(v38 + 8))(v48, v39);
    goto LABEL_8;
  }
  v51 = v87;
  (*(void (**)(char *, uint64_t, int *))(v38 + 32))(v87, v45, v47);
  sub_23DBCB894((unint64_t *)&qword_256CE9A38, sub_23DBCB8F8, MEMORY[0x24BDD2070]);
  v52 = sub_23DC2A1F0();
  v53 = *(void (**)(char *, int *))(v38 + 8);
  v53(v51, v47);
  sub_23DBB2BB0((uint64_t)v90, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBB2BB0((uint64_t)v91, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  v53((char *)v48, v47);
  sub_23DBB2BB0((uint64_t)v28, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if ((v52 & 1) == 0)
    return 0;
LABEL_10:
  v54 = v106;
  sub_23DBB2B6C(v85 + v40[7], v106, (uint64_t (*)(_QWORD))sub_23DBD4810);
  v109 = v40;
  v55 = v107;
  sub_23DBB2B6C(v86 + v40[7], v107, (uint64_t (*)(_QWORD))sub_23DBD4810);
  v56 = v103;
  v57 = v103 + *(int *)(v101 + 48);
  sub_23DBB2B6C(v54, v103, (uint64_t (*)(_QWORD))sub_23DBD4810);
  sub_23DBB2B6C(v55, v57, (uint64_t (*)(_QWORD))sub_23DBD4810);
  v58 = v102;
  v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 48);
  v60 = v104;
  if (v59(v56, 1, v104) != 1)
  {
    v66 = v97;
    sub_23DBB2B6C(v56, v97, (uint64_t (*)(_QWORD))sub_23DBD4810);
    v67 = v59(v57, 1, v60);
    v65 = v105;
    v68 = v60;
    v62 = (uint64_t)v99;
    v69 = v100;
    if (v67 != 1)
    {
      v70 = v66;
      v71 = v94;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v94, v57, v68);
      sub_23DBB2CB0(&qword_256CE9B28, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB8A0]);
      v72 = sub_23DC2A1F0();
      v73 = *(void (**)(char *, uint64_t))(v58 + 8);
      v73(v71, v68);
      sub_23DBB2BB0(v107, (uint64_t (*)(_QWORD))sub_23DBD4810);
      sub_23DBB2BB0(v106, (uint64_t (*)(_QWORD))sub_23DBD4810);
      v73((char *)v70, v68);
      sub_23DBB2BB0(v56, (uint64_t (*)(_QWORD))sub_23DBD4810);
      v63 = (uint64_t)v69;
      v64 = v98;
      if ((v72 & 1) == 0)
        return 0;
      goto LABEL_17;
    }
    sub_23DBB2BB0(v107, (uint64_t (*)(_QWORD))sub_23DBD4810);
    sub_23DBB2BB0(v54, (uint64_t (*)(_QWORD))sub_23DBD4810);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v66, v68);
    goto LABEL_15;
  }
  sub_23DBB2BB0(v55, (uint64_t (*)(_QWORD))sub_23DBD4810);
  sub_23DBB2BB0(v54, (uint64_t (*)(_QWORD))sub_23DBD4810);
  v61 = v59(v57, 1, v60);
  v62 = (uint64_t)v99;
  v63 = (uint64_t)v100;
  v64 = v98;
  v65 = v105;
  if (v61 != 1)
  {
LABEL_15:
    v49 = (uint64_t (*)(_QWORD))sub_23DBD65F8;
    v50 = v56;
    goto LABEL_23;
  }
  sub_23DBB2BB0(v56, (uint64_t (*)(_QWORD))sub_23DBD4810);
LABEL_17:
  v74 = v109;
  v75 = v85;
  sub_23DBB2B6C(v85 + v109[8], v65, (uint64_t (*)(_QWORD))sub_23DBD482C);
  sub_23DBB2B6C(v86 + v74[8], v62, (uint64_t (*)(_QWORD))sub_23DBD482C);
  v76 = v63 + *(int *)(v96 + 48);
  sub_23DBB2B6C(v65, v63, (uint64_t (*)(_QWORD))sub_23DBD482C);
  sub_23DBB2B6C(v62, v76, (uint64_t (*)(_QWORD))sub_23DBD482C);
  v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48);
  v78 = v95;
  if (v77(v63, 1, v95) == 1)
  {
    sub_23DBB2BB0(v62, (uint64_t (*)(_QWORD))sub_23DBD482C);
    sub_23DBB2BB0(v65, (uint64_t (*)(_QWORD))sub_23DBD482C);
    if (v77(v76, 1, v78) == 1)
    {
      sub_23DBB2BB0(v63, (uint64_t (*)(_QWORD))sub_23DBD482C);
      return *(unsigned __int8 *)(v75 + v109[9]) == *(unsigned __int8 *)(v86 + v109[9]);
    }
    goto LABEL_22;
  }
  v79 = v93;
  sub_23DBB2B6C(v63, v93, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if (v77(v76, 1, v78) == 1)
  {
    sub_23DBB2BB0(v62, (uint64_t (*)(_QWORD))sub_23DBD482C);
    sub_23DBB2BB0(v105, (uint64_t (*)(_QWORD))sub_23DBD482C);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v79, v78);
LABEL_22:
    v49 = (uint64_t (*)(_QWORD))sub_23DBD65E4;
    v50 = v63;
    goto LABEL_23;
  }
  v81 = v92;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v92, v76, v78);
  sub_23DBB2CB0(&qword_256CE9B20, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
  v82 = sub_23DC2A1F0();
  v83 = *(void (**)(char *, uint64_t))(v64 + 8);
  v83(v81, v78);
  sub_23DBB2BB0(v62, (uint64_t (*)(_QWORD))sub_23DBD482C);
  sub_23DBB2BB0(v105, (uint64_t (*)(_QWORD))sub_23DBD482C);
  v83((char *)v79, v78);
  sub_23DBB2BB0(v63, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if ((v82 & 1) != 0)
    return *(unsigned __int8 *)(v75 + v109[9]) == *(unsigned __int8 *)(v86 + v109[9]);
  return 0;
}

unint64_t sub_23DBD4678()
{
  unint64_t result;

  result = qword_25431F958;
  if (!qword_25431F958)
  {
    result = MEMORY[0x24263E440](&unk_23DC2DC74, &type metadata for SleepingSampleAggregate.Availability.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F958);
  }
  return result;
}

unint64_t sub_23DBD46BC()
{
  unint64_t result;

  result = qword_25431F988;
  if (!qword_25431F988)
  {
    result = MEMORY[0x24263E440](&unk_23DC2DC24, &type metadata for SleepingSampleAggregate.Availability.EstablishingBaselineDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F988);
  }
  return result;
}

unint64_t sub_23DBD4700()
{
  unint64_t result;

  result = qword_25431F9A0;
  if (!qword_25431F9A0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2DBD4, &type metadata for SleepingSampleAggregate.Availability.InsufficientBaselineDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F9A0);
  }
  return result;
}

unint64_t sub_23DBD4744()
{
  unint64_t result;

  result = qword_25431F970;
  if (!qword_25431F970)
  {
    result = MEMORY[0x24263E440](&unk_23DC2DB84, &type metadata for SleepingSampleAggregate.Availability.InsufficientDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F970);
  }
  return result;
}

unint64_t sub_23DBD4788()
{
  unint64_t result;

  result = qword_25431F940;
  if (!qword_25431F940)
  {
    result = MEMORY[0x24263E440](&unk_23DC2DB34, &type metadata for SleepingSampleAggregate.Availability.NoDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F940);
  }
  return result;
}

unint64_t sub_23DBD47CC()
{
  unint64_t result;

  result = qword_25431F928;
  if (!qword_25431F928)
  {
    result = MEMORY[0x24263E440](&unk_23DC2DAE4, &type metadata for SleepingSampleAggregate.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F928);
  }
  return result;
}

void sub_23DBD4810(uint64_t a1)
{
  sub_23DBB89B8(a1, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

void sub_23DBD482C(uint64_t a1)
{
  sub_23DBB89B8(a1, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

unint64_t sub_23DBD4848()
{
  unint64_t result;

  result = qword_25431F910;
  if (!qword_25431F910)
  {
    result = MEMORY[0x24263E440](&unk_23DC2DA94, &type metadata for SleepingSampleAggregate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F910);
  }
  return result;
}

unint64_t sub_23DBD488C()
{
  unint64_t result;

  result = qword_25431EEF8;
  if (!qword_25431EEF8)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleAggregate.Availability, &type metadata for SleepingSampleAggregate.Availability);
    atomic_store(result, (unint64_t *)&qword_25431EEF8);
  }
  return result;
}

unint64_t sub_23DBD48D0()
{
  unint64_t result;

  result = qword_25431F218;
  if (!qword_25431F218)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleAggregate.Availability, &type metadata for SleepingSampleAggregate.Availability);
    atomic_store(result, (unint64_t *)&qword_25431F218);
  }
  return result;
}

void sub_23DBD4914()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE9AF0)
  {
    sub_23DC29E48();
    sub_23DBB2CB0((unint64_t *)&qword_25431F8E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
    v0 = sub_23DC2A454();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE9AF0);
  }
}

unint64_t sub_23DBD4990()
{
  unint64_t result;

  result = qword_256CE9B00;
  if (!qword_256CE9B00)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleAggregate.Availability, &type metadata for SleepingSampleAggregate.Availability);
    atomic_store(result, (unint64_t *)&qword_256CE9B00);
  }
  return result;
}

uint64_t sub_23DBD49D4()
{
  return sub_23DBB2CB0(&qword_256CE9B08, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAggregate, (uint64_t)&protocol conformance descriptor for SleepingSampleAggregate);
}

_QWORD *initializeBufferWithCopyOfBuffer for SleepingSampleAggregate(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DC2A154();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23DC29F80();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    sub_23DBC6894(0);
    v16 = v15;
    v17 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
    {
      sub_23DBB29B8();
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v13, v14, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
    }
    v20 = a3[7];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_23DC29BF0();
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      sub_23DBD4810(0);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v26 = a3[8];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    v29 = sub_23DC29E48();
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      sub_23DBD482C(0);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t destroy for SleepingSampleAggregate(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v4 = sub_23DC2A154();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  sub_23DBC6894(0);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v7, v9);
  v11 = a1 + a2[7];
  v12 = sub_23DC29BF0();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  v14 = a1 + a2[8];
  v15 = sub_23DC29E48();
  v16 = *(_QWORD *)(v15 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  return result;
}

uint64_t initializeWithCopy for SleepingSampleAggregate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = sub_23DC2A154();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  sub_23DBC6894(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v14))
  {
    sub_23DBB29B8();
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v12, v13, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
  }
  v18 = a3[7];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = sub_23DC29BF0();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_23DBD4810(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = a3[8];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = sub_23DC29E48();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    sub_23DBD482C(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithCopy for SleepingSampleAggregate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;

  v6 = sub_23DC2A154();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  sub_23DBC6894(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v12, 1, v14);
  v19 = v17(v13, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v12, v13, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v12, v15);
LABEL_6:
    sub_23DBB29B8();
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v12, v13, v15);
LABEL_7:
  v21 = a3[7];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = sub_23DC29BF0();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    sub_23DBD4810(0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 24))(v22, v23, v24);
LABEL_13:
  v30 = a3[8];
  v31 = (void *)(a1 + v30);
  v32 = (void *)(a2 + v30);
  v33 = sub_23DC29E48();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 24))(v31, v32, v33);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
    goto LABEL_18;
  }
  if (v37)
  {
LABEL_18:
    sub_23DBD482C(0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 16))(v31, v32, v33);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_19:
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for SleepingSampleAggregate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = sub_23DC2A154();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (const void *)(a2 + v11);
  sub_23DBC6894(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v14))
  {
    sub_23DBB29B8();
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v12, v13, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
  }
  v18 = a3[7];
  v19 = (void *)(a1 + v18);
  v20 = (const void *)(a2 + v18);
  v21 = sub_23DC29BF0();
  v22 = *(_QWORD *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    sub_23DBD4810(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  v24 = a3[8];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v27 = sub_23DC29E48();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    sub_23DBD482C(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for SleepingSampleAggregate(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;

  v6 = sub_23DC2A154();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (void *)(a1 + v11);
  v13 = (void *)(a2 + v11);
  sub_23DBC6894(0);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v12, 1, v14);
  v19 = v17(v13, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v12, v13, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v12, v15);
LABEL_6:
    sub_23DBB29B8();
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v12, v13, v15);
LABEL_7:
  v21 = a3[7];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = sub_23DC29BF0();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
LABEL_12:
    sub_23DBD4810(0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_13:
  v30 = a3[8];
  v31 = (void *)(a1 + v30);
  v32 = (void *)(a2 + v30);
  v33 = sub_23DC29E48();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (!v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 40))(v31, v32, v33);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v34 + 8))(v31, v33);
    goto LABEL_18;
  }
  if (v37)
  {
LABEL_18:
    sub_23DBD482C(0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v34 + 32))(v31, v32, v33);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
LABEL_19:
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleAggregate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBD5798(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;

  v6 = sub_23DC2A154();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_23DC29F80();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_11:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  sub_23DBB29B8();
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_11;
  }
  sub_23DBD4810(0);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_11;
  }
  sub_23DBD482C(0);
  v12 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v16;
    v13 = a3[8];
    goto LABEL_11;
  }
  v18 = *(unsigned __int8 *)(a1 + a3[9]);
  if (v18 >= 5)
    return v18 - 4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SleepingSampleAggregate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DBD58B4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = sub_23DC2A154();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
LABEL_12:
    v11(v12, a2, a2, v10);
    return;
  }
  v13 = sub_23DC29F80();
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_11:
    v12 = a1 + v15;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_12;
  }
  sub_23DBB29B8();
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_11;
  }
  sub_23DBD4810(0);
  v14 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v17;
    v15 = a4[7];
    goto LABEL_11;
  }
  sub_23DBD482C(0);
  v14 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v18;
    v15 = a4[8];
    goto LABEL_11;
  }
  *(_BYTE *)(a1 + a4[9]) = a2 + 4;
}

void sub_23DBD59C4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_23DC2A154();
  if (v0 <= 0x3F)
  {
    sub_23DC29F80();
    if (v1 <= 0x3F)
    {
      sub_23DBB29B8();
      if (v2 <= 0x3F)
      {
        sub_23DBD4810(319);
        if (v3 <= 0x3F)
        {
          sub_23DBD482C(319);
          if (v4 <= 0x3F)
            swift_initStructMetadata();
        }
      }
    }
  }
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability()
{
  return &type metadata for SleepingSampleAggregate.Availability;
}

uint64_t storeEnumTagSinglePayload for SleepingSampleAggregate.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23DBD5B08 + 4 * byte_23DC2D49A[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23DBD5B3C + 4 * byte_23DC2D495[v4]))();
}

uint64_t sub_23DBD5B3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBD5B44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBD5B4CLL);
  return result;
}

uint64_t sub_23DBD5B58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBD5B60);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23DBD5B64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBD5B6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.CodingKeys()
{
  return &type metadata for SleepingSampleAggregate.CodingKeys;
}

uint64_t _s13HealthBalance23SleepingSampleAggregateV12AvailabilityOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23DBD5BD4 + 4 * byte_23DC2D4A4[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23DBD5C08 + 4 * byte_23DC2D49F[v4]))();
}

uint64_t sub_23DBD5C08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBD5C10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBD5C18);
  return result;
}

uint64_t sub_23DBD5C24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBD5C2CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23DBD5C30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBD5C38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability.CodingKeys()
{
  return &type metadata for SleepingSampleAggregate.Availability.CodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability.NoDataCodingKeys()
{
  return &type metadata for SleepingSampleAggregate.Availability.NoDataCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability.InsufficientDataCodingKeys()
{
  return &type metadata for SleepingSampleAggregate.Availability.InsufficientDataCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability.InsufficientBaselineDataCodingKeys()
{
  return &type metadata for SleepingSampleAggregate.Availability.InsufficientBaselineDataCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability.EstablishingBaselineDataCodingKeys()
{
  return &type metadata for SleepingSampleAggregate.Availability.EstablishingBaselineDataCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregate.Availability.AvailableCodingKeys()
{
  return &type metadata for SleepingSampleAggregate.Availability.AvailableCodingKeys;
}

unint64_t sub_23DBD5CA8()
{
  unint64_t result;

  result = qword_256CE9B10;
  if (!qword_256CE9B10)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D9B4, &type metadata for SleepingSampleAggregate.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9B10);
  }
  return result;
}

unint64_t sub_23DBD5CF0()
{
  unint64_t result;

  result = qword_256CE9B18;
  if (!qword_256CE9B18)
  {
    result = MEMORY[0x24263E440](&unk_23DC2DA6C, &type metadata for SleepingSampleAggregate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9B18);
  }
  return result;
}

unint64_t sub_23DBD5D38()
{
  unint64_t result;

  result = qword_25431F920;
  if (!qword_25431F920)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D9DC, &type metadata for SleepingSampleAggregate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F920);
  }
  return result;
}

unint64_t sub_23DBD5D80()
{
  unint64_t result;

  result = qword_25431F918;
  if (!qword_25431F918)
  {
    result = MEMORY[0x24263E440](&unk_23DC2DA04, &type metadata for SleepingSampleAggregate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F918);
  }
  return result;
}

unint64_t sub_23DBD5DC8()
{
  unint64_t result;

  result = qword_25431F938;
  if (!qword_25431F938)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D924, &type metadata for SleepingSampleAggregate.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F938);
  }
  return result;
}

unint64_t sub_23DBD5E10()
{
  unint64_t result;

  result = qword_25431F930;
  if (!qword_25431F930)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D94C, &type metadata for SleepingSampleAggregate.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F930);
  }
  return result;
}

unint64_t sub_23DBD5E58()
{
  unint64_t result;

  result = qword_25431F950;
  if (!qword_25431F950)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D8D4, &type metadata for SleepingSampleAggregate.Availability.NoDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F950);
  }
  return result;
}

unint64_t sub_23DBD5EA0()
{
  unint64_t result;

  result = qword_25431F948;
  if (!qword_25431F948)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D8FC, &type metadata for SleepingSampleAggregate.Availability.NoDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F948);
  }
  return result;
}

unint64_t sub_23DBD5EE8()
{
  unint64_t result;

  result = qword_25431F980;
  if (!qword_25431F980)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D884, &type metadata for SleepingSampleAggregate.Availability.InsufficientDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F980);
  }
  return result;
}

unint64_t sub_23DBD5F30()
{
  unint64_t result;

  result = qword_25431F978;
  if (!qword_25431F978)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D8AC, &type metadata for SleepingSampleAggregate.Availability.InsufficientDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F978);
  }
  return result;
}

unint64_t sub_23DBD5F78()
{
  unint64_t result;

  result = qword_25431F9B0;
  if (!qword_25431F9B0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D834, &type metadata for SleepingSampleAggregate.Availability.InsufficientBaselineDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F9B0);
  }
  return result;
}

unint64_t sub_23DBD5FC0()
{
  unint64_t result;

  result = qword_25431F9A8;
  if (!qword_25431F9A8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D85C, &type metadata for SleepingSampleAggregate.Availability.InsufficientBaselineDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F9A8);
  }
  return result;
}

unint64_t sub_23DBD6008()
{
  unint64_t result;

  result = qword_25431F998;
  if (!qword_25431F998)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D7E4, &type metadata for SleepingSampleAggregate.Availability.EstablishingBaselineDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F998);
  }
  return result;
}

unint64_t sub_23DBD6050()
{
  unint64_t result;

  result = qword_25431F990;
  if (!qword_25431F990)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D80C, &type metadata for SleepingSampleAggregate.Availability.EstablishingBaselineDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F990);
  }
  return result;
}

unint64_t sub_23DBD6098()
{
  unint64_t result;

  result = qword_25431F968;
  if (!qword_25431F968)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D794, &type metadata for SleepingSampleAggregate.Availability.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F968);
  }
  return result;
}

unint64_t sub_23DBD60E0()
{
  unint64_t result;

  result = qword_25431F960;
  if (!qword_25431F960)
  {
    result = MEMORY[0x24263E440](&unk_23DC2D7BC, &type metadata for SleepingSampleAggregate.Availability.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F960);
  }
  return result;
}

uint64_t sub_23DBD6124(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x617461446F6ELL && a2 == 0xE600000000000000;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023DC32060 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023DC322D0 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023DC322F0 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C62616C69617661 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23DBD6328(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49676E696E726F6DLL && a2 == 0xEC0000007865646ELL;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023DC32310 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x797469746E617571 && a2 == 0xEF72657070617257 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023DC32330 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000023DC32350 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

void sub_23DBD65E4(uint64_t a1)
{
  sub_23DBD660C(a1, &qword_25431EEE0, sub_23DBD482C);
}

void sub_23DBD65F8(uint64_t a1)
{
  sub_23DBD660C(a1, &qword_25431EED0, sub_23DBD4810);
}

void sub_23DBD660C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

HealthBalance::SleepingSampleDaySummaryDescription __swiftcall SleepingSampleDaySummaryDescription.init(rawValue:)(HealthBalance::SleepingSampleDaySummaryDescription rawValue)
{
  HealthBalance::SleepingSampleDaySummaryDescription *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

_QWORD *sub_23DBD666C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  do
  {
    v5 = *v2;
    if (*v2)
    {
      v6 = *(v2 - 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_23DBDEF0C(0, v3[2] + 1, 1, v3);
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
        v3 = sub_23DBDEF0C((_QWORD *)(v7 > 1), v8 + 1, 1, v3);
      v3[2] = v8 + 1;
      v4 = &v3[2 * v8];
      v4[4] = v6;
      v4[5] = v5;
    }
    v2 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t SleepingSampleDaySummaryDescription.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void static SleepingSampleDaySummaryDescription.unavailable.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void static SleepingSampleDaySummaryDescription.noChanges.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static SleepingSampleDaySummaryDescription.heartRateHigh.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static SleepingSampleDaySummaryDescription.heartRateLow.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static SleepingSampleDaySummaryDescription.respiratoryRateHigh.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static SleepingSampleDaySummaryDescription.respiratoryRateLow.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static SleepingSampleDaySummaryDescription.bloodOxygenLow.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static SleepingSampleDaySummaryDescription.wristTemperatureHigh.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void static SleepingSampleDaySummaryDescription.timeAsleepHigh.getter(_QWORD *a1@<X8>)
{
  *a1 = 128;
}

void static SleepingSampleDaySummaryDescription.timeAsleepLow.getter(_QWORD *a1@<X8>)
{
  *a1 = 256;
}

void static SleepingSampleDaySummaryDescription.baselineRefinement.getter(_QWORD *a1@<X8>)
{
  *a1 = 512;
}

void static SleepingSampleDaySummaryDescription.menstrualCycle.getter(_QWORD *a1@<X8>)
{
  *a1 = 1024;
}

void static SleepingSampleDaySummaryDescription.strenuousExercise.getter(_QWORD *a1@<X8>)
{
  *a1 = 2048;
}

void static SleepingSampleDaySummaryDescription.elevationGain.getter(_QWORD *a1@<X8>)
{
  *a1 = 4096;
}

_QWORD *sub_23DBD6818@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_23DBD6824()
{
  sub_23DBD7CB0();
  return sub_23DC2A328();
}

uint64_t sub_23DBD6880()
{
  sub_23DBD7CB0();
  return sub_23DC2A31C();
}

void sub_23DBD68CC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_23DBD68D4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_23DBD68E8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_23DBD68FC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_23DBD6910(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_23DBD6940@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_23DBD696C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_23DBD6990(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_23DBD69A4(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_23DBD69B8(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_23DBD69CC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_23DBD69E0(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_23DBD69F4(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_23DBD6A08(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_23DBD6A1C()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_23DBD6A2C()
{
  return sub_23DC2A52C();
}

_QWORD *sub_23DBD6A44(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

BOOL SleepingSampleDaySummaryDescription.hasHeartRateChanges.getter()
{
  _BYTE *v0;

  return (*v0 & 6) != 0;
}

BOOL SleepingSampleDaySummaryDescription.hasRespiratoryRateChanges.getter()
{
  _BYTE *v0;

  return (*v0 & 0x18) != 0;
}

BOOL SleepingSampleDaySummaryDescription.hasTimeAsleepChanges.getter()
{
  _WORD *v0;

  return (*v0 & 0x180) != 0;
}

BOOL SleepingSampleDaySummaryDescription.hasAllMetricChanges.getter()
{
  _QWORD *v0;

  return (*v0 & 0x180) != 0 && (*v0 & 6) != 0 && (*v0 & 0x18) != 0 && (~*v0 & 0x60) == 0;
}

uint64_t static SleepingSampleDaySummaryDescription.makeDescription(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char v16;
  char v17;
  uint64_t v19;
  uint64_t *v20;
  int v21;

  v20 = a2;
  v3 = type metadata accessor for SleepingSampleBaselineComparison();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v20 - v7;
  v21 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    while (1)
    {
      if (v9 >= 5)
      {
        __break(1u);
        JUMPOUT(0x23DBD6D14);
      }
      v12 = *((char *)&unk_250E88230 + v9 + 32);
      v13 = *(_QWORD *)&asc_23DC2DF28[8 * v12];
      v14 = type metadata accessor for SleepingSampleDaySummary();
      sub_23DBD6D3C(a1 + *(int *)(v14 + 4 * v13), (uint64_t)v8);
      sub_23DBD6D3C((uint64_t)v8, (uint64_t)v6);
      v15 = COERCE_DOUBLE(SleepingSampleBaselineComparison.relativeComparison.getter());
      v17 = v16;
      sub_23DBD6D80((uint64_t)v6);
      if ((v17 & 1) != 0)
        break;
      if (v15 < -1.0)
      {
        sub_23DBD6D80((uint64_t)v8);
        __asm { BR              X8 }
      }
      sub_23DBD6D80((uint64_t)v8);
      if (v15 > 1.0)
        __asm { BR              X8 }
      v21 = 1;
      if (v9++ == 4)
        goto LABEL_13;
    }
    result = sub_23DBD6D80((uint64_t)v8);
    ++v9;
  }
  while (v9 != 5);
  if ((v21 & 1) == 0)
    goto LABEL_16;
LABEL_13:
  result = SleepingSampleDaySummary.hasAnyBaselinesInRefinement.getter();
  if ((result & 1) != 0)
    v10 = 513;
  else
    v10 = 1;
LABEL_16:
  v19 = a1 + *(int *)(v14 + 28);
  if ((*(_BYTE *)(v19 + 8) & 1) == 0)
    v10 |= (unint64_t)(*(_DWORD *)v19 & 7) << 10;
  *v20 = v10;
  return result;
}

uint64_t sub_23DBD6D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepingSampleBaselineComparison();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DBD6D80(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SleepingSampleBaselineComparison();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DBD6DBC(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;

  v3 = *v1;
  if ((*v1 & 0x40) == 0)
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if ((v3 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v4 = sub_23DBDEF0C(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = sub_23DBDEF0C((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[2 * v6];
  v7[4] = 0xD000000000000016;
  v7[5] = 0x800000023DC32500;
  if ((v3 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = sub_23DBDEF0C(0, v4[2] + 1, 1, v4);
    v9 = v4[2];
    v8 = v4[3];
    if (v9 >= v8 >> 1)
      v4 = sub_23DBDEF0C((_QWORD *)(v8 > 1), v9 + 1, 1, v4);
    v4[2] = v9 + 1;
    v10 = &v4[2 * v9];
    v10[4] = 0xD000000000000018;
    v10[5] = 0x800000023DC324E0;
  }
LABEL_12:
  if ((v3 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = sub_23DBDEF0C(0, v4[2] + 1, 1, v4);
    v12 = v4[2];
    v11 = v4[3];
    if (v12 >= v11 >> 1)
      v4 = sub_23DBDEF0C((_QWORD *)(v11 > 1), v12 + 1, 1, v4);
    v4[2] = v12 + 1;
    v13 = &v4[2 * v12];
    v13[4] = 0xD000000000000017;
    v13[5] = 0x800000023DC324C0;
    if ((v3 & 8) == 0)
    {
LABEL_14:
      if ((v3 & 0x10) == 0)
        goto LABEL_15;
      goto LABEL_30;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_23DBDEF0C(0, v4[2] + 1, 1, v4);
  v15 = v4[2];
  v14 = v4[3];
  if (v15 >= v14 >> 1)
    v4 = sub_23DBDEF0C((_QWORD *)(v14 > 1), v15 + 1, 1, v4);
  v4[2] = v15 + 1;
  v16 = &v4[2 * v15];
  v16[4] = 0xD000000000000015;
  v16[5] = 0x800000023DC324A0;
  if ((v3 & 0x10) == 0)
  {
LABEL_15:
    if ((v3 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_30:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_23DBDEF0C(0, v4[2] + 1, 1, v4);
  v18 = v4[2];
  v17 = v4[3];
  if (v18 >= v17 >> 1)
    v4 = sub_23DBDEF0C((_QWORD *)(v17 > 1), v18 + 1, 1, v4);
  v4[2] = v18 + 1;
  v19 = &v4[2 * v18];
  v19[4] = 0xD000000000000014;
  v19[5] = 0x800000023DC32480;
  if ((v3 & 0x20) == 0)
  {
LABEL_16:
    if ((v3 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_35:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_23DBDEF0C(0, v4[2] + 1, 1, v4);
  v21 = v4[2];
  v20 = v4[3];
  if (v21 >= v20 >> 1)
    v4 = sub_23DBDEF0C((_QWORD *)(v20 > 1), v21 + 1, 1, v4);
  v4[2] = v21 + 1;
  v22 = &v4[2 * v21];
  v22[4] = 0xD000000000000010;
  v22[5] = 0x800000023DC32460;
  if ((v3 & 0x80) == 0)
  {
LABEL_17:
    if ((v3 & 0x100) == 0)
      goto LABEL_18;
LABEL_45:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = sub_23DBDEF0C(0, v4[2] + 1, 1, v4);
    v27 = v4[2];
    v26 = v4[3];
    if (v27 >= v26 >> 1)
      v4 = sub_23DBDEF0C((_QWORD *)(v26 > 1), v27 + 1, 1, v4);
    v4[2] = v27 + 1;
    v28 = &v4[2 * v27];
    v28[4] = 0x4C53415F454D4954;
    v28[5] = 0xEF574F4C5F504545;
    if ((a1 & 1) == 0)
      goto LABEL_69;
    goto LABEL_50;
  }
LABEL_40:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_23DBDEF0C(0, v4[2] + 1, 1, v4);
  v24 = v4[2];
  v23 = v4[3];
  if (v24 >= v23 >> 1)
    v4 = sub_23DBDEF0C((_QWORD *)(v23 > 1), v24 + 1, 1, v4);
  v4[2] = v24 + 1;
  v25 = &v4[2 * v24];
  v25[4] = 0xD000000000000010;
  v25[5] = 0x800000023DC32440;
  if ((v3 & 0x100) != 0)
    goto LABEL_45;
LABEL_18:
  if ((a1 & 1) == 0)
    goto LABEL_69;
LABEL_50:
  if ((v3 & 0x400) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = sub_23DBDEF0C(0, v4[2] + 1, 1, v4);
    v30 = v4[2];
    v29 = v4[3];
    if (v30 >= v29 >> 1)
      v4 = sub_23DBDEF0C((_QWORD *)(v29 > 1), v30 + 1, 1, v4);
    v4[2] = v30 + 1;
    v31 = &v4[2 * v30];
    v31[4] = 0x41555254534E454DLL;
    v31[5] = 0xEF454C4359435F4CLL;
    if ((v3 & 0x800) == 0)
    {
LABEL_52:
      if ((v3 & 0x1000) == 0)
        goto LABEL_69;
      goto LABEL_64;
    }
  }
  else if ((v3 & 0x800) == 0)
  {
    goto LABEL_52;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_23DBDEF0C(0, v4[2] + 1, 1, v4);
  v33 = v4[2];
  v32 = v4[3];
  if (v33 >= v32 >> 1)
    v4 = sub_23DBDEF0C((_QWORD *)(v32 > 1), v33 + 1, 1, v4);
  v4[2] = v33 + 1;
  v34 = &v4[2 * v33];
  v34[4] = 0xD000000000000012;
  v34[5] = 0x800000023DC32420;
  if ((v3 & 0x1000) != 0)
  {
LABEL_64:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = sub_23DBDEF0C(0, v4[2] + 1, 1, v4);
    v36 = v4[2];
    v35 = v4[3];
    if (v36 >= v35 >> 1)
      v4 = sub_23DBDEF0C((_QWORD *)(v35 > 1), v36 + 1, 1, v4);
    v4[2] = v36 + 1;
    v37 = (char *)&v4[2 * v36];
    strcpy(v37 + 32, "ELEVATION_GAIN");
    v37[47] = -18;
  }
LABEL_69:
  sub_23DBD7DDC(0, &qword_256CE9B60, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
  sub_23DBD7E24();
  v38 = sub_23DC2A19C();
  swift_bridgeObjectRelease();
  return v38;
}

uint64_t SleepingSampleDaySummaryDescription.primaryBodyKey.getter()
{
  _QWORD v1[2];

  strcpy((char *)v1, "PRIMARY_BODY_");
  sub_23DBD6DBC(0);
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  return v1[0];
}

unint64_t SleepingSampleDaySummaryDescription.secondaryCauseKey.getter()
{
  sub_23DC2A5A4();
  swift_bridgeObjectRelease();
  sub_23DBD6DBC(1);
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  return 0xD000000000000010;
}

uint64_t SleepingSampleDaySummaryDescription.primaryBody.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  _QWORD v14[2];
  _WORD v15[8];

  v1 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DC2A208();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v14 - v7;
  if (!*v0)
    return 0;
  v9 = *v0 & 0xFFFFFFFFFFFFFDFFLL;
  if (v9 > 1)
  {
    strcpy((char *)v15, "PRIMARY_BODY_");
    v15[7] = -4864;
    v14[1] = v9;
    sub_23DBD6DBC(0);
    sub_23DC2A2A4();
    swift_bridgeObjectRelease();
  }
  sub_23DC2A1FC();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  v10 = (void *)sub_23DC2A220();
  v11 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v10);

  sub_23DC29EE4();
  v12 = sub_23DC2A250();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v12;
}

uint64_t SleepingSampleDaySummaryDescription.secondaryCause.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD v15[2];
  unint64_t v16;
  unint64_t v17;

  v1 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DC2A208();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v15 - v7;
  v9 = *v0;
  if (!*v0)
    return 0;
  v10 = v9 & 0xFFFFFFFFFFFFFDFFLL;
  if ((v9 & 0x180) == 0 || (v9 & 6) == 0 || (v9 & 0x18) == 0 || (~v10 & 0x60) != 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFC7FLL;
    if ((v9 & 0xFFFFFFFFFFFFFC7FLL) < 2)
      return 0;
  }
  v16 = 0;
  v17 = 0xE000000000000000;
  sub_23DC2A5A4();
  swift_bridgeObjectRelease();
  v16 = 0xD000000000000010;
  v17 = 0x800000023DC32370;
  v15[1] = v10;
  sub_23DBD6DBC(1);
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A1FC();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  v12 = (void *)sub_23DC2A220();
  v13 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v12);

  sub_23DC29EE4();
  v11 = sub_23DC2A250();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v11;
}

uint64_t SleepingSampleDaySummaryDescription.quaternaryRefinementDisclaimer.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  void *v10;
  id v11;
  _BYTE v13[16];

  v1 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DC2A208();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v4);
  v8 = &v13[-v7];
  v9 = 0;
  if ((*(_BYTE *)(v0 + 1) & 2) != 0)
  {
    sub_23DC2A1FC();
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v6, v8, v2);
    v10 = (void *)sub_23DC2A220();
    v11 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v10);

    sub_23DC29EE4();
    v9 = sub_23DC2A250();
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
  }
  return v9;
}

_QWORD *SleepingSampleDaySummaryDescription.notificationSupplementaryParagraphs.getter()
{
  return sub_23DBD7BCC(SleepingSampleDaySummaryDescription.secondaryCause.getter);
}

_QWORD *SleepingSampleDaySummaryDescription.notificationRefinementParagraphs.getter()
{
  return sub_23DBD7BCC(SleepingSampleDaySummaryDescription.quaternaryRefinementDisclaimer.getter);
}

_QWORD *sub_23DBD7BCC(uint64_t (*a1)(void))
{
  uint64_t inited;
  uint64_t v3;
  _QWORD *v4;

  sub_23DBD7C48();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DC2B900;
  *(_QWORD *)(inited + 32) = a1();
  *(_QWORD *)(inited + 40) = v3;
  v4 = sub_23DBD666C(inited);
  swift_bridgeObjectRelease();
  return v4;
}

void sub_23DBD7C48()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE9B30)
  {
    sub_23DBD7DDC(255, &qword_256CE9B38, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1C68]);
    v0 = sub_23DC2A7E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE9B30);
  }
}

unint64_t sub_23DBD7CB0()
{
  unint64_t result;

  result = qword_256CE9B40;
  if (!qword_256CE9B40)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDaySummaryDescription, &type metadata for SleepingSampleDaySummaryDescription);
    atomic_store(result, (unint64_t *)&qword_256CE9B40);
  }
  return result;
}

unint64_t sub_23DBD7CF8()
{
  unint64_t result;

  result = qword_256CE9B48;
  if (!qword_256CE9B48)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDaySummaryDescription, &type metadata for SleepingSampleDaySummaryDescription);
    atomic_store(result, (unint64_t *)&qword_256CE9B48);
  }
  return result;
}

unint64_t sub_23DBD7D40()
{
  unint64_t result;

  result = qword_256CE9B50;
  if (!qword_256CE9B50)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDaySummaryDescription, &type metadata for SleepingSampleDaySummaryDescription);
    atomic_store(result, (unint64_t *)&qword_256CE9B50);
  }
  return result;
}

unint64_t sub_23DBD7D88()
{
  unint64_t result;

  result = qword_256CE9B58;
  if (!qword_256CE9B58)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDaySummaryDescription, &type metadata for SleepingSampleDaySummaryDescription);
    atomic_store(result, (unint64_t *)&qword_256CE9B58);
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDaySummaryDescription()
{
  return &type metadata for SleepingSampleDaySummaryDescription;
}

void sub_23DBD7DDC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = a3(0, MEMORY[0x24BEE0D00]);
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_23DBD7E24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CE9B68;
  if (!qword_256CE9B68)
  {
    sub_23DBD7DDC(255, &qword_256CE9B60, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BEE1250]);
    result = MEMORY[0x24263E440](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_256CE9B68);
  }
  return result;
}

uint64_t static SleepingSampleDaySummary.relativeComparisons(on:heart:spO2:rr:wtr:asleep:calendar:hasBaseline:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, int a3@<W2>, double a4@<X3>, int a5@<W4>, double a6@<X5>, int a7@<W6>, double a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, double a11, unsigned __int8 a12, char *a13, unsigned __int8 a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  void (*v89)(void);
  uint64_t v90;
  uint64_t result;
  char *v92;
  void (*v93)(char *, char *, uint64_t);
  char *v94;
  void (*v95)(char *, uint64_t);
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(void);
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(char *, char *);
  uint64_t v115;
  int v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  void (*v121)(char *, char *, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t);
  _QWORD *v131;
  uint64_t v132;
  void (*v133)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(void);
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  void (*v152)(char *, char *, uint64_t);
  uint64_t v153;
  uint64_t v154;
  char *v155;
  int *v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(char *, uint64_t);
  _QWORD *v160;
  uint64_t v161;
  void (*v162)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  void (*v182)(char *, uint64_t);
  uint64_t v183;
  char *v184;
  int *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (*v189)(char *, uint64_t);
  uint64_t v190;
  uint64_t v191;
  void (*v192)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned __int8 v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  void (*v211)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v212)(char *, uint64_t);
  uint64_t v213;
  char *v214;
  int *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void (*v219)(char *, uint64_t);
  uint64_t v220;
  uint64_t v221;
  void (*v222)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  char *v234;
  void (*v235)(void);
  void (*v236)(void);
  char *v237;
  void (*v238)(uint64_t, char *, uint64_t);
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void (*v251)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  double v263;
  double v264;
  double v265;
  void (*v266)(uint64_t, char *, uint64_t);
  uint64_t v267;
  int v268;
  int v269;
  char *v270;
  char *v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  char *v280;
  char *v281;
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  char *v295;
  char *v296;
  uint64_t v297;
  _QWORD *v298;
  char *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  void (*v308)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  char *v313;
  int *v314;
  uint64_t v315;
  void (*v316)(void);
  void (*v317)(char *, char *);

  v265 = a8;
  v269 = a7;
  v264 = a6;
  v268 = a5;
  v263 = a4;
  LODWORD(v317) = a3;
  v308 = a2;
  sub_23DBD9904(0);
  MEMORY[0x24BDAC7A8](v16);
  v299 = (char *)&v262 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v297 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v297);
  v298 = (char **)((char *)&v262 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v19);
  v295 = (char *)&v262 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v21);
  v305 = (uint64_t)&v262 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v294 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x24BDAC7A8](v294);
  v296 = (char *)&v262 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v312 = sub_23DC29F80();
  v274 = *(_QWORD *)(v312 - 8);
  v24 = MEMORY[0x24BDAC7A8](v312);
  v271 = (char *)&v262 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v283 = (char *)&v262 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v280 = (char *)&v262 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v277 = (char *)&v262 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v293 = (char *)&v262 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v313 = (char *)&v262 - v34;
  sub_23DBB89B8(0, &qword_25431F238, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v285 = (uint64_t)&v262 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x24BDAC7A8](v36);
  v282 = (uint64_t)&v262 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v279 = (uint64_t)&v262 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v276 = (uint64_t)&v262 - v43;
  MEMORY[0x24BDAC7A8](v42);
  v301 = (uint64_t)&v262 - v44;
  v315 = type metadata accessor for SleepingSampleBaselineComparison();
  v307 = *(_QWORD *)(v315 - 8);
  v45 = MEMORY[0x24BDAC7A8](v315);
  v272 = (uint64_t)&v262 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x24BDAC7A8](v45);
  v291 = (uint64_t)&v262 - v48;
  v49 = MEMORY[0x24BDAC7A8](v47);
  v290 = (uint64_t)&v262 - v50;
  v51 = MEMORY[0x24BDAC7A8](v49);
  v289 = (uint64_t)&v262 - v52;
  v53 = MEMORY[0x24BDAC7A8](v51);
  v292 = (char *)&v262 - v54;
  MEMORY[0x24BDAC7A8](v53);
  v288 = (uint64_t)&v262 - v55;
  v56 = sub_23DC29BF0();
  v302 = *(_QWORD *)(v56 - 8);
  v303 = v56;
  MEMORY[0x24BDAC7A8](v56);
  v262 = (char *)&v262 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  v59 = MEMORY[0x24BDAC7A8](v58);
  v304 = (uint64_t)&v262 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v59);
  v287 = (uint64_t)&v262 - v61;
  sub_23DBC2A3C();
  v63 = v62;
  v64 = MEMORY[0x24BDAC7A8](v62);
  v66 = (char *)&v262 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v64);
  v68 = (char *)&v262 - v67;
  sub_23DBBFA18();
  v314 = v69;
  v70 = MEMORY[0x24BDAC7A8](v69);
  v72 = (char *)&v262 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v70);
  v286 = (uint64_t)&v262 - v73;
  v74 = sub_23DC2A154();
  v75 = *(_QWORD **)(v74 - 8);
  v76 = MEMORY[0x24BDAC7A8](v74);
  v284 = (char *)&v262 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = MEMORY[0x24BDAC7A8](v76);
  v281 = (char *)&v262 - v79;
  v80 = MEMORY[0x24BDAC7A8](v78);
  v278 = (char *)&v262 - v81;
  v82 = MEMORY[0x24BDAC7A8](v80);
  v275 = (char *)&v262 - v83;
  v84 = MEMORY[0x24BDAC7A8](v82);
  v273 = (char *)&v262 - v85;
  v86 = MEMORY[0x24BDAC7A8](v84);
  v88 = (char *)&v262 - v87;
  MEMORY[0x24BDAC7A8](v86);
  v89 = (void (*)(void))v75[2];
  v270 = (char *)&v262 - v90;
  v89();
  sub_23DC2A100();
  sub_23DBD9920();
  v310 = a1;
  result = sub_23DC2A1C0();
  if ((result & 1) != 0)
  {
    v267 = a9;
    v306 = a14;
    v311 = a13;
    v92 = &v68[*(int *)(v63 + 48)];
    v93 = (void (*)(char *, char *, uint64_t))v75[4];
    v300 = v88;
    v93(v68, v88, v74);
    ((void (*)(char *, uint64_t, uint64_t))v89)(v92, v310, v74);
    v94 = &v66[*(int *)(v63 + 48)];
    ((void (*)(char *, char *, uint64_t))v89)(v66, v68, v74);
    v316 = v89;
    ((void (*)(char *, char *, uint64_t))v89)(v94, v92, v74);
    v93(v72, v66, v74);
    v95 = (void (*)(char *, uint64_t))v75[1];
    v95(v94, v74);
    v96 = &v66[*(int *)(v63 + 48)];
    v93(v66, v68, v74);
    v93(v96, v92, v74);
    v97 = &v72[v314[9]];
    v266 = (void (*)(uint64_t, char *, uint64_t))v93;
    v93(v97, v96, v74);
    v314 = (int *)v95;
    v95(v66, v74);
    sub_23DBBCEB0((uint64_t)v72, v286, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    if ((v306 & 1) != 0)
    {
      v98 = v262;
      v99 = v310;
      sub_23DC2A0D0();
      v100 = v287;
      sub_23DC29BC0();
      (*(void (**)(char *, uint64_t))(v302 + 8))(v98, v303);
      v101 = sub_23DC29E48();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v100, 0, 1, v101);
      v102 = v99;
    }
    else
    {
      v103 = sub_23DC29E48();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 56))(v287, 1, 1, v103);
      v102 = v310;
    }
    v104 = v315;
    v105 = v316;
    v106 = v313;
    v107 = v273;
    v108 = v74;
    if ((v317 & 1) != 0)
    {
      v111 = v307;
      v308 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v307 + 56);
      v308(v301, 1, 1, v315);
      v112 = v274;
      v110 = v311;
    }
    else
    {
      v109 = v301;
      v110 = v311;
      static SleepingSampleBaselineComparison.heart(_:on:calendar:hasBaseline:baselineCount:)(v102, v311, v306 & 1, 49, v301, *(double *)&v308);
      v111 = v307;
      v308 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v307 + 56);
      v308(v109, 0, 1, v104);
      v112 = v274;
    }
    v309 = v108;
    ((void (*)(char *, uint64_t, uint64_t))v105)(v107, v102, v108);
    v113 = v102;
    v114 = *(void (**)(char *, char *))(v112 + 16);
    v115 = v312;
    v114(v106, v110);
    v307 = *(_QWORD *)(v111 + 48);
    v116 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v307)(v301, 1, v104);
    v317 = v114;
    if (v116 == 1)
    {
      v117 = v300;
      v118 = v309;
      ((void (*)(char *, char *, uint64_t))v105)(v300, v107, v309);
      v119 = v293;
      v120 = v115;
      v121 = (void (*)(char *, char *, uint64_t))v317;
      ((void (*)(char *, char *, uint64_t))v317)(v293, v106, v115);
      v122 = v305;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v302 + 56))(v305, 1, 1, v303);
      v123 = sub_23DC29E48();
      v124 = v304;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 56))(v304, 1, 1, v123);
      v125 = v296;
      ((void (*)(char *, char *, uint64_t))v316)(v296, v117, v118);
      v126 = (int *)v294;
      v127 = v120;
      v121(&v125[*(int *)(v294 + 20)], v119, v120);
      sub_23DBC6894(0);
      v129 = (uint64_t)v295;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 56))(v295, 1, 1, v128);
      v130 = *(void (**)(char *, uint64_t))(v274 + 8);
      v130(v119, v127);
      ((void (*)(char *, uint64_t))v314)(v117, v118);
      sub_23DBBCEB0(v129, (uint64_t)&v125[v126[6]], (uint64_t (*)(_QWORD))sub_23DBB29B8);
      sub_23DBBCEB0(v122, (uint64_t)&v125[v126[7]], (uint64_t (*)(_QWORD))sub_23DBD4810);
      sub_23DBBCEB0(v124, (uint64_t)&v125[v126[8]], (uint64_t (*)(_QWORD))sub_23DBD482C);
      v125[v126[9]] = 0;
      v131 = v298;
      *v298 = 6;
      swift_storeEnumTagMultiPayload();
      v132 = type metadata accessor for SleepingSampleBaseline();
      v133 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v132 - 8) + 56);
      v134 = (uint64_t)v299;
      v133(v299, 1, 1, v132);
      v135 = (uint64_t)v292;
      v136 = &v292[*(int *)(v315 + 24)];
      v133(v136, 1, 1, v132);
      v137 = (uint64_t)v125;
      v138 = v315;
      v139 = v316;
      sub_23DBBCEB0(v137, v135, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
      v140 = (uint64_t)v131;
      v141 = v311;
      sub_23DBBCEB0(v140, v135 + *(int *)(v138 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
      v142 = (uint64_t)v136;
      v143 = v310;
      sub_23DBBC784(v134, v142, (uint64_t (*)(_QWORD))sub_23DBD9904);
      sub_23DBBCEB0(v135, v288, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      v144 = v313;
      v313 = (char *)v130;
      v130(v144, v312);
      ((void (*)(char *, uint64_t))v314)(v273, v118);
      sub_23DBD9968(v301);
      v145 = v277;
      v146 = v276;
      v147 = v275;
    }
    else
    {
      v313 = *(char **)(v112 + 8);
      ((void (*)(char *, uint64_t))v313)(v106, v115);
      v118 = v309;
      ((void (*)(char *, uint64_t))v314)(v107, v309);
      sub_23DBBCEB0(v301, v288, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      v145 = v277;
      v146 = v276;
      v147 = v275;
      v139 = v105;
      v141 = v311;
      v143 = v113;
      v138 = v315;
    }
    if ((v268 & 1) != 0)
    {
      v148 = 1;
    }
    else
    {
      static SleepingSampleBaselineComparison.spO2(_:on:calendar:hasBaseline:)(v143, v141, v306 & 1, v146, v263);
      v148 = 0;
    }
    v149 = v312;
    v308(v146, v148, 1, v138);
    ((void (*)(char *, uint64_t, uint64_t))v139)(v147, v143, v118);
    ((void (*)(char *, char *, uint64_t))v317)(v145, v141, v149);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v307)(v146, 1, v138) == 1)
    {
      v150 = v300;
      ((void (*)(char *, char *, uint64_t))v139)(v300, v147, v118);
      v151 = v293;
      v152 = (void (*)(char *, char *, uint64_t))v317;
      ((void (*)(char *, char *, uint64_t))v317)(v293, v145, v149);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v302 + 56))(v305, 1, 1, v303);
      v153 = sub_23DC29E48();
      v154 = v304;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v153 - 8) + 56))(v304, 1, 1, v153);
      v155 = v296;
      ((void (*)(char *, char *, uint64_t))v316)(v296, v150, v118);
      v156 = (int *)v294;
      v152(&v155[*(int *)(v294 + 20)], v151, v149);
      sub_23DBC6894(0);
      v158 = (uint64_t)v295;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v157 - 8) + 56))(v295, 1, 1, v157);
      ((void (*)(char *, uint64_t))v313)(v151, v149);
      v159 = (void (*)(char *, uint64_t))v314;
      ((void (*)(char *, uint64_t))v314)(v150, v118);
      sub_23DBBCEB0(v158, (uint64_t)&v155[v156[6]], (uint64_t (*)(_QWORD))sub_23DBB29B8);
      sub_23DBBCEB0(v305, (uint64_t)&v155[v156[7]], (uint64_t (*)(_QWORD))sub_23DBD4810);
      sub_23DBBCEB0(v154, (uint64_t)&v155[v156[8]], (uint64_t (*)(_QWORD))sub_23DBD482C);
      v155[v156[9]] = 0;
      v160 = v298;
      *v298 = 6;
      swift_storeEnumTagMultiPayload();
      v161 = type metadata accessor for SleepingSampleBaseline();
      v162 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v161 - 8) + 56);
      v163 = (uint64_t)v299;
      v162(v299, 1, 1, v161);
      v164 = v149;
      v165 = (uint64_t)v292;
      v166 = &v292[*(int *)(v315 + 24)];
      v162(v166, 1, 1, v161);
      v167 = (uint64_t)v155;
      v138 = v315;
      v139 = v316;
      sub_23DBBCEB0(v167, v165, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
      v168 = (uint64_t)v160;
      v141 = v311;
      sub_23DBBCEB0(v168, v165 + *(int *)(v138 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
      v169 = (uint64_t)v166;
      v143 = v310;
      sub_23DBBC784(v163, v169, (uint64_t (*)(_QWORD))sub_23DBD9904);
      v170 = v165;
      v149 = v164;
      sub_23DBBCEB0(v170, v289, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      ((void (*)(char *, uint64_t))v313)(v277, v164);
      v159(v275, v118);
      sub_23DBD9968(v276);
    }
    else
    {
      ((void (*)(char *, uint64_t))v313)(v145, v149);
      ((void (*)(char *, uint64_t))v314)(v147, v118);
      sub_23DBBCEB0(v146, v289, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    }
    v171 = v280;
    v172 = v279;
    v173 = v278;
    if ((v269 & 1) != 0)
    {
      v174 = 1;
    }
    else
    {
      static SleepingSampleBaselineComparison.rr(_:on:calendar:hasBaseline:)(v143, v141, v306 & 1, v279, v264);
      v174 = 0;
    }
    LODWORD(v301) = a10;
    v308(v172, v174, 1, v138);
    v175 = v309;
    ((void (*)(char *, uint64_t, uint64_t))v139)(v173, v143, v309);
    ((void (*)(char *, char *, uint64_t))v317)(v171, v141, v149);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v307)(v172, 1, v138) == 1)
    {
      v176 = v300;
      ((void (*)(char *, char *, uint64_t))v139)(v300, v173, v175);
      v177 = v293;
      ((void (*)(char *, char *, uint64_t))v317)(v293, v171, v149);
      v178 = v305;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v302 + 56))(v305, 1, 1, v303);
      v179 = sub_23DC29E48();
      v180 = v149;
      v181 = v176;
      v182 = (void (*)(char *, uint64_t))v314;
      v183 = v304;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 56))(v304, 1, 1, v179);
      v184 = v296;
      ((void (*)(char *, char *, uint64_t))v316)(v296, v181, v175);
      v185 = (int *)v294;
      ((void (*)(char *, char *, uint64_t))v317)(&v184[*(int *)(v294 + 20)], v177, v180);
      sub_23DBC6894(0);
      v187 = (uint64_t)v295;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v186 - 8) + 56))(v295, 1, 1, v186);
      ((void (*)(char *, uint64_t))v313)(v177, v180);
      v182(v181, v175);
      sub_23DBBCEB0(v187, (uint64_t)&v184[v185[6]], (uint64_t (*)(_QWORD))sub_23DBB29B8);
      sub_23DBBCEB0(v178, (uint64_t)&v184[v185[7]], (uint64_t (*)(_QWORD))sub_23DBD4810);
      v188 = v183;
      v189 = v182;
      sub_23DBBCEB0(v188, (uint64_t)&v184[v185[8]], (uint64_t (*)(_QWORD))sub_23DBD482C);
      v184[v185[9]] = 0;
      v190 = (uint64_t)v298;
      *v298 = 6;
      swift_storeEnumTagMultiPayload();
      v191 = type metadata accessor for SleepingSampleBaseline();
      v192 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v191 - 8) + 56);
      v193 = (uint64_t)v299;
      v192(v299, 1, 1, v191);
      v194 = (uint64_t)v292;
      v195 = &v292[*(int *)(v315 + 24)];
      v192(v195, 1, 1, v191);
      v141 = v311;
      v196 = (uint64_t)v184;
      v138 = v315;
      sub_23DBBCEB0(v196, v194, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
      v197 = v312;
      sub_23DBBCEB0(v190, v194 + *(int *)(v138 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
      v198 = (uint64_t)v195;
      v143 = v310;
      sub_23DBBC784(v193, v198, (uint64_t (*)(_QWORD))sub_23DBD9904);
      v199 = v194;
      v149 = v197;
      sub_23DBBCEB0(v199, v290, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      ((void (*)(char *, uint64_t))v313)(v280, v197);
      v189(v278, v175);
      sub_23DBD9968(v279);
    }
    else
    {
      ((void (*)(char *, uint64_t))v313)(v171, v149);
      ((void (*)(char *, uint64_t))v314)(v173, v175);
      sub_23DBBCEB0(v172, v290, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    }
    v200 = v283;
    v201 = v282;
    if ((v301 & 1) != 0)
    {
      v202 = 1;
    }
    else
    {
      static SleepingSampleBaselineComparison.wtr(_:on:calendar:hasBaseline:)(v143, (uint64_t)v141, v306 & 1, v282, v265);
      v202 = 0;
    }
    v203 = a12;
    v308(v201, v202, 1, v138);
    v204 = v281;
    v205 = v309;
    ((void (*)(char *, uint64_t, uint64_t))v316)(v281, v143, v309);
    ((void (*)(char *, char *, uint64_t))v317)(v200, v141, v149);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v307)(v201, 1, v138) == 1)
    {
      v206 = v149;
      v207 = v300;
      ((void (*)(char *, char *, uint64_t))v316)(v300, v204, v205);
      v208 = v293;
      ((void (*)(char *, char *, uint64_t))v317)(v293, v200, v206);
      v209 = v305;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v302 + 56))(v305, 1, 1, v303);
      v210 = sub_23DC29E48();
      v211 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v210 - 8) + 56);
      v212 = (void (*)(char *, uint64_t))v314;
      LODWORD(v301) = a12;
      v213 = v304;
      v211(v304, 1, 1, v210);
      v214 = v296;
      ((void (*)(char *, char *, uint64_t))v316)(v296, v207, v205);
      v215 = (int *)v294;
      ((void (*)(char *, char *, uint64_t))v317)(&v214[*(int *)(v294 + 20)], v208, v206);
      sub_23DBC6894(0);
      v217 = (uint64_t)v295;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v216 - 8) + 56))(v295, 1, 1, v216);
      ((void (*)(char *, uint64_t))v313)(v208, v206);
      v212(v207, v205);
      sub_23DBBCEB0(v217, (uint64_t)&v214[v215[6]], (uint64_t (*)(_QWORD))sub_23DBB29B8);
      sub_23DBBCEB0(v209, (uint64_t)&v214[v215[7]], (uint64_t (*)(_QWORD))sub_23DBD4810);
      v218 = v213;
      v219 = v212;
      sub_23DBBCEB0(v218, (uint64_t)&v214[v215[8]], (uint64_t (*)(_QWORD))sub_23DBD482C);
      v214[v215[9]] = 0;
      v220 = (uint64_t)v298;
      *v298 = 6;
      swift_storeEnumTagMultiPayload();
      v221 = type metadata accessor for SleepingSampleBaseline();
      v222 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v221 - 8) + 56);
      v223 = (uint64_t)v299;
      v222(v299, 1, 1, v221);
      v224 = (uint64_t)v292;
      v225 = &v292[*(int *)(v315 + 24)];
      v222(v225, 1, 1, v221);
      v226 = (uint64_t)v214;
      v138 = v315;
      sub_23DBBCEB0(v226, v224, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
      v227 = v312;
      sub_23DBBCEB0(v220, v224 + *(int *)(v138 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
      v228 = (uint64_t)v225;
      v143 = v310;
      sub_23DBBC784(v223, v228, (uint64_t (*)(_QWORD))sub_23DBD9904);
      v229 = v224;
      v149 = v227;
      sub_23DBBCEB0(v229, v291, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      ((void (*)(char *, uint64_t))v313)(v283, v227);
      v219(v281, v205);
      v203 = v301;
      sub_23DBD9968(v282);
    }
    else
    {
      ((void (*)(char *, uint64_t))v313)(v200, v149);
      ((void (*)(char *, uint64_t))v314)(v204, v205);
      sub_23DBBCEB0(v201, v291, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    }
    v230 = v285;
    v231 = v284;
    if ((v203 & 1) != 0)
    {
      v233 = 1;
      v234 = v300;
      v232 = v311;
    }
    else
    {
      v232 = v311;
      static SleepingSampleBaselineComparison.asleep(_:on:calendar:hasBaseline:)(v143, v311, v306 & 1, v285, a11);
      v233 = 0;
      v234 = v300;
    }
    v235 = v316;
    v308(v230, v233, 1, v138);
    ((void (*)(char *, uint64_t, uint64_t))v235)(v231, v143, v205);
    v236 = v235;
    v237 = v271;
    ((void (*)(char *, char *, uint64_t))v317)(v271, v232, v149);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v307)(v230, 1, v138) == 1)
    {
      ((void (*)(char *, char *, uint64_t))v236)(v234, v231, v205);
      v238 = (void (*)(uint64_t, char *, uint64_t))v317;
      v239 = v149;
      v240 = v293;
      ((void (*)(char *, char *, uint64_t))v317)(v293, v237, v239);
      v241 = v305;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v302 + 56))(v305, 1, 1, v303);
      v242 = sub_23DC29E48();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v242 - 8) + 56))(v304, 1, 1, v242);
      v243 = (uint64_t)v296;
      ((void (*)(char *, char *, uint64_t))v236)(v296, v234, v205);
      v244 = (int *)v294;
      v245 = v312;
      v238(v243 + *(int *)(v294 + 20), v240, v312);
      sub_23DBC6894(0);
      v247 = v295;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v246 - 8) + 56))(v295, 1, 1, v246);
      ((void (*)(char *, uint64_t))v313)(v240, v245);
      ((void (*)(char *, uint64_t))v314)(v234, v309);
      v248 = (uint64_t)v247;
      v205 = v309;
      sub_23DBBCEB0(v248, v243 + v244[6], (uint64_t (*)(_QWORD))sub_23DBB29B8);
      sub_23DBBCEB0(v241, v243 + v244[7], (uint64_t (*)(_QWORD))sub_23DBD4810);
      sub_23DBBCEB0(v304, v243 + v244[8], (uint64_t (*)(_QWORD))sub_23DBD482C);
      *(_BYTE *)(v243 + v244[9]) = 0;
      v249 = (uint64_t)v298;
      *v298 = 6;
      swift_storeEnumTagMultiPayload();
      v250 = type metadata accessor for SleepingSampleBaseline();
      v251 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v250 - 8) + 56);
      v252 = (uint64_t)v299;
      v251(v299, 1, 1, v250);
      v253 = v315;
      v254 = (uint64_t)v292;
      v255 = (uint64_t)&v292[*(int *)(v315 + 24)];
      v251((char *)v255, 1, 1, v250);
      sub_23DBBCEB0(v243, v254, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
      sub_23DBBCEB0(v249, v254 + *(int *)(v253 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
      sub_23DBBC784(v252, v255, (uint64_t (*)(_QWORD))sub_23DBD9904);
      v256 = v272;
      sub_23DBBCEB0(v254, v272, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      ((void (*)(char *, uint64_t))v313)(v237, v312);
      ((void (*)(char *, uint64_t))v314)(v284, v205);
      sub_23DBD9968(v285);
    }
    else
    {
      ((void (*)(char *, uint64_t))v313)(v237, v149);
      ((void (*)(char *, uint64_t))v314)(v231, v205);
      v256 = v272;
      sub_23DBBCEB0(v230, v272, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    }
    v257 = v267;
    v258 = (int *)type metadata accessor for SleepingSampleDaySummary();
    v259 = v257 + v258[6];
    v260 = sub_23DC29E48();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v260 - 8) + 56))(v259, 1, 1, v260);
    v261 = v257 + v258[7];
    *(_QWORD *)v261 = 0;
    *(_BYTE *)(v261 + 8) = 1;
    v266(v257, v270, v205);
    sub_23DBBCEB0(v286, v257 + v258[5], (uint64_t (*)(_QWORD))sub_23DBBFA18);
    sub_23DBBC784(v287, v259, (uint64_t (*)(_QWORD))sub_23DBD482C);
    sub_23DBBCEB0(v288, v257 + v258[8], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    sub_23DBBCEB0(v289, v257 + v258[9], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    sub_23DBBCEB0(v290, v257 + v258[10], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    sub_23DBBCEB0(v291, v257 + v258[11], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    return sub_23DBBCEB0(v256, v257 + v258[12], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23DBD9904(uint64_t a1)
{
  sub_23DBB89B8(a1, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
}

unint64_t sub_23DBD9920()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25431FAC8;
  if (!qword_25431FAC8)
  {
    v1 = sub_23DC2A154();
    result = MEMORY[0x24263E440](MEMORY[0x24BDD24A8], v1);
    atomic_store(result, (unint64_t *)&qword_25431FAC8);
  }
  return result;
}

uint64_t sub_23DBD9968(uint64_t a1)
{
  uint64_t v2;

  sub_23DBB89B8(0, &qword_25431F238, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL SleepingSampleDataTypeFeatureStatus.State.isHiddenDueToUnsatisfiedRequirements.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 8) == 0;
}

BOOL static SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23DBD99E8()
{
  sub_23DBDBB10();
  return sub_23DC2A964();
}

uint64_t sub_23DBD9A10()
{
  sub_23DBDBB10();
  return sub_23DC2A970();
}

unint64_t sub_23DBD9A38()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000012;
  if (*v0 != 1)
    v1 = 0x6C62616C69617661;
  if (*v0)
    return v1;
  else
    return 0xD000000000000022;
}

uint64_t sub_23DBD9A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBDCC90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DBD9AC0()
{
  sub_23DBDBBDC();
  return sub_23DC2A964();
}

uint64_t sub_23DBD9AE8()
{
  sub_23DBDBBDC();
  return sub_23DC2A970();
}

uint64_t sub_23DBD9B18()
{
  return 12383;
}

uint64_t sub_23DBD9B28()
{
  sub_23DBDBB54();
  return sub_23DC2A964();
}

uint64_t sub_23DBD9B50()
{
  sub_23DBDBB54();
  return sub_23DC2A970();
}

uint64_t sub_23DBD9B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23DC2A7FC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23DBD9BF4()
{
  sub_23DBDBB98();
  return sub_23DC2A964();
}

uint64_t sub_23DBD9C1C()
{
  sub_23DBDBB98();
  return sub_23DC2A970();
}

uint64_t SleepingSampleDataTypeFeatureStatus.State.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v2 = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  sub_23DBB2A64(0, &qword_256CE9B70, (uint64_t (*)(void))sub_23DBDBB10, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.AvailableCodingKeys, MEMORY[0x24BEE3520]);
  v29 = v5;
  v27 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v25 = (char *)&v24 - v6;
  sub_23DBB2A64(0, &qword_256CE9B80, (uint64_t (*)(void))sub_23DBDBB54, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.ConfigurationIssueCodingKeys, v4);
  v30 = v7;
  v28 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24 - v8;
  sub_23DBB2A64(0, &qword_256CE9B90, (uint64_t (*)(void))sub_23DBDBB98, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.HiddenDueToUnsatisfiedRequirementsCodingKeys, v4);
  v26 = v10;
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v24 - v12;
  sub_23DBB2A64(0, &qword_256CE9BA0, (uint64_t (*)(void))sub_23DBDBBDC, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.CodingKeys, v4);
  v32 = *(_QWORD *)(v14 - 8);
  v33 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v24 - v15;
  v31 = *v2;
  v17 = *((unsigned __int8 *)v2 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBDBBDC();
  sub_23DC2A8C8();
  if (v17)
  {
    if (v17 == 1)
    {
      v37 = 1;
      sub_23DBDBB54();
      v18 = v33;
      sub_23DC2A778();
      v36 = v31 & 1;
      sub_23DBDBC20();
      v19 = v30;
      sub_23DC2A7C0();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v19);
    }
    else
    {
      v38 = 2;
      sub_23DBDBB10();
      v23 = v25;
      v18 = v33;
      sub_23DC2A778();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v23, v29);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v18);
  }
  else
  {
    v35 = 0;
    sub_23DBDBB98();
    v21 = v33;
    sub_23DC2A778();
    v34 = v31;
    sub_23DBDBC64();
    sub_23DBDBCFC(&qword_256CE9BC0, &qword_256CE9BC8, MEMORY[0x24BDD2730], MEMORY[0x24BEE12A0]);
    v22 = v26;
    sub_23DC2A7C0();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v21);
  }
}

uint64_t SleepingSampleDataTypeFeatureStatus.State.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  char v46;
  unsigned __int8 v47;
  char v48;
  char v49;

  v41 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_23DBB2A64(0, &qword_256CE9BD0, (uint64_t (*)(void))sub_23DBDBB10, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.AvailableCodingKeys, MEMORY[0x24BEE33E0]);
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v43 = (char *)&v34 - v5;
  sub_23DBB2A64(0, &qword_256CE9BD8, (uint64_t (*)(void))sub_23DBDBB54, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.ConfigurationIssueCodingKeys, v3);
  v40 = v6;
  v36 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)&v34 - v7;
  sub_23DBB2A64(0, &qword_256CE9BE0, (uint64_t (*)(void))sub_23DBDBB98, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.HiddenDueToUnsatisfiedRequirementsCodingKeys, v3);
  v39 = v8;
  v35 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v34 - v9;
  sub_23DBB2A64(0, &qword_256CE9BE8, (uint64_t (*)(void))sub_23DBDBBDC, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.State.CodingKeys, v3);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v34 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBDBBDC();
  v16 = v44;
  sub_23DC2A8BC();
  if (v16)
    goto LABEL_7;
  v18 = v42;
  v17 = v43;
  v34 = v13;
  v44 = a1;
  v19 = sub_23DC2A76C();
  v20 = v12;
  if (*(_QWORD *)(v19 + 16) != 1)
  {
    v25 = sub_23DC2A5E0();
    swift_allocError();
    v27 = v26;
    sub_23DBBF970();
    *v27 = &type metadata for SleepingSampleDataTypeFeatureStatus.State;
    sub_23DC2A718();
    sub_23DC2A5C8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v20);
    a1 = v44;
LABEL_7:
    v28 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v28);
  }
  v21 = v15;
  v22 = *(unsigned __int8 *)(v19 + 32);
  if (*(_BYTE *)(v19 + 32))
  {
    if (v22 == 1)
    {
      v48 = 1;
      sub_23DBDBB54();
      sub_23DC2A70C();
      sub_23DBDBCB8();
      v23 = v40;
      sub_23DC2A760();
      v24 = v34;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v18, v23);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v20);
      v32 = v47;
    }
    else
    {
      v49 = 2;
      sub_23DBDBB10();
      sub_23DC2A70C();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v17, v38);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v20);
      v32 = 0;
    }
  }
  else
  {
    v46 = 0;
    sub_23DBDBB98();
    v30 = v10;
    sub_23DC2A70C();
    sub_23DBDBC64();
    sub_23DBDBCFC(&qword_256CE9BF8, &qword_256CE9C00, MEMORY[0x24BDD2738], MEMORY[0x24BEE12D0]);
    v31 = v39;
    sub_23DC2A760();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v20);
    v32 = v45;
  }
  v33 = v41;
  *v41 = v32;
  *((_BYTE *)v33 + 8) = v22;
  v28 = (uint64_t)v44;
  return __swift_destroy_boxed_opaque_existential_1(v28);
}

uint64_t sub_23DBDA530@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return SleepingSampleDataTypeFeatureStatus.State.init(from:)(a1, a2);
}

uint64_t sub_23DBDA544(_QWORD *a1)
{
  return SleepingSampleDataTypeFeatureStatus.State.encode(to:)(a1);
}

uint64_t SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.hash(into:)()
{
  return sub_23DC2A88C();
}

unint64_t sub_23DBDA580()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0xD000000000000017;
}

uint64_t sub_23DBDA5C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBDCDE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DBDA5E4()
{
  sub_23DBDBE3C();
  return sub_23DC2A964();
}

uint64_t sub_23DBDA60C()
{
  sub_23DBDBE3C();
  return sub_23DC2A970();
}

uint64_t sub_23DBDA634()
{
  sub_23DBDBDB4();
  return sub_23DC2A964();
}

uint64_t sub_23DBDA65C()
{
  sub_23DBDBDB4();
  return sub_23DC2A970();
}

uint64_t sub_23DBDA684()
{
  sub_23DBDBDF8();
  return sub_23DC2A964();
}

uint64_t sub_23DBDA6AC()
{
  sub_23DBDBDF8();
  return sub_23DC2A970();
}

uint64_t SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  sub_23DBB2A64(0, &qword_256CE9C08, (uint64_t (*)(void))sub_23DBDBDB4, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.PrivacySettingOffCodingKeys, MEMORY[0x24BEE3520]);
  v20 = *(_QWORD *)(v4 - 8);
  v21 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v19 = (char *)&v16 - v5;
  sub_23DBB2A64(0, &qword_256CE9C18, (uint64_t (*)(void))sub_23DBDBDF8, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.SleepOnboardingRequiredCodingKeys, v3);
  v17 = *(_QWORD *)(v6 - 8);
  v18 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v16 - v7;
  sub_23DBB2A64(0, &qword_256CE9C28, (uint64_t (*)(void))sub_23DBDBE3C, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.CodingKeys, v3);
  v10 = v9;
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v16 - v11;
  v13 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBDBE3C();
  sub_23DC2A8C8();
  if ((v13 & 1) != 0)
  {
    v24 = 1;
    sub_23DBDBDB4();
    v14 = v19;
    sub_23DC2A778();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v14, v21);
  }
  else
  {
    v23 = 0;
    sub_23DBDBDF8();
    sub_23DC2A778();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v12, v10);
}

uint64_t SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.hashValue.getter()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _BYTE *v34;
  uint64_t v35;
  char v36;
  char v37;

  v34 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_23DBB2A64(0, &qword_256CE9C38, (uint64_t (*)(void))sub_23DBDBDB4, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.PrivacySettingOffCodingKeys, MEMORY[0x24BEE33E0]);
  v32 = v4;
  v29 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v33 = (char *)&v28 - v5;
  sub_23DBB2A64(0, &qword_256CE9C40, (uint64_t (*)(void))sub_23DBDBDF8, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.SleepOnboardingRequiredCodingKeys, v3);
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v28 - v7;
  sub_23DBB2A64(0, &qword_256CE9C48, (uint64_t (*)(void))sub_23DBDBE3C, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.CodingKeys, v3);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v28 - v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBDBE3C();
  v14 = v35;
  sub_23DC2A8BC();
  if (v14)
    goto LABEL_6;
  v35 = v11;
  v15 = v33;
  v16 = v34;
  v28 = a1;
  v17 = v13;
  v18 = sub_23DC2A76C();
  v19 = v10;
  if (*(_QWORD *)(v18 + 16) != 1)
  {
    v22 = sub_23DC2A5E0();
    swift_allocError();
    v24 = v23;
    sub_23DBBF970();
    *v24 = &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue;
    sub_23DC2A718();
    sub_23DC2A5C8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, *MEMORY[0x24BEE26D0], v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v10);
    a1 = v28;
LABEL_6:
    v25 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v25);
  }
  v20 = *(_BYTE *)(v18 + 32);
  if ((v20 & 1) != 0)
  {
    v37 = 1;
    sub_23DBDBDB4();
    sub_23DC2A70C();
    v21 = v35;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v17, v19);
  }
  else
  {
    v36 = 0;
    sub_23DBDBDF8();
    sub_23DC2A70C();
    v27 = v35;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v19);
  }
  *v16 = v20;
  v25 = (uint64_t)v28;
  return __swift_destroy_boxed_opaque_existential_1(v25);
}

uint64_t sub_23DBDACB0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.init(from:)(a1, a2);
}

uint64_t sub_23DBDACC4(_QWORD *a1)
{
  return SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.encode(to:)(a1);
}

void SleepingSampleDataTypeFeatureStatus.dataType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *SleepingSampleDataTypeFeatureStatus.dataType.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*SleepingSampleDataTypeFeatureStatus.dataType.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDataTypeFeatureStatus.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)a1 = v2;
  v3 = *(_BYTE *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_23DBDBE80(v2, v3);
}

uint64_t SleepingSampleDataTypeFeatureStatus.state.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = sub_23DBDBE90(*(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
  *(_QWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 16) = v3;
  return result;
}

uint64_t (*SleepingSampleDataTypeFeatureStatus.state.modify())()
{
  return nullsub_1;
}

_BYTE *SleepingSampleDataTypeFeatureStatus.init(dataType:state:)@<X0>(_BYTE *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_BYTE *)a3 = *result;
  *(_QWORD *)(a3 + 8) = v3;
  *(_BYTE *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_23DBDAD80()
{
  _BYTE *v0;

  if (*v0)
    return 0x6574617473;
  else
    return 0x6570795461746164;
}

uint64_t sub_23DBDADB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBDCED0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DBDADDC()
{
  sub_23DBDBF10();
  return sub_23DC2A964();
}

uint64_t sub_23DBDAE04()
{
  sub_23DBDBF10();
  return sub_23DC2A970();
}

uint64_t SleepingSampleDataTypeFeatureStatus.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  int v13;
  char v14;
  char v15;
  char v16;

  sub_23DBB2A64(0, &qword_256CE9C50, (uint64_t (*)(void))sub_23DBDBF10, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.CodingKeys, MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v11 - v6;
  v8 = *v1;
  v11[0] = *((_QWORD *)v1 + 1);
  v13 = v1[16];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBDBF10();
  sub_23DC2A8C8();
  v16 = v8;
  v15 = 0;
  sub_23DBDBF54();
  v9 = v11[1];
  sub_23DC2A7C0();
  if (!v9)
  {
    v11[2] = v11[0];
    v12 = v13;
    v14 = 1;
    sub_23DBDBF98();
    sub_23DC2A7C0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SleepingSampleDataTypeFeatureStatus.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v15 = a2;
  sub_23DBB2A64(0, &qword_256CE9C70, (uint64_t (*)(void))sub_23DBDBF10, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.CodingKeys, MEMORY[0x24BEE33E0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBDBF10();
  sub_23DC2A8BC();
  if (!v2)
  {
    v9 = v15;
    v19 = 0;
    sub_23DBDBFDC();
    sub_23DC2A760();
    v10 = v20;
    v18 = 1;
    sub_23DBDC020();
    sub_23DC2A760();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v16;
    v13 = v17;
    *(_BYTE *)v9 = v10;
    *(_QWORD *)(v9 + 8) = v12;
    *(_BYTE *)(v9 + 16) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23DBDB150@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleDataTypeFeatureStatus.init(from:)(a1, a2);
}

uint64_t sub_23DBDB164(_QWORD *a1)
{
  return SleepingSampleDataTypeFeatureStatus.encode(to:)(a1);
}

void sub_23DBDB178(id a1@<X1>, unsigned __int8 *a2@<X0>, uint64_t a3@<X8>)
{
  id v3;
  unsigned __int8 v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  id v24;
  unsigned __int8 v25;
  char v26;
  unsigned __int8 v27;
  uint64_t v28;

  v3 = a1;
  v5 = *a2;
  v6 = objc_msgSend(a1, sel_unsatisfiedRequirementIdentifiers);
  type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(0);
  v7 = sub_23DC2A34C();

  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v24 = v3;
    swift_bridgeObjectRetain();
    v9 = 0;
    v10 = MEMORY[0x24BEE4AF8];
    do
    {
      v11 = *(void **)(v7 + 8 * v9 + 32);
      v27 = v5;
      v12 = v11;
      if (sub_23DBDB41C(&v27))
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v28 = v10;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_23DBCCA14(0, *(_QWORD *)(v10 + 16) + 1, 1);
          v10 = v28;
        }
        v15 = *(_QWORD *)(v10 + 16);
        v14 = *(_QWORD *)(v10 + 24);
        if (v15 >= v14 >> 1)
        {
          sub_23DBCCA14(v14 > 1, v15 + 1, 1);
          v10 = v28;
        }
        *(_QWORD *)(v10 + 16) = v15 + 1;
        *(_QWORD *)(v10 + 8 * v15 + 32) = v12;
      }
      else
      {

      }
      ++v9;
    }
    while (v8 != v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v16 = 0;
    v17 = (char *)MEMORY[0x24BEE4AF8];
    do
    {
      v18 = *(void **)(v7 + 8 * v16 + 32);
      v25 = v5;
      v19 = v18;
      sub_23DBDB7F8(&v25, &v26);

      v20 = v26;
      if (v26 != 2)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v17 = sub_23DBDF02C(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
        v22 = *((_QWORD *)v17 + 2);
        v21 = *((_QWORD *)v17 + 3);
        if (v22 >= v21 >> 1)
          v17 = sub_23DBDF02C((char *)(v21 > 1), v22 + 1, 1, v17);
        *((_QWORD *)v17 + 2) = v22 + 1;
        v17[v22 + 32] = v20 & 1;
      }
      ++v16;
    }
    while (v8 != v16);
    swift_bridgeObjectRelease_n();
    v3 = v24;
    if (*(_QWORD *)(v10 + 16))
      goto LABEL_20;
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = (char *)MEMORY[0x24BEE4AF8];
    v10 = MEMORY[0x24BEE4AF8];
    if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
    {
LABEL_20:
      swift_bridgeObjectRelease();

      v23 = 0;
      goto LABEL_25;
    }
  }
  swift_release();
  if (*((_QWORD *)v17 + 2))
  {
    v10 = v17[32];
    swift_bridgeObjectRelease();

    v23 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();

    v10 = 0;
    v23 = 2;
  }
LABEL_25:
  *(_BYTE *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v23;
}

BOOL sub_23DBDB41C(unsigned __int8 *a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v1 = *a1;
  v2 = sub_23DC2A244();
  v4 = v3;
  if (v2 == sub_23DC2A244() && v4 == v5)
    goto LABEL_13;
  v7 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    return 1;
  v8 = sub_23DC2A244();
  v10 = v9;
  if (v8 == sub_23DC2A244() && v10 == v11)
  {
LABEL_13:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  v13 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
    return 1;
  v14 = sub_23DC2A244();
  v16 = v15;
  if (v14 == sub_23DC2A244() && v16 == v17)
    goto LABEL_13;
  v19 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
    return 1;
  v20 = sub_23DC2A244();
  v22 = v21;
  if (v20 == sub_23DC2A244() && v22 == v23)
    goto LABEL_13;
  v24 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
    return 1;
  v25 = sub_23DC2A244();
  v27 = v26;
  if (v25 == sub_23DC2A244() && v27 == v28)
    goto LABEL_13;
  v29 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0)
    return 1;
  v30 = sub_23DC2A244();
  v32 = v31;
  if (v30 == sub_23DC2A244() && v32 == v33)
    goto LABEL_13;
  v34 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v34 & 1) != 0)
    return 1;
  v35 = sub_23DC2A244();
  v37 = v36;
  if (v35 == sub_23DC2A244() && v37 == v38)
    goto LABEL_13;
  v39 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v39 & 1) != 0)
    return 1;
  v40 = sub_23DC2A244();
  v42 = v41;
  if (v40 == sub_23DC2A244() && v42 == v43)
    goto LABEL_31;
  v44 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v44 & 1) != 0)
    return v1 < 4;
  v45 = sub_23DC2A244();
  v47 = v46;
  if (v45 == sub_23DC2A244() && v47 == v48)
  {
LABEL_31:
    swift_bridgeObjectRelease_n();
    return v1 < 4;
  }
  v49 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v49 & 1) != 0)
    return v1 < 4;
  return result;
}

uint64_t sub_23DBDB7F8@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v3 = *a1;
  v4 = sub_23DC2A244();
  v6 = v5;
  if (v4 == sub_23DC2A244() && v6 == v7)
    goto LABEL_13;
  v9 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    goto LABEL_14;
  v11 = sub_23DC2A244();
  v13 = v12;
  if (v11 == sub_23DC2A244() && v13 == v14)
    goto LABEL_13;
  v16 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
LABEL_14:
    v21 = 1;
    goto LABEL_15;
  }
  v17 = sub_23DC2A244();
  v19 = v18;
  if (v17 == sub_23DC2A244() && v19 == v20)
  {
LABEL_13:
    result = swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  v22 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
    goto LABEL_14;
  v23 = sub_23DC2A244();
  v25 = v24;
  if (v23 == sub_23DC2A244() && v25 == v26)
  {
    result = swift_bridgeObjectRelease_n();
    if (v3 > 3)
    {
      v21 = 0;
      goto LABEL_15;
    }
LABEL_23:
    v21 = 2;
    goto LABEL_15;
  }
  v27 = sub_23DC2A7FC();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if ((v27 & 1) == 0)
    goto LABEL_23;
  v21 = 0;
  if (v3 <= 3)
    goto LABEL_23;
LABEL_15:
  *a2 = v21;
  return result;
}

BOOL _s13HealthBalance35SleepingSampleDataTypeFeatureStatusV5StateO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v8;

  v2 = *(_QWORD *)a1;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(_QWORD *)a2;
  v5 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    if (v3 == 1)
    {
      if (v5 == 1)
      {
        sub_23DBDBE90(*(_QWORD *)a1, 1);
        sub_23DBDBE90(v4, 1);
        return ((v4 ^ v2) & 1) == 0;
      }
      goto LABEL_11;
    }
    if (v5 != 2 || v4 != 0)
    {
LABEL_11:
      sub_23DBDBE80(v4, v5);
      sub_23DBDBE90(v2, v3);
      sub_23DBDBE90(v4, v5);
      return 0;
    }
    sub_23DBDBE90(*(_QWORD *)a1, 2);
    sub_23DBDBE90(0, 2);
    return 1;
  }
  else
  {
    if (*(_BYTE *)(a2 + 8))
    {
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    sub_23DBDBE80(*(_QWORD *)a2, 0);
    sub_23DBDBE80(v2, 0);
    v8 = sub_23DC0F028(v2, v4);
    sub_23DBDBE90(v2, 0);
    sub_23DBDBE90(v4, 0);
    return v8 & 1;
  }
}

unint64_t sub_23DBDBB10()
{
  unint64_t result;

  result = qword_256CE9B78;
  if (!qword_256CE9B78)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E90C, &type metadata for SleepingSampleDataTypeFeatureStatus.State.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9B78);
  }
  return result;
}

unint64_t sub_23DBDBB54()
{
  unint64_t result;

  result = qword_256CE9B88;
  if (!qword_256CE9B88)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E8BC, &type metadata for SleepingSampleDataTypeFeatureStatus.State.ConfigurationIssueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9B88);
  }
  return result;
}

unint64_t sub_23DBDBB98()
{
  unint64_t result;

  result = qword_256CE9B98;
  if (!qword_256CE9B98)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E86C, &type metadata for SleepingSampleDataTypeFeatureStatus.State.HiddenDueToUnsatisfiedRequirementsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9B98);
  }
  return result;
}

unint64_t sub_23DBDBBDC()
{
  unint64_t result;

  result = qword_256CE9BA8;
  if (!qword_256CE9BA8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E81C, &type metadata for SleepingSampleDataTypeFeatureStatus.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9BA8);
  }
  return result;
}

unint64_t sub_23DBDBC20()
{
  unint64_t result;

  result = qword_256CE9BB0;
  if (!qword_256CE9BB0)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue, &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue);
    atomic_store(result, (unint64_t *)&qword_256CE9BB0);
  }
  return result;
}

void sub_23DBDBC64()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE9BB8)
  {
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(255);
    v0 = sub_23DC2A3A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE9BB8);
  }
}

unint64_t sub_23DBDBCB8()
{
  unint64_t result;

  result = qword_256CE9BF0;
  if (!qword_256CE9BF0)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue, &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue);
    atomic_store(result, (unint64_t *)&qword_256CE9BF0);
  }
  return result;
}

uint64_t sub_23DBDBCFC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_23DBDBC64();
    v10 = v9;
    v11 = sub_23DBDBD74(a2, a3);
    result = MEMORY[0x24263E440](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DBDBD74(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for HKFeatureAvailabilityRequirementIdentifier(255);
    result = MEMORY[0x24263E440](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DBDBDB4()
{
  unint64_t result;

  result = qword_256CE9C10;
  if (!qword_256CE9C10)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E7CC, &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.PrivacySettingOffCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9C10);
  }
  return result;
}

unint64_t sub_23DBDBDF8()
{
  unint64_t result;

  result = qword_256CE9C20;
  if (!qword_256CE9C20)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E77C, &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.SleepOnboardingRequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9C20);
  }
  return result;
}

unint64_t sub_23DBDBE3C()
{
  unint64_t result;

  result = qword_256CE9C30;
  if (!qword_256CE9C30)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E72C, &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9C30);
  }
  return result;
}

uint64_t sub_23DBDBE80(uint64_t a1, char a2)
{
  uint64_t result;

  if (!a2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_23DBDBE90(uint64_t a1, char a2)
{
  uint64_t result;

  if (!a2)
    return swift_bridgeObjectRelease();
  return result;
}

BOOL _s13HealthBalance35SleepingSampleDataTypeFeatureStatusV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  if (qword_23DC2E960[*a1] == qword_23DC2E960[*a2])
  {
    v2 = a2[16];
    v3 = *((_QWORD *)a2 + 1);
    v4 = a1[16];
    v9 = *((_QWORD *)a1 + 1);
    v10 = v4;
    v7 = v3;
    v8 = v2;
    return _s13HealthBalance35SleepingSampleDataTypeFeatureStatusV5StateO2eeoiySbAE_AEtFZ_0((uint64_t)&v9, (uint64_t)&v7);
  }
  else
  {
    return 0;
  }
}

unint64_t sub_23DBDBF10()
{
  unint64_t result;

  result = qword_256CE9C58;
  if (!qword_256CE9C58)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E6DC, &type metadata for SleepingSampleDataTypeFeatureStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9C58);
  }
  return result;
}

unint64_t sub_23DBDBF54()
{
  unint64_t result;

  result = qword_256CE9C60;
  if (!qword_256CE9C60)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDataType, &type metadata for SleepingSampleDataType);
    atomic_store(result, (unint64_t *)&qword_256CE9C60);
  }
  return result;
}

unint64_t sub_23DBDBF98()
{
  unint64_t result;

  result = qword_256CE9C68;
  if (!qword_256CE9C68)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDataTypeFeatureStatus.State, &type metadata for SleepingSampleDataTypeFeatureStatus.State);
    atomic_store(result, (unint64_t *)&qword_256CE9C68);
  }
  return result;
}

unint64_t sub_23DBDBFDC()
{
  unint64_t result;

  result = qword_256CE9C78;
  if (!qword_256CE9C78)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDataType, &type metadata for SleepingSampleDataType);
    atomic_store(result, (unint64_t *)&qword_256CE9C78);
  }
  return result;
}

unint64_t sub_23DBDC020()
{
  unint64_t result;

  result = qword_256CE9C80;
  if (!qword_256CE9C80)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDataTypeFeatureStatus.State, &type metadata for SleepingSampleDataTypeFeatureStatus.State);
    atomic_store(result, (unint64_t *)&qword_256CE9C80);
  }
  return result;
}

unint64_t sub_23DBDC068()
{
  unint64_t result;

  result = qword_256CE9C88;
  if (!qword_256CE9C88)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue, &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue);
    atomic_store(result, (unint64_t *)&qword_256CE9C88);
  }
  return result;
}

uint64_t destroy for SleepingSampleDataTypeFeatureStatus(uint64_t a1)
{
  return sub_23DBDBE90(*(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s13HealthBalance35SleepingSampleDataTypeFeatureStatusVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  sub_23DBDBE80(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for SleepingSampleDataTypeFeatureStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 16);
  sub_23DBDBE80(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  sub_23DBDBE90(v5, v6);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SleepingSampleDataTypeFeatureStatus(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23DBDBE90(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleDataTypeFeatureStatus(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleDataTypeFeatureStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus;
}

uint64_t initializeBufferWithCopyOfBuffer for SleepingSampleDataTypeFeatureStatus.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_23DBDBE80(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for SleepingSampleDataTypeFeatureStatus.State(uint64_t a1)
{
  return sub_23DBDBE90(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for SleepingSampleDataTypeFeatureStatus.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_23DBDBE80(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_23DBDBE90(v5, v6);
  return a1;
}

uint64_t assignWithTake for SleepingSampleDataTypeFeatureStatus.State(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_23DBDBE90(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleDataTypeFeatureStatus.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleDataTypeFeatureStatus.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_23DBDC3C4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_23DBDC3DC(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.State()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.State;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.CodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.CodingKeys;
}

uint64_t _s13HealthBalance35SleepingSampleDataTypeFeatureStatusV18ConfigurationIssueOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DBDC478 + 4 * byte_23DC2DF55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DBDC4AC + 4 * byte_23DC2DF50[v4]))();
}

uint64_t sub_23DBDC4AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBDC4B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBDC4BCLL);
  return result;
}

uint64_t sub_23DBDC4C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBDC4D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DBDC4D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBDC4DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.CodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.CodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.SleepOnboardingRequiredCodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.SleepOnboardingRequiredCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.PrivacySettingOffCodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.PrivacySettingOffCodingKeys;
}

uint64_t storeEnumTagSinglePayload for SleepingSampleDataTypeFeatureStatus.State.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DBDC564 + 4 * byte_23DC2DF5F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DBDC598 + 4 * byte_23DC2DF5A[v4]))();
}

uint64_t sub_23DBDC598(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBDC5A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBDC5A8);
  return result;
}

uint64_t sub_23DBDC5B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBDC5BCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DBDC5C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBDC5C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.State.CodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.State.CodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.State.HiddenDueToUnsatisfiedRequirementsCodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.State.HiddenDueToUnsatisfiedRequirementsCodingKeys;
}

uint64_t _s13HealthBalance35SleepingSampleDataTypeFeatureStatusV5StateO44HiddenDueToUnsatisfiedRequirementsCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DBDC63C + 4 * byte_23DC2DF64[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DBDC65C + 4 * byte_23DC2DF69[v4]))();
}

_BYTE *sub_23DBDC63C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DBDC65C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DBDC664(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DBDC66C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DBDC674(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DBDC67C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.State.ConfigurationIssueCodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.State.ConfigurationIssueCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleDataTypeFeatureStatus.State.AvailableCodingKeys()
{
  return &type metadata for SleepingSampleDataTypeFeatureStatus.State.AvailableCodingKeys;
}

unint64_t sub_23DBDC6AC()
{
  unint64_t result;

  result = qword_256CE9C90;
  if (!qword_256CE9C90)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E334, &type metadata for SleepingSampleDataTypeFeatureStatus.State.ConfigurationIssueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9C90);
  }
  return result;
}

unint64_t sub_23DBDC6F4()
{
  unint64_t result;

  result = qword_256CE9C98;
  if (!qword_256CE9C98)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E3EC, &type metadata for SleepingSampleDataTypeFeatureStatus.State.HiddenDueToUnsatisfiedRequirementsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9C98);
  }
  return result;
}

unint64_t sub_23DBDC73C()
{
  unint64_t result;

  result = qword_256CE9CA0;
  if (!qword_256CE9CA0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E4A4, &type metadata for SleepingSampleDataTypeFeatureStatus.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9CA0);
  }
  return result;
}

unint64_t sub_23DBDC784()
{
  unint64_t result;

  result = qword_256CE9CA8;
  if (!qword_256CE9CA8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E5FC, &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9CA8);
  }
  return result;
}

unint64_t sub_23DBDC7CC()
{
  unint64_t result;

  result = qword_256CE9CB0;
  if (!qword_256CE9CB0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E6B4, &type metadata for SleepingSampleDataTypeFeatureStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9CB0);
  }
  return result;
}

unint64_t sub_23DBDC814()
{
  unint64_t result;

  result = qword_256CE9CB8;
  if (!qword_256CE9CB8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E624, &type metadata for SleepingSampleDataTypeFeatureStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9CB8);
  }
  return result;
}

unint64_t sub_23DBDC85C()
{
  unint64_t result;

  result = qword_256CE9CC0;
  if (!qword_256CE9CC0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E64C, &type metadata for SleepingSampleDataTypeFeatureStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9CC0);
  }
  return result;
}

unint64_t sub_23DBDC8A4()
{
  unint64_t result;

  result = qword_256CE9CC8;
  if (!qword_256CE9CC8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E56C, &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9CC8);
  }
  return result;
}

unint64_t sub_23DBDC8EC()
{
  unint64_t result;

  result = qword_256CE9CD0;
  if (!qword_256CE9CD0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E594, &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9CD0);
  }
  return result;
}

unint64_t sub_23DBDC934()
{
  unint64_t result;

  result = qword_256CE9CD8;
  if (!qword_256CE9CD8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E51C, &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.SleepOnboardingRequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9CD8);
  }
  return result;
}

unint64_t sub_23DBDC97C()
{
  unint64_t result;

  result = qword_256CE9CE0;
  if (!qword_256CE9CE0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E544, &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.SleepOnboardingRequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9CE0);
  }
  return result;
}

unint64_t sub_23DBDC9C4()
{
  unint64_t result;

  result = qword_256CE9CE8;
  if (!qword_256CE9CE8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E4CC, &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.PrivacySettingOffCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9CE8);
  }
  return result;
}

unint64_t sub_23DBDCA0C()
{
  unint64_t result;

  result = qword_256CE9CF0;
  if (!qword_256CE9CF0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E4F4, &type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue.PrivacySettingOffCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9CF0);
  }
  return result;
}

unint64_t sub_23DBDCA54()
{
  unint64_t result;

  result = qword_256CE9CF8;
  if (!qword_256CE9CF8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E414, &type metadata for SleepingSampleDataTypeFeatureStatus.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9CF8);
  }
  return result;
}

unint64_t sub_23DBDCA9C()
{
  unint64_t result;

  result = qword_256CE9D00;
  if (!qword_256CE9D00)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E43C, &type metadata for SleepingSampleDataTypeFeatureStatus.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9D00);
  }
  return result;
}

unint64_t sub_23DBDCAE4()
{
  unint64_t result;

  result = qword_256CE9D08;
  if (!qword_256CE9D08)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E35C, &type metadata for SleepingSampleDataTypeFeatureStatus.State.HiddenDueToUnsatisfiedRequirementsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9D08);
  }
  return result;
}

unint64_t sub_23DBDCB2C()
{
  unint64_t result;

  result = qword_256CE9D10;
  if (!qword_256CE9D10)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E384, &type metadata for SleepingSampleDataTypeFeatureStatus.State.HiddenDueToUnsatisfiedRequirementsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9D10);
  }
  return result;
}

unint64_t sub_23DBDCB74()
{
  unint64_t result;

  result = qword_256CE9D18;
  if (!qword_256CE9D18)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E2A4, &type metadata for SleepingSampleDataTypeFeatureStatus.State.ConfigurationIssueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9D18);
  }
  return result;
}

unint64_t sub_23DBDCBBC()
{
  unint64_t result;

  result = qword_256CE9D20;
  if (!qword_256CE9D20)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E2CC, &type metadata for SleepingSampleDataTypeFeatureStatus.State.ConfigurationIssueCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9D20);
  }
  return result;
}

unint64_t sub_23DBDCC04()
{
  unint64_t result;

  result = qword_256CE9D28;
  if (!qword_256CE9D28)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E254, &type metadata for SleepingSampleDataTypeFeatureStatus.State.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9D28);
  }
  return result;
}

unint64_t sub_23DBDCC4C()
{
  unint64_t result;

  result = qword_256CE9D30;
  if (!qword_256CE9D30)
  {
    result = MEMORY[0x24263E440](&unk_23DC2E27C, &type metadata for SleepingSampleDataTypeFeatureStatus.State.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9D30);
  }
  return result;
}

uint64_t sub_23DBDCC90(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000022 && a2 == 0x800000023DC32520 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023DC32550 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C62616C69617661 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23DBDCDE8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000017 && a2 == 0x800000023DC32570 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023DC32590)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23DBDCED0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6570795461746164 && a2 == 0xE800000000000000;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t TrainingLoadSummaryQuery.morningIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DBDCFDC(v1 + OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_morningIndexRange, a1);
}

uint64_t sub_23DBDCFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBBFA18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t TrainingLoadSummaryQuery.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_gregorianCalendar;
  v4 = sub_23DC29F80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void TrainingLoadSummaryQuery.typeOfDataRequested.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_typeOfDataRequested);
}

uint64_t TrainingLoadSummaryQuery.continueAfterInitialResults.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults);
}

id TrainingLoadSummaryQuery.__allocating_init(morningIndexRange:gregorianCalendar:typeOfDataRequested:continueAfterInitialResults:resultsHandler:)(uint64_t a1, uint64_t a2, char *a3, char a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  objc_class *v7;
  _BYTE *v13;
  char v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  objc_super v26;

  v7 = v6;
  v13 = objc_allocWithZone(v6);
  v14 = *a3;
  v15 = (uint64_t *)&v13[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  *v15 = 0;
  v15[1] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery] = MEMORY[0x24BEE4AF8];
  sub_23DBDCFDC(a1, (uint64_t)&v13[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_morningIndexRange]);
  v16 = &v13[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_gregorianCalendar];
  v17 = sub_23DC29F80();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a2, v17);
  v13[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_typeOfDataRequested] = v14;
  v13[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults] = a4;
  v19 = *v15;
  *v15 = a5;
  v15[1] = a6;
  swift_retain();
  sub_23DBC9C24(v19);
  sub_23DBB2A2C(0, (unint64_t *)&qword_25431F2A0);
  v20 = (void *)sub_23DC2A340();
  v26.receiver = v13;
  v26.super_class = v7;
  v21 = objc_msgSendSuper2(&v26, sel_initWithQueryDescriptors_, v20);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, v17);
  sub_23DBDD388(a1);
  return v21;
}

id TrainingLoadSummaryQuery.init(morningIndexRange:gregorianCalendar:typeOfDataRequested:continueAfterInitialResults:resultsHandler:)(uint64_t a1, uint64_t a2, char *a3, char a4, uint64_t a5, uint64_t a6)
{
  _BYTE *v6;
  _BYTE *v7;
  char v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  objc_class *ObjectType;
  objc_super v25;

  v7 = v6;
  ObjectType = (objc_class *)swift_getObjectType();
  v14 = *a3;
  v15 = (uint64_t *)&v7[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  *v15 = 0;
  v15[1] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery] = MEMORY[0x24BEE4AF8];
  sub_23DBDCFDC(a1, (uint64_t)&v7[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_morningIndexRange]);
  v16 = &v7[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_gregorianCalendar];
  v17 = sub_23DC29F80();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a2, v17);
  v7[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_typeOfDataRequested] = v14;
  v7[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults] = a4;
  v19 = *v15;
  *v15 = a5;
  v15[1] = a6;
  swift_retain();
  sub_23DBC9C24(v19);
  sub_23DBB2A2C(0, (unint64_t *)&qword_25431F2A0);
  v20 = (void *)sub_23DC2A340();
  v25.receiver = v7;
  v25.super_class = ObjectType;
  v21 = objc_msgSendSuper2(&v25, sel_initWithQueryDescriptors_, v20);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, v17);
  sub_23DBDD388(a1);
  return v21;
}

uint64_t sub_23DBDD388(uint64_t a1)
{
  uint64_t v2;

  sub_23DBBFA18();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DBDD3C4()
{
  char *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  _QWORD *v13;
  void *v14;
  _BYTE *v15;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_23DC2A028();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (_QWORD *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v5 = objc_msgSend(v0, sel_queue);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5610], v2);
  v6 = sub_23DC2A034();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    v8 = *(_QWORD *)&v0[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery];
    *(_QWORD *)&v0[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery] = MEMORY[0x24BEE4AF8];
    v9 = *(_QWORD *)&v0[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
    if (v9)
    {
      v10 = *(_QWORD *)&v0[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler + 8];
      swift_retain();
      v11 = (void *)sub_23DC29E60();
      v12 = v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults];
      v13 = (_QWORD *)swift_allocObject();
      v13[2] = v9;
      v13[3] = v10;
      v13[4] = v1;
      v13[5] = v8;
      aBlock[4] = sub_23DBDFBF8;
      aBlock[5] = v13;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_23DBDDB90;
      aBlock[3] = &block_descriptor_13;
      v14 = _Block_copy(aBlock);
      sub_23DBDDBBC(v9);
      v15 = v1;
      swift_release();
      objc_msgSend(v15, sel_queue_dispatchToClientForUUID_shouldDeactivate_block_, v11, (v12 & 1) == 0, v14);
      _Block_release(v14);

      return sub_23DBC9C24(v9);
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static TrainingLoadSummaryQuery.configurationClass()()
{
  return type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
}

Swift::Void __swiftcall TrainingLoadSummaryQuery.queue_populateConfiguration(_:)(HKQueryServerConfiguration *a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  HKQueryServerConfiguration *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char *v22;
  uint64_t v23;
  objc_super v24;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DBB89B8(0, (unint64_t *)&qword_256CE9D38, (uint64_t (*)(uint64_t))sub_23DBBFA18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v23 - v6;
  sub_23DBB89B8(0, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v4);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v23 - v9;
  v24.receiver = v1;
  v24.super_class = ObjectType;
  -[HKQueryServerConfiguration queue_populateConfiguration:](&v24, sel_queue_populateConfiguration_, a1);
  type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
  v11 = swift_dynamicCastClass();
  if (v11)
  {
    v12 = (char *)v11;
    v13 = &v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_gregorianCalendar];
    v14 = sub_23DC29F80();
    v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8];
    v16 = *(_QWORD *)(v14 - 8);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v10, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v10, 0, 1, v14);
    v17 = (uint64_t)&v12[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar];
    swift_beginAccess();
    v18 = a1;
    sub_23DBDD860((uint64_t)v10, v17, &qword_25431F8F0, v15);
    swift_endAccess();
    sub_23DBDCFDC((uint64_t)&v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_morningIndexRange], (uint64_t)v7);
    sub_23DBBFA18();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v7, 0, 1, v19);
    v20 = (uint64_t)&v12[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange];
    swift_beginAccess();
    sub_23DBDD860((uint64_t)v7, v20, (unint64_t *)&qword_256CE9D38, (uint64_t (*)(uint64_t))sub_23DBBFA18);
    swift_endAccess();
    v21 = v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_typeOfDataRequested];
    v22 = &v12[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested];
    swift_beginAccess();
    *v22 = v21;
    objc_msgSend(v12, sel_setShouldDeactivateAfterInitialResults_, (v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults] & 1) == 0);

  }
}

uint64_t sub_23DBDD860(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_23DBB89B8(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t TrainingLoadSummaryQuery.queue_deliverError(_:)(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  const void *v18;
  char *v19;
  id v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v3 = sub_23DC2A004();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DC2A01C();
  v8 = *(_QWORD *)(v7 - 8);
  result = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)&v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  if (v12)
  {
    v24 = result;
    v13 = *(_QWORD *)&v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler + 8];
    swift_retain();
    v14 = objc_msgSend(v1, sel_clientQueue);
    if (v14)
    {
      v15 = v14;
      v16 = (_QWORD *)swift_allocObject();
      v16[2] = v12;
      v16[3] = v13;
      v16[4] = v1;
      v16[5] = a1;
      aBlock[4] = sub_23DBDDB88;
      aBlock[5] = v16;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_23DBDDB90;
      aBlock[3] = &block_descriptor_0;
      v17 = _Block_copy(aBlock);
      v23 = v4;
      v18 = v17;
      sub_23DBDDBBC(v12);
      v19 = v1;
      v20 = a1;
      sub_23DC2A010();
      v25 = MEMORY[0x24BEE4AF8];
      v21 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
      sub_23DBB2CB0(&qword_25431F258, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      sub_23DBB89B8(0, &qword_25431F280, v21, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
      sub_23DBDDBCC();
      sub_23DC2A538();
      MEMORY[0x24263DAF8](0, v11, v6, v18);
      _Block_release(v18);

      sub_23DBC9C24(v12);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v3);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v24);
      return swift_release();
    }
    else
    {
      return sub_23DBC9C24(v12);
    }
  }
  return result;
}

uint64_t sub_23DBDDB7C()
{
  return objectdestroyTm((void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

uint64_t sub_23DBDDB88()
{
  return sub_23DBDFC00(1);
}

uint64_t sub_23DBDDB90(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_23DBDDBBC(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

unint64_t sub_23DBDDBCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25431F288;
  if (!qword_25431F288)
  {
    sub_23DBB89B8(255, &qword_25431F280, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    result = MEMORY[0x24263E440](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_25431F288);
  }
  return result;
}

Swift::Bool __swiftcall TrainingLoadSummaryQuery.queue_shouldDeactivateAfterInitialResults()()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults) & 1) == 0;
}

uint64_t TrainingLoadSummaryQuery.queue_queryDidDeactivate(_:)()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  void *v3;
  char *v4;
  uint64_t v5;
  objc_super v7;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = (void *)sub_23DC29E60();
  v7.receiver = v1;
  v7.super_class = ObjectType;
  objc_msgSendSuper2(&v7, sel_queue_queryDidDeactivate_, v3);

  v4 = &v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  return sub_23DBC9C24(v5);
}

void *static TrainingLoadSummaryQuery.clientInterfaceProtocol()()
{
  return &unk_256CF55A0;
}

void static TrainingLoadSummaryQuery.configureClientInterface(_:)(void *a1)
{
  _QWORD *v1;
  void *ObjCClassFromMetadata;
  objc_class *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  objc_super v19;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v4 = (objc_class *)(*MEMORY[0x24BEE4EA0] & *v1);
  v19.receiver = ObjCClassFromMetadata;
  v19.super_class = v4;
  objc_msgSendSuper2(&v19, sel_configureClientInterface_, a1);
  sub_23DBB2A2C(0, &qword_25431FA70);
  *(_QWORD *)&v16 = MEMORY[0x24BEE4AF8];
  MEMORY[0x24263D99C]();
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_23DC2A364();
  sub_23DBDE148();
  swift_getObjCClassFromMetadata();
  sub_23DC2A388();
  v5 = sub_23DC2A358();
  MEMORY[0x24263D99C](v5);
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_23DC2A364();
  swift_getObjCClassFromMetadata();
  sub_23DC2A388();
  sub_23DC2A358();
  if (!((unint64_t)v16 >> 62))
  {
    v6 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_7;
LABEL_20:
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_21:
    swift_bridgeObjectRelease_n();
    sub_23DBDF668((uint64_t)v7);
    swift_bridgeObjectRelease();
    v12 = (void *)sub_23DC2A3F4();
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_setClasses_forSelector_argumentIndex_ofReply_, v12, sel_client_deliverTrainingLoadSampleDaySummaries_queryUUID_, 0, 0);

    return;
  }
  swift_bridgeObjectRetain();
  v6 = sub_23DC2A6A0();
  if (!v6)
    goto LABEL_20;
LABEL_7:
  if (v6 >= 1)
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v8 = v16 + 32;
    do
    {
      swift_unknownObjectRetain_n();
      if ((swift_dynamicCast() & 1) == 0)
      {
        v18 = 0;
        v16 = 0u;
        v17 = 0u;
      }
      swift_unknownObjectRelease();
      if (*((_QWORD *)&v17 + 1))
      {
        v13 = v16;
        v14 = v17;
        v15 = v18;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = sub_23DBDF138(0, v7[2] + 1, 1, v7);
        v10 = v7[2];
        v9 = v7[3];
        if (v10 >= v9 >> 1)
          v7 = sub_23DBDF138((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
        v7[2] = v10 + 1;
        v11 = &v7[5 * v10];
        v11[8] = v15;
        *((_OWORD *)v11 + 2) = v13;
        *((_OWORD *)v11 + 3) = v14;
      }
      else
      {
        sub_23DBDE218((uint64_t)&v16);
      }
      v8 += 8;
      --v6;
    }
    while (v6);
    goto LABEL_21;
  }
  __break(1u);
}

void sub_23DBDE148()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE9D48)
  {
    type metadata accessor for TrainingLoadSampleDaySummary();
    sub_23DBB2CB0((unint64_t *)&unk_256CE9D50, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary, (uint64_t)&protocol conformance descriptor for TrainingLoadSampleDaySummary);
    sub_23DBB2CB0(&qword_256CE9888, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary, (uint64_t)&protocol conformance descriptor for TrainingLoadSampleDaySummary);
    sub_23DBB2CB0(&qword_256CE9D60, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary, (uint64_t)&protocol conformance descriptor for TrainingLoadSampleDaySummary);
    v0 = sub_23DC2A07C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE9D48);
  }
}

uint64_t sub_23DBDE218(uint64_t a1)
{
  uint64_t v2;

  sub_23DBB2D74(0, (unint64_t *)&unk_256CE9D68, MEMORY[0x24BEE23D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t TrainingLoadSummaryQuery.client_deliverTrainingLoadSampleDaySummaries(_:queryUUID:)(unint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t (*v21)(uint64_t);
  char *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v5 = sub_23DC2A004();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v28 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23DC2A01C();
  v26 = *(_QWORD *)(v8 - 8);
  v27 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23DC29E78();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  result = sub_23DBDE534(a1);
  if (result)
  {
    v15 = result;
    v24 = objc_msgSend(v2, sel_queue);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v11);
    v16 = *(unsigned __int8 *)(v12 + 80);
    v25 = v6;
    v17 = (v16 + 32) & ~v16;
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = v15;
    *(_QWORD *)(v18 + 24) = v2;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + v17, (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
    aBlock[4] = sub_23DBDF76C;
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_23DBDDB90;
    aBlock[3] = &block_descriptor_6;
    v19 = _Block_copy(aBlock);
    v20 = v2;
    sub_23DC2A010();
    v29 = MEMORY[0x24BEE4AF8];
    v21 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
    sub_23DBB2CB0(&qword_25431F258, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    sub_23DBB89B8(0, &qword_25431F280, v21, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
    sub_23DBDDBCC();
    v22 = v28;
    sub_23DC2A538();
    v23 = v24;
    MEMORY[0x24263DAF8](0, v10, v22, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v5);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
    return swift_release();
  }
  return result;
}

uint64_t sub_23DBDE534(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t j;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = a1;
  v9 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_17;
  sub_23DC2A628();
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        MEMORY[0x24263DC24](i, v1);
        v4 = i + 1;
        if (__OFADD__(i, 1))
          break;
        sub_23DBDE148();
        if (!swift_dynamicCastClass())
          goto LABEL_14;
        sub_23DC2A604();
        sub_23DC2A634();
        sub_23DC2A640();
        sub_23DC2A610();
        if (v4 == v2)
          return v9;
      }
      __break(1u);
    }
    else
    {
      for (j = 0; ; ++j)
      {
        v6 = j + 1;
        if (__OFADD__(j, 1))
          break;
        sub_23DBDE148();
        swift_unknownObjectRetain();
        v7 = swift_dynamicCastClass();
        if (!v7)
        {
LABEL_14:
          swift_unknownObjectRelease();
          swift_release();
          return 0;
        }
        v1 = v7;
        sub_23DC2A604();
        sub_23DC2A634();
        sub_23DC2A640();
        sub_23DC2A610();
        if (v6 == v2)
          return v9;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    sub_23DC2A6A0();
    swift_bridgeObjectRelease();
    sub_23DC2A628();
    swift_bridgeObjectRetain();
    v2 = sub_23DC2A6A0();
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_23DBDE714(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SampleDaySummary;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t i;
  unint64_t v17;
  unint64_t v18;
  id *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  v7 = *(_QWORD *)(SampleDaySummary - 8);
  v8 = MEMORY[0x24BDAC7A8](SampleDaySummary);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - v11;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = sub_23DC2A6A0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v14 = MEMORY[0x24BEE4AF8];
  if (!v13)
  {
LABEL_15:
    *(_QWORD *)(a2 + OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery) = v14;
    swift_bridgeObjectRelease();
    return sub_23DBDD3C4();
  }
  v24 = MEMORY[0x24BEE4AF8];
  result = sub_23DBCCA30(0, v13 & ~(v13 >> 63), 0);
  if ((v13 & 0x8000000000000000) == 0)
  {
    v23 = a3;
    v14 = v24;
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v13; ++i)
      {
        MEMORY[0x24263DC24](i, a1);
        sub_23DC2A070();
        swift_unknownObjectRelease();
        v24 = v14;
        v18 = *(_QWORD *)(v14 + 16);
        v17 = *(_QWORD *)(v14 + 24);
        if (v18 >= v17 >> 1)
        {
          sub_23DBCCA30(v17 > 1, v18 + 1, 1);
          v14 = v24;
        }
        *(_QWORD *)(v14 + 16) = v18 + 1;
        sub_23DBDFBA8((uint64_t)v12, v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v18);
      }
    }
    else
    {
      v19 = (id *)(a1 + 32);
      do
      {
        v20 = *v19;
        sub_23DC2A070();

        v24 = v14;
        v22 = *(_QWORD *)(v14 + 16);
        v21 = *(_QWORD *)(v14 + 24);
        if (v22 >= v21 >> 1)
        {
          sub_23DBCCA30(v21 > 1, v22 + 1, 1);
          v14 = v24;
        }
        *(_QWORD *)(v14 + 16) = v22 + 1;
        sub_23DBDFBA8((uint64_t)v10, v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v22);
        ++v19;
        --v13;
      }
      while (v13);
    }
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

id TrainingLoadSummaryQuery.__allocating_init(queryDescriptors:)()
{
  objc_class *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_allocWithZone(v0);
  sub_23DBB2A2C(0, (unint64_t *)&qword_25431F2A0);
  v2 = (void *)sub_23DC2A340();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithQueryDescriptors_, v2);

  return v3;
}

void TrainingLoadSummaryQuery.init(queryDescriptors:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id TrainingLoadSummaryQuery.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_23DBDEBA8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23DBDECF0(a1, a2, a3, a4, (unint64_t *)&unk_256CE9DB0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB988]);
}

_QWORD *sub_23DBDEBBC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DBB2D74(0, &qword_256CE9DA8, MEMORY[0x24BEE1E08], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23DBDF3A4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23DBDECDC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23DBDECF0(a1, a2, a3, a4, &qword_256CE9DA0, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummaryCollection);
}

uint64_t sub_23DBDECF0(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_23DBB89B8(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_23DC2A688();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23DBDF99C(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *sub_23DBDEF0C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DBB2D74(0, (unint64_t *)&qword_256CE9D80, MEMORY[0x24BEE0D00], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23DBDF494(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_23DBDF02C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      sub_23DBB2D74(0, &qword_256CE9D88, (uint64_t)&type metadata for SleepingSampleDataTypeFeatureStatus.ConfigurationIssue, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_23DBDF584(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23DBDF138(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DBB2D74(0, qword_25431FA88, MEMORY[0x24BEE23D0], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_23DBDF8A8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23DBDF26C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23DBDECF0(a1, a2, a3, a4, (unint64_t *)&unk_256CE9D90, (uint64_t (*)(uint64_t))type metadata accessor for TrainingLoadSampleDaySummary);
}

_QWORD *sub_23DBDF280(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_23DBB2D74(0, &qword_256CE9D78, MEMORY[0x24BEE4AD8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x24BEE3598]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23DBDFAB4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23DBDF3A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

uint64_t sub_23DBDF494(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

char *sub_23DBDF584(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_23DC2A6DC();
  __break(1u);
  return result;
}

uint64_t sub_23DBDF668(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[40];
  _BYTE v6[40];
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_23DC2A400();
  v7 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      sub_23DBDFC2C(v4, (uint64_t)v5);
      sub_23DC11BF0((uint64_t)v6, (uint64_t)v5);
      sub_23DBB8914((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_23DBDF6F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23DC29E78();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_23DBDF76C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_23DC29E78() - 8) + 80);
  return sub_23DBDE714(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_23DBDF79C()
{
  return type metadata accessor for TrainingLoadSummaryQuery();
}

uint64_t type metadata accessor for TrainingLoadSummaryQuery()
{
  uint64_t result;

  result = qword_25431EA48;
  if (!qword_25431EA48)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DBDF7E0()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DBBFA18();
  if (v0 <= 0x3F)
  {
    sub_23DC29F80();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for TrainingLoadSummaryQuery()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TrainingLoadSummaryQuery.__allocating_init(morningIndexRange:gregorianCalendar:typeOfDataRequested:continueAfterInitialResults:resultsHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_23DBDF8A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

uint64_t sub_23DBDF99C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

uint64_t sub_23DBDFAB4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

uint64_t sub_23DBDFBA8(uint64_t a1, uint64_t a2)
{
  uint64_t SampleDaySummary;

  SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(SampleDaySummary - 8) + 32))(a2, a1, SampleDaySummary);
  return a2;
}

uint64_t sub_23DBDFBEC()
{
  return objectdestroyTm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_23DBDFBF8()
{
  return sub_23DBDFC00(0);
}

uint64_t sub_23DBDFC00(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v1 + 16))(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_23DBDFC2C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t dispatch thunk of SleepingSampleDaySummaryProtocol.morningIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SleepingSampleDaySummaryProtocol.latestSampleEnd.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t GregorianDayRange.init(dayIndexRange:gregorianCalendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  sub_23DBDFCD4(a1, a3);
  v5 = a3 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v6 = sub_23DC29F80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a2, v6);
}

uint64_t sub_23DBDFCD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBB9590();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for GregorianDayRange()
{
  uint64_t result;

  result = qword_25431FAB8;
  if (!qword_25431FAB8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t GregorianDayRange.dayIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DBB2B6C(v1, a1, (uint64_t (*)(_QWORD))sub_23DBB9590);
}

uint64_t GregorianDayRange.dayIndexRange.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23DBE124C(a1, v1);
}

uint64_t (*GregorianDayRange.dayIndexRange.modify())()
{
  return nullsub_1;
}

uint64_t GregorianDayRange.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v4 = sub_23DC29F80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t GregorianDayRange.gregorianCalendar.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v4 = sub_23DC29F80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*GregorianDayRange.gregorianCalendar.modify())()
{
  type metadata accessor for GregorianDayRange();
  return nullsub_1;
}

unint64_t GregorianDayRange.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD v5[2];
  unint64_t v6;
  unint64_t v7;

  v0 = sub_23DC29FA4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = 0;
  v7 = 0xE000000000000000;
  sub_23DC2A5A4();
  swift_bridgeObjectRelease();
  v6 = 0xD000000000000021;
  v7 = 0x800000023DC327E0;
  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  sub_23DC2A154();
  sub_23DC2A670();
  sub_23DC2A2A4();
  sub_23DBB9590();
  sub_23DC2A670();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  type metadata accessor for GregorianDayRange();
  sub_23DC29F68();
  sub_23DC29F98();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  return v6;
}

uint64_t GregorianDayRange.hash(into:)()
{
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  sub_23DBB9590();
  sub_23DC2A190();
  type metadata accessor for GregorianDayRange();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  return sub_23DC2A190();
}

uint64_t sub_23DBE00C8()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0x7865646E49796164;
}

uint64_t sub_23DBE0114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBE1AEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DBE0138()
{
  sub_23DBE1290();
  return sub_23DC2A964();
}

uint64_t sub_23DBE0160()
{
  sub_23DBE1290();
  return sub_23DC2A970();
}

uint64_t GregorianDayRange.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  sub_23DBE12D4(0, &qword_256CE9E20, MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBE1290();
  sub_23DC2A8C8();
  v9[15] = 0;
  sub_23DBB9590();
  sub_23DBE1330(&qword_256CE9E30, &qword_25431EF38, MEMORY[0x24BDD2498], MEMORY[0x24BEE08E0]);
  sub_23DC2A7C0();
  if (!v1)
  {
    type metadata accessor for GregorianDayRange();
    v9[14] = 1;
    sub_23DC29F80();
    sub_23DBB2CB0(&qword_25431EEE8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF2F8]);
    sub_23DC2A7C0();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t GregorianDayRange.hashValue.getter()
{
  sub_23DC2A880();
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  sub_23DBB9590();
  sub_23DC2A190();
  type metadata accessor for GregorianDayRange();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  sub_23DC2A190();
  return sub_23DC2A8B0();
}

uint64_t GregorianDayRange.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  char v29;

  v22 = a2;
  v24 = sub_23DC29F80();
  v21 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB9590();
  v25 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v26 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBE12D4(0, &qword_256CE9E38, MEMORY[0x24BEE33E0]);
  v27 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v20 - v9;
  v11 = type metadata accessor for GregorianDayRange();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBE1290();
  sub_23DC2A8BC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = a1;
  v14 = v8;
  v15 = (uint64_t)v13;
  v17 = v23;
  v16 = v24;
  v29 = 0;
  sub_23DBE1330(&qword_256CE9E40, (unint64_t *)&unk_25431F270, MEMORY[0x24BDD24B8], MEMORY[0x24BEE0900]);
  v18 = (uint64_t)v26;
  sub_23DC2A760();
  sub_23DBDFCD4(v18, v15);
  v28 = 1;
  sub_23DBB2CB0(&qword_25431F208, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF310]);
  sub_23DC2A760();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v15 + *(int *)(v11 + 20), v17, v16);
  sub_23DBB2B6C(v15, v22, (uint64_t (*)(_QWORD))type metadata accessor for GregorianDayRange);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return sub_23DBB2BB0(v15, (uint64_t (*)(_QWORD))type metadata accessor for GregorianDayRange);
}

uint64_t sub_23DBE06EC()
{
  sub_23DC2A880();
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  sub_23DBB9590();
  sub_23DC2A190();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  sub_23DC2A190();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBE07D4()
{
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  sub_23DBB9590();
  sub_23DC2A190();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  return sub_23DC2A190();
}

uint64_t sub_23DBE08A4()
{
  sub_23DC2A880();
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  sub_23DBB9590();
  sub_23DC2A190();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  sub_23DC2A190();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBE0988@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GregorianDayRange.init(from:)(a1, a2);
}

uint64_t sub_23DBE099C(_QWORD *a1)
{
  return GregorianDayRange.encode(to:)(a1);
}

uint64_t static GregorianDayRange.previousWeek(through:gregorianCalendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;

  v17 = a1;
  v18 = a3;
  v4 = sub_23DC29F80();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23DC29E48();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23DC2A154();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v17, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  sub_23DC2A10C();
  static GregorianDayRange.previousWeek(through:gregorianCalendar:)((uint64_t)v15, a2, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t);
  char *v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;

  v37 = a2;
  v38 = a3;
  sub_23DBC2A3C();
  v5 = v4;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v35 - v9;
  sub_23DBB9590();
  v12 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23DC2A154();
  v16 = *(_QWORD **)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v35 - v20;
  sub_23DC2A0DC();
  sub_23DC2A0F4();
  v22 = v19;
  v23 = a1;
  v36 = (void (*)(char *, uint64_t))v16[1];
  v36(v22, v15);
  sub_23DBB2CB0((unint64_t *)&qword_25431FAC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
  result = sub_23DC2A1C0();
  if ((result & 1) != 0)
  {
    v35 = v12;
    v25 = v5;
    v26 = &v10[*(int *)(v5 + 48)];
    v27 = (void (*)(char *, char *, uint64_t))v16[4];
    v27(v10, v21, v15);
    v28 = (void (*)(char *, uint64_t, uint64_t))v16[2];
    v28(v26, v23, v15);
    v29 = &v8[*(int *)(v25 + 48)];
    v28(v8, (uint64_t)v10, v15);
    v28(v29, (uint64_t)v26, v15);
    v27(v14, v8, v15);
    v30 = v36;
    v36(v29, v15);
    v31 = &v8[*(int *)(v25 + 48)];
    v27(v8, v10, v15);
    v27(v31, v26, v15);
    v27(&v14[*(int *)(v35 + 36)], v31, v15);
    v30(v8, v15);
    v32 = v38;
    sub_23DBDFCD4((uint64_t)v14, v38);
    v33 = v32 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
    v34 = sub_23DC29F80();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v33, v37, v34);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static GregorianDayRange.today(containing:gregorianCalendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v41 = a1;
  v42 = a2;
  v40 = a3;
  sub_23DBC2A3C();
  v39 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v36 = (char *)&v35 - v7;
  sub_23DBB9590();
  v37 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v38 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DC29F80();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23DC29E48();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23DC2A154();
  v19 = *(_QWORD **)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v41, v14);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v41 = v10;
  v22(v13, v42, v10);
  sub_23DC2A10C();
  sub_23DBB2CB0((unint64_t *)&qword_25431FAC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
  result = sub_23DC2A1C0();
  if ((result & 1) != 0)
  {
    v24 = v39;
    v25 = v36;
    v26 = &v36[*(int *)(v39 + 48)];
    v27 = (void (*)(char *, char *, uint64_t))v19[2];
    v27(v36, v21, v18);
    v28 = (void (*)(char *, char *, uint64_t))v19[4];
    v28(v26, v21, v18);
    v29 = &v6[*(int *)(v24 + 48)];
    v27(v6, v25, v18);
    v27(v29, v26, v18);
    v30 = (uint64_t)v38;
    v28(v38, v6, v18);
    v31 = (void (*)(char *, uint64_t))v19[1];
    v31(v29, v18);
    v32 = &v6[*(int *)(v24 + 48)];
    v28(v6, v25, v18);
    v28(v32, v26, v18);
    v28((char *)(v30 + *(int *)(v37 + 36)), v32, v18);
    v31(v6, v18);
    v33 = v40;
    sub_23DBDFCD4(v30, v40);
    v34 = type metadata accessor for GregorianDayRange();
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v22)(v33 + *(int *)(v34 + 20), v42, v41);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t GregorianDayRange.sleepDayInterval.getter()
{
  type metadata accessor for GregorianDayRange();
  return sub_23DC2A1CC();
}

uint64_t _s13HealthBalance17GregorianDayRangeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v15;

  sub_23DBB9590();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v15 - v8;
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9818, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B0]);
  v10 = sub_23DC2A1F0();
  sub_23DBB2B6C(a1, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DBB9590);
  sub_23DBB2B6C(a2, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_23DBB9590);
  if ((v10 & 1) == 0)
  {
    sub_23DBB2BB0((uint64_t)v7, (uint64_t (*)(_QWORD))sub_23DBB9590);
    sub_23DBB2BB0((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DBB9590);
    goto LABEL_5;
  }
  v11 = sub_23DC2A1F0();
  sub_23DBB2BB0((uint64_t)v7, (uint64_t (*)(_QWORD))sub_23DBB9590);
  sub_23DBB2BB0((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DBB9590);
  if ((v11 & 1) == 0)
  {
LABEL_5:
    v13 = 0;
    return v13 & 1;
  }
  v12 = type metadata accessor for GregorianDayRange();
  v13 = MEMORY[0x24263D5AC](a1 + *(int *)(v12 + 20), a2 + *(int *)(v12 + 20));
  return v13 & 1;
}

uint64_t sub_23DBE124C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBB9590();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_23DBE1290()
{
  unint64_t result;

  result = qword_256CE9E28;
  if (!qword_256CE9E28)
  {
    result = MEMORY[0x24263E440](&unk_23DC2EC18, &type metadata for GregorianDayRange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9E28);
  }
  return result;
}

void sub_23DBE12D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DBE1290();
    v7 = a3(a1, &type metadata for GregorianDayRange.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DBE1330(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_23DBB9590();
    v10 = v9;
    v11 = sub_23DBB2CB0(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], a3);
    result = MEMORY[0x24263E440](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DBE13B0()
{
  return sub_23DBB2CB0(&qword_256CE9E48, (uint64_t (*)(uint64_t))type metadata accessor for GregorianDayRange, (uint64_t)&protocol conformance descriptor for GregorianDayRange);
}

uint64_t *initializeBufferWithCopyOfBuffer for GregorianDayRange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DC2A154();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_23DBB9590();
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_23DC29F80();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for GregorianDayRange(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_23DC2A154();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  sub_23DBB9590();
  v5(a1 + *(int *)(v6 + 36), v4);
  v7 = a1 + *(int *)(a2 + 20);
  v8 = sub_23DC29F80();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for GregorianDayRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_23DBB9590();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  return a1;
}

uint64_t assignWithCopy for GregorianDayRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_23DBB9590();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t initializeWithTake for GregorianDayRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_23DBB9590();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for GregorianDayRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_23DBB9590();
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for GregorianDayRange()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBE17C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  sub_23DBB9590();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_23DC29F80();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for GregorianDayRange()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBE1848(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  sub_23DBB9590();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_23DC29F80();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23DBE18C4()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DBB9590();
  if (v0 <= 0x3F)
  {
    sub_23DC29F80();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for GregorianDayRange.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DBE1994 + 4 * byte_23DC2EA45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DBE19C8 + 4 * asc_23DC2EA40[v4]))();
}

uint64_t sub_23DBE19C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBE19D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBE19D8);
  return result;
}

uint64_t sub_23DBE19E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBE19ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DBE19F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBE19F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GregorianDayRange.CodingKeys()
{
  return &type metadata for GregorianDayRange.CodingKeys;
}

unint64_t sub_23DBE1A18()
{
  unint64_t result;

  result = qword_256CE9E50;
  if (!qword_256CE9E50)
  {
    result = MEMORY[0x24263E440](&unk_23DC2EBF0, &type metadata for GregorianDayRange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9E50);
  }
  return result;
}

unint64_t sub_23DBE1A60()
{
  unint64_t result;

  result = qword_256CE9E58;
  if (!qword_256CE9E58)
  {
    result = MEMORY[0x24263E440](&unk_23DC2EB60, &type metadata for GregorianDayRange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9E58);
  }
  return result;
}

unint64_t sub_23DBE1AA8()
{
  unint64_t result;

  result = qword_256CE9E60;
  if (!qword_256CE9E60)
  {
    result = MEMORY[0x24263E440](&unk_23DC2EB88, &type metadata for GregorianDayRange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CE9E60);
  }
  return result;
}

uint64_t sub_23DBE1AEC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7865646E49796164 && a2 == 0xED000065676E6152;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023DC32310)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

id HKQuantityRange.init(celsiusChange:)(double a1, double a2)
{
  return sub_23DBE20D4((SEL *)&selRef__changeInDegreeCelsiusUnit, a1, a2);
}

id HKQuantityRange.init(durationBetween:and:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  void *v9;
  void *v10;
  id result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;

  v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v9 = (void *)objc_opt_self();
  v10 = (void *)objc_opt_self();
  result = objc_msgSend(v10, sel_minuteUnit);
  v12 = 60 * a1;
  if ((unsigned __int128)(a1 * (__int128)60) >> 64 != (60 * a1) >> 63)
  {
    __break(1u);
    goto LABEL_7;
  }
  v13 = __OFADD__(v12, a2);
  v14 = v12 + a2;
  if (v13)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v15 = result;
  v16 = objc_msgSend(v9, sel_quantityWithUnit_doubleValue_, result, (double)v14);

  result = objc_msgSend(v10, sel_minuteUnit);
  v17 = 60 * a3;
  if ((unsigned __int128)(a3 * (__int128)60) >> 64 != (60 * a3) >> 63)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v13 = __OFADD__(v17, a4);
  v18 = v17 + a4;
  if (!v13)
  {
    v19 = result;
    v20 = objc_msgSend(v9, sel_quantityWithUnit_doubleValue_, result, (double)v18);

    v21 = objc_msgSend(v8, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v16, v20, 1, 1);
    return v21;
  }
LABEL_9:
  __break(1u);
  return result;
}

id HKQuantityRange.init(durationBetween:and:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v12;
  void *v13;
  id result;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;

  v29 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v12 = (void *)objc_opt_self();
  v13 = (void *)objc_opt_self();
  result = objc_msgSend(v13, sel_secondUnit);
  if ((unsigned __int128)(a1 * (__int128)60) >> 64 != (60 * a1) >> 63)
  {
    __break(1u);
    goto LABEL_13;
  }
  v15 = 3600 * a1;
  if ((unsigned __int128)(60 * a1 * (__int128)60) >> 64 != (3600 * a1) >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v16 = 60 * a2;
  if ((unsigned __int128)(a2 * (__int128)60) >> 64 != (60 * a2) >> 63)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v17 = __OFADD__(v15, v16);
  v18 = v15 + v16;
  if (v17)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v17 = __OFADD__(v18, a3);
  v19 = v18 + a3;
  if (v17)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20 = result;
  v21 = objc_msgSend(v12, sel_quantityWithUnit_doubleValue_, result, (double)v19);

  result = objc_msgSend(v13, sel_secondUnit);
  if ((unsigned __int128)(a4 * (__int128)60) >> 64 != (60 * a4) >> 63)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v22 = 3600 * a4;
  if ((unsigned __int128)(60 * a4 * (__int128)60) >> 64 != (3600 * a4) >> 63)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v23 = 60 * a5;
  if ((unsigned __int128)(a5 * (__int128)60) >> 64 != (60 * a5) >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = __OFADD__(v22, v23);
  v24 = v22 + v23;
  if (v17)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v17 = __OFADD__(v24, a6);
  v25 = v24 + a6;
  if (!v17)
  {
    v26 = result;
    v27 = objc_msgSend(v12, sel_quantityWithUnit_doubleValue_, result, (double)v25);

    v28 = objc_msgSend(v29, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v21, v27, 1, 1);
    return v28;
  }
LABEL_21:
  __break(1u);
  return result;
}

id HKQuantityRange.init(perMinute:)(double a1, double a2)
{
  return sub_23DBE20D4((SEL *)&selRef__countPerMinuteUnit, a1, a2);
}

id HKQuantityRange.init(percent:)(double a1, double a2)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5 = (void *)objc_opt_self();
  v6 = (void *)objc_opt_self();
  v7 = objc_msgSend(v6, sel_percentUnit);
  v8 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v7, a1 / 100.0);

  v9 = objc_msgSend(v6, sel_percentUnit);
  v10 = objc_msgSend(v5, sel_quantityWithUnit_doubleValue_, v9, a2 / 100.0);

  v11 = objc_msgSend(v4, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v8, v10, 1, 1);
  return v11;
}

id HKQuantityRange.init(s:)(double a1, double a2)
{
  return sub_23DBE20D4((SEL *)&selRef_secondUnit, a1, a2);
}

id sub_23DBE20D4(SEL *a1, double a2, double a3)
{
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v7 = (void *)objc_opt_self();
  v8 = (void *)objc_opt_self();
  v9 = objc_msgSend(v8, *a1);
  v10 = objc_msgSend(v7, sel_quantityWithUnit_doubleValue_, v9, a2);

  v11 = objc_msgSend(v8, *a1);
  v12 = objc_msgSend(v7, sel_quantityWithUnit_doubleValue_, v11, a3);

  v13 = objc_msgSend(v6, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v10, v12, 1, 1);
  return v13;
}

uint64_t storeEnumTagSinglePayload for PlatformSpecificAppBundleProvider(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DBE223C + 4 * byte_23DC2EC75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DBE2270 + 4 * byte_23DC2EC70[v4]))();
}

uint64_t sub_23DBE2270(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBE2278(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBE2280);
  return result;
}

uint64_t sub_23DBE228C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBE2294);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DBE2298(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBE22A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PlatformSpecificAppBundleProvider()
{
  return &type metadata for PlatformSpecificAppBundleProvider;
}

uint64_t SleepingSampleBaselineComparisonCollection.mostRecentSampleDate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleBaselineComparisonCollection.enclosingSampleDateInterval.getter(a1, a2, (uint64_t)v8);
  v9 = sub_23DC29BF0();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_23DBB2BB0((uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DBD4810);
    v11 = sub_23DC29E48();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a3, 1, 1, v11);
  }
  else
  {
    sub_23DC29BC0();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v13 = sub_23DC29E48();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a3, 0, 1, v13);
  }
}

uint64_t SleepingSampleBaselineComparisonCollection.enclosingSampleDateInterval.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  void (*v52)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  unsigned int v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  void (*v79)(char *, char *, uint64_t);
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(uint64_t, uint64_t, uint64_t);
  int v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t, uint64_t);
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  void (*v114)(char *, uint64_t);
  _QWORD v116[2];
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  _QWORD *v134;
  void (*v135)(char *, uint64_t);
  void (*v136)(char *, char *, uint64_t);
  uint64_t v137;
  unsigned int (*v138)(uint64_t, uint64_t, uint64_t);
  void (*v139)(char *, char *, uint64_t);
  uint64_t v140;
  void (*v141)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;

  v122 = a3;
  v5 = sub_23DC29E48();
  v6 = *(_QWORD **)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v119 = (char *)v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v118 = (char *)v116 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v117 = (char *)v116 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v121 = (char *)v116 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v132 = (char *)v116 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v124 = (char *)v116 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v131 = (char *)v116 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v123 = (char *)v116 - v21;
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v22);
  v133 = (char *)v116 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x24BDAC7A8](v144);
  v143 = (uint64_t)v116 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_23DC29BF0();
  v25 = *(_QWORD *)(v150 - 8);
  v26 = MEMORY[0x24BDAC7A8](v150);
  v130 = (char *)v116 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v26);
  v129 = (char *)v116 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v149 = (char *)v116 - v30;
  v31 = type metadata accessor for SleepingSampleBaselineComparison();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v142 = (uint64_t)v116 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  v35 = MEMORY[0x24BDAC7A8](v34);
  v120 = (char *)v116 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x24BDAC7A8](v35);
  v145 = (char *)v116 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v128 = (uint64_t)v116 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  v127 = (char *)v116 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v126 = (uint64_t)v116 - v44;
  v45 = MEMORY[0x24BDAC7A8](v43);
  v125 = (char *)v116 - v46;
  v47 = MEMORY[0x24BDAC7A8](v45);
  v49 = (char *)v116 - v48;
  MEMORY[0x24BDAC7A8](v47);
  v51 = (char *)v116 - v50;
  v52 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v6[7];
  v52((char *)v116 - v50, 1, 1, v5);
  v148 = v49;
  v151 = v5;
  v141 = v52;
  v52(v49, 1, 1, v5);
  v53 = a1;
  v54 = (uint64_t)v51;
  v55 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(v53, a2);
  v56 = *(_QWORD *)(v55 + 16);
  v146 = v51;
  v147 = v25;
  if (v56)
  {
    v57 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    v116[1] = v55;
    v58 = v55 + v57;
    v140 = *(_QWORD *)(v32 + 72);
    v134 = v6;
    v59 = (uint64_t)v133;
    do
    {
      v61 = v6;
      v62 = v142;
      sub_23DBB2B6C(v58, v142, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      v63 = v143;
      sub_23DBB2B6C(v62, v143, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
      sub_23DBB2BB0(v62, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      sub_23DBB2B6C(v63 + *(int *)(v144 + 28), v59, (uint64_t (*)(_QWORD))sub_23DBD4810);
      sub_23DBB2BB0(v63, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
      v64 = v147;
      v65 = v150;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v59, 1, v150) == 1)
      {
        sub_23DBB2BB0(v59, (uint64_t (*)(_QWORD))sub_23DBD4810);
        v60 = (uint64_t)v145;
        v6 = v61;
      }
      else
      {
        v66 = v54;
        v67 = v149;
        (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v149, v59, v65);
        v68 = v126;
        sub_23DBB2B6C(v66, v126, (uint64_t (*)(_QWORD))sub_23DBD482C);
        v69 = v129;
        v139 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
        v139(v129, v67, v65);
        v70 = v61;
        v71 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v61[6];
        v72 = v71(v68, 1, v151);
        v138 = v71;
        if (v72 == 1)
        {
          v73 = v123;
          sub_23DC29BE4();
          v135 = *(void (**)(char *, uint64_t))(v64 + 8);
          v135(v69, v65);
          sub_23DBB2BB0(v68, (uint64_t (*)(_QWORD))sub_23DBD482C);
        }
        else
        {
          v135 = *(void (**)(char *, uint64_t))(v64 + 8);
          v135(v69, v65);
          v73 = v123;
          ((void (*)(char *, uint64_t, uint64_t))v70[4])(v123, v68, v151);
        }
        v74 = v131;
        v75 = v149;
        sub_23DC29BE4();
        v76 = sub_23DBB2CB0((unint64_t *)&qword_25431F8E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
        v77 = v151;
        v137 = v76;
        v78 = sub_23DC2A1A8();
        v79 = (void (*)(char *, char *, uint64_t))v70[2];
        if ((v78 & 1) != 0)
          v80 = v74;
        else
          v80 = v73;
        v81 = (uint64_t)v125;
        v136 = (void (*)(char *, char *, uint64_t))v70[2];
        v79(v125, v80, v77);
        v82 = (void (*)(char *, uint64_t))v70[1];
        v82(v74, v77);
        v82(v73, v77);
        v83 = (uint64_t)v146;
        sub_23DBB2BB0((uint64_t)v146, (uint64_t (*)(_QWORD))sub_23DBD482C);
        v141((char *)v81, 0, 1, v77);
        sub_23DBBCEB0(v81, v83, (uint64_t (*)(_QWORD))sub_23DBD482C);
        v84 = v128;
        sub_23DBB2B6C((uint64_t)v148, v128, (uint64_t (*)(_QWORD))sub_23DBD482C);
        v85 = v130;
        v139(v130, v75, v65);
        if (v138(v84, 1, v77) == 1)
        {
          v86 = v124;
          sub_23DC29BC0();
          v87 = v65;
          v88 = v151;
          v89 = v135;
          v135(v85, v87);
          sub_23DBB2BB0(v84, (uint64_t (*)(_QWORD))sub_23DBD482C);
        }
        else
        {
          v90 = v65;
          v88 = v151;
          v89 = v135;
          v135(v85, v90);
          v86 = v124;
          ((void (*)(char *, uint64_t, uint64_t))v134[4])(v124, v84, v88);
        }
        v91 = v132;
        v92 = v149;
        sub_23DC29BC0();
        if ((sub_23DC2A1B4() & 1) != 0)
          v93 = v91;
        else
          v93 = v86;
        v94 = (uint64_t)v127;
        v136(v127, v93, v88);
        v82(v91, v88);
        v82(v86, v88);
        v89(v92, v150);
        v95 = (uint64_t)v148;
        sub_23DBB2BB0((uint64_t)v148, (uint64_t (*)(_QWORD))sub_23DBD482C);
        v141((char *)v94, 0, 1, v88);
        sub_23DBBCEB0(v94, v95, (uint64_t (*)(_QWORD))sub_23DBD482C);
        v59 = (uint64_t)v133;
        v6 = v134;
        v60 = (uint64_t)v145;
        v54 = (uint64_t)v146;
      }
      v58 += v140;
      --v56;
    }
    while (v56);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v60 = (uint64_t)v145;
  }
  sub_23DBB2B6C(v54, v60, (uint64_t (*)(_QWORD))sub_23DBD482C);
  v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v6[6];
  v97 = v96(v60, 1, v151);
  v98 = v122;
  v99 = v121;
  v100 = (uint64_t)v120;
  v101 = (uint64_t)v148;
  if (v97 == 1)
  {
    v100 = v60;
    v102 = v150;
  }
  else
  {
    v103 = v60;
    v104 = (void (*)(char *, uint64_t, uint64_t))v6[4];
    v105 = v151;
    v104(v121, v103, v151);
    sub_23DBB2B6C(v101, v100, (uint64_t (*)(_QWORD))sub_23DBD482C);
    v106 = v96(v100, 1, v105);
    v102 = v150;
    if (v106 != 1)
    {
      v111 = v117;
      v112 = v151;
      v104(v117, v100, v151);
      v113 = (void (*)(char *, char *, uint64_t))v6[2];
      v113(v118, v99, v112);
      v113(v119, v111, v112);
      v110 = v147;
      sub_23DC29BCC();
      v114 = (void (*)(char *, uint64_t))v6[1];
      v109 = (uint64_t)v148;
      v114(v111, v112);
      v114(v99, v112);
      v107 = 0;
      v108 = (uint64_t)v146;
      goto LABEL_27;
    }
    ((void (*)(char *, uint64_t))v6[1])(v99, v151);
  }
  sub_23DBB2BB0(v101, (uint64_t (*)(_QWORD))sub_23DBD482C);
  v107 = 1;
  v108 = v100;
  v109 = (uint64_t)v146;
  v110 = v147;
LABEL_27:
  sub_23DBB2BB0(v109, (uint64_t (*)(_QWORD))sub_23DBD482C);
  sub_23DBB2BB0(v108, (uint64_t (*)(_QWORD))sub_23DBD482C);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56))(v98, v107, 1, v102);
}

uint64_t SleepingSampleBaselineComparisonCollection.latestSampleCreationDate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(void);
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  void (*v76)(void);
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v69 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v68 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x24BDAC7A8](v82);
  v79 = (uint64_t)v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23DC29E48();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v75 = (char *)v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v73 = (char *)v63 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v81 = (char *)v63 - v15;
  v16 = type metadata accessor for SleepingSampleBaselineComparison();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v66 = (uint64_t)v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v80 = (uint64_t)v63 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v74 = (char *)v63 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)v63 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v30 = v10;
  v31 = *(void (**)(void))(v10 + 56);
  v83 = v9;
  v84 = (uint64_t)v63 - v32;
  v76 = v31;
  v31();
  v33 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  v67 = v3;
  v70 = a1;
  v65 = a2;
  v34 = v33(a1, a2);
  v35 = *(_QWORD *)(v34 + 16);
  if (v35)
  {
    v64 = a3;
    v36 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v63[1] = v34;
    v37 = v34 + v36;
    v78 = *(_QWORD *)(v17 + 72);
    v38 = v30;
    v71 = v19;
    v72 = v29;
    do
    {
      sub_23DBB2B6C(v37, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      v39 = v79;
      sub_23DBB2B6C((uint64_t)v19, v79, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
      sub_23DBB2BB0((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      sub_23DBB2B6C(v39 + *(int *)(v82 + 32), (uint64_t)v29, (uint64_t (*)(_QWORD))sub_23DBD482C);
      sub_23DBB2BB0(v39, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
      v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      v41 = v83;
      if (v40((uint64_t)v29, 1, v83) == 1)
      {
        sub_23DBB2BB0((uint64_t)v29, (uint64_t (*)(_QWORD))sub_23DBD482C);
      }
      else
      {
        v42 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
        v43 = v81;
        v42(v81, v29, v41);
        sub_23DBB2B6C(v84, v80, (uint64_t (*)(_QWORD))sub_23DBD482C);
        v44 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
        v45 = v75;
        v46 = v43;
        v47 = v80;
        v44(v75, v46, v41);
        v48 = v40(v47, 1, v41);
        v77 = v44;
        if (v48 == 1)
        {
          v49 = v73;
          v42(v73, v45, v41);
          sub_23DBB2BB0(v47, (uint64_t (*)(_QWORD))sub_23DBD482C);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v38 + 8))(v45, v41);
          v49 = v73;
          v42(v73, (char *)v47, v41);
        }
        v50 = v41;
        v19 = v71;
        sub_23DBB2CB0((unint64_t *)&qword_25431F8E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
        v51 = v81;
        if ((sub_23DC2A1B4() & 1) != 0)
          v52 = v51;
        else
          v52 = v49;
        v53 = (uint64_t)v74;
        v77(v74, v52, v41);
        v54 = *(void (**)(char *, uint64_t))(v38 + 8);
        v54(v49, v50);
        v54(v51, v50);
        v55 = v84;
        sub_23DBB2BB0(v84, (uint64_t (*)(_QWORD))sub_23DBD482C);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v76)(v53, 0, 1, v50);
        sub_23DBBCEB0(v53, v55, (uint64_t (*)(_QWORD))sub_23DBD482C);
        v29 = v72;
      }
      v37 += v78;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
    a3 = v64;
  }
  else
  {
    swift_bridgeObjectRelease();
    v38 = v10;
  }
  v56 = v84;
  v57 = v66;
  sub_23DBB2B6C(v84, v66, (uint64_t (*)(_QWORD))sub_23DBD482C);
  v58 = v68;
  v59 = v69;
  v60 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v68, v67, v70);
  v61 = v83;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v57, 1, v83) == 1)
  {
    SleepingSampleBaselineComparisonCollection.mostRecentSampleDate.getter(v60, v65, a3);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
    sub_23DBB2BB0(v56, (uint64_t (*)(_QWORD))sub_23DBD482C);
    return sub_23DBB2BB0(v57, (uint64_t (*)(_QWORD))sub_23DBD482C);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
    sub_23DBB2BB0(v56, (uint64_t (*)(_QWORD))sub_23DBD482C);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(a3, v57, v61);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v76)(a3, 0, 1, v61);
  }
}

BOOL SleepingSampleBaselineComparisonCollection.isWarmupDay.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)();
  void (*v29)();
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)();
  uint64_t v37;
  int v38;
  uint64_t (*v39)();
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v4);
  v52 = (uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD9904(0);
  MEMORY[0x24BDAC7A8](v6);
  v50 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for SleepingSampleBaselineComparison();
  v8 = *(_QWORD *)(v49 - 8);
  v9 = MEMORY[0x24BDAC7A8](v49);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v46 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v46 - v15;
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  v18 = v17(a1, a2);
  v19 = *(_QWORD *)(v18 + 16);
  v53 = v8;
  if (v19)
  {
    v46 = v17;
    v47 = a1;
    v48 = a2;
    v20 = v18 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v21 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_23DBB2B6C(v20, (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      v22 = v16[*(int *)(type metadata accessor for SleepingSampleAggregate() + 36)];
      sub_23DBB2BB0((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      if (v22 >= 3)
        break;
      v20 += v21;
      if (!--v19)
      {
        swift_bridgeObjectRelease();
        v23 = 0;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    v23 = 1;
LABEL_8:
    a1 = v47;
    a2 = v48;
    v17 = v46;
  }
  else
  {
    swift_bridgeObjectRelease();
    v23 = 0;
  }
  v24 = v17(a1, a2);
  v25 = *(_QWORD *)(v24 + 16);
  if (v25)
  {
    LODWORD(v48) = v23;
    v26 = *(unsigned __int8 *)(v53 + 80);
    v47 = v24;
    v27 = v24 + ((v26 + 32) & ~v26);
    v53 = *(_QWORD *)(v53 + 72);
    v28 = type metadata accessor for SleepingSampleBaselineComparison;
    v29 = sub_23DBB29B8;
    v51 = v14;
    while (1)
    {
      sub_23DBB2B6C(v27, (uint64_t)v14, (uint64_t (*)(_QWORD))v28);
      v30 = type metadata accessor for SleepingSampleAggregate();
      v31 = v14[*(int *)(v30 + 36)];
      if (v31 < 3)
        break;
      if (v31 == 3)
      {
        sub_23DBB2B6C((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))v28);
      }
      else
      {
        v42 = v50;
        sub_23DBB2B6C((uint64_t)&v14[*(int *)(v49 + 24)], v50, (uint64_t (*)(_QWORD))sub_23DBD9904);
        v43 = type metadata accessor for SleepingSampleBaseline();
        v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v42, 1, v43);
        sub_23DBB2BB0(v42, (uint64_t (*)(_QWORD))sub_23DBD9904);
        sub_23DBB2B6C((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))v28);
        if (v44 != 1)
          goto LABEL_16;
      }
      sub_23DBB2BB0((uint64_t)v11, (uint64_t (*)(_QWORD))v28);
      sub_23DBB2BB0((uint64_t)v14, (uint64_t (*)(_QWORD))v28);
LABEL_13:
      v27 += v53;
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        return (v48 & 1) != 0;
      }
    }
    sub_23DBB2B6C((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))v28);
LABEL_16:
    v32 = (uint64_t)&v11[*(int *)(v30 + 24)];
    v33 = v52;
    sub_23DBB2B6C(v32, v52, (uint64_t (*)(_QWORD))v29);
    sub_23DBC6894(0);
    v35 = v34;
    v36 = v29;
    v37 = *(_QWORD *)(v34 - 8);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v33, 1, v34);
    if (v38 == 1)
    {
      sub_23DBB2BB0(v33, (uint64_t (*)(_QWORD))v36);
    }
    else
    {
      v39 = v28;
      v40 = v11;
      v41 = (void *)sub_23DC2A040();
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v33, v35);

      v11 = v40;
      v28 = v39;
      v14 = v51;
    }
    v29 = v36;
    sub_23DBB2BB0((uint64_t)v11, (uint64_t (*)(_QWORD))v28);
    sub_23DBB2BB0((uint64_t)v14, (uint64_t (*)(_QWORD))v28);
    if (v38 != 1)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  return (v23 & 1) != 0;
}

BOOL SleepingSampleBaselineComparisonCollection.isWarmupPeriod.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[2];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  SleepingSampleBaselineComparisonCollection.warmupProgress.getter(v6, v9, v12);
  v10 = v12[0];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  if (v10 < 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    return 0;
  }
  else
  {
    SleepingSampleBaselineComparisonCollection.warmupProgress.getter(a1, a2, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
    return v12[0] < v12[1];
  }
}

uint64_t SleepingSampleBaselineComparisonCollection.warmupProgress.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = SleepingSampleBaselineComparisonCollection.warmupDaysRemaining.getter(a1, a2);
  result = SleepingSampleBaselineComparisonCollection.warmupDaysRequired.getter(a1, a2);
  if (__OFSUB__(result, v6))
  {
    __break(1u);
  }
  else
  {
    *a3 = (result - v6) & ~((result - v6) >> 63);
    a3[1] = result;
  }
  return result;
}

BOOL SleepingSampleBaselineComparisonCollection.isFirstDayAfterWarmup.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  int EnumCaseMultiPayload;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v54 = type metadata accessor for SleepingSampleBaselineAvailability();
  v5 = MEMORY[0x24BDAC7A8](v54);
  v56 = (uint64_t)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v51 = (uint64_t)&v45 - v7;
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for SleepingSampleBaselineComparison();
  v11 = *(_QWORD *)(v53 - 8);
  v12 = MEMORY[0x24BDAC7A8](v53);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v55 = (uint64_t)&v45 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v45 - v17;
  v19 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  v20 = v19(a1, a2);
  v21 = *(_QWORD *)(v20 + 16);
  v49 = v11;
  if (v21)
  {
    v45 = v19;
    v46 = a1;
    v47 = v2;
    v48 = a2;
    v22 = v20 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v52 = *(_QWORD *)(v11 + 72);
    v23 = v20;
    v50 = v14;
    do
    {
      sub_23DBB2B6C(v22, (uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      v25 = type metadata accessor for SleepingSampleAggregate();
      sub_23DBB2B6C((uint64_t)&v18[*(int *)(v25 + 24)], (uint64_t)v10, (uint64_t (*)(_QWORD))sub_23DBB29B8);
      sub_23DBC6894(0);
      v27 = v26;
      v28 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v10, 1, v26) == 1)
      {
        sub_23DBB2BB0((uint64_t)v10, (uint64_t (*)(_QWORD))sub_23DBB29B8);
        v24 = v55;
        sub_23DBB2B6C((uint64_t)v18, v55, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
        sub_23DBB2BB0(v24, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
        sub_23DBB2BB0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      }
      else
      {
        v29 = v23;
        v30 = (void *)sub_23DC2A040();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v27);

        v31 = v55;
        sub_23DBB2B6C((uint64_t)v18, v55, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
        sub_23DBB2B6C(v31 + *(int *)(v53 + 20), v51, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
            sub_23DBBFA90();
          else
            sub_23DBBFAFC();
          v34 = *(_QWORD *)(v51 + *(int *)(v33 + 48));
          sub_23DBB2BB0(v51, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        }
        else
        {
          v34 = 0;
        }
        sub_23DBB2BB0(v55, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
        sub_23DBB2BB0((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
        v35 = v34 == 6;
        v23 = v29;
        v14 = v50;
        if (v35)
        {
          swift_bridgeObjectRelease();
          v36 = 1;
          goto LABEL_16;
        }
      }
      v22 += v52;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    v36 = 0;
LABEL_16:
    v37 = v45(v46, v48);
  }
  else
  {
    swift_bridgeObjectRelease();
    v36 = 0;
    v37 = v19(a1, a2);
  }
  v38 = *(_QWORD *)(v37 + 16);
  if (v38)
  {
    v39 = v37 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
    v40 = *(_QWORD *)(v49 + 72);
    do
    {
      sub_23DBB2B6C(v39, (uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      sub_23DBB2B6C((uint64_t)&v14[*(int *)(v53 + 20)], v56, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
      v41 = swift_getEnumCaseMultiPayload();
      if (v41 == 2)
      {
        sub_23DBBFAFC();
      }
      else
      {
        if (v41 != 1)
        {
          sub_23DBB2BB0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
          goto LABEL_21;
        }
        sub_23DBBFA90();
      }
      v43 = *(_QWORD *)(v56 + *(int *)(v42 + 48));
      sub_23DBB2BB0(v56, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      sub_23DBB2BB0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      if (v43 > 6)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
LABEL_21:
      v39 += v40;
      --v38;
    }
    while (v38);
  }
  swift_bridgeObjectRelease();
  return (v36 & 1) != 0;
}

uint64_t SleepingSampleBaselineComparisonCollection.warmupDaysRequired.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  int EnumCaseMultiPayload;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;

  v4 = type metadata accessor for SleepingSampleBaselineAvailability();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v58 = (uint64_t *)((char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = MEMORY[0x24BDAC7A8](v5);
  v63 = (uint64_t)&v56 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v65 = (uint64_t *)((char *)&v56 - v10);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v56 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (uint64_t *)((char *)&v56 - v14);
  v16 = type metadata accessor for SleepingSampleBaselineComparison();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v56 - v21;
  sub_23DBCE084(0);
  MEMORY[0x24BDAC7A8](v23);
  v57 = (uint64_t)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  v26 = v25;
  v27 = *(_QWORD *)(v25 + 16);
  if (v27)
  {
    v62 = v25 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    result = sub_23DBB2B6C(v62, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    if (v27 != 1)
    {
      v35 = 1;
      v64 = v16;
      v59 = v27;
      v60 = v26;
      v61 = v17;
      while (v35 < *(_QWORD *)(v26 + 16))
      {
        sub_23DBB2B6C(v62 + *(_QWORD *)(v17 + 72) * v35, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
        v36 = type metadata accessor for SleepingSampleAggregate();
        v37 = v20[*(int *)(v36 + 36)] < 3u;
        v38 = (uint64_t)&v20[*(int *)(v16 + 20)];
        sub_23DBB2B6C(v38, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            sub_23DBBFA90();
            v41 = *(uint64_t *)((char *)v15 + *(int *)(v40 + 64));
            sub_23DBB2BB0((uint64_t)v15, (uint64_t (*)(_QWORD))sub_23DBBFA18);
          }
          else
          {
            sub_23DBB2BB0((uint64_t)v15, (uint64_t (*)(_QWORD))sub_23DBBFA18);
            v41 = 6;
          }
        }
        else
        {
          v41 = *v15;
        }
        sub_23DBB2B6C(v38, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
        result = swift_getEnumCaseMultiPayload();
        if ((_DWORD)result)
        {
          if ((_DWORD)result == 1)
            sub_23DBBFA90();
          else
            sub_23DBBFAFC();
          v43 = *(_QWORD *)&v13[*(int *)(v42 + 48)];
          result = sub_23DBB2BB0((uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        }
        else
        {
          v43 = 0;
        }
        v44 = v41 - v43;
        if (__OFSUB__(v41, v43))
          goto LABEL_49;
        v45 = v44 + v37;
        if (__OFADD__(v44, v37))
          goto LABEL_50;
        v46 = v22[*(int *)(v36 + 36)] < 3u;
        v47 = (uint64_t)&v22[*(int *)(v64 + 20)];
        sub_23DBB2B6C(v47, (uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
        v48 = swift_getEnumCaseMultiPayload();
        if (v48)
        {
          if (v48 == 1)
          {
            sub_23DBBFA90();
            v50 = *(uint64_t *)((char *)v65 + *(int *)(v49 + 64));
            sub_23DBB2BB0((uint64_t)v65, (uint64_t (*)(_QWORD))sub_23DBBFA18);
          }
          else
          {
            sub_23DBB2BB0((uint64_t)v65, (uint64_t (*)(_QWORD))sub_23DBBFA18);
            v50 = 6;
          }
        }
        else
        {
          v50 = *v65;
        }
        sub_23DBB2B6C(v47, v63, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
        result = swift_getEnumCaseMultiPayload();
        if ((_DWORD)result)
        {
          if ((_DWORD)result == 1)
            sub_23DBBFA90();
          else
            sub_23DBBFAFC();
          v52 = *(_QWORD *)(v63 + *(int *)(v51 + 48));
          result = sub_23DBB2BB0(v63, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        }
        else
        {
          v52 = 0;
        }
        v53 = v50 - v52;
        if (__OFSUB__(v50, v52))
          goto LABEL_51;
        v54 = __OFADD__(v53, v46);
        v55 = v53 + v46;
        if (v54)
          goto LABEL_52;
        if (v55 < 0 || (v45 & ~(v45 >> 63)) >= v55)
        {
          result = sub_23DBB2BB0((uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
        }
        else
        {
          sub_23DBB2BB0((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
          result = sub_23DBBCEB0((uint64_t)v20, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
        }
        v16 = v64;
        v26 = v60;
        v17 = v61;
        if (v59 == ++v35)
          goto LABEL_3;
      }
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
LABEL_3:
    v29 = v57;
    sub_23DBBCEB0((uint64_t)v22, v57, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    v30 = 0;
  }
  else
  {
    v30 = 1;
    v29 = v57;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v29, v30, 1, v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v29, 1, v16) == 1)
  {
    v31 = (uint64_t (*)(_QWORD))sub_23DBCE084;
    v32 = 7;
LABEL_47:
    sub_23DBB2BB0(v29, v31);
    return v32;
  }
  sub_23DBB2B6C(v29 + *(int *)(v16 + 20), (uint64_t)v58, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      sub_23DBBFA90();
      v34 = *(uint64_t *)((char *)v58 + *(int *)(v33 + 64));
      result = sub_23DBB2BB0((uint64_t)v58, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    }
    else
    {
      result = sub_23DBB2BB0((uint64_t)v58, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      v34 = 6;
    }
  }
  else
  {
    v34 = *v58;
  }
  v54 = __OFADD__(v34, 1);
  v32 = v34 + 1;
  if (!v54)
  {
    v31 = (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison;
    goto LABEL_47;
  }
LABEL_53:
  __break(1u);
  return result;
}

uint64_t SleepingSampleBaselineComparisonCollection.warmupDaysRemaining.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = (*(uint64_t (**)(void))(a2 + 8))();
  v3 = sub_23DBE42D4(v2, (void (*)(uint64_t *__return_ptr, char *))sub_23DBE42AC, 0);
  v5 = v4;
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_23DBE42AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = SleepingSampleBaselineComparison.warmupDaysRemaining.getter();
  *a1 = result;
  return result;
}

uint64_t sub_23DBE42D4(uint64_t a1, void (*a2)(uint64_t *__return_ptr, char *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *__return_ptr, char *);
  uint64_t v23;
  _DWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t *__return_ptr, char *);
  uint64_t v29;

  v6 = type metadata accessor for SleepingSampleBaselineComparison();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBCE084(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v24 - v14;
  v26 = a1;
  v27 = 0;
  v28 = a2;
  v29 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  result = sub_23DBE4500();
  v18 = result;
  if ((v17 & 1) != 0)
  {
LABEL_11:
    swift_release();
    swift_bridgeObjectRelease();
    return v18;
  }
  v24[1] = v17;
  while (1)
  {
    v19 = v27;
    v20 = *(_QWORD *)(v26 + 16);
    if (v27 == v20)
    {
      v21 = 1;
      goto LABEL_7;
    }
    if (v27 >= v20)
      break;
    sub_23DBB2B6C(v26+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v27, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    v21 = 0;
    v27 = v19 + 1;
LABEL_7:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v15, v21, 1, v6);
    v22 = v28;
    sub_23DBBCEB0((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_23DBCE084);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
      goto LABEL_11;
    sub_23DBBCEB0((uint64_t)v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    v22(&v25, v9);
    v23 = v25;
    result = sub_23DBB2BB0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    if (v23 < v18)
      v18 = v23;
  }
  __break(1u);
  return result;
}

uint64_t dispatch thunk of SleepingSampleBaselineComparisonCollection.baselineComparisons.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SleepingSampleBaselineComparisonCollection.morningIndexRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepingSampleBaselineComparisonCollection.outOfRangeMetricCount.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SleepingSampleBaselineComparisonCollection.baselineComparisons(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_23DBE4500()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *__return_ptr, char *);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = type metadata accessor for SleepingSampleBaselineComparison();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBCE084(0);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v6);
  v11 = (char *)&v17 - v10;
  v12 = v0[1];
  v13 = *(_QWORD *)(*v0 + 16);
  if (v12 == v13)
  {
    v14 = 1;
  }
  else
  {
    if (v12 >= v13)
    {
      __break(1u);
      return result;
    }
    sub_23DBB2B6C(*v0+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v12, (uint64_t)&v17 - v10, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    v14 = 0;
    v0[1] = v12 + 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v11, v14, 1, v1);
  v15 = (void (*)(uint64_t *__return_ptr, char *))v0[2];
  sub_23DBBCEB0((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DBCE084);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
    return 0;
  sub_23DBBCEB0((uint64_t)v8, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v15(&v18, v4);
  v16 = v18;
  sub_23DBB2BB0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  return v16;
}

uint64_t SleepingSampleDaySummaryQueryDescriptor.gregorianDayRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DBB2B6C(v1, a1, (uint64_t (*)(_QWORD))type metadata accessor for GregorianDayRange);
}

uint64_t SleepingSampleDaySummaryQueryDescriptor.gregorianDayRange.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23DBCC18C(a1, v1);
}

uint64_t (*SleepingSampleDaySummaryQueryDescriptor.gregorianDayRange.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummaryQueryDescriptor.init(gregorianDayRange:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DBBCEB0(a1, a2, (uint64_t (*)(_QWORD))type metadata accessor for GregorianDayRange);
}

uint64_t SleepingSampleDaySummaryQueryDescriptor.currentAndUpdatingDaySummaryCollections(for:debugIdentifier:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(char *, uint64_t, uint64_t)@<X8>)
{
  uint64_t Descriptor;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  objc_class *v33;
  objc_class *v34;
  _BYTE *v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char *v61;
  void *v62;
  uint64_t v63;
  objc_super v64;

  v60 = a3;
  v52 = a2;
  v62 = a1;
  v55 = a4;
  Descriptor = type metadata accessor for SleepingSampleDaySummaryQueryDescriptor();
  v5 = *(_QWORD *)(*(_QWORD *)(Descriptor - 8) + 64);
  v58 = *(_QWORD *)(Descriptor - 8);
  v59 = v5;
  MEMORY[0x24BDAC7A8](Descriptor);
  v57 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_23DC29F80();
  v63 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v54 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB9590();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v10;
  sub_23DBE6290(0, &qword_256CE9E68, MEMORY[0x24BEE6CA8]);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v52 - v14;
  sub_23DBE6290(0, &qword_256CE9E70, MEMORY[0x24BEE6CD0]);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  v20 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v52 - v22;
  type metadata accessor for SleepingSampleDaySummaryCollection();
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x24BEE6CA0], v12);
  sub_23DC2A3D0();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v24 = (uint64_t)v61;
  sub_23DBB2B6C((uint64_t)v61, (uint64_t)v10, (uint64_t (*)(_QWORD))sub_23DBB9590);
  v25 = v24 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v55 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  v26 = v54;
  v27 = v56;
  v55(v54, v25, v56);
  v28 = v57;
  sub_23DBB2B6C(v24, v57, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummaryQueryDescriptor);
  v29 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v61 = v23;
  v29(v21, v23, v17);
  v30 = (*(unsigned __int8 *)(v58 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
  v31 = (v59 + v30 + *(unsigned __int8 *)(v18 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v32 = swift_allocObject();
  sub_23DBBCEB0(v28, v32 + v30, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummaryQueryDescriptor);
  v58 = v17;
  v59 = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v32 + v31, v21, v17);
  sub_23DBC9BAC(0);
  v34 = v33;
  v35 = objc_allocWithZone(v33);
  v36 = (uint64_t *)&v35[qword_25431F7A0];
  *v36 = 0;
  v36[1] = 0;
  *(_QWORD *)&v35[qword_25431F7B0] = MEMORY[0x24BEE4AF8];
  v37 = &v35[qword_254322208];
  *v37 = 0;
  v37[1] = 0;
  v38 = (uint64_t)v53;
  sub_23DBB2B6C((uint64_t)v53, (uint64_t)&v35[qword_254322200], (uint64_t (*)(_QWORD))sub_23DBB9590);
  v39 = v27;
  v55(&v35[qword_254322210], (uint64_t)v26, v27);
  v35[qword_254322218] = 1;
  v40 = *v36;
  *v36 = (uint64_t)sub_23DBE50A4;
  v36[1] = v32;
  swift_retain();
  sub_23DBC9C24(v40);
  sub_23DBB2A2C(0, (unint64_t *)&qword_25431F2A0);
  v41 = (void *)sub_23DC2A340();
  v64.receiver = v35;
  v64.super_class = v34;
  v42 = objc_msgSendSuper2(&v64, sel_initWithQueryDescriptors_, v41, v52);
  v43 = v60;
  swift_release();

  (*(void (**)(char *, uint64_t))(v63 + 8))(v26, v39);
  sub_23DBE5134(v38);
  v44 = v42;
  if (v43)
    v43 = (void *)sub_23DC2A220();
  objc_msgSend(v42, sel_setDebugIdentifier_, v43);

  v45 = swift_allocObject();
  v46 = v62;
  *(_QWORD *)(v45 + 16) = v42;
  *(_QWORD *)(v45 + 24) = v46;
  v47 = v42;
  v48 = v46;
  v49 = v58;
  v50 = (uint64_t)v61;
  sub_23DC2A3DC();
  objc_msgSend(v48, sel_executeQuery_, v47);

  return (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v50, v49);
}

uint64_t type metadata accessor for SleepingSampleDaySummaryQueryDescriptor()
{
  uint64_t result;

  result = qword_25431ED98;
  if (!qword_25431ED98)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DBE4C10(void *a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[12];
  int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;

  v33 = a4;
  v35 = a2;
  sub_23DBE6290(0, &qword_256CE9EB0, MEMORY[0x24BEE6C80]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v26[-v9];
  sub_23DBE6290(0, &qword_25431EE20, MEMORY[0x24BEE4408]);
  v34 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v26[-v12];
  if (qword_25431F3A8 != -1)
    swift_once();
  v14 = sub_23DC29FF8();
  __swift_project_value_buffer(v14, (uint64_t)qword_25431F3C8);
  v15 = a1;
  v16 = sub_23DC29FE0();
  v17 = sub_23DC2A46C();
  v18 = v17;
  if (!os_log_type_enabled(v16, v17))
  {

    if ((a3 & 1) == 0)
      goto LABEL_5;
LABEL_7:
    *v13 = v35;
    goto LABEL_8;
  }
  v19 = swift_slowAlloc();
  v30 = v13;
  v20 = v19;
  v28 = (_QWORD *)swift_slowAlloc();
  v29 = swift_slowAlloc();
  v37 = v29;
  *(_DWORD *)v20 = 136446466;
  v32 = v8;
  v36 = sub_23DBF0610(0xD000000000000027, 0x800000023DC2ECE0, &v37);
  v31 = a3;
  sub_23DC2A4CC();
  *(_WORD *)(v20 + 12) = 2112;
  v27 = v18;
  v36 = (uint64_t)v15;
  v21 = v15;
  LOBYTE(a3) = v31;
  v8 = v32;
  sub_23DC2A4CC();
  v22 = v28;
  *v28 = v15;

  _os_log_impl(&dword_23DBAF000, v16, (os_log_type_t)v27, "[%{public}s] Yielding query results to stream: %@", (uint8_t *)v20, 0x16u);
  sub_23DBE622C();
  swift_arrayDestroy();
  MEMORY[0x24263E4E8](v22, -1, -1);
  v23 = v29;
  swift_arrayDestroy();
  MEMORY[0x24263E4E8](v23, -1, -1);
  v24 = v20;
  v13 = v30;
  MEMORY[0x24263E4E8](v24, -1, -1);

  if ((a3 & 1) != 0)
    goto LABEL_7;
LABEL_5:
  sub_23DBB2B6C(v33, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for GregorianDayRange);
  *(_QWORD *)((char *)v13 + *(int *)(type metadata accessor for SleepingSampleDaySummaryCollection() + 20)) = v35;
LABEL_8:
  swift_storeEnumTagMultiPayload();
  sub_23DBE61D4(v35, a3 & 1);
  sub_23DBE6290(0, &qword_256CE9E70, MEMORY[0x24BEE6CD0]);
  sub_23DC2A3E8();
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  return sub_23DBE61E0((uint64_t)v13);
}

uint64_t sub_23DBE4F8C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(type metadata accessor for SleepingSampleDaySummaryQueryDescriptor() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  sub_23DBE6290(0, &qword_256CE9E70, MEMORY[0x24BEE6CD0]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = (v3 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v0 + v2;
  v9 = sub_23DC2A154();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  sub_23DBB9590();
  v10(v8 + *(int *)(v11 + 36), v9);
  v12 = v8 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v13 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t sub_23DBE50A4(void *a1, void *a2, char a3)
{
  uint64_t v3;
  int v6;
  uint64_t Descriptor;
  unint64_t v8;

  v6 = a3 & 1;
  Descriptor = type metadata accessor for SleepingSampleDaySummaryQueryDescriptor();
  v8 = (*(unsigned __int8 *)(*(_QWORD *)(Descriptor - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(Descriptor - 8) + 80);
  sub_23DBE6290(0, &qword_256CE9E70, MEMORY[0x24BEE6CD0]);
  return sub_23DBE4C10(a1, a2, v6, v3 + v8);
}

uint64_t sub_23DBE5134(uint64_t a1)
{
  uint64_t v2;

  sub_23DBB9590();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_23DBE5170(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v14;
  uint64_t v15;

  if (qword_25431F3A8 != -1)
    swift_once();
  v5 = sub_23DC29FF8();
  __swift_project_value_buffer(v5, (uint64_t)qword_25431F3C8);
  v6 = a2;
  v7 = sub_23DC29FE0();
  v8 = sub_23DC2A46C();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v15 = v14;
    *(_DWORD *)v9 = 136446466;
    sub_23DBF0610(0xD000000000000027, 0x800000023DC2ECE0, &v15);
    sub_23DC2A4CC();
    *(_WORD *)(v9 + 12) = 2112;
    v11 = a3;
    v12 = v6;
    sub_23DC2A4CC();
    *v10 = v6;

    a3 = v11;
    _os_log_impl(&dword_23DBAF000, v7, v8, "[%{public}s] Stopping query for stream termination: %@", (uint8_t *)v9, 0x16u);
    sub_23DBE622C();
    swift_arrayDestroy();
    MEMORY[0x24263E4E8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24263E4E8](v14, -1, -1);
    MEMORY[0x24263E4E8](v9, -1, -1);

  }
  else
  {

  }
  return objc_msgSend(a3, sel_stopQuery_, v6);
}

uint64_t sub_23DBE53A0()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_23DBE53CC(uint64_t a1)
{
  uint64_t v1;

  return sub_23DBE5170(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t SleepingSampleDaySummaryQueryDescriptor.currentDaySummaryCollection(for:debugIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23DBE53F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 v6;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v6 = *(_OWORD *)(v0 + 24);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v6;
  *(_QWORD *)(v3 + 40) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  type metadata accessor for SleepingSampleDaySummaryCollection();
  *v4 = v0;
  v4[1] = sub_23DBE54B0;
  return sub_23DC2A814();
}

uint64_t sub_23DBE54B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23DBE5524()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23DBE5558(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Descriptor;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  objc_class *v28;
  objc_class *v29;
  _BYTE *v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  id v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  char *v48;
  uint64_t v49;
  objc_super v50;

  v47 = a5;
  v41[1] = a4;
  v44 = a1;
  v45 = a3;
  sub_23DBE6290(0, &qword_25431EDF0, MEMORY[0x24BEE6830]);
  v42 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v41 - v8;
  Descriptor = type metadata accessor for SleepingSampleDaySummaryQueryDescriptor();
  v11 = *(_QWORD *)(Descriptor - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](Descriptor);
  v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23DC29F80();
  v15 = *(_QWORD *)(v14 - 8);
  v43 = v14;
  v46 = v15;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = v17;
  sub_23DBB9590();
  MEMORY[0x24BDAC7A8](v18);
  v49 = (uint64_t)v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(a2, v49, v20);
  v21 = type metadata accessor for GregorianDayRange();
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v22(v17, a2 + *(int *)(v21 + 20), v14);
  sub_23DBB2B6C(a2, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummaryQueryDescriptor);
  v23 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v44, v42);
  v24 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v25 = (v12 + v24 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26 = swift_allocObject();
  v27 = v45;
  *(_QWORD *)(v26 + 16) = v45;
  sub_23DBBCEB0((uint64_t)v13, v26 + v24, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummaryQueryDescriptor);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v26 + v25, v9, v23);
  sub_23DBC9BAC(0);
  v29 = v28;
  v30 = objc_allocWithZone(v28);
  v31 = (uint64_t *)&v30[qword_25431F7A0];
  *v31 = 0;
  v31[1] = 0;
  *(_QWORD *)&v30[qword_25431F7B0] = MEMORY[0x24BEE4AF8];
  v32 = &v30[qword_254322208];
  *v32 = 0;
  v32[1] = 0;
  sub_23DBB2B6C(v49, (uint64_t)&v30[qword_254322200], (uint64_t (*)(_QWORD))sub_23DBB9590);
  v33 = v43;
  v22(&v30[qword_254322210], (uint64_t)v48, v43);
  v34 = v47;
  v30[qword_254322218] = 0;
  v35 = *v31;
  *v31 = (uint64_t)sub_23DBE60EC;
  v31[1] = v26;
  v36 = v27;
  swift_retain();
  sub_23DBC9C24(v35);
  sub_23DBB2A2C(0, (unint64_t *)&qword_25431F2A0);
  v37 = (void *)sub_23DC2A340();
  v50.receiver = v30;
  v50.super_class = v29;
  v38 = objc_msgSendSuper2(&v50, sel_initWithQueryDescriptors_, v37);
  swift_release();

  (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v33);
  sub_23DBE5134(v49);
  v39 = v34;
  v40 = v38;
  if (v34)
    v39 = (void *)sub_23DC2A220();
  objc_msgSend(v38, sel_setDebugIdentifier_, v39);

  objc_msgSend(v36, sel_executeQuery_, v38);
}

void sub_23DBE58F4(uint64_t a1)
{
  uint64_t v1;

  sub_23DBE5558(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleDaySummaryQueryDescriptor(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for GregorianDayRange();
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = v4;
    v7 = sub_23DC2A154();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_23DBB9590();
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    v10 = *(int *)(v6 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_23DC29F80();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for SleepingSampleDaySummaryQueryDescriptor(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_23DC2A154();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(a1, v2);
  sub_23DBB9590();
  v3(a1 + *(int *)(v4 + 36), v2);
  v5 = a1 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v6 = sub_23DC29F80();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for SleepingSampleDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_23DC2A154();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16);
  v5(a1, a2, v4);
  sub_23DBB9590();
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  v7 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for SleepingSampleDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_23DC2A154();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24);
  v5(a1, a2, v4);
  sub_23DBB9590();
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  v7 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for SleepingSampleDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_23DC2A154();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32);
  v5(a1, a2, v4);
  sub_23DBB9590();
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  v7 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SleepingSampleDaySummaryQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_23DC2A154();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40);
  v5(a1, a2, v4);
  sub_23DBB9590();
  v5(a1 + *(int *)(v6 + 36), a2 + *(int *)(v6 + 36), v4);
  v7 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleDaySummaryQueryDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBE5CE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GregorianDayRange();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleDaySummaryQueryDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBE5D30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GregorianDayRange();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_23DBE5D70()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GregorianDayRange();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23DBE5DD8(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[2];

  v21[0] = a6;
  v11 = type metadata accessor for SleepingSampleDaySummaryCollection();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBE6290(0, &qword_25431EE20, MEMORY[0x24BEE4408]);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (_QWORD *)((char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15);
  v19 = (_QWORD *)((char *)v21 - v18);
  objc_msgSend(a4, sel_stopQuery_, a1, v21[0]);
  if ((a3 & 1) != 0)
  {
    *v19 = a2;
  }
  else
  {
    sub_23DBB2B6C(a5, (uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for GregorianDayRange);
    *(_QWORD *)((char *)v19 + *(int *)(v11 + 20)) = a2;
  }
  swift_storeEnumTagMultiPayload();
  sub_23DBE6180((uint64_t)v19, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21[1] = *v17;
    sub_23DBE61D4(a2, a3 & 1);
    sub_23DBE6290(0, &qword_25431EDF0, MEMORY[0x24BEE6830]);
    sub_23DC2A3B8();
  }
  else
  {
    sub_23DBBCEB0((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummaryCollection);
    sub_23DBE61D4(a2, a3 & 1);
    sub_23DBE6290(0, &qword_25431EDF0, MEMORY[0x24BEE6830]);
    sub_23DC2A3C4();
  }
  return sub_23DBE61E0((uint64_t)v19);
}

uint64_t sub_23DBE5FCC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(type metadata accessor for SleepingSampleDaySummaryQueryDescriptor() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  sub_23DBE6290(0, &qword_25431EDF0, MEMORY[0x24BEE6830]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  v7 = (v3 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  v8 = v0 + v2;
  v9 = sub_23DC2A154();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  sub_23DBB9590();
  v10(v8 + *(int *)(v11 + 36), v9);
  v12 = v8 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v13 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t sub_23DBE60EC(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a3 & 1;
  v7 = *(_QWORD *)(type metadata accessor for SleepingSampleDaySummaryQueryDescriptor() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  sub_23DBE6290(0, &qword_25431EDF0, MEMORY[0x24BEE6830]);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80);
  return sub_23DBE5DD8(a1, a2, v6, *(void **)(v3 + 16), v3 + v8, v3 + ((v9 + v11) & ~v11));
}

uint64_t sub_23DBE6180(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBE6290(0, &qword_25431EE20, MEMORY[0x24BEE4408]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_23DBE61D4(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

uint64_t sub_23DBE61E0(uint64_t a1)
{
  uint64_t v2;

  sub_23DBE6290(0, &qword_25431EE20, MEMORY[0x24BEE4408]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23DBE622C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CEA6C0)
  {
    sub_23DBB2A2C(255, &qword_256CE9EA8);
    v0 = sub_23DC2A4C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CEA6C0);
  }
}

void sub_23DBE6290(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = type metadata accessor for SleepingSampleDaySummaryCollection();
    v7 = sub_23DBD083C();
    v8 = a3(a1, v6, v7, MEMORY[0x24BEE3F20]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t static SleepingSampleQueryRange.defaultBaselineWindowDays.getter()
{
  return 49;
}

uint64_t SleepingSampleQueryRange.init(morningIndexRange:gregorianCalendar:baselineWindowDays:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  sub_23DBE6A70(a1, a4, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7 = a4 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v8 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a2, v8);
  result = type metadata accessor for SleepingSampleQueryRange();
  *(_QWORD *)(a4 + *(int *)(result + 20)) = a3;
  return result;
}

uint64_t SleepingSampleQueryRange.init(morningIndexRange:baselineWindowDays:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  sub_23DBE6400(a1, a3);
  result = type metadata accessor for SleepingSampleQueryRange();
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for SleepingSampleQueryRange()
{
  uint64_t result;

  result = qword_25431EFF0;
  if (!qword_25431EFF0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DBE6400(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GregorianDayRange();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SleepingSampleQueryRange.morningIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DBE6450(v1, a1);
}

uint64_t sub_23DBE6450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GregorianDayRange();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t SleepingSampleQueryRange.morningIndexRange.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23DBCC18C(a1, v1);
}

uint64_t (*SleepingSampleQueryRange.morningIndexRange.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleQueryRange.baselineWindowDays.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for SleepingSampleQueryRange() + 20));
}

uint64_t SleepingSampleQueryRange.baselineWindowDays.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SleepingSampleQueryRange();
  *(_QWORD *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*SleepingSampleQueryRange.baselineWindowDays.modify())()
{
  type metadata accessor for SleepingSampleQueryRange();
  return nullsub_1;
}

uint64_t SleepingSampleQueryRange.expandedBaselineRange(forTarget:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(uint64_t);
  char v23;
  void (*v24)(char *, uint64_t, uint64_t);
  char v25;
  char *v26;
  char *v27;
  uint64_t result;
  char *v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;

  v3 = v2;
  v53 = a2;
  sub_23DBC2A3C();
  v49 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v52 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v48 = (char *)&v44 - v8;
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v50 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v51 = (char *)&v44 - v10;
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v44 - v12;
  v14 = sub_23DC2A154();
  v15 = *(_QWORD **)(v14 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v45 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v44 = (char *)&v44 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v44 - v20;
  sub_23DBB2CB0((unint64_t *)&qword_25431FAC8, v22, MEMORY[0x24BDD24A8]);
  v23 = sub_23DC2A1B4();
  v24 = (void (*)(char *, uint64_t, uint64_t))v15[2];
  v24(v21, a1, v14);
  v46 = v3;
  sub_23DBE6A1C(v3, (uint64_t)v13);
  if ((v23 & 1) != 0)
    v25 = sub_23DC2A1C0();
  else
    v25 = 0;
  sub_23DBE6B70((uint64_t)v13, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v47 = (void (*)(char *, uint64_t))v15[1];
  v47(v21, v14);
  if ((v25 & 1) != 0)
  {
    type metadata accessor for SleepingSampleQueryRange();
    v26 = v44;
    sub_23DC2A100();
    v27 = v45;
    sub_23DC2A0E8();
    result = sub_23DC2A1C0();
    if ((result & 1) != 0)
    {
      v29 = v48;
      v30 = v49;
      v31 = &v48[*(int *)(v49 + 48)];
      v32 = (void (*)(char *, char *, uint64_t))v15[4];
      v32(v48, v26, v14);
      v32(v31, v27, v14);
      v33 = v52;
      v34 = &v52[*(int *)(v30 + 48)];
      v24(v52, (uint64_t)v29, v14);
      v24(v34, (uint64_t)v31, v14);
      v35 = (uint64_t)v51;
      v32(v51, v33, v14);
      v36 = v47;
      v47(v34, v14);
      v37 = &v33[*(int *)(v30 + 48)];
      v32(v33, v29, v14);
      v32(v37, v31, v14);
      v32((char *)(v35 + *(int *)(v50 + 36)), v37, v14);
LABEL_9:
      v36(v33, v14);
      return sub_23DBE6A70(v35, v53, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    }
    __break(1u);
  }
  else
  {
    result = sub_23DC2A1C0();
    if ((result & 1) != 0)
    {
      v39 = v48;
      v38 = v49;
      v40 = &v48[*(int *)(v49 + 48)];
      v24(v48, a1, v14);
      v24(v40, a1, v14);
      v33 = v52;
      v41 = &v52[*(int *)(v38 + 48)];
      v24(v52, (uint64_t)v39, v14);
      v24(v41, (uint64_t)v40, v14);
      v42 = (void (*)(char *, char *, uint64_t))v15[4];
      v35 = (uint64_t)v51;
      v42(v51, v33, v14);
      v36 = v47;
      v47(v41, v14);
      v43 = &v33[*(int *)(v38 + 48)];
      v42(v33, v39, v14);
      v42(v43, v40, v14);
      v42((char *)(v35 + *(int *)(v50 + 36)), v43, v14);
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

void sub_23DBE69A0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = sub_23DC2A154();
    v7 = sub_23DBB2CB0((unint64_t *)&qword_25431FAC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_23DBE6A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DBE6A70(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  sub_23DBE69A0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t SleepingSampleQueryRange.earliestBaselineMorningIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68];
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - v5;
  SleepingSampleQueryRange.expandedBaselineRange(forTarget:)(v1, (uint64_t)&v9 - v5);
  v7 = sub_23DC2A154();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, v6, v7);
  return sub_23DBE6B70((uint64_t)v6, (unint64_t *)&qword_25431FB50, v3);
}

uint64_t sub_23DBE6B70(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;

  sub_23DBE69A0(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t SleepingSampleQueryRange.latestBaselineMorningIndex.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v1 = sub_23DC2A154();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x24BDAC7A8](v1);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v16 - v6;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68];
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v10 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v16 - v11;
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  SleepingSampleQueryRange.expandedBaselineRange(forTarget:)(v0 + *(int *)(v13 + 36), (uint64_t)v12);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v7, &v12[*(int *)(v10 + 36)], v1);
  sub_23DBE6B70((uint64_t)v12, (unint64_t *)&qword_25431FB50, v8);
  sub_23DC2A0DC();
  sub_23DC2A0F4();
  v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v14(v5, v1);
  return ((uint64_t (*)(char *, uint64_t))v14)(v7, v1);
}

uint64_t SleepingSampleQueryRange.description.getter()
{
  sub_23DC2A5A4();
  sub_23DC2A2A4();
  GregorianDayRange.description.getter();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  type metadata accessor for SleepingSampleQueryRange();
  sub_23DC2A7D8();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  return 0;
}

uint64_t SleepingSampleQueryRange.hash(into:)()
{
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  sub_23DC2A190();
  type metadata accessor for GregorianDayRange();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  sub_23DC2A190();
  type metadata accessor for SleepingSampleQueryRange();
  return sub_23DC2A88C();
}

uint64_t SleepingSampleQueryRange.hashValue.getter()
{
  sub_23DC2A880();
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  sub_23DC2A190();
  type metadata accessor for GregorianDayRange();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  sub_23DC2A190();
  type metadata accessor for SleepingSampleQueryRange();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBE701C()
{
  sub_23DC2A880();
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  sub_23DC2A190();
  type metadata accessor for GregorianDayRange();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  sub_23DC2A190();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBE712C()
{
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  sub_23DC2A190();
  type metadata accessor for GregorianDayRange();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  sub_23DC2A190();
  return sub_23DC2A88C();
}

uint64_t sub_23DBE7224()
{
  sub_23DC2A880();
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  sub_23DC2A190();
  type metadata accessor for GregorianDayRange();
  sub_23DC29F80();
  sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  sub_23DC2A190();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

BOOL _s13HealthBalance24SleepingSampleQueryRangeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t Range;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v17 - v8;
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9818, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B0]);
  v10 = sub_23DC2A1F0();
  sub_23DBE6A1C(a1, (uint64_t)v9);
  sub_23DBE6A1C(a2, (uint64_t)v7);
  if ((v10 & 1) != 0)
  {
    v11 = sub_23DC2A1F0();
    v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8];
    sub_23DBE6B70((uint64_t)v7, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    sub_23DBE6B70((uint64_t)v9, (unint64_t *)&qword_25431FB40, v12);
    if ((v11 & 1) != 0)
    {
      v13 = type metadata accessor for GregorianDayRange();
      if ((MEMORY[0x24263D5AC](a1 + *(int *)(v13 + 20), a2 + *(int *)(v13 + 20)) & 1) != 0)
      {
        Range = type metadata accessor for SleepingSampleQueryRange();
        return *(_QWORD *)(a1 + *(int *)(Range + 20)) == *(_QWORD *)(a2 + *(int *)(Range + 20));
      }
    }
  }
  else
  {
    v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8];
    sub_23DBE6B70((uint64_t)v7, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    sub_23DBE6B70((uint64_t)v9, (unint64_t *)&qword_25431FB40, v16);
  }
  return 0;
}

uint64_t sub_23DBE74F8()
{
  return sub_23DBB2CB0(&qword_256CE9EB8, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleQueryRange, (uint64_t)&protocol conformance descriptor for SleepingSampleQueryRange);
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleQueryRange(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DC2A154();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    v10 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_23DC29F80();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for SleepingSampleQueryRange(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_23DC2A154();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(a1, v2);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v3(a1 + *(int *)(v4 + 36), v2);
  v5 = a1 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v6 = sub_23DC29F80();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for SleepingSampleQueryRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for SleepingSampleQueryRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for SleepingSampleQueryRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for SleepingSampleQueryRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleQueryRange()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBE79D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GregorianDayRange();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleQueryRange()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBE7A20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GregorianDayRange();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_23DBE7A60()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GregorianDayRange();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23DBE7AD4(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t);
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  char *v63;
  char *v64;
  char v65;
  void (*v66)(char *, uint64_t);
  uint64_t result;
  void (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  void (*v74)(char *, uint64_t, uint64_t, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  void (*v94)(uint64_t);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;

  v95 = a2;
  v94 = a1;
  v2 = type metadata accessor for SleepingSampleDaySummary();
  v91 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v105 = (uint64_t)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v100 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v109 = (uint64_t)&v87 - v5;
  sub_23DBE9EF0();
  v104 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v113 = (uint64_t)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23DC2A154();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v107 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v102 = (char *)&v87 - v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v89 = (char *)&v87 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v88 = (char *)&v87 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v108 = (char *)&v87 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v98 = (char *)&v87 - v20;
  sub_23DBE9FD4();
  v106 = v21;
  v22 = MEMORY[0x24BDAC7A8](v21);
  v99 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v93 = (uint64_t *)((char *)&v87 - v25);
  MEMORY[0x24BDAC7A8](v24);
  v92 = (uint64_t)&v87 - v26;
  sub_23DBE9F50();
  v28 = MEMORY[0x24BDAC7A8](v27);
  v101 = (uint64_t)&v87 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = MEMORY[0x24BDAC7A8](v28);
  v97 = (char *)&v87 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v103 = (char *)&v87 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v90 = (uint64_t)&v87 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v110 = (char *)&v87 - v37;
  MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)&v87 - v38;
  sub_23DBE893C(0, (unint64_t *)&qword_256CE9EF0, (unint64_t *)&qword_256CE9EF8, MEMORY[0x24BEE0910], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
  v111 = (char *)v40;
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)&v87 - v41;
  v43 = MEMORY[0x24BEE08F0];
  sub_23DBE893C(0, &qword_256CE9EC0, &qword_256CE9EC8, MEMORY[0x24BEE08F0], MEMORY[0x24BEE2FB0]);
  MEMORY[0x24BDAC7A8](v44);
  v46 = (char *)&v87 - v45;
  sub_23DBE893C(0, &qword_256CE9F00, &qword_256CE9EC8, v43, MEMORY[0x24BEE2FA0]);
  v96 = v47;
  MEMORY[0x24BDAC7A8](v47);
  v49 = (char *)&v87 - v48;
  v116 = MEMORY[0x24BEE4AF8];
  sub_23DBCC984(0, 0, 0);
  sub_23DBEA0C4(v114, (uint64_t)v46);
  v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8];
  sub_23DBEA2A4((uint64_t)v46, (uint64_t)v42, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v39, v46, v8);
  v114 = v9;
  v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v51(v39, 0, 1, v8);
  sub_23DBEA2F0((uint64_t)v46, (unint64_t *)&qword_25431FB40, v50);
  v52 = (uint64_t)v111;
  sub_23DBBCEB0((uint64_t)v39, (uint64_t)&v42[*((int *)v111 + 9)], (uint64_t (*)(_QWORD))sub_23DBE9F50);
  sub_23DBEA128((uint64_t)v42, (uint64_t)v49);
  v96 = *(int *)(v96 + 36);
  *(_QWORD *)&v49[v96] = 0;
  v53 = *(int *)(v52 + 36);
  v111 = v49;
  v54 = (uint64_t)&v49[v53];
  while (1)
  {
    v55 = (uint64_t)v110;
    v51(v110, 1, 1, v8);
    v56 = v113;
    v57 = v113 + *(int *)(v104 + 48);
    sub_23DBB2B6C(v54, v113, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    sub_23DBB2B6C(v55, v57, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48);
    if (v58(v56, 1, v8) == 1)
    {
      if (v58(v57, 1, v8) == 1)
      {
        sub_23DBB2BB0(v113, (uint64_t (*)(_QWORD))sub_23DBE9F50);
        sub_23DBB2BB0((uint64_t)v110, (uint64_t (*)(_QWORD))sub_23DBE9F50);
LABEL_22:
        sub_23DBEA18C((uint64_t)v111, &qword_256CE9F00, MEMORY[0x24BEE2FA0]);
        return v116;
      }
      goto LABEL_7;
    }
    v59 = v90;
    sub_23DBB2B6C(v113, v90, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    if (v58(v57, 1, v8) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v59, v8);
LABEL_7:
      sub_23DBB2BB0(v113, (uint64_t (*)(_QWORD))sub_23DBE9EF0);
      sub_23DBB2BB0((uint64_t)v110, (uint64_t (*)(_QWORD))sub_23DBE9F50);
      v60 = (uint64_t)v103;
      goto LABEL_9;
    }
    v61 = v114;
    v62 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 32);
    v63 = v88;
    v62(v88, v90, v8);
    v64 = v89;
    v62(v89, v57, v8);
    sub_23DBCE0BC(&qword_256CE9818, MEMORY[0x24BDD24B0]);
    v65 = sub_23DC2A1F0();
    v66 = *(void (**)(char *, uint64_t))(v61 + 8);
    v66(v64, v8);
    v60 = (uint64_t)v103;
    v66(v63, v8);
    sub_23DBB2BB0(v113, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    sub_23DBB2BB0((uint64_t)v110, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    if ((v65 & 1) != 0)
      goto LABEL_22;
LABEL_9:
    sub_23DBB2B6C(v54, v60, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v58)(v60, 1, v8);
    if ((_DWORD)result == 1)
      goto LABEL_24;
    v68 = *(void (**)(char *, uint64_t, uint64_t))(v114 + 32);
    v69 = v102;
    v68(v102, v60, v8);
    v68(v108, (uint64_t)v69, v8);
    sub_23DBEA2A4((uint64_t)v111, v109, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v70 = v101;
    sub_23DBB2B6C(v54, v101, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v58)(v70, 1, v8);
    if ((_DWORD)result == 1)
      goto LABEL_25;
    v68(v107, v70, v8);
    sub_23DBCE0BC(&qword_256CE9818, MEMORY[0x24BDD24B0]);
    if ((sub_23DC2A1F0() & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v114 + 8))(v107, v8);
      v71 = 1;
      v72 = (uint64_t)v97;
    }
    else
    {
      v115 = 1;
      sub_23DBCE0BC(&qword_256CE9748, MEMORY[0x24BDD24C0]);
      v72 = (uint64_t)v97;
      v73 = v107;
      sub_23DC2A4E4();
      (*(void (**)(char *, uint64_t))(v114 + 8))(v73, v8);
      v71 = 0;
    }
    v74 = v51;
    v51((char *)v72, v71, 1, v8);
    sub_23DBEA2F0(v109, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    sub_23DBB2BB0(v54, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    sub_23DBBCEB0(v72, v54, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    v75 = v98;
    v68(v98, (uint64_t)v108, v8);
    v76 = &v99[*(int *)(v106 + 48)];
    v77 = (uint64_t)v111;
    v78 = v96;
    v79 = *(_QWORD *)&v111[v96];
    result = ((uint64_t (*)(char *, char *, uint64_t))v68)(v76, v75, v8);
    if (__OFADD__(v79, 1))
      break;
    *(_QWORD *)(v77 + v78) = v79 + 1;
    v80 = (uint64_t)v93;
    v81 = (char *)v93 + *(int *)(v106 + 48);
    *v93 = v79;
    v68(v81, (uint64_t)v76, v8);
    v82 = v92;
    sub_23DBBCEB0(v80, v92, (uint64_t (*)(_QWORD))sub_23DBE9FD4);
    v83 = v112;
    v94(v82);
    sub_23DBB2BB0(v82, (uint64_t (*)(_QWORD))sub_23DBE9FD4);
    v112 = v83;
    if (v83)
    {
      sub_23DBEA18C((uint64_t)v111, &qword_256CE9F00, MEMORY[0x24BEE2FA0]);
      result = swift_release();
      v112 = 1;
      return result;
    }
    v84 = v116;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23DBCC984(0, *(_QWORD *)(v84 + 16) + 1, 1);
      v84 = v116;
    }
    v51 = v74;
    v86 = *(_QWORD *)(v84 + 16);
    v85 = *(_QWORD *)(v84 + 24);
    if (v86 >= v85 >> 1)
    {
      sub_23DBCC984(v85 > 1, v86 + 1, 1);
      v84 = v116;
    }
    *(_QWORD *)(v84 + 16) = v86 + 1;
    sub_23DBBCEB0(v105, v84+ ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80))+ *(_QWORD *)(v91 + 72) * v86, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

uint64_t static SleepingSampleDaySummaryCollection.fake(morningIndexRange:gregorianCalendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  sub_23DBEA2A4(a1, a3, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v6 = a3 + *(int *)(type metadata accessor for GregorianDayRange() + 20);
  v7 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a2, v7);
  v8 = sub_23DBE85AC(a1, a2);
  result = type metadata accessor for SleepingSampleDaySummaryCollection();
  *(_QWORD *)(a3 + *(int *)(result + 20)) = v8;
  return result;
}

uint64_t sub_23DBE85AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;

  sub_23DBE893C(0, &qword_256CE9EC0, &qword_256CE9EC8, MEMORY[0x24BEE08F0], MEMORY[0x24BEE2FB0]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v30 - v5;
  v31 = MEMORY[0x24BEE4AF8];
  sub_23DBCCA5C(0, 7, 0);
  v7 = v31;
  v9 = *(_QWORD *)(v31 + 16);
  v8 = *(_QWORD *)(v31 + 24);
  v10 = v8 >> 1;
  v11 = v9 + 1;
  if (v8 >> 1 <= v9)
  {
    sub_23DBCCA5C(v8 > 1, v9 + 1, 1);
    v7 = v31;
    v8 = *(_QWORD *)(v31 + 24);
    v10 = v8 >> 1;
  }
  *(_QWORD *)(v7 + 16) = v11;
  *(double *)(v7 + 8 * v9 + 32) = 96.8 / 100.0;
  v12 = v9 + 2;
  if (v10 < v12)
  {
    sub_23DBCCA5C(v8 > 1, v12, 1);
    v7 = v31;
  }
  *(_QWORD *)(v7 + 16) = v12;
  *(double *)(v7 + 8 * v11 + 32) = 96.6 / 100.0;
  v14 = *(_QWORD *)(v7 + 16);
  v13 = *(_QWORD *)(v7 + 24);
  v15 = v14 + 1;
  if (v14 >= v13 >> 1)
    sub_23DBCCA5C(v13 > 1, v14 + 1, 1);
  v16 = v31;
  *(_QWORD *)(v31 + 16) = v15;
  *(double *)(v16 + 8 * v14 + 32) = 96.6 / 100.0;
  v17 = *(_QWORD *)(v16 + 24);
  v18 = v14 + 2;
  if (v18 > (uint64_t)(v17 >> 1))
  {
    sub_23DBCCA5C(v17 > 1, v18, 1);
    v16 = v31;
  }
  *(_QWORD *)(v16 + 16) = v18;
  *(double *)(v16 + 8 * v15 + 32) = 96.1 / 100.0;
  v20 = *(_QWORD *)(v16 + 16);
  v19 = *(_QWORD *)(v16 + 24);
  v21 = v19 >> 1;
  v22 = v20 + 1;
  if (v19 >> 1 <= v20)
  {
    sub_23DBCCA5C(v19 > 1, v20 + 1, 1);
    v16 = v31;
    v19 = *(_QWORD *)(v31 + 24);
    v21 = v19 >> 1;
  }
  *(_QWORD *)(v16 + 16) = v22;
  *(double *)(v16 + 8 * v20 + 32) = 96.6 / 100.0;
  v23 = v20 + 2;
  if (v21 < (uint64_t)(v20 + 2))
    sub_23DBCCA5C(v19 > 1, v20 + 2, 1);
  v24 = v31;
  *(_QWORD *)(v31 + 16) = v23;
  *(double *)(v24 + 8 * v22 + 32) = 96.2 / 100.0;
  v26 = *(_QWORD *)(v24 + 16);
  v25 = *(_QWORD *)(v24 + 24);
  if (v26 >= v25 >> 1)
  {
    sub_23DBCCA5C(v25 > 1, v26 + 1, 1);
    v24 = v31;
  }
  *(_QWORD *)(v24 + 16) = v26 + 1;
  *(double *)(v24 + 8 * v26 + 32) = 95.5 / 100.0;
  v27 = sub_23DBEA2A4(a1, (uint64_t)v6, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  MEMORY[0x24BDAC7A8](v27);
  *(&v30 - 8) = a2;
  *(&v30 - 7) = (uint64_t)&unk_250E88440;
  *(&v30 - 6) = a1;
  *(&v30 - 5) = (uint64_t)&unk_250E882E0;
  *(&v30 - 4) = v24;
  *(&v30 - 3) = (uint64_t)&unk_250E88338;
  *(&v30 - 2) = (uint64_t)&unk_250E883E8;
  v28 = sub_23DBE7AD4((void (*)(uint64_t))sub_23DBE9EBC, (uint64_t)(&v30 - 10));
  sub_23DBEA18C((uint64_t)v6, &qword_256CE9EC0, MEMORY[0x24BEE2FB0]);
  swift_release();
  return v28;
}

void sub_23DBE893C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  if (!*a2)
  {
    sub_23DBEA1DC(255, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v11 = v10;
    v12 = sub_23DBEA03C(a3, a4);
    v13 = a5(a1, v11, v12);
    if (!v14)
      atomic_store(v13, a2);
  }
}

unint64_t sub_23DBE89C8()
{
  unint64_t result;

  result = qword_256CE9ED0;
  if (!qword_256CE9ED0)
  {
    result = MEMORY[0x24263E440](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_256CE9ED0);
  }
  return result;
}

id sub_23DBE8A0C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  void (*v47)(char *, char *, uint64_t);
  id result;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  double v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, char *, uint64_t);
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  char *v142;
  uint64_t v143;

  v124 = a8;
  v125 = a7;
  v126 = a6;
  v130 = a5;
  v131 = a3;
  v128 = a4;
  v143 = a2;
  v123 = a9;
  v122 = type metadata accessor for SleepingSampleDaySummary();
  MEMORY[0x24BDAC7A8](v122);
  v11 = (char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v12);
  v129 = (uint64_t)&v117 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v117 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  MEMORY[0x24BDAC7A8](v17);
  v127 = (uint64_t)&v117 - v18;
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  MEMORY[0x24BDAC7A8](v19);
  v138 = (char *)&v117 - v20;
  v21 = type metadata accessor for SleepingSampleBaselineComparison();
  v22 = MEMORY[0x24BDAC7A8](v21);
  v121 = (uint64_t)&v117 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v120 = (uint64_t)&v117 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v132 = (uint64_t)&v117 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v133 = (uint64_t)&v117 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v134 = (uint64_t)&v117 - v31;
  MEMORY[0x24BDAC7A8](v30);
  v139 = (uint64_t)&v117 - v32;
  sub_23DBE9FD4();
  v34 = v33;
  MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v117 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_23DC2A154();
  v38 = *(_QWORD *)(v37 - 8);
  v39 = MEMORY[0x24BDAC7A8](v37);
  v136 = (char *)&v117 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v42 = (char *)&v117 - v41;
  v43 = *(int *)(v34 + 48);
  v44 = &v36[v43];
  v45 = *a1;
  v46 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  v46(v44, (char *)a1 + v43, v37);
  v119 = v38;
  v47 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
  v142 = v42;
  v137 = v37;
  v47(v42, v44, v37);
  v141 = (id)objc_opt_self();
  result = objc_msgSend(v141, sel_hourUnit);
  v49 = *(_QWORD *)(v131 + 16);
  if (!v49)
  {
    __break(1u);
    goto LABEL_16;
  }
  v140 = v45;
  v50 = v45 % v49;
  if (v50 < 0)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v51 = result;
  v117 = (void (*)(uint64_t, char *, uint64_t))v47;
  v135 = v16;
  v118 = v11;
  v52 = *(double *)(v131 + 8 * v50 + 32);
  v53 = (void *)objc_opt_self();
  v54 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v51, v52);
  v55 = v51;
  v56 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v55, 7.2);
  v57 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v55, 6.8);
  v58 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v55, 7.7);
  v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v57, v58, 1, 1);

  v60 = v139;
  v61 = (uint64_t)v142;
  sub_23DBE9618((uint64_t)v142, v54, v56, v59, v143, v139);

  v46(v136, (char *)v61, v137);
  v62 = v127;
  sub_23DBEA2A4(v128, v127, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  sub_23DBEA32C(v62, v138);
  v63 = type metadata accessor for SleepingSampleAggregate();
  v64 = v129;
  sub_23DBB2B6C(v60 + *(int *)(v63 + 28), v129, (uint64_t (*)(_QWORD))sub_23DBD4810);
  v65 = sub_23DC29BF0();
  v66 = *(_QWORD *)(v65 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65) == 1)
  {
    sub_23DBB2BB0(v64, (uint64_t (*)(_QWORD))sub_23DBD4810);
    v67 = sub_23DC29E48();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v135, 1, 1, v67);
  }
  else
  {
    v68 = (uint64_t)v135;
    sub_23DC29BC0();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
    v69 = sub_23DC29E48();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 0, 1, v69);
  }
  result = objc_msgSend(v141, sel__countPerMinuteUnit);
  v70 = *(_QWORD *)(v130 + 16);
  if (!v70)
    goto LABEL_17;
  v71 = v140 % v70;
  if (v71 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v72 = result;
  v73 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, result, *(double *)(v130 + 8 * v71 + 32));
  v74 = v72;
  v75 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v74, 54.0);
  v76 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v74, 50.0);
  v77 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v74, 58.0);
  v78 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v76, v77, 1, 1);

  sub_23DBE9618((uint64_t)v142, v73, v75, v78, v143, v134);
  result = objc_msgSend(v141, sel_percentUnit);
  v79 = *(_QWORD *)(v126 + 16);
  if (!v79)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v80 = v140 % v79;
  if (v80 < 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v81 = result;
  v82 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, result, *(double *)(v126 + 8 * v80 + 32));
  v83 = v81;
  v84 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v83, 0.962);
  v85 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v83, 0.958);
  v86 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v83, 0.968);
  v87 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v85, v86, 1, 1);

  sub_23DBE9618((uint64_t)v142, v82, v84, v87, v143, v133);
  result = objc_msgSend(v141, sel__countPerMinuteUnit);
  v88 = *(_QWORD *)(v125 + 16);
  if (!v88)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v89 = v140;
  v90 = v140 % v88;
  if (v90 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v91 = result;
  v92 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, result, *(double *)(v125 + 8 * v90 + 32));
  v93 = v91;
  v94 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v93, 12.4);
  v95 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v93, 11.0);
  v96 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v93, 13.8);
  v97 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v95, v96, 1, 1);

  sub_23DBE9618((uint64_t)v142, v92, v94, v97, v143, v132);
  result = objc_msgSend(v141, sel__changeInDegreeCelsiusUnit);
  v98 = *(_QWORD *)(v124 + 16);
  if (!v98)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v99 = v89 % v98;
  if ((v99 & 0x8000000000000000) == 0)
  {
    v100 = result;
    v101 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, result, *(double *)(v124 + 8 * v99 + 32));
    v102 = v100;
    v103 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v102, 0.0);
    v104 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v102, -0.12);
    v105 = objc_msgSend(v53, sel_quantityWithUnit_doubleValue_, v102, 0.18);
    v106 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3E60]), sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v104, v105, 1, 1);

    v107 = v120;
    v108 = (uint64_t)v142;
    sub_23DBE9618((uint64_t)v142, v101, v103, v106, v143, v120);

    v109 = v139;
    v110 = v121;
    sub_23DBB2B6C(v139, v121, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    v111 = (int *)v122;
    v112 = (uint64_t)v118;
    v113 = (uint64_t)&v118[*(int *)(v122 + 24)];
    v114 = sub_23DC29E48();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(v113, 1, 1, v114);
    v115 = v112 + v111[7];
    *(_QWORD *)v115 = 0;
    *(_BYTE *)(v115 + 8) = 1;
    v116 = v137;
    v117(v112, v136, v137);
    sub_23DBEA250((uint64_t)v138, v112 + v111[5]);
    sub_23DBBC784((uint64_t)v135, v113, (uint64_t (*)(_QWORD))sub_23DBD482C);
    sub_23DBBCEB0(v134, v112 + v111[8], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    sub_23DBBCEB0(v133, v112 + v111[9], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    sub_23DBBCEB0(v132, v112 + v111[10], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    sub_23DBBCEB0(v107, v112 + v111[11], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    sub_23DBBCEB0(v110, v112 + v111[12], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    sub_23DBBCEB0(v112, v123, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
    sub_23DBB2BB0(v109, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v119 + 8))(v108, v116);
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_23DBE9618@<X0>(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X3>, void *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t result;
  char *v44;
  void (*v45)(char *, char *, uint64_t);
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  char *v51;
  void (*v52)(char *, uint64_t, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  double v73;
  double v74;
  id v75;
  double v76;
  double v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;

  v97 = a5;
  v104 = a3;
  v105 = a4;
  v100 = a6;
  v101 = a2;
  v108 = type metadata accessor for SleepingSampleBaselineComparison();
  MEMORY[0x24BDAC7A8](v108);
  v95 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD9904(0);
  MEMORY[0x24BDAC7A8](v8);
  v107 = (uint64_t)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v102);
  v106 = (uint64_t)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v11);
  v98 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v13);
  v99 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_23DC29E48();
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v88 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v16);
  v96 = (char *)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_23DC29F80();
  v110 = *(_QWORD *)(v92 - 8);
  MEMORY[0x24BDAC7A8](v92);
  v91 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for SleepingSampleAggregate();
  v19 = MEMORY[0x24BDAC7A8](v94);
  v93 = (char *)&v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v103 = (uint64_t)&v85 - v21;
  sub_23DBC2A3C();
  v23 = v22;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v85 - v27;
  v29 = sub_23DC2A154();
  v30 = *(_QWORD **)(v29 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v85 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)&v85 - v34;
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v87 = v36;
  v37 = MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)&v85 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v37);
  v111 = (uint64_t)&v85 - v40;
  sub_23DC2A0DC();
  sub_23DC2A0F4();
  v109 = (void (*)(char *, uint64_t))v30[1];
  v109(v33, v29);
  sub_23DBCE0BC((unint64_t *)&qword_25431FAC8, MEMORY[0x24BDD24A8]);
  v41 = v35;
  v42 = a1;
  result = sub_23DC2A1C0();
  if ((result & 1) != 0)
  {
    v44 = &v28[*(int *)(v23 + 48)];
    v45 = (void (*)(char *, char *, uint64_t))v30[4];
    v86 = v41;
    v45(v28, v41, v29);
    v46 = (void (*)(char *, uint64_t, uint64_t))v30[2];
    v46(v44, v42, v29);
    v47 = &v26[*(int *)(v23 + 48)];
    v46(v26, (uint64_t)v28, v29);
    v46(v47, (uint64_t)v44, v29);
    v45(v39, v26, v29);
    v48 = v47;
    v49 = v109;
    v109(v48, v29);
    v50 = &v26[*(int *)(v23 + 48)];
    v45(v26, v28, v29);
    v45(v50, v44, v29);
    v45(&v39[*(int *)(v87 + 36)], v50, v29);
    v49(v26, v29);
    sub_23DBEA250((uint64_t)v39, v111);
    v51 = v86;
    v46(v86, v42, v29);
    v52 = *(void (**)(char *, uint64_t, uint64_t))(v110 + 16);
    v53 = v91;
    v54 = v92;
    v52(v91, v97, v92);
    sub_23DC2A148();
    v55 = (uint64_t)v96;
    sub_23DC29BD8();
    v56 = sub_23DC29BF0();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v55, 0, 1, v56);
    v57 = (uint64_t)v99;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56))(v99, 1, 1, v90);
    v58 = (uint64_t)v93;
    v46(v93, (uint64_t)v51, v29);
    v59 = (int *)v94;
    v52((char *)(v58 + *(int *)(v94 + 20)), (uint64_t)v53, v54);
    sub_23DBC68B0();
    v60 = v101;
    v61 = (uint64_t)v98;
    sub_23DC2A064();
    sub_23DBC6894(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v61, 0, 1, v62);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v53, v54);
    v109(v51, v29);
    sub_23DBBCEB0(v61, v58 + v59[6], (uint64_t (*)(_QWORD))sub_23DBB29B8);
    sub_23DBBCEB0(v55, v58 + v59[7], (uint64_t (*)(_QWORD))sub_23DBD4810);
    sub_23DBBCEB0(v57, v58 + v59[8], (uint64_t (*)(_QWORD))sub_23DBD482C);
    *(_BYTE *)(v58 + v59[9]) = 0;
    v63 = v103;
    sub_23DBBCEB0(v58, v103, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
    sub_23DBBFAFC();
    v65 = *(int *)(v64 + 48);
    v66 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68];
    v67 = v106;
    sub_23DBEA2A4(v111, v106, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    *(_QWORD *)(v67 + v65) = 7;
    swift_storeEnumTagMultiPayload();
    v68 = v104;
    v69 = v105;
    v70 = objc_msgSend(v69, sel_maximum);
    v71 = objc_msgSend(v70, sel__unit);

    v72 = objc_msgSend(v69, sel_maximum);
    objc_msgSend(v72, sel__value);
    v74 = v73;

    v75 = objc_msgSend(v69, sel_minimum);
    objc_msgSend(v75, sel__value);
    v77 = v76;

    v78 = objc_msgSend((id)objc_opt_self(), sel_quantityWithUnit_doubleValue_, v71, (v74 - v77) * 0.25);
    v79 = v69;
    v80 = v107;
    SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)(v68, v79, v78, v79, v107);
    v81 = v108;
    v82 = (uint64_t)v95;
    v83 = (uint64_t)&v95[*(int *)(v108 + 24)];
    v84 = type metadata accessor for SleepingSampleBaseline();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v83, 1, 1, v84);
    sub_23DBBCEB0(v63, v82, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
    sub_23DBBCEB0(v67, v82 + *(int *)(v81 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    sub_23DBBC784(v80, v83, (uint64_t (*)(_QWORD))sub_23DBD9904);
    sub_23DBBCEB0(v82, v100, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    return sub_23DBEA2F0(v111, (unint64_t *)&qword_25431FB50, v66);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_23DBE9EBC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_23DBE8A0C(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], a2);
}

void sub_23DBE9EF0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CE9ED8)
  {
    sub_23DBE9F50();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CE9ED8);
  }
}

void sub_23DBE9F50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE9EE0)
  {
    sub_23DC2A154();
    sub_23DBCE0BC(&qword_256CE9748, MEMORY[0x24BDD24C0]);
    sub_23DBE89C8();
    v0 = sub_23DC2A1E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE9EE0);
  }
}

void sub_23DBE9FD4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CE9EE8)
  {
    sub_23DC2A154();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CE9EE8);
  }
}

uint64_t sub_23DBEA03C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    sub_23DBEA1DC(255, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v6 = v5;
    v7[0] = sub_23DBCE0BC(&qword_256CE9748, MEMORY[0x24BDD24C0]);
    v7[1] = sub_23DBE89C8();
    result = MEMORY[0x24263E440](a2, v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23DBEA0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBE893C(0, &qword_256CE9EC0, &qword_256CE9EC8, MEMORY[0x24BEE08F0], MEMORY[0x24BEE2FB0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DBEA128(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBE893C(0, (unint64_t *)&qword_256CE9EF0, (unint64_t *)&qword_256CE9EF8, MEMORY[0x24BEE0910], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE2C00]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DBEA18C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;

  sub_23DBE893C(0, a2, &qword_256CE9EC8, MEMORY[0x24BEE08F0], a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_23DBEA1DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = sub_23DC2A154();
    v7 = sub_23DBCE0BC((unint64_t *)&qword_25431FAC8, MEMORY[0x24BDD24A8]);
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_23DBEA250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DBEA2A4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  sub_23DBEA1DC(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_23DBEA2F0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;

  sub_23DBEA1DC(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_23DBEA32C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(void);
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v30 = a2;
  sub_23DBC2A3C();
  v29 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v28 - v7;
  v9 = sub_23DC2A154();
  v10 = *(_QWORD **)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v28 - v14;
  v16 = MEMORY[0x24BEE08B8];
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v31 = 1;
  sub_23DBCE0BC(&qword_256CE9748, MEMORY[0x24BDD24C0]);
  sub_23DC2A4E4();
  v17 = (void (*)(char *, uint64_t, uint64_t))v10[2];
  v17(v13, a1, v9);
  sub_23DBEC530(a1, (uint64_t)&qword_25431FB40, (uint64_t)v16, (uint64_t (*)(_QWORD))sub_23DBEA1DC);
  v18 = v29;
  v19 = &v8[*(int *)(v29 + 48)];
  v20 = (void (*)(char *, char *, uint64_t))v10[4];
  v20(v8, v13, v9);
  v20(v19, v15, v9);
  v21 = v18;
  v22 = &v6[*(int *)(v18 + 48)];
  v17(v6, (uint64_t)v8, v9);
  v17(v22, (uint64_t)v19, v9);
  v23 = v30;
  v20(v30, v6, v9);
  v24 = (void (*)(char *, uint64_t))v10[1];
  v24(v22, v9);
  v25 = &v6[*(int *)(v21 + 48)];
  v20(v6, v8, v9);
  v20(v25, v19, v9);
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v20(&v23[*(int *)(v26 + 36)], v25, v9);
  return ((uint64_t (*)(char *, uint64_t))v24)(v6, v9);
}

uint64_t TrainingLoadSummaryQueryDescriptor.morningIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DBEB20C(v1, a1, (uint64_t)&qword_25431FB40, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DBEA1DC);
}

uint64_t TrainingLoadSummaryQueryDescriptor.morningIndexRange.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23DBE124C(a1, v1);
}

uint64_t (*TrainingLoadSummaryQueryDescriptor.morningIndexRange.modify())()
{
  return nullsub_1;
}

uint64_t TrainingLoadSummaryQueryDescriptor.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TrainingLoadSummaryQueryDescriptor() + 20);
  v4 = sub_23DC29F80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for TrainingLoadSummaryQueryDescriptor()
{
  uint64_t result;

  result = qword_256CE9F78;
  if (!qword_256CE9F78)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t TrainingLoadSummaryQueryDescriptor.gregorianCalendar.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TrainingLoadSummaryQueryDescriptor() + 20);
  v4 = sub_23DC29F80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*TrainingLoadSummaryQueryDescriptor.gregorianCalendar.modify())()
{
  type metadata accessor for TrainingLoadSummaryQueryDescriptor();
  return nullsub_1;
}

uint64_t TrainingLoadSummaryQueryDescriptor.init(morningIndexRange:gregorianCalendar:typeOfLoad:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t SummaryQueryDescriptor;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;

  v6 = *a3;
  v7 = *((unsigned __int8 *)a3 + 8);
  sub_23DBDFCD4(a1, a4);
  SummaryQueryDescriptor = type metadata accessor for TrainingLoadSummaryQueryDescriptor();
  v9 = a4 + *(int *)(SummaryQueryDescriptor + 20);
  v10 = sub_23DC29F80();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a2, v10);
  v12 = 2 * (v6 == 0);
  if (!v7)
    v12 = 1;
  *(_BYTE *)(a4 + *(int *)(SummaryQueryDescriptor + 24)) = v12;
  return result;
}

uint64_t TrainingLoadSummaryQueryDescriptor.currentAndUpdatingDaySummaryCollections(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  objc_class *SummaryQuery;
  _BYTE *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  char *v46;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t SummaryQueryDescriptor;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  objc_super v62;

  v58 = a1;
  SummaryQueryDescriptor = type metadata accessor for TrainingLoadSummaryQueryDescriptor();
  v1 = *(_QWORD *)(*(_QWORD *)(SummaryQueryDescriptor - 8) + 64);
  v56 = *(_QWORD *)(SummaryQueryDescriptor - 8);
  v57 = v1;
  MEMORY[0x24BDAC7A8](SummaryQueryDescriptor);
  v54 = (uint64_t)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_23DC29F80();
  v61 = *(_QWORD *)(v51 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v50 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v48 - v5;
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v48 - v8;
  v48 = (uint64_t)&v48 - v8;
  sub_23DBEC4C0(0, &qword_256CE9F08, MEMORY[0x24BEE6CA8]);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v48 - v13;
  sub_23DBEC4C0(0, &qword_256CE9F10, MEMORY[0x24BEE6CD0]);
  v16 = *(_QWORD *)(v15 - 8);
  v59 = v15;
  v60 = v16;
  v17 = *(_QWORD *)(v16 + 64);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v48 - v20;
  type metadata accessor for TrainingLoadSampleDaySummaryCollection();
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BEE6CA0], v11);
  v22 = v21;
  v55 = v21;
  sub_23DC2A3D0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v23 = v52;
  sub_23DBEB20C(v52, (uint64_t)v6, (uint64_t)&qword_25431FB40, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DBEA1DC);
  sub_23DBEA32C((uint64_t)v6, v9);
  v24 = SummaryQueryDescriptor;
  v25 = v23 + *(int *)(SummaryQueryDescriptor + 20);
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  v26 = v50;
  v27 = v51;
  v49(v50, v25, v51);
  LODWORD(SummaryQueryDescriptor) = *(unsigned __int8 *)(v23 + *(int *)(v24 + 24));
  v28 = v54;
  sub_23DBEB014(v23, v54);
  v29 = v59;
  v30 = v60;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v19, v22, v59);
  v31 = (*(unsigned __int8 *)(v56 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v32 = (v57 + v31 + *(unsigned __int8 *)(v30 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v33 = swift_allocObject();
  sub_23DBBCEB0(v28, v33 + v31, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSummaryQueryDescriptor);
  (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v33 + v32, v19, v29);
  SummaryQuery = (objc_class *)type metadata accessor for TrainingLoadSummaryQuery();
  v35 = objc_allocWithZone(SummaryQuery);
  v36 = (uint64_t *)&v35[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  *v36 = 0;
  v36[1] = 0;
  *(_QWORD *)&v35[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery] = MEMORY[0x24BEE4AF8];
  v37 = v48;
  sub_23DBEB20C(v48, (uint64_t)&v35[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_morningIndexRange], (uint64_t)&qword_25431FB50, (uint64_t)MEMORY[0x24BEE1B68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DBEA1DC);
  v49(&v35[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_gregorianCalendar], (uint64_t)v26, v27);
  v35[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_typeOfDataRequested] = SummaryQueryDescriptor;
  v35[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults] = 1;
  v38 = *v36;
  *v36 = (uint64_t)sub_23DBEB17C;
  v36[1] = v33;
  swift_retain();
  sub_23DBC9C24(v38);
  sub_23DBB2A2C(0, (unint64_t *)&qword_25431F2A0);
  v39 = (void *)sub_23DC2A340();
  v62.receiver = v35;
  v62.super_class = SummaryQuery;
  v40 = objc_msgSendSuper2(&v62, sel_initWithQueryDescriptors_, v39);
  swift_release();

  (*(void (**)(char *, uint64_t))(v61 + 8))(v26, v27);
  sub_23DBEC530(v37, (uint64_t)&qword_25431FB50, (uint64_t)MEMORY[0x24BEE1B68], (uint64_t (*)(_QWORD))sub_23DBEA1DC);
  v41 = swift_allocObject();
  v42 = v58;
  *(_QWORD *)(v41 + 16) = v40;
  *(_QWORD *)(v41 + 24) = v42;
  v43 = v40;
  v44 = v42;
  v45 = v59;
  v46 = v55;
  sub_23DC2A3DC();
  objc_msgSend(v44, sel_executeQuery_, v43);

  return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v46, v45);
}

uint64_t sub_23DBEAC6C(void *a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[12];
  int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;

  v33 = a4;
  v35 = a2;
  sub_23DBEC4C0(0, &qword_256CE9FC8, MEMORY[0x24BEE6C80]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v10 = &v26[-v9];
  sub_23DBEC4C0(0, &qword_256CE9FC0, MEMORY[0x24BEE4408]);
  v34 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v26[-v12];
  if (qword_25431F3A8 != -1)
    swift_once();
  v14 = sub_23DC29FF8();
  __swift_project_value_buffer(v14, (uint64_t)qword_25431F3C8);
  v15 = a1;
  v16 = sub_23DC29FE0();
  v17 = sub_23DC2A46C();
  v18 = v17;
  if (!os_log_type_enabled(v16, v17))
  {

    if ((a3 & 1) == 0)
      goto LABEL_5;
LABEL_7:
    *v13 = v35;
    goto LABEL_8;
  }
  v19 = swift_slowAlloc();
  v30 = v13;
  v20 = v19;
  v28 = (_QWORD *)swift_slowAlloc();
  v29 = swift_slowAlloc();
  v37 = v29;
  *(_DWORD *)v20 = 136446466;
  v32 = v8;
  v36 = sub_23DBF0610(0xD000000000000022, 0x800000023DC2EE40, &v37);
  v31 = a3;
  sub_23DC2A4CC();
  *(_WORD *)(v20 + 12) = 2112;
  v27 = v18;
  v36 = (uint64_t)v15;
  v21 = v15;
  LOBYTE(a3) = v31;
  v8 = v32;
  sub_23DC2A4CC();
  v22 = v28;
  *v28 = v15;

  _os_log_impl(&dword_23DBAF000, v16, (os_log_type_t)v27, "[%{public}s] Yielding query results to stream: %@", (uint8_t *)v20, 0x16u);
  sub_23DBE622C();
  swift_arrayDestroy();
  MEMORY[0x24263E4E8](v22, -1, -1);
  v23 = v29;
  swift_arrayDestroy();
  MEMORY[0x24263E4E8](v23, -1, -1);
  v24 = v20;
  v13 = v30;
  MEMORY[0x24263E4E8](v24, -1, -1);

  if ((a3 & 1) != 0)
    goto LABEL_7;
LABEL_5:
  sub_23DBEB20C(v33, (uint64_t)v13, (uint64_t)&qword_25431FB40, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DBEA1DC);
  *(_QWORD *)((char *)v13 + *(int *)(type metadata accessor for TrainingLoadSampleDaySummaryCollection() + 20)) = v35;
LABEL_8:
  swift_storeEnumTagMultiPayload();
  sub_23DBE61D4(v35, a3 & 1);
  sub_23DBEC4C0(0, &qword_256CE9F10, MEMORY[0x24BEE6CD0]);
  sub_23DC2A3E8();
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  return sub_23DBEC530((uint64_t)v13, (uint64_t)&qword_256CE9FC0, MEMORY[0x24BEE4408], (uint64_t (*)(_QWORD))sub_23DBEC4C0);
}

uint64_t sub_23DBEB014(uint64_t a1, uint64_t a2)
{
  uint64_t SummaryQueryDescriptor;

  SummaryQueryDescriptor = type metadata accessor for TrainingLoadSummaryQueryDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(SummaryQueryDescriptor - 8) + 16))(a2, a1, SummaryQueryDescriptor);
  return a2;
}

uint64_t sub_23DBEB058()
{
  uint64_t v0;
  uint64_t SummaryQueryDescriptor;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  SummaryQueryDescriptor = type metadata accessor for TrainingLoadSummaryQueryDescriptor();
  v2 = *(_QWORD *)(SummaryQueryDescriptor - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  sub_23DBEC4C0(0, &qword_256CE9F10, MEMORY[0x24BEE6CD0]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = (v4 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v0 + v3;
  v10 = sub_23DC2A154();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v11(v9 + *(int *)(v12 + 36), v10);
  v13 = v9 + *(int *)(SummaryQueryDescriptor + 20);
  v14 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v8, v6);
  return swift_deallocObject();
}

uint64_t sub_23DBEB17C(void *a1, void *a2, char a3)
{
  uint64_t v3;
  int v6;
  uint64_t SummaryQueryDescriptor;
  unint64_t v8;

  v6 = a3 & 1;
  SummaryQueryDescriptor = type metadata accessor for TrainingLoadSummaryQueryDescriptor();
  v8 = (*(unsigned __int8 *)(*(_QWORD *)(SummaryQueryDescriptor - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(SummaryQueryDescriptor - 8) + 80);
  sub_23DBEC4C0(0, &qword_256CE9F10, MEMORY[0x24BEE6CD0]);
  return sub_23DBEAC6C(a1, a2, v6, v3 + v8);
}

uint64_t sub_23DBEB20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

id sub_23DBEB258(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v14;
  uint64_t v15;

  if (qword_25431F3A8 != -1)
    swift_once();
  v5 = sub_23DC29FF8();
  __swift_project_value_buffer(v5, (uint64_t)qword_25431F3C8);
  v6 = a2;
  v7 = sub_23DC29FE0();
  v8 = sub_23DC2A46C();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    v15 = v14;
    *(_DWORD *)v9 = 136446466;
    sub_23DBF0610(0xD000000000000022, 0x800000023DC2EE40, &v15);
    sub_23DC2A4CC();
    *(_WORD *)(v9 + 12) = 2112;
    v11 = a3;
    v12 = v6;
    sub_23DC2A4CC();
    *v10 = v6;

    a3 = v11;
    _os_log_impl(&dword_23DBAF000, v7, v8, "[%{public}s] Stopping training load query for stream termination: %@", (uint8_t *)v9, 0x16u);
    sub_23DBE622C();
    swift_arrayDestroy();
    MEMORY[0x24263E4E8](v10, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24263E4E8](v14, -1, -1);
    MEMORY[0x24263E4E8](v9, -1, -1);

  }
  else
  {

  }
  return objc_msgSend(a3, sel_stopQuery_, v6);
}

uint64_t sub_23DBEB488()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_23DBEB4B4(uint64_t a1)
{
  uint64_t v1;

  return sub_23DBEB258(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t TrainingLoadSummaryQueryDescriptor.currentDaySummaryCollection(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_23DBEB4D8()
{
  uint64_t v0;
  int8x16_t *v1;
  _QWORD *v2;

  v1 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  type metadata accessor for TrainingLoadSampleDaySummaryCollection();
  *v2 = v0;
  v2[1] = sub_23DBEB57C;
  return sub_23DC2A814();
}

uint64_t sub_23DBEB57C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23DBEB5F0()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23DBEB624(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t SummaryQueryDescriptor;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  objc_class *SummaryQuery;
  _BYTE *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  objc_super v50;

  v47 = a1;
  v48 = a3;
  sub_23DBEC4C0(0, &qword_256CE9FB8, MEMORY[0x24BEE6830]);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v45 = v4;
  v46 = v6;
  MEMORY[0x24BDAC7A8](v4);
  v38 = (char *)&v38 - v7;
  SummaryQueryDescriptor = type metadata accessor for TrainingLoadSummaryQueryDescriptor();
  v44 = *(_QWORD *)(SummaryQueryDescriptor - 8);
  v9 = *(_QWORD *)(v44 + 64);
  MEMORY[0x24BDAC7A8](SummaryQueryDescriptor);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_23DC29F80();
  v49 = *(_QWORD *)(v40 - 8);
  v11 = v49;
  MEMORY[0x24BDAC7A8](v40);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v38 - v15;
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v38 - v18;
  v41 = (uint64_t)&v38 - v18;
  sub_23DBEB20C(a2, (uint64_t)v16, (uint64_t)&qword_25431FB40, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DBEA1DC);
  sub_23DBEA32C((uint64_t)v16, v19);
  v20 = a2 + *(int *)(SummaryQueryDescriptor + 20);
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v21 = v13;
  v22 = v13;
  v39 = v13;
  v23 = v40;
  v42(v21, v20, v40);
  v43 = *(unsigned __int8 *)(a2 + *(int *)(SummaryQueryDescriptor + 24));
  sub_23DBEB014(a2, (uint64_t)v10);
  v24 = v38;
  v25 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v38, v47, v45);
  v26 = (*(unsigned __int8 *)(v44 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  v27 = (v9 + v26 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v28 = swift_allocObject();
  v29 = v48;
  *(_QWORD *)(v28 + 16) = v48;
  sub_23DBBCEB0((uint64_t)v10, v28 + v26, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSummaryQueryDescriptor);
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v28 + v27, v24, v25);
  SummaryQuery = (objc_class *)type metadata accessor for TrainingLoadSummaryQuery();
  v31 = objc_allocWithZone(SummaryQuery);
  v32 = (uint64_t *)&v31[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsHandler];
  *v32 = 0;
  v32[1] = 0;
  *(_QWORD *)&v31[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_queue_resultsPendingDelivery] = MEMORY[0x24BEE4AF8];
  v33 = v41;
  sub_23DBEB20C(v41, (uint64_t)&v31[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_morningIndexRange], (uint64_t)&qword_25431FB50, (uint64_t)MEMORY[0x24BEE1B68], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DBEA1DC);
  v42(&v31[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_gregorianCalendar], (uint64_t)v22, v23);
  v31[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_typeOfDataRequested] = v43;
  v31[OBJC_IVAR____TtC13HealthBalance24TrainingLoadSummaryQuery_continueAfterInitialResults] = 0;
  v34 = *v32;
  *v32 = (uint64_t)sub_23DBEC42C;
  v32[1] = v28;
  v35 = v29;
  swift_retain();
  sub_23DBC9C24(v34);
  sub_23DBB2A2C(0, (unint64_t *)&qword_25431F2A0);
  v36 = (void *)sub_23DC2A340();
  v50.receiver = v31;
  v50.super_class = SummaryQuery;
  v37 = objc_msgSendSuper2(&v50, sel_initWithQueryDescriptors_, v36);
  swift_release();

  (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v23);
  sub_23DBEC530(v33, (uint64_t)&qword_25431FB50, (uint64_t)MEMORY[0x24BEE1B68], (uint64_t (*)(_QWORD))sub_23DBEA1DC);
  objc_msgSend(v35, sel_executeQuery_, v37);

}

void sub_23DBEBA2C(uint64_t a1)
{
  uint64_t v1;

  sub_23DBEB624(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

_QWORD *initializeBufferWithCopyOfBuffer for TrainingLoadSummaryQueryDescriptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DC2A154();
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v8((_QWORD *)((char *)a1 + *(int *)(v9 + 36)), (_QWORD *)((char *)a2 + *(int *)(v9 + 36)), v7);
    v10 = *(int *)(a3 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = sub_23DC29F80();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t destroy for TrainingLoadSummaryQueryDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = sub_23DC2A154();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v5(a1 + *(int *)(v6 + 36), v4);
  v7 = a1 + *(int *)(a2 + 20);
  v8 = sub_23DC29F80();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t initializeWithCopy for TrainingLoadSummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for TrainingLoadSummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for TrainingLoadSummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for TrainingLoadSummaryQueryDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  v9 = *(int *)(a3 + 20);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for TrainingLoadSummaryQueryDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBEBEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_23DC29F80();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 3)
    return v14 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TrainingLoadSummaryQueryDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBEBF7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_23DC29F80();
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 2;
  return result;
}

void sub_23DBEC030()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DBEA1DC(319, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  if (v0 <= 0x3F)
  {
    sub_23DC29F80();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_23DBEC0CC(uint64_t a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t SampleDaySummaryCollection;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[2];

  v21[0] = a6;
  SampleDaySummaryCollection = type metadata accessor for TrainingLoadSampleDaySummaryCollection();
  MEMORY[0x24BDAC7A8](SampleDaySummaryCollection);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBEC4C0(0, &qword_256CE9FC0, MEMORY[0x24BEE4408]);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (_QWORD *)((char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15);
  v19 = (_QWORD *)((char *)v21 - v18);
  objc_msgSend(a4, sel_stopQuery_, a1, v21[0]);
  if ((a3 & 1) != 0)
  {
    *v19 = a2;
  }
  else
  {
    sub_23DBEB20C(a5, (uint64_t)v19, (uint64_t)&qword_25431FB40, (uint64_t)MEMORY[0x24BEE08B8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DBEA1DC);
    *(_QWORD *)((char *)v19 + *(int *)(SampleDaySummaryCollection + 20)) = a2;
  }
  swift_storeEnumTagMultiPayload();
  sub_23DBEB20C((uint64_t)v19, (uint64_t)v17, (uint64_t)&qword_256CE9FC0, MEMORY[0x24BEE4408], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_23DBEC4C0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v21[1] = *v17;
    sub_23DBE61D4(a2, a3 & 1);
    sub_23DBEC4C0(0, &qword_256CE9FB8, MEMORY[0x24BEE6830]);
    sub_23DC2A3B8();
  }
  else
  {
    sub_23DBBCEB0((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSampleDaySummaryCollection);
    sub_23DBE61D4(a2, a3 & 1);
    sub_23DBEC4C0(0, &qword_256CE9FB8, MEMORY[0x24BEE6830]);
    sub_23DC2A3C4();
  }
  return sub_23DBEC530((uint64_t)v19, (uint64_t)&qword_256CE9FC0, MEMORY[0x24BEE4408], (uint64_t (*)(_QWORD))sub_23DBEC4C0);
}

uint64_t sub_23DBEC300()
{
  uint64_t v0;
  uint64_t SummaryQueryDescriptor;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  SummaryQueryDescriptor = type metadata accessor for TrainingLoadSummaryQueryDescriptor();
  v2 = *(_QWORD *)(SummaryQueryDescriptor - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  sub_23DBEC4C0(0, &qword_256CE9FB8, MEMORY[0x24BEE6830]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  v8 = (v4 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);

  v9 = v0 + v3;
  v10 = sub_23DC2A154();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  sub_23DBEA1DC(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v11(v9 + *(int *)(v12 + 36), v10);
  v13 = v9 + *(int *)(SummaryQueryDescriptor + 20);
  v14 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v8, v6);
  return swift_deallocObject();
}

uint64_t sub_23DBEC42C(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a3 & 1;
  v7 = *(_QWORD *)(type metadata accessor for TrainingLoadSummaryQueryDescriptor() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  sub_23DBEC4C0(0, &qword_256CE9FB8, MEMORY[0x24BEE6830]);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 - 8) + 80);
  return sub_23DBEC0CC(a1, a2, v6, *(void **)(v3 + 16), v3 + v8, v3 + ((v9 + v11) & ~v11));
}

void sub_23DBEC4C0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, _QWORD))
{
  uint64_t SampleDaySummaryCollection;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    SampleDaySummaryCollection = type metadata accessor for TrainingLoadSampleDaySummaryCollection();
    v7 = sub_23DBD083C();
    v8 = a3(a1, SampleDaySummaryCollection, v7, MEMORY[0x24BEE3F20]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_23DBEC530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v5;

  v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void *static SleepingSampleDataType.allCases.getter()
{
  return &unk_250E88258;
}

BOOL sub_23DBEC578(char *a1, char *a2)
{
  return qword_23DC2F120[*a1] == qword_23DC2F120[*a2];
}

uint64_t sub_23DBEC59C()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBEC5E8()
{
  return sub_23DC2A88C();
}

uint64_t sub_23DBEC61C()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

void sub_23DBEC664(_QWORD *a1@<X8>)
{
  *a1 = &unk_250E88498;
}

HealthBalance::SleepingSampleDataType_optional __swiftcall SleepingSampleDataType.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0x4030201050005uLL >> (8 * rawValue);
  if ((unint64_t)rawValue >= 7)
    LOBYTE(v2) = 5;
  *v1 = v2;
  return (HealthBalance::SleepingSampleDataType_optional)rawValue;
}

uint64_t SleepingSampleDataType.rawValue.getter()
{
  char *v0;

  return qword_23DC2F120[*v0];
}

HealthBalance::SleepingSampleDataType_optional sub_23DBEC6B4(Swift::Int *a1)
{
  return SleepingSampleDataType.init(rawValue:)(*a1);
}

void sub_23DBEC6BC(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_23DC2F120[*v1];
}

uint64_t sub_23DBEC6D4()
{
  sub_23DBECCA8();
  return sub_23DC2A328();
}

uint64_t sub_23DBEC730()
{
  sub_23DBECCA8();
  return sub_23DC2A31C();
}

BOOL static SleepingSampleDataType.SortOrder.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SleepingSampleDataType.SortOrder.hash(into:)()
{
  return sub_23DC2A88C();
}

BOOL static SleepingSampleDataType.SortOrder.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

void *static SleepingSampleDataType.SortOrder.allCases.getter()
{
  return &unk_250E884C0;
}

uint64_t SleepingSampleDataType.SortOrder.hashValue.getter()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

void sub_23DBEC81C(_QWORD *a1@<X8>)
{
  *a1 = &unk_250E884E8;
}

BOOL sub_23DBEC82C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_23DBEC840(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_23DBEC854(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_23DBEC868(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

void *static SleepingSampleDataType.allCasesSortOrder.getter()
{
  void *v1;

  v1 = &unk_250E88510;
  sub_23DBEC9F4((uint64_t *)&v1);
  return v1;
}

void SleepingSampleDataType.sortOrder.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = 0x402030100uLL >> (8 * *v1);
}

void SleepingSampleDataType.sampleType.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_23DBEC90C()
{
  sub_23DBB2A2C(0, &qword_25431F138);
  return MEMORY[0x24263DAEC]((id)*MEMORY[0x24BDD35B8]);
}

uint64_t sub_23DBEC9F4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23DBED95C(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_23DBECCEC(v5);
  *a1 = v2;
  return result;
}

unint64_t sub_23DBECA60()
{
  unint64_t result;

  result = qword_25431F148;
  if (!qword_25431F148)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDataType, &type metadata for SleepingSampleDataType);
    atomic_store(result, (unint64_t *)&qword_25431F148);
  }
  return result;
}

uint64_t sub_23DBECAA4()
{
  return sub_23DBECB44(&qword_256CE9FD0, &qword_256CE9FD8);
}

unint64_t sub_23DBECAD4()
{
  unint64_t result;

  result = qword_256CE9FE0;
  if (!qword_256CE9FE0)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDataType.SortOrder, &type metadata for SleepingSampleDataType.SortOrder);
    atomic_store(result, (unint64_t *)&qword_256CE9FE0);
  }
  return result;
}

uint64_t sub_23DBECB18()
{
  return sub_23DBECB44(&qword_256CE9FE8, &qword_256CE9FF0);
}

uint64_t sub_23DBECB44(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    sub_23DBECB84(255, a2);
    result = MEMORY[0x24263E440](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23DBECB84(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_23DC2A3A0();
    if (!v4)
      atomic_store(v3, a2);
  }
}

ValueMetadata *type metadata accessor for SleepingSampleDataType()
{
  return &type metadata for SleepingSampleDataType;
}

uint64_t _s13HealthBalance22SleepingSampleDataTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23DBECC28 + 4 * byte_23DC2EEAA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23DBECC5C + 4 * byte_23DC2EEA5[v4]))();
}

uint64_t sub_23DBECC5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBECC64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBECC6CLL);
  return result;
}

uint64_t sub_23DBECC78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBECC80);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23DBECC84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBECC8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDataType.SortOrder()
{
  return &type metadata for SleepingSampleDataType.SortOrder;
}

unint64_t sub_23DBECCA8()
{
  unint64_t result;

  result = qword_256CE9FF8;
  if (!qword_256CE9FF8)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDataType, &type metadata for SleepingSampleDataType);
    atomic_store(result, (unint64_t *)&qword_256CE9FF8);
  }
  return result;
}

uint64_t sub_23DBECCEC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *__dst;

  v3 = a1[1];
  result = sub_23DC2A7CC();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_101;
    if (v3)
      return sub_23DBED444(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_104;
  v73 = a1;
  if (v3 >= 2)
  {
    v6 = v5 >> 1;
    v7 = sub_23DC2A37C();
    *(_QWORD *)(v7 + 16) = v6;
    v74 = v7;
    __dst = (char *)(v7 + 32);
    goto LABEL_13;
  }
  v8 = MEMORY[0x24BEE4AF8];
  __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
  if (v3 == 1)
  {
    v74 = MEMORY[0x24BEE4AF8];
LABEL_13:
    v9 = 0;
    v10 = (char *)MEMORY[0x24BEE4AF8];
    v11 = *a1;
    v75 = v3;
    v76 = *a1;
    do
    {
      v13 = v9++;
      if (v9 < v3)
        __asm { BR              X11 }
      if (v9 < v13)
        goto LABEL_96;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = sub_23DBED7C4(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v15 = *((_QWORD *)v10 + 2);
      v14 = *((_QWORD *)v10 + 3);
      v12 = v15 + 1;
      v11 = v76;
      if (v15 >= v14 >> 1)
      {
        v64 = sub_23DBED7C4((char *)(v14 > 1), v15 + 1, 1, v10);
        v11 = v76;
        v10 = v64;
      }
      *((_QWORD *)v10 + 2) = v12;
      v16 = v10 + 32;
      v17 = &v10[16 * v15 + 32];
      *(_QWORD *)v17 = v13;
      *((_QWORD *)v17 + 1) = v9;
      if (v15)
      {
        while (1)
        {
          v18 = v12 - 1;
          if (v12 >= 4)
          {
            v23 = &v16[16 * v12];
            v24 = *((_QWORD *)v23 - 8);
            v25 = *((_QWORD *)v23 - 7);
            v29 = __OFSUB__(v25, v24);
            v26 = v25 - v24;
            if (v29)
              goto LABEL_85;
            v28 = *((_QWORD *)v23 - 6);
            v27 = *((_QWORD *)v23 - 5);
            v29 = __OFSUB__(v27, v28);
            v21 = v27 - v28;
            v22 = v29;
            if (v29)
              goto LABEL_86;
            v30 = v12 - 2;
            v31 = &v16[16 * v12 - 32];
            v33 = *(_QWORD *)v31;
            v32 = *((_QWORD *)v31 + 1);
            v29 = __OFSUB__(v32, v33);
            v34 = v32 - v33;
            if (v29)
              goto LABEL_88;
            v29 = __OFADD__(v21, v34);
            v35 = v21 + v34;
            if (v29)
              goto LABEL_91;
            if (v35 >= v26)
            {
              v53 = &v16[16 * v18];
              v55 = *(_QWORD *)v53;
              v54 = *((_QWORD *)v53 + 1);
              v29 = __OFSUB__(v54, v55);
              v56 = v54 - v55;
              if (v29)
                goto LABEL_95;
              v46 = v21 < v56;
              goto LABEL_55;
            }
          }
          else
          {
            if (v12 != 3)
            {
              v47 = *((_QWORD *)v10 + 4);
              v48 = *((_QWORD *)v10 + 5);
              v29 = __OFSUB__(v48, v47);
              v40 = v48 - v47;
              v41 = v29;
              goto LABEL_49;
            }
            v20 = *((_QWORD *)v10 + 4);
            v19 = *((_QWORD *)v10 + 5);
            v29 = __OFSUB__(v19, v20);
            v21 = v19 - v20;
            v22 = v29;
          }
          if ((v22 & 1) != 0)
            goto LABEL_87;
          v30 = v12 - 2;
          v36 = &v16[16 * v12 - 32];
          v38 = *(_QWORD *)v36;
          v37 = *((_QWORD *)v36 + 1);
          v39 = __OFSUB__(v37, v38);
          v40 = v37 - v38;
          v41 = v39;
          if (v39)
            goto LABEL_90;
          v42 = &v16[16 * v18];
          v44 = *(_QWORD *)v42;
          v43 = *((_QWORD *)v42 + 1);
          v29 = __OFSUB__(v43, v44);
          v45 = v43 - v44;
          if (v29)
            goto LABEL_93;
          if (__OFADD__(v40, v45))
            goto LABEL_94;
          if (v40 + v45 >= v21)
          {
            v46 = v21 < v45;
LABEL_55:
            if (v46)
              v18 = v30;
            goto LABEL_57;
          }
LABEL_49:
          if ((v41 & 1) != 0)
            goto LABEL_89;
          v49 = &v16[16 * v18];
          v51 = *(_QWORD *)v49;
          v50 = *((_QWORD *)v49 + 1);
          v29 = __OFSUB__(v50, v51);
          v52 = v50 - v51;
          if (v29)
            goto LABEL_92;
          if (v52 < v40)
            goto LABEL_15;
LABEL_57:
          v57 = v18 - 1;
          if (v18 - 1 >= v12)
          {
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
            __break(1u);
LABEL_101:
            __break(1u);
            __break(1u);
            __break(1u);
            JUMPOUT(0x23DBED3ACLL);
          }
          if (!v11)
          {
            __break(1u);
            JUMPOUT(0x23DBED3B8);
          }
          v58 = v10;
          v59 = &v16[16 * v57];
          v60 = *(_QWORD *)v59;
          v61 = &v16[16 * v18];
          v62 = *((_QWORD *)v61 + 1);
          sub_23DBED500((char *)(v11 + *(_QWORD *)v59), (char *)(v11 + *(_QWORD *)v61), (char *)(v11 + v62), __dst);
          if (v1)
            goto LABEL_65;
          if (v62 < v60)
            goto LABEL_82;
          if (v18 > *((_QWORD *)v58 + 2))
            goto LABEL_83;
          *(_QWORD *)v59 = v60;
          *(_QWORD *)&v16[16 * v57 + 8] = v62;
          v63 = *((_QWORD *)v58 + 2);
          if (v18 >= v63)
            goto LABEL_84;
          v10 = v58;
          v12 = v63 - 1;
          memmove(&v16[16 * v18], v61 + 16, 16 * (v63 - 1 - v18));
          *((_QWORD *)v58 + 2) = v63 - 1;
          v11 = v76;
          if (v63 <= 2)
            goto LABEL_15;
        }
      }
      v12 = 1;
LABEL_15:
      v3 = v75;
    }
    while (v9 < v75);
    v8 = v74;
    goto LABEL_68;
  }
  v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  v10 = (char *)MEMORY[0x24BEE4AF8];
LABEL_68:
  v65 = v10;
  v74 = v8;
  if (v12 >= 2)
  {
    v66 = *v73;
    while (1)
    {
      v67 = v12 - 2;
      if (v12 < 2)
        goto LABEL_97;
      if (!v66)
        break;
      v68 = v65;
      v69 = *(_QWORD *)&v65[16 * v67 + 32];
      v70 = *(_QWORD *)&v65[16 * v12 + 24];
      sub_23DBED500((char *)(v66 + v69), (char *)(v66 + *(_QWORD *)&v65[16 * v12 + 16]), (char *)(v66 + v70), __dst);
      if (v1)
        goto LABEL_65;
      if (v70 < v69)
        goto LABEL_98;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v68 = sub_23DBED948((uint64_t)v68);
      if (v67 >= *((_QWORD *)v68 + 2))
        goto LABEL_99;
      v71 = &v68[16 * v67 + 32];
      *(_QWORD *)v71 = v69;
      *((_QWORD *)v71 + 1) = v70;
      v72 = *((_QWORD *)v68 + 2);
      if (v12 > v72)
        goto LABEL_100;
      memmove(&v68[16 * v12 + 16], &v68[16 * v12 + 32], 16 * (v72 - v12));
      v65 = v68;
      *((_QWORD *)v68 + 2) = v72 - 1;
      v12 = v72 - 1;
      if (v72 <= 2)
        goto LABEL_65;
    }
    __break(1u);
LABEL_104:
    sub_23DC2A688();
    __break(1u);
    JUMPOUT(0x23DBED408);
  }
LABEL_65:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v74 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DBED444(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  if (a3 != a2)
    return ((uint64_t (*)(void))((char *)&loc_23DBED49C + dword_23DBED4EC[*(unsigned __int8 *)(*a4 + a3 - 1)]))();
  return result;
}

uint64_t sub_23DBED500(char *__src, char *a2, char *a3, char *__dst)
{
  size_t v8;
  int64_t v9;
  uint64_t result;
  char *v11;
  const void *v12;
  char *v13;

  v13 = __src;
  v8 = a2 - __src;
  v9 = a3 - a2;
  v12 = __dst;
  if (a2 - __src >= a3 - a2)
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (__dst != a2 || a3 <= __dst)
        memmove(__dst, a2, a3 - a2);
      v11 = &__dst[v9];
      v13 = a2;
      if (__src < a2 && a3 != a2)
        __asm { BR              X0 }
      goto LABEL_16;
    }
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    if (__dst != __src || a2 <= __dst)
      memmove(__dst, __src, v8);
    v11 = &__dst[v8];
    if (a2 != __src && a2 < a3)
      __asm { BR              X15 }
LABEL_16:
    sub_23DBED8B8((void **)&v13, &v12, &v11);
    return 1;
  }
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

char *sub_23DBED7C4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DBED970();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_23DBED8B8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  int64_t v4;
  char *result;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 < 0)
  {
    result = (char *)sub_23DC2A6DC();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    if (result != v3 || result >= &v3[v4])
      return (char *)memmove(result, v3, v4);
  }
  return result;
}

char *sub_23DBED948(uint64_t a1)
{
  return sub_23DBED7C4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23DBED95C(uint64_t a1)
{
  return sub_23DBCD284(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

void sub_23DBED970()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CEA000)
  {
    sub_23DBED9C4();
    v0 = sub_23DC2A7E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CEA000);
  }
}

void sub_23DBED9C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CEA008)
  {
    v0 = sub_23DC2A454();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CEA008);
  }
}

unint64_t sub_23DBEDA20(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DBF346C(0, (unint64_t *)&unk_256CEA120);
  v2 = sub_23DC2A6C4();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23DBF34C0(v6, (uint64_t)v15, (unint64_t *)&qword_256CE95B0);
    result = sub_23DBF0CC0((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_23DBF345C(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DBEDB80(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DBF3944(0, &qword_256CEA148, (uint64_t (*)(uint64_t))sub_23DBF3818, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)sub_23DC2A6C4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    result = sub_23DBF0D48((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DBEDC9C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DBF3944(0, &qword_256CEA130, (uint64_t (*)(uint64_t))sub_23DBF27BC, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE30A0]);
  v2 = (_QWORD *)sub_23DC2A6C4();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = sub_23DBF0D48((uint64_t)v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23DBEDDB8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  sub_23DBF346C(0, (unint64_t *)&qword_256CEA110);
  v2 = sub_23DC2A6C4();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23DBF34C0(v6, (uint64_t)&v15, &qword_256CEA118);
    v7 = v15;
    v8 = v16;
    result = sub_23DBF0DC8(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_23DBF345C(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void SleepingSampleAnalysisFeatureStatusManager.status.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  swift_getKeyPath();
  sub_23DBB2CB0(&qword_256CEA018, type metadata accessor for SleepingSampleAnalysisFeatureStatusManager, (uint64_t)&protocol conformance descriptor for SleepingSampleAnalysisFeatureStatusManager);
  sub_23DC29FBC();
  swift_release();
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  v4 = v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_23DBF3568(v4, a1);
  os_unfair_lock_unlock(v5);
}

void sub_23DBEDFEC(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *a1;
  swift_getKeyPath();
  sub_23DBB2CB0(&qword_256CEA018, type metadata accessor for SleepingSampleAnalysisFeatureStatusManager, (uint64_t)&protocol conformance descriptor for SleepingSampleAnalysisFeatureStatusManager);
  sub_23DC29FBC();
  swift_release();
  v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  v5 = v4 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v4 + 16);
  v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_23DBEE0E4(v5, a2);
  os_unfair_lock_unlock(v6);
}

uint64_t type metadata accessor for SleepingSampleAnalysisFeatureStatusManager(uint64_t a1)
{
  return sub_23DBF3260(a1, qword_25431EDD0);
}

uint64_t sub_23DBEE0E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23DBF3568(a1, a2);
}

uint64_t (*SleepingSampleAnalysisFeatureStatusManager._unitTest_didReceiveObserverUpdate.getter())()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  swift_getKeyPath();
  v2 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
  swift_retain();
  os_unfair_lock_lock(v2);
  v4 = sub_23DBEE594();
  if (v4)
  {
    v5 = v3;
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_23DBF3AE8;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  os_unfair_lock_unlock(v2);
  swift_release_n();
  if (!v4)
    return 0;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  return sub_23DBEE5C0;
}

uint64_t sub_23DBEE214@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  result = (uint64_t)SleepingSampleAnalysisFeatureStatusManager._unitTest_didReceiveObserverUpdate.getter();
  if (result)
  {
    v4 = result;
    v5 = v3;
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v4;
    *(_QWORD *)(result + 24) = v5;
    v6 = sub_23DBEE5C0;
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_23DBEE278(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v1 = *a1;
  v2 = a1[1];
  if (*a1)
  {
    a1 = (uint64_t *)swift_allocObject();
    a1[2] = v1;
    a1[3] = v2;
    v3 = sub_23DBF3AE8;
  }
  else
  {
    v3 = 0;
  }
  MEMORY[0x24BDAC7A8](a1);
  v5 = v4 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v4 + 16);
  v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  sub_23DBDDBBC(v1);
  os_unfair_lock_lock(v6);
  sub_23DBF3328(v5);
  os_unfair_lock_unlock(v6);
  return sub_23DBC9C24((uint64_t)v3);
}

uint64_t SleepingSampleAnalysisFeatureStatusManager._unitTest_didReceiveObserverUpdate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  v6 = v5 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v5 + 16);
  v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_23DBEE5E0(v6, a1, a2);
  os_unfair_lock_unlock(v7);
  return sub_23DBC9C24(a1);
}

uint64_t sub_23DBEE414@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0) + 24));
  v4 = *v3;
  v5 = v3[1];
  if (*v3)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = sub_23DBF3AE8;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_23DBDDBBC(v4);
}

uint64_t sub_23DBEE490(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_23DBF3AE8;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = (uint64_t *)(a2 + *(int *)(type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0) + 24));
  v8 = *v7;
  sub_23DBDDBBC(v3);
  result = sub_23DBC9C24(v8);
  *v7 = (uint64_t)v6;
  v7[1] = v5;
  return result;
}

uint64_t (*sub_23DBEE530())()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  swift_getAtKeyPath();
  if (!v2)
    return 0;
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v3;
  return sub_23DBF3AE8;
}

uint64_t (*sub_23DBEE594())()
{
  return sub_23DBEE530();
}

uint64_t sub_23DBEE59C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DBEE5C0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_23DBEE5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;

  v5 = (uint64_t *)(a1 + *(int *)(type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0) + 24));
  v6 = *v5;
  sub_23DBDDBBC(a2);
  result = sub_23DBC9C24(v6);
  *v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t (*SleepingSampleAnalysisFeatureStatusManager._unitTest_didReceiveObserverUpdate.modify(uint64_t (**a1)()))(uint64_t *a1, char a2)
{
  uint64_t (*v1)();
  uint64_t (*v3)();

  a1[2] = v1;
  *a1 = SleepingSampleAnalysisFeatureStatusManager._unitTest_didReceiveObserverUpdate.getter();
  a1[1] = v3;
  return sub_23DBEE680;
}

uint64_t sub_23DBEE680(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v2 = a1[1];
  v3 = *(_QWORD *)(a1[2] + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  v4 = *a1;
  v5 = v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16);
  v6 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  if ((a2 & 1) != 0)
  {
    sub_23DBDDBBC(*a1);
    os_unfair_lock_lock(v6);
    sub_23DBEE5E0(v5, v4, v2);
    os_unfair_lock_unlock(v6);
    sub_23DBC9C24(v4);
  }
  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL)));
    sub_23DBEE5E0(v5, v4, v2);
    os_unfair_lock_unlock(v6);
  }
  return sub_23DBC9C24(v4);
}

id SleepingSampleAnalysisFeatureStatusManager.__allocating_init(healthStore:observationQueue:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  uint64_t v5;
  id v6;
  id v7;

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = objc_allocWithZone(v2);
  v7 = sub_23DBF2548(a2, (uint64_t)sub_23DBEE828, v5);
  swift_release();

  return v7;
}

uint64_t sub_23DBEE804()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_23DBEE828(uint64_t a1)
{
  uint64_t v1;

  return objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD3BF8]), sel_initWithFeatureIdentifier_healthStore_, a1, *(_QWORD *)(v1 + 16));
}

id SleepingSampleAnalysisFeatureStatusManager.__allocating_init(observationQueue:makeFeatureStatusProviderForFeatureIdentifier:)(void *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;
  id v8;

  v7 = objc_allocWithZone(v3);
  v8 = sub_23DBF2548(a1, a2, a3);
  swift_release();

  return v8;
}

id SleepingSampleAnalysisFeatureStatusManager.init(observationQueue:makeFeatureStatusProviderForFeatureIdentifier:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4;

  v4 = sub_23DBF2548(a1, a2, a3);
  swift_release();

  return v4;
}

Swift::Void __swiftcall SleepingSampleAnalysisFeatureStatusManager.startObserving()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t KeyPath;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;

  v1 = v0;
  ObjectType = swift_getObjectType();
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  v4 = v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  v6 = *(int *)(type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0) + 20);
  if ((*(_BYTE *)(v4 + v6) & 1) != 0)
  {
    os_unfair_lock_unlock(v5);
    if (qword_25431F3A8 != -1)
      swift_once();
    v7 = sub_23DC29FF8();
    __swift_project_value_buffer(v7, (uint64_t)qword_25431F3C8);
    v35 = sub_23DC29FE0();
    v8 = sub_23DC2A46C();
    if (os_log_type_enabled(v35, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v36 = v10;
      *(_DWORD *)v9 = 136446210;
      v11 = sub_23DC2A97C();
      sub_23DBF0610(v11, v12, &v36);
      sub_23DC2A4CC();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DBAF000, v35, v8, "[%{public}s] Already observing", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24263E4E8](v10, -1, -1);
      MEMORY[0x24263E4E8](v9, -1, -1);

    }
    else
    {

    }
    return;
  }
  *(_BYTE *)(v4 + v6) = 1;
  os_unfair_lock_unlock(v5);
  if (qword_25431F3A8 != -1)
    swift_once();
  v13 = sub_23DC29FF8();
  __swift_project_value_buffer(v13, (uint64_t)qword_25431F3C8);
  v14 = sub_23DC29FE0();
  v15 = sub_23DC2A46C();
  v34 = ObjectType;
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v36 = v17;
    *(_DWORD *)v16 = 136446210;
    v18 = sub_23DC2A97C();
    sub_23DBF0610(v18, v19, &v36);
    sub_23DC2A4CC();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23DBAF000, v14, v15, "[%{public}s] Beginning observation", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24263E4E8](v17, -1, -1);
    MEMORY[0x24263E4E8](v16, -1, -1);
  }

  v20 = sub_23DBF2484();
  v21 = sub_23DBF23B8(v20, *(void (**)(void))(v1+ OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_featureStatusProviderForFeatureIdentifier));
  swift_bridgeObjectRelease();
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    v22 = sub_23DC2A6A0();
    swift_bridgeObjectRelease();
    if (v22)
      goto LABEL_12;
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v22)
    {
LABEL_12:
      if (v22 < 1)
      {
        __break(1u);
        return;
      }
      v23 = 0;
      v24 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_observationQueue);
      do
      {
        if ((v21 & 0xC000000000000001) != 0)
        {
          v25 = (void *)MEMORY[0x24263DC24](v23, v21);
        }
        else
        {
          v25 = *(void **)(v21 + 8 * v23 + 32);
          swift_unknownObjectRetain();
        }
        ++v23;
        objc_msgSend(v25, sel_registerObserver_queue_, v1, v24, v34);
        swift_unknownObjectRelease();
      }
      while (v22 != v23);
    }
  }
  v26 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v26);
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  v36 = v1;
  sub_23DBB2CB0(&qword_256CEA018, type metadata accessor for SleepingSampleAnalysisFeatureStatusManager, (uint64_t)&protocol conformance descriptor for SleepingSampleAnalysisFeatureStatusManager);
  sub_23DC29FB0();
  swift_release();
  v28 = sub_23DC29FE0();
  v29 = sub_23DC2A46C();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v36 = v31;
    *(_DWORD *)v30 = 136446210;
    v32 = sub_23DC2A97C();
    sub_23DBF0610(v32, v33, &v36);
    sub_23DC2A4CC();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23DBAF000, v28, v29, "[%{public}s] Retrieved initial feature status", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24263E4E8](v31, -1, -1);
    MEMORY[0x24263E4E8](v30, -1, -1);
  }

}

uint64_t sub_23DBEF0C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  sub_23DBB89B8(0, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v8 - v4;
  result = SleepingSampleAnalysisFeatureStatusManager.currentStatus()((uint64_t)&v8 - v4);
  if (!v1)
  {
    v7 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 0, 1, v7);
    return sub_23DBF3618((uint64_t)v5, a1);
  }
  return result;
}

uint64_t SleepingSampleAnalysisFeatureStatusManager.currentStatus()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  _QWORD *v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t result;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  id v42[5];

  v42[4] = *(id *)MEMORY[0x24BDAC8D0];
  sub_23DBEDC9C(MEMORY[0x24BEE4AF8]);
  type metadata accessor for HKFeatureIdentifier(0);
  sub_23DBF27BC();
  sub_23DBB2CB0(&qword_25431F0A8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2610]);
  sub_23DBB2CB0(&qword_25431F090, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2608]);
  sub_23DBB2CB0(&qword_25431F098, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DC2B5C0);
  v39 = a1;
  sub_23DC2A0C4();
  v3 = sub_23DBF2484();
  v4 = sub_23DBF23B8(v3, *(void (**)(void))(v1+ OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_featureStatusProviderForFeatureIdentifier));
  swift_bridgeObjectRelease();
  if (v4 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    v5 = sub_23DC2A6A0();
    swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return swift_bridgeObjectRelease();
LABEL_3:
  v37 = v4;
  v38 = v4 & 0xC000000000000001;
  v6 = 4;
  v36 = v5;
  while (1)
  {
    v8 = v6 - 4;
    if (v38)
    {
      v9 = (void *)MEMORY[0x24263DC24](v6 - 4, v4);
      v10 = v6 - 3;
      if (__OFADD__(v8, 1))
        goto LABEL_25;
    }
    else
    {
      v9 = *(void **)(v4 + 8 * v6);
      swift_unknownObjectRetain();
      v10 = v6 - 3;
      if (__OFADD__(v8, 1))
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    v42[0] = 0;
    v11 = objc_msgSend(v9, sel_featureStatusWithError_, v42);
    if (!v11)
    {
      v34 = v42[0];
      swift_bridgeObjectRelease();
      sub_23DC29D04();

      swift_willThrow();
      swift_unknownObjectRelease();
      return sub_23DBB2BB0(v39, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAnalysisFeatureStatus);
    }
    v12 = v11;
    v40 = v10;
    v13 = v42[0];
    v14 = objc_msgSend(v9, sel_featureIdentifier);
    v15 = v12;
    sub_23DBF27F8();
    v4 = sub_23DC2A088();
    v17 = v16;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = (_QWORD *)*v17;
    v41 = (_QWORD *)*v17;
    *v17 = 0x8000000000000000;
    v21 = sub_23DBF0D48((uint64_t)v14);
    v22 = v19[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      goto LABEL_26;
    v25 = v20;
    if (v19[3] < v24)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v28 = v41;
      if ((v20 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      sub_23DBF1E64();
      v28 = v41;
      if ((v25 & 1) != 0)
      {
LABEL_4:
        v7 = v28[7];

        *(_QWORD *)(v7 + 8 * v21) = v15;
        goto LABEL_5;
      }
    }
LABEL_19:
    v28[(v21 >> 6) + 8] |= 1 << v21;
    v29 = 8 * v21;
    *(_QWORD *)(v28[6] + v29) = v14;
    *(_QWORD *)(v28[7] + v29) = v15;
    v30 = v28[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_27;
    v28[2] = v32;
    v33 = v14;
LABEL_5:
    *v17 = v28;

    swift_bridgeObjectRelease();
    ((void (*)(id *, _QWORD))v4)(v42, 0);
    swift_unknownObjectRelease();

    ++v6;
    v4 = v37;
    if (v40 == v36)
      return swift_bridgeObjectRelease();
  }
  sub_23DBF1510(v24, isUniquelyReferenced_nonNull_native);
  v26 = sub_23DBF0D48((uint64_t)v14);
  if ((v25 & 1) == (v27 & 1))
  {
    v21 = v26;
    v28 = v41;
    if ((v25 & 1) != 0)
      goto LABEL_4;
    goto LABEL_19;
  }
  result = sub_23DC2A844();
  __break(1u);
  return result;
}

Swift::Void __swiftcall SleepingSampleAnalysisFeatureStatusManager.stopObserving()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  swift_getObjectType();
  if (qword_25431F3A8 != -1)
    swift_once();
  v2 = sub_23DC29FF8();
  __swift_project_value_buffer(v2, (uint64_t)qword_25431F3C8);
  v3 = sub_23DC29FE0();
  v4 = sub_23DC2A46C();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v16 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = sub_23DC2A97C();
    v15 = sub_23DBF0610(v7, v8, &v16);
    sub_23DC2A4CC();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23DBAF000, v3, v4, "[%{public}s] Ending observation", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24263E4E8](v6, -1, -1);
    MEMORY[0x24263E4E8](v5, -1, -1);
  }

  v9 = sub_23DBF2484();
  v10 = sub_23DBF23B8(v9, *(void (**)(void))(v1+ OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_featureStatusProviderForFeatureIdentifier));
  swift_bridgeObjectRelease();
  if (!(v10 >> 62))
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v11)
      goto LABEL_7;
LABEL_14:
    swift_bridgeObjectRelease();
    KeyPath = swift_getKeyPath();
    MEMORY[0x24BDAC7A8](KeyPath);
    v16 = v1;
    sub_23DBB2CB0(&qword_256CEA018, type metadata accessor for SleepingSampleAnalysisFeatureStatusManager, (uint64_t)&protocol conformance descriptor for SleepingSampleAnalysisFeatureStatusManager);
    sub_23DC29FB0();
    swift_release();
    return;
  }
  swift_bridgeObjectRetain();
  v11 = sub_23DC2A6A0();
  swift_bridgeObjectRelease();
  if (!v11)
    goto LABEL_14;
LABEL_7:
  if (v11 >= 1)
  {
    for (i = 0; i != v11; ++i)
    {
      if ((v10 & 0xC000000000000001) != 0)
      {
        v13 = (void *)MEMORY[0x24263DC24](i, v10);
      }
      else
      {
        v13 = *(void **)(v10 + 8 * i + 32);
        swift_unknownObjectRetain();
      }
      objc_msgSend(v13, sel_unregisterObserver_, v1, v15, v16);
      swift_unknownObjectRelease();
    }
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t sub_23DBEF898(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  sub_23DBB89B8(0, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - v3;
  *(_BYTE *)(a1 + *(int *)(type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0) + 20)) = 0;
  sub_23DBEDC9C(MEMORY[0x24BEE4AF8]);
  type metadata accessor for HKFeatureIdentifier(0);
  sub_23DBF27BC();
  sub_23DBB2CB0(&qword_25431F0A8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2610]);
  sub_23DBB2CB0(&qword_25431F090, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2608]);
  sub_23DBB2CB0(&qword_25431F098, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DC2B5C0);
  sub_23DC2A0C4();
  v5 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
  return sub_23DBF3618((uint64_t)v4, a1);
}

void sub_23DBEFA08(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  v4 = v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  a2(v4);
  os_unfair_lock_unlock(v5);
}

void SleepingSampleAnalysisFeatureStatusManager.featureStatusProviding(_:didUpdate:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  swift_getObjectType();
  v4 = objc_msgSend(a1, sel_featureIdentifier);
  if (qword_25431F3A8 != -1)
    swift_once();
  v5 = sub_23DC29FF8();
  __swift_project_value_buffer(v5, (uint64_t)qword_25431F3C8);
  v6 = v4;
  v7 = sub_23DC29FE0();
  v8 = sub_23DC2A46C();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v19 = v18;
    *(_DWORD *)v9 = 136446466;
    v10 = sub_23DC2A97C();
    sub_23DBF0610(v10, v11, &v19);
    sub_23DC2A4CC();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2082;
    v12 = sub_23DC2A244();
    sub_23DBF0610(v12, v13, &v19);
    sub_23DC2A4CC();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23DBAF000, v7, v8, "[%{public}s] Received status update for %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24263E4E8](v18, -1, -1);
    MEMORY[0x24263E4E8](v9, -1, -1);

  }
  else
  {

  }
  MEMORY[0x24BDAC7A8](v14);
  KeyPath = swift_getKeyPath();
  MEMORY[0x24BDAC7A8](KeyPath);
  v19 = v2;
  sub_23DBB2CB0(&qword_256CEA018, type metadata accessor for SleepingSampleAnalysisFeatureStatusManager, (uint64_t)&protocol conformance descriptor for SleepingSampleAnalysisFeatureStatusManager);
  sub_23DC29FB0();
  swift_release();
  v16 = SleepingSampleAnalysisFeatureStatusManager._unitTest_didReceiveObserverUpdate.getter();
  if (v16)
  {
    v17 = (uint64_t)v16;
    v16();

    sub_23DBC9C24(v17);
  }
  else
  {

  }
}

void sub_23DBEFDAC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  id v19;
  id v20;
  void (*v21)(uint64_t *, _QWORD);
  uint64_t *v22;
  uint64_t *v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD v35[5];
  id v36;
  uint64_t v37[4];
  uint64_t v38;

  sub_23DBB89B8(0, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v35 - v12;
  if (*(_BYTE *)(a1 + *(int *)(type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0) + 20)) == 1)
  {
    v36 = a4;
    sub_23DBF3568(a1, (uint64_t)v13);
    v14 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
    v17 = v16(v13, 1, v14);
    sub_23DBF35C4((uint64_t)v13);
    if (v17 == 1)
    {
      v35[3] = sub_23DBEDC9C(MEMORY[0x24BEE4AF8]);
      type metadata accessor for HKFeatureIdentifier(0);
      v35[2] = v18;
      v35[4] = v4;
      v35[1] = sub_23DBF27BC();
      sub_23DBB2CB0(&qword_25431F0A8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2610]);
      sub_23DBB2CB0(&qword_25431F090, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2608]);
      sub_23DBB2CB0(&qword_25431F098, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DC2B5C0);
      sub_23DC2A0C4();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      sub_23DBF3618((uint64_t)v11, a1);
    }
    if (!v16((char *)a1, 1, v14))
    {
      v19 = a3;
      v20 = v36;
      sub_23DBF27F8();
      v21 = (void (*)(uint64_t *, _QWORD))sub_23DC2A088();
      v23 = v22;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v38 = *v23;
      *v23 = 0x8000000000000000;
      sub_23DBF1B70((uint64_t)v20, v19, isUniquelyReferenced_nonNull_native);
      *v23 = v38;

      swift_bridgeObjectRelease();
      v21(v37, 0);
    }
  }
  else
  {
    if (qword_25431F3A8 != -1)
      swift_once();
    v25 = sub_23DC29FF8();
    __swift_project_value_buffer(v25, (uint64_t)qword_25431F3C8);
    v26 = a3;
    v27 = sub_23DC29FE0();
    v28 = sub_23DC2A46C();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc();
      v30 = swift_slowAlloc();
      v37[0] = v30;
      *(_DWORD *)v29 = 136446466;
      v31 = sub_23DC2A97C();
      v38 = sub_23DBF0610(v31, v32, v37);
      sub_23DC2A4CC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2082;
      v33 = sub_23DC2A244();
      v38 = sub_23DBF0610(v33, v34, v37);
      sub_23DC2A4CC();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23DBAF000, v27, v28, "[%{public}s] Ignoring received update for %{public}s; not observing",
        (uint8_t *)v29,
        0x16u);
      swift_arrayDestroy();
      MEMORY[0x24263E4E8](v30, -1, -1);
      MEMORY[0x24263E4E8](v29, -1, -1);

    }
    else
    {

    }
  }
}

id SleepingSampleAnalysisFeatureStatusManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SleepingSampleAnalysisFeatureStatusManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SleepingSampleAnalysisFeatureStatusManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_23DBF0364(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *v1;
  swift_getKeyPath();
  sub_23DBB2CB0(&qword_256CEA018, type metadata accessor for SleepingSampleAnalysisFeatureStatusManager, (uint64_t)&protocol conformance descriptor for SleepingSampleAnalysisFeatureStatusManager);
  sub_23DC29FBC();
  swift_release();
  v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState);
  v5 = v4 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v4 + 16);
  v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(_QWORD *)v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  sub_23DBEE0E4(v5, a1);
  os_unfair_lock_unlock(v6);
}

void sub_23DBF0444()
{
  SleepingSampleAnalysisFeatureStatusManager.startObserving()();
}

void sub_23DBF0464()
{
  SleepingSampleAnalysisFeatureStatusManager.stopObserving()();
}

uint64_t sub_23DBF0484(void *a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  _QWORD *v2;
  char v3;
  _QWORD *v4;
  id v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;

  v4 = v2;
  v6 = a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *v2;
  v26 = v8;
  *v4 = 0x8000000000000000;
  v10 = sub_23DBF0D48((uint64_t)v6);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_12;
  }
  v3 = v9;
  if (*(_QWORD *)(v8 + 24) >= v13)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_6;
LABEL_12:
    sub_23DBF1CC0();
    v8 = v26;
    goto LABEL_6;
  }
  sub_23DBF11E4(v13, isUniquelyReferenced_nonNull_native);
  v8 = v26;
  v14 = sub_23DBF0D48((uint64_t)v6);
  if ((v3 & 1) != (v15 & 1))
    goto LABEL_14;
  v10 = v14;
LABEL_6:
  *v4 = v8;
  swift_bridgeObjectRelease();
  v16 = (_QWORD *)*v4;
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRetain();
LABEL_10:
    v23 = v16[7];
    swift_bridgeObjectRelease();
    v24 = *(_QWORD *)(v23 + 8 * v10);
    swift_unknownObjectRetain();

    return v24;
  }
  v17 = swift_bridgeObjectRetain();
  a2(&v26, v17);
  v16[(v10 >> 6) + 8] |= 1 << v10;
  v18 = 8 * v10;
  *(_QWORD *)(v16[6] + v18) = v6;
  *(_QWORD *)(v16[7] + v18) = v26;
  v19 = v16[2];
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (!v20)
  {
    v16[2] = v21;
    v22 = v6;
    goto LABEL_10;
  }
  __break(1u);
LABEL_14:
  type metadata accessor for HKFeatureIdentifier(0);
  result = sub_23DC2A844();
  __break(1u);
  return result;
}

uint64_t sub_23DBF0610(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_23DBF06E0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_23DBB8948((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_23DBB8948((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_23DBF06E0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_23DC2A4D8();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_23DBF0898(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_23DC2A5F8();
  if (!v8)
  {
    sub_23DC2A688();
    __break(1u);
LABEL_17:
    result = sub_23DC2A6DC();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_23DBF0898(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_23DBF092C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23DBF0B78(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_23DBF0B78(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_23DBF092C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_23DBF0AA0(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_23DC2A5B0();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_23DC2A688();
      __break(1u);
LABEL_10:
      v2 = sub_23DC2A2B0();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_23DC2A6DC();
    __break(1u);
LABEL_14:
    result = sub_23DC2A688();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_23DBF0AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_23DBF3674();
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_23DBF0B00(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_23DC2A2EC();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x24263D930](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_23DBF0B78(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_23DBF3674();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23DC2A6DC();
  __break(1u);
  return result;
}

unint64_t sub_23DBF0CC0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23DC2A550();
  return sub_23DBF0E2C(a1, v2);
}

unint64_t sub_23DBF0CF0(unsigned __int8 a1)
{
  uint64_t v2;

  sub_23DC2A880();
  sub_23DC2A88C();
  v2 = sub_23DC2A8B0();
  return sub_23DBF0EF0(a1, v2);
}

unint64_t sub_23DBF0D48(uint64_t a1)
{
  uint64_t v2;

  sub_23DC2A244();
  sub_23DC2A880();
  sub_23DC2A28C();
  v2 = sub_23DC2A8B0();
  swift_bridgeObjectRelease();
  return sub_23DBF0F90(a1, v2);
}

unint64_t sub_23DBF0DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DC2A880();
  sub_23DC2A28C();
  v4 = sub_23DC2A8B0();
  return sub_23DBF1104(a1, a2, v4);
}

unint64_t sub_23DBF0E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_23DBDFC2C(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x24263DBC4](v9, a1);
      sub_23DBB8914((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_23DBF0EF0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_23DBF0F90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_23DC2A244();
    v8 = v7;
    if (v6 == sub_23DC2A244() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_23DC2A244();
          v15 = v14;
          if (v13 == sub_23DC2A244() && v15 == v16)
            break;
          v18 = sub_23DC2A7FC();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_23DBF1104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_23DC2A7FC() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_23DC2A7FC() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_23DBF11E4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  sub_23DBF3944(0, &qword_256CEA148, (uint64_t (*)(uint64_t))sub_23DBF3818, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE30A0]);
  v38 = a2;
  v6 = sub_23DC2A6B8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v13++, 1))
      goto LABEL_40;
    if (v13 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v13);
    if (!v24)
    {
      v25 = v13 + 1;
      if (v13 + 1 >= v36)
      {
LABEL_31:
        swift_release();
        v3 = v35;
        if ((v38 & 1) == 0)
          goto LABEL_38;
        goto LABEL_34;
      }
      v24 = *(_QWORD *)(v37 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          v13 = v25 + 1;
          if (__OFADD__(v25, 1))
            break;
          if (v13 >= v36)
            goto LABEL_31;
          v24 = *(_QWORD *)(v37 + 8 * v13);
          ++v25;
          if (v24)
            goto LABEL_20;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v13;
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_21:
    v26 = 8 * v21;
    v27 = *(void **)(*(_QWORD *)(v5 + 48) + v26);
    v28 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v26);
    if ((v38 & 1) == 0)
    {
      v29 = v27;
      swift_unknownObjectRetain();
    }
    sub_23DC2A244();
    sub_23DC2A880();
    sub_23DC2A28C();
    v14 = sub_23DC2A8B0();
    result = swift_bridgeObjectRelease();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v17 == v31;
        if (v17 == v31)
          v17 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v11 + 8 * v17);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(_QWORD *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v27;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v28;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23DBF1510(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  sub_23DBF3944(0, &qword_256CEA130, (uint64_t (*)(uint64_t))sub_23DBF27BC, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE30A0]);
  v39 = a2;
  v6 = sub_23DC2A6B8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v36 = v2;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_33;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v37)
              goto LABEL_33;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = 8 * v21;
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + v30);
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + v30);
    if ((v39 & 1) == 0)
    {
      v33 = v31;
      v34 = v32;
    }
    sub_23DC2A244();
    sub_23DC2A880();
    sub_23DC2A28C();
    v14 = sub_23DC2A8B0();
    result = swift_bridgeObjectRelease();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 8 * v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v31;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_23DBF1850(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38[2];

  v3 = v2;
  v5 = *v2;
  sub_23DBF3340();
  v37 = a2;
  v6 = sub_23DC2A6B8();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v35)
        goto LABEL_34;
      v20 = *(_QWORD *)(v36 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v35)
              goto LABEL_34;
            v20 = *(_QWORD *)(v36 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((v37 & 1) != 0)
    {
      sub_23DBF3444(v25, (uint64_t)v38);
    }
    else
    {
      sub_23DBF3400((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    sub_23DC2A880();
    sub_23DC2A28C();
    result = sub_23DC2A8B0();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    result = sub_23DBF3444(v38, *(_QWORD *)(v7 + 56) + 40 * v14);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v19 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

void sub_23DBF1B70(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;

  v4 = v3;
  v7 = *v3;
  v9 = sub_23DBF0D48((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_23DBF1E64();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_23DBF1510(v12, a3 & 1);
  v17 = sub_23DBF0D48((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  type metadata accessor for HKFeatureIdentifier(0);
  sub_23DC2A844();
  __break(1u);
}

void *sub_23DBF1CC0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_23DBF3944(0, &qword_256CEA148, (uint64_t (*)(uint64_t))sub_23DBF3818, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE30A0]);
  v2 = *v0;
  v3 = sub_23DC2A6AC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    if (!v21)
      break;
LABEL_23:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_unknownObjectRetain();
  }
  v22 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

id sub_23DBF1E64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_23DBF3944(0, &qword_256CEA130, (uint64_t (*)(uint64_t))sub_23DBF27BC, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE30A0]);
  v2 = *v0;
  v3 = sub_23DC2A6AC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_23DBF201C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  sub_23DBF3340();
  v2 = *v0;
  v3 = sub_23DC2A6AC();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_23DBF3400(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_23DBF3444(v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_23DBF2200(uint64_t *a1@<X0>, os_unfair_lock_s *a2@<X1>, _QWORD *a3@<X8>)
{
  os_unfair_lock_s *v4;
  uint64_t v5[2];

  v5[1] = *a1;
  v4 = a2 + 6;
  os_unfair_lock_lock(a2 + 6);
  sub_23DBF38DC(v5);
  os_unfair_lock_unlock(v4);
  *a3 = v5[0];
}

void sub_23DBF2274(id *a1@<X1>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;

  v3 = *a1;
  v4 = sub_23DBF0484(v3, (void (*)(uint64_t *__return_ptr, uint64_t))sub_23DBF38F8);

  *a2 = v4;
}

unint64_t sub_23DBF22E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  unsigned __int8 v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_23DBF39E0();
    v3 = (_QWORD *)sub_23DC2A6C4();
    for (i = (_OWORD *)(a1 + 40); ; i = (_OWORD *)((char *)i + 24))
    {
      v5 = *((_BYTE *)i - 8);
      v11 = *i;
      result = sub_23DBF0CF0(v5);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v3[6] + result) = v5;
      *(_OWORD *)(v3[7] + 16 * result) = v11;
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

uint64_t sub_23DBF23B8(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t result;
  void **v6;
  void *v7;
  id v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v9 = MEMORY[0x24BEE4AF8];
    sub_23DC2A628();
    v6 = (void **)(a1 + 32);
    do
    {
      v7 = *v6++;
      v8 = v7;
      a2();

      sub_23DC2A604();
      sub_23DC2A634();
      sub_23DC2A640();
      sub_23DC2A610();
      --v3;
    }
    while (v3);
    return v9;
  }
  return result;
}

uint64_t sub_23DBF2484()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  sub_23DBB89B8(0, &qword_256CEA140, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_23DC2D050;
  v1 = (void *)*MEMORY[0x24BDD2E80];
  v2 = (void *)*MEMORY[0x24BDD2E78];
  *(_QWORD *)(v0 + 32) = *MEMORY[0x24BDD2E80];
  *(_QWORD *)(v0 + 40) = v2;
  v3 = (void *)*MEMORY[0x24BDD2E58];
  v4 = (void *)*MEMORY[0x24BDD2E88];
  *(_QWORD *)(v0 + 48) = *MEMORY[0x24BDD2E58];
  *(_QWORD *)(v0 + 56) = v4;
  v5 = (void *)*MEMORY[0x24BDD2E48];
  *(_QWORD *)(v0 + 64) = *MEMORY[0x24BDD2E48];
  v6 = v1;
  v7 = v2;
  v8 = v3;
  v9 = v4;
  v10 = v5;
  return v0;
}

id sub_23DBF2548(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  objc_class *ObjectType;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t (**v22)(uint64_t);
  id v23;
  objc_super v25;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  v9 = type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_lockedState;
  v13 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 1, 1, v13);
  v11[*(int *)(v9 + 20)] = 0;
  v14 = &v11[*(int *)(v9 + 24)];
  sub_23DBF36C8();
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = swift_allocObject();
  *(_DWORD *)(v15 + ((*(unsigned int *)(*(_QWORD *)v15 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_23DBF372C((uint64_t)v11, v15 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v15 + 16));
  v16 = v4;
  sub_23DBB2BB0((uint64_t)v11, type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State);
  *(_QWORD *)&v4[v12] = v15;
  sub_23DC29FC8();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  swift_retain();
  v18 = sub_23DBEDB80(MEMORY[0x24BEE4AF8]);
  sub_23DBF379C();
  v19 = swift_allocObject();
  *(_DWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 16) = v18;
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = v19;
  v20[3] = sub_23DBF3770;
  v20[4] = v17;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_23DBF3898;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = (uint64_t (**)(uint64_t))&v16[OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_featureStatusProviderForFeatureIdentifier];
  *v22 = sub_23DBF38A4;
  v22[1] = (uint64_t (*)(uint64_t))v21;
  *(_QWORD *)&v16[OBJC_IVAR____TtC13HealthBalance42SleepingSampleAnalysisFeatureStatusManager_observationQueue] = a1;
  v23 = a1;

  v25.receiver = v16;
  v25.super_class = ObjectType;
  return objc_msgSendSuper2(&v25, sel_init);
}

uint64_t sub_23DBF2788(uint64_t a1)
{
  return sub_23DBEF0C8(a1);
}

void sub_23DBF27A0()
{
  uint64_t v0;

  sub_23DBEFA08(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

unint64_t sub_23DBF27BC()
{
  unint64_t result;

  result = qword_25431F080;
  if (!qword_25431F080)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25431F080);
  }
  return result;
}

void sub_23DBF27F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25431F070)
  {
    type metadata accessor for HKFeatureIdentifier(255);
    sub_23DBF27BC();
    sub_23DBB2CB0(&qword_25431F0A8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2610]);
    sub_23DBB2CB0(&qword_25431F090, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2608]);
    sub_23DBB2CB0(&qword_25431F098, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DC2B5C0);
    v0 = sub_23DC2A0B8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25431F070);
  }
}

void sub_23DBF28D8(uint64_t a1)
{
  uint64_t v1;

  sub_23DBEFDAC(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_23DBF28F4(uint64_t a1)
{
  uint64_t result;

  result = sub_23DBB2CB0(&qword_256CEA018, type metadata accessor for SleepingSampleAnalysisFeatureStatusManager, (uint64_t)&protocol conformance descriptor for SleepingSampleAnalysisFeatureStatusManager);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of SleepingSampleAnalysisFeatureStatusProviding.status.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SleepingSampleAnalysisFeatureStatusProviding.startObserving()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SleepingSampleAnalysisFeatureStatusProviding.stopObserving()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_23DBF2950()
{
  return type metadata accessor for SleepingSampleAnalysisFeatureStatusManager(0);
}

uint64_t sub_23DBF2958()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DC29FD4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SleepingSampleAnalysisFeatureStatusManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepingSampleAnalysisFeatureStatusManager.__allocating_init(observationQueue:makeFeatureStatusProviderForFeatureIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t *sub_23DBF2A00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      sub_23DBB89B8(0, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      sub_23DBF27F8();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    if (*v14)
    {
      v15 = v14[1];
      *v13 = *v14;
      v13[1] = v15;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
    }
  }
  return a1;
}

uint64_t sub_23DBF2B30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4);
  if (!(_DWORD)result)
  {
    sub_23DBF27F8();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(_QWORD *)(a1 + *(int *)(a2 + 24)))
    return swift_release();
  return result;
}

char *sub_23DBF2BB0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_23DBB89B8(0, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    sub_23DBF27F8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (*(_QWORD *)v12)
  {
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
  }
  return a1;
}

char *sub_23DBF2CB4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (v10)
    {
      v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
      sub_23DBB89B8(0, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, v11);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      goto LABEL_9;
    }
    sub_23DBF27F8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  else
  {
    if (v10)
    {
      sub_23DBB2BB0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAnalysisFeatureStatus);
      v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    sub_23DBF27F8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(a1, a2, v14);
  }
LABEL_9:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *(_QWORD *)&a1[v15];
  v19 = *(_QWORD *)v17;
  if (!v18)
  {
    if (v19)
    {
      v21 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = v19;
      *((_QWORD *)v16 + 1) = v21;
      swift_retain();
      return a1;
    }
LABEL_15:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    return a1;
  }
  if (!v19)
  {
    swift_release();
    goto LABEL_15;
  }
  v20 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v20;
  swift_retain();
  swift_release();
  return a1;
}

char *sub_23DBF2E64(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_23DBB89B8(0, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    sub_23DBF27F8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = *(_QWORD *)v12;
  if (*(_QWORD *)v12)
  {
    v14 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = v13;
    *((_QWORD *)v11 + 1) = v14;
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)v12;
  }
  return a1;
}

char *sub_23DBF2F64(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (v10)
    {
      v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_6:
      sub_23DBB89B8(0, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, v11);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      goto LABEL_9;
    }
    sub_23DBF27F8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  else
  {
    if (v10)
    {
      sub_23DBB2BB0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAnalysisFeatureStatus);
      v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_6;
    }
    sub_23DBF27F8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(a1, a2, v14);
  }
LABEL_9:
  v15 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *(_QWORD *)v17;
  if (!*(_QWORD *)&a1[v15])
  {
    if (v18)
    {
      v20 = *((_QWORD *)v17 + 1);
      *(_QWORD *)v16 = v18;
      *((_QWORD *)v16 + 1) = v20;
      return a1;
    }
LABEL_15:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    return a1;
  }
  if (!v18)
  {
    swift_release();
    goto LABEL_15;
  }
  v19 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v16 = v18;
  *((_QWORD *)v16 + 1) = v19;
  swift_release();
  return a1;
}

uint64_t sub_23DBF3104()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBF3110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  sub_23DBB89B8(0, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_23DBF31B0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DBF31BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_23DBB89B8(0, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2;
}

uint64_t type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(uint64_t a1)
{
  return sub_23DBF3260(a1, (uint64_t *)&unk_25431EDC0);
}

uint64_t sub_23DBF3260(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DBF3294()
{
  unint64_t v0;

  sub_23DBB89B8(319, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_23DBF3328(uint64_t a1)
{
  uint64_t v1;

  return sub_23DBEE5E0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_23DBF3340()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CEA100)
  {
    sub_23DBF33B4(255, (unint64_t *)&qword_256CEA108);
    v0 = sub_23DC2A6D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CEA100);
  }
}

uint64_t sub_23DBF33B4(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_23DBF3400(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_23DBF3444(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_OWORD *sub_23DBF345C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_23DBF346C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_23DC2A6D0();
    if (!v4)
      atomic_store(v3, a2);
  }
}

uint64_t sub_23DBF34C0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5;

  sub_23DBF350C(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_23DBF350C(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_23DBF3568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBB89B8(0, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DBF35C4(uint64_t a1)
{
  uint64_t v2;

  sub_23DBB89B8(0, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DBF3618(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBB89B8(0, &qword_25431ED90, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAnalysisFeatureStatus, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_23DBF3674()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CEA138)
  {
    v0 = sub_23DC2A7E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CEA138);
  }
}

void sub_23DBF36C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25431EE08)
  {
    type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(255);
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DC2A5EC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25431EE08);
  }
}

uint64_t sub_23DBF372C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepingSampleAnalysisFeatureStatusManager.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DBF3770@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

void sub_23DBF379C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25431EE10)
  {
    sub_23DBF3944(255, &qword_25431EDE8, (uint64_t (*)(uint64_t))sub_23DBF3818, MEMORY[0x24BEE0460]);
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_23DC2A5EC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25431EE10);
  }
}

unint64_t sub_23DBF3818()
{
  unint64_t result;

  result = qword_25431EE00;
  if (!qword_25431EE00)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25431EE00);
  }
  return result;
}

uint64_t sub_23DBF386C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void sub_23DBF3898(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_23DBF2200(a1, *(os_unfair_lock_s **)(v2 + 16), a2);
}

uint64_t sub_23DBF38A4(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  v5 = a1;
  v2(&v4, &v5);
  return v4;
}

void sub_23DBF38DC(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_23DBF2274(*(id **)(v1 + 16), a1);
}

_QWORD *sub_23DBF38F8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *(*v3)(uint64_t *__return_ptr, uint64_t *);
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t *))(v1 + 16);
  v5 = **(_QWORD **)(v1 + 32);
  result = v3(&v6, &v5);
  *a1 = v6;
  return result;
}

void sub_23DBF3944(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (!*a2)
  {
    type metadata accessor for HKFeatureIdentifier(255);
    v9 = v8;
    v10 = a3(255);
    v11 = sub_23DBB2CB0(&qword_25431F098, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DC2B5C0);
    v12 = a4(a1, v9, v10, v11);
    if (!v13)
      atomic_store(v12, a2);
  }
}

void sub_23DBF39E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CEA150)
  {
    sub_23DBF3A48();
    sub_23DBF3AA4();
    v0 = sub_23DC2A6D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CEA150);
  }
}

void sub_23DBF3A48()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CEA158)
  {
    v0 = sub_23DC2A454();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CEA158);
  }
}

unint64_t sub_23DBF3AA4()
{
  unint64_t result;

  result = qword_256CEA160;
  if (!qword_256CEA160)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for TrainingLoadBand, &type metadata for TrainingLoadBand);
    atomic_store(result, (unint64_t *)&qword_256CEA160);
  }
  return result;
}

void sub_23DBF3B0C()
{
  sub_23DBF27A0();
}

void sub_23DBF3B20(char a1)
{
  sub_23DC2A880();
  __asm { BR              X10 }
}

uint64_t sub_23DBF3B74()
{
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

void sub_23DBF3C04(char a1)
{
  sub_23DC2A880();
  __asm { BR              X10 }
}

uint64_t sub_23DBF3C50()
{
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

void sub_23DBF3D08(char a1)
{
  sub_23DC2A880();
  __asm { BR              X10 }
}

uint64_t sub_23DBF3D60()
{
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBF3E14()
{
  sub_23DC2A880();
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

void sub_23DBF3EBC(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23DBF3F04()
{
  sub_23DC2A28C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DBF3FA4()
{
  sub_23DC2A28C();
  return swift_bridgeObjectRelease();
}

void sub_23DBF4024(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23DBF4064()
{
  sub_23DC2A28C();
  return swift_bridgeObjectRelease();
}

void sub_23DBF4164(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23DBF41A0()
{
  sub_23DC2A28C();
  return swift_bridgeObjectRelease();
}

void sub_23DBF4244(uint64_t a1, char a2)
{
  sub_23DC2A880();
  __asm { BR              X10 }
}

uint64_t sub_23DBF428C()
{
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

void sub_23DBF4344(uint64_t a1, char a2)
{
  sub_23DC2A880();
  __asm { BR              X10 }
}

uint64_t sub_23DBF4394()
{
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBF4424()
{
  sub_23DC2A880();
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

void sub_23DBF44C8(uint64_t a1, char a2)
{
  sub_23DC2A880();
  __asm { BR              X10 }
}

uint64_t sub_23DBF451C()
{
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleChangeNotification.init(id:day:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  char *v13;

  v7 = *a4;
  v8 = *((_BYTE *)a4 + 8);
  *a5 = a1;
  a5[1] = a2;
  v9 = type metadata accessor for SleepingSampleChangeNotification();
  v10 = (char *)a5 + *(int *)(v9 + 20);
  v11 = sub_23DC2A154();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a3, v11);
  v13 = (char *)a5 + *(int *)(v9 + 24);
  *(_QWORD *)v13 = v7;
  v13[8] = v8;
  return result;
}

uint64_t type metadata accessor for SleepingSampleChangeNotification()
{
  uint64_t result;

  result = qword_256CEA280;
  if (!qword_256CEA280)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SleepingSampleChangeNotification.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SleepingSampleChangeNotification.id.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SleepingSampleChangeNotification.id.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleChangeNotification.day.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleChangeNotification() + 20);
  v4 = sub_23DC2A154();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SleepingSampleChangeNotification.day.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleChangeNotification() + 20);
  v4 = sub_23DC2A154();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*SleepingSampleChangeNotification.day.modify())()
{
  type metadata accessor for SleepingSampleChangeNotification();
  return nullsub_1;
}

uint64_t SleepingSampleChangeNotification.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;

  result = type metadata accessor for SleepingSampleChangeNotification();
  v4 = (uint64_t *)(v1 + *(int *)(result + 24));
  v5 = *v4;
  LOBYTE(v4) = *((_BYTE *)v4 + 8);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = (_BYTE)v4;
  return result;
}

uint64_t SleepingSampleChangeNotification.content.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for SleepingSampleChangeNotification();
  v5 = v1 + *(int *)(result + 24);
  *(_QWORD *)v5 = v2;
  *(_BYTE *)(v5 + 8) = v3;
  return result;
}

uint64_t (*SleepingSampleChangeNotification.content.modify())()
{
  type metadata accessor for SleepingSampleChangeNotification();
  return nullsub_1;
}

uint64_t SleepingSampleChangeNotification.Content.hash(into:)()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8) != 1)
    sub_23DC2A88C();
  return sub_23DC2A88C();
}

uint64_t static SleepingSampleChangeNotification.Content.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
  if (*(_QWORD *)a2)
    v4 = 0;
  else
    v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_QWORD *)a2)
    v2 = 0;
  if (*(_QWORD *)a1)
    v5 = v2;
  else
    v5 = v4;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v5;
  else
    return v3;
}

uint64_t sub_23DBF48E4()
{
  sub_23DBF4E54();
  return sub_23DC2A964();
}

uint64_t sub_23DBF490C()
{
  sub_23DBF4E54();
  return sub_23DC2A970();
}

uint64_t sub_23DBF4934()
{
  sub_23DBF4E10();
  return sub_23DC2A964();
}

uint64_t sub_23DBF495C()
{
  sub_23DBF4E10();
  return sub_23DC2A970();
}

uint64_t sub_23DBF4984()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x447365676E616863;
  if (*v0 != 1)
    v1 = 0x6F4370756D726177;
  if (*v0)
    return v1;
  else
    return 0x7365676E616863;
}

uint64_t sub_23DBF49F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBF7AD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DBF4A18()
{
  sub_23DBF4E98();
  return sub_23DC2A964();
}

uint64_t sub_23DBF4A40()
{
  sub_23DBF4E98();
  return sub_23DC2A970();
}

uint64_t sub_23DBF4A68()
{
  sub_23DBF4DCC();
  return sub_23DC2A964();
}

uint64_t sub_23DBF4A90()
{
  sub_23DBF4DCC();
  return sub_23DC2A970();
}

uint64_t SleepingSampleChangeNotification.Content.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;

  v2 = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  sub_23DBB2A64(0, &qword_256CEA170, (uint64_t (*)(void))sub_23DBF4DCC, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.WarmupCompleteCodingKeys, MEMORY[0x24BEE3520]);
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v26 = (char *)&v22 - v6;
  sub_23DBB2A64(0, &qword_256CEA180, (uint64_t (*)(void))sub_23DBF4E10, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.ChangesDemoCodingKeys, v4);
  v24 = *(_QWORD *)(v7 - 8);
  v25 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v23 = (char *)&v22 - v8;
  sub_23DBB2A64(0, &qword_256CEA190, (uint64_t (*)(void))sub_23DBF4E54, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.ChangesCodingKeys, v4);
  v29 = *(_QWORD *)(v9 - 8);
  v30 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v22 - v10;
  sub_23DBB2A64(0, &qword_256CEA1A0, (uint64_t (*)(void))sub_23DBF4E98, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.CodingKeys, v4);
  v13 = v12;
  v31 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v22 - v14;
  v16 = *v2;
  LODWORD(v4) = *((unsigned __int8 *)v2 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBF4E98();
  sub_23DC2A8C8();
  if ((_DWORD)v4 == 1)
  {
    if (v16)
    {
      v35 = 2;
      sub_23DBF4DCC();
      v17 = v26;
      sub_23DC2A778();
      v19 = v27;
      v18 = v28;
    }
    else
    {
      v34 = 1;
      sub_23DBF4E10();
      v17 = v23;
      sub_23DC2A778();
      v19 = v24;
      v18 = v25;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v17, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v15, v13);
  }
  else
  {
    v33 = 0;
    sub_23DBF4E54();
    sub_23DC2A778();
    v32 = v16;
    sub_23DBF4EDC();
    v20 = v30;
    sub_23DC2A7C0();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v15, v13);
  }
}

unint64_t sub_23DBF4DCC()
{
  unint64_t result;

  result = qword_256CEA178;
  if (!qword_256CEA178)
  {
    result = MEMORY[0x24263E440](&unk_23DC2FA64, &type metadata for SleepingSampleChangeNotification.Content.WarmupCompleteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA178);
  }
  return result;
}

unint64_t sub_23DBF4E10()
{
  unint64_t result;

  result = qword_256CEA188;
  if (!qword_256CEA188)
  {
    result = MEMORY[0x24263E440](&unk_23DC2FA14, &type metadata for SleepingSampleChangeNotification.Content.ChangesDemoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA188);
  }
  return result;
}

unint64_t sub_23DBF4E54()
{
  unint64_t result;

  result = qword_256CEA198;
  if (!qword_256CEA198)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F9C4, &type metadata for SleepingSampleChangeNotification.Content.ChangesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA198);
  }
  return result;
}

unint64_t sub_23DBF4E98()
{
  unint64_t result;

  result = qword_256CEA1A8;
  if (!qword_256CEA1A8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F974, &type metadata for SleepingSampleChangeNotification.Content.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA1A8);
  }
  return result;
}

unint64_t sub_23DBF4EDC()
{
  unint64_t result;

  result = qword_256CEA1B0;
  if (!qword_256CEA1B0)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDaySummaryDescription, &type metadata for SleepingSampleDaySummaryDescription);
    atomic_store(result, (unint64_t *)&qword_256CEA1B0);
  }
  return result;
}

uint64_t SleepingSampleChangeNotification.Content.hashValue.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_23DC2A880();
  if (v1 != 1)
    sub_23DC2A88C();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleChangeNotification.Content.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;

  v40 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_23DBB2A64(0, &qword_256CEA1B8, (uint64_t (*)(void))sub_23DBF4DCC, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.WarmupCompleteCodingKeys, MEMORY[0x24BEE33E0]);
  v38 = v4;
  v33 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v32 - v5;
  sub_23DBB2A64(0, &qword_256CEA1C0, (uint64_t (*)(void))sub_23DBF4E10, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.ChangesDemoCodingKeys, v3);
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v41 = (char *)&v32 - v7;
  sub_23DBB2A64(0, &qword_256CEA1C8, (uint64_t (*)(void))sub_23DBF4E54, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.ChangesCodingKeys, v3);
  v37 = v8;
  v34 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v32 - v9;
  sub_23DBB2A64(0, &qword_256CEA1D0, (uint64_t (*)(void))sub_23DBF4E98, (uint64_t)&type metadata for SleepingSampleChangeNotification.Content.CodingKeys, v3);
  v12 = v11;
  v13 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v32 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBF4E98();
  v16 = v42;
  sub_23DC2A8BC();
  if (v16)
    goto LABEL_8;
  v17 = v41;
  v18 = v13;
  v42 = a1;
  v19 = sub_23DC2A76C();
  v20 = v12;
  v21 = v15;
  if (*(_QWORD *)(v19 + 16) != 1)
  {
    v23 = sub_23DC2A5E0();
    swift_allocError();
    v25 = v24;
    sub_23DBBF970();
    *v25 = &type metadata for SleepingSampleChangeNotification.Content;
    sub_23DC2A718();
    sub_23DC2A5C8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v20);
    a1 = v42;
LABEL_8:
    v28 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v28);
  }
  if (*(_BYTE *)(v19 + 32))
  {
    if (*(_BYTE *)(v19 + 32) == 1)
    {
      v45 = 1;
      sub_23DBF4E10();
      sub_23DC2A70C();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v17, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      v22 = 0;
    }
    else
    {
      v46 = 2;
      sub_23DBF4DCC();
      v30 = v39;
      sub_23DC2A70C();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v30, v38);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      v22 = 1;
    }
    v31 = 1;
    v26 = v40;
  }
  else
  {
    v44 = 0;
    sub_23DBF4E54();
    sub_23DC2A70C();
    v26 = v40;
    sub_23DBF558C();
    v27 = v37;
    sub_23DC2A760();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
    v31 = 0;
    v22 = v43;
  }
  *(_QWORD *)v26 = v22;
  *(_BYTE *)(v26 + 8) = v31;
  v28 = (uint64_t)v42;
  return __swift_destroy_boxed_opaque_existential_1(v28);
}

uint64_t sub_23DBF5468()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_23DC2A880();
  if (v1 != 1)
    sub_23DC2A88C();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBF54D4()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 8) != 1)
    sub_23DC2A88C();
  return sub_23DC2A88C();
}

uint64_t sub_23DBF5524()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_23DC2A880();
  if (v1 != 1)
    sub_23DC2A88C();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

unint64_t sub_23DBF558C()
{
  unint64_t result;

  result = qword_256CEA1D8;
  if (!qword_256CEA1D8)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDaySummaryDescription, &type metadata for SleepingSampleDaySummaryDescription);
    atomic_store(result, (unint64_t *)&qword_256CEA1D8);
  }
  return result;
}

uint64_t sub_23DBF55D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleChangeNotification.Content.init(from:)(a1, a2);
}

uint64_t sub_23DBF55E4(_QWORD *a1)
{
  return SleepingSampleChangeNotification.Content.encode(to:)(a1);
}

uint64_t sub_23DBF55F8(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
  if (*(_QWORD *)a2)
    v4 = 0;
  else
    v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_QWORD *)a2)
    v2 = 0;
  if (*(_QWORD *)a1)
    v5 = v2;
  else
    v5 = v4;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v5;
  else
    return v3;
}

uint64_t SleepingSampleChangeNotification.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRetain();
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for SleepingSampleChangeNotification();
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  if (*(_BYTE *)(v0 + *(int *)(v1 + 24) + 8) != 1)
    sub_23DC2A88C();
  return sub_23DC2A88C();
}

uint64_t sub_23DBF571C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 7954788;
  if (*v0 != 1)
    v1 = 0x746E65746E6F63;
  if (*v0)
    return v1;
  else
    return 25705;
}

uint64_t sub_23DBF5764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DBF7C60(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DBF5788()
{
  sub_23DBF6E1C();
  return sub_23DC2A964();
}

uint64_t sub_23DBF57B0()
{
  sub_23DBF6E1C();
  return sub_23DC2A970();
}

uint64_t SleepingSampleChangeNotification.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v3 = v1;
  sub_23DBB2A64(0, &qword_256CEA1E0, (uint64_t (*)(void))sub_23DBF6E1C, (uint64_t)&type metadata for SleepingSampleChangeNotification.CodingKeys, MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBF6E1C();
  sub_23DC2A8C8();
  v18 = 0;
  sub_23DC2A79C();
  if (!v2)
  {
    v10 = type metadata accessor for SleepingSampleChangeNotification();
    v17 = 1;
    sub_23DC2A154();
    sub_23DBB2CB0(&qword_25431EF38, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD2498]);
    sub_23DC2A7C0();
    v11 = (uint64_t *)(v3 + *(int *)(v10 + 24));
    v12 = *v11;
    LOBYTE(v11) = *((_BYTE *)v11 + 8);
    v14 = v12;
    v15 = (char)v11;
    v16 = 2;
    sub_23DBF6E60();
    sub_23DC2A7C0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t SleepingSampleChangeNotification.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_23DC2A880();
  swift_bridgeObjectRetain();
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  v1 = type metadata accessor for SleepingSampleChangeNotification();
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  if (*(_BYTE *)(v0 + *(int *)(v1 + 24) + 8) != 1)
    sub_23DC2A88C();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleChangeNotification.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v21 = a2;
  v24 = sub_23DC2A154();
  v22 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2A64(0, &qword_256CEA1F8, (uint64_t (*)(void))sub_23DBF6E1C, (uint64_t)&type metadata for SleepingSampleChangeNotification.CodingKeys, MEMORY[0x24BEE33E0]);
  v25 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v21 - v6;
  v8 = type metadata accessor for SleepingSampleChangeNotification();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBF6E1C();
  v11 = v7;
  v12 = v26;
  sub_23DC2A8BC();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v13 = v5;
  v14 = v8;
  v16 = v23;
  v15 = v24;
  v31 = 0;
  *v10 = sub_23DC2A73C();
  v10[1] = v17;
  v30 = 1;
  sub_23DBB2CB0((unint64_t *)&unk_25431F270, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B8]);
  sub_23DC2A760();
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))((char *)v10 + *(int *)(v14 + 20), v16, v15);
  v29 = 2;
  sub_23DBF6EA4();
  sub_23DC2A760();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v25);
  v18 = v28;
  v19 = (char *)v10 + *(int *)(v14 + 24);
  *(_QWORD *)v19 = v27;
  v19[8] = v18;
  sub_23DBF6EE8((uint64_t)v10, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23DBF6F2C((uint64_t)v10);
}

uint64_t sub_23DBF5D94@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DBF5DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  if (*(_BYTE *)(v2 + *(int *)(a2 + 24) + 8) != 1)
    sub_23DC2A88C();
  return sub_23DC2A88C();
}

uint64_t sub_23DBF5E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23DC2A880();
  swift_bridgeObjectRetain();
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  if (*(_BYTE *)(v2 + *(int *)(a2 + 24) + 8) != 1)
    sub_23DC2A88C();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBF5F68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleChangeNotification.init(from:)(a1, a2);
}

uint64_t sub_23DBF5F7C(_QWORD *a1)
{
  return SleepingSampleChangeNotification.encode(to:)(a1);
}

HealthBalance::SleepingSampleChangeNotification::CategoryIdentifier_optional __swiftcall SleepingSampleChangeNotification.CategoryIdentifier.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthBalance::SleepingSampleChangeNotification::CategoryIdentifier_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23DC2A700();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

unint64_t SleepingSampleChangeNotification.CategoryIdentifier.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000029;
  if (*v0 != 1)
    v1 = 0xD00000000000002BLL;
  if (*v0)
    return v1;
  else
    return 0xD000000000000024;
}

uint64_t sub_23DBF604C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23DBC51AC(*a1, *a2);
}

uint64_t sub_23DBF6058()
{
  return sub_23DBF3E14();
}

uint64_t sub_23DBF6060()
{
  return sub_23DBF3FA4();
}

uint64_t sub_23DBF6068()
{
  return sub_23DBF4424();
}

HealthBalance::SleepingSampleChangeNotification::CategoryIdentifier_optional sub_23DBF6070(Swift::String *a1)
{
  return SleepingSampleChangeNotification.CategoryIdentifier.init(rawValue:)(*a1);
}

unint64_t sub_23DBF607C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;
  unint64_t v3;

  result = SleepingSampleChangeNotification.CategoryIdentifier.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t SleepingSampleChangeNotification.categoryIdentifier.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  char v7;
  char v8;

  result = type metadata accessor for SleepingSampleChangeNotification();
  v4 = (uint64_t *)(v1 + *(int *)(result + 24));
  v5 = *v4;
  v6 = *((unsigned __int8 *)v4 + 8);
  if (v5)
    v7 = 2;
  else
    v7 = 1;
  if (v6)
    v8 = v7;
  else
    v8 = 0;
  *a1 = v8;
  return result;
}

void SleepingSampleChangeNotification.Content.categoryIdentifier.getter(char *a1@<X8>)
{
  uint64_t v1;
  char v2;

  if (*(_QWORD *)v1)
    v2 = 2;
  else
    v2 = 1;
  if (!*(_BYTE *)(v1 + 8))
    v2 = 0;
  *a1 = v2;
}

uint64_t SleepingSampleChangeNotification.title.getter()
{
  type metadata accessor for SleepingSampleChangeNotification();
  return SleepingSampleChangeNotification.Content.title.getter();
}

uint64_t SleepingSampleChangeNotification.Content.title.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v0 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v0);
  v1 = sub_23DC2A208();
  MEMORY[0x24BDAC7A8](v1);
  sub_23DC2A1FC();
  v2 = (void *)sub_23DC2A220();
  v3 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v2);

  sub_23DC29EE4();
  return sub_23DC2A250();
}

uint64_t SleepingSampleChangeNotification.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v1 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DC2A208();
  MEMORY[0x24BDAC7A8](v2);
  v3 = v0 + *(int *)(type metadata accessor for SleepingSampleChangeNotification() + 24);
  if (*(_BYTE *)(v3 + 8) != 1 || !*(_QWORD *)v3)
    return SleepingSampleDaySummaryDescription.primaryBody.getter();
  sub_23DC2A1FC();
  v4 = (void *)sub_23DC2A220();
  v5 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v4);

  sub_23DC29EE4();
  return sub_23DC2A250();
}

uint64_t SleepingSampleChangeNotification.Content.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v1);
  v2 = sub_23DC2A208();
  MEMORY[0x24BDAC7A8](v2);
  if (*(_BYTE *)(v0 + 8) != 1 || !*(_QWORD *)v0)
    return SleepingSampleDaySummaryDescription.primaryBody.getter();
  sub_23DC2A1FC();
  v3 = (void *)sub_23DC2A220();
  v4 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v3);

  sub_23DC29EE4();
  return sub_23DC2A250();
}

uint64_t UNUserNotificationCenter.send(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[41] = a1;
  v2[42] = v1;
  v3 = sub_23DC29E48();
  v2[43] = v3;
  v2[44] = *(_QWORD *)(v3 - 8);
  v2[45] = swift_task_alloc();
  sub_23DC29EF0();
  v2[46] = swift_task_alloc();
  sub_23DC2A208();
  v2[47] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_23DBF6678()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  v1 = v0[41];
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDF8800]), sel_init);
  v0[48] = v2;
  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for SleepingSampleChangeNotification() + 24));
  v4 = *v3;
  v5 = *((unsigned __int8 *)v3 + 8);
  SleepingSampleChangeNotification.Content.title.getter();
  v6 = (void *)sub_23DC2A220();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setTitle_, v6);

  if (v5 == 1 && v4)
  {
    sub_23DC2A1FC();
    v7 = (void *)sub_23DC2A220();
    v8 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v7);

    sub_23DC29EE4();
    sub_23DC2A250();
LABEL_5:
    v10 = (void *)sub_23DC2A220();
    swift_bridgeObjectRelease();
    objc_msgSend(v2, sel_setBody_, v10);

    goto LABEL_6;
  }
  SleepingSampleDaySummaryDescription.primaryBody.getter();
  if (v9)
    goto LABEL_5;
LABEL_6:
  v11 = v0[45];
  v24 = v0[44];
  v25 = v0[43];
  v26 = (void *)v0[42];
  v12 = (void *)sub_23DC2A220();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setCategoryIdentifier_, v12);

  v13 = objc_msgSend((id)objc_opt_self(), sel_soundWithAlertType_, 25);
  objc_msgSend(v2, sel_setSound_, v13);

  sub_23DBF6F68();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DC2FAC0;
  v0[37] = sub_23DC2A244();
  v0[38] = v15;
  sub_23DC2A568();
  v16 = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 96) = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 72) = 15;
  v0[39] = 0x6144746567726174;
  v0[40] = 0xE900000000000079;
  sub_23DC2A568();
  v17 = sub_23DC2A124();
  *(_QWORD *)(inited + 168) = v16;
  *(_QWORD *)(inited + 144) = v17;
  sub_23DBEDA20(inited);
  v18 = (void *)sub_23DC2A16C();
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setUserInfo_, v18);

  sub_23DC29E18();
  v19 = (void *)sub_23DC29E0C();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v11, v25);
  objc_msgSend(v2, sel_setExpirationDate_, v19);

  swift_bridgeObjectRetain();
  v20 = v2;
  v21 = (void *)sub_23DC2A220();
  swift_bridgeObjectRelease();
  v22 = objc_msgSend((id)objc_opt_self(), sel_requestWithIdentifier_content_trigger_, v21, v20, 0);
  v0[49] = v22;

  v0[2] = v0;
  v0[3] = sub_23DBF6B58;
  v0[36] = swift_continuation_init();
  v0[32] = MEMORY[0x24BDAC760];
  v0[33] = 0x40000000;
  v0[34] = sub_23DBF6C8C;
  v0[35] = &block_descriptor_1;
  objc_msgSend(v26, sel_addNotificationRequest_withCompletionHandler_, v22, v0 + 32);
  return swift_continuation_await();
}

uint64_t sub_23DBF6B58()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 400) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_23DBF6BB8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 392);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DBF6C18()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 392);
  v2 = *(void **)(v0 + 384);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23DBF6C8C(uint64_t a1, void *a2)
{
  _QWORD *v3;
  id v4;

  if (!a2)
    return swift_continuation_throwingResume();
  sub_23DBD083C();
  swift_allocError();
  *v3 = a2;
  v4 = a2;
  return swift_continuation_throwingResumeWithError();
}

uint64_t _s13HealthBalance32SleepingSampleChangeNotificationV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = sub_23DC2A7FC(), result = 0, (v5 & 1) != 0))
  {
    v7 = type metadata accessor for SleepingSampleChangeNotification();
    sub_23DC2A154();
    sub_23DBB2CB0(&qword_256CE9748, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
    sub_23DC2A4F0();
    if (!v15)
    {
      v8 = *(int *)(v7 + 24);
      v9 = *(_QWORD *)((char *)a1 + v8);
      v10 = *((unsigned __int8 *)a1 + v8 + 8);
      v11 = (char *)a2 + v8;
      v12 = *(_QWORD *)((char *)a2 + v8);
      v13 = v11[8];
      if (v10 == 1)
      {
        if (v9)
        {
          if (v13)
            return v12 != 0;
        }
        else if (v13)
        {
          return v12 == 0;
        }
      }
      else
      {
        if (v9 == v12)
          v14 = v13;
        else
          v14 = 1;
        if ((v14 & 1) == 0)
          return 1;
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_23DBF6E1C()
{
  unint64_t result;

  result = qword_256CEA1E8;
  if (!qword_256CEA1E8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F924, &type metadata for SleepingSampleChangeNotification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA1E8);
  }
  return result;
}

unint64_t sub_23DBF6E60()
{
  unint64_t result;

  result = qword_256CEA1F0;
  if (!qword_256CEA1F0)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleChangeNotification.Content, &type metadata for SleepingSampleChangeNotification.Content);
    atomic_store(result, (unint64_t *)&qword_256CEA1F0);
  }
  return result;
}

unint64_t sub_23DBF6EA4()
{
  unint64_t result;

  result = qword_256CEA200;
  if (!qword_256CEA200)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleChangeNotification.Content, &type metadata for SleepingSampleChangeNotification.Content);
    atomic_store(result, (unint64_t *)&qword_256CEA200);
  }
  return result;
}

uint64_t sub_23DBF6EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepingSampleChangeNotification();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DBF6F2C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SleepingSampleChangeNotification();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23DBF6F68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE95A8)
  {
    sub_23DBB8A10();
    v0 = sub_23DC2A7E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE95A8);
  }
}

unint64_t sub_23DBF6FC0()
{
  unint64_t result;

  result = qword_256CEA210;
  if (!qword_256CEA210)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleChangeNotification.Content, &type metadata for SleepingSampleChangeNotification.Content);
    atomic_store(result, (unint64_t *)&qword_256CEA210);
  }
  return result;
}

uint64_t sub_23DBF7004()
{
  return MEMORY[0x24BEE0D10];
}

uint64_t sub_23DBF7010()
{
  return sub_23DBB2CB0(&qword_256CEA218, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleChangeNotification, (uint64_t)&protocol conformance descriptor for SleepingSampleChangeNotification);
}

unint64_t sub_23DBF7040()
{
  unint64_t result;

  result = qword_256CEA220;
  if (!qword_256CEA220)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleChangeNotification.CategoryIdentifier, &type metadata for SleepingSampleChangeNotification.CategoryIdentifier);
    atomic_store(result, (unint64_t *)&qword_256CEA220);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleChangeNotification(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23DC2A154();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = *(int *)(a3 + 24);
    v14 = (char *)v4 + v13;
    v15 = (char *)a2 + v13;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
  }
  return v4;
}

uint64_t destroy for SleepingSampleChangeNotification(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23DC2A154();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for SleepingSampleChangeNotification(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23DC2A154();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  return a1;
}

_QWORD *assignWithCopy for SleepingSampleChangeNotification(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DC2A154();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = v12[8];
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v13;
  return a1;
}

_OWORD *initializeWithTake for SleepingSampleChangeNotification(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23DC2A154();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  v11[8] = v12[8];
  return a1;
}

_QWORD *assignWithTake for SleepingSampleChangeNotification(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23DC2A154();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleChangeNotification()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBF73F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23DC2A154();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SleepingSampleChangeNotification()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DBF747C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_23DC2A154();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23DBF74F0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23DC2A154();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.Content()
{
  return &type metadata for SleepingSampleChangeNotification.Content;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.CategoryIdentifier()
{
  return &type metadata for SleepingSampleChangeNotification.CategoryIdentifier;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.CodingKeys()
{
  return &type metadata for SleepingSampleChangeNotification.CodingKeys;
}

uint64_t _s13HealthBalance32SleepingSampleChangeNotificationV18CategoryIdentifierOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DBF75EC + 4 * byte_23DC2F2EB[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DBF7620 + 4 * byte_23DC2F2E6[v4]))();
}

uint64_t sub_23DBF7620(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBF7628(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBF7630);
  return result;
}

uint64_t sub_23DBF763C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBF7644);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DBF7648(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBF7650(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.Content.CodingKeys()
{
  return &type metadata for SleepingSampleChangeNotification.Content.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SleepingSampleChangeNotification.Content.ChangesCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DBF76AC + 4 * byte_23DC2F2F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DBF76CC + 4 * byte_23DC2F2F5[v4]))();
}

_BYTE *sub_23DBF76AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DBF76CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DBF76D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DBF76DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DBF76E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DBF76EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.Content.ChangesCodingKeys()
{
  return &type metadata for SleepingSampleChangeNotification.Content.ChangesCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.Content.ChangesDemoCodingKeys()
{
  return &type metadata for SleepingSampleChangeNotification.Content.ChangesDemoCodingKeys;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotification.Content.WarmupCompleteCodingKeys()
{
  return &type metadata for SleepingSampleChangeNotification.Content.WarmupCompleteCodingKeys;
}

unint64_t sub_23DBF772C()
{
  unint64_t result;

  result = qword_256CEA2C0;
  if (!qword_256CEA2C0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F78C, &type metadata for SleepingSampleChangeNotification.Content.ChangesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA2C0);
  }
  return result;
}

unint64_t sub_23DBF7774()
{
  unint64_t result;

  result = qword_256CEA2C8;
  if (!qword_256CEA2C8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F844, &type metadata for SleepingSampleChangeNotification.Content.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA2C8);
  }
  return result;
}

unint64_t sub_23DBF77BC()
{
  unint64_t result;

  result = qword_256CEA2D0;
  if (!qword_256CEA2D0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F8FC, &type metadata for SleepingSampleChangeNotification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA2D0);
  }
  return result;
}

unint64_t sub_23DBF7804()
{
  unint64_t result;

  result = qword_256CEA2D8;
  if (!qword_256CEA2D8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F86C, &type metadata for SleepingSampleChangeNotification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA2D8);
  }
  return result;
}

unint64_t sub_23DBF784C()
{
  unint64_t result;

  result = qword_256CEA2E0;
  if (!qword_256CEA2E0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F894, &type metadata for SleepingSampleChangeNotification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA2E0);
  }
  return result;
}

unint64_t sub_23DBF7894()
{
  unint64_t result;

  result = qword_256CEA2E8;
  if (!qword_256CEA2E8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F7B4, &type metadata for SleepingSampleChangeNotification.Content.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA2E8);
  }
  return result;
}

unint64_t sub_23DBF78DC()
{
  unint64_t result;

  result = qword_256CEA2F0;
  if (!qword_256CEA2F0)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F7DC, &type metadata for SleepingSampleChangeNotification.Content.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA2F0);
  }
  return result;
}

unint64_t sub_23DBF7924()
{
  unint64_t result;

  result = qword_256CEA2F8;
  if (!qword_256CEA2F8)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F6FC, &type metadata for SleepingSampleChangeNotification.Content.ChangesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA2F8);
  }
  return result;
}

unint64_t sub_23DBF796C()
{
  unint64_t result;

  result = qword_256CEA300;
  if (!qword_256CEA300)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F724, &type metadata for SleepingSampleChangeNotification.Content.ChangesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA300);
  }
  return result;
}

unint64_t sub_23DBF79B4()
{
  unint64_t result;

  result = qword_256CEA308;
  if (!qword_256CEA308)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F6AC, &type metadata for SleepingSampleChangeNotification.Content.ChangesDemoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA308);
  }
  return result;
}

unint64_t sub_23DBF79FC()
{
  unint64_t result;

  result = qword_256CEA310;
  if (!qword_256CEA310)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F6D4, &type metadata for SleepingSampleChangeNotification.Content.ChangesDemoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA310);
  }
  return result;
}

unint64_t sub_23DBF7A44()
{
  unint64_t result;

  result = qword_256CEA318;
  if (!qword_256CEA318)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F65C, &type metadata for SleepingSampleChangeNotification.Content.WarmupCompleteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA318);
  }
  return result;
}

unint64_t sub_23DBF7A8C()
{
  unint64_t result;

  result = qword_256CEA320;
  if (!qword_256CEA320)
  {
    result = MEMORY[0x24263E440](&unk_23DC2F684, &type metadata for SleepingSampleChangeNotification.Content.WarmupCompleteCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA320);
  }
  return result;
}

uint64_t sub_23DBF7AD0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7365676E616863 && a2 == 0xE700000000000000;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x447365676E616863 && a2 == 0xEB000000006F6D65 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F4370756D726177 && a2 == 0xEE006574656C706DLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23DBF7C60(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7954788 && a2 == 0xE300000000000000 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void HealthBalanceOnboardingAnalyticsEvent.action.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

void HealthBalanceOnboardingAnalyticsEvent.provenance.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 17);
}

void HealthBalanceOnboardingAnalyticsEvent.step.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 18);
}

_BYTE *HealthBalanceOnboardingAnalyticsEvent.__allocating_init(action:provenance:step:)(_BYTE *a1, char *a2, char *a3)
{
  _BYTE *result;
  char v7;
  char v8;

  result = (_BYTE *)swift_allocObject();
  v7 = *a2;
  v8 = *a3;
  result[16] = *a1;
  result[17] = v7;
  result[18] = v8;
  return result;
}

_BYTE *HealthBalanceOnboardingAnalyticsEvent.init(action:provenance:step:)(_BYTE *a1, char *a2, char *a3)
{
  _BYTE *v3;
  char v4;
  char v5;

  v4 = *a2;
  v5 = *a3;
  v3[16] = *a1;
  v3[17] = v4;
  v3[18] = v5;
  return v3;
}

uint64_t HealthBalanceOnboardingAnalyticsEvent.isEventSubmissionIHAGated.getter()
{
  return 0;
}

unint64_t HealthBalanceOnboardingAnalyticsEvent.eventName.getter()
{
  return 0xD000000000000023;
}

void HealthBalanceOnboardingAnalyticsEvent.makeUnrestrictedEventPayload(with:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (objc_msgSend(a1, sel_healthDataSource))
  {
    v4 = objc_msgSend(a1, sel_environmentDataSource);
    v7 = *(_BYTE *)(v1 + 16);
    sub_23DBF8E64((uint64_t)v4, (uint64_t)&v7);
    if (v2)
    {
      swift_unknownObjectRelease();

    }
    else
    {
      v6 = v5;

      sub_23DBF7FC4(v6);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_23DBF7F80();
    swift_allocError();
    swift_willThrow();
  }
}

unint64_t sub_23DBF7F80()
{
  unint64_t result;

  result = qword_256CEA328;
  if (!qword_256CEA328)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for HealthBalanceAnalyticsError, &type metadata for HealthBalanceAnalyticsError);
    atomic_store(result, (unint64_t *)&qword_256CEA328);
  }
  return result;
}

unint64_t sub_23DBF7FC4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  int64_t i;
  uint64_t *v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  char v29[40];
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  _OWORD v35[3];
  __int128 v36[2];
  uint64_t v37;
  __int128 v38;
  _OWORD v39[2];
  uint64_t v40;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_23DBF9DC4();
    v2 = (_QWORD *)sub_23DC2A6C4();
  }
  else
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  result = swift_bridgeObjectRetain();
  i = 0;
  if (v5)
    goto LABEL_10;
LABEL_11:
  v12 = i + 1;
  if (__OFADD__(i, 1))
    goto LABEL_35;
  if (v12 >= v27)
    goto LABEL_32;
  v13 = *(_QWORD *)(v28 + 8 * v12);
  v14 = i + 1;
  if (!v13)
  {
    v14 = i + 2;
    if (i + 2 >= v27)
      goto LABEL_32;
    v13 = *(_QWORD *)(v28 + 8 * v14);
    if (!v13)
    {
      v14 = i + 3;
      if (i + 3 >= v27)
        goto LABEL_32;
      v13 = *(_QWORD *)(v28 + 8 * v14);
      if (!v13)
      {
        v14 = i + 4;
        if (i + 4 >= v27)
          goto LABEL_32;
        v13 = *(_QWORD *)(v28 + 8 * v14);
        if (!v13)
        {
          v15 = i + 5;
          if (i + 5 < v27)
          {
            v13 = *(_QWORD *)(v28 + 8 * v15);
            if (v13)
            {
              v14 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              v14 = v15 + 1;
              if (__OFADD__(v15, 1))
                goto LABEL_36;
              if (v14 >= v27)
                break;
              v13 = *(_QWORD *)(v28 + 8 * v14);
              ++v15;
              if (v13)
                goto LABEL_26;
            }
          }
LABEL_32:
          sub_23DBF9E2C();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  v5 = (v13 - 1) & v13;
  v11 = __clz(__rbit64(v13)) + (v14 << 6);
  for (i = v14; ; v11 = v10 | (i << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v18 = *v16;
    v17 = v16[1];
    sub_23DBF3400(*(_QWORD *)(a1 + 56) + 40 * v11, (uint64_t)v39);
    *(_QWORD *)&v38 = v18;
    *((_QWORD *)&v38 + 1) = v17;
    v35[2] = v38;
    v36[0] = v39[0];
    v36[1] = v39[1];
    v37 = v40;
    v30 = v18;
    v31 = v17;
    sub_23DBF3444(v36, (uint64_t)v29);
    sub_23DBF9D48();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v20 = v30;
    v19 = v31;
    sub_23DBF345C(&v32, v34);
    sub_23DBF345C(v34, v35);
    sub_23DBF345C(v35, &v33);
    result = sub_23DBF0DC8(v20, v19);
    v21 = result;
    if ((v22 & 1) != 0)
    {
      v8 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *v8 = v20;
      v8[1] = v19;
      v9 = (_OWORD *)(v2[7] + 32 * v21);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      result = (unint64_t)sub_23DBF345C(&v33, v9);
      if (!v5)
        goto LABEL_11;
      goto LABEL_10;
    }
    if (v2[2] >= v2[3])
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v23 = (uint64_t *)(v2[6] + 16 * result);
    *v23 = v20;
    v23[1] = v19;
    result = (unint64_t)sub_23DBF345C(&v33, (_OWORD *)(v2[7] + 32 * result));
    v24 = v2[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_34;
    v2[2] = v26;
    if (!v5)
      goto LABEL_11;
LABEL_10:
    v10 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t HealthBalanceOnboardingAnalyticsEvent.OnboardingAction.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DBF843C + 4 * byte_23DC2FAD0[*v0]))(0x6C65636E6163, 0xE600000000000000);
}

uint64_t sub_23DBF843C()
{
  return 1954047342;
}

uint64_t sub_23DBF844C()
{
  return 1885956979;
}

uint64_t sub_23DBF845C()
{
  return 0x6E4F6E727574;
}

uint64_t sub_23DBF846C()
{
  return 0x646577656976;
}

uint64_t HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DBF84AC + 4 * byte_23DC2FAD5[*v0]))(0x7974697669746341, 0xE800000000000000);
}

uint64_t sub_23DBF84AC()
{
  return 0x79726F6765746143;
}

uint64_t sub_23DBF84C0()
{
  return 0x6570795461746144;
}

uint64_t sub_23DBF84E0()
{
  return 0x7373656E746946;
}

uint64_t sub_23DBF84F8()
{
  return 0x684368746C616548;
}

uint64_t sub_23DBF851C()
{
  return 0x747465536F6E614ELL;
}

uint64_t sub_23DBF853C()
{
  return 0x686372616553;
}

unint64_t sub_23DBF8550()
{
  return 0xD000000000000010;
}

uint64_t sub_23DBF856C()
{
  return 0x7972616D6D7553;
}

uint64_t sub_23DBF8584()
{
  return 0x6E776F6E6B6E55;
}

uint64_t sub_23DBF859C()
{
  return 0x736C61746956;
}

uint64_t sub_23DBF85B0()
{
  return 0x7070416863746157;
}

uint64_t sub_23DBF85C4()
{
  return 0x746567646957;
}

uint64_t HealthBalanceOnboardingAnalyticsEvent.OnboardingStep.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6163696669746F4ELL;
  if (*v0 != 1)
    v1 = 0x7065656C53;
  if (*v0)
    return v1;
  else
    return 0x656D6F636C6557;
}

void HealthBalanceOnboardingAnalyticsEvent.makeIHAGatedEventPayload(with:)(void *a1)
{
  sub_23DBF97DC(a1);
}

uint64_t HealthBalanceOnboardingAnalyticsEvent.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t HealthBalanceOnboardingAnalyticsEvent.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingAction_optional __swiftcall HealthBalanceOnboardingAnalyticsEvent.OnboardingAction.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingAction_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23DC2A700();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void sub_23DBF8798(char *a1)
{
  sub_23DBC555C(*a1);
}

void sub_23DBF87A4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23DC2A880();
  __asm { BR              X9 }
}

uint64_t sub_23DBF87EC()
{
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

void sub_23DBF8854()
{
  __asm { BR              X10 }
}

uint64_t sub_23DBF888C()
{
  sub_23DC2A28C();
  return swift_bridgeObjectRelease();
}

void sub_23DBF88E0()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23DC2A880();
  __asm { BR              X9 }
}

uint64_t sub_23DBF8924()
{
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingAction_optional sub_23DBF898C(Swift::String *a1)
{
  return HealthBalanceOnboardingAnalyticsEvent.OnboardingAction.init(rawValue:)(*a1);
}

uint64_t sub_23DBF8998()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23DBF89C4 + 4 * byte_23DC2FAF1[*v0]))();
}

void sub_23DBF89C4(_QWORD *a1@<X8>)
{
  *a1 = 1954047342;
  a1[1] = 0xE400000000000000;
}

void sub_23DBF89D8(_QWORD *a1@<X8>)
{
  *a1 = 1885956979;
  a1[1] = 0xE400000000000000;
}

void sub_23DBF89EC(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6E4F6E727574;
  a1[1] = v1;
}

void sub_23DBF8A00(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x646577656976;
  a1[1] = v1;
}

HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingProvenance_optional __swiftcall HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingProvenance_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23DC2A700();
  result.value = swift_bridgeObjectRelease();
  v5 = 13;
  if (v3 < 0xD)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t sub_23DBF8A6C()
{
  return sub_23DBC57CC();
}

uint64_t sub_23DBF8A78()
{
  sub_23DC2A880();
  HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter();
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBF8ADC()
{
  HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter();
  sub_23DC2A28C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DBF8B2C()
{
  sub_23DC2A880();
  HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter();
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingProvenance_optional sub_23DBF8B8C(Swift::String *a1)
{
  return HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.init(rawValue:)(*a1);
}

uint64_t sub_23DBF8B98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingStep_optional __swiftcall HealthBalanceOnboardingAnalyticsEvent.OnboardingStep.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingStep_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23DC2A700();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t sub_23DBF8C14(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23DBC56A4(*a1, *a2);
}

uint64_t sub_23DBF8C20()
{
  sub_23DC2A880();
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBF8CC8()
{
  sub_23DC2A28C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DBF8D4C()
{
  sub_23DC2A880();
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

HealthBalance::HealthBalanceOnboardingAnalyticsEvent::OnboardingStep_optional sub_23DBF8DF0(Swift::String *a1)
{
  return HealthBalanceOnboardingAnalyticsEvent.OnboardingStep.init(rawValue:)(*a1);
}

void sub_23DBF8DFC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xED0000736E6F6974;
  v5 = 0x6163696669746F4ELL;
  if (v2 != 1)
  {
    v5 = 0x7065656C53;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x656D6F636C6557;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_23DBF8E64(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_23DBF8EC0()
{
  int v0;
  void *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _BYTE v56[96];

  v4 = MEMORY[0x24BEE0D00];
  v5 = MEMORY[0x24BEE0D28];
  *(_QWORD *)(v3 - 96) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v3 - 88) = v5;
  *(_QWORD *)(v3 - 120) = 1954047342;
  *(_QWORD *)(v3 - 112) = 0xE400000000000000;
  sub_23DBF3444((__int128 *)(v3 - 120), v3 - 160);
  v6 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 - 168) = v6;
  v8 = __swift_mutable_project_boxed_opaque_existential_1(v3 - 160, *(_QWORD *)(v3 - 136));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (uint64_t *)&v56[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  sub_23DC25638(*v10, v10[1], 0x6E6F69746361, 0xE600000000000000, isUniquelyReferenced_nonNull_native, (_QWORD *)(v3 - 168));
  __swift_destroy_boxed_opaque_existential_1(v3 - 160);
  v12 = *(_QWORD *)(v3 - 168);
  *(_QWORD *)(v3 - 72) = v12;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v3 - 120) = v2;
  v13 = HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance.rawValue.getter();
  *(_QWORD *)(v3 - 96) = v4;
  *(_QWORD *)(v3 - 88) = v5;
  *(_QWORD *)(v3 - 120) = v13;
  *(_QWORD *)(v3 - 112) = v14;
  sub_23DBF3444((__int128 *)(v3 - 120), v3 - 160);
  LOBYTE(v6) = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 - 168) = v12;
  v15 = __swift_mutable_project_boxed_opaque_existential_1(v3 - 160, *(_QWORD *)(v3 - 136));
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t *)&v56[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  sub_23DC25638(*v17, v17[1], 0x6E616E65766F7270, 0xEA00000000006563, v6, (_QWORD *)(v3 - 168));
  __swift_destroy_boxed_opaque_existential_1(v3 - 160);
  v19 = *(_QWORD *)(v3 - 168);
  swift_bridgeObjectRelease();
  if (v0)
  {
    if (v0 == 1)
    {
      v20 = 0xED0000736E6F6974;
      v21 = 0x6163696669746F4ELL;
    }
    else
    {
      v20 = 0xE500000000000000;
      v21 = 0x7065656C53;
    }
  }
  else
  {
    v20 = 0xE700000000000000;
    v21 = 0x656D6F636C6557;
  }
  *(_QWORD *)(v3 - 96) = v4;
  *(_QWORD *)(v3 - 88) = v5;
  *(_QWORD *)(v3 - 120) = v21;
  *(_QWORD *)(v3 - 112) = v20;
  sub_23DBF3444((__int128 *)(v3 - 120), v3 - 160);
  v22 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 - 168) = v19;
  v23 = __swift_mutable_project_boxed_opaque_existential_1(v3 - 160, *(_QWORD *)(v3 - 136));
  MEMORY[0x24BDAC7A8](v23);
  v25 = (uint64_t *)&v56[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  sub_23DC25638(*v25, v25[1], 1885697139, 0xE400000000000000, v22, (_QWORD *)(v3 - 168));
  __swift_destroy_boxed_opaque_existential_1(v3 - 160);
  v27 = *(_QWORD *)(v3 - 168);
  *(_QWORD *)(v3 - 72) = v27;
  swift_bridgeObjectRelease();
  v28 = sub_23DC2A244();
  v30 = v29;
  v31 = v4;
  v32 = v1;
  v33 = objc_msgSend(v1, sel_activePairedDeviceProductType);
  if (v33)
  {
    v34 = v5;
    v35 = v33;
    v36 = sub_23DC2A244();
    v37 = v31;
    v39 = v38;

    *(_QWORD *)(v3 - 96) = v37;
    *(_QWORD *)(v3 - 88) = v34;
    *(_QWORD *)(v3 - 120) = v36;
    *(_QWORD *)(v3 - 112) = v39;
    sub_23DBF3444((__int128 *)(v3 - 120), v3 - 160);
    LOBYTE(v39) = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 - 168) = v27;
    *(_QWORD *)(v3 - 72) = 0x8000000000000000;
    v40 = __swift_mutable_project_boxed_opaque_existential_1(v3 - 160, *(_QWORD *)(v3 - 136));
    MEMORY[0x24BDAC7A8](v40);
    v42 = &v56[-((v41 + 15) & 0xFFFFFFFFFFFFFFF0)];
    (*(void (**)(_BYTE *))(v43 + 16))(v42);
    sub_23DC25980((uint64_t)v42, v28, v30, v39, (_QWORD *)(v3 - 168), v37, MEMORY[0x24BEE0D28]);
    __swift_destroy_boxed_opaque_existential_1(v3 - 160);
    *(_QWORD *)(v3 - 72) = *(_QWORD *)(v3 - 168);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23DC25358(v28, v30, v3 - 120);
    swift_bridgeObjectRelease();
    sub_23DBF9CB8(v3 - 120);
  }
  v44 = sub_23DC2A244();
  v46 = v45;
  v47 = objc_msgSend(v32, sel_isImproveHealthAndActivityEnabled);
  v48 = MEMORY[0x24BEE1340];
  *(_QWORD *)(v3 - 96) = MEMORY[0x24BEE1328];
  *(_QWORD *)(v3 - 88) = v48;
  *(_BYTE *)(v3 - 120) = v47;
  sub_23DBF3444((__int128 *)(v3 - 120), v3 - 160);
  v49 = *(_QWORD *)(v3 - 72);
  v50 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 - 168) = v49;
  *(_QWORD *)(v3 - 72) = 0x8000000000000000;
  v51 = __swift_mutable_project_boxed_opaque_existential_1(v3 - 160, *(_QWORD *)(v3 - 136));
  MEMORY[0x24BDAC7A8](v51);
  v53 = &v56[-((v52 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(char *))(v54 + 16))(v53);
  sub_23DC257DC(*v53, v44, v46, v50, (_QWORD *)(v3 - 168));
  __swift_destroy_boxed_opaque_existential_1(v3 - 160);
  *(_QWORD *)(v3 - 72) = *(_QWORD *)(v3 - 168);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return *(_QWORD *)(v3 - 72);
}

id sub_23DBF9418(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  id v35;
  uint64_t v37;
  void *v38;
  void *v39;
  id v40[3];
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v4 = sub_23DC29E48();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = (void *)MEMORY[0x24BEE4B00];
  v8 = objc_msgSend(a1, sel_currentDate);
  sub_23DC29E24();

  v9 = (void *)sub_23DC29E0C();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)&v42 = 0;
  v10 = objc_msgSend(a2, sel_ageWithCurrentDate_error_, v9, &v42);

  v11 = (id)v42;
  if (v10)
  {
    v12 = objc_msgSend(v10, sel_integerValue);

    v13 = MEMORY[0x24BEE1768];
    v14 = MEMORY[0x24BEE1788];
    v43 = MEMORY[0x24BEE1768];
    v44 = MEMORY[0x24BEE1788];
    *(_QWORD *)&v42 = v12;
    sub_23DBF3444(&v42, (uint64_t)v40);
    v15 = v39;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v38 = v15;
    v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v40, v41);
    MEMORY[0x24BDAC7A8](v17);
    v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v20 + 16))(v19);
    sub_23DC25980((uint64_t)v19, 6645601, 0xE300000000000000, isUniquelyReferenced_nonNull_native, &v38, v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    v39 = v38;
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = v11;
    v22 = (void *)sub_23DC29D04();

    swift_willThrow();
    sub_23DC25358(6645601, 0xE300000000000000, (uint64_t)&v42);
    sub_23DBF9CB8((uint64_t)&v42);
  }
  v40[0] = 0;
  v23 = objc_msgSend(a2, sel_biologicalSexWithError_, v40);
  if (v23)
  {
    v24 = v23;
    v25 = v40[0];
    v26 = (id)HKAnalyticsPropertyValueForBiologicalSex();

    v27 = sub_23DC2A244();
    v29 = v28;

    v43 = MEMORY[0x24BEE0D00];
    v44 = MEMORY[0x24BEE0D28];
    *(_QWORD *)&v42 = v27;
    *((_QWORD *)&v42 + 1) = v29;
    sub_23DBF3444(&v42, (uint64_t)v40);
    v30 = v39;
    LOBYTE(v26) = swift_isUniquelyReferenced_nonNull_native();
    v38 = v30;
    v31 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v40, v41);
    MEMORY[0x24BDAC7A8](v31);
    v33 = (uint64_t *)((char *)&v37 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v34 + 16))(v33);
    sub_23DC25638(*v33, v33[1], 0x6369676F6C6F6962, 0xED00007865536C61, (char)v26, &v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    v35 = v38;
    swift_bridgeObjectRelease();
  }
  else
  {
    v35 = v40[0];
    swift_bridgeObjectRelease();
    sub_23DC29D04();

    swift_willThrow();
  }
  return v35;
}

void sub_23DBF97DC(void *a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = objc_msgSend(a1, sel_healthDataSource);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(a1, sel_environmentDataSource);
    v6 = sub_23DBF9418(v5, v4);
    if (v1)
    {
      swift_unknownObjectRelease();

    }
    else
    {
      v7 = (uint64_t)v6;

      sub_23DBF7FC4(v7);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_23DBF7F80();
    swift_allocError();
    swift_willThrow();
  }
}

unint64_t sub_23DBF98BC()
{
  unint64_t result;

  result = qword_256CEA330;
  if (!qword_256CEA330)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for HealthBalanceOnboardingAnalyticsEvent.OnboardingAction, &type metadata for HealthBalanceOnboardingAnalyticsEvent.OnboardingAction);
    atomic_store(result, (unint64_t *)&qword_256CEA330);
  }
  return result;
}

unint64_t sub_23DBF9904()
{
  unint64_t result;

  result = qword_256CEA338;
  if (!qword_256CEA338)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance, &type metadata for HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance);
    atomic_store(result, (unint64_t *)&qword_256CEA338);
  }
  return result;
}

unint64_t sub_23DBF994C()
{
  unint64_t result;

  result = qword_256CEA340;
  if (!qword_256CEA340)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for HealthBalanceOnboardingAnalyticsEvent.OnboardingStep, &type metadata for HealthBalanceOnboardingAnalyticsEvent.OnboardingStep);
    atomic_store(result, (unint64_t *)&qword_256CEA340);
  }
  return result;
}

uint64_t type metadata accessor for HealthBalanceOnboardingAnalyticsEvent()
{
  return objc_opt_self();
}

uint64_t method lookup function for HealthBalanceOnboardingAnalyticsEvent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HealthBalanceOnboardingAnalyticsEvent.__allocating_init(action:provenance:step:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t storeEnumTagSinglePayload for HealthBalanceOnboardingAnalyticsEvent.OnboardingAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23DBF9A10 + 4 * byte_23DC2FAFB[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23DBF9A44 + 4 * byte_23DC2FAF6[v4]))();
}

uint64_t sub_23DBF9A44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBF9A4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBF9A54);
  return result;
}

uint64_t sub_23DBF9A60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBF9A68);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23DBF9A6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBF9A74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthBalanceOnboardingAnalyticsEvent.OnboardingAction()
{
  return &type metadata for HealthBalanceOnboardingAnalyticsEvent.OnboardingAction;
}

uint64_t getEnumTagSinglePayload for HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_23DBF9B6C + 4 * byte_23DC2FB05[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_23DBF9BA0 + 4 * byte_23DC2FB00[v4]))();
}

uint64_t sub_23DBF9BA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBF9BA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBF9BB0);
  return result;
}

uint64_t sub_23DBF9BBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBF9BC4);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_23DBF9BC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBF9BD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance()
{
  return &type metadata for HealthBalanceOnboardingAnalyticsEvent.OnboardingProvenance;
}

uint64_t storeEnumTagSinglePayload for HealthBalanceOnboardingAnalyticsEvent.OnboardingStep(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DBF9C38 + 4 * byte_23DC2FB0F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DBF9C6C + 4 * byte_23DC2FB0A[v4]))();
}

uint64_t sub_23DBF9C6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBF9C74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBF9C7CLL);
  return result;
}

uint64_t sub_23DBF9C88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBF9C90);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DBF9C94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBF9C9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthBalanceOnboardingAnalyticsEvent.OnboardingStep()
{
  return &type metadata for HealthBalanceOnboardingAnalyticsEvent.OnboardingStep;
}

uint64_t sub_23DBF9CB8(uint64_t a1)
{
  uint64_t v2;

  sub_23DBF9CF4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23DBF9CF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CEA458)
  {
    sub_23DBF9D48();
    v0 = sub_23DC2A4C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CEA458);
  }
}

unint64_t sub_23DBF9D48()
{
  unint64_t result;

  result = qword_256CEA108;
  if (!qword_256CEA108)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_256CEA108);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

void sub_23DBF9DC4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CEA110)
  {
    v0 = sub_23DC2A6D0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CEA110);
  }
}

uint64_t sub_23DBF9E2C()
{
  return swift_release();
}

uint64_t HealthBalanceAppLaunchAnalyticsEvent.__allocating_init(needsOnboarding:source:)(char a1, char *a2)
{
  uint64_t result;
  char v5;

  result = swift_allocObject();
  v5 = *a2;
  *(_BYTE *)(result + 16) = a1;
  *(_BYTE *)(result + 17) = v5;
  return result;
}

uint64_t HealthBalanceAppLaunchAnalyticsEvent.init(needsOnboarding:source:)(char a1, char *a2)
{
  uint64_t v2;
  char v3;

  v3 = *a2;
  *(_BYTE *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 17) = v3;
  return v2;
}

uint64_t HealthBalanceAppLaunchAnalyticsEvent.isEventSubmissionIHAGated.getter()
{
  return 0;
}

unint64_t HealthBalanceAppLaunchAnalyticsEvent.eventName.getter()
{
  return 0xD000000000000022;
}

void HealthBalanceAppLaunchAnalyticsEvent.makeUnrestrictedEventPayload(with:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = objc_msgSend(a1, sel_environmentDataSource);
  v4 = *(_BYTE *)(v1 + 16);
  v7 = *(_BYTE *)(v1 + 17);
  sub_23DBFA190(v3, v4, &v7);
  v6 = v5;

  if (!v2)
  {
    sub_23DBF7FC4(v6);
    swift_bridgeObjectRelease();
  }
}

void HealthBalanceAppLaunchAnalyticsEvent.makeIHAGatedEventPayload(with:)(void *a1)
{
  sub_23DBF97DC(a1);
}

uint64_t HealthBalanceAppLaunchAnalyticsEvent.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t HealthBalanceAppLaunchAnalyticsEvent.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void sub_23DBFA190(void *a1, char a2, unsigned __int8 *a3)
{
  uint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE v35[24];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v5 = *a3;
  v6 = MEMORY[0x24BEE4B00];
  v40 = MEMORY[0x24BEE4B00];
  v7 = objc_msgSend(a1, sel_activePairedDeviceProductType);
  v8 = MEMORY[0x24BEE0D00];
  v9 = MEMORY[0x24BEE0D28];
  if (v7)
  {
    v10 = v7;
    v11 = sub_23DC2A244();
    v13 = v12;

    v38 = v8;
    v39 = v9;
    *(_QWORD *)&v37 = v11;
    *((_QWORD *)&v37 + 1) = v13;
    sub_23DBF3444(&v37, (uint64_t)v35);
    LOBYTE(v10) = swift_isUniquelyReferenced_nonNull_native();
    v34 = v6;
    v40 = 0x8000000000000000;
    v14 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v35, v36);
    MEMORY[0x24BDAC7A8](v14);
    v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v17 + 16))(v16);
    sub_23DC25980((uint64_t)v16, 0xD000000000000016, 0x800000023DC32E60, (char)v10, &v34, v8, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    v18 = v34;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23DC25358(0xD000000000000016, 0x800000023DC32E60, (uint64_t)&v37);
    sub_23DBF9CB8((uint64_t)&v37);
    v18 = v40;
  }
  v19 = objc_msgSend(a1, sel_isImproveHealthAndActivityEnabled);
  v20 = MEMORY[0x24BEE1328];
  v21 = MEMORY[0x24BEE1340];
  v38 = MEMORY[0x24BEE1328];
  v39 = MEMORY[0x24BEE1340];
  LOBYTE(v37) = v19;
  sub_23DBF3444(&v37, (uint64_t)v35);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v34 = v18;
  v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v35, v36);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v26 + 16))(v25);
  sub_23DC257DC(*v25, 0xD000000000000021, 0x800000023DC32E80, isUniquelyReferenced_nonNull_native, &v34);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  v27 = v34;
  swift_bridgeObjectRelease();
  v38 = v20;
  v39 = v21;
  LOBYTE(v37) = (a2 & 1) == 0;
  sub_23DBF3444(&v37, (uint64_t)v35);
  v28 = swift_isUniquelyReferenced_nonNull_native();
  v34 = v27;
  v29 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v35, v36);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v33 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v32 + 16))(v31);
  sub_23DC257DC(*v31, 0x72616F626E4F7369, 0xEB00000000646564, v28, &v34);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  v40 = v34;
  swift_bridgeObjectRelease();
  __asm { BR              X11 }
}

uint64_t sub_23DBFA4E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  *(_QWORD *)(v2 - 96) = v1;
  v3 = MEMORY[0x24BEE0D28];
  *(_QWORD *)(v2 - 88) = MEMORY[0x24BEE0D28];
  *(_QWORD *)(v2 - 120) = 0x7373656E746966;
  *(_QWORD *)(v2 - 112) = 0xE700000000000000;
  sub_23DBF3444((__int128 *)(v2 - 120), v2 - 160);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 - 168) = v0;
  v5 = __swift_mutable_project_boxed_opaque_existential_1(v2 - 160, *(_QWORD *)(v2 - 136));
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  sub_23DC25980((uint64_t)v7, 0x6E616E65766F7270, 0xEA00000000006563, isUniquelyReferenced_nonNull_native, (_QWORD *)(v2 - 168), v1, v3);
  __swift_destroy_boxed_opaque_existential_1(v2 - 160);
  v9 = *(_QWORD *)(v2 - 168);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t type metadata accessor for HealthBalanceAppLaunchAnalyticsEvent()
{
  return objc_opt_self();
}

uint64_t method lookup function for HealthBalanceAppLaunchAnalyticsEvent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HealthBalanceAppLaunchAnalyticsEvent.__allocating_init(needsOnboarding:source:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_23DBFA72C()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_minimum);
  v3 = sub_23DC27F70();

  objc_msgSend(v1, sel_isMinimumInclusive, 0, 0xE000000000000000);
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  objc_msgSend(v1, sel_isMaximumInclusive);
  sub_23DC2A2A4();
  swift_bridgeObjectRetain();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v1, sel_maximum);
  sub_23DC27F70();

  swift_bridgeObjectRetain();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

id static HealthBalanceUtilities.bundle.getter()
{
  void *v0;
  id v1;

  v0 = (void *)sub_23DC2A220();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v0);

  return v1;
}

unint64_t static HealthBalanceUtilities.nanoBalanceBundleIdentifier.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static HealthBalanceUtilities.nanoBalanceBundleName.getter()
{
  return 0xD000000000000011;
}

unint64_t static HealthBalanceUtilities.balanceAppPluginBundleName.getter()
{
  return 0xD00000000000001CLL;
}

unint64_t static HealthBalanceUtilities.nanoBalanceBundleNameAndExtension.getter()
{
  return 0xD000000000000015;
}

unint64_t static HealthBalanceUtilities.balanceAppPluginBundleNameAndExtension.getter()
{
  return 0xD000000000000029;
}

uint64_t static HealthBalanceUtilities.pluginIdentifier.getter()
{
  return 0x614268746C616548;
}

unint64_t static HealthBalanceUtilities.balanceSevenDaysWidgetKind.getter()
{
  return 0xD000000000000011;
}

unint64_t static HealthBalanceUtilities.balanceOneDayWidgetKind.getter()
{
  return 0xD000000000000017;
}

void *static HealthBalanceUtilities.balanceWidgetKinds.getter()
{
  return &unk_250E88828;
}

unint64_t static HealthBalanceUtilities.balanceWidgetBundleIdentifier.getter()
{
  return 0xD00000000000002DLL;
}

unint64_t static HealthBalanceUtilities.nanoBalanceWidgetBundleIdentifier.getter()
{
  return 0xD00000000000003CLL;
}

ValueMetadata *type metadata accessor for HealthBalanceUtilities()
{
  return &type metadata for HealthBalanceUtilities;
}

Swift::String __swiftcall HKQuantityRange.formattedValue(for:unit:)(HealthBalance::SleepingSampleDataType a1, HKUnit unit)
{
  void *v2;
  void *v3;
  char v5;
  id v6;
  unsigned __int128 v7;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v10;
  id v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String result;
  unsigned __int128 v16;

  v3 = v2;
  v5 = *(_BYTE *)a1;
  v6 = objc_msgSend(v2, sel_minimum);
  LOBYTE(v16) = v5;
  v7 = (unsigned __int128)HKQuantity.formattedValue(for:unit:)((HealthBalance::SleepingSampleDataType)&v16, unit);

  objc_msgSend(v3, sel_isMinimumInclusive, 0, 0xE000000000000000);
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  objc_msgSend(v3, sel_isMaximumInclusive);
  sub_23DC2A2A4();
  v16 = v7;
  swift_bridgeObjectRetain();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = (Swift::String)v16;
  object = v10._object;
  countAndFlagsBits = v10._countAndFlagsBits;
  v11 = objc_msgSend(v3, sel_maximum);
  LOBYTE(v16) = v5;
  HKQuantity.formattedValue(for:unit:)((HealthBalance::SleepingSampleDataType)&v16, unit);

  v16 = __PAIR128__((unint64_t)object, countAndFlagsBits);
  swift_bridgeObjectRetain();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = (Swift::String)v16;
  v13 = v14._object;
  v12 = v14._countAndFlagsBits;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

uint64_t Optional<A>.formattedValue(for:unit:)(char *a1, HKUnit a2, void *a3)
{
  id v4;
  uint64_t countAndFlagsBits;
  char v7;

  if (!a3)
    return 0x9380E29380E2;
  v7 = *a1;
  v4 = a3;
  countAndFlagsBits = HKQuantityRange.formattedValue(for:unit:)((HealthBalance::SleepingSampleDataType)&v7, a2)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t static Calendar.gregorianPacific.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  sub_23DBBF348(0, &qword_256CEA508, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v9 - v1;
  v3 = sub_23DC29EFC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDCEF70], v3);
  sub_23DC29F08();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_23DC29F8C();
  v7 = sub_23DC29FA4();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v2, 1, v7);
  if ((_DWORD)result != 1)
    return sub_23DC29F74();
  __break(1u);
  return result;
}

uint64_t Calendar.date(matching:onMorningIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD v13[2];

  sub_23DBBF348(0, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v13 - v7;
  Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(a1, a2, (uint64_t)v13 - v7);
  v9 = sub_23DC29E48();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  sub_23DBFB390((uint64_t)v8);
  _s5ErrorOMa();
  sub_23DBB2CB0(&qword_256CEA510, (uint64_t (*)(uint64_t))_s5ErrorOMa, (uint64_t)&unk_23DC2FEA0);
  swift_allocError();
  *v11 = a1;
  v11[1] = a2;
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

uint64_t Calendar.date(onMorningIndex:matchingHour:matchingMinute:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v50 = a2;
  v47 = a1;
  v60 = a3;
  v4 = sub_23DC29F20();
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v54 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DC29F2C();
  v52 = *(_QWORD *)(v6 - 8);
  v53 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v51 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23DC29F14();
  v58 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBBF348(0, &qword_256CEA508, (void (*)(uint64_t))MEMORY[0x24BDCF510]);
  MEMORY[0x24BDAC7A8](v11);
  v46 = (char *)&v43 - v12;
  sub_23DBBF348(0, &qword_25431F8F0, (void (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v43 - v14;
  v16 = sub_23DC29CC8();
  v48 = *(_QWORD *)(v16 - 8);
  v49 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v45 = (char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBBF348(0, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v43 - v19;
  v21 = sub_23DC29E48();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (void *)objc_opt_self();
  v26 = sub_23DC2A124();
  v57 = v3;
  v27 = (void *)sub_23DC29F38();
  v28 = objc_msgSend(v25, sel_hk_sleepDayStartForMorningIndex_calendar_, v26, v27);

  sub_23DC29E24();
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v29((uint64_t)v20, 0, 1, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_23DBFB390((uint64_t)v20);
    return v29(v60, 1, 1, v21);
  }
  else
  {
    v44 = v22;
    v31 = v24;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
    v32 = sub_23DC29F80();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v15, 1, 1, v32);
    v33 = sub_23DC29FA4();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v46, 1, 1, v33);
    v34 = v45;
    sub_23DC29CBC();
    (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v10, *MEMORY[0x24BDCF010], v59);
    v35 = v51;
    v36 = v52;
    v37 = v53;
    (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v51, *MEMORY[0x24BDCF0B0], v53);
    v38 = *MEMORY[0x24BDCF068];
    v40 = v54;
    v39 = v55;
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 104);
    v50 = v21;
    v42 = v56;
    v41(v54, v38, v56);
    sub_23DC29F5C();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v42);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v35, v37);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v10, v59);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v34, v49);
    return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v31, v50);
  }
}

uint64_t sub_23DBFB390(uint64_t a1)
{
  uint64_t v2;

  sub_23DBBF348(0, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s5ErrorOMa()
{
  uint64_t result;

  result = qword_256CEA590;
  if (!qword_256CEA590)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Calendar.dateInterval(start:end:onMorningIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t *v28;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, char *, uint64_t);
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v45 = a6;
  v50 = a4;
  v49 = a3;
  sub_23DBBF348(0, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v43 - v13;
  v15 = sub_23DC29E48();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v44 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v43 = (char *)&v43 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v46 = (char *)&v43 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v43 - v23;
  v47 = a1;
  v48 = a5;
  v25 = a1;
  v26 = a2;
  Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(v25, a2, (uint64_t)v14);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v27(v14, 1, v15) == 1)
  {
    sub_23DBFB390((uint64_t)v14);
    _s5ErrorOMa();
    sub_23DBB2CB0(&qword_256CEA510, (uint64_t (*)(uint64_t))_s5ErrorOMa, (uint64_t)&unk_23DC2FEA0);
    swift_allocError();
    *v28 = v47;
    v28[1] = v26;
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    v30 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v30(v24, v14, v15);
    v31 = v49;
    v32 = v50;
    Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(v49, v50, (uint64_t)v12);
    if (v27(v12, 1, v15) == 1)
    {
      sub_23DBFB390((uint64_t)v12);
      _s5ErrorOMa();
      sub_23DBB2CB0(&qword_256CEA510, (uint64_t (*)(uint64_t))_s5ErrorOMa, (uint64_t)&unk_23DC2FEA0);
      swift_allocError();
      *v33 = v31;
      v33[1] = v32;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v24, v15);
    }
    else
    {
      v34 = v46;
      v30(v46, v12, v15);
      sub_23DBB2CB0((unint64_t *)&qword_25431F8E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
      if ((sub_23DC2A1A8() & 1) != 0)
      {
        _s5ErrorOMa();
        sub_23DBB2CB0(&qword_256CEA510, (uint64_t (*)(uint64_t))_s5ErrorOMa, (uint64_t)&unk_23DC2FEA0);
        swift_allocError();
        v36 = v35;
        sub_23DBFB834();
        v38 = v34;
        v39 = v36 + *(int *)(v37 + 48);
        v40 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 16);
        v40(v36, v24, v15);
        v40(v39, v38, v15);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        v41 = *(void (**)(char *, uint64_t))(v16 + 8);
        v41(v38, v15);
      }
      else
      {
        v42 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
        v42(v43, v24, v15);
        v42(v44, v34, v15);
        sub_23DC29BCC();
        v41 = *(void (**)(char *, uint64_t))(v16 + 8);
        v41(v34, v15);
      }
      return ((uint64_t (*)(char *, uint64_t))v41)(v24, v15);
    }
  }
}

void sub_23DBFB834()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CEA518)
  {
    sub_23DC29E48();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CEA518);
  }
}

uint64_t *sub_23DBFB898(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v8 = sub_23DC29E48();
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    v9(a1, a2, v8);
    sub_23DBFB834();
    v9((uint64_t *)((char *)a1 + *(int *)(v10 + 48)), (uint64_t *)((char *)a2 + *(int *)(v10 + 48)), v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_23DBFB970(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  if (!(_DWORD)result)
  {
    v3 = sub_23DC29E48();
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
    v5(a1, v3);
    sub_23DBFB834();
    return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + *(int *)(v4 + 48), v3);
  }
  return result;
}

char *sub_23DBFB9EC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23DC29E48();
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    sub_23DBFB834();
    v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_23DBFBA9C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;

  if (a1 != a2)
  {
    sub_23DBFBB5C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23DC29E48();
      v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
      v7(a1, a2, v6);
      sub_23DBFB834();
      v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_23DBFBB5C(uint64_t a1)
{
  uint64_t v2;

  v2 = _s5ErrorOMa();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_23DBFBB98(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = sub_23DC29E48();
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    sub_23DBFB834();
    v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_23DBFBC48(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;

  if (a1 != a2)
  {
    sub_23DBFBB5C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = sub_23DC29E48();
      v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      sub_23DBFB834();
      v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_23DBFBD08()
{
  uint64_t result;
  unint64_t v1;
  _QWORD v2[6];

  result = sub_23DC29E48();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[4] = v2;
    v2[5] = &unk_23DC2FE88;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

HealthBalance::TrainingLoadBand __swiftcall TrainingLoadBand.init(fractionalDifferenceFromChronicBaseline:)(Swift::Double fractionalDifferenceFromChronicBaseline)
{
  _BYTE *v1;
  _BYTE *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  double *v12;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  char v17;
  HealthBalance::TrainingLoadBand result;

  v3 = v1;
  if (qword_256CE94A0 != -1)
LABEL_30:
    result = swift_once();
  v4 = 0;
  v5 = 1 << *((_BYTE *)off_256CEA5C8 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = (char *)off_256CEA5C8 + 64;
  v8 = v6 & *((_QWORD *)off_256CEA5C8 + 8);
  v9 = (unint64_t)(v5 + 63) >> 6;
  while (v8)
  {
    v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v11 = v10 | (v4 << 6);
LABEL_6:
    v12 = (double *)(*((_QWORD *)off_256CEA5C8 + 7) + 16 * v11);
    if (*v12 <= fractionalDifferenceFromChronicBaseline && v12[1] > fractionalDifferenceFromChronicBaseline)
    {
      v17 = *(_BYTE *)(*((_QWORD *)off_256CEA5C8 + 6) + v11);
      goto LABEL_27;
    }
  }
  v14 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v14 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)&v7[8 * v14];
  ++v4;
  if (v15)
    goto LABEL_25;
  v4 = v14 + 1;
  if (v14 + 1 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)&v7[8 * v4];
  if (v15)
    goto LABEL_25;
  v4 = v14 + 2;
  if (v14 + 2 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)&v7[8 * v4];
  if (v15)
  {
LABEL_25:
    v8 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_6;
  }
  v16 = v14 + 3;
  if (v16 < v9)
  {
    v15 = *(_QWORD *)&v7[8 * v16];
    if (!v15)
    {
      while (1)
      {
        v4 = v16 + 1;
        if (__OFADD__(v16, 1))
          goto LABEL_29;
        if (v4 >= v9)
          goto LABEL_26;
        v15 = *(_QWORD *)&v7[8 * v4];
        ++v16;
        if (v15)
          goto LABEL_25;
      }
    }
    v4 = v16;
    goto LABEL_25;
  }
LABEL_26:
  v17 = 4 * (fractionalDifferenceFromChronicBaseline > 0.0);
LABEL_27:
  *v3 = v17;
  return result;
}

HealthBalance::TrainingLoadBand __swiftcall TrainingLoadBand.init(value:baseline:)(Swift::Double value, Swift::Double baseline)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  HealthBalance::TrainingLoadBand result;
  char v9;
  char v10;
  char v11;

  v3 = v2;
  if (baseline == 0.0)
  {
    if (qword_25431F3A8 != -1)
      swift_once();
    v4 = sub_23DC29FF8();
    __swift_project_value_buffer(v4, (uint64_t)qword_25431F3C8);
    v5 = sub_23DC29FE0();
    v6 = sub_23DC2A46C();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v7 = 134217984;
      sub_23DC2A4CC();
      _os_log_impl(&dword_23DBAF000, v5, v6, "Tried to create a band with a baseline of 0 and value of %f", v7, 0xCu);
      MEMORY[0x24263E4E8](v7, -1, -1);
    }

    result = TrainingLoadBand.init(fractionalDifferenceFromChronicBaseline:)(0.0);
    v9 = v10;
  }
  else
  {
    result = TrainingLoadBand.init(fractionalDifferenceFromChronicBaseline:)((value - baseline) / baseline);
    v9 = v11;
  }
  *v3 = v9;
  return result;
}

unint64_t TrainingLoadBand.valueRangeForBand(baseline:)(uint64_t a1, char a2)
{
  unsigned __int8 *v2;
  unsigned __int8 v5;
  _QWORD *v6;
  unint64_t result;
  char v8;
  double *v9;
  double v10;
  double v11;
  double v12;

  v5 = *v2;
  if (qword_256CE94A0 != -1)
    swift_once();
  v6 = off_256CEA5C8;
  if (!*((_QWORD *)off_256CEA5C8 + 2))
    goto LABEL_10;
  result = sub_23DBF0CF0(v5);
  if ((v8 & 1) == 0)
    goto LABEL_10;
  v9 = (double *)(v6[7] + 16 * result);
  v10 = 0.0;
  v11 = *v9 * *(double *)&a1 + *(double *)&a1;
  v12 = 1.0;
  if ((a2 & 1) != 0)
  {
    v11 = *v9 + 0.0;
  }
  else
  {
    v12 = *(double *)&a1;
    v10 = *(double *)&a1;
  }
  if (v11 > v10 + v12 * v9[1])
  {
    __break(1u);
LABEL_10:
    result = sub_23DC2A694("Fatal error", 11, 2, 0xD000000000000027, 0x800000023DC32F80, "HealthBalance/TrainingLoadBand.swift", 36, 2, 45, 0);
    __break(1u);
  }
  return result;
}

uint64_t TrainingLoadBand.id.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t TrainingLoadBand.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void *sub_23DBFC160()
{
  void *result;

  result = (void *)sub_23DBF22E0((uint64_t)&unk_250E87FF8);
  off_256CEA5C8 = result;
  return result;
}

HealthBalance::TrainingLoadBand_optional __swiftcall TrainingLoadBand.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 5;
  if ((unint64_t)rawValue < 5)
    v2 = rawValue;
  *v1 = v2;
  return (HealthBalance::TrainingLoadBand_optional)rawValue;
}

void *static TrainingLoadBand.allCases.getter()
{
  return &unk_250E88868;
}

HealthBalance::TrainingLoadBand_optional sub_23DBFC1A4(Swift::Int *a1)
{
  return TrainingLoadBand.init(rawValue:)(*a1);
}

void sub_23DBFC1AC(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_23DBFC1B8()
{
  sub_23DBFC430();
  return sub_23DC2A328();
}

uint64_t sub_23DBFC214()
{
  sub_23DBFC430();
  return sub_23DC2A31C();
}

void sub_23DBFC260(_QWORD *a1@<X8>)
{
  *a1 = &unk_250E88890;
}

unint64_t sub_23DBFC274()
{
  unint64_t result;

  result = qword_256CEA5D0;
  if (!qword_256CEA5D0)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for TrainingLoadBand, &type metadata for TrainingLoadBand);
    atomic_store(result, (unint64_t *)&qword_256CEA5D0);
  }
  return result;
}

unint64_t sub_23DBFC2BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256CEA5D8;
  if (!qword_256CEA5D8)
  {
    sub_23DBFC304();
    result = MEMORY[0x24263E440](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256CEA5D8);
  }
  return result;
}

void sub_23DBFC304()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CEA5E0)
  {
    v0 = sub_23DC2A3A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CEA5E0);
  }
}

uint64_t sub_23DBFC358()
{
  return MEMORY[0x24BEE1778];
}

uint64_t storeEnumTagSinglePayload for TrainingLoadBand(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23DBFC3B0 + 4 * byte_23DC2FEF5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23DBFC3E4 + 4 * byte_23DC2FEF0[v4]))();
}

uint64_t sub_23DBFC3E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBFC3EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBFC3F4);
  return result;
}

uint64_t sub_23DBFC400(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBFC408);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23DBFC40C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBFC414(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadBand()
{
  return &type metadata for TrainingLoadBand;
}

unint64_t sub_23DBFC430()
{
  unint64_t result;

  result = qword_256CEA5E8;
  if (!qword_256CEA5E8)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for TrainingLoadBand, &type metadata for TrainingLoadBand);
    atomic_store(result, (unint64_t *)&qword_256CEA5E8);
  }
  return result;
}

HealthBalance::TrainingLoadQueryType_optional __swiftcall TrainingLoadQueryType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (HealthBalance::TrainingLoadQueryType_optional)rawValue;
}

uint64_t TrainingLoadQueryType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

HealthBalance::TrainingLoadQueryType_optional sub_23DBFC490(Swift::Int *a1)
{
  return TrainingLoadQueryType.init(rawValue:)(*a1);
}

uint64_t sub_23DBFC498()
{
  sub_23DBFDC1C();
  return sub_23DC2A328();
}

uint64_t sub_23DBFC4F4()
{
  sub_23DBFDC1C();
  return sub_23DC2A31C();
}

uint64_t sub_23DBFC540@<X0>(uint64_t a1@<X8>)
{
  return sub_23DBFC64C(&OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], a1);
}

uint64_t sub_23DBFC55C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), _QWORD *a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;

  sub_23DBB89B8(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v17 - v13;
  sub_23DBB8B24(a1, (uint64_t)&v17 - v13, a5, a6);
  v15 = *a2 + *a7;
  swift_beginAccess();
  sub_23DBDD860((uint64_t)v14, v15, a5, a6);
  return swift_endAccess();
}

uint64_t sub_23DBFC630@<X0>(uint64_t a1@<X8>)
{
  return sub_23DBFC64C(&OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange, (unint64_t *)&qword_256CE9D38, (uint64_t (*)(uint64_t))sub_23DBBFA18, a1);
}

uint64_t sub_23DBFC64C@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;

  v8 = v4 + *a1;
  swift_beginAccess();
  return sub_23DBB8B24(v8, a4, a2, a3);
}

uint64_t sub_23DBFC6B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

id TrainingLoadDaySummaryQueryConfiguration.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id TrainingLoadDaySummaryQueryConfiguration.init()()
{
  _BYTE *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  objc_super v6;

  v1 = &v0[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar];
  v2 = sub_23DC29F80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = &v0[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange];
  sub_23DBBFA18();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v0[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested] = 3;
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for TrainingLoadDaySummaryQueryConfiguration()
{
  uint64_t result;

  result = qword_256CEA620;
  if (!qword_256CEA620)
    return swift_getSingletonMetadata();
  return result;
}

_OWORD *sub_23DBFC8B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  objc_class *DaySummaryQueryConfiguration;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _BYTE *v20;
  _BYTE v22[24];
  uint64_t v23;
  char v24[32];
  objc_super v25;
  _OWORD v26[2];

  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DBB89B8(0, (unint64_t *)&qword_256CE9D38, (uint64_t (*)(uint64_t))sub_23DBBFA18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v22[-v7];
  sub_23DBB89B8(0, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v5);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v22[-v10];
  DaySummaryQueryConfiguration = (objc_class *)type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
  v25.receiver = v2;
  v25.super_class = DaySummaryQueryConfiguration;
  objc_msgSendSuper2(&v25, sel_copyWithZone_, a1);
  sub_23DC2A520();
  swift_unknownObjectRelease();
  sub_23DBB8948((uint64_t)v26, (uint64_t)v24);
  if (!swift_dynamicCast())
    return sub_23DBF345C(v26, (_OWORD *)a2);
  v13 = v23;
  v14 = (uint64_t)&v2[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar];
  swift_beginAccess();
  v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8];
  sub_23DBB8B24(v14, (uint64_t)v11, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  v16 = v13 + OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar;
  swift_beginAccess();
  sub_23DBDD860((uint64_t)v11, v16, &qword_25431F8F0, v15);
  swift_endAccess();
  v17 = (uint64_t)&v2[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange];
  swift_beginAccess();
  sub_23DBB8B24(v17, (uint64_t)v8, (unint64_t *)&qword_256CE9D38, (uint64_t (*)(uint64_t))sub_23DBBFA18);
  v18 = v13 + OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange;
  swift_beginAccess();
  sub_23DBDD860((uint64_t)v8, v18, (unint64_t *)&qword_256CE9D38, (uint64_t (*)(uint64_t))sub_23DBBFA18);
  swift_endAccess();
  v19 = &v2[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested];
  swift_beginAccess();
  LOBYTE(v18) = *v19;
  v20 = (_BYTE *)(v13 + OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested);
  swift_beginAccess();
  *v20 = v18;
  *(_QWORD *)(a2 + 24) = DaySummaryQueryConfiguration;
  *(_QWORD *)a2 = v13;
  return (_OWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
}

id TrainingLoadDaySummaryQueryConfiguration.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

uint64_t TrainingLoadDaySummaryQueryConfiguration.init(coder:)(void *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  void (*v26)(_BYTE *, uint64_t, uint64_t, uint64_t);
  objc_class *DaySummaryQueryConfiguration;
  id v28;
  id v29;
  char *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  id v57;
  id v58;
  char v59;
  char *v60;
  id v61;
  char *v62;
  id v63;
  void (*v64)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  void *v75;
  char v76[24];
  uint64_t v77;
  objc_super v78;

  sub_23DBC2A3C();
  v67 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v69 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v65 = (char *)&v61 - v6;
  sub_23DBBFA18();
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v66 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DBB89B8(0, (unint64_t *)&qword_256CE9D38, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v13);
  v68 = (uint64_t)&v61 - v14;
  sub_23DBB89B8(0, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v11);
  MEMORY[0x24BDAC7A8](v15);
  v71 = (char *)&v61 - v16;
  v17 = sub_23DC2A154();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v72 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v61 - v21;
  v23 = &v1[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar];
  v24 = sub_23DC29F80();
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v25(v23, 1, 1, v24);
  v26 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v70 = v8;
  v26(&v1[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange], 1, 1, v8);
  v1[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested] = 3;
  DaySummaryQueryConfiguration = (objc_class *)type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
  v78.receiver = v1;
  v78.super_class = DaySummaryQueryConfiguration;
  v28 = objc_msgSendSuper2(&v78, sel_initWithCoder_, a1);
  v29 = v28;
  if (!v28)
  {

    return (uint64_t)v29;
  }
  v64 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v26;
  v73 = v18;
  v30 = (char *)v28;
  v31 = (void *)sub_23DC2A220();
  objc_msgSend(a1, sel_decodeIntegerForKey_, v31);

  v74 = v22;
  sub_23DC2A118();
  v32 = (void *)sub_23DC2A220();
  objc_msgSend(a1, sel_decodeIntegerForKey_, v32);

  sub_23DBB89B8(0, &qword_25431EFE0, (uint64_t (*)(uint64_t))sub_23DBFD28C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_23DC2B900;
  *(_QWORD *)(v33 + 32) = sub_23DBFD2C8();
  sub_23DC2A49C();
  swift_bridgeObjectRelease();
  if (!v77)
  {

    sub_23DBB2BB0((uint64_t)v76, (uint64_t (*)(_QWORD))sub_23DBB88BC);
LABEL_12:
    (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v17);

    return 0;
  }
  v63 = a1;
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_12;
  }
  v34 = (uint64_t)v71;
  v61 = v75;
  sub_23DC29F50();
  v25((char *)v34, 0, 1, v24);
  v62 = v30;
  v35 = (uint64_t)&v30[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar];
  swift_beginAccess();
  sub_23DBDD860(v34, v35, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  swift_endAccess();
  v36 = v72;
  v37 = v74;
  sub_23DC2A0E8();
  sub_23DBCE0BC((unint64_t *)&qword_25431FAC8, MEMORY[0x24BDD24A8]);
  result = sub_23DC2A1C0();
  v39 = v73;
  if ((result & 1) != 0)
  {
    v40 = v67;
    v41 = v65;
    v42 = &v65[*(int *)(v67 + 48)];
    v43 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    v43(v65, v37, v17);
    v44 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v44(v42, v36, v17);
    v45 = v39;
    v46 = v69;
    v47 = &v69[*(int *)(v40 + 48)];
    v43(v69, v41, v17);
    v43(v47, v42, v17);
    v48 = (uint64_t)v66;
    v44(v66, v46, v17);
    v49 = *(void (**)(char *, uint64_t))(v45 + 8);
    v49(v47, v17);
    v50 = &v46[*(int *)(v40 + 48)];
    v44(v46, v41, v17);
    v44(v50, v42, v17);
    v51 = v70;
    v44((char *)(v48 + *(int *)(v70 + 36)), v50, v17);
    v49(v46, v17);
    v52 = v49;
    v53 = v68;
    sub_23DBEA250(v48, v68);
    v64(v53, 0, 1, v51);
    v54 = v62;
    v55 = (uint64_t)&v62[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange];
    swift_beginAccess();
    sub_23DBDD860(v53, v55, (unint64_t *)&qword_256CE9D38, (uint64_t (*)(uint64_t))sub_23DBBFA18);
    swift_endAccess();
    v56 = (void *)sub_23DC2A220();
    v57 = v63;
    v58 = objc_msgSend(v63, sel_decodeIntegerForKey_, v56);

    v52(v74, v17);
    if ((unint64_t)v58 >= 3)
      v59 = 3;
    else
      v59 = (char)v58;
    v60 = &v54[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested];
    swift_beginAccess();
    *v60 = v59;
    return (uint64_t)v29;
  }
  __break(1u);
  return result;
}

unint64_t sub_23DBFD28C()
{
  unint64_t result;

  result = qword_25431EFE8;
  if (!qword_25431EFE8)
  {
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_25431EFE8);
  }
  return result;
}

unint64_t sub_23DBFD2C8()
{
  unint64_t result;

  result = qword_25431EF60;
  if (!qword_25431EF60)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25431EF60);
  }
  return result;
}

void sub_23DBFD328(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  objc_class *DaySummaryQueryConfiguration;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  objc_super v44;

  v3 = sub_23DC2A154();
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v39 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DBB89B8(0, (unint64_t *)&qword_256CE9D38, (uint64_t (*)(uint64_t))sub_23DBBFA18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v38 - v10;
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8];
  sub_23DBB89B8(0, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v5);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v38 - v14;
  DaySummaryQueryConfiguration = (objc_class *)type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
  v44.receiver = v1;
  v44.super_class = DaySummaryQueryConfiguration;
  v17 = a1;
  objc_msgSendSuper2(&v44, sel_encodeWithCoder_, a1);
  v42 = v1;
  v18 = (uint64_t)&v1[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar];
  swift_beginAccess();
  sub_23DBB8B24(v18, (uint64_t)v15, &qword_25431F8F0, v12);
  v19 = sub_23DC29F80();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v15, 1, v19) != 1)
  {
    v21 = sub_23DC29F38();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v15, v19);
  }
  v22 = (void *)sub_23DC2A220();
  objc_msgSend(v17, sel_encodeObject_forKey_, v21, v22);
  swift_unknownObjectRelease();

  v23 = (uint64_t)&v42[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange];
  swift_beginAccess();
  sub_23DBB8B24(v23, (uint64_t)v11, (unint64_t *)&qword_256CE9D38, (uint64_t (*)(uint64_t))sub_23DBBFA18);
  sub_23DBBFA18();
  v25 = v24;
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48);
  if (v26(v11, 1, v24) == 1)
  {
    __break(1u);
    goto LABEL_8;
  }
  v27 = v39;
  v28 = v40;
  v29 = v41;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v39, v11, v41);
  sub_23DBB2BB0((uint64_t)v11, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  v30 = sub_23DC2A124();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v29);
  v31 = (void *)sub_23DC2A220();
  objc_msgSend(v17, sel_encodeInteger_forKey_, v30, v31);

  sub_23DBB8B24(v23, (uint64_t)v9, (unint64_t *)&qword_256CE9D38, (uint64_t (*)(uint64_t))sub_23DBBFA18);
  if (v26(v9, 1, v25) == 1)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  sub_23DBCE0BC(&qword_256CE9748, MEMORY[0x24BDD24C0]);
  sub_23DC2A4F0();
  v32 = v43;
  sub_23DBB2BB0((uint64_t)v9, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  v33 = (void *)sub_23DC2A220();
  objc_msgSend(v17, sel_encodeInteger_forKey_, v32, v33);

  v34 = &v42[OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested];
  swift_beginAccess();
  v35 = *v34;
  if (v35 != 3)
  {
    v36 = v17;
    v37 = (void *)sub_23DC2A220();
    objc_msgSend(v36, sel_encodeInteger_forKey_, v35, v37);

    return;
  }
LABEL_9:
  __break(1u);
}

id TrainingLoadDaySummaryQueryConfiguration.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_23DBFD7F8()
{
  unint64_t result;

  result = qword_256CEA5F0;
  if (!qword_256CEA5F0)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for TrainingLoadQueryType, &type metadata for TrainingLoadQueryType);
    atomic_store(result, (unint64_t *)&qword_256CEA5F0);
  }
  return result;
}

uint64_t sub_23DBFD83C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], a2);
}

uint64_t sub_23DBFD858(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_23DBFC55C(a1, a2, a3, a4, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], &OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_gregorianCalendar);
}

uint64_t sub_23DBFD884@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange, (unint64_t *)&qword_256CE9D38, (uint64_t (*)(uint64_t))sub_23DBBFA18, a2);
}

uint64_t keypath_getTm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, unint64_t *a3@<X4>, uint64_t (*a4)(uint64_t)@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;

  v8 = *a1 + *a2;
  swift_beginAccess();
  return sub_23DBB8B24(v8, a5, a3, a4);
}

uint64_t sub_23DBFD908(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_23DBFC55C(a1, a2, a3, a4, (unint64_t *)&qword_256CE9D38, (uint64_t (*)(uint64_t))sub_23DBBFA18, &OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_morningIndexRange);
}

uint64_t sub_23DBFD934@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_23DBFD984(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC13HealthBalance40TrainingLoadDaySummaryQueryConfiguration_typeOfDataRequested);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t storeEnumTagSinglePayload for TrainingLoadQueryType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DBFDA1C + 4 * byte_23DC3008D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DBFDA50 + 4 * byte_23DC30088[v4]))();
}

uint64_t sub_23DBFDA50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBFDA58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DBFDA60);
  return result;
}

uint64_t sub_23DBFDA6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DBFDA74);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DBFDA78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DBFDA80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrainingLoadQueryType()
{
  return &type metadata for TrainingLoadQueryType;
}

uint64_t sub_23DBFDAF8()
{
  return type metadata accessor for TrainingLoadDaySummaryQueryConfiguration();
}

void sub_23DBFDB00()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DBB89B8(319, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_23DBB89B8(319, (unint64_t *)&qword_256CE9D38, (uint64_t (*)(uint64_t))sub_23DBBFA18, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for TrainingLoadDaySummaryQueryConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TrainingLoadDaySummaryQueryConfiguration.gregorianCalendar.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of TrainingLoadDaySummaryQueryConfiguration.morningIndexRange.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of TrainingLoadDaySummaryQueryConfiguration.typeOfDataRequested.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

unint64_t sub_23DBFDC1C()
{
  unint64_t result;

  result = qword_256CEA630;
  if (!qword_256CEA630)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for TrainingLoadQueryType, &type metadata for TrainingLoadQueryType);
    atomic_store(result, (unint64_t *)&qword_256CEA630);
  }
  return result;
}

uint64_t static HKFeatureAvailabilityContext.sleepingHeartRateAnalysis.getter()
{
  return sub_23DC2A220();
}

uint64_t WatchFeatureCapabilities.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

HealthBalance::WatchFeatureCapabilities __swiftcall WatchFeatureCapabilities.init(rawValue:)(HealthBalance::WatchFeatureCapabilities rawValue)
{
  HealthBalance::WatchFeatureCapabilities *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static WatchFeatureCapabilities.bloodOxygen.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static WatchFeatureCapabilities.wristTemperature.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static WatchFeatureCapabilities.allCapabilities.getter(_QWORD *a1@<X8>)
{
  *a1 = 3;
}

unint64_t sub_23DBFDCC8()
{
  unint64_t result;

  result = qword_256CEA638;
  if (!qword_256CEA638)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for WatchFeatureCapabilities, &type metadata for WatchFeatureCapabilities);
    atomic_store(result, (unint64_t *)&qword_256CEA638);
  }
  return result;
}

unint64_t sub_23DBFDD10()
{
  unint64_t result;

  result = qword_256CEA640;
  if (!qword_256CEA640)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for WatchFeatureCapabilities, &type metadata for WatchFeatureCapabilities);
    atomic_store(result, (unint64_t *)&qword_256CEA640);
  }
  return result;
}

unint64_t sub_23DBFDD58()
{
  unint64_t result;

  result = qword_256CEA648;
  if (!qword_256CEA648)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for WatchFeatureCapabilities, &type metadata for WatchFeatureCapabilities);
    atomic_store(result, (unint64_t *)&qword_256CEA648);
  }
  return result;
}

unint64_t sub_23DBFDDA0()
{
  unint64_t result;

  result = qword_256CEA650;
  if (!qword_256CEA650)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for WatchFeatureCapabilities, &type metadata for WatchFeatureCapabilities);
    atomic_store(result, (unint64_t *)&qword_256CEA650);
  }
  return result;
}

ValueMetadata *type metadata accessor for WatchFeatureCapabilities()
{
  return &type metadata for WatchFeatureCapabilities;
}

uint64_t SleepingSampleAggregateDaySummary.morningIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DC2A154();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SleepingSampleAggregateDaySummary.heartRate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleAggregateDaySummary();
  return sub_23DBB2B6C(v1 + *(int *)(v3 + 20), a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
}

uint64_t type metadata accessor for SleepingSampleAggregateDaySummary()
{
  uint64_t result;

  result = qword_25431F398;
  if (!qword_25431F398)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SleepingSampleAggregateDaySummary.bloodOxygen.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleAggregateDaySummary();
  return sub_23DBB2B6C(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
}

uint64_t SleepingSampleAggregateDaySummary.respiratoryRate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleAggregateDaySummary();
  return sub_23DBB2B6C(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
}

uint64_t SleepingSampleAggregateDaySummary.wristTemperature.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleAggregateDaySummary();
  return sub_23DBB2B6C(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
}

uint64_t SleepingSampleAggregateDaySummary.timeAsleep.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleAggregateDaySummary();
  return sub_23DBB2B6C(v1 + *(int *)(v3 + 36), a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
}

uint64_t SleepingSampleAggregateDaySummary.init(morningIndex:heartRate:bloodOxygen:respiratoryRate:wristTemperature:timeAsleep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  int *v15;

  v14 = sub_23DC2A154();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a7, a1, v14);
  v15 = (int *)type metadata accessor for SleepingSampleAggregateDaySummary();
  sub_23DBFE058(a2, a7 + v15[5]);
  sub_23DBFE058(a3, a7 + v15[6]);
  sub_23DBFE058(a4, a7 + v15[7]);
  sub_23DBFE058(a5, a7 + v15[8]);
  return sub_23DBFE058(a6, a7 + v15[9]);
}

uint64_t sub_23DBFE058(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepingSampleAggregate();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t SleepingSampleAggregateDaySummary.description.getter()
{
  sub_23DC2A5A4();
  swift_bridgeObjectRelease();
  sub_23DC2A124();
  sub_23DC2A7D8();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  type metadata accessor for SleepingSampleAggregateDaySummary();
  SleepingSampleAggregate.description.getter();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  SleepingSampleAggregate.description.getter();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  SleepingSampleAggregate.description.getter();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  SleepingSampleAggregate.description.getter();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  SleepingSampleAggregate.description.getter();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  return 0xD000000000000022;
}

uint64_t SleepingSampleAggregateDaySummary.latestSampleEnd.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(void);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  void (*v39)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = a1;
  v2 = sub_23DC29E48();
  v44 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v41 - v6;
  v8 = sub_23DC29BF0();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v43 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v42 = (char *)&v41 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v41 - v14;
  sub_23DBD65F8(0);
  v17 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for SleepingSampleAggregateDaySummary();
  v21 = v1 + *(int *)(v20 + 36);
  v22 = *(int *)(type metadata accessor for SleepingSampleAggregate() + 28);
  v23 = v21 + v22;
  v24 = v1 + *(int *)(v20 + 32) + v22;
  v25 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_23DBB2B6C(v23, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_23DBD4810);
  sub_23DBB2B6C(v24, v25, (uint64_t (*)(_QWORD))sub_23DBD4810);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  LODWORD(v17) = v26(v19, 1, v8);
  v27 = v26((char *)v25, 1, v8);
  if ((_DWORD)v17 == 1)
  {
    if (v27 == 1)
    {
      v28 = 1;
      v29 = v46;
LABEL_8:
      v32 = v44;
      v31 = v45;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v29, v28, 1, v31);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v15, v25, v8);
LABEL_7:
    v29 = v46;
    sub_23DC29BC0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    v28 = 0;
    goto LABEL_8;
  }
  v30 = *(void (**)(void))(v9 + 32);
  if (v27 == 1)
  {
    ((void (*)(char *, char *, uint64_t))v30)(v15, v19, v8);
    goto LABEL_7;
  }
  v33 = v42;
  v30();
  v34 = v43;
  ((void (*)(char *, uint64_t, uint64_t))v30)(v43, v25, v8);
  v35 = v33;
  sub_23DC29BC0();
  sub_23DC29BC0();
  sub_23DBB2CB0((unint64_t *)&qword_25431F8E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
  v31 = v45;
  v36 = sub_23DC2A1B4();
  v32 = v44;
  if ((v36 & 1) != 0)
    v37 = v5;
  else
    v37 = v7;
  v29 = v46;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 16))(v46, v37, v31);
  v38 = *(void (**)(char *, uint64_t))(v32 + 8);
  v38(v5, v31);
  v38(v7, v31);
  v39 = *(void (**)(char *, uint64_t))(v9 + 8);
  v39(v34, v8);
  v39(v35, v8);
  v28 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v29, v28, 1, v31);
}

uint64_t SleepingSampleAggregateDaySummary.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unsigned int (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v118)(char *, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t (*v120)(char *, uint64_t, uint64_t);
  uint64_t v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v1 = sub_23DC29E48();
  v112 = *(_QWORD *)(v1 - 8);
  v113 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v110 = (char *)&v96 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v109 = (uint64_t)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v107 = (uint64_t)&v96 - v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v104 = (uint64_t)&v96 - v9;
  v10 = MEMORY[0x24BDAC7A8](v8);
  v101 = (uint64_t)&v96 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v98 = (uint64_t)&v96 - v12;
  v126 = sub_23DC29BF0();
  v116 = *(_QWORD *)(v126 - 8);
  MEMORY[0x24BDAC7A8](v126);
  v115 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v108 = (uint64_t)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v105 = (uint64_t)&v96 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v102 = (uint64_t)&v96 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v99 = (uint64_t)&v96 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v96 - v23;
  sub_23DBC6894(0);
  v26 = v25;
  v27 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v96 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  v31 = MEMORY[0x24BDAC7A8](v30);
  v106 = (uint64_t)&v96 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v103 = (uint64_t)&v96 - v34;
  v35 = MEMORY[0x24BDAC7A8](v33);
  v100 = (uint64_t)&v96 - v36;
  v37 = MEMORY[0x24BDAC7A8](v35);
  v97 = (uint64_t)&v96 - v38;
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v96 - v39;
  v41 = sub_23DC2A154();
  v42 = sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  v122 = (int *)type metadata accessor for SleepingSampleAggregateDaySummary();
  v123 = v42;
  v43 = v122[5];
  v124 = v41;
  v125 = v0;
  v44 = v0 + v43;
  v45 = v26;
  sub_23DC2A190();
  v46 = (int *)type metadata accessor for SleepingSampleAggregate();
  v47 = sub_23DC29F80();
  v48 = sub_23DBB2CB0(&qword_256CE9630, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], MEMORY[0x24BDCF300]);
  v121 = v47;
  v119 = v48;
  sub_23DC2A190();
  sub_23DBB2B6C(v44 + v46[6], (uint64_t)v40, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  v120 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v49 = v120(v40, 1, v45);
  v114 = v27;
  if (v49 == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v29, v40, v45);
    sub_23DC2A898();
    sub_23DBBA6DC();
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v45);
  }
  v50 = v29;
  sub_23DBB2B6C(v44 + v46[7], (uint64_t)v24, (uint64_t (*)(_QWORD))sub_23DBD4810);
  v51 = v116;
  v118 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 48);
  v52 = v118(v24, 1, v126);
  v53 = v112;
  v111 = v29;
  if (v52 == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v54 = v115;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v115, v24, v126);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9638, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB890]);
    sub_23DC2A190();
    v55 = v54;
    v50 = v111;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v55, v126);
  }
  v56 = v98;
  sub_23DBB2B6C(v44 + v46[8], v98, (uint64_t (*)(_QWORD))sub_23DBD482C);
  v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
  v58 = v53;
  v59 = v113;
  v117 = v57;
  if (v57(v56, 1, v113) == 1)
  {
    sub_23DC2A898();
    v60 = v110;
  }
  else
  {
    v60 = v110;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v110, v56, v59);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v59);
  }
  sub_23DC2A88C();
  v61 = v125 + v122[6];
  sub_23DC2A190();
  sub_23DC2A190();
  v62 = v97;
  sub_23DBB2B6C(v61 + v46[6], v97, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if (v120((char *)v62, 1, v45) == 1)
  {
    sub_23DC2A898();
    v63 = v112;
    v64 = v113;
    v65 = v114;
  }
  else
  {
    v65 = v114;
    (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v50, v62, v45);
    sub_23DC2A898();
    sub_23DBBA6DC();
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v45);
    v63 = v112;
    v64 = v113;
  }
  v66 = v99;
  sub_23DBB2B6C(v61 + v46[7], v99, (uint64_t (*)(_QWORD))sub_23DBD4810);
  if (v118((char *)v66, 1, v126) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v67 = v115;
    v68 = v116;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 32))(v115, v66, v126);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9638, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB890]);
    sub_23DC2A190();
    v69 = *(void (**)(char *, uint64_t))(v68 + 8);
    v65 = v114;
    v70 = v67;
    v50 = v111;
    v69(v70, v126);
  }
  v71 = v101;
  sub_23DBB2B6C(v61 + v46[8], v101, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if (v117(v71, 1, v64) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v60, v71, v64);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v64);
  }
  sub_23DC2A88C();
  v72 = v125 + v122[7];
  sub_23DC2A190();
  sub_23DC2A190();
  v73 = v100;
  sub_23DBB2B6C(v72 + v46[6], v100, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if (v120((char *)v73, 1, v45) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v50, v73, v45);
    sub_23DC2A898();
    sub_23DBBA6DC();
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v45);
  }
  v74 = v102;
  sub_23DBB2B6C(v72 + v46[7], v102, (uint64_t (*)(_QWORD))sub_23DBD4810);
  if (v118((char *)v74, 1, v126) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v75 = v115;
    v76 = v116;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 32))(v115, v74, v126);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9638, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB890]);
    sub_23DC2A190();
    v77 = *(void (**)(char *, uint64_t))(v76 + 8);
    v65 = v114;
    v78 = v75;
    v50 = v111;
    v77(v78, v126);
  }
  v79 = v104;
  sub_23DBB2B6C(v72 + v46[8], v104, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if (v117(v79, 1, v64) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v60, v79, v64);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v64);
  }
  sub_23DC2A88C();
  v80 = v125 + v122[8];
  sub_23DC2A190();
  sub_23DC2A190();
  v81 = v103;
  sub_23DBB2B6C(v80 + v46[6], v103, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if (v120((char *)v81, 1, v45) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v50, v81, v45);
    sub_23DC2A898();
    sub_23DBBA6DC();
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v45);
  }
  v82 = v105;
  sub_23DBB2B6C(v80 + v46[7], v105, (uint64_t (*)(_QWORD))sub_23DBD4810);
  if (v118((char *)v82, 1, v126) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v83 = v115;
    v84 = v116;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 32))(v115, v82, v126);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9638, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB890]);
    sub_23DC2A190();
    v85 = *(void (**)(char *, uint64_t))(v84 + 8);
    v65 = v114;
    v86 = v83;
    v50 = v111;
    v85(v86, v126);
  }
  v87 = v107;
  sub_23DBB2B6C(v80 + v46[8], v107, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if (v117(v87, 1, v64) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v60, v87, v64);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v64);
  }
  sub_23DC2A88C();
  v88 = v125 + v122[9];
  sub_23DC2A190();
  sub_23DC2A190();
  v89 = v106;
  sub_23DBB2B6C(v88 + v46[6], v106, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if (v120((char *)v89, 1, v45) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))(v50, v89, v45);
    sub_23DC2A898();
    sub_23DBBA6DC();
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v45);
  }
  v90 = v108;
  sub_23DBB2B6C(v88 + v46[7], v108, (uint64_t (*)(_QWORD))sub_23DBD4810);
  if (v118((char *)v90, 1, v126) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    v92 = v115;
    v91 = v116;
    v93 = v126;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 32))(v115, v90, v126);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9638, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], MEMORY[0x24BDCB890]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v93);
  }
  v94 = v109;
  sub_23DBB2B6C(v88 + v46[8], v109, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if (v117(v94, 1, v64) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v60, v94, v64);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v64);
  }
  return sub_23DC2A88C();
}

uint64_t sub_23DBFF4BC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DBFF4F4
                                                            + 4 * asc_23DC303E0[*v0]))(0x49676E696E726F6DLL, 0xEC0000007865646ELL);
}

uint64_t sub_23DBFF4F4()
{
  return 0x7461527472616568;
}

uint64_t sub_23DBFF510()
{
  return 0x79784F646F6F6C62;
}

uint64_t sub_23DBFF530()
{
  return 0x7461726970736572;
}

unint64_t sub_23DBFF554()
{
  return 0xD000000000000010;
}

uint64_t sub_23DBFF570()
{
  return 0x656C7341656D6974;
}

uint64_t sub_23DBFF58C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DC04060(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DBFF5B0()
{
  sub_23DBFFFBC();
  return sub_23DC2A964();
}

uint64_t sub_23DBFF5D8()
{
  sub_23DBFFFBC();
  return sub_23DC2A970();
}

uint64_t SleepingSampleAggregateDaySummary.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;

  sub_23DC00000(0, &qword_256CEA658, MEMORY[0x24BEE3520]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBFFFBC();
  sub_23DC2A8C8();
  v15 = 0;
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_25431EF38, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD2498]);
  sub_23DC2A7C0();
  if (!v1)
  {
    type metadata accessor for SleepingSampleAggregateDaySummary();
    v14 = 1;
    type metadata accessor for SleepingSampleAggregate();
    sub_23DBB2CB0(&qword_25431EF00, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAggregate, (uint64_t)&protocol conformance descriptor for SleepingSampleAggregate);
    sub_23DC2A7C0();
    v13 = 2;
    sub_23DC2A7C0();
    v12 = 3;
    sub_23DC2A7C0();
    v11 = 4;
    sub_23DC2A7C0();
    v10 = 5;
    sub_23DC2A7C0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SleepingSampleAggregateDaySummary.hashValue.getter()
{
  sub_23DC2A880();
  SleepingSampleAggregateDaySummary.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleAggregateDaySummary.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  v33 = a2;
  v38 = type metadata accessor for SleepingSampleAggregate();
  v3 = MEMORY[0x24BDAC7A8](v38);
  v34 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v35 = (char *)&v31 - v6;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v36 = (char *)&v31 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v37 = (char *)&v31 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v39 = (char *)&v31 - v11;
  v40 = sub_23DC2A154();
  v12 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v42 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC00000(0, &qword_256CEA668, MEMORY[0x24BEE33E0]);
  v41 = v14;
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v31 - v16;
  v18 = type metadata accessor for SleepingSampleAggregateDaySummary();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DBFFFBC();
  v43 = v17;
  v21 = v44;
  sub_23DC2A8BC();
  if (v21)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v22 = (uint64_t)v39;
  v44 = v15;
  v31 = v12;
  v32 = a1;
  v23 = (uint64_t)v20;
  v50 = 0;
  sub_23DBB2CB0((unint64_t *)&unk_25431F270, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B8]);
  v24 = v40;
  sub_23DC2A760();
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v23, v42, v24);
  v49 = 1;
  v42 = (char *)sub_23DBB2CB0(&qword_25431F220, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAggregate, (uint64_t)&protocol conformance descriptor for SleepingSampleAggregate);
  sub_23DC2A760();
  v25 = (int *)v18;
  sub_23DBFE058(v22, v23 + *(int *)(v18 + 20));
  v48 = 2;
  v26 = (uint64_t)v37;
  sub_23DC2A760();
  sub_23DBFE058(v26, v23 + v25[6]);
  v47 = 3;
  v27 = (uint64_t)v36;
  sub_23DC2A760();
  sub_23DBFE058(v27, v23 + v25[7]);
  v46 = 4;
  v28 = (uint64_t)v35;
  sub_23DC2A760();
  sub_23DBFE058(v28, v23 + v25[8]);
  v45 = 5;
  v29 = (uint64_t)v34;
  sub_23DC2A760();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v43, v41);
  sub_23DBFE058(v29, v23 + v25[9]);
  sub_23DBB2B6C(v23, v33, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregateDaySummary);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  return sub_23DBB2BB0(v23, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregateDaySummary);
}

uint64_t sub_23DBFFE2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleAggregateDaySummary.init(from:)(a1, a2);
}

uint64_t sub_23DBFFE40(_QWORD *a1)
{
  return SleepingSampleAggregateDaySummary.encode(to:)(a1);
}

uint64_t sub_23DBFFE54()
{
  sub_23DC2A880();
  SleepingSampleAggregateDaySummary.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t sub_23DBFFE94()
{
  sub_23DC2A880();
  SleepingSampleAggregateDaySummary.hash(into:)();
  return sub_23DC2A8B0();
}

BOOL _s13HealthBalance33SleepingSampleAggregateDaySummaryV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  BOOL v5;
  uint64_t v7;

  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9748, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
  sub_23DC2A4F0();
  v5 = !v7
    && (v4 = (int *)type metadata accessor for SleepingSampleAggregateDaySummary(),
        static SleepingSampleAggregate.== infix(_:_:)(a1 + v4[5], a2 + v4[5]))
    && static SleepingSampleAggregate.== infix(_:_:)(a1 + v4[6], a2 + v4[6])
    && static SleepingSampleAggregate.== infix(_:_:)(a1 + v4[7], a2 + v4[7])
    && static SleepingSampleAggregate.== infix(_:_:)(a1 + v4[8], a2 + v4[8])
    && static SleepingSampleAggregate.== infix(_:_:)(a1 + v4[9], a2 + v4[9]);
  return v5;
}

unint64_t sub_23DBFFFBC()
{
  unint64_t result;

  result = qword_256CEA660;
  if (!qword_256CEA660)
  {
    result = MEMORY[0x24263E440](&unk_23DC30608, &type metadata for SleepingSampleAggregateDaySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA660);
  }
  return result;
}

void sub_23DC00000(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DBFFFBC();
    v7 = a3(a1, &type metadata for SleepingSampleAggregateDaySummary.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DC0005C(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_23DBB2CB0(&qword_25431F860, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleAggregateDaySummary);
  a1[2] = sub_23DBB2CB0(&qword_25431F848, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleAggregateDaySummary);
  result = sub_23DBB2CB0(&qword_25431F850, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleAggregateDaySummary);
  a1[3] = result;
  return result;
}

uint64_t sub_23DC000D4()
{
  return sub_23DBB2CB0(&qword_25431F858, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleAggregateDaySummary);
}

char *initializeBufferWithCopyOfBuffer for SleepingSampleAggregateDaySummary(char *a1, char *a2, int *a3)
{
  int v4;
  uint64_t v5;
  void (*v6)(char *, char *, uint64_t);
  uint64_t v7;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int (*v100)(char *, uint64_t, uint64_t);
  unsigned int (*v101)(char *, uint64_t, uint64_t);
  unsigned int (*v102)(char *, uint64_t, uint64_t);
  void (*v103)(char *, char *, uint64_t);
  void (*v104)(char *, char *, uint64_t);
  uint64_t v105;
  char *v106;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v21 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v21 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = sub_23DC2A154();
    v6 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
    v6(a1, a2, v5);
    v7 = a3[5];
    v8 = &a1[v7];
    v105 = v5;
    v106 = a2;
    v9 = &a2[v7];
    v104 = v6;
    v6(&a1[v7], &a2[v7], v5);
    v10 = (int *)type metadata accessor for SleepingSampleAggregate();
    v11 = v10[5];
    v12 = &v8[v11];
    v13 = &v9[v11];
    v99 = sub_23DC29F80();
    v103 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 16);
    v103(v12, v13, v99);
    v14 = v10[6];
    v15 = &v8[v14];
    v16 = &v9[v14];
    sub_23DBC6894(0);
    v18 = v17;
    v19 = *(_QWORD *)(v17 - 8);
    v102 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    v97 = v19;
    if (v102(v16, 1, v17))
    {
      sub_23DBB29B8();
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v15, v16, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
    }
    v22 = v10[7];
    v23 = &v8[v22];
    v24 = &v9[v22];
    v25 = sub_23DC29BF0();
    v26 = *(_QWORD *)(v25 - 8);
    v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    v96 = v26;
    if (v101(v24, 1, v25))
    {
      sub_23DBD4810(0);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v28 = v10[8];
    v29 = &v8[v28];
    v30 = &v9[v28];
    v31 = sub_23DC29E48();
    v32 = *(_QWORD *)(v31 - 8);
    v100 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    v33 = v99;
    v98 = v32;
    if (v100(v30, 1, v31))
    {
      sub_23DBD482C(0);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v8[v10[9]] = v9[v10[9]];
    v35 = a3[6];
    v36 = &a1[v35];
    v37 = &v106[v35];
    v104(&a1[v35], &v106[v35], v105);
    v103(&v36[v10[5]], &v37[v10[5]], v99);
    v38 = v10[6];
    v39 = &v36[v38];
    v40 = &v37[v38];
    if (v102(&v37[v38], 1, v18))
    {
      sub_23DBB29B8();
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v39, v40, v18);
      v33 = v99;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v39, 0, 1, v18);
    }
    v42 = v10[7];
    v43 = &v36[v42];
    v44 = &v37[v42];
    if (v101(&v37[v42], 1, v25))
    {
      sub_23DBD4810(0);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v43, v44, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v43, 0, 1, v25);
    }
    v46 = v10[8];
    v47 = &v36[v46];
    v48 = &v37[v46];
    if (v100(&v37[v46], 1, v31))
    {
      sub_23DBD482C(0);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v47, v48, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v47, 0, 1, v31);
    }
    v36[v10[9]] = v37[v10[9]];
    v50 = a3[7];
    v51 = &a1[v50];
    v52 = &v106[v50];
    v104(&a1[v50], &v106[v50], v105);
    v103(&v51[v10[5]], &v52[v10[5]], v33);
    v53 = v10[6];
    v54 = &v51[v53];
    v55 = &v52[v53];
    if (v102(&v52[v53], 1, v18))
    {
      sub_23DBB29B8();
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v54, v55, v18);
      v33 = v99;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v54, 0, 1, v18);
    }
    v57 = v10[7];
    v58 = &v51[v57];
    v59 = &v52[v57];
    if (v101(&v52[v57], 1, v25))
    {
      sub_23DBD4810(0);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v58, v59, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v58, 0, 1, v25);
    }
    v61 = v10[8];
    v62 = &v51[v61];
    v63 = &v52[v61];
    if (v100(&v52[v61], 1, v31))
    {
      sub_23DBD482C(0);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v62, v63, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v62, 0, 1, v31);
    }
    v51[v10[9]] = v52[v10[9]];
    v65 = a3[8];
    v66 = &a1[v65];
    v67 = &v106[v65];
    v104(&a1[v65], &v106[v65], v105);
    v103(&v66[v10[5]], &v67[v10[5]], v33);
    v68 = v10[6];
    v69 = &v66[v68];
    v70 = &v67[v68];
    if (v102(&v67[v68], 1, v18))
    {
      sub_23DBB29B8();
      memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v69, v70, v18);
      v33 = v99;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v69, 0, 1, v18);
    }
    v72 = v10[7];
    v73 = &v66[v72];
    v74 = &v67[v72];
    if (v101(&v67[v72], 1, v25))
    {
      sub_23DBD4810(0);
      memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v73, v74, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v73, 0, 1, v25);
    }
    v76 = v10[8];
    v77 = &v66[v76];
    v78 = &v67[v76];
    if (v100(&v67[v76], 1, v31))
    {
      sub_23DBD482C(0);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v77, v78, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v77, 0, 1, v31);
    }
    v66[v10[9]] = v67[v10[9]];
    v80 = a3[9];
    v81 = &a1[v80];
    v82 = &v106[v80];
    v104(&a1[v80], &v106[v80], v105);
    v103(&v81[v10[5]], &v82[v10[5]], v33);
    v83 = v10[6];
    v84 = &v81[v83];
    v85 = &v82[v83];
    if (v102(&v82[v83], 1, v18))
    {
      sub_23DBB29B8();
      memcpy(v84, v85, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v84, v85, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v84, 0, 1, v18);
    }
    v87 = v10[7];
    v88 = &v81[v87];
    v89 = &v82[v87];
    if (v101(&v82[v87], 1, v25))
    {
      sub_23DBD4810(0);
      memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v88, v89, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v88, 0, 1, v25);
    }
    v91 = v10[8];
    v92 = &v81[v91];
    v93 = &v82[v91];
    if (v100(&v82[v91], 1, v31))
    {
      sub_23DBD482C(0);
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v92, v93, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v92, 0, 1, v31);
    }
    v81[v10[9]] = v82[v10[9]];
  }
  return a1;
}

uint64_t destroy for SleepingSampleAggregateDaySummary(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  void (*v40)(uint64_t, uint64_t);
  int *v41;

  v4 = sub_23DC2A154();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v41 = a2;
  v6 = a1 + a2[5];
  v5(v6, v4);
  v7 = (int *)type metadata accessor for SleepingSampleAggregate();
  v8 = v6 + v7[5];
  v9 = sub_23DC29F80();
  v40 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v40(v8, v9);
  v10 = v6 + v7[6];
  sub_23DBC6894(0);
  v12 = v11;
  v36 = *(_QWORD *)(v11 - 8);
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  if (!v39(v10, 1, v11))
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v10, v12);
  v13 = v6 + v7[7];
  v14 = sub_23DC29BF0();
  v35 = *(_QWORD *)(v14 - 8);
  v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (!v38(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v13, v14);
  v15 = v6 + v7[8];
  v16 = sub_23DC29E48();
  v34 = *(_QWORD *)(v16 - 8);
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  if (!v37(v15, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v15, v16);
  v17 = a1 + v41[6];
  v5(v17, v4);
  v40(v17 + v7[5], v9);
  v18 = v17 + v7[6];
  if (!v39(v18, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v18, v12);
  v19 = v17 + v7[7];
  if (!v38(v19, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v19, v14);
  v20 = v17 + v7[8];
  if (!v37(v20, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v20, v16);
  v21 = a1 + v41[7];
  v5(v21, v4);
  v40(v21 + v7[5], v9);
  v22 = v21 + v7[6];
  if (!v39(v22, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v22, v12);
  v23 = v21 + v7[7];
  if (!v38(v23, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v23, v14);
  v24 = v21 + v7[8];
  if (!v37(v24, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v24, v16);
  v25 = a1 + v41[8];
  v5(v25, v4);
  v40(v25 + v7[5], v9);
  v26 = v25 + v7[6];
  if (!v39(v26, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v26, v12);
  v27 = v25 + v7[7];
  if (!v38(v27, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v27, v14);
  v28 = v25 + v7[8];
  if (!v37(v28, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v28, v16);
  v29 = a1 + v41[9];
  v5(v29, v4);
  v40(v29 + v7[5], v9);
  v30 = v29 + v7[6];
  if (!v39(v30, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v30, v12);
  v31 = v29 + v7[7];
  if (!v38(v31, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v31, v14);
  v32 = v29 + v7[8];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v37)(v32, 1, v16);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v32, v16);
  return result;
}

uint64_t initializeWithCopy for SleepingSampleAggregateDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const void *v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  unsigned int (*v101)(const void *, uint64_t, uint64_t);
  uint64_t v102;
  unsigned int (*v103)(const void *, uint64_t, uint64_t);
  unsigned int (*v104)(const void *, uint64_t, uint64_t);
  void (*v105)(uint64_t, uint64_t, uint64_t);
  int *v106;
  uint64_t v107;
  uint64_t v108;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v106 = a3;
  v8 = a3[5];
  v108 = a1;
  v9 = a1 + v8;
  v107 = a2;
  v10 = a2 + v8;
  v100 = v6;
  v105 = v7;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for SleepingSampleAggregate();
  v12 = v11[5];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = sub_23DC29F80();
  v99 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v102 = v15;
  v99(v13, v14);
  v16 = v11[6];
  v17 = (void *)(v9 + v16);
  v18 = (const void *)(v10 + v16);
  sub_23DBC6894(0);
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  v104 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  v98 = v21;
  if (v104(v18, 1, v19))
  {
    sub_23DBB29B8();
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 16))(v17, v18, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
  }
  v23 = v11[7];
  v24 = (void *)(v9 + v23);
  v25 = (const void *)(v10 + v23);
  v26 = sub_23DC29BF0();
  v27 = *(_QWORD *)(v26 - 8);
  v103 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
  v97 = v27;
  if (v103(v25, 1, v26))
  {
    sub_23DBD4810(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = v11[8];
  v30 = (void *)(v9 + v29);
  v31 = (const void *)(v10 + v29);
  v32 = sub_23DC29E48();
  v33 = *(_QWORD *)(v32 - 8);
  v101 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
  v34 = (void (*)(uint64_t, uint64_t, uint64_t))v99;
  if (v101(v31, 1, v32))
  {
    sub_23DBD482C(0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  *(_BYTE *)(v9 + v11[9]) = *(_BYTE *)(v10 + v11[9]);
  v36 = v106[6];
  v37 = v108 + v36;
  v38 = v107 + v36;
  v105(v108 + v36, v107 + v36, v100);
  ((void (*)(uint64_t, uint64_t, uint64_t))v99)(v37 + v11[5], v38 + v11[5], v102);
  v39 = v11[6];
  v40 = (void *)(v37 + v39);
  v41 = (const void *)(v38 + v39);
  if (v104((const void *)(v38 + v39), 1, v20))
  {
    sub_23DBB29B8();
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 16))(v40, v41, v20);
    v34 = (void (*)(uint64_t, uint64_t, uint64_t))v99;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v40, 0, 1, v20);
  }
  v43 = v11[7];
  v44 = (void *)(v37 + v43);
  v45 = (const void *)(v38 + v43);
  if (v103((const void *)(v38 + v43), 1, v26))
  {
    sub_23DBD4810(0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 16))(v44, v45, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v44, 0, 1, v26);
  }
  v47 = v11[8];
  v48 = (void *)(v37 + v47);
  v49 = (const void *)(v38 + v47);
  if (v101((const void *)(v38 + v47), 1, v32))
  {
    sub_23DBD482C(0);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v48, v49, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v48, 0, 1, v32);
  }
  *(_BYTE *)(v37 + v11[9]) = *(_BYTE *)(v38 + v11[9]);
  v51 = v106[7];
  v52 = v108 + v51;
  v53 = v107 + v51;
  v105(v108 + v51, v107 + v51, v100);
  v34(v52 + v11[5], v53 + v11[5], v102);
  v54 = v11[6];
  v55 = (void *)(v52 + v54);
  v56 = (const void *)(v53 + v54);
  if (v104((const void *)(v53 + v54), 1, v20))
  {
    sub_23DBB29B8();
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 16))(v55, v56, v20);
    v34 = (void (*)(uint64_t, uint64_t, uint64_t))v99;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v55, 0, 1, v20);
  }
  v58 = v11[7];
  v59 = (void *)(v52 + v58);
  v60 = (const void *)(v53 + v58);
  if (v103((const void *)(v53 + v58), 1, v26))
  {
    sub_23DBD4810(0);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 16))(v59, v60, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v59, 0, 1, v26);
  }
  v62 = v11[8];
  v63 = (void *)(v52 + v62);
  v64 = (const void *)(v53 + v62);
  if (v101((const void *)(v53 + v62), 1, v32))
  {
    sub_23DBD482C(0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v63, v64, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v63, 0, 1, v32);
  }
  *(_BYTE *)(v52 + v11[9]) = *(_BYTE *)(v53 + v11[9]);
  v66 = v106[8];
  v67 = v108 + v66;
  v68 = v107 + v66;
  v105(v108 + v66, v107 + v66, v100);
  v34(v67 + v11[5], v68 + v11[5], v102);
  v69 = v11[6];
  v70 = (void *)(v67 + v69);
  v71 = (const void *)(v68 + v69);
  if (v104((const void *)(v68 + v69), 1, v20))
  {
    sub_23DBB29B8();
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 16))(v70, v71, v20);
    v34 = (void (*)(uint64_t, uint64_t, uint64_t))v99;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v70, 0, 1, v20);
  }
  v73 = v11[7];
  v74 = (void *)(v67 + v73);
  v75 = (const void *)(v68 + v73);
  if (v103((const void *)(v68 + v73), 1, v26))
  {
    sub_23DBD4810(0);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 16))(v74, v75, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v74, 0, 1, v26);
  }
  v77 = v11[8];
  v78 = (void *)(v67 + v77);
  v79 = (const void *)(v68 + v77);
  if (v101((const void *)(v68 + v77), 1, v32))
  {
    sub_23DBD482C(0);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v78, v79, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v78, 0, 1, v32);
  }
  *(_BYTE *)(v67 + v11[9]) = *(_BYTE *)(v68 + v11[9]);
  v81 = v106[9];
  v82 = v108 + v81;
  v83 = v107 + v81;
  v105(v108 + v81, v107 + v81, v100);
  v34(v82 + v11[5], v83 + v11[5], v102);
  v84 = v11[6];
  v85 = (void *)(v82 + v84);
  v86 = (const void *)(v83 + v84);
  if (v104((const void *)(v83 + v84), 1, v20))
  {
    sub_23DBB29B8();
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 16))(v85, v86, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v85, 0, 1, v20);
  }
  v88 = v11[7];
  v89 = (void *)(v82 + v88);
  v90 = (const void *)(v83 + v88);
  if (v103((const void *)(v83 + v88), 1, v26))
  {
    sub_23DBD4810(0);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 16))(v89, v90, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v89, 0, 1, v26);
  }
  v92 = v11[8];
  v93 = (void *)(v82 + v92);
  v94 = (const void *)(v83 + v92);
  if (v101((const void *)(v83 + v92), 1, v32))
  {
    sub_23DBD482C(0);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v93, v94, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v93, 0, 1, v32);
  }
  *(_BYTE *)(v82 + v11[9]) = *(_BYTE *)(v83 + v11[9]);
  return v108;
}

uint64_t assignWithCopy for SleepingSampleAggregateDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t (*v28)(void *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t (*v36)(void *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const void *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const void *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const void *v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(void *, uint64_t, uint64_t);
  uint64_t (*v129)(void *, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t (*v131)(uint64_t, uint64_t, uint64_t);
  void (*v132)(uint64_t, uint64_t);
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t, uint64_t);
  int *v135;
  uint64_t v136;
  uint64_t v137;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v135 = a3;
  v8 = a3[5];
  v137 = a1;
  v9 = a1 + v8;
  v136 = a2;
  v10 = a2 + v8;
  v130 = v6;
  v134 = v7;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for SleepingSampleAggregate();
  v12 = v11[5];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = sub_23DC29F80();
  v132 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24);
  v133 = v15;
  v132(v13, v14);
  v16 = v11[6];
  v17 = (void *)(v9 + v16);
  v18 = (void *)(v10 + v16);
  sub_23DBC6894(0);
  v20 = v19;
  v127 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v127 + 48);
  LODWORD(v6) = v21(v17, 1, v19);
  v131 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21;
  v22 = v21(v18, 1, v20);
  if ((_DWORD)v6)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v127 + 16))(v17, v18, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v17, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v127 + 8))(v17, v20);
LABEL_6:
    sub_23DBB29B8();
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v127 + 24))(v17, v18, v20);
LABEL_7:
  v24 = v11[7];
  v25 = (void *)(v9 + v24);
  v26 = (void *)(v10 + v24);
  v27 = sub_23DC29BF0();
  v126 = *(_QWORD *)(v27 - 8);
  v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v126 + 48);
  v29 = v28(v25, 1, v27);
  v129 = v28;
  v30 = v28(v26, 1, v27);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v126 + 16))(v25, v26, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v126 + 8))(v25, v27);
LABEL_12:
    sub_23DBD4810(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v126 + 24))(v25, v26, v27);
LABEL_13:
  v32 = v11[8];
  v33 = (void *)(v9 + v32);
  v34 = (void *)(v10 + v32);
  v35 = sub_23DC29E48();
  v125 = *(_QWORD *)(v35 - 8);
  v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v125 + 48);
  v37 = v36(v33, 1, v35);
  v128 = v36;
  v38 = v36(v34, 1, v35);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v125 + 16))(v33, v34, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v33, 0, 1, v35);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v38)
  {
    (*(void (**)(void *, uint64_t))(v125 + 8))(v33, v35);
LABEL_18:
    sub_23DBD482C(0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v125 + 24))(v33, v34, v35);
LABEL_19:
  *(_BYTE *)(v9 + v11[9]) = *(_BYTE *)(v10 + v11[9]);
  v40 = v135[6];
  v41 = v137 + v40;
  v42 = v136 + v40;
  v134(v137 + v40, v136 + v40, v130);
  ((void (*)(uint64_t, uint64_t, uint64_t))v132)(v41 + v11[5], v42 + v11[5], v133);
  v43 = v11[6];
  v44 = (void *)(v41 + v43);
  v45 = (const void *)(v42 + v43);
  v46 = v131(v41 + v43, 1, v20);
  v47 = v131((uint64_t)v45, 1, v20);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(void *, const void *, uint64_t))(v127 + 16))(v44, v45, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v44, 0, 1, v20);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v47)
  {
    (*(void (**)(void *, uint64_t))(v127 + 8))(v44, v20);
LABEL_24:
    sub_23DBB29B8();
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, const void *, uint64_t))(v127 + 24))(v44, v45, v20);
LABEL_25:
  v49 = v11[7];
  v50 = (void *)(v41 + v49);
  v51 = (void *)(v42 + v49);
  v52 = v129((void *)(v41 + v49), 1, v27);
  v53 = v129(v51, 1, v27);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(void *, void *, uint64_t))(v126 + 16))(v50, v51, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v50, 0, 1, v27);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v53)
  {
    (*(void (**)(void *, uint64_t))(v126 + 8))(v50, v27);
LABEL_30:
    sub_23DBD4810(0);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v126 + 24))(v50, v51, v27);
LABEL_31:
  v55 = v11[8];
  v56 = (void *)(v41 + v55);
  v57 = (void *)(v42 + v55);
  v58 = v36((void *)(v41 + v55), 1, v35);
  v59 = v36(v57, 1, v35);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(void *, void *, uint64_t))(v125 + 16))(v56, v57, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v56, 0, 1, v35);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v59)
  {
    (*(void (**)(void *, uint64_t))(v125 + 8))(v56, v35);
LABEL_36:
    sub_23DBD482C(0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v125 + 24))(v56, v57, v35);
LABEL_37:
  *(_BYTE *)(v41 + v11[9]) = *(_BYTE *)(v42 + v11[9]);
  v61 = v135[7];
  v62 = v137 + v61;
  v63 = v136 + v61;
  v134(v137 + v61, v136 + v61, v130);
  ((void (*)(uint64_t, uint64_t, uint64_t))v132)(v62 + v11[5], v63 + v11[5], v133);
  v64 = v11[6];
  v65 = (void *)(v62 + v64);
  v66 = (const void *)(v63 + v64);
  v67 = v131(v62 + v64, 1, v20);
  v68 = v131((uint64_t)v66, 1, v20);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(void *, const void *, uint64_t))(v127 + 16))(v65, v66, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v65, 0, 1, v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v68)
  {
    (*(void (**)(void *, uint64_t))(v127 + 8))(v65, v20);
LABEL_42:
    sub_23DBB29B8();
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(void *, const void *, uint64_t))(v127 + 24))(v65, v66, v20);
LABEL_43:
  v70 = v11[7];
  v71 = (void *)(v62 + v70);
  v72 = (void *)(v63 + v70);
  v73 = v129((void *)(v62 + v70), 1, v27);
  v74 = v129(v72, 1, v27);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(void *, void *, uint64_t))(v126 + 16))(v71, v72, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v71, 0, 1, v27);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v74)
  {
    (*(void (**)(void *, uint64_t))(v126 + 8))(v71, v27);
LABEL_48:
    sub_23DBD4810(0);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(void *, void *, uint64_t))(v126 + 24))(v71, v72, v27);
LABEL_49:
  v76 = v11[8];
  v77 = (void *)(v62 + v76);
  v78 = (void *)(v63 + v76);
  v79 = v36((void *)(v62 + v76), 1, v35);
  v80 = v36(v78, 1, v35);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(void *, void *, uint64_t))(v125 + 16))(v77, v78, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v77, 0, 1, v35);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v80)
  {
    (*(void (**)(void *, uint64_t))(v125 + 8))(v77, v35);
LABEL_54:
    sub_23DBD482C(0);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(void *, void *, uint64_t))(v125 + 24))(v77, v78, v35);
LABEL_55:
  *(_BYTE *)(v62 + v11[9]) = *(_BYTE *)(v63 + v11[9]);
  v82 = v135[8];
  v83 = v137 + v82;
  v84 = v136 + v82;
  v134(v137 + v82, v136 + v82, v130);
  ((void (*)(uint64_t, uint64_t, uint64_t))v132)(v83 + v11[5], v84 + v11[5], v133);
  v85 = v11[6];
  v86 = (void *)(v83 + v85);
  v87 = (const void *)(v84 + v85);
  v88 = v131(v83 + v85, 1, v20);
  v89 = v131((uint64_t)v87, 1, v20);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(void *, const void *, uint64_t))(v127 + 16))(v86, v87, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v86, 0, 1, v20);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v89)
  {
    (*(void (**)(void *, uint64_t))(v127 + 8))(v86, v20);
LABEL_60:
    sub_23DBB29B8();
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(void *, const void *, uint64_t))(v127 + 24))(v86, v87, v20);
LABEL_61:
  v91 = v11[7];
  v92 = (void *)(v83 + v91);
  v93 = (void *)(v84 + v91);
  v94 = v129((void *)(v83 + v91), 1, v27);
  v95 = v129(v93, 1, v27);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(void *, void *, uint64_t))(v126 + 16))(v92, v93, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v92, 0, 1, v27);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v95)
  {
    (*(void (**)(void *, uint64_t))(v126 + 8))(v92, v27);
LABEL_66:
    sub_23DBD4810(0);
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(void *, void *, uint64_t))(v126 + 24))(v92, v93, v27);
LABEL_67:
  v97 = v11[8];
  v98 = (void *)(v83 + v97);
  v99 = (void *)(v84 + v97);
  v100 = v36((void *)(v83 + v97), 1, v35);
  v101 = v36(v99, 1, v35);
  if (v100)
  {
    if (!v101)
    {
      (*(void (**)(void *, void *, uint64_t))(v125 + 16))(v98, v99, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v98, 0, 1, v35);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v101)
  {
    (*(void (**)(void *, uint64_t))(v125 + 8))(v98, v35);
LABEL_72:
    sub_23DBD482C(0);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(void *, void *, uint64_t))(v125 + 24))(v98, v99, v35);
LABEL_73:
  *(_BYTE *)(v83 + v11[9]) = *(_BYTE *)(v84 + v11[9]);
  v103 = v135[9];
  v104 = v137 + v103;
  v105 = v136 + v103;
  v134(v137 + v103, v136 + v103, v130);
  ((void (*)(uint64_t, uint64_t, uint64_t))v132)(v104 + v11[5], v105 + v11[5], v133);
  v106 = v11[6];
  v107 = (void *)(v104 + v106);
  v108 = (const void *)(v105 + v106);
  v109 = v131(v104 + v106, 1, v20);
  v110 = v131((uint64_t)v108, 1, v20);
  if (v109)
  {
    if (!v110)
    {
      (*(void (**)(void *, const void *, uint64_t))(v127 + 16))(v107, v108, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v107, 0, 1, v20);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v110)
  {
    (*(void (**)(void *, uint64_t))(v127 + 8))(v107, v20);
LABEL_78:
    sub_23DBB29B8();
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(void *, const void *, uint64_t))(v127 + 24))(v107, v108, v20);
LABEL_79:
  v112 = v11[7];
  v113 = (void *)(v104 + v112);
  v114 = (void *)(v105 + v112);
  v115 = v129((void *)(v104 + v112), 1, v27);
  v116 = v129(v114, 1, v27);
  if (v115)
  {
    if (!v116)
    {
      (*(void (**)(void *, void *, uint64_t))(v126 + 16))(v113, v114, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v113, 0, 1, v27);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (v116)
  {
    (*(void (**)(void *, uint64_t))(v126 + 8))(v113, v27);
LABEL_84:
    sub_23DBD4810(0);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_85;
  }
  (*(void (**)(void *, void *, uint64_t))(v126 + 24))(v113, v114, v27);
LABEL_85:
  v118 = v11[8];
  v119 = (void *)(v104 + v118);
  v120 = (void *)(v105 + v118);
  v121 = v128((void *)(v104 + v118), 1, v35);
  v122 = v128(v120, 1, v35);
  if (!v121)
  {
    if (!v122)
    {
      (*(void (**)(void *, void *, uint64_t))(v125 + 24))(v119, v120, v35);
      goto LABEL_91;
    }
    (*(void (**)(void *, uint64_t))(v125 + 8))(v119, v35);
    goto LABEL_90;
  }
  if (v122)
  {
LABEL_90:
    sub_23DBD482C(0);
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    goto LABEL_91;
  }
  (*(void (**)(void *, void *, uint64_t))(v125 + 16))(v119, v120, v35);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v119, 0, 1, v35);
LABEL_91:
  *(_BYTE *)(v104 + v11[9]) = *(_BYTE *)(v105 + v11[9]);
  return v137;
}

uint64_t initializeWithTake for SleepingSampleAggregateDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const void *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const void *v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  unsigned int (*v101)(const void *, uint64_t, uint64_t);
  uint64_t v102;
  unsigned int (*v103)(const void *, uint64_t, uint64_t);
  unsigned int (*v104)(const void *, uint64_t, uint64_t);
  void (*v105)(uint64_t, uint64_t, uint64_t);
  int *v106;
  uint64_t v107;
  uint64_t v108;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v106 = a3;
  v8 = a3[5];
  v108 = a1;
  v9 = a1 + v8;
  v107 = a2;
  v10 = a2 + v8;
  v100 = v6;
  v105 = v7;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for SleepingSampleAggregate();
  v12 = v11[5];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = sub_23DC29F80();
  v99 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
  v102 = v15;
  v99(v13, v14);
  v16 = v11[6];
  v17 = (void *)(v9 + v16);
  v18 = (const void *)(v10 + v16);
  sub_23DBC6894(0);
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  v104 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  v98 = v21;
  if (v104(v18, 1, v19))
  {
    sub_23DBB29B8();
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v17, v18, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
  }
  v23 = v11[7];
  v24 = (void *)(v9 + v23);
  v25 = (const void *)(v10 + v23);
  v26 = sub_23DC29BF0();
  v27 = *(_QWORD *)(v26 - 8);
  v103 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
  v97 = v27;
  if (v103(v25, 1, v26))
  {
    sub_23DBD4810(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = v11[8];
  v30 = (void *)(v9 + v29);
  v31 = (const void *)(v10 + v29);
  v32 = sub_23DC29E48();
  v33 = *(_QWORD *)(v32 - 8);
  v101 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
  v34 = (void (*)(uint64_t, uint64_t, uint64_t))v99;
  if (v101(v31, 1, v32))
  {
    sub_23DBD482C(0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v30, v31, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  *(_BYTE *)(v9 + v11[9]) = *(_BYTE *)(v10 + v11[9]);
  v36 = v106[6];
  v37 = v108 + v36;
  v38 = v107 + v36;
  v105(v108 + v36, v107 + v36, v100);
  ((void (*)(uint64_t, uint64_t, uint64_t))v99)(v37 + v11[5], v38 + v11[5], v102);
  v39 = v11[6];
  v40 = (void *)(v37 + v39);
  v41 = (const void *)(v38 + v39);
  if (v104((const void *)(v38 + v39), 1, v20))
  {
    sub_23DBB29B8();
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 32))(v40, v41, v20);
    v34 = (void (*)(uint64_t, uint64_t, uint64_t))v99;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v40, 0, 1, v20);
  }
  v43 = v11[7];
  v44 = (void *)(v37 + v43);
  v45 = (const void *)(v38 + v43);
  if (v103((const void *)(v38 + v43), 1, v26))
  {
    sub_23DBD4810(0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 32))(v44, v45, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v44, 0, 1, v26);
  }
  v47 = v11[8];
  v48 = (void *)(v37 + v47);
  v49 = (const void *)(v38 + v47);
  if (v101((const void *)(v38 + v47), 1, v32))
  {
    sub_23DBD482C(0);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v48, v49, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v48, 0, 1, v32);
  }
  *(_BYTE *)(v37 + v11[9]) = *(_BYTE *)(v38 + v11[9]);
  v51 = v106[7];
  v52 = v108 + v51;
  v53 = v107 + v51;
  v105(v108 + v51, v107 + v51, v100);
  v34(v52 + v11[5], v53 + v11[5], v102);
  v54 = v11[6];
  v55 = (void *)(v52 + v54);
  v56 = (const void *)(v53 + v54);
  if (v104((const void *)(v53 + v54), 1, v20))
  {
    sub_23DBB29B8();
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 32))(v55, v56, v20);
    v34 = (void (*)(uint64_t, uint64_t, uint64_t))v99;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v55, 0, 1, v20);
  }
  v58 = v11[7];
  v59 = (void *)(v52 + v58);
  v60 = (const void *)(v53 + v58);
  if (v103((const void *)(v53 + v58), 1, v26))
  {
    sub_23DBD4810(0);
    memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 32))(v59, v60, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v59, 0, 1, v26);
  }
  v62 = v11[8];
  v63 = (void *)(v52 + v62);
  v64 = (const void *)(v53 + v62);
  if (v101((const void *)(v53 + v62), 1, v32))
  {
    sub_23DBD482C(0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v63, v64, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v63, 0, 1, v32);
  }
  *(_BYTE *)(v52 + v11[9]) = *(_BYTE *)(v53 + v11[9]);
  v66 = v106[8];
  v67 = v108 + v66;
  v68 = v107 + v66;
  v105(v108 + v66, v107 + v66, v100);
  v34(v67 + v11[5], v68 + v11[5], v102);
  v69 = v11[6];
  v70 = (void *)(v67 + v69);
  v71 = (const void *)(v68 + v69);
  if (v104((const void *)(v68 + v69), 1, v20))
  {
    sub_23DBB29B8();
    memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 32))(v70, v71, v20);
    v34 = (void (*)(uint64_t, uint64_t, uint64_t))v99;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v70, 0, 1, v20);
  }
  v73 = v11[7];
  v74 = (void *)(v67 + v73);
  v75 = (const void *)(v68 + v73);
  if (v103((const void *)(v68 + v73), 1, v26))
  {
    sub_23DBD4810(0);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 32))(v74, v75, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v74, 0, 1, v26);
  }
  v77 = v11[8];
  v78 = (void *)(v67 + v77);
  v79 = (const void *)(v68 + v77);
  if (v101((const void *)(v68 + v77), 1, v32))
  {
    sub_23DBD482C(0);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v78, v79, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v78, 0, 1, v32);
  }
  *(_BYTE *)(v67 + v11[9]) = *(_BYTE *)(v68 + v11[9]);
  v81 = v106[9];
  v82 = v108 + v81;
  v83 = v107 + v81;
  v105(v108 + v81, v107 + v81, v100);
  v34(v82 + v11[5], v83 + v11[5], v102);
  v84 = v11[6];
  v85 = (void *)(v82 + v84);
  v86 = (const void *)(v83 + v84);
  if (v104((const void *)(v83 + v84), 1, v20))
  {
    sub_23DBB29B8();
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v98 + 32))(v85, v86, v20);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v85, 0, 1, v20);
  }
  v88 = v11[7];
  v89 = (void *)(v82 + v88);
  v90 = (const void *)(v83 + v88);
  if (v103((const void *)(v83 + v88), 1, v26))
  {
    sub_23DBD4810(0);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v97 + 32))(v89, v90, v26);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v89, 0, 1, v26);
  }
  v92 = v11[8];
  v93 = (void *)(v82 + v92);
  v94 = (const void *)(v83 + v92);
  if (v101((const void *)(v83 + v92), 1, v32))
  {
    sub_23DBD482C(0);
    memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 32))(v93, v94, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v93, 0, 1, v32);
  }
  *(_BYTE *)(v82 + v11[9]) = *(_BYTE *)(v83 + v11[9]);
  return v108;
}

uint64_t assignWithTake for SleepingSampleAggregateDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t (*v28)(void *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t (*v36)(void *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const void *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const void *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const void *v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  void *v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(void *, uint64_t, uint64_t);
  uint64_t (*v129)(void *, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t (*v131)(uint64_t, uint64_t, uint64_t);
  void (*v132)(uint64_t, uint64_t);
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t, uint64_t);
  int *v135;
  uint64_t v136;
  uint64_t v137;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v135 = a3;
  v8 = a3[5];
  v137 = a1;
  v9 = a1 + v8;
  v136 = a2;
  v10 = a2 + v8;
  v130 = v6;
  v134 = v7;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for SleepingSampleAggregate();
  v12 = v11[5];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = sub_23DC29F80();
  v132 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v133 = v15;
  v132(v13, v14);
  v16 = v11[6];
  v17 = (void *)(v9 + v16);
  v18 = (void *)(v10 + v16);
  sub_23DBC6894(0);
  v20 = v19;
  v127 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v127 + 48);
  LODWORD(v6) = v21(v17, 1, v19);
  v131 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v21;
  v22 = v21(v18, 1, v20);
  if ((_DWORD)v6)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v127 + 32))(v17, v18, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v17, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v127 + 8))(v17, v20);
LABEL_6:
    sub_23DBB29B8();
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v127 + 40))(v17, v18, v20);
LABEL_7:
  v24 = v11[7];
  v25 = (void *)(v9 + v24);
  v26 = (void *)(v10 + v24);
  v27 = sub_23DC29BF0();
  v126 = *(_QWORD *)(v27 - 8);
  v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v126 + 48);
  v29 = v28(v25, 1, v27);
  v129 = v28;
  v30 = v28(v26, 1, v27);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v126 + 32))(v25, v26, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v126 + 8))(v25, v27);
LABEL_12:
    sub_23DBD4810(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v126 + 40))(v25, v26, v27);
LABEL_13:
  v32 = v11[8];
  v33 = (void *)(v9 + v32);
  v34 = (void *)(v10 + v32);
  v35 = sub_23DC29E48();
  v125 = *(_QWORD *)(v35 - 8);
  v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v125 + 48);
  v37 = v36(v33, 1, v35);
  v128 = v36;
  v38 = v36(v34, 1, v35);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v125 + 32))(v33, v34, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v33, 0, 1, v35);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v38)
  {
    (*(void (**)(void *, uint64_t))(v125 + 8))(v33, v35);
LABEL_18:
    sub_23DBD482C(0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v125 + 40))(v33, v34, v35);
LABEL_19:
  *(_BYTE *)(v9 + v11[9]) = *(_BYTE *)(v10 + v11[9]);
  v40 = v135[6];
  v41 = v137 + v40;
  v42 = v136 + v40;
  v134(v137 + v40, v136 + v40, v130);
  ((void (*)(uint64_t, uint64_t, uint64_t))v132)(v41 + v11[5], v42 + v11[5], v133);
  v43 = v11[6];
  v44 = (void *)(v41 + v43);
  v45 = (const void *)(v42 + v43);
  v46 = v131(v41 + v43, 1, v20);
  v47 = v131((uint64_t)v45, 1, v20);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(void *, const void *, uint64_t))(v127 + 32))(v44, v45, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v44, 0, 1, v20);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v47)
  {
    (*(void (**)(void *, uint64_t))(v127 + 8))(v44, v20);
LABEL_24:
    sub_23DBB29B8();
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, const void *, uint64_t))(v127 + 40))(v44, v45, v20);
LABEL_25:
  v49 = v11[7];
  v50 = (void *)(v41 + v49);
  v51 = (void *)(v42 + v49);
  v52 = v129((void *)(v41 + v49), 1, v27);
  v53 = v129(v51, 1, v27);
  if (v52)
  {
    if (!v53)
    {
      (*(void (**)(void *, void *, uint64_t))(v126 + 32))(v50, v51, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v50, 0, 1, v27);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v53)
  {
    (*(void (**)(void *, uint64_t))(v126 + 8))(v50, v27);
LABEL_30:
    sub_23DBD4810(0);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v126 + 40))(v50, v51, v27);
LABEL_31:
  v55 = v11[8];
  v56 = (void *)(v41 + v55);
  v57 = (void *)(v42 + v55);
  v58 = v36((void *)(v41 + v55), 1, v35);
  v59 = v36(v57, 1, v35);
  if (v58)
  {
    if (!v59)
    {
      (*(void (**)(void *, void *, uint64_t))(v125 + 32))(v56, v57, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v56, 0, 1, v35);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v59)
  {
    (*(void (**)(void *, uint64_t))(v125 + 8))(v56, v35);
LABEL_36:
    sub_23DBD482C(0);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v125 + 40))(v56, v57, v35);
LABEL_37:
  *(_BYTE *)(v41 + v11[9]) = *(_BYTE *)(v42 + v11[9]);
  v61 = v135[7];
  v62 = v137 + v61;
  v63 = v136 + v61;
  v134(v137 + v61, v136 + v61, v130);
  ((void (*)(uint64_t, uint64_t, uint64_t))v132)(v62 + v11[5], v63 + v11[5], v133);
  v64 = v11[6];
  v65 = (void *)(v62 + v64);
  v66 = (const void *)(v63 + v64);
  v67 = v131(v62 + v64, 1, v20);
  v68 = v131((uint64_t)v66, 1, v20);
  if (v67)
  {
    if (!v68)
    {
      (*(void (**)(void *, const void *, uint64_t))(v127 + 32))(v65, v66, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v65, 0, 1, v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v68)
  {
    (*(void (**)(void *, uint64_t))(v127 + 8))(v65, v20);
LABEL_42:
    sub_23DBB29B8();
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(void *, const void *, uint64_t))(v127 + 40))(v65, v66, v20);
LABEL_43:
  v70 = v11[7];
  v71 = (void *)(v62 + v70);
  v72 = (void *)(v63 + v70);
  v73 = v129((void *)(v62 + v70), 1, v27);
  v74 = v129(v72, 1, v27);
  if (v73)
  {
    if (!v74)
    {
      (*(void (**)(void *, void *, uint64_t))(v126 + 32))(v71, v72, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v71, 0, 1, v27);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v74)
  {
    (*(void (**)(void *, uint64_t))(v126 + 8))(v71, v27);
LABEL_48:
    sub_23DBD4810(0);
    memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(void *, void *, uint64_t))(v126 + 40))(v71, v72, v27);
LABEL_49:
  v76 = v11[8];
  v77 = (void *)(v62 + v76);
  v78 = (void *)(v63 + v76);
  v79 = v36((void *)(v62 + v76), 1, v35);
  v80 = v36(v78, 1, v35);
  if (v79)
  {
    if (!v80)
    {
      (*(void (**)(void *, void *, uint64_t))(v125 + 32))(v77, v78, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v77, 0, 1, v35);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v80)
  {
    (*(void (**)(void *, uint64_t))(v125 + 8))(v77, v35);
LABEL_54:
    sub_23DBD482C(0);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(void *, void *, uint64_t))(v125 + 40))(v77, v78, v35);
LABEL_55:
  *(_BYTE *)(v62 + v11[9]) = *(_BYTE *)(v63 + v11[9]);
  v82 = v135[8];
  v83 = v137 + v82;
  v84 = v136 + v82;
  v134(v137 + v82, v136 + v82, v130);
  ((void (*)(uint64_t, uint64_t, uint64_t))v132)(v83 + v11[5], v84 + v11[5], v133);
  v85 = v11[6];
  v86 = (void *)(v83 + v85);
  v87 = (const void *)(v84 + v85);
  v88 = v131(v83 + v85, 1, v20);
  v89 = v131((uint64_t)v87, 1, v20);
  if (v88)
  {
    if (!v89)
    {
      (*(void (**)(void *, const void *, uint64_t))(v127 + 32))(v86, v87, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v86, 0, 1, v20);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  if (v89)
  {
    (*(void (**)(void *, uint64_t))(v127 + 8))(v86, v20);
LABEL_60:
    sub_23DBB29B8();
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(void *, const void *, uint64_t))(v127 + 40))(v86, v87, v20);
LABEL_61:
  v91 = v11[7];
  v92 = (void *)(v83 + v91);
  v93 = (void *)(v84 + v91);
  v94 = v129((void *)(v83 + v91), 1, v27);
  v95 = v129(v93, 1, v27);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(void *, void *, uint64_t))(v126 + 32))(v92, v93, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v92, 0, 1, v27);
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  if (v95)
  {
    (*(void (**)(void *, uint64_t))(v126 + 8))(v92, v27);
LABEL_66:
    sub_23DBD4810(0);
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    goto LABEL_67;
  }
  (*(void (**)(void *, void *, uint64_t))(v126 + 40))(v92, v93, v27);
LABEL_67:
  v97 = v11[8];
  v98 = (void *)(v83 + v97);
  v99 = (void *)(v84 + v97);
  v100 = v36((void *)(v83 + v97), 1, v35);
  v101 = v36(v99, 1, v35);
  if (v100)
  {
    if (!v101)
    {
      (*(void (**)(void *, void *, uint64_t))(v125 + 32))(v98, v99, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v98, 0, 1, v35);
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  if (v101)
  {
    (*(void (**)(void *, uint64_t))(v125 + 8))(v98, v35);
LABEL_72:
    sub_23DBD482C(0);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_73;
  }
  (*(void (**)(void *, void *, uint64_t))(v125 + 40))(v98, v99, v35);
LABEL_73:
  *(_BYTE *)(v83 + v11[9]) = *(_BYTE *)(v84 + v11[9]);
  v103 = v135[9];
  v104 = v137 + v103;
  v105 = v136 + v103;
  v134(v137 + v103, v136 + v103, v130);
  ((void (*)(uint64_t, uint64_t, uint64_t))v132)(v104 + v11[5], v105 + v11[5], v133);
  v106 = v11[6];
  v107 = (void *)(v104 + v106);
  v108 = (const void *)(v105 + v106);
  v109 = v131(v104 + v106, 1, v20);
  v110 = v131((uint64_t)v108, 1, v20);
  if (v109)
  {
    if (!v110)
    {
      (*(void (**)(void *, const void *, uint64_t))(v127 + 32))(v107, v108, v20);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v107, 0, 1, v20);
      goto LABEL_79;
    }
    goto LABEL_78;
  }
  if (v110)
  {
    (*(void (**)(void *, uint64_t))(v127 + 8))(v107, v20);
LABEL_78:
    sub_23DBB29B8();
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    goto LABEL_79;
  }
  (*(void (**)(void *, const void *, uint64_t))(v127 + 40))(v107, v108, v20);
LABEL_79:
  v112 = v11[7];
  v113 = (void *)(v104 + v112);
  v114 = (void *)(v105 + v112);
  v115 = v129((void *)(v104 + v112), 1, v27);
  v116 = v129(v114, 1, v27);
  if (v115)
  {
    if (!v116)
    {
      (*(void (**)(void *, void *, uint64_t))(v126 + 32))(v113, v114, v27);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v126 + 56))(v113, 0, 1, v27);
      goto LABEL_85;
    }
    goto LABEL_84;
  }
  if (v116)
  {
    (*(void (**)(void *, uint64_t))(v126 + 8))(v113, v27);
LABEL_84:
    sub_23DBD4810(0);
    memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
    goto LABEL_85;
  }
  (*(void (**)(void *, void *, uint64_t))(v126 + 40))(v113, v114, v27);
LABEL_85:
  v118 = v11[8];
  v119 = (void *)(v104 + v118);
  v120 = (void *)(v105 + v118);
  v121 = v128((void *)(v104 + v118), 1, v35);
  v122 = v128(v120, 1, v35);
  if (!v121)
  {
    if (!v122)
    {
      (*(void (**)(void *, void *, uint64_t))(v125 + 40))(v119, v120, v35);
      goto LABEL_91;
    }
    (*(void (**)(void *, uint64_t))(v125 + 8))(v119, v35);
    goto LABEL_90;
  }
  if (v122)
  {
LABEL_90:
    sub_23DBD482C(0);
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
    goto LABEL_91;
  }
  (*(void (**)(void *, void *, uint64_t))(v125 + 32))(v119, v120, v35);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v119, 0, 1, v35);
LABEL_91:
  *(_BYTE *)(v104 + v11[9]) = *(_BYTE *)(v105 + v11[9]);
  return v137;
}

uint64_t getEnumTagSinglePayload for SleepingSampleAggregateDaySummary()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DC03D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_23DC2A154();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for SleepingSampleAggregate();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleAggregateDaySummary()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DC03DB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_23DC2A154();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for SleepingSampleAggregate();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_23DC03E30()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23DC2A154();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for SleepingSampleAggregate();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SleepingSampleAggregateDaySummary.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23DC03F08 + 4 * byte_23DC303EB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23DC03F3C + 4 * byte_23DC303E6[v4]))();
}

uint64_t sub_23DC03F3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DC03F44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DC03F4CLL);
  return result;
}

uint64_t sub_23DC03F58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DC03F60);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23DC03F64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DC03F6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleAggregateDaySummary.CodingKeys()
{
  return &type metadata for SleepingSampleAggregateDaySummary.CodingKeys;
}

unint64_t sub_23DC03F8C()
{
  unint64_t result;

  result = qword_256CEA670;
  if (!qword_256CEA670)
  {
    result = MEMORY[0x24263E440](&unk_23DC305E0, &type metadata for SleepingSampleAggregateDaySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA670);
  }
  return result;
}

unint64_t sub_23DC03FD4()
{
  unint64_t result;

  result = qword_256CEA678;
  if (!qword_256CEA678)
  {
    result = MEMORY[0x24263E440](&unk_23DC30550, &type metadata for SleepingSampleAggregateDaySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA678);
  }
  return result;
}

unint64_t sub_23DC0401C()
{
  unint64_t result;

  result = qword_256CEA680;
  if (!qword_256CEA680)
  {
    result = MEMORY[0x24263E440](&unk_23DC30578, &type metadata for SleepingSampleAggregateDaySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA680);
  }
  return result;
}

uint64_t sub_23DC04060(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49676E696E726F6DLL && a2 == 0xEC0000007865646ELL;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461527472616568 && a2 == 0xE900000000000065 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79784F646F6F6C62 && a2 == 0xEB000000006E6567 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7461726970736572 && a2 == 0xEF6574615279726FLL || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023DC330C0 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656C7341656D6974 && a2 == 0xEA00000000007065)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t dispatch thunk of TrainingLoadSampleDaySummaryProtocol.morningIndex.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t SleepingSampleBaselineAvailability.required.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(v0, (uint64_t)v3, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
    return *(_QWORD *)v3;
  if (EnumCaseMultiPayload == 1)
  {
    sub_23DBBFA90();
    v7 = *(_QWORD *)&v3[*(int *)(v6 + 64)];
    sub_23DBB2BB0((uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  }
  else
  {
    sub_23DBB2BB0((uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    return 6;
  }
  return v7;
}

uint64_t SleepingSampleBaselineAvailability.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(v0, (uint64_t)v3, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
    return 0;
  if (EnumCaseMultiPayload == 1)
    sub_23DBBFA90();
  else
    sub_23DBBFAFC();
  v7 = *(_QWORD *)&v3[*(int *)(v6 + 48)];
  sub_23DBB2BB0((uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  return v7;
}

uint64_t SleepingSampleBaselineAvailability.isInRefinement.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(v0, (uint64_t)v3, v4);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
      sub_23DBBFA90();
    else
      sub_23DBBFAFC();
    v7 = *(_QWORD *)&v3[*(int *)(v6 + 48)];
    sub_23DBB2BB0((uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    return (unint64_t)(v7 - 6) < 0xE;
  }
  return result;
}

uint64_t static SleepingSampleBaselineAvailability.maximumNumberOfDays.getter()
{
  return 49;
}

uint64_t SleepingSampleBaselineAvailability.isEqualToMinimumAvailability.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(v0, (uint64_t)v3, v4);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
      sub_23DBBFA90();
    else
      sub_23DBBFAFC();
    v7 = *(_QWORD *)&v3[*(int *)(v6 + 48)];
    sub_23DBB2BB0((uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    return v7 == 6;
  }
  return result;
}

uint64_t SleepingSampleBaselineAvailability.isGreaterThanMinimumAvailability.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(v0, (uint64_t)v3, v4);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
      sub_23DBBFA90();
    else
      sub_23DBBFAFC();
    v7 = *(_QWORD *)&v3[*(int *)(v6 + 48)];
    sub_23DBB2BB0((uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    return v7 > 6;
  }
  return result;
}

uint64_t static SleepingSampleBaselineAvailability.minimumNumberOfValues.getter()
{
  return 6;
}

uint64_t static SleepingSampleBaselineAvailability.maximumNumberOfValues.getter()
{
  return 49;
}

uint64_t static SleepingSampleBaselineAvailability.minimumNumberOfValuesForConfidentRange.getter()
{
  return 20;
}

uint64_t static SleepingSampleBaselineAvailability.refinementRangeOfValues.getter()
{
  return 6;
}

BOOL SleepingSampleBaselineAvailability.isAvailable.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  int EnumCaseMultiPayload;
  _BOOL8 v6;
  uint64_t v8;

  v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(v0, (uint64_t)v3, v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
    return 0;
  v6 = EnumCaseMultiPayload != 1;
  sub_23DBB2BB0((uint64_t)v3, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  return v6;
}

uint64_t SleepingSampleBaselineAvailability.init(analyzedRange:count:required:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_23DBBFA18();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SleepingSampleBaselineAvailability();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (uint64_t *)((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_23DBB2BB0(a1, (uint64_t (*)(_QWORD))sub_23DC06310);
    if (a2)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a4, 1, 1, v13);
    *v16 = a3;
  }
  else
  {
    sub_23DBBCEB0(a1, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    if (a2 >= a3)
    {
      sub_23DBBFAFC();
      v22 = *(int *)(v21 + 48);
      sub_23DBBCEB0((uint64_t)v12, (uint64_t)v16, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      *(_QWORD *)((char *)v16 + v22) = a2;
    }
    else
    {
      sub_23DBBFA90();
      v19 = *(int *)(v18 + 48);
      v20 = *(int *)(v18 + 64);
      sub_23DBBCEB0((uint64_t)v12, (uint64_t)v16, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      *(_QWORD *)((char *)v16 + v19) = a2;
      *(_QWORD *)((char *)v16 + v20) = a3;
    }
  }
  swift_storeEnumTagMultiPayload();
  sub_23DBBCEB0((uint64_t)v16, a4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a4, 0, 1, v13);
}

uint64_t SleepingSampleBaselineAvailability.analyzedRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  v4 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(v2, (uint64_t)v6, v7);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_23DBBCEB0((uint64_t)v6, a1, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    sub_23DBBFA18();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 0, 1, v8);
  }
  else
  {
    sub_23DBBFA18();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
}

uint64_t SleepingSampleBaselineAvailability.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v11;

  v1 = v0;
  sub_23DBBFA18();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2B6C(v1, (uint64_t)v7, v8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23DBBFA90();
      sub_23DBBCEB0((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      sub_23DC2A88C();
      sub_23DC2A154();
      sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
      sub_23DC2A190();
      sub_23DC2A190();
      sub_23DC2A88C();
    }
    else
    {
      sub_23DBBFAFC();
      sub_23DBBCEB0((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      sub_23DC2A88C();
      sub_23DC2A154();
      sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
      sub_23DC2A190();
      sub_23DC2A190();
    }
    sub_23DC2A88C();
    return sub_23DBB2BB0((uint64_t)v4, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  }
  else
  {
    sub_23DC2A88C();
    return sub_23DC2A88C();
  }
}

uint64_t sub_23DC04CFC()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E756F63;
  else
    return 0x64657A796C616E61;
}

uint64_t sub_23DC04D40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DC07228(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23DC04D64()
{
  sub_23DC06364();
  return sub_23DC2A964();
}

uint64_t sub_23DC04D8C()
{
  sub_23DC06364();
  return sub_23DC2A970();
}

uint64_t sub_23DC04DB4()
{
  sub_23DC06430();
  return sub_23DC2A964();
}

uint64_t sub_23DC04DDC()
{
  sub_23DC06430();
  return sub_23DC2A970();
}

uint64_t sub_23DC04E04()
{
  sub_23DC063A8();
  return sub_23DC2A964();
}

uint64_t sub_23DC04E2C()
{
  sub_23DC063A8();
  return sub_23DC2A970();
}

uint64_t sub_23DC04E54()
{
  return 0x6465726975716572;
}

uint64_t sub_23DC04E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6465726975716572 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23DC2A7FC();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23DC04F00()
{
  sub_23DC063EC();
  return sub_23DC2A964();
}

uint64_t sub_23DC04F28()
{
  sub_23DC063EC();
  return sub_23DC2A970();
}

uint64_t SleepingSampleBaselineAvailability.encode(to:)(_QWORD *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;

  v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE3520];
  sub_23DBB2A64(0, &qword_25431EFC8, (uint64_t (*)(void))sub_23DC06364, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.AvailableCodingKeys, MEMORY[0x24BEE3520]);
  v46 = v3;
  v40 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v43 = (char *)&v38 - v4;
  sub_23DBB2A64(0, (unint64_t *)&unk_25431EFD0, (uint64_t (*)(void))sub_23DC063A8, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.InsufficientDataCodingKeys, v2);
  v47 = v5;
  v39 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v44 = (char *)&v38 - v6;
  sub_23DBBFA18();
  v48 = v7;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v42 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v45 = (uint64_t)&v38 - v10;
  sub_23DBB2A64(0, &qword_25431EFC0, (uint64_t (*)(void))sub_23DC063EC, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.NoDataCodingKeys, v2);
  v41 = v11;
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v38 - v13;
  v15 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2A64(0, &qword_25431EFB8, (uint64_t (*)(void))sub_23DC06430, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.CodingKeys, v2);
  v52 = v18;
  v49 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v38 - v19;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DC06430();
  v51 = v20;
  sub_23DC2A8C8();
  sub_23DBB2B6C(v53, (uint64_t)v17, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    v54 = 0;
    sub_23DC063EC();
    v26 = v51;
    v27 = v52;
    sub_23DC2A778();
    v30 = v41;
    sub_23DC2A7B4();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v30);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v26, v27);
  }
  if (EnumCaseMultiPayload == 1)
  {
    sub_23DBBFA90();
    v53 = *(_QWORD *)&v17[*(int *)(v22 + 48)];
    v23 = *(_QWORD *)&v17[*(int *)(v22 + 64)];
    v24 = v45;
    sub_23DBBCEB0((uint64_t)v17, v45, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    v58 = 1;
    sub_23DC063A8();
    v25 = v44;
    v26 = v51;
    v27 = v52;
    sub_23DC2A778();
    v57 = 0;
    sub_23DBC41A8((unint64_t *)&unk_25431EF50, &qword_25431EF38, MEMORY[0x24BDD2498], MEMORY[0x24BEE1B98]);
    v28 = v47;
    v29 = v50;
    sub_23DC2A7C0();
    if (!v29)
    {
      v50 = v23;
      v56 = 1;
      sub_23DC2A7B4();
      v55 = 2;
      sub_23DC2A7B4();
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v28);
    sub_23DBB2BB0(v24, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v26, v27);
  }
  sub_23DBBFAFC();
  v32 = v42;
  sub_23DBBCEB0((uint64_t)v17, v42, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  v61 = 2;
  sub_23DC06364();
  v33 = v43;
  v35 = v51;
  v34 = v52;
  sub_23DC2A778();
  v60 = 0;
  sub_23DBC41A8((unint64_t *)&unk_25431EF50, &qword_25431EF38, MEMORY[0x24BDD2498], MEMORY[0x24BEE1B98]);
  v36 = v46;
  v37 = v50;
  sub_23DC2A7C0();
  if (!v37)
  {
    v59 = 1;
    sub_23DC2A7B4();
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v33, v36);
  sub_23DBB2BB0(v32, (uint64_t (*)(_QWORD))sub_23DBBFA18);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v35, v34);
}

uint64_t SleepingSampleBaselineAvailability.hashValue.getter()
{
  sub_23DC2A880();
  SleepingSampleBaselineAvailability.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleBaselineAvailability.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  _QWORD *v78;
  uint64_t v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;

  v66 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE33E0];
  sub_23DBB2A64(0, &qword_25431F310, (uint64_t (*)(void))sub_23DC06364, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.AvailableCodingKeys, MEMORY[0x24BEE33E0]);
  v72 = v4;
  v68 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v77 = (char *)&v60 - v5;
  sub_23DBB2A64(0, qword_25431F318, (uint64_t (*)(void))sub_23DC063A8, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.InsufficientDataCodingKeys, v3);
  v71 = v6;
  v69 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v76 = (char *)&v60 - v7;
  sub_23DBB2A64(0, &qword_25431F308, (uint64_t (*)(void))sub_23DC063EC, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.NoDataCodingKeys, v3);
  v70 = v8;
  v67 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v74 = (char *)&v60 - v9;
  sub_23DBB2A64(0, &qword_25431F300, (uint64_t (*)(void))sub_23DC06430, (uint64_t)&type metadata for SleepingSampleBaselineAvailability.CodingKeys, v3);
  v75 = v10;
  v73 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v60 - v11;
  v13 = type metadata accessor for SleepingSampleBaselineAvailability();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v60 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (uint64_t *)((char *)&v60 - v21);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v60 - v23;
  v25 = a1[3];
  v78 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v25);
  sub_23DC06430();
  v26 = v79;
  sub_23DC2A8BC();
  if (!v26)
  {
    v61 = v22;
    v62 = v24;
    v64 = v16;
    v65 = 0;
    v27 = v74;
    v28 = v75;
    v63 = v19;
    v30 = v76;
    v29 = v77;
    v79 = v13;
    v31 = sub_23DC2A76C();
    v32 = (char *)v31;
    if (*(_QWORD *)(v31 + 16) == 1)
    {
      if (*(_BYTE *)(v31 + 32))
      {
        if (*(_BYTE *)(v31 + 32) == 1)
        {
          v84 = 1;
          sub_23DC063A8();
          v33 = v65;
          sub_23DC2A70C();
          if (!v33)
          {
            sub_23DBBFA18();
            v83 = 0;
            sub_23DBC41A8((unint64_t *)&unk_25431F290, (unint64_t *)&unk_25431F270, MEMORY[0x24BDD24B8], MEMORY[0x24BEE1BC8]);
            v34 = (uint64_t)v63;
            v35 = v71;
            sub_23DC2A760();
            v82 = 1;
            v47 = sub_23DC2A754();
            v77 = v32;
            sub_23DBBFA90();
            v74 = v48;
            *(_QWORD *)(v34 + *((int *)v48 + 12)) = v47;
            v81 = 2;
            v49 = sub_23DC2A754();
            v50 = v34;
            v51 = v73;
            v55 = v49;
            v56 = *((int *)v74 + 16);
            (*(void (**)(char *, uint64_t))(v69 + 8))(v30, v35);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v28);
            *(_QWORD *)(v50 + v56) = v55;
LABEL_15:
            swift_storeEnumTagMultiPayload();
            v57 = (uint64_t)v78;
            v58 = v66;
            v59 = (uint64_t)v62;
            sub_23DBBCEB0(v50, (uint64_t)v62, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
            sub_23DBBCEB0(v59, v58, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
            v39 = v57;
            return __swift_destroy_boxed_opaque_existential_1(v39);
          }
        }
        else
        {
          v87 = 2;
          sub_23DC06364();
          v43 = v29;
          v44 = v65;
          sub_23DC2A70C();
          if (!v44)
          {
            sub_23DBBFA18();
            v86 = 0;
            sub_23DBC41A8((unint64_t *)&unk_25431F290, (unint64_t *)&unk_25431F270, MEMORY[0x24BDD24B8], MEMORY[0x24BEE1BC8]);
            v45 = v72;
            sub_23DC2A760();
            v85 = 1;
            v52 = sub_23DC2A754();
            sub_23DBBFAFC();
            v54 = *(int *)(v53 + 48);
            (*(void (**)(char *, uint64_t))(v68 + 8))(v43, v45);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v73 + 8))(v12, v28);
            v50 = (uint64_t)v64;
            *(_QWORD *)&v64[v54] = v52;
            goto LABEL_15;
          }
        }
      }
      else
      {
        v80 = 0;
        sub_23DC063EC();
        v41 = v65;
        sub_23DC2A70C();
        if (!v41)
        {
          v42 = v70;
          v46 = sub_23DC2A754();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v27, v42);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v73 + 8))(v12, v28);
          v50 = (uint64_t)v61;
          *v61 = v46;
          goto LABEL_15;
        }
      }
    }
    else
    {
      v36 = sub_23DC2A5E0();
      swift_allocError();
      v38 = v37;
      sub_23DBBF970();
      *v38 = v79;
      sub_23DC2A718();
      sub_23DC2A5C8();
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, *MEMORY[0x24BEE26D0], v36);
      swift_willThrow();
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v73 + 8))(v12, v28);
  }
  v39 = (uint64_t)v78;
  return __swift_destroy_boxed_opaque_existential_1(v39);
}

uint64_t sub_23DC05CD4()
{
  sub_23DC2A880();
  SleepingSampleBaselineAvailability.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t sub_23DC05D14()
{
  sub_23DC2A880();
  SleepingSampleBaselineAvailability.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t sub_23DC05D4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleBaselineAvailability.init(from:)(a1, a2);
}

uint64_t sub_23DC05D60(_QWORD *a1)
{
  return SleepingSampleBaselineAvailability.encode(to:)(a1);
}

uint64_t _s13HealthBalance34SleepingSampleBaselineAvailabilityO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int EnumCaseMultiPayload;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t (*v51)(_QWORD);
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  sub_23DBBFA18();
  v59 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v54 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v55 = (uint64_t)&v54 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v56 = (uint64_t)&v54 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v57 = (uint64_t)&v54 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v58 = (uint64_t)&v54 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v54 - v15;
  v17 = type metadata accessor for SleepingSampleBaselineAvailability();
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v54 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (uint64_t *)((char *)&v54 - v24);
  sub_23DC07334();
  v27 = MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v54 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = &v29[*(int *)(v27 + 48)];
  sub_23DBB2B6C(a1, (uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  sub_23DBB2B6C(a2, (uint64_t)v30, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23DBB2B6C((uint64_t)v29, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
      sub_23DBBFA90();
      v33 = *(int *)(v32 + 48);
      v34 = *(_QWORD *)&v23[v33];
      v35 = *(int *)(v32 + 64);
      v36 = *(_QWORD *)&v23[v35];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v54 = *(_QWORD *)&v30[v33];
        v55 = *(_QWORD *)&v30[v35];
        v56 = v36;
        sub_23DBBCEB0((uint64_t)v30, (uint64_t)v16, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        sub_23DC2A154();
        sub_23DBB2CB0(&qword_256CE9818, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B0]);
        v37 = sub_23DC2A1F0();
        v38 = v58;
        sub_23DBB2B6C((uint64_t)v23, v58, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        v39 = v57;
        sub_23DBB2B6C((uint64_t)v16, v57, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        if ((v37 & 1) != 0)
        {
          v40 = sub_23DC2A1F0();
          sub_23DBB2BB0(v39, (uint64_t (*)(_QWORD))sub_23DBBFA18);
          sub_23DBB2BB0(v38, (uint64_t (*)(_QWORD))sub_23DBBFA18);
          sub_23DBB2BB0((uint64_t)v16, (uint64_t (*)(_QWORD))sub_23DBBFA18);
          sub_23DBB2BB0((uint64_t)v23, (uint64_t (*)(_QWORD))sub_23DBBFA18);
          if (v56 == v55)
            v41 = v40 & (v34 == v54);
          else
            v41 = 0;
          goto LABEL_19;
        }
        sub_23DBB2BB0(v39, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        sub_23DBB2BB0(v38, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        sub_23DBB2BB0((uint64_t)v16, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        v52 = (uint64_t)v23;
        goto LABEL_18;
      }
      v20 = v23;
      goto LABEL_14;
    }
    sub_23DBB2B6C((uint64_t)v29, (uint64_t)v20, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    sub_23DBBFAFC();
    v43 = *(int *)(v42 + 48);
    v44 = *(_QWORD *)&v20[v43];
    if (swift_getEnumCaseMultiPayload() != 2)
    {
LABEL_14:
      sub_23DBB2BB0((uint64_t)v20, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      goto LABEL_15;
    }
    v45 = *(_QWORD *)&v30[v43];
    v46 = v56;
    sub_23DBBCEB0((uint64_t)v30, v56, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    sub_23DC2A154();
    sub_23DBB2CB0(&qword_256CE9818, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B0]);
    v47 = sub_23DC2A1F0();
    v48 = v55;
    sub_23DBB2B6C((uint64_t)v20, v55, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    v49 = v54;
    sub_23DBB2B6C(v46, v54, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    if ((v47 & 1) == 0)
    {
      sub_23DBB2BB0(v49, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      sub_23DBB2BB0(v48, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      sub_23DBB2BB0(v46, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      v52 = (uint64_t)v20;
LABEL_18:
      sub_23DBB2BB0(v52, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      v41 = 0;
      goto LABEL_19;
    }
    v50 = sub_23DC2A1F0();
    sub_23DBB2BB0(v49, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    sub_23DBB2BB0(v48, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    sub_23DBB2BB0(v46, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    sub_23DBB2BB0((uint64_t)v20, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    v41 = v50 & (v44 == v45);
LABEL_19:
    v51 = (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability;
    goto LABEL_20;
  }
  sub_23DBB2B6C((uint64_t)v29, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  if (!swift_getEnumCaseMultiPayload())
  {
    v41 = *v25 == *(_QWORD *)v30;
    goto LABEL_19;
  }
LABEL_15:
  v41 = 0;
  v51 = (uint64_t (*)(_QWORD))sub_23DC07334;
LABEL_20:
  sub_23DBB2BB0((uint64_t)v29, v51);
  return v41;
}

uint64_t type metadata accessor for SleepingSampleBaselineAvailability()
{
  uint64_t result;

  result = qword_25431F868;
  if (!qword_25431F868)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DC06310()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE9D38)
  {
    sub_23DBBFA18();
    v0 = sub_23DC2A4C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE9D38);
  }
}

unint64_t sub_23DC06364()
{
  unint64_t result;

  result = qword_25431FA18;
  if (!qword_25431FA18)
  {
    result = MEMORY[0x24263E440](&unk_23DC30BD4, &type metadata for SleepingSampleBaselineAvailability.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431FA18);
  }
  return result;
}

unint64_t sub_23DC063A8()
{
  unint64_t result;

  result = qword_25431FA30;
  if (!qword_25431FA30)
  {
    result = MEMORY[0x24263E440](&unk_23DC30B84, &type metadata for SleepingSampleBaselineAvailability.InsufficientDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431FA30);
  }
  return result;
}

unint64_t sub_23DC063EC()
{
  unint64_t result;

  result = qword_25431FA00;
  if (!qword_25431FA00)
  {
    result = MEMORY[0x24263E440](&unk_23DC30B34, &type metadata for SleepingSampleBaselineAvailability.NoDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431FA00);
  }
  return result;
}

unint64_t sub_23DC06430()
{
  unint64_t result;

  result = qword_25431F9E8;
  if (!qword_25431F9E8)
  {
    result = MEMORY[0x24263E440](&unk_23DC30AE4, &type metadata for SleepingSampleBaselineAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F9E8);
  }
  return result;
}

uint64_t sub_23DC06474()
{
  return sub_23DBB2CB0(&qword_256CEA688, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineAvailability, (uint64_t)&protocol conformance descriptor for SleepingSampleBaselineAvailability);
}

uint64_t *initializeBufferWithCopyOfBuffer for SleepingSampleBaselineAvailability(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v13 = sub_23DC2A154();
      v14 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
      v14(a1, a2, v13);
      sub_23DBBFA18();
      v14((uint64_t *)((char *)a1 + *(int *)(v15 + 36)), (uint64_t *)((char *)a2 + *(int *)(v15 + 36)), v13);
      sub_23DBBFAFC();
      *(uint64_t *)((char *)a1 + *(int *)(v16 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v16 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = sub_23DC2A154();
      v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      sub_23DBBFA18();
      v9((uint64_t *)((char *)a1 + *(int *)(v10 + 36)), (uint64_t *)((char *)a2 + *(int *)(v10 + 36)), v8);
      sub_23DBBFA90();
      *(uint64_t *)((char *)a1 + *(int *)(v11 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v11 + 48));
      *(uint64_t *)((char *)a1 + *(int *)(v11 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v11 + 64));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
  }
  return a1;
}

uint64_t destroy for SleepingSampleBaselineAvailability(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2 || (_DWORD)result == 1)
  {
    v3 = sub_23DC2A154();
    v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
    v5(a1, v3);
    sub_23DBBFA18();
    return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1 + *(int *)(v4 + 36), v3);
  }
  return result;
}

char *initializeWithCopy for SleepingSampleBaselineAvailability(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v11 = sub_23DC2A154();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(a1, a2, v11);
    sub_23DBBFA18();
    v12(&a1[*(int *)(v13 + 36)], &a2[*(int *)(v13 + 36)], v11);
    sub_23DBBFAFC();
    *(_QWORD *)&a1[*(int *)(v14 + 48)] = *(_QWORD *)&a2[*(int *)(v14 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = sub_23DC2A154();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_23DBBFA18();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    sub_23DBBFA90();
    *(_QWORD *)&a1[*(int *)(v10 + 48)] = *(_QWORD *)&a2[*(int *)(v10 + 48)];
    *(_QWORD *)&a1[*(int *)(v10 + 64)] = *(_QWORD *)&a2[*(int *)(v10 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithCopy for SleepingSampleBaselineAvailability(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_23DBB2BB0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = sub_23DC2A154();
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
      v12(a1, a2, v11);
      sub_23DBBFA18();
      v12(&a1[*(int *)(v13 + 36)], &a2[*(int *)(v13 + 36)], v11);
      sub_23DBBFAFC();
      *(_QWORD *)&a1[*(int *)(v14 + 48)] = *(_QWORD *)&a2[*(int *)(v14 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = sub_23DC2A154();
      v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      sub_23DBBFA18();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      sub_23DBBFA90();
      *(_QWORD *)&a1[*(int *)(v10 + 48)] = *(_QWORD *)&a2[*(int *)(v10 + 48)];
      *(_QWORD *)&a1[*(int *)(v10 + 64)] = *(_QWORD *)&a2[*(int *)(v10 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

char *initializeWithTake for SleepingSampleBaselineAvailability(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v11 = sub_23DC2A154();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
    v12(a1, a2, v11);
    sub_23DBBFA18();
    v12(&a1[*(int *)(v13 + 36)], &a2[*(int *)(v13 + 36)], v11);
    sub_23DBBFAFC();
    *(_QWORD *)&a1[*(int *)(v14 + 48)] = *(_QWORD *)&a2[*(int *)(v14 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = sub_23DC2A154();
    v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    sub_23DBBFA18();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    sub_23DBBFA90();
    *(_QWORD *)&a1[*(int *)(v10 + 48)] = *(_QWORD *)&a2[*(int *)(v10 + 48)];
    *(_QWORD *)&a1[*(int *)(v10 + 64)] = *(_QWORD *)&a2[*(int *)(v10 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for SleepingSampleBaselineAvailability(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_23DBB2BB0((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = sub_23DC2A154();
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
      v12(a1, a2, v11);
      sub_23DBBFA18();
      v12(&a1[*(int *)(v13 + 36)], &a2[*(int *)(v13 + 36)], v11);
      sub_23DBBFAFC();
      *(_QWORD *)&a1[*(int *)(v14 + 48)] = *(_QWORD *)&a2[*(int *)(v14 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = sub_23DC2A154();
      v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      sub_23DBBFA18();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      sub_23DBBFA90();
      *(_QWORD *)&a1[*(int *)(v10 + 48)] = *(_QWORD *)&a2[*(int *)(v10 + 48)];
      *(_QWORD *)&a1[*(int *)(v10 + 64)] = *(_QWORD *)&a2[*(int *)(v10 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_23DC06BD4()
{
  unint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  char *v4;
  char *v5;

  v3 = MEMORY[0x24BEE0178] + 64;
  sub_23DBBFA18();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v4 = &v2;
    swift_getTupleTypeLayout2();
    v5 = &v1;
    swift_initEnumMetadataMultiPayload();
  }
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineAvailability.CodingKeys()
{
  return &type metadata for SleepingSampleBaselineAvailability.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SleepingSampleBaselineAvailability.NoDataCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DC06CD4 + 4 * asc_23DC30690[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DC06CF4 + 4 * byte_23DC30695[v4]))();
}

_BYTE *sub_23DC06CD4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DC06CF4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DC06CFC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DC06D04(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DC06D0C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DC06D14(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineAvailability.NoDataCodingKeys()
{
  return &type metadata for SleepingSampleBaselineAvailability.NoDataCodingKeys;
}

uint64_t _s13HealthBalance34SleepingSampleBaselineAvailabilityO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DC06D7C + 4 * byte_23DC3069F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DC06DB0 + 4 * byte_23DC3069A[v4]))();
}

uint64_t sub_23DC06DB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DC06DB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DC06DC0);
  return result;
}

uint64_t sub_23DC06DCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DC06DD4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DC06DD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DC06DE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineAvailability.InsufficientDataCodingKeys()
{
  return &type metadata for SleepingSampleBaselineAvailability.InsufficientDataCodingKeys;
}

uint64_t storeEnumTagSinglePayload for SleepingSampleBaselineAvailability.AvailableCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23DC06E48 + 4 * byte_23DC306A9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23DC06E7C + 4 * byte_23DC306A4[v4]))();
}

uint64_t sub_23DC06E7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DC06E84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DC06E8CLL);
  return result;
}

uint64_t sub_23DC06E98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DC06EA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23DC06EA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DC06EAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleBaselineAvailability.AvailableCodingKeys()
{
  return &type metadata for SleepingSampleBaselineAvailability.AvailableCodingKeys;
}

unint64_t sub_23DC06ECC()
{
  unint64_t result;

  result = qword_256CEA690;
  if (!qword_256CEA690)
  {
    result = MEMORY[0x24263E440](&unk_23DC30894, &type metadata for SleepingSampleBaselineAvailability.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA690);
  }
  return result;
}

unint64_t sub_23DC06F14()
{
  unint64_t result;

  result = qword_256CEA698;
  if (!qword_256CEA698)
  {
    result = MEMORY[0x24263E440](&unk_23DC3094C, &type metadata for SleepingSampleBaselineAvailability.InsufficientDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA698);
  }
  return result;
}

unint64_t sub_23DC06F5C()
{
  unint64_t result;

  result = qword_256CEA6A0;
  if (!qword_256CEA6A0)
  {
    result = MEMORY[0x24263E440](&unk_23DC30A04, &type metadata for SleepingSampleBaselineAvailability.NoDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA6A0);
  }
  return result;
}

unint64_t sub_23DC06FA4()
{
  unint64_t result;

  result = qword_256CEA6A8;
  if (!qword_256CEA6A8)
  {
    result = MEMORY[0x24263E440](&unk_23DC30ABC, &type metadata for SleepingSampleBaselineAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA6A8);
  }
  return result;
}

unint64_t sub_23DC06FEC()
{
  unint64_t result;

  result = qword_25431F9F8;
  if (!qword_25431F9F8)
  {
    result = MEMORY[0x24263E440](&unk_23DC30A2C, &type metadata for SleepingSampleBaselineAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F9F8);
  }
  return result;
}

unint64_t sub_23DC07034()
{
  unint64_t result;

  result = qword_25431F9F0;
  if (!qword_25431F9F0)
  {
    result = MEMORY[0x24263E440](&unk_23DC30A54, &type metadata for SleepingSampleBaselineAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F9F0);
  }
  return result;
}

unint64_t sub_23DC0707C()
{
  unint64_t result;

  result = qword_25431FA10;
  if (!qword_25431FA10)
  {
    result = MEMORY[0x24263E440](&unk_23DC30974, &type metadata for SleepingSampleBaselineAvailability.NoDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431FA10);
  }
  return result;
}

unint64_t sub_23DC070C4()
{
  unint64_t result;

  result = qword_25431FA08;
  if (!qword_25431FA08)
  {
    result = MEMORY[0x24263E440](&unk_23DC3099C, &type metadata for SleepingSampleBaselineAvailability.NoDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431FA08);
  }
  return result;
}

unint64_t sub_23DC0710C()
{
  unint64_t result;

  result = qword_25431FA40;
  if (!qword_25431FA40)
  {
    result = MEMORY[0x24263E440](&unk_23DC308BC, &type metadata for SleepingSampleBaselineAvailability.InsufficientDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431FA40);
  }
  return result;
}

unint64_t sub_23DC07154()
{
  unint64_t result;

  result = qword_25431FA38;
  if (!qword_25431FA38)
  {
    result = MEMORY[0x24263E440](&unk_23DC308E4, &type metadata for SleepingSampleBaselineAvailability.InsufficientDataCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431FA38);
  }
  return result;
}

unint64_t sub_23DC0719C()
{
  unint64_t result;

  result = qword_25431FA28;
  if (!qword_25431FA28)
  {
    result = MEMORY[0x24263E440](&unk_23DC30804, &type metadata for SleepingSampleBaselineAvailability.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431FA28);
  }
  return result;
}

unint64_t sub_23DC071E4()
{
  unint64_t result;

  result = qword_25431FA20;
  if (!qword_25431FA20)
  {
    result = MEMORY[0x24263E440](&unk_23DC3082C, &type metadata for SleepingSampleBaselineAvailability.AvailableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431FA20);
  }
  return result;
}

uint64_t sub_23DC07228(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64657A796C616E61 && a2 == 0xED000065676E6152;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E756F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_23DC07334()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CEA6B0)
  {
    type metadata accessor for SleepingSampleBaselineAvailability();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CEA6B0);
  }
}

id SleepingSampleDaySummaryQuery.__allocating_init(morningIndexRange:gregorianCalendar:continueAfterInitialResults:resultsHandler:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v11;
  id v12;

  v11 = objc_allocWithZone(v5);
  v12 = sub_23DC0AAE4(a1, a2, a3, a4, a5);
  swift_release();
  return v12;
}

uint64_t sub_23DC07404(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  void (*v24)(char *, _QWORD);
  void (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char v43[32];
  uint64_t v44;

  v30 = a5;
  v31 = a8;
  v38 = a1;
  v39 = a2;
  v29 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v40 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = (char *)&v29 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(v17 - 8);
  v33 = v17;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v29 - v18;
  v20 = sub_23DC2A424();
  if (!v20)
    return sub_23DC2A370();
  v36 = AssociatedTypeWitness;
  v21 = v20;
  v44 = sub_23DC2A658();
  v34 = sub_23DC2A664();
  sub_23DC2A61C();
  v37 = v8;
  result = sub_23DC2A418();
  if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21;
    v35 = v16;
    while (v23)
    {
      v41 = v23;
      v24 = (void (*)(char *, _QWORD))sub_23DC2A43C();
      v25 = *(void (**)(char *))(v11 + 16);
      v26 = v11;
      v27 = v36;
      v25(v14);
      v24(v43, 0);
      v28 = v42;
      v38(v14, v40);
      if (v28)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v29 + 32))(v31, v40, v30);
      }
      v42 = 0;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v27);
      sub_23DC2A64C();
      result = sub_23DC2A430();
      v23 = v41 - 1;
      v11 = v26;
      if (v41 == 1)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
        return v44;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t SleepingSampleDaySummaryQuery.morningIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DBE6A1C(v1 + qword_254322200, a1);
}

uint64_t SleepingSampleDaySummaryQuery.gregorianCalendar.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + qword_254322210;
  v4 = sub_23DC29F80();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SleepingSampleDaySummaryQuery.continueAfterInitialResults.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + qword_254322218);
}

id SleepingSampleDaySummaryQuery.init(morningIndexRange:gregorianCalendar:continueAfterInitialResults:resultsHandler:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  id v5;

  v5 = sub_23DC0AAE4(a1, a2, a3, a4, a5);
  swift_release();
  return v5;
}

void sub_23DC0778C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  uint64_t v51;
  uint64_t ObjectType;
  uint64_t v53;
  char *v54;
  _QWORD aBlock[6];
  uint64_t v56;

  v2 = v1;
  ObjectType = swift_getObjectType();
  v4 = *v2;
  v5 = *MEMORY[0x24BEE4EA0];
  v6 = sub_23DC29E78();
  v53 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v53 + 64);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v50 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v54 = (char *)&v46 - v9;
  v10 = sub_23DC2A028();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (uint64_t *)((char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v13 = objc_msgSend(v2, sel_queue);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, *MEMORY[0x24BEE5610], v10);
  v14 = sub_23DC2A034();
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_5;
  }
  v15 = v5 & v4;
  v16 = (uint64_t *)((char *)v2 + qword_25431F7B0);
  swift_beginAccess();
  v17 = *v16;
  v18 = *(_QWORD *)(v15 + 80);
  swift_bridgeObjectRetain();
  *v16 = sub_23DC2A370();
  swift_bridgeObjectRelease();
  v19 = *(uint64_t *)((char *)v2 + qword_25431F7A0);
  if (v19)
  {
    v47 = *(uint64_t *)((char *)v2 + qword_25431F7A0 + 8);
    v48 = v19;
    swift_retain();
    v50 = (char *)sub_23DC29E60();
    v49 = *((unsigned __int8 *)v2 + qword_254322218);
    v20 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v54, a1, v6);
    v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
    v22 = (v7 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    v51 = v6;
    v23 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
    v46 = v17;
    v24 = v15;
    v25 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v18;
    *(_QWORD *)(v26 + 24) = *(_QWORD *)(v24 + 88);
    (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v26 + v21, v54, v51);
    v27 = (uint64_t *)(v26 + v22);
    v29 = v47;
    v28 = v48;
    *v27 = v48;
    v27[1] = v29;
    *(_QWORD *)(v26 + v23) = v2;
    *(_QWORD *)(v26 + v25) = v46;
    *(_QWORD *)(v26 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
    aBlock[4] = sub_23DC0B420;
    aBlock[5] = v26;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_23DBDDB90;
    aBlock[3] = &block_descriptor_21;
    v30 = _Block_copy(aBlock);
    v31 = v28;
    sub_23DBDDBBC(v28);
    v32 = v2;
    swift_release();
    v33 = v50;
    objc_msgSend(v32, sel_queue_dispatchToClientForUUID_shouldDeactivate_block_, v50, (v49 & 1) == 0, v30);
    _Block_release(v30);

    sub_23DBC9C24(v31);
    return;
  }
  swift_bridgeObjectRelease();
  if (qword_25431F3A8 != -1)
    goto LABEL_10;
LABEL_5:
  v34 = sub_23DC29FF8();
  __swift_project_value_buffer(v34, (uint64_t)qword_25431F3C8);
  v35 = v53;
  v36 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v50, a1, v6);
  v37 = sub_23DC29FE0();
  v38 = sub_23DC2A460();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = swift_slowAlloc();
    v51 = v6;
    v40 = v39;
    v41 = swift_slowAlloc();
    v56 = v41;
    *(_DWORD *)v40 = 136446466;
    aBlock[0] = ObjectType;
    swift_getMetatypeMetadata();
    v42 = sub_23DC2A25C();
    aBlock[0] = sub_23DBF0610(v42, v43, &v56);
    sub_23DC2A4CC();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2080;
    v44 = sub_23DC29E54();
    aBlock[0] = sub_23DBF0610(v44, v45, &v56);
    sub_23DC2A4CC();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v51);
    _os_log_impl(&dword_23DBAF000, v37, v38, "[%{public}s] Missing results handler! %s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24263E4E8](v41, -1, -1);
    MEMORY[0x24263E4E8](v40, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v6);
  }

}

uint64_t sub_23DC07C98(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t (*v26)(_QWORD, _QWORD, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v27 = a4;
  v28 = a5;
  v10 = sub_23DC29E78();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_25431F3A8 != -1)
    swift_once();
  v14 = sub_23DC29FF8();
  __swift_project_value_buffer(v14, (uint64_t)qword_25431F3C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v15 = sub_23DC29FE0();
  v16 = sub_23DC2A46C();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v25 = a3;
    v18 = v17;
    v19 = swift_slowAlloc();
    v29 = v19;
    v30 = a6;
    *(_DWORD *)v18 = 136446466;
    swift_getMetatypeMetadata();
    v26 = a2;
    v20 = sub_23DC2A25C();
    v30 = sub_23DBF0610(v20, v21, &v29);
    sub_23DC2A4CC();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    v22 = sub_23DC29E54();
    v30 = sub_23DBF0610(v22, v23, &v29);
    a2 = v26;
    sub_23DC2A4CC();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    _os_log_impl(&dword_23DBAF000, v15, v16, "[%{public}s] Calling results with final results %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24263E4E8](v19, -1, -1);
    MEMORY[0x24263E4E8](v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }

  return a2(v27, v28, 0);
}

uint64_t static SleepingSampleDaySummaryQuery.configurationClass()()
{
  return type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
}

uint64_t sub_23DC07F04()
{
  static SleepingSampleDaySummaryQuery.configurationClass()();
  return swift_getObjCClassFromMetadata();
}

Swift::Void __swiftcall SleepingSampleDaySummaryQuery.queue_populateConfiguration(_:)(HKQueryServerConfiguration *a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  HKQueryServerConfiguration *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  objc_super v22;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DBB89B8(0, &qword_25431FA60, (uint64_t (*)(uint64_t))sub_23DBB9590, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v21 - v6;
  sub_23DBB89B8(0, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v4);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - v9;
  v22.receiver = v1;
  v22.super_class = ObjectType;
  -[HKQueryServerConfiguration queue_populateConfiguration:](&v22, sel_queue_populateConfiguration_, a1);
  type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
  v11 = swift_dynamicCastClass();
  if (v11)
  {
    v12 = v11;
    v13 = &v1[qword_254322210];
    v14 = sub_23DC29F80();
    v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8];
    v16 = *(_QWORD *)(v14 - 8);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v10, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v10, 0, 1, v14);
    v17 = v12 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar;
    swift_beginAccess();
    v18 = a1;
    sub_23DBDD860((uint64_t)v10, v17, &qword_25431F8F0, v15);
    swift_endAccess();
    sub_23DBE6A1C((uint64_t)&v1[qword_254322200], (uint64_t)v7);
    sub_23DBB9590();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v7, 0, 1, v19);
    v20 = v12 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange;
    swift_beginAccess();
    sub_23DBDD860((uint64_t)v7, v20, &qword_25431FA60, (uint64_t (*)(uint64_t))sub_23DBB9590);
    swift_endAccess();

  }
}

void sub_23DC08148(void *a1, uint64_t a2, void *a3)
{
  HKQueryServerConfiguration *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  SleepingSampleDaySummaryQuery.queue_populateConfiguration(_:)(v4);

}

uint64_t SleepingSampleDaySummaryQuery.queue_deliverError(_:)(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  const void *v18;
  char *v19;
  id v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v3 = sub_23DC2A004();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DC2A01C();
  v8 = *(_QWORD *)(v7 - 8);
  result = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)&v1[qword_25431F7A0];
  if (v12)
  {
    v24 = result;
    v13 = *(_QWORD *)&v1[qword_25431F7A0 + 8];
    swift_retain();
    v14 = objc_msgSend(v1, sel_clientQueue);
    if (v14)
    {
      v15 = v14;
      v16 = (_QWORD *)swift_allocObject();
      v16[2] = v12;
      v16[3] = v13;
      v16[4] = v1;
      v16[5] = a1;
      aBlock[4] = sub_23DC0ACEC;
      aBlock[5] = v16;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_23DBDDB90;
      aBlock[3] = &block_descriptor_2;
      v17 = _Block_copy(aBlock);
      v23 = v4;
      v18 = v17;
      sub_23DBDDBBC(v12);
      v19 = v1;
      v20 = a1;
      sub_23DC2A010();
      v25 = MEMORY[0x24BEE4AF8];
      v21 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
      sub_23DBB2CB0(&qword_25431F258, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
      sub_23DBB89B8(0, &qword_25431F280, v21, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
      sub_23DBDDBCC();
      sub_23DC2A538();
      MEMORY[0x24263DAF8](0, v11, v6, v18);
      _Block_release(v18);

      sub_23DBC9C24(v12);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v3);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v24);
      return swift_release();
    }
    else
    {
      return sub_23DBC9C24(v12);
    }
  }
  return result;
}

void sub_23DC0840C(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v5 = a3;
  v4 = a1;
  SleepingSampleDaySummaryQuery.queue_deliverError(_:)(v5);

}

uint64_t SleepingSampleDaySummaryQuery.queue_queryDidDeactivate(_:)()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  void *v3;
  char *v4;
  uint64_t v5;
  objc_super v7;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  v3 = (void *)sub_23DC29E60();
  v7.receiver = v1;
  v7.super_class = ObjectType;
  objc_msgSendSuper2(&v7, sel_queue_queryDidDeactivate_, v3);

  v4 = &v1[qword_25431F7A0];
  v5 = *(_QWORD *)&v1[qword_25431F7A0];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  return sub_23DBC9C24(v5);
}

uint64_t sub_23DC084C8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v8;

  v2 = sub_23DC29E78();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC29E6C();
  v6 = a1;
  SleepingSampleDaySummaryQuery.queue_queryDidDeactivate(_:)();

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Bool __swiftcall SleepingSampleDaySummaryQuery.queue_shouldDeactivateAfterInitialResults()()
{
  uint64_t v0;

  return (*(_BYTE *)(v0 + qword_254322218) & 1) == 0;
}

BOOL sub_23DC08580()
{
  return SleepingSampleDaySummaryQuery.queue_shouldDeactivateAfterInitialResults()();
}

void *static SleepingSampleDaySummaryQuery.clientInterfaceProtocol()()
{
  return sub_23DC0AD18();
}

void *sub_23DC085BC()
{
  swift_getObjCClassMetadata();
  return sub_23DC0AD18();
}

void static SleepingSampleDaySummaryQuery.configureClientInterface(_:)(void *a1)
{
  _QWORD *v1;
  void *ObjCClassFromMetadata;
  objc_class *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  objc_super v21;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v4 = (objc_class *)(*MEMORY[0x24BEE4EA0] & *v1);
  v21.receiver = ObjCClassFromMetadata;
  v21.super_class = v4;
  v14 = a1;
  objc_msgSendSuper2(&v21, sel_configureClientInterface_, a1);
  sub_23DBB2A2C(0, &qword_25431FA70);
  *(_QWORD *)&v18 = MEMORY[0x24BEE4AF8];
  MEMORY[0x24263D99C]();
  if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_23DC2A364();
  sub_23DC0AD24();
  swift_getObjCClassFromMetadata();
  sub_23DC2A388();
  v5 = sub_23DC2A358();
  MEMORY[0x24263D99C](v5);
  if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_23DC2A364();
  sub_23DC0ADF4();
  swift_getObjCClassFromMetadata();
  sub_23DC2A388();
  v6 = sub_23DC2A358();
  MEMORY[0x24263D99C](v6);
  if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_23DC2A364();
  swift_getObjCClassFromMetadata();
  sub_23DC2A388();
  sub_23DC2A358();
  if (!((unint64_t)v18 >> 62))
  {
    v7 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_9;
LABEL_22:
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_23:
    swift_bridgeObjectRelease_n();
    sub_23DBDF668((uint64_t)v9);
    swift_bridgeObjectRelease();
    v13 = (void *)sub_23DC2A3F4();
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_setClasses_forSelector_argumentIndex_ofReply_, v13, sel_client_deliverSleepingSampleDaySummaries_clearPending_isFinalBatch_queryUUID_, 0, 0);

    return;
  }
  swift_bridgeObjectRetain();
  v7 = sub_23DC2A6A0();
  if (!v7)
    goto LABEL_22;
LABEL_9:
  if (v7 >= 1)
  {
    v8 = v18 + 32;
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      swift_unknownObjectRetain_n();
      if ((swift_dynamicCast() & 1) == 0)
      {
        v20 = 0;
        v18 = 0u;
        v19 = 0u;
      }
      swift_unknownObjectRelease();
      if (*((_QWORD *)&v19 + 1))
      {
        v15 = v18;
        v16 = v19;
        v17 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = sub_23DBDF138(0, v9[2] + 1, 1, v9);
        v11 = v9[2];
        v10 = v9[3];
        if (v11 >= v10 >> 1)
          v9 = sub_23DBDF138((_QWORD *)(v10 > 1), v11 + 1, 1, v9);
        v9[2] = v11 + 1;
        v12 = &v9[5 * v11];
        v12[8] = v17;
        *((_OWORD *)v12 + 2) = v15;
        *((_OWORD *)v12 + 3) = v16;
      }
      else
      {
        sub_23DC0B0B0((uint64_t)&v18, (unint64_t *)&unk_256CE9D68);
      }
      v8 += 8;
      --v7;
    }
    while (v7);
    goto LABEL_23;
  }
  __break(1u);
}

void sub_23DC08990(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  swift_getObjCClassMetadata();
  v4 = a3;
  static SleepingSampleDaySummaryQuery.configureClientInterface(_:)(v4);

}

uint64_t SleepingSampleDaySummaryQuery.client_deliverSleepingSampleDaySummaries(_:clearPending:isFinalBatch:queryUUID:)(uint64_t a1, int a2, int a3, uint64_t a4)
{
  _QWORD *v4;
  void *v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v25;
  int v26;
  id v27;
  int v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  v5 = v4;
  v28 = a3;
  v26 = a2;
  ObjectType = swift_getObjectType();
  v25 = *MEMORY[0x24BEE4EA0] & *v4;
  v30 = sub_23DC2A004();
  v33 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DC2A01C();
  v31 = *(_QWORD *)(v10 - 8);
  v32 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23DC29E78();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](v13);
  swift_bridgeObjectRetain();
  v27 = objc_msgSend(v5, sel_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v13);
  v16 = (*(unsigned __int8 *)(v14 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v17 = swift_allocObject();
  v18 = v25;
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v25 + 80);
  *(_QWORD *)(v17 + 24) = *(_QWORD *)(v18 + 88);
  *(_QWORD *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 40) = v26;
  *(_QWORD *)(v17 + 48) = v5;
  *(_BYTE *)(v17 + 56) = v28;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v17 + v16, (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  *(_QWORD *)(v17 + ((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = ObjectType;
  aBlock[4] = sub_23DC0AF4C;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DBDDB90;
  aBlock[3] = &block_descriptor_6_0;
  v19 = _Block_copy(aBlock);
  v20 = v5;
  sub_23DC2A010();
  v34 = MEMORY[0x24BEE4AF8];
  v21 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  sub_23DBB2CB0(&qword_25431F258, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  sub_23DBB89B8(0, &qword_25431F280, v21, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DBDDBCC();
  v22 = v30;
  sub_23DC2A538();
  v23 = v27;
  MEMORY[0x24263DAF8](0, v12, v9, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v32);
  return swift_release();
}

void sub_23DC08CB4(uint64_t a1, char a2, _QWORD *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50[16];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[2];
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v48 = a6;
  v49 = a5;
  v10 = *MEMORY[0x24BEE4EA0] & *a3;
  v11 = sub_23DC29E78();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v48 - v16;
  v56 = a1;
  v19 = *(_QWORD *)(v10 + 80);
  v18 = *(_QWORD *)(v10 + 88);
  v51 = v19;
  v52 = v18;
  v20 = *(_QWORD *)(v18 + 24);
  v21 = *(_OWORD *)(v18 + 8);
  v53[1] = v19;
  v54 = v21;
  v55 = v20;
  sub_23DC2A07C();
  v22 = sub_23DC2A3A0();
  v23 = MEMORY[0x24263E440](MEMORY[0x24BEE12E0], v22);
  v25 = sub_23DC07404((void (*)(char *, char *))sub_23DC0B350, (uint64_t)v50, v22, v19, MEMORY[0x24BEE4078], v23, MEMORY[0x24BEE40A8], v24);
  v26 = v25;
  if ((a2 & 1) != 0)
  {
    v27 = (_QWORD *)((char *)a3 + qword_25431F7B0);
    swift_beginAccess();
    *v27 = v26;
    swift_bridgeObjectRelease();
  }
  else
  {
    v56 = v25;
    swift_beginAccess();
    v28 = sub_23DC2A3A0();
    MEMORY[0x24263E440](MEMORY[0x24BEE12C8], v28);
    sub_23DC2A394();
    swift_endAccess();
  }
  if ((a4 & 1) != 0)
  {
    if (qword_25431F3A8 != -1)
      swift_once();
    v29 = sub_23DC29FF8();
    __swift_project_value_buffer(v29, (uint64_t)qword_25431F3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v17, v49, v11);
    v30 = sub_23DC29FE0();
    v31 = sub_23DC2A46C();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      v33 = swift_slowAlloc();
      v53[0] = v33;
      *(_DWORD *)v32 = 136446466;
      v56 = v48;
      swift_getMetatypeMetadata();
      v48 = v11;
      v34 = sub_23DC2A25C();
      v56 = sub_23DBF0610(v34, v35, v53);
      sub_23DC2A4CC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      v36 = sub_23DC29E54();
      v56 = sub_23DBF0610(v36, v37, v53);
      sub_23DC2A4CC();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v48);
      _os_log_impl(&dword_23DBAF000, v30, v31, "[%{public}s] Delivering results %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24263E4E8](v33, -1, -1);
      MEMORY[0x24263E4E8](v32, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
    }

    sub_23DC0778C(v49);
  }
  else
  {
    if (qword_25431F3A8 != -1)
      swift_once();
    v38 = sub_23DC29FF8();
    __swift_project_value_buffer(v38, (uint64_t)qword_25431F3C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v49, v11);
    v39 = sub_23DC29FE0();
    v40 = sub_23DC2A46C();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = v11;
      v42 = swift_slowAlloc();
      v43 = swift_slowAlloc();
      v53[0] = v43;
      *(_DWORD *)v42 = 136446466;
      v56 = v48;
      swift_getMetatypeMetadata();
      v44 = sub_23DC2A25C();
      v56 = sub_23DBF0610(v44, v45, v53);
      sub_23DC2A4CC();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2080;
      v46 = sub_23DC29E54();
      v56 = sub_23DBF0610(v46, v47, v53);
      sub_23DC2A4CC();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v41);
      _os_log_impl(&dword_23DBAF000, v39, v40, "[%{public}s] Deferring result delivery %s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24263E4E8](v43, -1, -1);
      MEMORY[0x24263E4E8](v42, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    }

  }
}

uint64_t sub_23DC09208(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v8 = sub_23DC29E78();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23DC2A34C();
  sub_23DC29E6C();
  v13 = a1;
  SleepingSampleDaySummaryQuery.client_deliverSleepingSampleDaySummaries(_:clearPending:isFinalBatch:queryUUID:)(v12, a4, a5, (uint64_t)v11);

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t SleepingSampleDaySummaryQuery.client_logErrorAndKeepQueryActivated(error:queryUUID:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v26;
  uint64_t ObjectType;
  id v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[6];

  v3 = v2;
  v29 = a1;
  ObjectType = swift_getObjectType();
  v5 = *MEMORY[0x24BEE4EA0] & *v2;
  v31 = sub_23DC2A004();
  v34 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v30 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DC2A01C();
  v32 = *(_QWORD *)(v7 - 8);
  v33 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23DC29E78();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = objc_msgSend(v3, sel_queue);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  v14 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v15 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = *(_QWORD *)(v5 + 80);
  *((_QWORD *)v16 + 3) = *(_QWORD *)(v5 + 88);
  *((_QWORD *)v16 + 4) = v3;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v14], v13, v10);
  v17 = v29;
  *(_QWORD *)&v16[v15] = v29;
  *(_QWORD *)&v16[(v15 + 15) & 0xFFFFFFFFFFFFFFF8] = ObjectType;
  aBlock[4] = sub_23DC0B034;
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23DBDDB90;
  aBlock[3] = &block_descriptor_12;
  v18 = _Block_copy(aBlock);
  v19 = v3;
  v20 = v17;
  sub_23DC2A010();
  v35 = MEMORY[0x24BEE4AF8];
  v21 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  sub_23DBB2CB0(&qword_25431F258, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  sub_23DBB89B8(0, &qword_25431F280, v21, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1250]);
  sub_23DBDDBCC();
  v23 = v30;
  v22 = v31;
  sub_23DC2A538();
  v24 = v28;
  MEMORY[0x24263DAF8](0, v9, v23, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v23, v22);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
  return swift_release();
}

void sub_23DC095C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(void *);
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = sub_23DC29E78();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23DC2A370();
  v13 = (uint64_t *)(a1 + qword_25431F7B0);
  swift_beginAccess();
  *v13 = v12;
  swift_bridgeObjectRelease();
  if (qword_25431F3A8 != -1)
    swift_once();
  v14 = sub_23DC29FF8();
  __swift_project_value_buffer(v14, (uint64_t)qword_25431F3C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v15 = a3;
  v16 = a3;
  v17 = sub_23DC29FE0();
  v18 = sub_23DC2A460();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v33 = a1;
    v20 = v19;
    v31 = (_QWORD *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v34 = v32;
    *(_DWORD *)v20 = 136446722;
    v35 = a4;
    swift_getMetatypeMetadata();
    v21 = sub_23DC2A25C();
    v35 = sub_23DBF0610(v21, v22, &v34);
    sub_23DC2A4CC();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    v23 = sub_23DC29E54();
    v35 = sub_23DBF0610(v23, v24, &v34);
    sub_23DC2A4CC();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(_WORD *)(v20 + 22) = 2114;
    v25 = a3;
    v26 = _swift_stdlib_bridgeErrorToNSError();
    v35 = v26;
    sub_23DC2A4CC();
    v27 = v31;
    *v31 = v26;

    _os_log_impl(&dword_23DBAF000, v17, v18, "[%{public}s] Non-deactivating query error %s %{public}@", (uint8_t *)v20, 0x20u);
    sub_23DBE622C();
    swift_arrayDestroy();
    MEMORY[0x24263E4E8](v27, -1, -1);
    v28 = v32;
    swift_arrayDestroy();
    MEMORY[0x24263E4E8](v28, -1, -1);
    v29 = v20;
    a1 = v33;
    MEMORY[0x24263E4E8](v29, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

  }
  v30 = *(void (**)(void *))(a1 + qword_254322208);
  if (v30)
  {
    swift_retain();
    v30(a3);
    sub_23DBC9C24((uint64_t)v30);
  }
}

uint64_t sub_23DC0993C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  uint64_t v12;

  v5 = sub_23DC29E78();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC29E6C();
  v9 = a3;
  v10 = a1;
  SleepingSampleDaySummaryQuery.client_logErrorAndKeepQueryActivated(error:queryUUID:)(v9, (uint64_t)v8);

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

id SleepingSampleDaySummaryQuery.__allocating_init(queryDescriptors:)()
{
  objc_class *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_allocWithZone(v0);
  sub_23DBB2A2C(0, (unint64_t *)&qword_25431F2A0);
  v2 = (void *)sub_23DC2A340();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithQueryDescriptors_, v2);

  return v3;
}

void SleepingSampleDaySummaryQuery.init(queryDescriptors:)()
{
  sub_23DC0B084();
}

void sub_23DC09A88()
{
  sub_23DC0B084();
}

id SleepingSampleDaySummaryQuery.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_23DC09AD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_23DBE5134(a1 + qword_254322200);
  v2 = a1 + qword_254322210;
  v3 = sub_23DC29F80();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  sub_23DBC9C24(*(_QWORD *)(a1 + qword_25431F7A0));
  swift_bridgeObjectRelease();
  return sub_23DBC9C24(*(_QWORD *)(a1 + qword_254322208));
}

uint64_t sub_23DC09B60@<X0>(uint64_t a1@<X8>)
{
  return sub_23DBFC64C(&OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], a1);
}

uint64_t sub_23DC09B7C@<X0>(uint64_t a1@<X8>)
{
  return sub_23DBFC64C(&OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange, &qword_25431FA60, (uint64_t (*)(uint64_t))sub_23DBB9590, a1);
}

id SleepingSampleDaySummaryQueryConfiguration.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id SleepingSampleDaySummaryQueryConfiguration.init()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  objc_super v6;

  v1 = &v0[OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar];
  v2 = sub_23DC29F80();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = &v0[OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange];
  sub_23DBB9590();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
  return objc_msgSendSuper2(&v6, sel_init);
}

_OWORD *sub_23DC09CF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  objc_class *Configuration;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[24];
  uint64_t v21;
  _BYTE v22[32];
  objc_super v23;
  _OWORD v24[2];

  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DBB89B8(0, &qword_25431FA60, (uint64_t (*)(uint64_t))sub_23DBB9590, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v20[-v7];
  sub_23DBB89B8(0, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v5);
  MEMORY[0x24BDAC7A8](v9);
  v11 = &v20[-v10];
  Configuration = (objc_class *)type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
  v23.receiver = v2;
  v23.super_class = Configuration;
  objc_msgSendSuper2(&v23, sel_copyWithZone_, a1);
  sub_23DC2A520();
  swift_unknownObjectRelease();
  sub_23DBB8948((uint64_t)v24, (uint64_t)v22);
  if (!swift_dynamicCast())
    return sub_23DBF345C(v24, (_OWORD *)a2);
  v13 = v21;
  v14 = (uint64_t)v2 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar;
  swift_beginAccess();
  v15 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8];
  sub_23DBB8B24(v14, (uint64_t)v11, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  v16 = v13 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar;
  swift_beginAccess();
  sub_23DBDD860((uint64_t)v11, v16, &qword_25431F8F0, v15);
  swift_endAccess();
  v17 = (uint64_t)v2 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange;
  swift_beginAccess();
  sub_23DBB8B24(v17, (uint64_t)v8, &qword_25431FA60, (uint64_t (*)(uint64_t))sub_23DBB9590);
  v18 = v13 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange;
  swift_beginAccess();
  sub_23DBDD860((uint64_t)v8, v18, &qword_25431FA60, (uint64_t (*)(uint64_t))sub_23DBB9590);
  swift_endAccess();
  *(_QWORD *)(a2 + 24) = Configuration;
  *(_QWORD *)a2 = v13;
  return (_OWORD *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
}

id SleepingSampleDaySummaryQueryConfiguration.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void SleepingSampleDaySummaryQueryConfiguration.init(coder:)(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  objc_class *Configuration;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  id v50;
  void (*v51)(char *, uint64_t);
  id v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void *v63;
  char v64[24];
  uint64_t v65;
  objc_super v66;

  sub_23DBC2A3C();
  v56 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v58 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v54 = (char *)&v52 - v6;
  sub_23DBB9590();
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v55 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DBB89B8(0, &qword_25431FA60, v12, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v13);
  v57 = (uint64_t)&v52 - v14;
  sub_23DBB89B8(0, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v11);
  MEMORY[0x24BDAC7A8](v15);
  v60 = (char *)&v52 - v16;
  v17 = sub_23DC2A154();
  v62 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v52 - v21;
  v23 = &v1[OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar];
  v24 = sub_23DC29F80();
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v25(v23, 1, 1, v24);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  v59 = v8;
  v26(&v1[OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange], 1, 1, v8);
  Configuration = (objc_class *)type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
  v66.receiver = v1;
  v66.super_class = Configuration;
  v28 = objc_msgSendSuper2(&v66, sel_initWithCoder_, a1);
  if (!v28)
  {

    return;
  }
  v53 = v26;
  v61 = (char *)v28;
  v29 = (void *)sub_23DC2A220();
  objc_msgSend(a1, sel_decodeIntegerForKey_, v29);

  sub_23DC2A118();
  v30 = (void *)sub_23DC2A220();
  objc_msgSend(a1, sel_decodeIntegerForKey_, v30);

  sub_23DC2A118();
  sub_23DBB89B8(0, &qword_25431EFE0, (uint64_t (*)(uint64_t))sub_23DBFD28C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_23DC2B900;
  *(_QWORD *)(v31 + 32) = sub_23DBB2A2C(0, (unint64_t *)&qword_25431EF60);
  sub_23DC2A49C();
  swift_bridgeObjectRelease();
  if (!v65)
  {
    v50 = v61;

    sub_23DC0B0B0((uint64_t)v64, (unint64_t *)&qword_256CE95A0);
LABEL_9:
    v51 = *(void (**)(char *, uint64_t))(v62 + 8);
    v51(v20, v17);
    v51(v22, v17);

    return;
  }
  v32 = v61;
  if ((swift_dynamicCast() & 1) == 0)
  {
    v50 = v32;

    goto LABEL_9;
  }
  v52 = v63;
  v33 = (uint64_t)v60;
  sub_23DC29F50();
  v25((char *)v33, 0, 1, v24);
  v34 = v32;
  v35 = (uint64_t)v32 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar;
  swift_beginAccess();
  sub_23DBDD860(v33, v35, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8]);
  swift_endAccess();
  sub_23DBB2CB0((unint64_t *)&qword_25431FAC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
  LOBYTE(v35) = sub_23DC2A1C0();

  if ((v35 & 1) != 0)
  {
    v36 = v56;
    v37 = v54;
    v38 = &v54[*(int *)(v56 + 48)];
    v39 = v62;
    v40 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
    v40(v54, v22, v17);
    v60 = v38;
    v40(v38, v20, v17);
    v41 = v58;
    v42 = &v58[*(int *)(v36 + 48)];
    v43 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
    v43(v58, v37, v17);
    v43(v42, v38, v17);
    v44 = (uint64_t)v55;
    v40(v55, v41, v17);
    v45 = *(void (**)(char *, uint64_t))(v39 + 8);
    v45(v42, v17);
    v46 = &v41[*(int *)(v36 + 48)];
    v40(v41, v37, v17);
    v40(v46, v60, v17);
    v47 = v59;
    v40((char *)(v44 + *(int *)(v59 + 36)), v46, v17);
    v45(v41, v17);
    v48 = v57;
    sub_23DBDFCD4(v44, v57);
    v53((char *)v48, 0, 1, v47);
    v49 = &v61[OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange];
    swift_beginAccess();
    sub_23DBDD860(v48, (uint64_t)v49, &qword_25431FA60, (uint64_t (*)(uint64_t))sub_23DBB9590);
    swift_endAccess();
  }
  else
  {
    __break(1u);
  }
}

void sub_23DC0A640(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  objc_class *Configuration;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  objc_super v38;

  v2 = v1;
  v36 = sub_23DC2A154();
  v4 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DBB89B8(0, &qword_25431FA60, (uint64_t (*)(uint64_t))sub_23DBB9590, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v37 = (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v36 - v11;
  v13 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8];
  sub_23DBB89B8(0, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], v7);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v36 - v15;
  Configuration = (objc_class *)type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
  v38.receiver = v2;
  v38.super_class = Configuration;
  objc_msgSendSuper2(&v38, sel_encodeWithCoder_, a1);
  v18 = (uint64_t)v2 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar;
  swift_beginAccess();
  sub_23DBB8B24(v18, (uint64_t)v16, &qword_25431F8F0, v13);
  v19 = sub_23DC29F80();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v16, 1, v19) != 1)
  {
    v21 = sub_23DC29F38();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v16, v19);
  }
  v22 = (void *)sub_23DC2A220();
  objc_msgSend(a1, sel_encodeObject_forKey_, v21, v22);
  swift_unknownObjectRelease();

  v23 = (uint64_t)v2 + OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange;
  swift_beginAccess();
  sub_23DBB8B24(v23, (uint64_t)v12, &qword_25431FA60, (uint64_t (*)(uint64_t))sub_23DBB9590);
  sub_23DBB9590();
  v25 = v24;
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48);
  if (v26((uint64_t)v12, 1, v24) == 1)
  {
    __break(1u);
  }
  else
  {
    v27 = v4;
    v28 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v29 = v36;
    v28(v6, v12, v36);
    sub_23DBE5134((uint64_t)v12);
    v30 = sub_23DC2A124();
    v31 = *(void (**)(char *, uint64_t))(v27 + 8);
    v31(v6, v29);
    v32 = (void *)sub_23DC2A220();
    objc_msgSend(a1, sel_encodeInteger_forKey_, v30, v32);

    v33 = v37;
    sub_23DBB8B24(v23, v37, &qword_25431FA60, (uint64_t (*)(uint64_t))sub_23DBB9590);
    if (v26(v33, 1, v25) != 1)
    {
      v28(v6, (char *)(v33 + *(int *)(v25 + 36)), v29);
      sub_23DBE5134(v33);
      v34 = sub_23DC2A124();
      v31(v6, v29);
      v35 = (void *)sub_23DC2A220();
      objc_msgSend(a1, sel_encodeInteger_forKey_, v34, v35);

      return;
    }
  }
  __break(1u);
}

id SleepingSampleDaySummaryQueryConfiguration.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_23DC0AAE4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  objc_class *ObjectType;
  objc_super v24;

  v6 = v5;
  ObjectType = (objc_class *)swift_getObjectType();
  v12 = (uint64_t *)&v6[qword_25431F7A0];
  *v12 = 0;
  v12[1] = 0;
  v13 = qword_25431F7B0;
  v14 = v6;
  *(_QWORD *)&v6[v13] = sub_23DC2A370();
  v15 = &v14[qword_254322208];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  sub_23DBE6A1C(a1, (uint64_t)&v14[qword_254322200]);
  v16 = &v14[qword_254322210];
  v17 = sub_23DC29F80();
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a2, v17);
  v14[qword_254322218] = a3;
  v19 = *v12;
  *v12 = a4;
  v12[1] = a5;
  swift_retain();
  sub_23DBC9C24(v19);

  sub_23DBB2A2C(0, (unint64_t *)&qword_25431F2A0);
  v20 = (void *)sub_23DC2A340();
  v24.receiver = v14;
  v24.super_class = ObjectType;
  v21 = objc_msgSendSuper2(&v24, sel_initWithQueryDescriptors_, v20);

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, v17);
  sub_23DBE5134(a1);
  return v21;
}

uint64_t type metadata accessor for SleepingSampleDaySummaryQueryConfiguration()
{
  uint64_t result;

  result = qword_25431F8A0;
  if (!qword_25431F8A0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DC0ACB8()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_23DC0ACEC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v0 + 16))(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), 1);
}

void *sub_23DC0AD18()
{
  return &unk_256CF81E8;
}

void sub_23DC0AD24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25431FA58)
  {
    type metadata accessor for SleepingSampleAggregateDaySummary();
    sub_23DBB2CB0(&qword_25431F860, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleAggregateDaySummary);
    sub_23DBB2CB0(&qword_25431F848, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleAggregateDaySummary);
    sub_23DBB2CB0(&qword_25431F850, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleAggregateDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleAggregateDaySummary);
    v0 = sub_23DC2A07C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25431FA58);
  }
}

void sub_23DC0ADF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_25431FA48)
  {
    type metadata accessor for SleepingSampleDaySummary();
    sub_23DBB2CB0((unint64_t *)&unk_25431F790, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleDaySummary);
    sub_23DBB2CB0(&qword_25431F778, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleDaySummary);
    sub_23DBB2CB0(&qword_25431F780, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleDaySummary);
    v0 = sub_23DC2A07C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_25431FA48);
  }
}

uint64_t sub_23DC0AEC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23DC29E78();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_23DC0AF4C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_23DC29E78() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_23DC08CB4(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD **)(v0 + 48), *(_BYTE *)(v0 + 56), v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_23DC0AF9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_23DC29E78();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_23DC0B034()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_23DC29E78() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_23DC095C0(*(_QWORD *)(v0 + 32), v0 + v2, *(void **)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

void sub_23DC0B084()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_23DC0B0B0(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;

  sub_23DBC7B28(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23DC0B0EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], a2);
}

uint64_t sub_23DC0B108(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_23DBFC55C(a1, a2, a3, a4, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], &OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_gregorianCalendar);
}

uint64_t sub_23DC0B134@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange, &qword_25431FA60, (uint64_t (*)(uint64_t))sub_23DBB9590, a2);
}

uint64_t sub_23DC0B150(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_23DBFC55C(a1, a2, a3, a4, &qword_25431FA60, (uint64_t (*)(uint64_t))sub_23DBB9590, &OBJC_IVAR____TtC13HealthBalance42SleepingSampleDaySummaryQueryConfiguration_morningIndexRange);
}

void sub_23DC0B180()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DBB9590();
  if (v0 <= 0x3F)
  {
    sub_23DC29F80();
    if (v1 <= 0x3F)
      swift_initClassMetadata2();
  }
}

uint64_t type metadata accessor for SleepingSampleDaySummaryQuery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SleepingSampleDaySummaryQuery);
}

uint64_t method lookup function for SleepingSampleDaySummaryQuery()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepingSampleDaySummaryQuery.__allocating_init(morningIndexRange:gregorianCalendar:continueAfterInitialResults:resultsHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t sub_23DC0B24C()
{
  return type metadata accessor for SleepingSampleDaySummaryQueryConfiguration();
}

void sub_23DC0B254()
{
  unint64_t v0;
  unint64_t v1;

  sub_23DBB89B8(319, &qword_25431F8F0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF2D8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  if (v0 <= 0x3F)
  {
    sub_23DBB89B8(319, &qword_25431FA60, (uint64_t (*)(uint64_t))sub_23DBB9590, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for SleepingSampleDaySummaryQueryConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepingSampleDaySummaryQueryConfiguration.gregorianCalendar.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SleepingSampleDaySummaryQueryConfiguration.morningIndexRange.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t sub_23DC0B350()
{
  return sub_23DC2A070();
}

uint64_t sub_23DC0B378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = sub_23DC29E78();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23DC0B420()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(sub_23DC29E78() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_23DC07C98(v0 + v2, *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0+ ((((((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24263E3BC](a1, v6, a5);
}

uint64_t DayIndex.formatted(dateStyle:gregorianCalendar:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v0 = sub_23DC29DD0();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23DC29E48();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC2A148();
  sub_23DC29DB8();
  v8 = sub_23DC29E3C();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t sub_23DC0B5CC(void (*a1)(char *, uint64_t))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  void (*v55)(uint64_t, char *, uint64_t);
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  char *v84;
  _QWORD v85[2];
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  void (*v91)(char *, _QWORD, uint64_t);
  unsigned int v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  void (*v114)(char *, uint64_t);
  void (*v115)(uint64_t, char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  sub_23DBC2A3C();
  v99 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v98 = (char *)v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v97 = (char *)v85 - v6;
  sub_23DBBFA18();
  v8 = v7;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v118 = (uint64_t)v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v96 = (char *)v85 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v116 = (uint64_t)v85 - v13;
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v14);
  v107 = (char *)v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v16);
  v122 = (uint64_t)v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v18);
  v121 = (uint64_t)v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB89B8(0, &qword_256CEA508, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF510], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v85 - v21;
  v109 = sub_23DC29EFC();
  v111 = *(_QWORD *)(v109 - 8);
  MEMORY[0x24BDAC7A8](v109);
  v108 = (char *)v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_23DC29F80();
  v105 = *(_QWORD *)(v24 - 8);
  v106 = v24;
  v25 = MEMORY[0x24BDAC7A8](v24);
  v104 = (char *)v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)v85 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v120 = (char *)v85 - v30;
  v103 = type metadata accessor for SleepingSampleAggregate();
  v102 = *(_QWORD *)(v103 - 8);
  MEMORY[0x24BDAC7A8](v103);
  v119 = (uint64_t)v85 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_23DC2A154();
  v33 = *(void (**)(char *, uint64_t))(v32 - 8);
  v34 = MEMORY[0x24BDAC7A8](v32);
  v36 = (char *)v85 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = MEMORY[0x24BDAC7A8](v34);
  v95 = (char *)v85 - v38;
  v39 = MEMORY[0x24BDAC7A8](v37);
  v101 = (char *)v85 - v40;
  MEMORY[0x24BDAC7A8](v39);
  v42 = (char *)v85 - v41;
  v117 = v8;
  v43 = (char *)a1 + *(int *)(v8 + 36);
  v44 = sub_23DBCE0BC(&qword_256CE9748, MEMORY[0x24BDD24C0]);
  v100 = v43;
  v94 = v44;
  sub_23DC2A4F0();
  v45 = v125;
  result = MEMORY[0x24BEE4AF8];
  if (v125)
  {
    v85[1] = v1;
    v125 = MEMORY[0x24BEE4AF8];
    v47 = v45;
    sub_23DBCCA78(0, v45 & ~(v45 >> 63), 0);
    v93 = v33;
    v115 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v33 + 2);
    result = ((uint64_t (*)(char *, void (*)(char *, uint64_t), uint64_t))v115)(v42, a1, v32);
    if ((v47 & 0x8000000000000000) == 0)
    {
      v110 = v32;
      v92 = *MEMORY[0x24BDCEF70];
      v91 = *(void (**)(char *, _QWORD, uint64_t))(v111 + 104);
      v90 = a1;
      v87 = v22;
      v86 = v29;
      v89 = v36;
      v88 = v42;
      while (v47)
      {
        v112 = v47;
        v49 = v108;
        v48 = v109;
        v91(v108, v92, v109);
        sub_23DC29F08();
        (*(void (**)(char *, uint64_t))(v111 + 8))(v49, v48);
        sub_23DC29F8C();
        v50 = sub_23DC29FA4();
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v22, 1, v50);
        if ((_DWORD)result == 1)
          goto LABEL_21;
        sub_23DC29F74();
        v52 = v105;
        v51 = v106;
        v53 = v120;
        (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v120, v29, v106);
        v54 = v101;
        v55 = v115;
        v115((uint64_t)v101, v42, v32);
        v56 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
        v57 = v104;
        v56(v104, v53, v51);
        v58 = sub_23DC29BF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v121, 1, 1, v58);
        v59 = sub_23DC29E48();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v122, 1, 1, v59);
        v60 = v119;
        v55(v119, v54, v32);
        v61 = (int *)v103;
        v56((char *)(v60 + *(int *)(v103 + 20)), v57, v51);
        sub_23DBC6894(0);
        v63 = (uint64_t)v107;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v107, 1, 1, v62);
        v64 = *(void (**)(char *, uint64_t))(v52 + 8);
        v64(v57, v51);
        v65 = v93;
        v114 = (void (*)(char *, uint64_t))*((_QWORD *)v93 + 1);
        v114(v54, v32);
        sub_23DBBCEB0(v63, v60 + v61[6], (uint64_t (*)(_QWORD))sub_23DBB29B8);
        sub_23DBBCEB0(v121, v60 + v61[7], (uint64_t (*)(_QWORD))sub_23DBD4810);
        sub_23DBBCEB0(v122, v60 + v61[8], (uint64_t (*)(_QWORD))sub_23DBD482C);
        *(_BYTE *)(v60 + v61[9]) = 0;
        v64(v120, v51);
        v66 = v125;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_23DBCCA78(0, *(_QWORD *)(v66 + 16) + 1, 1);
          v66 = v125;
        }
        v33 = v90;
        v36 = v100;
        v68 = *(_QWORD *)(v66 + 16);
        v67 = *(_QWORD *)(v66 + 24);
        if (v68 >= v67 >> 1)
        {
          sub_23DBCCA78(v67 > 1, v68 + 1, 1);
          v66 = v125;
        }
        *(_QWORD *)(v66 + 16) = v68 + 1;
        sub_23DBBCEB0(v119, v66+ ((*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80))+ *(_QWORD *)(v102 + 72) * v68, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
        v123 = sub_23DBCE0BC((unint64_t *)&qword_25431FAC8, MEMORY[0x24BDD24A8]);
        if ((sub_23DC2A1C0() & 1) == 0)
          goto LABEL_17;
        v69 = v65;
        v70 = v99;
        v71 = v97;
        v72 = &v97[*(int *)(v99 + 48)];
        v73 = (void (*)(char *, char *, uint64_t))v115;
        v115((uint64_t)v97, (char *)v33, v32);
        v113 = v72;
        v73(v72, v36, v32);
        v74 = v98;
        v75 = &v98[*(int *)(v70 + 48)];
        v73(v98, v71, v32);
        v73(v75, v72, v32);
        v76 = (char *)v69[4];
        v77 = (uint64_t)v96;
        ((void (*)(char *, char *, uint64_t))v76)(v96, v74, v32);
        v33 = v114;
        v114(v75, v32);
        v78 = *(int *)(v70 + 48);
        v79 = v116;
        v80 = &v74[v78];
        ((void (*)(char *, char *, uint64_t))v76)(v74, v71, v32);
        ((void (*)(char *, char *, uint64_t))v76)(v80, v113, v32);
        v81 = v77 + *(int *)(v117 + 36);
        v113 = v76;
        ((void (*)(uint64_t, char *, uint64_t))v76)(v81, v80, v32);
        v33(v74, v32);
        sub_23DBBCEB0(v77, v79, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        v42 = v88;
        LOBYTE(v80) = sub_23DC2A1C0();
        v36 = v89;
        v73(v89, v42, v32);
        sub_23DBB2B6C(v79, v118, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        if ((v80 & 1) == 0)
          goto LABEL_18;
        v82 = v118;
        v83 = sub_23DC2A1A8();
        sub_23DBB2BB0(v82, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        result = ((uint64_t (*)(char *, uint64_t))v33)(v36, v32);
        if ((v83 & 1) == 0)
          goto LABEL_19;
        sub_23DBB2BB0(v116, (uint64_t (*)(_QWORD))sub_23DBBFA18);
        v124 = 1;
        v84 = v95;
        sub_23DC2A4E4();
        v33(v42, v32);
        ((void (*)(char *, char *, uint64_t))v113)(v42, v84, v32);
        v47 = v112 - 1;
        v22 = v87;
        v29 = v86;
        if (v112 == 1)
        {
          v33(v42, v110);
          return v125;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      sub_23DBB2BB0(v118, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      result = ((uint64_t (*)(char *, uint64_t))v33)(v36, v32);
LABEL_19:
      __break(1u);
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  return result;
}

uint64_t static SleepingSampleAggregate.empty(in:calendar:)(void (*a1)(char *, uint64_t))
{
  return sub_23DC0B5CC(a1);
}

uint64_t static SleepingSampleAggregate.empty(on:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v29 = a2;
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v5);
  v30 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v7);
  v31 = (uint64_t)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23DC29F80();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23DC2A154();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v20(v19, a1, v16);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21(v15, v29, v12);
  v22 = sub_23DC29BF0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v11, 1, 1, v22);
  v23 = sub_23DC29E48();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v31, 1, 1, v23);
  v20(a3, (uint64_t)v19, v16);
  v24 = (int *)type metadata accessor for SleepingSampleAggregate();
  v21(&a3[v24[5]], (uint64_t)v15, v12);
  sub_23DBC6894(0);
  v26 = (uint64_t)v30;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v30, 1, 1, v25);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  sub_23DBBCEB0(v26, (uint64_t)&a3[v24[6]], (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBBCEB0((uint64_t)v11, (uint64_t)&a3[v24[7]], (uint64_t (*)(_QWORD))sub_23DBD4810);
  result = sub_23DBBCEB0(v31, (uint64_t)&a3[v24[8]], (uint64_t (*)(_QWORD))sub_23DBD482C);
  a3[v24[9]] = 0;
  return result;
}

id static SleepingSampleAggregate.asleep(on:for:ending:created:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char *a10)
{
  void *v16;
  void *v17;
  id result;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  double v25;
  double v26;

  v16 = (void *)objc_opt_self();
  v17 = (void *)objc_opt_self();
  result = objc_msgSend(v17, sel_minuteUnit);
  v19 = 60 * a2;
  if ((unsigned __int128)(a2 * (__int128)60) >> 64 == (60 * a2) >> 63)
  {
    v20 = __OFADD__(v19, a3);
    v21 = v19 + a3;
    if (!v20)
    {
      v22 = result;
      v23 = objc_msgSend(v16, sel_quantityWithUnit_doubleValue_, result, (double)v21);

      v24 = objc_msgSend(v17, sel_secondUnit);
      objc_msgSend(v23, sel_doubleValueForUnit_, v24);
      v26 = v25;

      return (id)static SleepingSampleAggregate.asleep(on:seconds:ending:created:calendar:)(a1, a4, a5, a6, a7, a8 & 1, a10, a9, v26);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static SleepingSampleAggregate.asleep(on:seconds:ending:created:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, char *a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  void (*v43)(uint64_t, char *, uint64_t);
  void *v44;
  id v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  char *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t result;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  id v69;
  void (*v70)(void);
  void (*v71)(uint64_t, char *, uint64_t);
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v79 = a6;
  v80 = a5;
  v81 = a4;
  v86 = a3;
  v87 = a2;
  v84 = a8;
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v12);
  v83 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23DC29BF0();
  v85 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v68 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23DC29E48();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v66 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v65 = (char *)&v64 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v67 = (char *)&v64 - v22;
  sub_23DBD482C(0);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v82 = (uint64_t)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)&v64 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)&v64 - v29;
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v31);
  v88 = (uint64_t)&v64 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_23DC29F80();
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v64 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_23DC2A154();
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v64 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v40;
  v41 = *(void (**)(void))(v40 + 16);
  v72 = v42;
  v73 = v39;
  v70 = v41;
  v41();
  v77 = v34;
  v43 = *(void (**)(uint64_t, char *, uint64_t))(v34 + 16);
  v74 = v33;
  v75 = v36;
  v71 = v43;
  v43((uint64_t)v36, a7, v33);
  v44 = (void *)objc_opt_self();
  v45 = objc_msgSend((id)objc_opt_self(), sel_secondUnit);
  v69 = objc_msgSend(v44, sel_quantityWithUnit_doubleValue_, v45, a9);

  v78 = a1;
  Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(v87, v86, (uint64_t)v30);
  sub_23DBB2B6C((uint64_t)v30, (uint64_t)v28, (uint64_t (*)(_QWORD))sub_23DBD482C);
  v46 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v28, 1, v16) != 1)
  {
    v47 = v67;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v67, v28, v16);
    v48 = v65;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v65, v47, v16);
    sub_23DC29E00();
    v49 = v68;
    sub_23DC29BD8();
    v50 = *(void (**)(char *, uint64_t))(v17 + 8);
    v50(v48, v16);
    (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v88, v49, v14);
    v50(v47, v16);
    v46 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v88, v46, 1, v14);
  sub_23DBB2BB0((uint64_t)v30, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if ((v79 & 1) != 0)
    v51 = v86;
  else
    v51 = v80;
  v52 = v82;
  if ((v79 & 1) != 0)
    v53 = v87;
  else
    v53 = v81;
  Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(v53, v51, v82);
  v54 = v84;
  v56 = v72;
  v55 = v73;
  ((void (*)(uint64_t, char *, uint64_t))v70)(v84, v73, v72);
  v57 = (int *)type metadata accessor for SleepingSampleAggregate();
  v58 = v74;
  v59 = v75;
  v71(v54 + v57[5], v75, v74);
  sub_23DBC68B0();
  v60 = v69;
  v61 = (uint64_t)v83;
  sub_23DC2A064();
  sub_23DBC6894(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v61, 0, 1, v62);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v59, v58);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v55, v56);

  sub_23DBBCEB0(v61, v54 + v57[6], (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBBCEB0(v88, v54 + v57[7], (uint64_t (*)(_QWORD))sub_23DBD4810);
  result = sub_23DBBCEB0(v52, v54 + v57[8], (uint64_t (*)(_QWORD))sub_23DBD482C);
  *(_BYTE *)(v54 + v57[9]) = 4;
  return result;
}

uint64_t _s13HealthBalance23SleepingSampleAggregateV2rr2on4brpm4time8calendarAC0A3Kit8DayIndexV_SdSi4hour_Si6minutet10Foundation8CalendarVtFZ_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X8>, double a6@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(uint64_t, char *, uint64_t);
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  char *v48;
  char *v49;
  id v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  void (*v54)(uint64_t, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;

  v51 = a4;
  v55 = a2;
  v56 = a3;
  v62 = a5;
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v8);
  v61 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_23DC29E48();
  v10 = *(_QWORD *)(v52 - 8);
  v11 = MEMORY[0x24BDAC7A8](v52);
  v49 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v48 = (char *)&v48 - v13;
  sub_23DBD482C(0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v60 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v48 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v48 - v20;
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v22);
  v63 = (uint64_t)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_23DC29F80();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_23DC2A154();
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v48 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = v31;
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v53(v30, a1, v28);
  v59 = v25;
  v32 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 16);
  v57 = v24;
  v54 = v32;
  v32((uint64_t)v27, v51, v24);
  v33 = (void *)objc_opt_self();
  v34 = objc_msgSend((id)objc_opt_self(), sel__countPerMinuteUnit);
  v50 = objc_msgSend(v33, sel_quantityWithUnit_doubleValue_, v34, a6);

  v35 = v52;
  Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(v55, v56, (uint64_t)v21);
  sub_23DBB2B6C((uint64_t)v21, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v19, 1, v35) == 1)
  {
    v36 = sub_23DC29BF0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v63, 1, 1, v36);
  }
  else
  {
    v37 = v48;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v48, v19, v35);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v49, v37, v35);
    v38 = v63;
    sub_23DC29BD8();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v37, v35);
    v39 = sub_23DC29BF0();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 0, 1, v39);
  }
  sub_23DBB2BB0((uint64_t)v21, (uint64_t (*)(_QWORD))sub_23DBD482C);
  v40 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v60, 1, 1, v35);
  v41 = v62;
  v53(v62, (uint64_t)v30, v28);
  v42 = (int *)type metadata accessor for SleepingSampleAggregate();
  v43 = v57;
  v54((uint64_t)&v41[v42[5]], v27, v57);
  sub_23DBC68B0();
  v44 = v50;
  v45 = (uint64_t)v61;
  sub_23DC2A064();
  sub_23DBC6894(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 0, 1, v46);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v27, v43);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v30, v28);

  sub_23DBBCEB0(v45, (uint64_t)&v41[v42[6]], (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBBCEB0(v63, (uint64_t)&v41[v42[7]], (uint64_t (*)(_QWORD))sub_23DBD4810);
  result = sub_23DBBCEB0(v40, (uint64_t)&v41[v42[8]], (uint64_t (*)(_QWORD))sub_23DBD482C);
  v41[v42[9]] = 4;
  return result;
}

uint64_t static SleepingSampleAggregate.spO2(on:pct:time:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X8>, double a6@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(uint64_t, char *, uint64_t);
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  int *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  char *v48;
  char *v49;
  id v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  void (*v54)(uint64_t, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;

  v51 = a4;
  v55 = a2;
  v56 = a3;
  v62 = a5;
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v8);
  v61 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_23DC29E48();
  v10 = *(_QWORD *)(v52 - 8);
  v11 = MEMORY[0x24BDAC7A8](v52);
  v49 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v48 = (char *)&v48 - v13;
  sub_23DBD482C(0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v60 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v48 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v48 - v20;
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v22);
  v63 = (uint64_t)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_23DC29F80();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_23DC2A154();
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v48 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = v31;
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v53(v30, a1, v28);
  v59 = v25;
  v32 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 16);
  v57 = v24;
  v54 = v32;
  v32((uint64_t)v27, v51, v24);
  v33 = (void *)objc_opt_self();
  v34 = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
  v50 = objc_msgSend(v33, sel_quantityWithUnit_doubleValue_, v34, a6 / 100.0);

  v35 = v52;
  Calendar.date(onMorningIndex:matchingHour:matchingMinute:)(v55, v56, (uint64_t)v21);
  sub_23DBB2B6C((uint64_t)v21, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_23DBD482C);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v19, 1, v35) == 1)
  {
    v36 = sub_23DC29BF0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v63, 1, 1, v36);
  }
  else
  {
    v37 = v48;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v48, v19, v35);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v49, v37, v35);
    v38 = v63;
    sub_23DC29BD8();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v37, v35);
    v39 = sub_23DC29BF0();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 0, 1, v39);
  }
  sub_23DBB2BB0((uint64_t)v21, (uint64_t (*)(_QWORD))sub_23DBD482C);
  v40 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v60, 1, 1, v35);
  v41 = v62;
  v53(v62, (uint64_t)v30, v28);
  v42 = (int *)type metadata accessor for SleepingSampleAggregate();
  v43 = v57;
  v54((uint64_t)&v41[v42[5]], v27, v57);
  sub_23DBC68B0();
  v44 = v50;
  v45 = (uint64_t)v61;
  sub_23DC2A064();
  sub_23DBC6894(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 0, 1, v46);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v27, v43);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v30, v28);

  sub_23DBBCEB0(v45, (uint64_t)&v41[v42[6]], (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBBCEB0(v63, (uint64_t)&v41[v42[7]], (uint64_t (*)(_QWORD))sub_23DBD4810);
  result = sub_23DBBCEB0(v40, (uint64_t)&v41[v42[8]], (uint64_t (*)(_QWORD))sub_23DBD482C);
  v41[v42[9]] = 4;
  return result;
}

uint64_t static SleepingSampleAggregate.wtr(on:degC:start:end:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X8>, double a8@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  void (*v38)(char *, uint64_t, uint64_t);
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;

  v42 = a4;
  v43 = a5;
  v40 = a2;
  v41 = a3;
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v12);
  v47 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v14);
  v46 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23DC29F80();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_23DC2A154();
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = v26;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v38(v25, a1, v23);
  v45 = v20;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v39(v22, a6, v19);
  v27 = (void *)objc_opt_self();
  v28 = objc_msgSend((id)objc_opt_self(), sel__changeInDegreeCelsiusUnit);
  v29 = objc_msgSend(v27, sel_quantityWithUnit_doubleValue_, v28, a8);

  v48 = v18;
  Calendar.dateInterval(start:end:onMorningIndex:)(v40, v41, v42, v43, a1, (uint64_t)v18);
  v30 = sub_23DC29BF0();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v48, 0, 1, v30);
  v31 = sub_23DC29E48();
  v32 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v46, 1, 1, v31);
  v38(a7, (uint64_t)v25, v23);
  v33 = (int *)type metadata accessor for SleepingSampleAggregate();
  v39(&a7[v33[5]], (uint64_t)v22, v19);
  sub_23DBC68B0();
  v34 = v29;
  v35 = (uint64_t)v47;
  sub_23DC2A064();
  sub_23DBC6894(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v35, 0, 1, v36);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v19);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v25, v23);

  sub_23DBBCEB0(v35, (uint64_t)&a7[v33[6]], (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBBCEB0((uint64_t)v48, (uint64_t)&a7[v33[7]], (uint64_t (*)(_QWORD))sub_23DBD4810);
  result = sub_23DBBCEB0(v32, (uint64_t)&a7[v33[8]], (uint64_t (*)(_QWORD))sub_23DBD482C);
  a7[v33[9]] = 4;
  return result;
}

uint64_t static SleepingSampleBaselineComparison.heart(_:on:calendar:hasBaseline:baselineCount:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v26 - v13;
  v15 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v15);
  v17 = (uint64_t *)((char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s13HealthBalance23SleepingSampleAggregateV2rr2on4brpm4time8calendarAC0A3Kit8DayIndexV_SdSi4hour_Si6minutet10Foundation8CalendarVtFZ_0(a1, 6, 30, a2, v20, a6 * 7.0 + 60.0);
  if ((a3 & 1) != 0)
  {
    static SleepingSampleBaselineAvailability.available(on:count:)(a1, a4, (uint64_t)v17);
    SleepingSampleBaseline.init(perMinute:_:_:iqr:)(0.0, 1, (uint64_t)v14, 53.0, 60.0, 67.0);
  }
  else
  {
    *v17 = 6;
    swift_storeEnumTagMultiPayload();
    v21 = type metadata accessor for SleepingSampleBaseline();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v14, 1, 1, v21);
  }
  v22 = type metadata accessor for SleepingSampleBaselineComparison();
  v23 = a5 + *(int *)(v22 + 24);
  v24 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  sub_23DBBCEB0((uint64_t)v20, a5, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
  sub_23DBBCEB0((uint64_t)v17, a5 + *(int *)(v22 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  return sub_23DBBC8B0((uint64_t)v14, v23);
}

uint64_t static SleepingSampleBaselineComparison.empty(on:calendar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v42 = a2;
  v47 = a3;
  sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v4);
  v46 = (char *)&v39 - v5;
  v45 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v45);
  v44 = (uint64_t *)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v7);
  v43 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD4810(0);
  MEMORY[0x24BDAC7A8](v11);
  v48 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23DC29F80();
  v40 = *(_QWORD *)(v13 - 8);
  v14 = v40;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23DC2A154();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (int *)type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v24(v20, a1, v17);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v25(v16, v42, v13);
  v26 = sub_23DC29BF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v48, 1, 1, v26);
  v27 = sub_23DC29E48();
  v28 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v41, 1, 1, v27);
  v24(v23, (uint64_t)v20, v17);
  v25(&v23[v21[5]], (uint64_t)v16, v13);
  sub_23DBC6894(0);
  v30 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v43, 1, 1, v29);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  sub_23DBBCEB0(v30, (uint64_t)&v23[v21[6]], (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBBCEB0(v48, (uint64_t)&v23[v21[7]], (uint64_t (*)(_QWORD))sub_23DBD4810);
  sub_23DBBCEB0(v28, (uint64_t)&v23[v21[8]], (uint64_t (*)(_QWORD))sub_23DBD482C);
  v23[v21[9]] = 0;
  v31 = (uint64_t)v44;
  *v44 = 6;
  swift_storeEnumTagMultiPayload();
  v32 = type metadata accessor for SleepingSampleBaseline();
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56);
  v34 = (uint64_t)v46;
  v33(v46, 1, 1, v32);
  v35 = type metadata accessor for SleepingSampleBaselineComparison();
  v36 = v47;
  v37 = v47 + *(int *)(v35 + 24);
  v33((char *)v37, 1, 1, v32);
  sub_23DBBCEB0((uint64_t)v23, v36, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
  sub_23DBBCEB0(v31, v36 + *(int *)(v35 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  return sub_23DBBC8B0(v34, v37);
}

uint64_t static SleepingSampleBaselineComparison.spO2(_:on:calendar:hasBaseline:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v24 - v11;
  v13 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SleepingSampleAggregate.spO2(on:pct:time:calendar:)(a1, 6, 30, a2, v18, a5 + 95.0);
  if ((a3 & 1) != 0)
  {
    static SleepingSampleBaselineAvailability.available(on:count:)(a1, 49, (uint64_t)v15);
    SleepingSampleBaseline.init(percent:_:_:iqr:)(0.0, 1, (uint64_t)v12, 94.0, 95.0, 96.0);
  }
  else
  {
    *v15 = 6;
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SleepingSampleBaseline();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 1, 1, v19);
  }
  v20 = type metadata accessor for SleepingSampleBaselineComparison();
  v21 = a4 + *(int *)(v20 + 24);
  v22 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  sub_23DBBCEB0((uint64_t)v18, a4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
  sub_23DBBCEB0((uint64_t)v15, a4 + *(int *)(v20 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  return sub_23DBBC8B0((uint64_t)v12, v21);
}

uint64_t static SleepingSampleBaselineComparison.rr(_:on:calendar:hasBaseline:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v24 - v11;
  v13 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s13HealthBalance23SleepingSampleAggregateV2rr2on4brpm4time8calendarAC0A3Kit8DayIndexV_SdSi4hour_Si6minutet10Foundation8CalendarVtFZ_0(a1, 6, 30, a2, v18, a5 + 15.0);
  if ((a3 & 1) != 0)
  {
    static SleepingSampleBaselineAvailability.available(on:count:)(a1, 49, (uint64_t)v15);
    SleepingSampleBaseline.init(perMinute:_:_:iqr:)(0.0, 1, (uint64_t)v12, 14.0, 15.0, 16.0);
  }
  else
  {
    *v15 = 6;
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SleepingSampleBaseline();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 1, 1, v19);
  }
  v20 = type metadata accessor for SleepingSampleBaselineComparison();
  v21 = a4 + *(int *)(v20 + 24);
  v22 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  sub_23DBBCEB0((uint64_t)v18, a4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
  sub_23DBBCEB0((uint64_t)v15, a4 + *(int *)(v20 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  return sub_23DBBC8B0((uint64_t)v12, v21);
}

uint64_t static SleepingSampleBaselineComparison.wtr(_:on:calendar:hasBaseline:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v24 - v11;
  v13 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SleepingSampleAggregate.wtr(on:degC:start:end:calendar:)(a1, 23, 45, 6, 30, a2, v18, a5);
  if ((a3 & 1) != 0)
  {
    static SleepingSampleBaselineAvailability.available(on:count:)(a1, 49, (uint64_t)v15);
    SleepingSampleBaseline.init(celsiusChange:_:_:iqr:)(0.0, 1, (uint64_t)v12, -1.0, 0.0, 1.0);
  }
  else
  {
    *v15 = 6;
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SleepingSampleBaseline();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 1, 1, v19);
  }
  v20 = type metadata accessor for SleepingSampleBaselineComparison();
  v21 = a4 + *(int *)(v20 + 24);
  v22 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  sub_23DBBCEB0((uint64_t)v18, a4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
  sub_23DBBCEB0((uint64_t)v15, a4 + *(int *)(v20 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  return sub_23DBBC8B0((uint64_t)v12, v21);
}

uint64_t static SleepingSampleBaselineComparison.asleep(_:on:calendar:hasBaseline:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v24 - v11;
  v13 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (uint64_t *)((char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static SleepingSampleAggregate.asleep(on:seconds:ending:created:calendar:)(a1, 6, 30, 0, 0, 1, a2, (uint64_t)v18, a5 * 3600.0 + 25200.0);
  if ((a3 & 1) != 0)
  {
    static SleepingSampleBaselineAvailability.available(on:count:)(a1, 49, (uint64_t)v15);
    SleepingSampleBaseline.init(s:_:_:)((uint64_t)v12, 21600.0, 25200.0, 28800.0);
  }
  else
  {
    *v15 = 6;
    swift_storeEnumTagMultiPayload();
    v19 = type metadata accessor for SleepingSampleBaseline();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v12, 1, 1, v19);
  }
  v20 = type metadata accessor for SleepingSampleBaselineComparison();
  v21 = a4 + *(int *)(v20 + 24);
  v22 = type metadata accessor for SleepingSampleBaseline();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  sub_23DBBCEB0((uint64_t)v18, a4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
  sub_23DBBCEB0((uint64_t)v15, a4 + *(int *)(v20 + 20), (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  return sub_23DBBC8B0((uint64_t)v12, v21);
}

uint64_t static HealthBalanceAnalyticsError.== infix(_:_:)()
{
  return 1;
}

uint64_t HealthBalanceAnalyticsError.hash(into:)()
{
  return sub_23DC2A88C();
}

uint64_t HealthBalanceAnalyticsError.hashValue.getter()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

void submitAnalytics(for:manager:)(void *a1)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;

  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v2);
  v3 = objc_msgSend(a1, sel_notification);
  v4 = objc_msgSend(v3, sel_request);

  v5 = objc_msgSend(v4, sel_content);
  v6 = objc_msgSend(v5, sel_categoryIdentifier);

  v7 = sub_23DC2A244();
  v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  SleepingSampleChangeNotification.CategoryIdentifier.init(rawValue:)(v10);
  __asm { BR              X9 }
}

uint64_t sub_23DC0E698()
{
  return 0;
}

uint64_t sub_23DC0E8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBD482C(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23DC0E928()
{
  unint64_t result;

  result = qword_256CEA730;
  if (!qword_256CEA730)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for HealthBalanceAnalyticsError, &type metadata for HealthBalanceAnalyticsError);
    atomic_store(result, (unint64_t *)&qword_256CEA730);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for HealthBalanceAnalyticsError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DC0E9AC + 4 * byte_23DC30CD0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DC0E9CC + 4 * byte_23DC30CD5[v4]))();
}

_BYTE *sub_23DC0E9AC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DC0E9CC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DC0E9D4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DC0E9DC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DC0E9E4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DC0E9EC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HealthBalanceAnalyticsError()
{
  return &type metadata for HealthBalanceAnalyticsError;
}

uint64_t sub_23DC0EA08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t SampleDaySummary;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t result;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  char v44;
  uint64_t v45;
  char *v46;
  char v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char v62;
  void (*v63)(char *, uint64_t);
  uint64_t BaselineComparison;
  uint64_t v65;
  double *v66;
  char v67;
  double *v68;
  int v69;
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;

  sub_23DBC6894(0);
  v5 = v4;
  v83 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBCB834();
  v12 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v85 = (uint64_t)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v15 = v14;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v71 - v19;
  SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  v22 = MEMORY[0x24BDAC7A8](SampleDaySummary);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v71 - v26;
  v28 = *(_QWORD *)(a1 + 16);
  if (v28 == *(_QWORD *)(a2 + 16))
  {
    v84 = (int *)v23;
    v79 = v15;
    v80 = v18;
    if (!v28 || a1 == a2)
      return 1;
    v77 = v12;
    v72 = v7;
    v73 = v10;
    v29 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    v74 = *(_QWORD *)(v24 + 72);
    v78 = v20;
    v30 = v25;
    v31 = v84;
    v75 = a1;
    v76 = a2;
    while (1)
    {
      v82 = v28;
      sub_23DBB2B6C(a1 + v29, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSampleDaySummary);
      v81 = v29;
      sub_23DBB2B6C(a2 + v29, v30, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSampleDaySummary);
      sub_23DC2A154();
      sub_23DBB2CB0(&qword_256CE9748, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
      sub_23DC2A4F0();
      v33 = v30;
      if (v86)
        break;
      v34 = v31;
      v35 = v5;
      v36 = v34[5];
      v37 = &v27[v36];
      v38 = v30 + v36;
      sub_23DBB2CB0(&qword_256CE9818, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B0]);
      v39 = sub_23DC2A1F0();
      v40 = (uint64_t)v37;
      v41 = (uint64_t)v78;
      v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68];
      sub_23DC10AF4(v40, (uint64_t)v78, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
      v43 = (uint64_t)v80;
      sub_23DC10AF4(v38, (uint64_t)v80, (unint64_t *)&qword_25431FB50, v42);
      if ((v39 & 1) == 0)
      {
        v70 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68];
        sub_23DBE6B70(v43, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
        sub_23DBE6B70(v41, (unint64_t *)&qword_25431FB50, v70);
        v33 = v30;
        break;
      }
      v44 = sub_23DC2A1F0();
      sub_23DBE6B70(v43, (unint64_t *)&qword_25431FB50, v42);
      sub_23DBE6B70(v41, (unint64_t *)&qword_25431FB50, v42);
      v33 = v30;
      if ((v44 & 1) == 0)
        break;
      v5 = v35;
      v45 = v84[6];
      v46 = &v27[v45];
      v47 = v27[v45 + 8];
      v48 = (_QWORD *)(v30 + v45);
      v49 = *(unsigned __int8 *)(v30 + v45 + 8);
      if ((v47 & 1) != 0)
      {
        if (!v49)
          break;
      }
      else
      {
        if (*(_QWORD *)v46 != *v48)
          LOBYTE(v49) = 1;
        if ((v49 & 1) != 0)
          break;
      }
      v50 = v84[7];
      v51 = v27[v50];
      v52 = *(unsigned __int8 *)(v30 + v50);
      if (v51 == 5)
      {
        if (v52 != 5)
          break;
      }
      else if (v52 == 5 || v51 != v52)
      {
        break;
      }
      v53 = v84[8];
      v54 = &v27[v53];
      v55 = v30 + v53;
      v56 = v85;
      v57 = v85 + *(int *)(v77 + 48);
      sub_23DBB2B6C((uint64_t)&v27[v53], v85, (uint64_t (*)(_QWORD))sub_23DBB29B8);
      sub_23DBB2B6C(v55, v57, (uint64_t (*)(_QWORD))sub_23DBB29B8);
      v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
      if (v58(v56, 1, v5) == 1)
      {
        if (v58(v57, 1, v5) != 1)
          goto LABEL_35;
        sub_23DBB2BB0(v85, (uint64_t (*)(_QWORD))sub_23DBB29B8);
        v31 = v84;
      }
      else
      {
        v59 = (uint64_t)v73;
        sub_23DBB2B6C(v85, (uint64_t)v73, (uint64_t (*)(_QWORD))sub_23DBB29B8);
        if (v58(v57, 1, v5) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v59, v5);
LABEL_35:
          sub_23DBB2BB0(v85, (uint64_t (*)(_QWORD))sub_23DBCB834);
          break;
        }
        v60 = v83;
        v61 = v72;
        (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v72, v57, v5);
        sub_23DC10B40();
        v62 = sub_23DC2A1F0();
        v63 = *(void (**)(char *, uint64_t))(v60 + 8);
        v63(v61, v5);
        v63((char *)v59, v5);
        sub_23DBB2BB0(v85, (uint64_t (*)(_QWORD))sub_23DBB29B8);
        v31 = v84;
        if ((v62 & 1) == 0)
          break;
      }
      BaselineComparison = type metadata accessor for TrainingLoadBaselineComparison();
      if ((static TrainingLoadChronicBaseline.== infix(_:_:)(&v54[*(int *)(BaselineComparison + 20)], v55 + *(int *)(BaselineComparison + 20)) & 1) == 0)break;
      v65 = *(int *)(BaselineComparison + 24);
      v66 = (double *)&v54[v65];
      v67 = v54[v65 + 8];
      v68 = (double *)(v55 + v65);
      v69 = *(unsigned __int8 *)(v55 + v65 + 8);
      if ((v67 & 1) != 0)
      {
        if (!v69)
          break;
      }
      else
      {
        if (*v66 != *v68)
          LOBYTE(v69) = 1;
        if ((v69 & 1) != 0)
          break;
      }
      v30 = v33;
      sub_23DBB2BB0(v33, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSampleDaySummary);
      sub_23DBB2BB0((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSampleDaySummary);
      a1 = v75;
      v29 = v81 + v74;
      result = 1;
      v28 = v82 - 1;
      a2 = v76;
      if (v82 == 1)
        return result;
    }
    sub_23DBB2BB0(v33, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSampleDaySummary);
    sub_23DBB2BB0((uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSampleDaySummary);
  }
  return 0;
}

uint64_t sub_23DC0F028(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = a1 + 32;
    v4 = a2 + 32;
    do
    {
      v5 = sub_23DC2A244();
      v7 = v6;
      if (v5 == sub_23DC2A244() && v7 == v8)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v10 = sub_23DC2A7FC();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0)
          return 0;
      }
      v3 += 8;
      v4 += 8;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_23DC0F0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for SleepingSampleDaySummary();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v19 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v15 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v13 = *(_QWORD *)(v8 + 72);
      v14 = v11 - 1;
      do
      {
        sub_23DBB2B6C(a1 + v12, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
        sub_23DBB2B6C(a2 + v12, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
        v15 = static SleepingSampleDaySummary.== infix(_:_:)(v10, v7);
        sub_23DBB2BB0((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
        sub_23DBB2BB0((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
        v17 = v14-- != 0;
        if ((v15 & 1) == 0)
          break;
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t TrainingLoadSampleDaySummaryCollection.init(morningIndexRange:daySummaries:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;

  sub_23DBE6A70(a1, a3, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  result = type metadata accessor for TrainingLoadSampleDaySummaryCollection();
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t type metadata accessor for TrainingLoadSampleDaySummaryCollection()
{
  uint64_t result;

  result = qword_256CEA790;
  if (!qword_256CEA790)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t TrainingLoadSampleDaySummaryCollection.morningIndexRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DC10AF4(v1, a1, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
}

uint64_t TrainingLoadSampleDaySummaryCollection.morningIndexRange.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_23DBE124C(a1, v1);
}

uint64_t (*TrainingLoadSampleDaySummaryCollection.morningIndexRange.modify())()
{
  return nullsub_1;
}

uint64_t TrainingLoadSampleDaySummaryCollection.daySummaries.getter()
{
  type metadata accessor for TrainingLoadSampleDaySummaryCollection();
  return swift_bridgeObjectRetain();
}

uint64_t TrainingLoadSampleDaySummaryCollection.daySummaries.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TrainingLoadSampleDaySummaryCollection() + 20);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TrainingLoadSampleDaySummaryCollection.daySummaries.modify())()
{
  type metadata accessor for TrainingLoadSampleDaySummaryCollection();
  return nullsub_1;
}

uint64_t static TrainingLoadSampleDaySummaryCollection.fake(inDayRange:separateByActivityType:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t SampleDaySummary;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  char *v67;
  char v68;
  void (*v69)(char *, uint64_t);
  char *v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  void (*v74)(char *, uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  char *v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  char *v91;
  uint64_t (*v92)(uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  void (*v100)(char *, char *, uint64_t);
  uint64_t v101;
  void (*v102)(char *, uint64_t);
  char *v103;
  void *v104;
  id v105;
  uint64_t v106;
  void (*v107)(char *, _QWORD, uint64_t);
  char *v108;
  uint64_t v109;
  char *v110;
  void (*v111)(char *, uint64_t);
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t);
  uint64_t v132;
  void (*v133)(char *, char *, uint64_t);
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  char *v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  void (*v165)(char *, uint64_t, uint64_t, uint64_t);
  char *v166;
  uint64_t v167;
  void (*v168)(char *, uint64_t);
  unint64_t v169;
  uint64_t v170;

  v146 = a2;
  v129 = a3;
  v4 = sub_23DC29EFC();
  v145 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v162 = (char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23DC29F80();
  v144 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v160 = (char *)&v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  SampleDaySummary = type metadata accessor for TrainingLoadSampleDaySummary();
  v143 = *(_QWORD *)(SampleDaySummary - 8);
  v9 = MEMORY[0x24BDAC7A8](SampleDaySummary);
  v142 = (char *)&v128 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v141 = (char *)&v128 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v140 = (char *)&v128 - v13;
  sub_23DBC2A3C();
  v139 = v14;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v138 = (char *)&v128 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v137 = (char *)&v128 - v17;
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v136 = v18;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v135 = (char *)&v128 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v159 = (uint64_t)&v128 - v21;
  v22 = sub_23DC2A154();
  v23 = (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488];
  v24 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v128 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v25);
  v147 = (char *)&v128 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v150 = (char *)&v128 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v156 = (char *)&v128 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v155 = (char *)&v128 - v34;
  sub_23DBE9EF0();
  v153 = v35;
  MEMORY[0x24BDAC7A8](v35);
  v37 = (char *)&v128 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBE9F50();
  v39 = MEMORY[0x24BDAC7A8](v38);
  v149 = (uint64_t)&v128 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x24BDAC7A8](v39);
  v148 = (char *)&v128 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  v151 = (uint64_t)&v128 - v44;
  v45 = MEMORY[0x24BDAC7A8](v43);
  v130 = (uint64_t)&v128 - v46;
  MEMORY[0x24BDAC7A8](v45);
  v166 = (char *)&v128 - v47;
  sub_23DBB89B8(0, (unint64_t *)&qword_256CE9570, v23, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v48);
  v164 = (char *)&v128 - v49;
  sub_23DC10228();
  v51 = v50;
  MEMORY[0x24BDAC7A8](v50);
  v53 = (char *)&v128 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC10AF4(a1, (uint64_t)v53, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v54 = *(int *)(v51 + 36);
  v152 = v53;
  v55 = (uint64_t)&v53[v54];
  v56 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  v128 = a1;
  v133 = v56;
  v56((char *)v55, (char *)a1, v22);
  v165 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  v165((char *)v55, 0, 1, v22);
  v157 = *MEMORY[0x24BDCEF70];
  v169 = MEMORY[0x24BEE4AF8];
  v163 = v4;
  v57 = (uint64_t)v27;
  v58 = v55;
  v161 = v6;
  v154 = v37;
  v167 = v55;
  v134 = v24;
  v158 = v57;
  while (1)
  {
    v60 = (uint64_t)v166;
    v165(v166, 1, 1, v22);
    v61 = (uint64_t)&v37[*(int *)(v153 + 48)];
    sub_23DBB2B6C(v58, (uint64_t)v37, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    sub_23DBB2B6C(v60, v61, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    if (v62((uint64_t)v37, 1, v22) == 1)
    {
      if (v62(v61, 1, v22) == 1)
      {
        sub_23DBB2BB0((uint64_t)v37, (uint64_t (*)(_QWORD))sub_23DBE9F50);
        sub_23DBB2BB0((uint64_t)v166, (uint64_t (*)(_QWORD))sub_23DBE9F50);
LABEL_30:
        v165(v164, 1, 1, v22);
        sub_23DBB2BB0((uint64_t)v152, (uint64_t (*)(_QWORD))sub_23DC10228);
        v127 = v129;
        sub_23DC10AF4(v128, v129, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
        result = type metadata accessor for TrainingLoadSampleDaySummaryCollection();
        *(_QWORD *)(v127 + *(int *)(result + 20)) = v169;
        return result;
      }
      goto LABEL_9;
    }
    v63 = v130;
    sub_23DBB2B6C((uint64_t)v37, v130, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    if (v62(v61, 1, v22) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v63, v22);
LABEL_9:
      sub_23DBB2BB0((uint64_t)v37, (uint64_t (*)(_QWORD))sub_23DBE9EF0);
      sub_23DBB2BB0((uint64_t)v166, (uint64_t (*)(_QWORD))sub_23DBE9F50);
      goto LABEL_11;
    }
    v64 = v63;
    v65 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 32);
    v66 = v155;
    v65(v155, v64, v22);
    v67 = v156;
    v65(v156, v61, v22);
    sub_23DBB2CB0(&qword_256CE9818, v23, MEMORY[0x24BDD24B0]);
    v68 = sub_23DC2A1F0();
    v69 = *(void (**)(char *, uint64_t))(v24 + 8);
    v70 = v67;
    v58 = v167;
    v69(v70, v22);
    v69(v66, v22);
    sub_23DBB2BB0((uint64_t)v154, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    sub_23DBB2BB0((uint64_t)v166, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    if ((v68 & 1) != 0)
      goto LABEL_30;
LABEL_11:
    v71 = v151;
    sub_23DBB2B6C(v58, v151, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v62)(v71, 1, v22);
    if ((_DWORD)result == 1)
      goto LABEL_33;
    v73 = v58;
    v74 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 32);
    v75 = v150;
    v74(v150, v71, v22);
    v74(v164, (uint64_t)v75, v22);
    v76 = v149;
    sub_23DBB2B6C(v73, v149, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v62)(v76, 1, v22);
    v77 = (uint64_t)v148;
    if ((_DWORD)result == 1)
      goto LABEL_34;
    v78 = v147;
    v74(v147, v76, v22);
    sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    sub_23DBB2CB0(&qword_256CE9818, v23, MEMORY[0x24BDD24B0]);
    v79 = sub_23DC2A1F0();
    v80 = v156;
    if ((v79 & 1) != 0)
    {
      v168 = *(void (**)(char *, uint64_t))(v24 + 8);
      v168(v78, v22);
      v81 = 1;
    }
    else
    {
      v170 = 1;
      sub_23DBB2CB0(&qword_256CE9748, v23, MEMORY[0x24BDD24C0]);
      sub_23DC2A4E4();
      v168 = *(void (**)(char *, uint64_t))(v24 + 8);
      v168(v78, v22);
      v81 = 0;
    }
    v82 = v165;
    v165((char *)v77, v81, 1, v22);
    v83 = v167;
    sub_23DBB2BB0(v167, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    sub_23DBBCEB0(v77, v83, (uint64_t (*)(_QWORD))sub_23DBE9F50);
    v84 = v164;
    v82(v164, 0, 1, v22);
    v85 = ((uint64_t (*)(uint64_t, char *, uint64_t))v74)(v57, v84, v22);
    result = sub_23DC10330(v85, 200.0, 250.0);
    *(double *)&v87 = v86;
    v88 = v86 * 0.5;
    if (v88 > *(double *)&v87 * 1.5)
      break;
    sub_23DC10330(result, v88, *(double *)&v87 * 1.5);
    v90 = v89;
    v91 = v155;
    sub_23DC2A130();
    sub_23DC2A130();
    v92 = v23;
    v93 = v91;
    sub_23DBB2CB0((unint64_t *)&qword_25431FAC8, v92, MEMORY[0x24BDD24A8]);
    result = sub_23DC2A1C0();
    if ((result & 1) == 0)
      goto LABEL_32;
    v94 = v139;
    v95 = v159;
    v96 = v137;
    v97 = &v137[*(int *)(v139 + 48)];
    v74(v137, (uint64_t)v93, v22);
    v74(v97, (uint64_t)v80, v22);
    v98 = v138;
    v99 = &v138[*(int *)(v94 + 48)];
    v100 = v133;
    v133(v138, v96, v22);
    v100(v99, v97, v22);
    v101 = (uint64_t)v135;
    v74(v135, (uint64_t)v98, v22);
    v102 = v168;
    v168(v99, v22);
    v103 = &v98[*(int *)(v94 + 48)];
    v74(v98, (uint64_t)v96, v22);
    v74(v103, (uint64_t)v97, v22);
    v74((char *)(v101 + *(int *)(v136 + 36)), (uint64_t)v103, v22);
    v102(v98, v22);
    sub_23DBE6A70(v101, v95, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v104 = (void *)objc_opt_self();
    v105 = objc_msgSend(v104, sel_kilocalorieUnit);
    v106 = v145;
    v107 = *(void (**)(char *, _QWORD, uint64_t))(v145 + 104);
    v108 = v162;
    v109 = v163;
    v107(v162, v157, v163);
    v110 = v160;
    sub_23DC29F08();
    v111 = *(void (**)(char *, uint64_t))(v106 + 8);
    v111(v108, v109);
    if ((v146 & 1) != 0)
    {
      static TrainingLoadSampleDaySummary.fake(on:unit:analyzedBaselineRange:hasData:acuteBaseline:chronicBaseline:calendar:activityType:)(v158, (uint64_t)v105, v95, 1, v87, 0, 13, v140, v90, 0);

      v131 = *(void (**)(char *, uint64_t))(v144 + 8);
      v131(v110, v161);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v169 = sub_23DBDF26C(0, *(_QWORD *)(v169 + 16) + 1, 1, v169);
      v113 = *(_QWORD *)(v169 + 16);
      v112 = *(_QWORD *)(v169 + 24);
      v132 = v87;
      if (v113 >= v112 >> 1)
        v169 = sub_23DBDF26C(v112 > 1, v113 + 1, 1, v169);
      v114 = v169;
      *(_QWORD *)(v169 + 16) = v113 + 1;
      v115 = (*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
      v116 = *(_QWORD *)(v143 + 72);
      sub_23DBBCEB0((uint64_t)v140, v114 + v115 + v116 * v113, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSampleDaySummary);
      v117 = objc_msgSend(v104, sel_kilocalorieUnit);
      v119 = v162;
      v118 = v163;
      v107(v162, v157, v163);
      v120 = v160;
      sub_23DC29F08();
      v111(v119, v118);
      v57 = v158;
      v121 = v159;
      static TrainingLoadSampleDaySummary.fake(on:unit:analyzedBaselineRange:hasData:acuteBaseline:chronicBaseline:calendar:activityType:)(v158, (uint64_t)v117, v159, 1, v132, 0, 37, v141, v90, 0);

      v131(v120, v161);
      v123 = *(_QWORD *)(v114 + 16);
      v122 = *(_QWORD *)(v114 + 24);
      if (v123 >= v122 >> 1)
        v169 = sub_23DBDF26C(v122 > 1, v123 + 1, 1, v169);
      v23 = (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488];
      v37 = v154;
      v124 = v169;
      *(_QWORD *)(v169 + 16) = v123 + 1;
      sub_23DBBCEB0((uint64_t)v141, v124 + v115 + v123 * v116, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSampleDaySummary);
      v24 = v134;
      v58 = v167;
    }
    else
    {
      v57 = v158;
      static TrainingLoadSampleDaySummary.fake(on:unit:analyzedBaselineRange:hasData:acuteBaseline:chronicBaseline:calendar:activityType:)(v158, (uint64_t)v105, v95, 1, v87, 0, 0, v142, v90, 1u);

      (*(void (**)(char *, uint64_t))(v144 + 8))(v110, v161);
      v121 = v95;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v169 = sub_23DBDF26C(0, *(_QWORD *)(v169 + 16) + 1, 1, v169);
      v23 = (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488];
      v24 = v134;
      v37 = v154;
      v58 = v167;
      v126 = *(_QWORD *)(v169 + 16);
      v125 = *(_QWORD *)(v169 + 24);
      if (v126 >= v125 >> 1)
        v169 = sub_23DBDF26C(v125 > 1, v126 + 1, 1, v169);
      v59 = v169;
      *(_QWORD *)(v169 + 16) = v126 + 1;
      sub_23DBBCEB0((uint64_t)v142, v59+ ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80))+ *(_QWORD *)(v143 + 72) * v126, (uint64_t (*)(_QWORD))type metadata accessor for TrainingLoadSampleDaySummary);
    }
    sub_23DBE6B70(v121, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v168((char *)v57, v22);
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

void sub_23DC10228()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE9EF0)
  {
    sub_23DBE69A0(255, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    sub_23DC10298();
    v0 = sub_23DC2A67C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE9EF0);
  }
}

unint64_t sub_23DC10298()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256CE9EF8;
  if (!qword_256CE9EF8)
  {
    sub_23DBE69A0(255, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v2 = v1;
    v3[0] = sub_23DBB2CB0(&qword_256CE9748, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
    v3[1] = sub_23DBE89C8();
    result = MEMORY[0x24263E440](MEMORY[0x24BEE0910], v2, v3);
    atomic_store(result, (unint64_t *)&qword_256CE9EF8);
  }
  return result;
}

uint64_t sub_23DC10330(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = MEMORY[0x24263E4F4](&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return sub_23DC10330(v6, a2, a3);
  return result;
}

uint64_t _s13HealthBalance38TrainingLoadSampleDaySummaryCollectionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t SampleDaySummaryCollection;
  char v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;

  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8];
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9818, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B0]);
  v11 = sub_23DC2A1F0();
  sub_23DC10AF4(a1, (uint64_t)v10, (unint64_t *)&qword_25431FB40, v4);
  sub_23DC10AF4(a2, (uint64_t)v8, (unint64_t *)&qword_25431FB40, v4);
  if ((v11 & 1) == 0)
  {
    v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8];
    sub_23DBE6B70((uint64_t)v8, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    sub_23DBE6B70((uint64_t)v10, (unint64_t *)&qword_25431FB40, v16);
    goto LABEL_5;
  }
  v12 = sub_23DC2A1F0();
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8];
  sub_23DBE6B70((uint64_t)v8, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  sub_23DBE6B70((uint64_t)v10, (unint64_t *)&qword_25431FB40, v13);
  if ((v12 & 1) == 0)
  {
LABEL_5:
    v15 = 0;
    return v15 & 1;
  }
  SampleDaySummaryCollection = type metadata accessor for TrainingLoadSampleDaySummaryCollection();
  v15 = sub_23DC0EA08(*(_QWORD *)(a1 + *(int *)(SampleDaySummaryCollection + 20)), *(_QWORD *)(a2 + *(int *)(SampleDaySummaryCollection + 20)));
  return v15 & 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for TrainingLoadSampleDaySummaryCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23DC2A154();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v8((uint64_t *)((char *)a1 + *(int *)(v9 + 36)), (uint64_t *)((char *)a2 + *(int *)(v9 + 36)), v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TrainingLoadSampleDaySummaryCollection(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v2 = sub_23DC2A154();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(a1, v2);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v3(a1 + *(int *)(v4 + 36), v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TrainingLoadSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrainingLoadSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TrainingLoadSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for TrainingLoadSampleDaySummaryCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7(a1 + *(int *)(v8 + 36), a2 + *(int *)(v8 + 36), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrainingLoadSampleDaySummaryCollection()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DC10950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TrainingLoadSampleDaySummaryCollection()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_23DC109E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
}

void sub_23DC10A70()
{
  unint64_t v0;

  sub_23DBE69A0(319, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_23DC10AF4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  sub_23DBE69A0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

unint64_t sub_23DC10B40()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_256CE9A38;
  if (!qword_256CE9A38)
  {
    sub_23DBC6894(255);
    v2 = v1;
    v3 = sub_23DBB2CB0(&qword_256CE9608, (uint64_t (*)(uint64_t))sub_23DBC68B0, MEMORY[0x24BEE5BE0]);
    result = MEMORY[0x24263E440](MEMORY[0x24BDD2070], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_256CE9A38);
  }
  return result;
}

BOOL SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.getter()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v7;
  void *v8;
  id v9[2];

  v9[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(id *)(v0 + 16);
  v2 = (void *)sub_23DC2A220();
  v9[0] = 0;
  v3 = objc_msgSend(v1, sel_hk_safeNumberIfExistsForKeyPath_error_, v2, v9);

  if (v3)
  {
    v4 = v9[0];
    v5 = objc_msgSend(v3, sel_integerValue);

    return (uint64_t)v5 > 0;
  }
  else
  {
    v7 = v9[0];
    v8 = (void *)sub_23DC29D04();

    swift_willThrow();
    return 0;
  }
}

id SleepingSampleChangeNotificationSettingsProvider.defaults.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.__allocating_init()()
{
  id v0;
  void *v1;
  id v2;
  uint64_t result;

  sub_23DC2A244();
  v0 = objc_allocWithZone(MEMORY[0x24BDBCF50]);
  v1 = (void *)sub_23DC2A220();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
  {
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v2;
  }
  else
  {
    sub_23DC2A5A4();
    sub_23DC2A2A4();
    sub_23DC2A244();
    sub_23DC2A2A4();
    swift_bridgeObjectRelease();
    sub_23DC2A2A4();
    result = sub_23DC2A694("Fatal error", 11, 2, 0, 0xE000000000000000, "HealthBalance/SleepingSampleChangeNotificationSettingsProvider.swift", 68, 2, 41, 0);
    __break(1u);
  }
  return result;
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.__allocating_init(defaults:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.init(defaults:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)(v0 + 16);
  sub_23DC2A244();
  v2 = v1;
  v3 = (void *)sub_23DC2A220();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v4 = objc_msgSend(v2, sel_hk_safeNumberIfExistsForKeyPath_error_, v3, v10);

  if (v4)
  {
    v5 = v10[0];
    v6 = objc_msgSend(v4, sel_BOOLValue);

  }
  else
  {
    v7 = v10[0];
    v8 = (void *)sub_23DC29D04();

    swift_willThrow();
    return 2;
  }
  return (uint64_t)v6;
}

void SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.setter(unsigned __int8 a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  int v19;
  id v20;
  double v21;
  double v22;
  void *v23;
  id v24;
  double v25;
  double v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31[9];

  v2 = a1;
  v30 = sub_23DC29E48();
  v3 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v5 = (char *)&v31[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD482C(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v31[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)(v1 + 16);
  v10 = v9;
  if (v2 == 2)
    v11 = 0;
  else
    v11 = sub_23DC2A3AC();
  sub_23DC2A244();
  v12 = (void *)sub_23DC2A220();
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setObject_forKey_, v11, v12);

  swift_unknownObjectRelease();
  sub_23DC1130C();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23DC2B900;
  *(_QWORD *)(inited + 32) = sub_23DC2A244();
  *(_QWORD *)(inited + 40) = v14;
  v15 = sub_23DC1333C(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  v31[8] = v15;
  if (v2 == 2)
  {
    v16 = v9;
    v17 = (void *)sub_23DC2A220();
    objc_msgSend(v16, sel_setURL_forKey_, 0, v17);

    sub_23DC11D68(v31, 0xD00000000000002DLL, 0x800000023DC33320);
    swift_bridgeObjectRelease();
    v18 = v30;
  }
  else
  {
    SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsFirstUpdated.getter((uint64_t)v8);
    v18 = v30;
    v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v30);
    sub_23DBFB390((uint64_t)v8);
    if (v19 == 1)
    {
      v20 = v9;
      sub_23DC29E30();
      sub_23DC29DAC();
      v22 = v21;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v18);
      v23 = (void *)sub_23DC2A220();
      objc_msgSend(v20, sel_setDouble_forKey_, v23, v22);

      sub_23DC11D68(v31, 0xD00000000000002DLL, 0x800000023DC33320);
      swift_bridgeObjectRelease();
    }
  }
  v24 = v9;
  sub_23DC29E30();
  sub_23DC29DAC();
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v18);
  v27 = (void *)sub_23DC2A220();
  objc_msgSend(v24, sel_setDouble_forKey_, v27, v26);

  v28 = (id)*MEMORY[0x24BDD45F0];
  v29 = (void *)sub_23DC2A3F4();
  swift_bridgeObjectRelease();
  HKSynchronizeNanoPreferencesUserDefaults();

}

void sub_23DC1130C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CE9D80)
  {
    v0 = sub_23DC2A7E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CE9D80);
  }
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsFirstUpdated.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23DC1175C(a1);
}

void (*SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.getter();
  return sub_23DC113F0;
}

void sub_23DC113F0(uint64_t a1)
{
  SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.setter(*(_BYTE *)(a1 + 8));
}

id SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.getter()
{
  uint64_t v0;
  id v1;
  void *v2;
  unsigned int v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (!v1)
    __break(1u);
  v2 = v1;
  v3 = objc_msgSend(v1, sel_isAppleInternalInstall);

  if (!v3)
    return 0;
  v4 = *(id *)(v0 + 16);
  v5 = (void *)sub_23DC2A220();
  v12[0] = 0;
  v6 = objc_msgSend(v4, sel_hk_safeNumberIfExistsForKeyPath_error_, v5, v12);

  if (!v6)
  {
    v9 = v12[0];
    v10 = (void *)sub_23DC29D04();

    swift_willThrow();
    return 0;
  }
  v7 = v12[0];
  v8 = objc_msgSend(v6, sel_integerValue);

  return v8;
}

void SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  v4 = *(id *)(v2 + 16);
  if ((a2 & 1) != 0)
    v5 = 0;
  else
    v5 = sub_23DC2A40C();
  v6 = (void *)sub_23DC2A220();
  objc_msgSend(v4, sel_setObject_forKey_, v5, v6);

  swift_unknownObjectRelease();
  v7 = (id)*MEMORY[0x24BDD45F0];
  sub_23DC1333C((uint64_t)&unk_250E888E8);
  swift_arrayDestroy();
  v8 = (id)sub_23DC2A3F4();
  swift_bridgeObjectRelease();
  HKSynchronizeNanoPreferencesUserDefaults();

}

void (*SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return sub_23DC116B4;
}

void sub_23DC116B4(uint64_t a1)
{
  SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCount.getter()
{
  uint64_t result;
  char v1;

  result = (uint64_t)SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.getter();
  if ((v1 & 1) != 0)
    return 2;
  return result;
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsLastUpdatedLocally.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23DC1175C(a1);
}

uint64_t sub_23DC1175C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  id v9;
  void *v10;
  uint64_t v11;
  id v12[2];

  v12[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = *(id *)(v1 + 16);
  v4 = (void *)sub_23DC2A220();
  v12[0] = 0;
  v5 = objc_msgSend(v3, sel_hk_safeNumberIfExistsForKeyPath_error_, v4, v12);

  if (v5)
  {
    v6 = v12[0];
    objc_msgSend(v5, sel_doubleValue);
    sub_23DC29DA0();

    v7 = sub_23DC29E48();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 0, 1, v7);
  }
  else
  {
    v9 = v12[0];
    v10 = (void *)sub_23DC29D04();

    swift_willThrow();
    v11 = sub_23DC29E48();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
}

void SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.setter(char a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;

  v2 = *(void **)(v1 + 16);
  if ((a1 & 1) != 0)
  {
    v3 = v2;
    v4 = sub_23DC2A82C();
  }
  else
  {
    v5 = v2;
    v4 = 0;
  }
  v6 = (void *)sub_23DC2A220();
  objc_msgSend(v2, sel_setObject_forKey_, v4, v6);

  swift_unknownObjectRelease();
  v7 = (id)*MEMORY[0x24BDD45F0];
  sub_23DC1333C((uint64_t)&unk_250E88918);
  swift_arrayDestroy();
  v8 = (void *)sub_23DC2A3F4();
  swift_bridgeObjectRelease();
  HKSynchronizeNanoPreferencesUserDefaults();

}

void (*SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.getter();
  return sub_23DC119F4;
}

void sub_23DC119F4(uint64_t a1)
{
  SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.setter(*(_BYTE *)(a1 + 8));
}

Swift::Void __swiftcall SleepingSampleChangeNotificationSettingsProvider.resetAll()()
{
  SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.setter(0, 1);
  SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.setter(2u);
  SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.setter(0);
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

unint64_t SleepingSampleChangeNotificationSettingsProvider.ObservableKey.keyPath.getter()
{
  return 0xD000000000000018;
}

uint64_t static SleepingSampleChangeNotificationSettingsProvider.ObservableKey.== infix(_:_:)()
{
  return 1;
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.ObservableKey.hash(into:)()
{
  return sub_23DC2A88C();
}

uint64_t SleepingSampleChangeNotificationSettingsProvider.ObservableKey.hashValue.getter()
{
  sub_23DC2A880();
  sub_23DC2A88C();
  return sub_23DC2A8B0();
}

void SleepingSampleChangeNotificationSettingsProvider.registerObserver(_:for:)(uint64_t a1)
{
  uint64_t v1;
  id v3;
  id v4;

  v3 = *(id *)(v1 + 16);
  v4 = (id)sub_23DC2A220();
  objc_msgSend(v3, sel_addObserver_forKeyPath_options_context_, a1, v4, 0, 0);

}

void SleepingSampleChangeNotificationSettingsProvider.unregisterObserver(_:for:)(uint64_t a1)
{
  uint64_t v1;
  id v3;
  id v4;

  v3 = *(id *)(v1 + 16);
  v4 = (id)sub_23DC2A220();
  objc_msgSend(v3, sel_removeObserver_forKeyPath_, a1, v4);

}

uint64_t sub_23DC11BF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  __int128 v13;
  uint64_t v15;
  _BYTE v16[40];

  v3 = v2;
  v6 = *v2;
  swift_bridgeObjectRetain();
  v7 = sub_23DC2A550();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (1)
    {
      sub_23DBDFC2C(*(_QWORD *)(v6 + 48) + 40 * v9, (uint64_t)v16);
      v11 = MEMORY[0x24263DBC4](v16, a2);
      sub_23DBB8914((uint64_t)v16);
      if ((v11 & 1) != 0)
        break;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    sub_23DBB8914(a2);
    sub_23DBDFC2C(*(_QWORD *)(*v3 + 48) + 40 * v9, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_23DBDFC2C(a2, (uint64_t)v16);
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_23DC124E0((uint64_t)v16, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v15;
    swift_bridgeObjectRelease();
    v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_23DC11D68(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_23DC2A880();
  swift_bridgeObjectRetain();
  sub_23DC2A28C();
  v8 = sub_23DC2A8B0();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_23DC2A7FC() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_23DC2A7FC() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_23DC12648(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_23DC11F14()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v1 = v0;
  v2 = *v0;
  sub_23DC137C4(0, &qword_256CEA7F0);
  v3 = sub_23DC2A580();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9)
          goto LABEL_33;
        v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v9)
            goto LABEL_33;
          v18 = v6[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v9)
              goto LABEL_33;
            v18 = v6[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v28 = 1 << *(_BYTE *)(v2 + 32);
                if (v28 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v28;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v18 = v6[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_23;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_23:
        v8 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = *(_QWORD *)(v2 + 48) + 40 * v16;
      v29 = *(_OWORD *)v20;
      v30 = *(_OWORD *)(v20 + 16);
      v31 = *(_QWORD *)(v20 + 32);
      result = sub_23DC2A550();
      v21 = -1 << *(_BYTE *)(v4 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v4 + 48) + 40 * v13;
      *(_OWORD *)v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      *(_QWORD *)(v14 + 32) = v31;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23DC121F0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  sub_23DC137C4(0, &qword_256CEA7E8);
  v3 = sub_23DC2A580();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      sub_23DC2A880();
      sub_23DC2A28C();
      result = sub_23DC2A8B0();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_23DC124E0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _BYTE v19[40];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_23DC11F14();
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_23DC127E0();
      goto LABEL_12;
    }
    sub_23DC12B84();
  }
  v9 = *v3;
  result = sub_23DC2A550();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = ~v10;
    do
    {
      sub_23DBDFC2C(*(_QWORD *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      v12 = MEMORY[0x24263DBC4](v19, v6);
      result = sub_23DBB8914((uint64_t)v19);
      if ((v12 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v11;
    }
    while (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v13 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v14 = *(_QWORD *)(v13 + 48) + 40 * a2;
  v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v6 + 32);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (!v17)
  {
    *(_QWORD *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_23DC2A838();
  __break(1u);
  return result;
}

uint64_t sub_23DC12648(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    sub_23DC121F0();
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_23DC129C0();
      goto LABEL_22;
    }
    sub_23DC12E28();
  }
  v11 = *v4;
  sub_23DC2A880();
  sub_23DC2A28C();
  result = sub_23DC2A8B0();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = sub_23DC2A7FC(), (result & 1) != 0))
    {
LABEL_21:
      result = sub_23DC2A838();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = sub_23DC2A7FC();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (uint64_t *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *sub_23DC127E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  sub_23DC137C4(0, &qword_256CEA7F0);
  v2 = *v0;
  v3 = sub_23DC2A574();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    result = (void *)sub_23DBDFC2C(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_23DC129C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_23DC137C4(0, &qword_256CEA7E8);
  v2 = *v0;
  v3 = sub_23DC2A574();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23DC12B84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;

  v1 = v0;
  v2 = *v0;
  sub_23DC137C4(0, &qword_256CEA7F0);
  v3 = sub_23DC2A580();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9)
      goto LABEL_33;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      v12 = v19 + 1;
      if (v19 + 1 >= v9)
        goto LABEL_33;
      v20 = *(_QWORD *)(v6 + 8 * v12);
      if (!v20)
      {
        v12 = v19 + 2;
        if (v19 + 2 >= v9)
          goto LABEL_33;
        v20 = *(_QWORD *)(v6 + 8 * v12);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v8 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    sub_23DBDFC2C(*(_QWORD *)(v2 + 48) + 40 * v18, (uint64_t)v29);
    result = sub_23DC2A550();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v4 + 48) + 40 * v13;
    v15 = v29[0];
    v16 = v29[1];
    *(_QWORD *)(v14 + 32) = v30;
    *(_OWORD *)v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    ++*(_QWORD *)(v4 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v20 = *(_QWORD *)(v6 + 8 * v12);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23DC12E28()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  sub_23DC137C4(0, &qword_256CEA7E8);
  v3 = sub_23DC2A580();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    sub_23DC2A880();
    swift_bridgeObjectRetain();
    sub_23DC2A28C();
    result = sub_23DC2A8B0();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_23DC130E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_23DC2A91C();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_23DC13714();
    v10 = sub_23DC2A58C();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_23DC13784(&qword_256CEA7D8, MEMORY[0x24BDD0A60]);
      v14 = sub_23DC2A184();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_23DC13784(&qword_256CEA7E0, MEMORY[0x24BDD0A68]);
          v20 = sub_23DC2A1F0();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B08];
  }
  return result;
}

uint64_t sub_23DC1333C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_23DC137C4(0, &qword_256CEA7E8);
    v3 = sub_23DC2A58C();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_23DC2A880();
      swift_bridgeObjectRetain();
      sub_23DC2A28C();
      result = sub_23DC2A8B0();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_23DC2A7FC(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_23DC2A7FC();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

unint64_t sub_23DC134F4()
{
  unint64_t result;

  result = qword_256CEA7C8;
  if (!qword_256CEA7C8)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleChangeNotificationSettingsProvider.ObservableKey, &type metadata for SleepingSampleChangeNotificationSettingsProvider.ObservableKey);
    atomic_store(result, (unint64_t *)&qword_256CEA7C8);
  }
  return result;
}

uint64_t sub_23DC13538@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.getter();
  *a1 = result;
  return result;
}

void sub_23DC13560(unsigned __int8 *a1)
{
  SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.setter(*a1);
}

id sub_23DC13584@<X0>(uint64_t a1@<X8>)
{
  id result;
  char v3;

  result = SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

void sub_23DC135B4(uint64_t a1)
{
  SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

BOOL sub_23DC135E4@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.getter();
  *a1 = result;
  return result;
}

void sub_23DC13610(char *a1)
{
  SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.setter(*a1);
}

uint64_t type metadata accessor for SleepingSampleChangeNotificationSettingsProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for SleepingSampleChangeNotificationSettingsProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepingSampleChangeNotificationSettingsProvider.__allocating_init(defaults:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t storeEnumTagSinglePayload for SleepingSampleChangeNotificationSettingsProvider.ObservableKey(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DC136A8 + 4 * asc_23DC30E20[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DC136C8 + 4 * byte_23DC30E25[v4]))();
}

_BYTE *sub_23DC136A8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DC136C8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DC136D0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DC136D8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DC136E0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DC136E8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotificationSettingsProvider.ObservableKey()
{
  return &type metadata for SleepingSampleChangeNotificationSettingsProvider.ObservableKey;
}

ValueMetadata *type metadata accessor for SleepingSampleChangeNotificationSettingsProvider.UncheckedSendableUserDefaults()
{
  return &type metadata for SleepingSampleChangeNotificationSettingsProvider.UncheckedSendableUserDefaults;
}

void sub_23DC13714()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CEA7D0)
  {
    sub_23DC2A91C();
    sub_23DC13784(&qword_256CEA7D8, MEMORY[0x24BDD0A60]);
    v0 = sub_23DC2A598();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CEA7D0);
  }
}

uint64_t sub_23DC13784(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_23DC2A91C();
    result = MEMORY[0x24263E440](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_23DC137C4(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_23DC2A598();
    if (!v4)
      atomic_store(v3, a2);
  }
}

id HKTableFormatter.init(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v2 = type metadata accessor for SleepingSampleDaySummary();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v7 = (void *)sub_23DC2A340();
  v8 = objc_msgSend(v6, sel_initWithColumnTitles_, v7);

  v9 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for SleepingSampleDaySummaryCollection() + 20));
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    type metadata accessor for GregorianDayRange();
    v11 = v9 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v12 = *(_QWORD *)(v3 + 72);
    v13 = v8;
    swift_bridgeObjectRetain();
    do
    {
      sub_23DBB2B6C(v11, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
      sub_23DC13978((uint64_t)v5);
      sub_23DBB2BB0((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
      v11 += v12;
      --v10;
    }
    while (v10);

  }
  else
  {
    swift_bridgeObjectRetain();
  }
  sub_23DBB2BB0(a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummaryCollection);
  swift_bridgeObjectRelease();
  return v8;
}

void sub_23DC13978(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  id v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  int v58;
  __objc2_meth *v59;
  char *v60;
  char *v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  _QWORD *v72;
  objc_class *v73;
  HKUnit v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  char *v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  void *object;
  uint64_t countAndFlagsBits;
  id v95;
  void *v96;
  id v97;
  Swift::String v98;
  _QWORD *v99;
  objc_class *v100;
  HKUnit v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char *v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  char *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void *v120;
  id v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  void (*v128)(char *, uint64_t);
  _QWORD *v129;
  objc_class *v130;
  HKUnit v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t);
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  void *v153;
  id v154;
  id v155;
  id v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  objc_class *v162;
  HKUnit v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  void (*v173)(char *, uint64_t);
  char *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  void *v186;
  id v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  objc_class *v192;
  HKUnit v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char v198;
  char *v199;
  char *v200;
  void (*v201)(char *, uint64_t);
  char *v202;
  char *v203;
  unint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  void *v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  id v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  char *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;

  v217 = sub_23DC2A940();
  v216 = *(_QWORD *)(v217 - 8);
  MEMORY[0x24BDAC7A8](v217);
  v215 = (uint64_t)&v208 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2914(0, &qword_256CE9500, &qword_256CE9508, 0x24BDD1950, MEMORY[0x24BDCB508]);
  v214 = v3;
  v213 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v212 = (uint64_t)&v208 - v4;
  sub_23DBB2914(0, &qword_256CE9510, &qword_256CE9508, 0x24BDD1950, MEMORY[0x24BDCB588]);
  v211 = v5;
  v210 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v209 = (char *)&v208 - v6;
  v7 = sub_23DC29D4C();
  v230 = *(_QWORD *)(v7 - 8);
  v231 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v229 = (char *)&v208 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = sub_23DC29D88();
  v242 = *(_QWORD *)(v232 - 8);
  MEMORY[0x24BDAC7A8](v232);
  v244 = (char *)&v208 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2A64(0, &qword_256CE9518, (uint64_t (*)(void))sub_23DBB2974, MEMORY[0x24BEE13C8], MEMORY[0x24BDCD4A8]);
  v243 = v10;
  v241 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v228 = (char *)&v208 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v234 = (char *)&v208 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v235 = (char *)&v208 - v15;
  sub_23DBB29B8();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v225 = (char *)&v208 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v224 = (char *)&v208 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v223 = (char *)&v208 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v222 = (char *)&v208 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v233 = (char *)&v208 - v25;
  v240 = sub_23DC29D64();
  v238 = *(_QWORD *)(v240 - 8);
  MEMORY[0x24BDAC7A8](v240);
  v237 = (char *)&v208 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v27);
  v239 = (char *)&v208 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB2A64(0, (unint64_t *)&qword_256CE9528, (uint64_t (*)(void))sub_23DBB2AC0, MEMORY[0x24BEE1768], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BDCC908]);
  v227 = v29;
  v236 = *(_QWORD *)(v29 - 8);
  v30 = MEMORY[0x24BDAC7A8](v29);
  v220 = (char *)&v208 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v221 = (char *)&v208 - v32;
  v245 = (_QWORD *)sub_23DC29DD0();
  v219 = *(v245 - 1);
  MEMORY[0x24BDAC7A8](v245);
  v34 = (char *)&v208 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = sub_23DC29E48();
  v35 = *(_QWORD *)(v218 - 8);
  MEMORY[0x24BDAC7A8](v218);
  v37 = (char *)&v208 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_23DC29DF4();
  v39 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v208 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC1130C();
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_23DC30F20;
  sub_23DC29DC4();
  sub_23DC2A148();
  sub_23DC29DB8();
  v43 = sub_23DC29E3C();
  v45 = v44;
  (*(void (**)(char *, _QWORD *))(v219 + 8))(v34, v245);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v218);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
  *(_QWORD *)(v42 + 32) = v43;
  *(_QWORD *)(v42 + 40) = v45;
  v245 = (_QWORD *)v42;
  v46 = a1;
  v247 = sub_23DC2A124();
  sub_23DC29ED8();
  sub_23DBB2AC0();
  v47 = v220;
  sub_23DC29CD4();
  v48 = v237;
  sub_23DC29D58();
  v49 = v221;
  v50 = v227;
  MEMORY[0x24263D348](v48, v227);
  (*(void (**)(char *, uint64_t))(v238 + 8))(v48, v240);
  v51 = *(void (**)(char *, uint64_t))(v236 + 8);
  v51(v47, v50);
  sub_23DBB2B04();
  sub_23DC2A514();
  v52 = v233;
  v51(v49, v50);
  v238 = type metadata accessor for SleepingSampleDaySummary();
  v53 = *(int *)(v238 + 32);
  v240 = v46;
  v54 = v46 + v53;
  v237 = (char *)type metadata accessor for SleepingSampleAggregate();
  sub_23DBB2B6C(v54 + *((int *)v237 + 6), (uint64_t)v52, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  sub_23DBB2914(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8, 0x24BDD3E50, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDD2048]);
  v56 = v55;
  v57 = *((_QWORD *)v55 - 1);
  v236 = *(_QWORD *)(v57 + 48);
  v58 = ((uint64_t (*)(id, uint64_t, char *))v236)(v52, 1, v55);
  v59 = &stru_250E8D000;
  v61 = v234;
  v60 = v235;
  v62 = v244;
  v227 = v57;
  v221 = v56;
  if (v58 == 1)
  {
    sub_23DBB2BB0((uint64_t)v52, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    v63 = 0xA600000000000000;
    v64 = 0x9380E29380E2;
  }
  else
  {
    v65 = (void *)sub_23DC2A040();
    (*(void (**)(id, char *))(v57 + 8))(v52, v56);
    v66 = objc_msgSend((id)objc_opt_self(), sel__countPerMinuteUnit);
    objc_msgSend(v65, sel_doubleValueForUnit_, v66);
    v246 = v67;
    sub_23DC29ED8();
    sub_23DBB2974();
    sub_23DC29D1C();
    v68 = v62;
    sub_23DC29D70();
    v69 = v60;
    v70 = v243;
    MEMORY[0x24263D390](v68, v243);
    (*(void (**)(char *, uint64_t))(v242 + 8))(v68, v232);
    v71 = *(void (**)(char *, uint64_t))(v241 + 8);
    v71(v61, v70);
    sub_23DBB2CF0();
    sub_23DC2A160();
    v71(v69, v70);

    v59 = &stru_250E8D000;
    v64 = v247;
    v63 = v248;
  }
  v72 = v245;
  v245[8] = v64;
  v72[9] = v63;
  LOBYTE(v247) = 0;
  v233 = (char *)objc_opt_self();
  v73 = (objc_class *)objc_msgSend(v233, (SEL)v59[127].imp);
  v74.super.isa = v73;
  v75 = sub_23DC14ED4((char *)&v247, v74);
  v77 = v76;

  v72[10] = v75;
  v72[11] = v77;
  v78 = SleepingSampleBaselineComparison.relativeComparison.getter();
  v79 = v231;
  if ((v80 & 1) != 0)
  {
    v88 = 0xA600000000000000;
    v89 = 0x9380E29380E2;
    v83 = v234;
    v87 = v235;
  }
  else
  {
    v246 = v78;
    sub_23DC29ED8();
    sub_23DBB2974();
    v81 = v228;
    sub_23DC29D1C();
    v82 = v244;
    sub_23DC29D70();
    v83 = v234;
    v84 = v243;
    MEMORY[0x24263D390](v82, v243);
    (*(void (**)(char *, uint64_t))(v242 + 8))(v82, v232);
    v85 = *(void (**)(char *, uint64_t))(v241 + 8);
    v85(v81, v84);
    v86 = v229;
    sub_23DC29D40();
    v87 = v235;
    MEMORY[0x24263D378](v86, v84);
    (*(void (**)(char *, uint64_t))(v230 + 8))(v86, v79);
    v85(v83, v84);
    sub_23DBB2CF0();
    sub_23DC2A160();
    v85(v87, v84);
    v89 = v247;
    v88 = v248;
  }
  v90 = (uint64_t)v222;
  v91 = v221;
  v92 = v245;
  v245[12] = v89;
  v92[13] = v88;
  sub_23DBB2B6C(v240 + *(int *)(v238 + 36) + *((int *)v237 + 6), v90, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if (((unsigned int (*)(uint64_t, uint64_t, char *))v236)(v90, 1, v91) == 1)
  {
    sub_23DBB2BB0(v90, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    object = (void *)0xA600000000000000;
    countAndFlagsBits = 0x9380E29380E2;
    v95 = v233;
  }
  else
  {
    v96 = (void *)sub_23DC2A040();
    (*(void (**)(uint64_t, char *))(v227 + 8))(v90, v91);
    LOBYTE(v247) = 2;
    v95 = v233;
    v97 = objc_msgSend(v233, sel_percentUnit);
    v98 = HKQuantity.formattedValue(for:unit:)((HealthBalance::SleepingSampleDataType)&v247, (HKUnit)v97);
    countAndFlagsBits = v98._countAndFlagsBits;
    object = v98._object;

  }
  v99 = v245;
  v245[14] = countAndFlagsBits;
  v99[15] = object;
  LOBYTE(v247) = 2;
  v100 = (objc_class *)objc_msgSend(v95, sel_percentUnit);
  v101.super.isa = v100;
  v102 = sub_23DC14ED4((char *)&v247, v101);
  v104 = v103;

  v99[16] = v102;
  v99[17] = v104;
  v105 = SleepingSampleBaselineComparison.relativeComparison.getter();
  if ((v106 & 1) != 0)
  {
    v113 = 0xA600000000000000;
    v114 = 0x9380E29380E2;
  }
  else
  {
    v246 = v105;
    sub_23DC29ED8();
    sub_23DBB2974();
    v107 = v228;
    sub_23DC29D1C();
    v108 = v244;
    sub_23DC29D70();
    v109 = v243;
    MEMORY[0x24263D390](v108, v243);
    (*(void (**)(char *, uint64_t))(v242 + 8))(v108, v232);
    v110 = *(void (**)(char *, uint64_t))(v241 + 8);
    v110(v107, v109);
    v111 = v229;
    sub_23DC29D40();
    MEMORY[0x24263D378](v111, v109);
    (*(void (**)(char *, uint64_t))(v230 + 8))(v111, v231);
    v110(v83, v109);
    sub_23DBB2CF0();
    sub_23DC2A160();
    v112 = v109;
    v95 = v233;
    v110(v87, v112);
    v114 = v247;
    v113 = v248;
  }
  v115 = (uint64_t)v223;
  v116 = v245;
  v245[18] = v114;
  v116[19] = v113;
  sub_23DBB2B6C(v240 + *(int *)(v238 + 40) + *((int *)v237 + 6), v115, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if (((unsigned int (*)(uint64_t, uint64_t, char *))v236)(v115, 1, v91) == 1)
  {
    v117 = v232;
    sub_23DBB2BB0(v115, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    v118 = 0xA600000000000000;
    v119 = 0x9380E29380E2;
  }
  else
  {
    v120 = (void *)sub_23DC2A040();
    (*(void (**)(uint64_t, char *))(v227 + 8))(v115, v91);
    v121 = objc_msgSend(v95, sel__countPerMinuteUnit);
    objc_msgSend(v120, sel_doubleValueForUnit_, v121);
    v246 = v122;
    sub_23DC29ED8();
    sub_23DBB2974();
    sub_23DC29D1C();
    v247 = 1;
    sub_23DBB2C54();
    sub_23DBB2CB0(&qword_256CE9558, (uint64_t (*)(uint64_t))sub_23DBB2C54, MEMORY[0x24BEE30C8]);
    v123 = v83;
    v124 = v244;
    sub_23DC29D7C();
    v125 = v232;
    v126 = v243;
    MEMORY[0x24263D390](v124, v243);
    v127 = v124;
    v117 = v125;
    (*(void (**)(char *, uint64_t))(v242 + 8))(v127, v125);
    v128 = *(void (**)(char *, uint64_t))(v241 + 8);
    v128(v123, v126);
    sub_23DBB2CF0();
    sub_23DC2A160();
    v128(v87, v126);

    v95 = v233;
    v119 = v247;
    v118 = v248;
  }
  v129 = v245;
  v245[20] = v119;
  v129[21] = v118;
  LOBYTE(v247) = 1;
  v130 = (objc_class *)objc_msgSend(v95, sel__countPerMinuteUnit);
  v131.super.isa = v130;
  v132 = sub_23DC14ED4((char *)&v247, v131);
  v134 = v133;

  v129[22] = v132;
  v129[23] = v134;
  v135 = SleepingSampleBaselineComparison.relativeComparison.getter();
  if ((v136 & 1) != 0)
  {
    v145 = 0xA600000000000000;
    v146 = 0x9380E29380E2;
    v143 = v235;
  }
  else
  {
    v246 = v135;
    sub_23DC29ED8();
    sub_23DBB2974();
    v137 = v228;
    sub_23DC29D1C();
    v138 = v244;
    sub_23DC29D70();
    v139 = v234;
    v140 = v243;
    MEMORY[0x24263D390](v138, v243);
    (*(void (**)(char *, uint64_t))(v242 + 8))(v138, v117);
    v141 = *(void (**)(char *, uint64_t))(v241 + 8);
    v141(v137, v140);
    v142 = v229;
    sub_23DC29D40();
    v143 = v235;
    MEMORY[0x24263D378](v142, v140);
    (*(void (**)(char *, uint64_t))(v230 + 8))(v142, v231);
    v141(v139, v140);
    sub_23DBB2CF0();
    sub_23DC2A160();
    v144 = v140;
    v95 = v233;
    v141(v143, v144);
    v146 = v247;
    v145 = v248;
  }
  v147 = (uint64_t)v224;
  v148 = v245;
  v245[24] = v146;
  v148[25] = v145;
  sub_23DBB2B6C(v240 + *(int *)(v238 + 44) + *((int *)v237 + 6), v147, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if (((unsigned int (*)(uint64_t, uint64_t, char *))v236)(v147, 1, v91) == 1)
  {
    sub_23DBB2BB0(v147, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    v149 = 0xA600000000000000;
    v150 = 0x9380E29380E2;
    v151 = v242;
    v152 = v95;
  }
  else
  {
    v153 = (void *)sub_23DC2A040();
    (*(void (**)(uint64_t, char *))(v227 + 8))(v147, v91);
    v154 = objc_msgSend(v95, sel__changeInDegreeFahrenheitUnit);
    v155 = v153;
    v156 = v154;
    v157 = v209;
    Measurement<>.init(wristTemperatureForFormatting:unit:)(v155, v156);
    v158 = v212;
    static FormatStyle<>.wristTemperature(unit:)((uint64_t)v156, v212);
    sub_23DBB2BEC();
    v159 = v211;
    v152 = v95;
    v160 = v214;
    sub_23DC29BB4();
    (*(void (**)(uint64_t, uint64_t))(v213 + 8))(v158, v160);
    (*(void (**)(char *, uint64_t))(v210 + 8))(v157, v159);

    v150 = v247;
    v149 = v248;
    v151 = v242;
  }
  v161 = v245;
  v245[26] = v150;
  v161[27] = v149;
  LOBYTE(v247) = 3;
  v162 = (objc_class *)objc_msgSend(v152, sel__changeInDegreeFahrenheitUnit);
  v163.super.isa = v162;
  v164 = sub_23DC14ED4((char *)&v247, v163);
  v166 = v165;

  v161[28] = v164;
  v161[29] = v166;
  v167 = SleepingSampleBaselineComparison.relativeComparison.getter();
  if ((v168 & 1) != 0)
  {
    v175 = 0xA600000000000000;
    v176 = 0x9380E29380E2;
  }
  else
  {
    v246 = v167;
    sub_23DC29ED8();
    sub_23DBB2974();
    v169 = v228;
    sub_23DC29D1C();
    v170 = v244;
    sub_23DC29D70();
    v171 = v234;
    v172 = v243;
    MEMORY[0x24263D390](v170, v243);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v170, v232);
    v173 = *(void (**)(char *, uint64_t))(v241 + 8);
    v173(v169, v172);
    v174 = v229;
    sub_23DC29D40();
    MEMORY[0x24263D378](v174, v172);
    (*(void (**)(char *, uint64_t))(v230 + 8))(v174, v231);
    v173(v171, v172);
    sub_23DBB2CF0();
    sub_23DC2A160();
    v173(v143, v172);
    v176 = v247;
    v175 = v248;
  }
  v177 = (uint64_t)v225;
  v178 = v227;
  v179 = v245;
  v245[30] = v176;
  v179[31] = v175;
  sub_23DBB2B6C(v240 + *(int *)(v238 + 48) + *((int *)v237 + 6), v177, (uint64_t (*)(_QWORD))sub_23DBB29B8);
  if (((unsigned int (*)(uint64_t, uint64_t, char *))v236)(v177, 1, v91) == 1)
  {
    sub_23DBB2BB0(v177, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    v180 = 0xA600000000000000;
    v181 = 0x9380E29380E2;
    v183 = v243;
    v182 = v244;
    v184 = v241;
    v185 = v233;
  }
  else
  {
    v186 = (void *)sub_23DC2A040();
    (*(void (**)(uint64_t, char *))(v178 + 8))(v177, v91);
    v185 = v233;
    v187 = objc_msgSend(v233, sel_secondUnit);
    v188 = v186;
    sub_23DC29098(v188);

    v189 = v215;
    static FormatStyle<>.sleepDuration.getter(v215);
    sub_23DBB2CB0(&qword_256CE9540, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0AF0], MEMORY[0x24BDD0AE8]);
    v190 = v217;
    sub_23DC2A94C();
    (*(void (**)(uint64_t, uint64_t))(v216 + 8))(v189, v190);

    v181 = v247;
    v180 = v248;
    v183 = v243;
    v182 = v244;
    v184 = v241;
  }
  v191 = v245;
  v245[32] = v181;
  v191[33] = v180;
  LOBYTE(v247) = 4;
  v192 = (objc_class *)objc_msgSend(v185, sel_secondUnit);
  v193.super.isa = v192;
  v194 = sub_23DC14ED4((char *)&v247, v193);
  v196 = v195;

  v191[34] = v194;
  v191[35] = v196;
  v197 = SleepingSampleBaselineComparison.relativeComparison.getter();
  if ((v198 & 1) != 0)
  {
    v204 = 0xA600000000000000;
    v205 = 0x9380E29380E2;
  }
  else
  {
    v246 = v197;
    sub_23DC29ED8();
    sub_23DBB2974();
    v199 = v228;
    sub_23DC29D1C();
    sub_23DC29D70();
    v200 = v234;
    MEMORY[0x24263D390](v182, v183);
    (*(void (**)(char *, uint64_t))(v242 + 8))(v182, v232);
    v201 = *(void (**)(char *, uint64_t))(v184 + 8);
    v201(v199, v183);
    v202 = v229;
    sub_23DC29D40();
    v203 = v235;
    MEMORY[0x24263D378](v202, v183);
    (*(void (**)(char *, uint64_t))(v230 + 8))(v202, v231);
    v201(v200, v183);
    sub_23DBB2CF0();
    sub_23DC2A160();
    v201(v203, v183);
    v205 = v247;
    v204 = v248;
  }
  v206 = v245;
  v245[36] = v205;
  v206[37] = v204;
  v207 = (void *)sub_23DC2A340();
  swift_bridgeObjectRelease();
  objc_msgSend(v226, sel_appendRow_, v207);

}

uint64_t sub_23DC14ED4(char *a1, HKUnit a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t (*v16)(_QWORD);
  uint64_t v17;
  void *v18;
  Swift::String v19;
  uint64_t countAndFlagsBits;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v3 = v2;
  v6 = type metadata accessor for SleepingSampleBaselineAvailability();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SleepingSampleBaselineComparison();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD9904(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  sub_23DBB2B6C(v3 + *(int *)(v9 + 24), (uint64_t)v14, v16);
  v17 = type metadata accessor for SleepingSampleBaseline();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v14, 1, v17) == 1)
  {
    sub_23DBB2BB0((uint64_t)v14, (uint64_t (*)(_QWORD))sub_23DBD9904);
    sub_23DBB2B6C(v3, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  }
  else
  {
    sub_23DBB2914(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878, 0x24BDD3E60, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BDD2048]);
    v18 = (void *)sub_23DC2A040();
    LOBYTE(v28[0]) = v15;
    v19 = HKQuantityRange.formattedValue(for:unit:)((HealthBalance::SleepingSampleDataType)v28, a2);
    countAndFlagsBits = v19._countAndFlagsBits;

    sub_23DBB2BB0((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
    sub_23DBB2B6C(v3, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    if (v19._object)
      goto LABEL_9;
  }
  sub_23DBB2B6C((uint64_t)&v11[*(int *)(v9 + 20)], (uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_23DBBFA90();
      v23 = *(_QWORD *)&v8[*(int *)(v22 + 64)];
      v27 = *(_QWORD *)&v8[*(int *)(v22 + 48)];
      v28[0] = sub_23DC2A7D8();
      v28[1] = v24;
      sub_23DC2A2A4();
      v27 = v23;
      sub_23DC2A7D8();
      sub_23DC2A2A4();
      swift_bridgeObjectRelease();
      sub_23DC2A2A4();
      countAndFlagsBits = v28[0];
      sub_23DBB2BB0((uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DBBFA18);
    }
    else
    {
      sub_23DBB2BB0((uint64_t)v8, (uint64_t (*)(_QWORD))sub_23DBBFA18);
      countAndFlagsBits = 0x6C62616C69617641;
    }
  }
  else
  {
    countAndFlagsBits = 0x9380E29380E2;
  }
LABEL_9:
  sub_23DBB2BB0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  return countAndFlagsBits;
}

uint64_t DateInterval.range.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  char *v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  void (*v20)(char *, char *, uint64_t);
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;

  sub_23DC153B8();
  v3 = v2;
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v24 - v7;
  v9 = sub_23DC29E48();
  v10 = *(_QWORD **)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v24 - v14;
  sub_23DC29BE4();
  sub_23DC29BC0();
  sub_23DC1541C();
  result = sub_23DC2A1C0();
  if ((result & 1) != 0)
  {
    v17 = &v8[*(int *)(v3 + 48)];
    v18 = (void (*)(char *, char *, uint64_t))v10[4];
    v18(v8, v15, v9);
    v18(v17, v13, v9);
    v19 = &v6[*(int *)(v3 + 48)];
    v20 = (void (*)(char *, char *, uint64_t))v10[2];
    v20(v6, v8, v9);
    v20(v19, v17, v9);
    v18(a1, v6, v9);
    v21 = (void (*)(char *, uint64_t))v10[1];
    v21(v19, v9);
    v22 = &v6[*(int *)(v3 + 48)];
    v18(v6, v8, v9);
    v18(v22, v17, v9);
    sub_23DBD4914();
    v18(&a1[*(int *)(v23 + 36)], v22, v9);
    return ((uint64_t (*)(char *, uint64_t))v21)(v6, v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_23DC153B8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CEA7F8)
  {
    sub_23DC29E48();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CEA7F8);
  }
}

unint64_t sub_23DC1541C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25431F8E0;
  if (!qword_25431F8E0)
  {
    v1 = sub_23DC29E48();
    result = MEMORY[0x24263E440](MEMORY[0x24BDCE948], v1);
    atomic_store(result, (unint64_t *)&qword_25431F8E0);
  }
  return result;
}

uint64_t DateInterval.cappedToMaximumEnd(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  void (*v18)(char *, char *, uint64_t);
  char *v19;
  char *v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  _QWORD v24[2];

  v24[1] = a2;
  v3 = sub_23DC29E48();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)v24 - v9;
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v24 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v24[0] = (char *)v24 - v15;
  MEMORY[0x24BDAC7A8](v14);
  sub_23DC29BE4();
  sub_23DC29BE4();
  sub_23DC29BC0();
  sub_23DC1541C();
  v16 = a1;
  v17 = sub_23DC2A1A8();
  v18 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  if ((v17 & 1) != 0)
  {
    v19 = v10;
    v20 = v16;
  }
  else
  {
    v19 = v10;
    v20 = v7;
  }
  v18(v19, v20, v3);
  v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  v21(v7, v3);
  if ((sub_23DC2A1B4() & 1) != 0)
    v22 = v10;
  else
    v22 = v13;
  v18((char *)v24[0], v22, v3);
  v21(v10, v3);
  v21(v13, v3);
  return sub_23DC29BCC();
}

id HKTableFormatter.init(notificationSettings:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _BYTE *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(_BYTE *, uint64_t, uint64_t);
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  _BYTE v36[8];
  uint64_t v37;

  sub_23DBD482C(0);
  v1 = MEMORY[0x24BDAC7A8](v0);
  v3 = &v36[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v1);
  v5 = &v36[-v4];
  v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v7 = (void *)sub_23DC2A340();
  v8 = objc_msgSend(v6, sel_initWithColumnTitles_, v7);

  sub_23DC1130C();
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_23DC2D050;
  v10 = v8;
  v11 = SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsEnabled.getter();
  if (v11 == 2)
  {
    v12 = 0xE300000000000000;
    v13 = 7104878;
  }
  else
  {
    v36[7] = v11 & 1;
    v13 = sub_23DC2A25C();
  }
  *(_QWORD *)(v9 + 32) = v13;
  *(_QWORD *)(v9 + 40) = v12;
  SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsLastUpdatedLocally.getter((uint64_t)v5);
  v14 = sub_23DC29E48();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48);
  v17 = 0;
  if (v16(v5, 1, v14) != 1)
  {
    v17 = (void *)sub_23DC29E0C();
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v5, v14);
  }
  v18 = objc_msgSend(v10, sel_stringFromDate_, v17);

  v19 = sub_23DC2A244();
  v21 = v20;

  *(_QWORD *)(v9 + 48) = v19;
  *(_QWORD *)(v9 + 56) = v21;
  SleepingSampleChangeNotificationSettingsProvider.sleepingSampleChangeNotificationsFirstUpdated.getter((uint64_t)v3);
  if (v16(v3, 1, v14) == 1)
  {
    v22 = 0;
  }
  else
  {
    v22 = (void *)sub_23DC29E0C();
    (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v3, v14);
  }
  v23 = objc_msgSend(v10, sel_stringFromDate_, v22);

  v24 = sub_23DC2A244();
  v26 = v25;

  *(_QWORD *)(v9 + 64) = v24;
  *(_QWORD *)(v9 + 72) = v26;
  v27 = SleepingSampleChangeNotificationSettingsProvider.minimumNotifiableOutOfRangeCountOverride.getter();
  v29 = 2;
  if ((v28 & 1) == 0)
    v29 = (uint64_t)v27;
  v37 = v29;
  sub_23DBB2AC0();
  *(_QWORD *)(v9 + 80) = sub_23DC2A508();
  *(_QWORD *)(v9 + 88) = v30;
  v31 = SleepingSampleChangeNotificationSettingsProvider.vitalsDaySummaryDemoModeEnabled.getter();
  v32 = 1702195828;
  if (!v31)
    v32 = 0x65736C6166;
  v33 = 0xE500000000000000;
  if (v31)
    v33 = 0xE400000000000000;
  *(_QWORD *)(v9 + 96) = v32;
  *(_QWORD *)(v9 + 104) = v33;
  v34 = (void *)sub_23DC2A340();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_appendRow_, v34);

  swift_release();
  return v10;
}

uint64_t SleepingSampleDaySummary.baselineComparisons.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;

  sub_23DBB89B8(0, (unint64_t *)&unk_25431FA78, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v1 = *(_QWORD *)(type metadata accessor for SleepingSampleBaselineComparison() - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_23DC2D050;
  v5 = v4 + v3;
  v6 = (int *)type metadata accessor for SleepingSampleDaySummary();
  sub_23DBB2B6C(v0 + v6[8], v5, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v0 + v6[9], v5 + v2, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v0 + v6[10], v5 + 2 * v2, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v0 + v6[11], v5 + 3 * v2, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v0 + v6[12], v5 + 4 * v2, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  return v4;
}

uint64_t type metadata accessor for SleepingSampleDaySummary()
{
  uint64_t result;

  result = qword_25431F3B0;
  if (!qword_25431F3B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SleepingSampleDaySummary.baselineComparison(for:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = qword_23DC31430[*a1];
  v5 = type metadata accessor for SleepingSampleDaySummary();
  return sub_23DBB2B6C(v2 + *(int *)(v5 + 4 * v4), a2, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t sub_23DC15ADC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t SleepingSampleDaySummary.hasAnyBaselinesInRefinement.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;

  v1 = type metadata accessor for SleepingSampleBaselineAvailability();
  v2 = MEMORY[0x24BDAC7A8](v1);
  v36 = (uint64_t)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v38 = (_QWORD *)((char *)v34 - v5);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v34 - v6;
  v35 = type metadata accessor for SleepingSampleBaselineComparison();
  v8 = *(_QWORD *)(v35 - 8);
  v9 = MEMORY[0x24BDAC7A8](v35);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v34 - v12;
  sub_23DBB89B8(0, (unint64_t *)&unk_25431FA78, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v14 = *(_QWORD *)(v8 + 72);
  v15 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v37 = 4 * v14;
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_23DC2D050;
  v34[1] = v16;
  v17 = v16 + v15;
  v18 = (int *)type metadata accessor for SleepingSampleDaySummary();
  sub_23DBB2B6C(v0 + v18[8], v17, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v0 + v18[9], v17 + v14, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v0 + v18[10], v17 + 2 * v14, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v19 = v35;
  sub_23DBB2B6C(v0 + v18[11], v17 + 3 * v14, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v0 + v18[12], v17 + v37, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v20 = 5;
  while (1)
  {
    sub_23DBB2B6C(v17, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    sub_23DBB2B6C((uint64_t)&v13[*(int *)(v19 + 20)], (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (!EnumCaseMultiPayload)
      goto LABEL_2;
    if (EnumCaseMultiPayload == 1)
      sub_23DBBFA90();
    else
      sub_23DBBFAFC();
    v23 = *(_QWORD *)&v7[*(int *)(v22 + 48)];
    sub_23DBDD388((uint64_t)v7);
    if (v23 < 6)
    {
LABEL_2:
      sub_23DBB2B6C((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
LABEL_3:
      sub_23DBB2BB0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      sub_23DBB2BB0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      goto LABEL_4;
    }
    sub_23DBB2B6C((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    if ((unint64_t)v23 >= 0x14)
      goto LABEL_3;
    v37 = v11[*(int *)(type metadata accessor for SleepingSampleAggregate() + 36)] < 3u;
    v24 = (uint64_t)&v11[*(int *)(v19 + 20)];
    sub_23DBB2B6C(v24, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v25 = swift_getEnumCaseMultiPayload();
    if (v25)
    {
      if (v25 == 1)
      {
        sub_23DBBFA90();
        v27 = *(uint64_t *)((char *)v38 + *(int *)(v26 + 64));
        sub_23DBDD388((uint64_t)v38);
      }
      else
      {
        sub_23DBDD388((uint64_t)v38);
        v27 = 6;
      }
    }
    else
    {
      v27 = *v38;
    }
    sub_23DBB2B6C(v24, v36, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    result = swift_getEnumCaseMultiPayload();
    if ((_DWORD)result)
    {
      if ((_DWORD)result == 1)
        sub_23DBBFA90();
      else
        sub_23DBBFAFC();
      v30 = *(_QWORD *)(v36 + *(int *)(v29 + 48));
      result = sub_23DBDD388(v36);
    }
    else
    {
      v30 = 0;
    }
    v31 = v27 - v30;
    if (__OFSUB__(v27, v30))
      break;
    v32 = v31 + v37;
    if (__OFADD__(v31, v37))
      goto LABEL_29;
    sub_23DBB2BB0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    sub_23DBB2BB0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    v19 = v35;
    if (v32 < 1)
    {
      v33 = 1;
LABEL_27:
      swift_bridgeObjectRelease();
      return v33;
    }
LABEL_4:
    v17 += v14;
    if (!--v20)
    {
      v33 = 0;
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t SleepingSampleDaySummary.init(morningIndex:baselineRange:latestBaselineSampleEnd:heartRate:bloodOxygen:respiratoryRate:wristTemperature:timeAsleep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v16 = (int *)type metadata accessor for SleepingSampleDaySummary();
  v17 = a9 + v16[6];
  v18 = sub_23DC29E48();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = a9 + v16[7];
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = sub_23DC2A154();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(a9, a1, v20);
  sub_23DBEA250(a2, a9 + v16[5]);
  sub_23DC16BB4(a3, v17);
  sub_23DBBCEB0(a4, a9 + v16[8], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBBCEB0(a5, a9 + v16[9], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBBCEB0(a6, a9 + v16[10], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBBCEB0(a7, a9 + v16[11], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  return sub_23DBBCEB0(a8, a9 + v16[12], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t sub_23DC1606C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(void);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t);
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  unsigned int v72;
  char *v73;
  char *v74;
  char v75;
  void (*v76)(char *, char *, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, uint64_t, uint64_t);
  char *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  void (*v108)(char *, char *, uint64_t);
  void (*v109)(char *, uint64_t);
  uint64_t (*v110)(uint64_t);
  uint64_t v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  void (*v137)(char *, uint64_t);
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  unsigned int (*v140)(uint64_t, uint64_t, uint64_t);
  void (*v141)(char *, char *, uint64_t);
  void (*v142)(void);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;

  v122 = a1;
  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v3);
  v135 = (char *)&v112 - v4;
  v145 = type metadata accessor for SleepingSampleAggregate();
  MEMORY[0x24BDAC7A8](v145);
  v144 = (uint64_t)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_23DC29BF0();
  v150 = *(_QWORD *)(v148 - 8);
  v6 = MEMORY[0x24BDAC7A8](v148);
  v133 = (char *)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v132 = (char *)&v112 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v149 = (char *)&v112 - v10;
  v11 = sub_23DC29E48();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  v136 = *(_QWORD *)(v11 - 8);
  v13 = v136;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v131 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v124 = (char *)&v112 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v130 = (char *)&v112 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v123 = (char *)&v112 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v115 = (char *)&v112 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v114 = (char *)&v112 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v113 = (char *)&v112 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v117 = (char *)&v112 - v28;
  v121 = type metadata accessor for SleepingSampleBaselineComparison();
  v29 = *(_QWORD *)(v121 - 8);
  MEMORY[0x24BDAC7A8](v121);
  v143 = (uint64_t)&v112 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB89B8(0, &qword_25431F748, v12, v2);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v129 = (uint64_t)&v112 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v32);
  v128 = (char *)&v112 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v127 = (uint64_t)&v112 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v126 = (char *)&v112 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v116 = (uint64_t)&v112 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v120 = (uint64_t)&v112 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v46 = (char *)&v112 - v45;
  MEMORY[0x24BDAC7A8](v44);
  v47 = *(void (**)(void))(v13 + 56);
  v146 = (uint64_t)&v112 - v48;
  v47();
  v134 = v11;
  v142 = v47;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v47)(v46, 1, 1, v11);
  sub_23DBB89B8(0, (unint64_t *)&unk_25431FA78, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v49 = *(_QWORD *)(v29 + 72);
  v50 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_23DC2D050;
  v119 = v51;
  v52 = v51 + v50;
  v53 = (int *)type metadata accessor for SleepingSampleDaySummary();
  sub_23DBB2B6C(v1 + v53[8], v52, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v1 + v53[9], v52 + v49, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v1 + v53[10], v52 + 2 * v49, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v54 = v49;
  sub_23DBB2B6C(v1 + v53[11], v52 + 3 * v49, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v55 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878];
  v56 = v1 + v53[12];
  v57 = (uint64_t)v135;
  sub_23DBB2B6C(v56, v52 + 4 * v49, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v58 = 5;
  v118 = v52;
  v147 = v46;
  v125 = v49;
  do
  {
    v59 = v143;
    sub_23DBB2B6C(v52, v143, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    v60 = v144;
    sub_23DBB2B6C(v59, v144, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
    sub_23DBB2BB0(v59, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    sub_23DBB8B24(v60 + *(int *)(v145 + 28), v57, &qword_25431F880, v55);
    sub_23DBB2BB0(v60, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleAggregate);
    v61 = v148;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48))(v57, 1, v148) == 1)
    {
      sub_23DBB73A8(v57, &qword_25431F880, v55);
    }
    else
    {
      v62 = v149;
      v63 = v150;
      (*(void (**)(char *, uint64_t, uint64_t))(v150 + 32))(v149, v57, v61);
      v64 = v127;
      v65 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
      sub_23DBB8B24(v146, v127, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
      v66 = v132;
      v67 = v62;
      v68 = v64;
      v141 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
      v141(v132, v67, v61);
      v69 = v136;
      v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
      v71 = v134;
      v72 = v70(v68, 1, v134);
      v140 = v70;
      if (v72 == 1)
      {
        v73 = v123;
        sub_23DC29BE4();
        v137 = *(void (**)(char *, uint64_t))(v150 + 8);
        v137(v66, v61);
        sub_23DBB73A8(v68, &qword_25431F748, v65);
      }
      else
      {
        v137 = *(void (**)(char *, uint64_t))(v150 + 8);
        v137(v66, v61);
        v73 = v123;
        (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v123, v68, v71);
      }
      v74 = v130;
      sub_23DC29BE4();
      v139 = sub_23DBB2CB0((unint64_t *)&qword_25431F8E0, v65, MEMORY[0x24BDCE948]);
      v75 = sub_23DC2A1A8();
      v76 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
      if ((v75 & 1) != 0)
        v77 = v74;
      else
        v77 = v73;
      v78 = (uint64_t)v126;
      v138 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
      v76(v126, v77, v71);
      v79 = v65;
      v80 = *(void (**)(char *, uint64_t))(v69 + 8);
      v80(v74, v71);
      v80(v73, v71);
      v81 = v146;
      sub_23DBB73A8(v146, &qword_25431F748, v79);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v142)(v78, 0, 1, v71);
      sub_23DC0E8E0(v78, v81);
      v82 = v129;
      sub_23DBB8B24((uint64_t)v147, v129, &qword_25431F748, v79);
      v83 = v133;
      v84 = v148;
      v141(v133, v149, v148);
      v85 = v71;
      if (v140(v82, 1, v71) == 1)
      {
        v86 = v124;
        sub_23DC29BC0();
        v87 = v137;
        v137(v83, v84);
        sub_23DBB73A8(v82, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
      }
      else
      {
        v87 = v137;
        v137(v83, v84);
        v86 = v124;
        (*(void (**)(char *, uint64_t, uint64_t))(v136 + 32))(v124, v82, v71);
      }
      v88 = v84;
      v89 = v131;
      v90 = v149;
      sub_23DC29BC0();
      if ((sub_23DC2A1B4() & 1) != 0)
        v91 = v89;
      else
        v91 = v86;
      v92 = (uint64_t)v128;
      v138(v128, v91, v85);
      v80(v89, v85);
      v80(v86, v85);
      v87(v90, v88);
      v93 = (uint64_t)v147;
      sub_23DBB73A8((uint64_t)v147, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v142)(v92, 0, 1, v85);
      sub_23DC0E8E0(v92, v93);
      v55 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878];
      v57 = (uint64_t)v135;
      v54 = v125;
    }
    v52 += v54;
    --v58;
  }
  while (v58);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v94 = v146;
  v95 = v120;
  sub_23DBB8B24(v146, v120, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v96 = (_QWORD *)v136;
  v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
  v98 = v134;
  v99 = v97(v95, 1, v134);
  v100 = v122;
  if (v99 == 1)
  {
    v101 = v148;
  }
  else
  {
    v102 = (void (*)(char *, uint64_t, uint64_t))v96[4];
    v103 = v117;
    v102(v117, v95, v98);
    v95 = v116;
    sub_23DBB8B24((uint64_t)v147, v116, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    v104 = v97(v95, 1, v98);
    v101 = v148;
    if (v104 != 1)
    {
      v107 = v113;
      v102(v113, v95, v98);
      v108 = (void (*)(char *, char *, uint64_t))v96[2];
      v108(v114, v103, v98);
      v108(v115, v107, v98);
      v95 = v146;
      sub_23DC29BCC();
      v109 = (void (*)(char *, uint64_t))v96[1];
      v106 = (uint64_t)v147;
      v109(v107, v98);
      v109(v103, v98);
      v105 = 0;
      goto LABEL_24;
    }
    ((void (*)(char *, uint64_t))v96[1])(v103, v98);
  }
  sub_23DBB73A8((uint64_t)v147, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  v105 = 1;
  v106 = v94;
LABEL_24:
  v110 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  sub_23DBB73A8(v106, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  sub_23DBB73A8(v95, &qword_25431F748, v110);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v150 + 56))(v100, v105, 1, v101);
}

uint64_t sub_23DC16BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t SleepingSampleDaySummary.morningIndex.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DC2A154();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SleepingSampleDaySummary.morningIndex.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_23DC2A154();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*SleepingSampleDaySummary.morningIndex.modify())()
{
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.baselineRange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 20);
  return sub_23DBDCFDC(v3, a1);
}

uint64_t SleepingSampleDaySummary.baselineRange.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 20);
  return sub_23DC16CF0(a1, v3);
}

uint64_t sub_23DC16CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*SleepingSampleDaySummary.baselineRange.modify())()
{
  type metadata accessor for SleepingSampleDaySummary();
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.latestBaselineSampleEnd.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleDaySummary();
  return sub_23DBB8B24(v1 + *(int *)(v3 + 24), a1, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
}

uint64_t SleepingSampleDaySummary.latestBaselineSampleEnd.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 24);
  return sub_23DC16BB4(a1, v3);
}

uint64_t (*SleepingSampleDaySummary.latestBaselineSampleEnd.modify())()
{
  type metadata accessor for SleepingSampleDaySummary();
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.outlierContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;

  result = type metadata accessor for SleepingSampleDaySummary();
  v4 = (uint64_t *)(v1 + *(int *)(result + 28));
  v5 = *v4;
  LOBYTE(v4) = *((_BYTE *)v4 + 8);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = (_BYTE)v4;
  return result;
}

uint64_t SleepingSampleDaySummary.outlierContext.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = type metadata accessor for SleepingSampleDaySummary();
  v5 = v1 + *(int *)(result + 28);
  *(_QWORD *)v5 = v2;
  *(_BYTE *)(v5 + 8) = v3;
  return result;
}

uint64_t (*SleepingSampleDaySummary.outlierContext.modify())()
{
  type metadata accessor for SleepingSampleDaySummary();
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.heartRate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleDaySummary();
  return sub_23DBB2B6C(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t SleepingSampleDaySummary.heartRate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 32);
  return sub_23DC16F18(a1, v3);
}

uint64_t sub_23DC16F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepingSampleBaselineComparison();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*SleepingSampleDaySummary.heartRate.modify())()
{
  type metadata accessor for SleepingSampleDaySummary();
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.bloodOxygen.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleDaySummary();
  return sub_23DBB2B6C(v1 + *(int *)(v3 + 36), a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t SleepingSampleDaySummary.bloodOxygen.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 36);
  return sub_23DC16F18(a1, v3);
}

uint64_t (*SleepingSampleDaySummary.bloodOxygen.modify())()
{
  type metadata accessor for SleepingSampleDaySummary();
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.respiratoryRate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleDaySummary();
  return sub_23DBB2B6C(v1 + *(int *)(v3 + 40), a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t SleepingSampleDaySummary.respiratoryRate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 40);
  return sub_23DC16F18(a1, v3);
}

uint64_t (*SleepingSampleDaySummary.respiratoryRate.modify())()
{
  type metadata accessor for SleepingSampleDaySummary();
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.wristTemperature.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleDaySummary();
  return sub_23DBB2B6C(v1 + *(int *)(v3 + 44), a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t SleepingSampleDaySummary.wristTemperature.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 44);
  return sub_23DC16F18(a1, v3);
}

uint64_t (*SleepingSampleDaySummary.wristTemperature.modify())()
{
  type metadata accessor for SleepingSampleDaySummary();
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.timeAsleep.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for SleepingSampleDaySummary();
  return sub_23DBB2B6C(v1 + *(int *)(v3 + 48), a1, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
}

uint64_t SleepingSampleDaySummary.timeAsleep.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SleepingSampleDaySummary() + 48);
  return sub_23DC16F18(a1, v3);
}

uint64_t (*SleepingSampleDaySummary.timeAsleep.modify())()
{
  type metadata accessor for SleepingSampleDaySummary();
  return nullsub_1;
}

uint64_t SleepingSampleDaySummary.init(morningIndex:baselineRange:heartRate:bloodOxygen:respiratoryRate:wristTemperature:timeAsleep:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v53 = a1;
  v54 = a7;
  v59 = a6;
  v60 = a5;
  v61 = a4;
  v58 = a3;
  v52 = a2;
  v55 = a8;
  v10 = (int *)type metadata accessor for SleepingSampleDaySummary();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SleepingSampleBaselineComparison();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v51 = (uint64_t)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v57 = (uint64_t)&v46 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v56 = (uint64_t)&v46 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v46 - v21;
  v48 = (uint64_t)&v46 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v46 - v23;
  v46 = (uint64_t)&v46 - v23;
  sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v46 - v26;
  v47 = (uint64_t)&v46 - v26;
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v46 - v29;
  v31 = sub_23DC2A154();
  v32 = *(_QWORD *)(v31 - 8);
  v49 = v31;
  v50 = v32;
  MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v46 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v35 + 16))(v34, a1);
  sub_23DBDCFDC(a2, (uint64_t)v30);
  v36 = sub_23DC29E48();
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
  v37(v27, 1, 1, v36);
  sub_23DBB2B6C(v58, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v61, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v60, v56, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v59, v57, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v38 = v54;
  v39 = v51;
  sub_23DBB2B6C(v54, v51, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v40 = (uint64_t)&v12[v10[6]];
  v37((char *)v40, 1, 1, v36);
  v41 = &v12[v10[7]];
  *(_QWORD *)v41 = 0;
  v41[8] = 1;
  v42 = v50;
  v43 = v34;
  v44 = v49;
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v12, v43, v49);
  sub_23DBEA250((uint64_t)v30, (uint64_t)&v12[v10[5]]);
  sub_23DC16BB4(v47, v40);
  sub_23DBBCEB0(v46, (uint64_t)&v12[v10[8]], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBBCEB0(v48, (uint64_t)&v12[v10[9]], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBBCEB0(v56, (uint64_t)&v12[v10[10]], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBBCEB0(v57, (uint64_t)&v12[v10[11]], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBBCEB0(v39, (uint64_t)&v12[v10[12]], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBBCEB0((uint64_t)v12, v55, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
  sub_23DBB2BB0(v38, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2BB0(v59, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2BB0(v60, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2BB0(v61, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2BB0(v58, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBDD388(v52);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v53, v44);
}

uint64_t SleepingSampleDaySummary.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v1 = sub_23DC29E48();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB89B8(0, &qword_25431F748, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - v7;
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9628, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A0]);
  sub_23DC2A190();
  v9 = type metadata accessor for SleepingSampleDaySummary();
  sub_23DC2A190();
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  sub_23DC2A190();
  sub_23DBB8B24(v0 + *(int *)(v9 + 24), (uint64_t)v8, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v8, v1);
    sub_23DC2A898();
    sub_23DBB2CB0(&qword_256CE9640, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
    sub_23DC2A190();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  if (*(_BYTE *)(v0 + *(int *)(v9 + 28) + 8) == 1)
  {
    sub_23DC2A898();
  }
  else
  {
    sub_23DC2A898();
    sub_23DC2A88C();
  }
  SleepingSampleBaselineComparison.hash(into:)();
  SleepingSampleBaselineComparison.hash(into:)();
  SleepingSampleBaselineComparison.hash(into:)();
  SleepingSampleBaselineComparison.hash(into:)();
  return SleepingSampleBaselineComparison.hash(into:)();
}

uint64_t sub_23DC17858(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23DC17894 + 4 * byte_23DC30F40[a1]))(0x49676E696E726F6DLL, 0xEC0000007865646ELL);
}

uint64_t sub_23DC17894()
{
  return 0x656E696C65736162;
}

unint64_t sub_23DC178B8()
{
  return 0xD000000000000017;
}

uint64_t sub_23DC178D8()
{
  return 0x437265696C74756FLL;
}

uint64_t sub_23DC178FC()
{
  return 0x7461527472616568;
}

uint64_t sub_23DC17918()
{
  return 0x79784F646F6F6C62;
}

uint64_t sub_23DC17938()
{
  return 0x7461726970736572;
}

unint64_t sub_23DC1795C()
{
  return 0xD000000000000010;
}

uint64_t sub_23DC17978()
{
  return 0x656C7341656D6974;
}

uint64_t sub_23DC17994()
{
  unsigned __int8 *v0;

  return sub_23DC17858(*v0);
}

uint64_t sub_23DC1799C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DC234F0(a1, a2);
  *a3 = result;
  return result;
}

void sub_23DC179C0(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_23DC179CC()
{
  sub_23DC1A1DC();
  return sub_23DC2A964();
}

uint64_t sub_23DC179F4()
{
  sub_23DC1A1DC();
  return sub_23DC2A970();
}

uint64_t SleepingSampleDaySummary.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  char v16;

  v3 = v1;
  sub_23DC1A264(0, &qword_25431EFA8, MEMORY[0x24BEE3520]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DC1A1DC();
  sub_23DC2A8C8();
  LOBYTE(v14) = 0;
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_25431EF38, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD2498]);
  sub_23DC2A7C0();
  if (!v2)
  {
    v10 = type metadata accessor for SleepingSampleDaySummary();
    LOBYTE(v14) = 1;
    sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    sub_23DC1A2C0((unint64_t *)&unk_25431EF50, &qword_25431EF38, MEMORY[0x24BDD2498], MEMORY[0x24BEE1B98]);
    sub_23DC2A7C0();
    LOBYTE(v14) = 2;
    sub_23DC29E48();
    sub_23DBB2CB0(&qword_25431EED8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE920]);
    sub_23DC2A790();
    v11 = (uint64_t *)(v3 + *(int *)(v10 + 28));
    v12 = *v11;
    LOBYTE(v11) = *((_BYTE *)v11 + 8);
    v14 = v12;
    v15 = (char)v11;
    v16 = 3;
    sub_23DC1A220();
    sub_23DC2A790();
    LOBYTE(v14) = 4;
    type metadata accessor for SleepingSampleBaselineComparison();
    sub_23DBB2CB0(&qword_25431EF18, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t)&protocol conformance descriptor for SleepingSampleBaselineComparison);
    sub_23DC2A7C0();
    LOBYTE(v14) = 5;
    sub_23DC2A7C0();
    LOBYTE(v14) = 6;
    sub_23DC2A7C0();
    LOBYTE(v14) = 7;
    sub_23DC2A7C0();
    LOBYTE(v14) = 8;
    sub_23DC2A7C0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t SleepingSampleDaySummary.hashValue.getter()
{
  sub_23DC2A880();
  SleepingSampleDaySummary.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleDaySummary.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;

  v46 = a2;
  v52 = type metadata accessor for SleepingSampleBaselineComparison();
  v3 = MEMORY[0x24BDAC7A8](v52);
  v47 = (uint64_t)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v48 = (char *)&v46 - v6;
  v7 = MEMORY[0x24BDAC7A8](v5);
  v49 = (char *)&v46 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v50 = (char *)&v46 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v51 = (char *)&v46 - v11;
  sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v12);
  v53 = (char *)&v46 - v13;
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v55 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v54 = (char *)&v46 - v15;
  v64 = sub_23DC2A154();
  v57 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v56 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC1A264(0, &qword_25431F2F0, MEMORY[0x24BEE33E0]);
  v59 = v17;
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v46 - v19;
  v21 = type metadata accessor for SleepingSampleDaySummary();
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (uint64_t)&v24[*(int *)(v22 + 24)];
  v26 = sub_23DC29E48();
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v61 = v25;
  v27(v25, 1, 1, v26);
  v62 = (int *)v21;
  v28 = (uint64_t)v24;
  v29 = &v24[*(int *)(v21 + 28)];
  *(_QWORD *)v29 = 0;
  v29[8] = 1;
  v30 = a1[3];
  v60 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v30);
  sub_23DC1A1DC();
  v58 = v20;
  v31 = v63;
  sub_23DC2A8BC();
  if (v31)
  {
    v32 = v61;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    return sub_23DBB73A8(v32, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  }
  else
  {
    v33 = v54;
    v63 = v18;
    LOBYTE(v65) = 0;
    sub_23DBB2CB0((unint64_t *)&unk_25431F270, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B8]);
    v34 = v56;
    v35 = v64;
    sub_23DC2A760();
    (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v28, v34, v35);
    LOBYTE(v65) = 1;
    sub_23DC1A2C0((unint64_t *)&unk_25431F290, (unint64_t *)&unk_25431F270, MEMORY[0x24BDD24B8], MEMORY[0x24BEE1BC8]);
    v36 = (uint64_t)v33;
    sub_23DC2A760();
    v38 = v62;
    sub_23DBEA250(v36, v28 + v62[5]);
    LOBYTE(v65) = 2;
    sub_23DBB2CB0(&qword_25431F200, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE960]);
    v39 = (uint64_t)v53;
    sub_23DC2A730();
    sub_23DC16BB4(v39, v61);
    v67 = 3;
    sub_23DC1A350();
    sub_23DC2A730();
    v40 = v66;
    *(_QWORD *)v29 = v65;
    v29[8] = v40;
    LOBYTE(v65) = 4;
    sub_23DBB2CB0(&qword_25431F230, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t)&protocol conformance descriptor for SleepingSampleBaselineComparison);
    v41 = (uint64_t)v51;
    sub_23DC2A760();
    sub_23DBBCEB0(v41, v28 + v38[8], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    LOBYTE(v65) = 5;
    v42 = (uint64_t)v50;
    sub_23DC2A760();
    sub_23DBBCEB0(v42, v28 + v38[9], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    LOBYTE(v65) = 6;
    v43 = (uint64_t)v49;
    sub_23DC2A760();
    sub_23DBBCEB0(v43, v28 + v38[10], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    LOBYTE(v65) = 7;
    v44 = (uint64_t)v48;
    sub_23DC2A760();
    sub_23DBBCEB0(v44, v28 + v38[11], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    LOBYTE(v65) = 8;
    sub_23DC2A760();
    v45 = (uint64_t)v60;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v58, v59);
    sub_23DBBCEB0(v47, v28 + v38[12], (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    sub_23DBB2B6C(v28, v46, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
    __swift_destroy_boxed_opaque_existential_1(v45);
    return sub_23DBB2BB0(v28, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleDaySummary);
  }
}

uint64_t SleepingSampleDaySummary.latestSampleEnd.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, char *, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v2 = v1;
  v39 = a1;
  v3 = sub_23DC29E48();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  v5 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x24BDAC7A8](v3);
  v38 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v37 = (char *)&v36 - v8;
  sub_23DBD65E4(0);
  v10 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v36 - v15;
  sub_23DBB89B8(0, &qword_25431F748, v4, v13);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v36 - v18;
  sub_23DC1606C((uint64_t)v16);
  v20 = sub_23DC29BF0();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v16, 1, v20) == 1)
  {
    sub_23DBB73A8((uint64_t)v16, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878]);
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v22(v19, 1, 1, v3);
  }
  else
  {
    sub_23DC29BC0();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v16, v20);
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v22(v19, 0, 1, v3);
  }
  v23 = type metadata accessor for SleepingSampleDaySummary();
  v24 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_23DBB8B24(v2 + *(int *)(v23 + 24), (uint64_t)v12, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
  sub_23DC0E8E0((uint64_t)v19, v24);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v26 = v25(v12, 1, v3);
  v27 = v25((char *)v24, 1, v3);
  if (v26 != 1)
  {
    v30 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
    v28 = v39;
    if (v27 == 1)
    {
      v30(v39, v12, v3);
    }
    else
    {
      v31 = v37;
      v30((uint64_t)v37, v12, v3);
      v32 = v38;
      v30((uint64_t)v38, (char *)v24, v3);
      sub_23DBB2CB0((unint64_t *)&qword_25431F8E0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE948]);
      if ((sub_23DC2A1B4() & 1) != 0)
        v33 = v32;
      else
        v33 = v31;
      (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v28, v33, v3);
      v34 = *(void (**)(char *, uint64_t))(v5 + 8);
      v34(v32, v3);
      v34(v31, v3);
    }
    goto LABEL_14;
  }
  v28 = v39;
  if (v27 != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v39, v24, v3);
LABEL_14:
    v29 = 0;
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v22)(v28, v29, 1, v3);
  }
  v29 = 1;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v22)(v28, v29, 1, v3);
}

uint64_t sub_23DC1898C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleDaySummary.init(from:)(a1, a2);
}

uint64_t sub_23DC189A0(_QWORD *a1)
{
  return SleepingSampleDaySummary.encode(to:)(a1);
}

uint64_t sub_23DC189B4()
{
  sub_23DC2A880();
  SleepingSampleDaySummary.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t sub_23DC189F4()
{
  sub_23DC2A880();
  SleepingSampleDaySummary.hash(into:)();
  return sub_23DC2A8B0();
}

uint64_t SleepingSampleDaySummary.morningIndexRange.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  uint64_t result;
  char *v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  sub_23DBC2A3C();
  v5 = v4;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v28 - v9;
  v11 = sub_23DC2A154();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v28 - v16;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18((char *)&v28 - v16, v2, v11);
  v18(v15, v2, v11);
  sub_23DBB2CB0((unint64_t *)&qword_25431FAC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24A8]);
  result = sub_23DC2A1C0();
  if ((result & 1) != 0)
  {
    v20 = &v10[*(int *)(v5 + 48)];
    v21 = v12;
    v29 = v12;
    v22 = a1;
    v23 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v23(v10, v17, v11);
    v23(v20, v15, v11);
    v24 = &v8[*(int *)(v5 + 48)];
    v18(v8, (uint64_t)v10, v11);
    v18(v24, (uint64_t)v20, v11);
    v23(v22, v8, v11);
    v25 = *(void (**)(char *, uint64_t))(v29 + 8);
    v25(v24, v11);
    v26 = &v8[*(int *)(v5 + 48)];
    v23(v8, v10, v11);
    v23(v26, v20, v11);
    sub_23DBE69A0(0, (unint64_t *)&qword_25431FB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE08B8]);
    v23(&v22[*(int *)(v27 + 36)], v26, v11);
    return ((uint64_t (*)(char *, uint64_t))v25)(v8, v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t SleepingSampleDaySummary.hasAnyRelativeComparison.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  double v24;
  double v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  id v35;
  id v36;
  double v37;
  double v38;
  id v39;
  uint64_t result;
  _QWORD v41[2];
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;

  sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v1);
  v44 = (uint64_t)v41 - v2;
  v48 = type metadata accessor for SleepingSampleBaseline();
  v46 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v47 = (uint64_t)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB29B8();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for SleepingSampleBaselineComparison();
  v7 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB89B8(0, (unint64_t *)&unk_25431FA78, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v10 = *(_QWORD *)(v7 + 72);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_23DC2D050;
  v41[1] = v12;
  v13 = v12 + v11;
  v14 = (int *)type metadata accessor for SleepingSampleDaySummary();
  sub_23DBB2B6C(v0 + v14[8], v13, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v0 + v14[9], v13 + v10, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v0 + v14[10], v13 + 2 * v10, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v0 + v14[11], v13 + 3 * v10, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v0 + v14[12], v13 + 4 * v10, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v15 = 5;
  v42 = v10;
  v43 = v9;
  while (1)
  {
    sub_23DBB2B6C(v13, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    v16 = type metadata accessor for SleepingSampleAggregate();
    sub_23DBB2B6C((uint64_t)&v9[*(int *)(v16 + 24)], (uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DBB29B8);
    sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
    v18 = v17;
    v19 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1, v17) == 1)
    {
      sub_23DBB2BB0((uint64_t)v6, (uint64_t (*)(_QWORD))sub_23DBB29B8);
      goto LABEL_3;
    }
    v20 = (void *)sub_23DC2A040();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v18);
    v21 = v44;
    sub_23DBB8B24((uint64_t)&v9[*(int *)(v45 + 24)], v44, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v21, 1, v48) == 1)
    {

      sub_23DBB73A8(v21, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline);
      v10 = v42;
      v9 = v43;
      goto LABEL_3;
    }
    sub_23DBBCEB0(v21, v47, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
    v22 = (void *)sub_23DC2A040();
    v23 = objc_msgSend(v20, sel__unit);
    objc_msgSend(v22, sel_doubleValueForUnit_, v23);
    v25 = v24;

    v26 = (void *)sub_23DC2A040();
    v27 = objc_msgSend(v20, sel_compare_, v26);

    type metadata accessor for ComparisonResult(0);
    if (v27 == (id)-1)
    {
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v34 = (void *)sub_23DC2A040();
      v35 = objc_msgSend(v34, sel_minimum);

      v36 = objc_msgSend(v20, sel__unit);
      objc_msgSend(v35, sel_doubleValueForUnit_, v36);
      v38 = v37;

      v33 = v25 - v38;
      v9 = v43;
      goto LABEL_11;
    }
    v9 = v43;
    if (v27 != (id)1)
      break;
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v28 = (void *)sub_23DC2A040();
    v29 = objc_msgSend(v28, sel_maximum);

    v30 = objc_msgSend(v20, sel__unit);
    objc_msgSend(v29, sel_doubleValueForUnit_, v30);
    v32 = v31;

    v33 = v32 - v25;
LABEL_11:
    if (v33 != 0.0)
    {
      v39 = objc_msgSend(v20, sel__unit);
      objc_msgSend(v20, sel_doubleValueForUnit_, v39);

      sub_23DBB2BB0(v47, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
LABEL_16:
      sub_23DBB2BB0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
      v15 = 1;
LABEL_17:
      swift_bridgeObjectRelease();
      return v15;
    }
    sub_23DBB2BB0(v47, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);

    v10 = v42;
LABEL_3:
    sub_23DBB2BB0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
    v13 += v10;
    if (!--v15)
      goto LABEL_17;
  }
  if (!v27)
  {
    sub_23DBB2BB0(v47, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);

    goto LABEL_16;
  }
  v49 = v27;
  result = sub_23DC2A820();
  __break(1u);
  return result;
}

uint64_t SleepingSampleDaySummary.baselineComparisons(for:)(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  sub_23DBB89B8(0, (unint64_t *)&unk_25431FA78, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SleepingSampleBaselineComparison() - 8) + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23DC2B900;
  v6 = qword_23DC31430[v2];
  v7 = type metadata accessor for SleepingSampleDaySummary();
  sub_23DBB2B6C(v1 + *(int *)(v7 + 4 * v6), v5 + v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  return v5;
}

uint64_t sub_23DC19314(int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_23DBB89B8(0, (unint64_t *)&unk_25431FA78, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v3 = *(_QWORD *)(type metadata accessor for SleepingSampleBaselineComparison() - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_23DC2D050;
  v7 = v6 + v5;
  sub_23DBB2B6C(v1 + a1[8], v7, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v1 + a1[9], v7 + v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v1 + a1[10], v7 + 2 * v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v1 + a1[11], v7 + 3 * v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v1 + a1[12], v7 + 4 * v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  return v6;
}

uint64_t sub_23DC19430(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  sub_23DBB89B8(0, (unint64_t *)&unk_25431FA78, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SleepingSampleBaselineComparison() - 8) + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_23DC2B900;
  sub_23DBB2B6C(v2 + *(int *)(a2 + 4 * qword_23DC31430[v4]), v7 + v6, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  return v7;
}

BOOL _s13HealthBalance24SleepingSampleDaySummaryV21outOfRangeMetricCountSivg_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char v16;
  char v17;
  _BOOL4 v18;
  _BOOL8 v19;
  double v20;
  char v21;
  char v22;
  _BOOL8 v23;
  _BOOL8 v24;
  double v25;
  char v26;
  char v27;
  _BOOL8 v28;
  _BOOL8 v29;
  double v30;
  char v31;
  char v32;
  _BOOL8 v33;
  _BOOL8 v34;
  double v35;
  char v36;
  char v37;
  _BOOL8 v38;
  _BOOL8 v39;
  _BOOL8 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = type metadata accessor for SleepingSampleBaselineComparison();
  v1 = *(_QWORD *)(v45 - 8);
  v2 = MEMORY[0x24BDAC7A8](v45);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v42 - v5;
  sub_23DBB89B8(0, (unint64_t *)&unk_25431FA78, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaselineComparison, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  v7 = *(_QWORD *)(v1 + 72);
  v8 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v9 = swift_allocObject();
  v44 = v9;
  *(_OWORD *)(v9 + 16) = xmmword_23DC2D050;
  v10 = v9 + v8;
  v11 = (int *)type metadata accessor for SleepingSampleDaySummary();
  sub_23DBB2B6C(v0 + v11[8], v10, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v12 = v10 + v7;
  sub_23DBB2B6C(v0 + v11[9], v10 + v7, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v43 = v10 + 2 * v7;
  sub_23DBB2B6C(v0 + v11[10], v43, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v13 = v10 + 3 * v7;
  sub_23DBB2B6C(v0 + v11[11], v13, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v14 = v10 + 4 * v7;
  sub_23DBB2B6C(v0 + v11[12], v14, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v10, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C((uint64_t)v6, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v15 = COERCE_DOUBLE(SleepingSampleBaselineComparison.relativeComparison.getter());
  v17 = v16;
  sub_23DBB2BB0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v18 = v15 < -1.0;
  if (v15 > 1.0)
    v18 = 1;
  v19 = (v17 & 1) == 0 && v18;
  sub_23DBB2BB0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v12, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C((uint64_t)v6, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v20 = COERCE_DOUBLE(SleepingSampleBaselineComparison.relativeComparison.getter());
  v22 = v21;
  sub_23DBB2BB0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v23 = v20 > 1.0 || v20 < -1.0;
  v24 = v19 + v23;
  if ((v22 & 1) == 0)
    v19 = v24;
  sub_23DBB2BB0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v43, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C((uint64_t)v6, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v25 = COERCE_DOUBLE(SleepingSampleBaselineComparison.relativeComparison.getter());
  v27 = v26;
  sub_23DBB2BB0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v28 = v25 > 1.0 || v25 < -1.0;
  v29 = v19 + v28;
  if ((v27 & 1) == 0)
    v19 = v29;
  sub_23DBB2BB0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v13, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C((uint64_t)v6, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v30 = COERCE_DOUBLE(SleepingSampleBaselineComparison.relativeComparison.getter());
  v32 = v31;
  sub_23DBB2BB0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v33 = v30 > 1.0 || v30 < -1.0;
  v34 = v19 + v33;
  if ((v32 & 1) == 0)
    v19 = v34;
  sub_23DBB2BB0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C(v14, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  sub_23DBB2B6C((uint64_t)v6, (uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v35 = COERCE_DOUBLE(SleepingSampleBaselineComparison.relativeComparison.getter());
  v37 = v36;
  sub_23DBB2BB0((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  v38 = v35 > 1.0 || v35 < -1.0;
  v39 = v19 + v38;
  if ((v37 & 1) != 0)
    v40 = v19;
  else
    v40 = v39;
  sub_23DBB2BB0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineComparison);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v40;
}

uint64_t SleepingSampleDaySummary.OutlierContext.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

HealthBalance::SleepingSampleDaySummary::OutlierContext __swiftcall SleepingSampleDaySummary.OutlierContext.init(rawValue:)(HealthBalance::SleepingSampleDaySummary::OutlierContext rawValue)
{
  HealthBalance::SleepingSampleDaySummary::OutlierContext *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static SleepingSampleDaySummary.OutlierContext.menstrualCycle.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static SleepingSampleDaySummary.OutlierContext.strenuousExercise.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static SleepingSampleDaySummary.OutlierContext.elevationGain.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

unint64_t SleepingSampleDaySummary.OutlierContext.description.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = 0;
  v8 = 0xE000000000000000;
  sub_23DC2A5A4();
  v9 = 0;
  v10 = 0xE000000000000000;
  sub_23DC2A2A4();
  v0 = (void *)sub_23DC2A3AC();
  v1 = (id)HKSensitiveLogItem();

  sub_23DC2A520();
  swift_unknownObjectRelease();
  sub_23DC2A670();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  sub_23DC2A2A4();
  v7 = 0x437265696C74754FLL;
  v8 = 0xEF28747865746E6FLL;
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  v3 = v7;
  v2 = v8;
  v7 = 0;
  v8 = 0xE000000000000000;
  sub_23DC2A5A4();
  swift_bridgeObjectRelease();
  v7 = 0xD000000000000013;
  v8 = 0x800000023DC33410;
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  v7 = v3;
  v8 = v2;
  swift_bridgeObjectRetain();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v7;
  v4 = v8;
  v7 = 0;
  v8 = 0xE000000000000000;
  sub_23DC2A5A4();
  swift_bridgeObjectRelease();
  v7 = 0x6F69746176656C65;
  v8 = 0xEF203A6E6961476ELL;
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  sub_23DC2A2A4();
  v7 = v5;
  v8 = v4;
  swift_bridgeObjectRetain();
  sub_23DC2A2A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_23DC19B7C()
{
  sub_23DC1A43C();
  return sub_23DC2A328();
}

uint64_t sub_23DC19BD8()
{
  sub_23DC1A43C();
  return sub_23DC2A31C();
}

uint64_t sub_23DC19C28@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23DC15ADC(a1, a2);
}

uint64_t _s13HealthBalance24SleepingSampleDaySummaryV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  int *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  char v40;
  uint64_t v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t (*v47)(uint64_t);
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  _QWORD *v55;
  int v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v4 = sub_23DC29E48();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
  v67 = v4;
  v65 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v63 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBD65E4(0);
  v64 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v66 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB89B8(0, &qword_25431F748, v5, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v57 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v57 - v16;
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v19 = v18;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v57 - v23;
  sub_23DC2A154();
  sub_23DBB2CB0(&qword_256CE9748, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24C0]);
  sub_23DC2A4F0();
  if (v68)
    goto LABEL_8;
  v61 = v15;
  v62 = v19;
  v57 = v12;
  v58 = v17;
  v25 = type metadata accessor for SleepingSampleDaySummary();
  v26 = *(int *)(v25 + 20);
  v59 = a1;
  v60 = a2;
  v27 = a1 + v26;
  v28 = a2 + v26;
  sub_23DBB2CB0(&qword_256CE9818, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], MEMORY[0x24BDD24B0]);
  v29 = sub_23DC2A1F0();
  sub_23DBDCFDC(v27, (uint64_t)v24);
  sub_23DBDCFDC(v28, (uint64_t)v22);
  if ((v29 & 1) == 0)
  {
    sub_23DBDD388((uint64_t)v22);
    sub_23DBDD388((uint64_t)v24);
    goto LABEL_8;
  }
  v30 = sub_23DC2A1F0();
  sub_23DBDD388((uint64_t)v22);
  sub_23DBDD388((uint64_t)v24);
  if ((v30 & 1) != 0)
  {
    v31 = (int *)v25;
    v32 = (uint64_t)v58;
    v33 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
    sub_23DBB8B24(v59 + *(int *)(v25 + 24), (uint64_t)v58, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
    v34 = (uint64_t)v61;
    sub_23DBB8B24(v60 + *(int *)(v25 + 24), (uint64_t)v61, &qword_25431F748, v33);
    v35 = v66;
    v36 = v66 + *(int *)(v64 + 48);
    sub_23DBB8B24(v32, v66, &qword_25431F748, v33);
    sub_23DBB8B24(v34, v36, &qword_25431F748, v33);
    v37 = v65;
    v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
    v39 = v67;
    if (v38(v35, 1, v67) == 1)
    {
      sub_23DBB73A8(v34, &qword_25431F748, v33);
      sub_23DBB73A8(v32, &qword_25431F748, v33);
      if (v38(v36, 1, v39) == 1)
      {
        sub_23DBB73A8(v35, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
LABEL_14:
        v50 = v31[7];
        v51 = v59;
        v52 = v60;
        v53 = (_QWORD *)(v59 + v50);
        v54 = *(_BYTE *)(v59 + v50 + 8);
        v55 = (_QWORD *)(v60 + v50);
        v56 = *(unsigned __int8 *)(v60 + v50 + 8);
        if ((v54 & 1) != 0)
        {
          if (!v56)
            goto LABEL_8;
        }
        else
        {
          if (*v53 != *v55)
            LOBYTE(v56) = 1;
          if ((v56 & 1) != 0)
            goto LABEL_8;
        }
        if ((_s13HealthBalance32SleepingSampleBaselineComparisonV2eeoiySbAC_ACtFZ_0(v59 + v31[8], v60 + v31[8]) & 1) != 0
          && (_s13HealthBalance32SleepingSampleBaselineComparisonV2eeoiySbAC_ACtFZ_0(v51 + v31[9], v52 + v31[9]) & 1) != 0
          && (_s13HealthBalance32SleepingSampleBaselineComparisonV2eeoiySbAC_ACtFZ_0(v51 + v31[10], v52 + v31[10]) & 1) != 0
          && (_s13HealthBalance32SleepingSampleBaselineComparisonV2eeoiySbAC_ACtFZ_0(v51 + v31[11], v52 + v31[11]) & 1) != 0)
        {
          v40 = _s13HealthBalance32SleepingSampleBaselineComparisonV2eeoiySbAC_ACtFZ_0(v51 + v31[12], v52 + v31[12]);
          return v40 & 1;
        }
        goto LABEL_8;
      }
    }
    else
    {
      v42 = (uint64_t)v57;
      sub_23DBB8B24(v35, (uint64_t)v57, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
      if (v38(v36, 1, v39) != 1)
      {
        v44 = v32;
        v45 = v42;
        v46 = v63;
        (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v63, v36, v39);
        v47 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
        sub_23DBB2CB0(&qword_256CE9B20, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE958]);
        v48 = sub_23DC2A1F0();
        v49 = *(void (**)(char *, uint64_t))(v37 + 8);
        v49(v46, v39);
        sub_23DBB73A8((uint64_t)v61, &qword_25431F748, v47);
        sub_23DBB73A8(v44, &qword_25431F748, v47);
        v49((char *)v45, v39);
        sub_23DBB73A8(v35, &qword_25431F748, v47);
        if ((v48 & 1) == 0)
          goto LABEL_8;
        goto LABEL_14;
      }
      v43 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900];
      sub_23DBB73A8((uint64_t)v61, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900]);
      sub_23DBB73A8(v32, &qword_25431F748, v43);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v42, v39);
    }
    sub_23DBB2BB0(v35, (uint64_t (*)(_QWORD))sub_23DBD65E4);
  }
LABEL_8:
  v40 = 0;
  return v40 & 1;
}

unint64_t sub_23DC1A1DC()
{
  unint64_t result;

  result = qword_25431F9B8;
  if (!qword_25431F9B8)
  {
    result = MEMORY[0x24263E440](&unk_23DC313DC, &type metadata for SleepingSampleDaySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F9B8);
  }
  return result;
}

unint64_t sub_23DC1A220()
{
  unint64_t result;

  result = qword_25431EF08;
  if (!qword_25431EF08)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDaySummary.OutlierContext, &type metadata for SleepingSampleDaySummary.OutlierContext);
    atomic_store(result, (unint64_t *)&qword_25431EF08);
  }
  return result;
}

void sub_23DC1A264(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DC1A1DC();
    v7 = a3(a1, &type metadata for SleepingSampleDaySummary.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_23DC1A2C0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_23DBE69A0(255, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v10 = v9;
    v11 = sub_23DBB2CB0(a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDD2488], a3);
    result = MEMORY[0x24263E440](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23DC1A350()
{
  unint64_t result;

  result = qword_25431F228;
  if (!qword_25431F228)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDaySummary.OutlierContext, &type metadata for SleepingSampleDaySummary.OutlierContext);
    atomic_store(result, (unint64_t *)&qword_25431F228);
  }
  return result;
}

uint64_t sub_23DC1A394(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_23DBB2CB0((unint64_t *)&unk_25431F790, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleDaySummary);
  a1[2] = sub_23DBB2CB0(&qword_25431F778, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleDaySummary);
  result = sub_23DBB2CB0(&qword_25431F780, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleDaySummary);
  a1[3] = result;
  return result;
}

uint64_t sub_23DC1A40C()
{
  return sub_23DBB2CB0(&qword_25431F788, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleDaySummary, (uint64_t)&protocol conformance descriptor for SleepingSampleDaySummary);
}

unint64_t sub_23DC1A43C()
{
  unint64_t result;

  result = qword_25431F9C8;
  if (!qword_25431F9C8)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDaySummary.OutlierContext, &type metadata for SleepingSampleDaySummary.OutlierContext);
    atomic_store(result, (unint64_t *)&qword_25431F9C8);
  }
  return result;
}

unint64_t sub_23DC1A484()
{
  unint64_t result;

  result = qword_256CEA800;
  if (!qword_256CEA800)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDaySummary.OutlierContext, &type metadata for SleepingSampleDaySummary.OutlierContext);
    atomic_store(result, (unint64_t *)&qword_256CEA800);
  }
  return result;
}

unint64_t sub_23DC1A4CC()
{
  unint64_t result;

  result = qword_25431EA68[0];
  if (!qword_25431EA68[0])
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDaySummary.OutlierContext, &type metadata for SleepingSampleDaySummary.OutlierContext);
    atomic_store(result, qword_25431EA68);
  }
  return result;
}

unint64_t sub_23DC1A514()
{
  unint64_t result;

  result = qword_25431EF10;
  if (!qword_25431EF10)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for SleepingSampleDaySummary.OutlierContext, &type metadata for SleepingSampleDaySummary.OutlierContext);
    atomic_store(result, (unint64_t *)&qword_25431EF10);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for SleepingSampleDaySummary(char *a1, char *a2, int *a3)
{
  int v4;
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int EnumCaseMultiPayload;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  void (*v69)(char *, _QWORD, uint64_t, int *);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *, char *, uint64_t);
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  void (*v130)(char *, char *, uint64_t);
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(char *, char *, uint64_t);
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  void (*v164)(char *, char *, uint64_t);
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(char *, char *, uint64_t);
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  void (*v198)(char *, char *, uint64_t);
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void (*v205)(char *, char *, uint64_t);
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(char *, char *, uint64_t);
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int (*v214)(char *, uint64_t, int *);
  unsigned int (*v215)(char *, uint64_t, uint64_t);
  unsigned int (*v216)(char *, uint64_t, uint64_t);
  void (*v217)(char *, char *);
  uint64_t v218;
  int *v219;
  int *v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int (*v224)(char *, uint64_t, uint64_t);
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v18 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v18 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v6 = sub_23DC2A154();
    v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
    v7(a1, a2, v6);
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v7(&a1[v8], &a2[v8], v6);
    sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v212 = v11;
    v226 = v6;
    v7(&v9[*(int *)(v11 + 36)], &v10[*(int *)(v11 + 36)], v6);
    v12 = a3[6];
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = sub_23DC29E48();
    v16 = *(_QWORD *)(v15 - 8);
    v224 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    v225 = v15;
    v209 = v16;
    if (v224(v14, 1, v15))
    {
      sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = a3[7];
    v20 = a3[8];
    v220 = a3;
    v21 = &a1[v19];
    v22 = &a2[v19];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = &a1[v20];
    v221 = a2;
    v24 = &a2[v20];
    v7(&a1[v20], &a2[v20], v6);
    v25 = (int *)type metadata accessor for SleepingSampleAggregate();
    v26 = v25[5];
    v27 = &v23[v26];
    v28 = &v24[v26];
    v29 = sub_23DC29F80();
    v217 = *(void (**)(char *, char *))(*(_QWORD *)(v29 - 8) + 16);
    v218 = v29;
    v217(v27, v28);
    v30 = v25[6];
    v31 = &v23[v30];
    v32 = &v24[v30];
    sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
    v34 = v33;
    v35 = *(_QWORD *)(v33 - 8);
    v216 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
    if (v216(v32, 1, v33))
    {
      sub_23DBB29B8();
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v31, v32, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v31, 0, 1, v34);
    }
    v37 = v25[7];
    v38 = &v23[v37];
    v39 = &v24[v37];
    v40 = sub_23DC29BF0();
    v41 = *(_QWORD *)(v40 - 8);
    v215 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    v207 = v41;
    if (v215(v39, 1, v40))
    {
      sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v43 = v25[8];
    v44 = &v23[v43];
    v45 = &v24[v43];
    v213 = v35;
    if (v224(&v24[v43], 1, v225))
    {
      sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v209 + 16))(v44, v45, v225);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v44, 0, 1, v225);
    }
    v23[v25[9]] = v24[v25[9]];
    v47 = type metadata accessor for SleepingSampleBaselineComparison();
    v48 = *(int *)(v47 + 20);
    v49 = &v23[v48];
    v50 = &v24[v48];
    v227 = type metadata accessor for SleepingSampleBaselineAvailability();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v223 = v40;
    if (EnumCaseMultiPayload == 2)
    {
      v7(v49, v50, v226);
      v7(&v49[*(int *)(v212 + 36)], &v50[*(int *)(v212 + 36)], v226);
      sub_23DBBFAFC();
      *(_QWORD *)&v49[*(int *)(v53 + 48)] = *(_QWORD *)&v50[*(int *)(v53 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7(v49, v50, v226);
      v7(&v49[*(int *)(v212 + 36)], &v50[*(int *)(v212 + 36)], v226);
      sub_23DBBFA90();
      *(_QWORD *)&v49[*(int *)(v52 + 48)] = *(_QWORD *)&v50[*(int *)(v52 + 48)];
      *(_QWORD *)&v49[*(int *)(v52 + 64)] = *(_QWORD *)&v50[*(int *)(v52 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
    }
    v54 = *(int *)(v47 + 24);
    v55 = &v23[v54];
    v56 = &v24[v54];
    v57 = (int *)type metadata accessor for SleepingSampleBaseline();
    v58 = *((_QWORD *)v57 - 1);
    v214 = *(unsigned int (**)(char *, uint64_t, int *))(v58 + 48);
    v210 = v7;
    v211 = v47;
    v222 = v34;
    v219 = v57;
    v208 = v58;
    if (v214(v56, 1, v57))
    {
      sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      v60 = *(void (**)(char *, char *, uint64_t))(v213 + 16);
      v60(v55, v56, v222);
      v61 = v57[5];
      v62 = v58;
      v63 = &v55[v61];
      v64 = &v56[v61];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v66 = v65;
      v67 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 16);
      v67(v63, v64, v65);
      v60(&v55[v57[6]], &v56[v57[6]], v222);
      v34 = v222;
      v68 = v66;
      v7 = v210;
      v67(&v55[v57[7]], &v56[v57[7]], v68);
      v47 = v211;
      v69 = *(void (**)(char *, _QWORD, uint64_t, int *))(v62 + 56);
      v40 = v223;
      v69(v55, 0, 1, v57);
    }
    v70 = v225;
    v71 = v220[9];
    v72 = &a1[v71];
    v73 = &v221[v71];
    v7(&a1[v71], &v221[v71], v226);
    ((void (*)(char *, char *, uint64_t))v217)(&v72[v25[5]], &v73[v25[5]], v218);
    v74 = v25[6];
    v75 = &v72[v74];
    v76 = &v73[v74];
    if (v216(&v73[v74], 1, v34))
    {
      sub_23DBB29B8();
      memcpy(v75, v76, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v75, v76, v34);
      v40 = v223;
      v70 = v225;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v213 + 56))(v75, 0, 1, v34);
    }
    v78 = v25[7];
    v79 = &v72[v78];
    v80 = &v73[v78];
    if (v215(&v73[v78], 1, v40))
    {
      sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v79, v80, v40);
      v70 = v225;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v79, 0, 1, v40);
    }
    v82 = v25[8];
    v83 = &v72[v82];
    v84 = &v73[v82];
    if (v224(&v73[v82], 1, v70))
    {
      sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v209 + 16))(v83, v84, v70);
      v47 = v211;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v83, 0, 1, v70);
    }
    v72[v25[9]] = v73[v25[9]];
    v86 = *(int *)(v47 + 20);
    v87 = &v72[v86];
    v88 = &v73[v86];
    v89 = swift_getEnumCaseMultiPayload();
    if (v89 == 2)
    {
      v7(v87, v88, v226);
      v40 = v223;
      v7(&v87[*(int *)(v212 + 36)], &v88[*(int *)(v212 + 36)], v226);
      sub_23DBBFAFC();
      *(_QWORD *)&v87[*(int *)(v91 + 48)] = *(_QWORD *)&v88[*(int *)(v91 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v89 == 1)
    {
      v7(v87, v88, v226);
      v40 = v223;
      v7(&v87[*(int *)(v212 + 36)], &v88[*(int *)(v212 + 36)], v226);
      sub_23DBBFA90();
      *(_QWORD *)&v87[*(int *)(v90 + 48)] = *(_QWORD *)&v88[*(int *)(v90 + 48)];
      *(_QWORD *)&v87[*(int *)(v90 + 64)] = *(_QWORD *)&v88[*(int *)(v90 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
    }
    v92 = *(int *)(v47 + 24);
    v93 = &v72[v92];
    v94 = &v73[v92];
    if (v214(&v73[v92], 1, v219))
    {
      sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    }
    else
    {
      v96 = *(void (**)(char *, char *, uint64_t))(v213 + 16);
      v96(v93, v94, v34);
      v97 = v219[5];
      v98 = &v93[v97];
      v99 = &v94[v97];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v101 = v100;
      v102 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v100 - 8) + 16);
      v103 = v99;
      v7 = v210;
      v102(v98, v103, v100);
      v96(&v93[v219[6]], &v94[v219[6]], v222);
      v47 = v211;
      v102(&v93[v219[7]], &v94[v219[7]], v101);
      v34 = v222;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v208 + 56))(v93, 0, 1, v219);
    }
    v104 = v225;
    v105 = v220[10];
    v106 = &a1[v105];
    v107 = &v221[v105];
    v7(&a1[v105], &v221[v105], v226);
    ((void (*)(char *, char *, uint64_t))v217)(&v106[v25[5]], &v107[v25[5]], v218);
    v108 = v25[6];
    v109 = &v106[v108];
    v110 = &v107[v108];
    if (v216(&v107[v108], 1, v34))
    {
      sub_23DBB29B8();
      memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v109, v110, v34);
      v40 = v223;
      v104 = v225;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v213 + 56))(v109, 0, 1, v34);
    }
    v112 = v25[7];
    v113 = &v106[v112];
    v114 = &v107[v112];
    if (v215(&v107[v112], 1, v40))
    {
      sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v113, v114, v40);
      v104 = v225;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v113, 0, 1, v40);
    }
    v116 = v25[8];
    v117 = &v106[v116];
    v118 = &v107[v116];
    if (v224(&v107[v116], 1, v104))
    {
      sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v209 + 16))(v117, v118, v104);
      v47 = v211;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v117, 0, 1, v104);
    }
    v106[v25[9]] = v107[v25[9]];
    v120 = *(int *)(v47 + 20);
    v121 = &v106[v120];
    v122 = &v107[v120];
    v123 = swift_getEnumCaseMultiPayload();
    if (v123 == 2)
    {
      v7(v121, v122, v226);
      v40 = v223;
      v7(&v121[*(int *)(v212 + 36)], &v122[*(int *)(v212 + 36)], v226);
      sub_23DBBFAFC();
      *(_QWORD *)&v121[*(int *)(v125 + 48)] = *(_QWORD *)&v122[*(int *)(v125 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v123 == 1)
    {
      v7(v121, v122, v226);
      v40 = v223;
      v7(&v121[*(int *)(v212 + 36)], &v122[*(int *)(v212 + 36)], v226);
      sub_23DBBFA90();
      *(_QWORD *)&v121[*(int *)(v124 + 48)] = *(_QWORD *)&v122[*(int *)(v124 + 48)];
      *(_QWORD *)&v121[*(int *)(v124 + 64)] = *(_QWORD *)&v122[*(int *)(v124 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v121, v122, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
    }
    v126 = *(int *)(v47 + 24);
    v127 = &v106[v126];
    v128 = &v107[v126];
    if (v214(&v107[v126], 1, v219))
    {
      sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
    }
    else
    {
      v130 = *(void (**)(char *, char *, uint64_t))(v213 + 16);
      v130(v127, v128, v34);
      v131 = v219[5];
      v132 = &v127[v131];
      v133 = &v128[v131];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v135 = v134;
      v136 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16);
      v137 = v133;
      v7 = v210;
      v136(v132, v137, v134);
      v130(&v127[v219[6]], &v128[v219[6]], v222);
      v47 = v211;
      v136(&v127[v219[7]], &v128[v219[7]], v135);
      v34 = v222;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v208 + 56))(v127, 0, 1, v219);
    }
    v138 = v225;
    v139 = v220[11];
    v140 = &a1[v139];
    v141 = &v221[v139];
    v7(&a1[v139], &v221[v139], v226);
    ((void (*)(char *, char *, uint64_t))v217)(&v140[v25[5]], &v141[v25[5]], v218);
    v142 = v25[6];
    v143 = &v140[v142];
    v144 = &v141[v142];
    if (v216(&v141[v142], 1, v34))
    {
      sub_23DBB29B8();
      memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v143, v144, v34);
      v40 = v223;
      v138 = v225;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v213 + 56))(v143, 0, 1, v34);
    }
    v146 = v25[7];
    v147 = &v140[v146];
    v148 = &v141[v146];
    if (v215(&v141[v146], 1, v40))
    {
      sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v147, v148, v40);
      v138 = v225;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v147, 0, 1, v40);
    }
    v150 = v25[8];
    v151 = &v140[v150];
    v152 = &v141[v150];
    if (v224(&v141[v150], 1, v138))
    {
      sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v151, v152, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v209 + 16))(v151, v152, v138);
      v47 = v211;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v151, 0, 1, v138);
    }
    v140[v25[9]] = v141[v25[9]];
    v154 = *(int *)(v47 + 20);
    v155 = &v140[v154];
    v156 = &v141[v154];
    v157 = swift_getEnumCaseMultiPayload();
    if (v157 == 2)
    {
      v7(v155, v156, v226);
      v40 = v223;
      v7(&v155[*(int *)(v212 + 36)], &v156[*(int *)(v212 + 36)], v226);
      sub_23DBBFAFC();
      *(_QWORD *)&v155[*(int *)(v159 + 48)] = *(_QWORD *)&v156[*(int *)(v159 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v157 == 1)
    {
      v7(v155, v156, v226);
      v40 = v223;
      v7(&v155[*(int *)(v212 + 36)], &v156[*(int *)(v212 + 36)], v226);
      sub_23DBBFA90();
      *(_QWORD *)&v155[*(int *)(v158 + 48)] = *(_QWORD *)&v156[*(int *)(v158 + 48)];
      *(_QWORD *)&v155[*(int *)(v158 + 64)] = *(_QWORD *)&v156[*(int *)(v158 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
    }
    v160 = *(int *)(v47 + 24);
    v161 = &v140[v160];
    v162 = &v141[v160];
    if (v214(&v141[v160], 1, v219))
    {
      sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v163 - 8) + 64));
    }
    else
    {
      v164 = *(void (**)(char *, char *, uint64_t))(v213 + 16);
      v164(v161, v162, v34);
      v165 = v219[5];
      v166 = &v161[v165];
      v167 = &v162[v165];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v169 = v168;
      v170 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v168 - 8) + 16);
      v170(v166, v167, v168);
      v164(&v161[v219[6]], &v162[v219[6]], v222);
      v47 = v211;
      v170(&v161[v219[7]], &v162[v219[7]], v169);
      v34 = v222;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v208 + 56))(v161, 0, 1, v219);
    }
    v171 = v220[12];
    v172 = &a1[v171];
    v173 = &v221[v171];
    v210(&a1[v171], &v221[v171], v226);
    ((void (*)(char *, char *, uint64_t))v217)(&v172[v25[5]], &v173[v25[5]], v218);
    v174 = v25[6];
    v175 = &v172[v174];
    v176 = &v173[v174];
    v177 = v225;
    if (v216(&v173[v174], 1, v34))
    {
      sub_23DBB29B8();
      memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v178 - 8) + 64));
      v179 = v213;
    }
    else
    {
      v179 = v213;
      (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v175, v176, v34);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v213 + 56))(v175, 0, 1, v34);
    }
    v180 = v25[7];
    v181 = &v172[v180];
    v182 = &v173[v180];
    if (v215(&v173[v180], 1, v40))
    {
      sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v181, v182, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v181, v182, v40);
      v177 = v225;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v181, 0, 1, v40);
    }
    v184 = v25[8];
    v185 = &v172[v184];
    v186 = &v173[v184];
    if (v224(&v173[v184], 1, v177))
    {
      sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v187 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v209 + 16))(v185, v186, v177);
      v47 = v211;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v185, 0, 1, v177);
    }
    v172[v25[9]] = v173[v25[9]];
    v188 = *(int *)(v47 + 20);
    v189 = &v172[v188];
    v190 = &v173[v188];
    v191 = swift_getEnumCaseMultiPayload();
    if (v191 == 2)
    {
      v210(v189, v190, v226);
      v210(&v189[*(int *)(v212 + 36)], &v190[*(int *)(v212 + 36)], v226);
      v34 = v222;
      sub_23DBBFAFC();
      *(_QWORD *)&v189[*(int *)(v193 + 48)] = *(_QWORD *)&v190[*(int *)(v193 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v191 == 1)
    {
      v210(v189, v190, v226);
      v210(&v189[*(int *)(v212 + 36)], &v190[*(int *)(v212 + 36)], v226);
      v34 = v222;
      sub_23DBBFA90();
      *(_QWORD *)&v189[*(int *)(v192 + 48)] = *(_QWORD *)&v190[*(int *)(v192 + 48)];
      *(_QWORD *)&v189[*(int *)(v192 + 64)] = *(_QWORD *)&v190[*(int *)(v192 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
    }
    v194 = *(int *)(v47 + 24);
    v195 = &v172[v194];
    v196 = &v173[v194];
    if (v214(&v173[v194], 1, v219))
    {
      sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
    }
    else
    {
      v198 = *(void (**)(char *, char *, uint64_t))(v179 + 16);
      v198(v195, v196, v34);
      v199 = v219[5];
      v200 = &v195[v199];
      v201 = &v196[v199];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v203 = v202;
      v204 = v34;
      v205 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v202 - 8) + 16);
      v205(v200, v201, v202);
      v198(&v195[v219[6]], &v196[v219[6]], v204);
      v205(&v195[v219[7]], &v196[v219[7]], v203);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v208 + 56))(v195, 0, 1, v219);
    }
  }
  return a1;
}

uint64_t destroy for SleepingSampleDaySummary(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t result;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int (*v86)(uint64_t, uint64_t, int *);
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v88)(uint64_t, uint64_t, uint64_t);
  void (*v89)(uint64_t);
  uint64_t v90;
  int *v91;
  uint64_t v92;
  unsigned int (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);

  v4 = sub_23DC2A154();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v5(v6, v4);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v8 = v7;
  v5(v6 + *(int *)(v7 + 36), v4);
  v9 = a1 + a2[6];
  v10 = sub_23DC29E48();
  v82 = *(_QWORD *)(v10 - 8);
  v84 = v10;
  v93 = *(unsigned int (**)(uint64_t, uint64_t))(v82 + 48);
  if (!v93(v9, 1))
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v9, v84);
  v91 = a2;
  v92 = a1;
  v11 = a1 + a2[8];
  v5(v11, v4);
  v12 = (int *)type metadata accessor for SleepingSampleAggregate();
  v13 = v11 + v12[5];
  v14 = sub_23DC29F80();
  v89 = *(void (**)(uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v90 = v14;
  v89(v13);
  v15 = v11 + v12[6];
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v17 = v16;
  v85 = *(_QWORD *)(v16 - 8);
  v88 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  if (!v88(v15, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v15, v17);
  v18 = v11 + v12[7];
  v19 = sub_23DC29BF0();
  v81 = *(_QWORD *)(v19 - 8);
  v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
  if (!v87(v18, 1, v19))
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v18, v19);
  v94 = v19;
  v20 = v11 + v12[8];
  v21 = v84;
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v93)(v20, 1, v84))
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v20, v84);
  v22 = type metadata accessor for SleepingSampleBaselineComparison();
  v23 = v11 + *(int *)(v22 + 20);
  type metadata accessor for SleepingSampleBaselineAvailability();
  if (swift_getEnumCaseMultiPayload() - 1 <= 1)
  {
    v5(v23, v4);
    v5(v23 + *(int *)(v8 + 36), v4);
  }
  v24 = v11 + *(int *)(v22 + 24);
  v25 = (int *)type metadata accessor for SleepingSampleBaseline();
  v86 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v25 - 1) + 48);
  v80 = v8;
  v83 = v17;
  if (!v86(v24, 1, v25))
  {
    v26 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
    v26(v24, v17);
    v27 = v24 + v25[5];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v29 = v28;
    v30 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8);
    v30(v27, v28);
    v26(v24 + v25[6], v83);
    v31 = v29;
    v17 = v83;
    v21 = v84;
    v30(v24 + v25[7], v31);
    v8 = v80;
  }
  v32 = v92 + v91[9];
  v5(v32, v4);
  ((void (*)(uint64_t, uint64_t))v89)(v32 + v12[5], v90);
  v33 = v32 + v12[6];
  if (!v88(v33, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v33, v17);
  v34 = v32 + v12[7];
  if (!v87(v34, 1, v94))
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v34, v94);
  v35 = v32 + v12[8];
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v93)(v35, 1, v21))
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v35, v21);
  v36 = v32 + *(int *)(v22 + 20);
  if (swift_getEnumCaseMultiPayload() - 1 <= 1)
  {
    v5(v36, v4);
    v5(v36 + *(int *)(v8 + 36), v4);
  }
  v37 = v32 + *(int *)(v22 + 24);
  if (!v86(v37, 1, v25))
  {
    v38 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
    v38(v37, v17);
    v39 = v37 + v25[5];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v41 = v40;
    v42 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 8);
    v43 = v39;
    v17 = v83;
    v42(v43, v41);
    v38(v37 + v25[6], v83);
    v21 = v84;
    v42(v37 + v25[7], v41);
    v8 = v80;
  }
  v44 = v92 + v91[10];
  v5(v44, v4);
  ((void (*)(uint64_t, uint64_t))v89)(v44 + v12[5], v90);
  v45 = v44 + v12[6];
  if (!v88(v45, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v45, v17);
  v46 = v44 + v12[7];
  if (!v87(v46, 1, v94))
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v46, v94);
  v47 = v44 + v12[8];
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v93)(v47, 1, v21))
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v47, v21);
  v48 = v44 + *(int *)(v22 + 20);
  if (swift_getEnumCaseMultiPayload() - 1 <= 1)
  {
    v5(v48, v4);
    v5(v48 + *(int *)(v8 + 36), v4);
  }
  v49 = v44 + *(int *)(v22 + 24);
  if (!v86(v49, 1, v25))
  {
    v50 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
    v50(v49, v17);
    v51 = v49 + v25[5];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v53 = v52;
    v54 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8);
    v55 = v51;
    v17 = v83;
    v54(v55, v53);
    v50(v49 + v25[6], v83);
    v21 = v84;
    v54(v49 + v25[7], v53);
    v8 = v80;
  }
  v56 = v92 + v91[11];
  v5(v56, v4);
  ((void (*)(uint64_t, uint64_t))v89)(v56 + v12[5], v90);
  v57 = v56 + v12[6];
  if (!v88(v57, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v57, v17);
  v58 = v56 + v12[7];
  if (!v87(v58, 1, v94))
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v58, v94);
  v59 = v56 + v12[8];
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v93)(v59, 1, v21))
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v59, v21);
  v60 = v56 + *(int *)(v22 + 20);
  if (swift_getEnumCaseMultiPayload() - 1 <= 1)
  {
    v5(v60, v4);
    v5(v60 + *(int *)(v8 + 36), v4);
  }
  v61 = v56 + *(int *)(v22 + 24);
  if (!v86(v61, 1, v25))
  {
    v62 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
    v62(v61, v17);
    v63 = v61 + v25[5];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v65 = v64;
    v66 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 8);
    v67 = v63;
    v17 = v83;
    v66(v67, v65);
    v62(v61 + v25[6], v83);
    v66(v61 + v25[7], v65);
    v8 = v80;
  }
  v68 = v17;
  v69 = v92 + v91[12];
  v5(v69, v4);
  ((void (*)(uint64_t, uint64_t))v89)(v69 + v12[5], v90);
  v70 = v69 + v12[6];
  if (!v88(v70, 1, v68))
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v70, v83);
  v71 = v69 + v12[7];
  if (!v87(v71, 1, v94))
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v71, v94);
  v72 = v69 + v12[8];
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v93)(v72, 1, v84))
    (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v72, v84);
  v73 = v69 + *(int *)(v22 + 20);
  if (swift_getEnumCaseMultiPayload() - 1 <= 1)
  {
    v5(v73, v4);
    v5(v73 + *(int *)(v8 + 36), v4);
  }
  v74 = v69 + *(int *)(v22 + 24);
  result = ((uint64_t (*)(uint64_t, uint64_t, int *))v86)(v74, 1, v25);
  if (!(_DWORD)result)
  {
    v76 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
    v76(v74, v83);
    v77 = v74 + v25[5];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v79 = v78;
    v95 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 8);
    v95(v77, v78);
    v76(v74 + v25[6], v83);
    return ((uint64_t (*)(uint64_t, uint64_t))v95)(v74 + v25[7], v79);
  }
  return result;
}

uint64_t initializeWithCopy for SleepingSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  void (*v68)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const void *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const void *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  const void *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  const void *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  void (*v128)(char *, char *, uint64_t);
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const void *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const void *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const void *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  void (*v162)(char *, char *, uint64_t);
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(char *, char *, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  const void *v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  const void *v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  const void *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  void (*v196)(char *, char *, uint64_t);
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  void (*v203)(char *, char *, uint64_t);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void (*v208)(uint64_t, uint64_t, uint64_t);
  uint64_t v209;
  uint64_t v210;
  unsigned int (*v211)(char *, uint64_t);
  unsigned int (*v212)(const void *, uint64_t, uint64_t);
  unsigned int (*v213)(const void *, uint64_t, uint64_t);
  void (*v214)(uint64_t, uint64_t);
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int *v219;
  uint64_t v220;
  unsigned int (*v221)(const void *, uint64_t, uint64_t);
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v210 = v11;
  v224 = v6;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v219 = a3;
  v12 = a3[6];
  v223 = a1;
  v13 = (void *)(a1 + v12);
  v220 = a2;
  v14 = (const void *)(a2 + v12);
  v15 = sub_23DC29E48();
  v16 = *(_QWORD *)(v15 - 8);
  v221 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  v207 = v16;
  if (v221(v14, 1, v15))
  {
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = v223 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = v223 + v19;
  v23 = a2 + v19;
  v7(v223 + v19, a2 + v19, v6);
  v24 = (int *)type metadata accessor for SleepingSampleAggregate();
  v25 = v24[5];
  v26 = v22 + v25;
  v27 = v23 + v25;
  v28 = sub_23DC29F80();
  v214 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
  v215 = v28;
  v214(v26, v27);
  v29 = v24[6];
  v30 = (void *)(v22 + v29);
  v31 = (const void *)(v23 + v29);
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v33 = v32;
  v34 = *(_QWORD *)(v32 - 8);
  v213 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48);
  v216 = v34;
  if (v213(v31, 1, v32))
  {
    sub_23DBB29B8();
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 16))(v30, v31, v33);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
  }
  v36 = v24[7];
  v37 = (void *)(v22 + v36);
  v38 = (const void *)(v23 + v36);
  v39 = sub_23DC29BF0();
  v40 = *(_QWORD *)(v39 - 8);
  v212 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48);
  if (v212(v38, 1, v39))
  {
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v37, v38, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  v205 = v40;
  v42 = v24[8];
  v43 = (void *)(v22 + v42);
  v44 = (const void *)(v23 + v42);
  if (v221((const void *)(v23 + v42), 1, v15))
  {
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v207 + 16))(v43, v44, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v43, 0, 1, v15);
  }
  *(_BYTE *)(v22 + v24[9]) = *(_BYTE *)(v23 + v24[9]);
  v226 = type metadata accessor for SleepingSampleBaselineComparison();
  v46 = *(int *)(v226 + 20);
  v47 = (char *)(v22 + v46);
  v48 = (char *)(v23 + v46);
  v225 = type metadata accessor for SleepingSampleBaselineAvailability();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v217 = v39;
  if (EnumCaseMultiPayload == 2)
  {
    v7((uint64_t)v47, (uint64_t)v48, v224);
    v7((uint64_t)&v47[*(int *)(v210 + 36)], (uint64_t)&v48[*(int *)(v210 + 36)], v224);
    sub_23DBBFAFC();
    *(_QWORD *)&v47[*(int *)(v51 + 48)] = *(_QWORD *)&v48[*(int *)(v51 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7((uint64_t)v47, (uint64_t)v48, v224);
    v7((uint64_t)&v47[*(int *)(v210 + 36)], (uint64_t)&v48[*(int *)(v210 + 36)], v224);
    sub_23DBBFA90();
    *(_QWORD *)&v47[*(int *)(v50 + 48)] = *(_QWORD *)&v48[*(int *)(v50 + 48)];
    *(_QWORD *)&v47[*(int *)(v50 + 64)] = *(_QWORD *)&v48[*(int *)(v50 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
  }
  v52 = *(int *)(v226 + 24);
  v53 = (char *)(v22 + v52);
  v54 = (char *)(v23 + v52);
  v55 = type metadata accessor for SleepingSampleBaseline();
  v56 = *(_QWORD *)(v55 - 8);
  v222 = v55;
  v211 = *(unsigned int (**)(char *, uint64_t))(v56 + 48);
  v208 = v7;
  v209 = v15;
  v218 = v33;
  v206 = v56;
  if (v211(v54, 1))
  {
    sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    v58 = *(void (**)(char *, char *, uint64_t))(v216 + 16);
    v58(v53, v54, v33);
    v59 = v222;
    v60 = *(int *)(v222 + 20);
    v61 = v56;
    v62 = &v53[v60];
    v63 = &v54[v60];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v65 = v64;
    v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 16);
    v66(v62, v63, v64);
    v58(&v53[*(int *)(v59 + 24)], &v54[*(int *)(v59 + 24)], v218);
    v67 = v65;
    v7 = v208;
    v15 = v209;
    v66(&v53[*(int *)(v59 + 28)], &v54[*(int *)(v59 + 28)], v67);
    v68 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56);
    v39 = v217;
    v33 = v218;
    v68(v53, 0, 1, v222);
  }
  v69 = v219[9];
  v70 = v223 + v69;
  v71 = v220 + v69;
  v7(v223 + v69, v220 + v69, v224);
  ((void (*)(uint64_t, uint64_t, uint64_t))v214)(v70 + v24[5], v71 + v24[5], v215);
  v72 = v24[6];
  v73 = (void *)(v70 + v72);
  v74 = (const void *)(v71 + v72);
  if (v213((const void *)(v71 + v72), 1, v33))
  {
    sub_23DBB29B8();
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v216 + 16))(v73, v74, v33);
    v15 = v209;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v73, 0, 1, v33);
  }
  v76 = v24[7];
  v77 = (void *)(v70 + v76);
  v78 = (const void *)(v71 + v76);
  if (v212((const void *)(v71 + v76), 1, v39))
  {
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v205 + 16))(v77, v78, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v205 + 56))(v77, 0, 1, v39);
  }
  v80 = v24[8];
  v81 = (void *)(v70 + v80);
  v82 = (const void *)(v71 + v80);
  if (v221((const void *)(v71 + v80), 1, v15))
  {
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v207 + 16))(v81, v82, v15);
    v39 = v217;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v81, 0, 1, v15);
  }
  *(_BYTE *)(v70 + v24[9]) = *(_BYTE *)(v71 + v24[9]);
  v84 = *(int *)(v226 + 20);
  v85 = (char *)(v70 + v84);
  v86 = (char *)(v71 + v84);
  v87 = swift_getEnumCaseMultiPayload();
  if (v87 == 2)
  {
    v7((uint64_t)v85, (uint64_t)v86, v224);
    v39 = v217;
    v7((uint64_t)&v85[*(int *)(v210 + 36)], (uint64_t)&v86[*(int *)(v210 + 36)], v224);
    sub_23DBBFAFC();
    *(_QWORD *)&v85[*(int *)(v89 + 48)] = *(_QWORD *)&v86[*(int *)(v89 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v87 == 1)
  {
    v7((uint64_t)v85, (uint64_t)v86, v224);
    v39 = v217;
    v7((uint64_t)&v85[*(int *)(v210 + 36)], (uint64_t)&v86[*(int *)(v210 + 36)], v224);
    sub_23DBBFA90();
    *(_QWORD *)&v85[*(int *)(v88 + 48)] = *(_QWORD *)&v86[*(int *)(v88 + 48)];
    *(_QWORD *)&v85[*(int *)(v88 + 64)] = *(_QWORD *)&v86[*(int *)(v88 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
  }
  v90 = *(int *)(v226 + 24);
  v91 = (char *)(v70 + v90);
  v92 = (char *)(v71 + v90);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v211)(v92, 1, v222))
  {
    sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
  }
  else
  {
    v94 = *(void (**)(char *, char *, uint64_t))(v216 + 16);
    v94(v91, v92, v218);
    v95 = v222;
    v96 = *(int *)(v222 + 20);
    v97 = &v91[v96];
    v98 = &v92[v96];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v100 = v99;
    v101 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 16);
    v101(v97, v98, v99);
    v94(&v91[*(int *)(v95 + 24)], &v92[*(int *)(v95 + 24)], v218);
    v33 = v218;
    v102 = v100;
    v15 = v209;
    v101(&v91[*(int *)(v95 + 28)], &v92[*(int *)(v95 + 28)], v102);
    v7 = v208;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v91, 0, 1, v222);
  }
  v103 = v219[10];
  v104 = v223 + v103;
  v105 = v220 + v103;
  v7(v223 + v103, v220 + v103, v224);
  ((void (*)(uint64_t, uint64_t, uint64_t))v214)(v104 + v24[5], v105 + v24[5], v215);
  v106 = v24[6];
  v107 = (void *)(v104 + v106);
  v108 = (const void *)(v105 + v106);
  if (v213((const void *)(v105 + v106), 1, v33))
  {
    sub_23DBB29B8();
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v216 + 16))(v107, v108, v33);
    v15 = v209;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v107, 0, 1, v33);
  }
  v110 = v24[7];
  v111 = (void *)(v104 + v110);
  v112 = (const void *)(v105 + v110);
  if (v212((const void *)(v105 + v110), 1, v39))
  {
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v205 + 16))(v111, v112, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v205 + 56))(v111, 0, 1, v39);
  }
  v114 = v24[8];
  v115 = (void *)(v104 + v114);
  v116 = (const void *)(v105 + v114);
  if (v221((const void *)(v105 + v114), 1, v15))
  {
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v207 + 16))(v115, v116, v15);
    v39 = v217;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v115, 0, 1, v15);
  }
  *(_BYTE *)(v104 + v24[9]) = *(_BYTE *)(v105 + v24[9]);
  v118 = *(int *)(v226 + 20);
  v119 = (char *)(v104 + v118);
  v120 = (char *)(v105 + v118);
  v121 = swift_getEnumCaseMultiPayload();
  if (v121 == 2)
  {
    v7((uint64_t)v119, (uint64_t)v120, v224);
    v39 = v217;
    v7((uint64_t)&v119[*(int *)(v210 + 36)], (uint64_t)&v120[*(int *)(v210 + 36)], v224);
    sub_23DBBFAFC();
    *(_QWORD *)&v119[*(int *)(v123 + 48)] = *(_QWORD *)&v120[*(int *)(v123 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v121 == 1)
  {
    v7((uint64_t)v119, (uint64_t)v120, v224);
    v39 = v217;
    v7((uint64_t)&v119[*(int *)(v210 + 36)], (uint64_t)&v120[*(int *)(v210 + 36)], v224);
    sub_23DBBFA90();
    *(_QWORD *)&v119[*(int *)(v122 + 48)] = *(_QWORD *)&v120[*(int *)(v122 + 48)];
    *(_QWORD *)&v119[*(int *)(v122 + 64)] = *(_QWORD *)&v120[*(int *)(v122 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
  }
  v124 = *(int *)(v226 + 24);
  v125 = (char *)(v104 + v124);
  v126 = (char *)(v105 + v124);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v211)(v126, 1, v222))
  {
    sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
  }
  else
  {
    v128 = *(void (**)(char *, char *, uint64_t))(v216 + 16);
    v128(v125, v126, v218);
    v129 = v222;
    v130 = *(int *)(v222 + 20);
    v131 = &v125[v130];
    v132 = &v126[v130];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v134 = v133;
    v135 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 16);
    v135(v131, v132, v133);
    v128(&v125[*(int *)(v129 + 24)], &v126[*(int *)(v129 + 24)], v218);
    v33 = v218;
    v136 = v134;
    v15 = v209;
    v135(&v125[*(int *)(v129 + 28)], &v126[*(int *)(v129 + 28)], v136);
    v7 = v208;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v125, 0, 1, v222);
  }
  v137 = v219[11];
  v138 = v223 + v137;
  v139 = v220 + v137;
  v7(v223 + v137, v220 + v137, v224);
  ((void (*)(uint64_t, uint64_t, uint64_t))v214)(v138 + v24[5], v139 + v24[5], v215);
  v140 = v24[6];
  v141 = (void *)(v138 + v140);
  v142 = (const void *)(v139 + v140);
  if (v213((const void *)(v139 + v140), 1, v33))
  {
    sub_23DBB29B8();
    memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v216 + 16))(v141, v142, v33);
    v15 = v209;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v141, 0, 1, v33);
  }
  v144 = v24[7];
  v145 = (void *)(v138 + v144);
  v146 = (const void *)(v139 + v144);
  if (v212((const void *)(v139 + v144), 1, v39))
  {
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v205 + 16))(v145, v146, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v205 + 56))(v145, 0, 1, v39);
  }
  v148 = v24[8];
  v149 = (void *)(v138 + v148);
  v150 = (const void *)(v139 + v148);
  if (v221((const void *)(v139 + v148), 1, v15))
  {
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v207 + 16))(v149, v150, v15);
    v39 = v217;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v149, 0, 1, v15);
  }
  *(_BYTE *)(v138 + v24[9]) = *(_BYTE *)(v139 + v24[9]);
  v152 = *(int *)(v226 + 20);
  v153 = (char *)(v138 + v152);
  v154 = (char *)(v139 + v152);
  v155 = swift_getEnumCaseMultiPayload();
  if (v155 == 2)
  {
    v7((uint64_t)v153, (uint64_t)v154, v224);
    v39 = v217;
    v7((uint64_t)&v153[*(int *)(v210 + 36)], (uint64_t)&v154[*(int *)(v210 + 36)], v224);
    sub_23DBBFAFC();
    *(_QWORD *)&v153[*(int *)(v157 + 48)] = *(_QWORD *)&v154[*(int *)(v157 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v155 == 1)
  {
    v7((uint64_t)v153, (uint64_t)v154, v224);
    v39 = v217;
    v7((uint64_t)&v153[*(int *)(v210 + 36)], (uint64_t)&v154[*(int *)(v210 + 36)], v224);
    sub_23DBBFA90();
    *(_QWORD *)&v153[*(int *)(v156 + 48)] = *(_QWORD *)&v154[*(int *)(v156 + 48)];
    *(_QWORD *)&v153[*(int *)(v156 + 64)] = *(_QWORD *)&v154[*(int *)(v156 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
  }
  v158 = *(int *)(v226 + 24);
  v159 = (char *)(v138 + v158);
  v160 = (char *)(v139 + v158);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v211)(v160, 1, v222))
  {
    sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
  }
  else
  {
    v162 = *(void (**)(char *, char *, uint64_t))(v216 + 16);
    v162(v159, v160, v218);
    v163 = v222;
    v164 = *(int *)(v222 + 20);
    v165 = &v159[v164];
    v166 = &v160[v164];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v168 = v167;
    v169 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 16);
    v169(v165, v166, v167);
    v162(&v159[*(int *)(v163 + 24)], &v160[*(int *)(v163 + 24)], v218);
    v33 = v218;
    v170 = v168;
    v15 = v209;
    v169(&v159[*(int *)(v163 + 28)], &v160[*(int *)(v163 + 28)], v170);
    v7 = v208;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v159, 0, 1, v222);
  }
  v171 = v219[12];
  v172 = v223 + v171;
  v173 = v220 + v171;
  v7(v223 + v171, v220 + v171, v224);
  ((void (*)(uint64_t, uint64_t, uint64_t))v214)(v172 + v24[5], v173 + v24[5], v215);
  v174 = v24[6];
  v175 = (void *)(v172 + v174);
  v176 = (const void *)(v173 + v174);
  if (v213((const void *)(v173 + v174), 1, v33))
  {
    sub_23DBB29B8();
    memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v216 + 16))(v175, v176, v33);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v175, 0, 1, v33);
  }
  v178 = v24[7];
  v179 = (void *)(v172 + v178);
  v180 = (const void *)(v173 + v178);
  if (v212((const void *)(v173 + v178), 1, v39))
  {
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v181 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v205 + 16))(v179, v180, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v205 + 56))(v179, 0, 1, v39);
  }
  v182 = v24[8];
  v183 = (void *)(v172 + v182);
  v184 = (const void *)(v173 + v182);
  if (v221((const void *)(v173 + v182), 1, v15))
  {
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v207 + 16))(v183, v184, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v183, 0, 1, v15);
  }
  *(_BYTE *)(v172 + v24[9]) = *(_BYTE *)(v173 + v24[9]);
  v186 = *(int *)(v226 + 20);
  v187 = (char *)(v172 + v186);
  v188 = (char *)(v173 + v186);
  v189 = swift_getEnumCaseMultiPayload();
  if (v189 == 2)
  {
    v208((uint64_t)v187, (uint64_t)v188, v224);
    v208((uint64_t)&v187[*(int *)(v210 + 36)], (uint64_t)&v188[*(int *)(v210 + 36)], v224);
    sub_23DBBFAFC();
    *(_QWORD *)&v187[*(int *)(v191 + 48)] = *(_QWORD *)&v188[*(int *)(v191 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v189 == 1)
  {
    v208((uint64_t)v187, (uint64_t)v188, v224);
    v208((uint64_t)&v187[*(int *)(v210 + 36)], (uint64_t)&v188[*(int *)(v210 + 36)], v224);
    sub_23DBBFA90();
    *(_QWORD *)&v187[*(int *)(v190 + 48)] = *(_QWORD *)&v188[*(int *)(v190 + 48)];
    *(_QWORD *)&v187[*(int *)(v190 + 64)] = *(_QWORD *)&v188[*(int *)(v190 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v187, v188, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
  }
  v192 = *(int *)(v226 + 24);
  v193 = (char *)(v172 + v192);
  v194 = (char *)(v173 + v192);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v211)(v194, 1, v222))
  {
    sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v193, v194, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
  }
  else
  {
    v196 = *(void (**)(char *, char *, uint64_t))(v216 + 16);
    v196(v193, v194, v218);
    v197 = v222;
    v198 = *(int *)(v222 + 20);
    v199 = &v193[v198];
    v200 = &v194[v198];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v202 = v201;
    v203 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v201 - 8) + 16);
    v203(v199, v200, v201);
    v196(&v193[*(int *)(v197 + 24)], &v194[*(int *)(v197 + 24)], v218);
    v203(&v193[*(int *)(v197 + 28)], &v194[*(int *)(v197 + 28)], v202);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v193, 0, 1, v222);
  }
  return v223;
}

uint64_t assignWithCopy for SleepingSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t (*v44)(void *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const void *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  int EnumCaseMultiPayload;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  int *v68;
  uint64_t (*v69)(char *, uint64_t, int *);
  int v70;
  int v71;
  uint64_t (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const void *v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const void *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  const void *v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  int v114;
  void (*v115)(char *, char *, uint64_t);
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  int v122;
  int v123;
  uint64_t (*v124)(uint64_t, uint64_t);
  uint64_t v125;
  void (*v126)(char *, char *, uint64_t);
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(char *, char *, uint64_t);
  void (*v133)(char *, char *, uint64_t);
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(char *, char *, uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  const void *v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const void *v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  const void *v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  int v166;
  void (*v167)(char *, char *, uint64_t);
  uint64_t v168;
  void (*v169)(char *, char *, uint64_t);
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  int v174;
  int v175;
  uint64_t (*v176)(uint64_t, uint64_t);
  uint64_t v177;
  void (*v178)(char *, char *, uint64_t);
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  void (*v184)(char *, char *, uint64_t);
  void (*v185)(char *, char *, uint64_t);
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)(char *, char *, uint64_t);
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  const void *v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  const void *v203;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  const void *v209;
  int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  int v218;
  void (*v219)(char *, char *, uint64_t);
  uint64_t v220;
  void (*v221)(char *, char *, uint64_t);
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  int v226;
  int v227;
  uint64_t (*v228)(uint64_t, uint64_t);
  uint64_t v229;
  void (*v230)(char *, char *, uint64_t);
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  void (*v236)(char *, char *, uint64_t);
  void (*v237)(char *, char *, uint64_t);
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  void (*v243)(char *, char *, uint64_t);
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  const void *v249;
  int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  void *v254;
  const void *v255;
  int v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  const void *v261;
  int v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  int v270;
  void (*v271)(char *, char *, uint64_t);
  uint64_t v272;
  void (*v273)(char *, char *, uint64_t);
  uint64_t v274;
  uint64_t v275;
  char *v276;
  char *v277;
  int v278;
  int v279;
  uint64_t (*v280)(uint64_t, uint64_t);
  uint64_t v281;
  void (*v282)(char *, char *, uint64_t);
  uint64_t v283;
  char *v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  void (*v288)(char *, char *, uint64_t);
  void (*v289)(char *, char *, uint64_t);
  uint64_t v290;
  char *v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  void (*v295)(char *, char *, uint64_t);
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t (*v302)(char *, uint64_t, int *);
  uint64_t (*v303)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v304)(uint64_t, uint64_t, uint64_t);
  void (*v305)(uint64_t, uint64_t);
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void (*v309)(uint64_t, uint64_t, uint64_t);
  int *v310;
  uint64_t (*v311)(uint64_t, uint64_t, uint64_t);
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;

  v6 = sub_23DC2A154();
  v299 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v299 + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v298 = v11;
  v312 = v6;
  v309 = v7;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v310 = a3;
  v12 = a3[6];
  v315 = a2;
  v316 = a1;
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = sub_23DC29E48();
  v301 = *(_QWORD *)(v15 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v301 + 48);
  LODWORD(v6) = v16(v13, 1, v15);
  v314 = v15;
  v311 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
  v17 = v16(v14, 1, v15);
  if ((_DWORD)v6)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v301 + 16))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v301 + 8))(v13, v15);
LABEL_6:
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v301 + 24))(v13, v14, v15);
LABEL_7:
  v19 = a3[7];
  v20 = v316 + v19;
  v21 = (uint64_t *)(v315 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(_QWORD *)v20 = v22;
  v23 = a3[8];
  v24 = v316 + v23;
  v25 = v315 + v23;
  v7(v316 + v23, v315 + v23, v312);
  v26 = (int *)type metadata accessor for SleepingSampleAggregate();
  v27 = v26[5];
  v28 = v24 + v27;
  v29 = v25 + v27;
  v30 = sub_23DC29F80();
  v305 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24);
  v306 = v30;
  v305(v28, v29);
  v31 = v26[6];
  v32 = (void *)(v24 + v31);
  v33 = (void *)(v25 + v31);
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v35 = v34;
  v308 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v308 + 48);
  v37 = v36(v32, 1, v34);
  v304 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v36;
  v38 = v36(v33, 1, v35);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v308 + 16))(v32, v33, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v308 + 56))(v32, 0, 1, v35);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    (*(void (**)(void *, uint64_t))(v308 + 8))(v32, v35);
LABEL_12:
    sub_23DBB29B8();
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v308 + 24))(v32, v33, v35);
LABEL_13:
  v40 = v26[7];
  v41 = (void *)(v24 + v40);
  v42 = (void *)(v25 + v40);
  v43 = sub_23DC29BF0();
  v300 = *(_QWORD *)(v43 - 8);
  v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v300 + 48);
  v45 = v44(v41, 1, v43);
  v313 = v43;
  v303 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v44;
  v46 = v44(v42, 1, v43);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, void *, uint64_t))(v300 + 16))(v41, v42, v43);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v300 + 56))(v41, 0, 1, v43);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v41, v43);
LABEL_18:
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v300 + 24))(v41, v42, v43);
LABEL_19:
  v48 = v26[8];
  v49 = (void *)(v24 + v48);
  v50 = (const void *)(v25 + v48);
  v51 = v311(v24 + v48, 1, v314);
  v52 = v311((uint64_t)v50, 1, v314);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, const void *, uint64_t))(v301 + 16))(v49, v50, v314);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v49, 0, 1, v314);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v301 + 8))(v49, v314);
LABEL_24:
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, const void *, uint64_t))(v301 + 24))(v49, v50, v314);
LABEL_25:
  *(_BYTE *)(v24 + v26[9]) = *(_BYTE *)(v25 + v26[9]);
  v54 = type metadata accessor for SleepingSampleBaselineComparison();
  v55 = v54;
  if (v316 != v315)
  {
    v56 = *(int *)(v54 + 20);
    v57 = (char *)(v24 + v56);
    v58 = (char *)(v25 + v56);
    sub_23DBB2BB0(v24 + v56, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v59 = type metadata accessor for SleepingSampleBaselineAvailability();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v63 = *(void (**)(char *, char *, uint64_t))(v299 + 16);
      v63(v57, v58, v312);
      v63(&v57[*(int *)(v298 + 36)], &v58[*(int *)(v298 + 36)], v312);
      sub_23DBBFAFC();
      *(_QWORD *)&v57[*(int *)(v64 + 48)] = *(_QWORD *)&v58[*(int *)(v64 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v61 = *(void (**)(char *, char *, uint64_t))(v299 + 16);
      v61(v57, v58, v312);
      v61(&v57[*(int *)(v298 + 36)], &v58[*(int *)(v298 + 36)], v312);
      sub_23DBBFA90();
      *(_QWORD *)&v57[*(int *)(v62 + 48)] = *(_QWORD *)&v58[*(int *)(v62 + 48)];
      *(_QWORD *)&v57[*(int *)(v62 + 64)] = *(_QWORD *)&v58[*(int *)(v62 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
  }
  v65 = *(int *)(v55 + 24);
  v66 = (char *)(v24 + v65);
  v67 = (char *)(v25 + v65);
  v68 = (int *)type metadata accessor for SleepingSampleBaseline();
  v297 = *((_QWORD *)v68 - 1);
  v69 = *(uint64_t (**)(char *, uint64_t, int *))(v297 + 48);
  v70 = v69(v66, 1, v68);
  v302 = v69;
  v71 = v69(v67, 1, v68);
  v307 = v55;
  if (v70)
  {
    if (v71)
    {
      v72 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_36:
      sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, v72);
      memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      goto LABEL_43;
    }
    v74 = *(void (**)(char *, char *, uint64_t))(v308 + 16);
    v74(v66, v67, v35);
    v75 = v68[5];
    v76 = &v66[v75];
    v77 = &v67[v75];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v79 = v78;
    v80 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16);
    v80(v76, v77, v78);
    v74(&v66[v68[6]], &v67[v68[6]], v35);
    v80(&v66[v68[7]], &v67[v68[7]], v79);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v297 + 56))(v66, 0, 1, v68);
  }
  else
  {
    if (v71)
    {
      sub_23DBB2BB0((uint64_t)v66, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
      v72 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_36;
    }
    v81 = *(void (**)(char *, char *, uint64_t))(v308 + 24);
    v81(v66, v67, v35);
    v82 = v68[5];
    v83 = &v66[v82];
    v84 = &v67[v82];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v86 = v85;
    v87 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v85 - 8) + 24);
    v87(v83, v84, v85);
    v81(&v66[v68[6]], &v67[v68[6]], v35);
    v87(&v66[v68[7]], &v67[v68[7]], v86);
  }
LABEL_43:
  v88 = v310[9];
  v89 = v316 + v88;
  v90 = v315 + v88;
  v309(v316 + v88, v315 + v88, v312);
  ((void (*)(uint64_t, uint64_t, uint64_t))v305)(v89 + v26[5], v90 + v26[5], v306);
  v91 = v26[6];
  v92 = (void *)(v89 + v91);
  v93 = (const void *)(v90 + v91);
  v94 = v304(v89 + v91, 1, v35);
  v95 = v304((uint64_t)v93, 1, v35);
  if (v94)
  {
    if (!v95)
    {
      (*(void (**)(void *, const void *, uint64_t))(v308 + 16))(v92, v93, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v308 + 56))(v92, 0, 1, v35);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v95)
  {
    (*(void (**)(void *, uint64_t))(v308 + 8))(v92, v35);
LABEL_48:
    sub_23DBB29B8();
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(void *, const void *, uint64_t))(v308 + 24))(v92, v93, v35);
LABEL_49:
  v97 = v26[7];
  v98 = (void *)(v89 + v97);
  v99 = (const void *)(v90 + v97);
  v100 = v303(v89 + v97, 1, v313);
  v101 = v303((uint64_t)v99, 1, v313);
  if (v100)
  {
    if (!v101)
    {
      (*(void (**)(void *, const void *, uint64_t))(v300 + 16))(v98, v99, v313);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v300 + 56))(v98, 0, 1, v313);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v101)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v98, v313);
LABEL_54:
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(void *, const void *, uint64_t))(v300 + 24))(v98, v99, v313);
LABEL_55:
  v103 = v26[8];
  v104 = (void *)(v89 + v103);
  v105 = (const void *)(v90 + v103);
  v106 = v311(v89 + v103, 1, v314);
  v107 = v311((uint64_t)v105, 1, v314);
  if (v106)
  {
    v108 = v307;
    if (!v107)
    {
      (*(void (**)(void *, const void *, uint64_t))(v301 + 16))(v104, v105, v314);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v104, 0, 1, v314);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  v108 = v307;
  if (v107)
  {
    (*(void (**)(void *, uint64_t))(v301 + 8))(v104, v314);
LABEL_60:
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(void *, const void *, uint64_t))(v301 + 24))(v104, v105, v314);
LABEL_61:
  *(_BYTE *)(v89 + v26[9]) = *(_BYTE *)(v90 + v26[9]);
  if (v316 != v315)
  {
    v110 = *(int *)(v108 + 20);
    v111 = (char *)(v89 + v110);
    v112 = (char *)(v90 + v110);
    sub_23DBB2BB0(v89 + v110, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v113 = type metadata accessor for SleepingSampleBaselineAvailability();
    v114 = swift_getEnumCaseMultiPayload();
    if (v114 == 2)
    {
      v117 = *(void (**)(char *, char *, uint64_t))(v299 + 16);
      v117(v111, v112, v312);
      v117(&v111[*(int *)(v298 + 36)], &v112[*(int *)(v298 + 36)], v312);
      sub_23DBBFAFC();
      *(_QWORD *)&v111[*(int *)(v118 + 48)] = *(_QWORD *)&v112[*(int *)(v118 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v114 == 1)
    {
      v115 = *(void (**)(char *, char *, uint64_t))(v299 + 16);
      v115(v111, v112, v312);
      v115(&v111[*(int *)(v298 + 36)], &v112[*(int *)(v298 + 36)], v312);
      sub_23DBBFA90();
      *(_QWORD *)&v111[*(int *)(v116 + 48)] = *(_QWORD *)&v112[*(int *)(v116 + 48)];
      *(_QWORD *)&v111[*(int *)(v116 + 64)] = *(_QWORD *)&v112[*(int *)(v116 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
    }
  }
  v119 = *(int *)(v108 + 24);
  v120 = (char *)(v89 + v119);
  v121 = (char *)(v90 + v119);
  v122 = v302(v120, 1, v68);
  v123 = v302(v121, 1, v68);
  if (v122)
  {
    if (v123)
    {
      v124 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_72:
      sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, v124);
      memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v125 - 8) + 64));
      goto LABEL_78;
    }
    v126 = *(void (**)(char *, char *, uint64_t))(v308 + 16);
    v126(v120, v121, v35);
    v127 = v68[5];
    v128 = &v120[v127];
    v129 = &v121[v127];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v131 = v130;
    v132 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v130 - 8) + 16);
    v132(v128, v129, v130);
    v126(&v120[v68[6]], &v121[v68[6]], v35);
    v132(&v120[v68[7]], &v121[v68[7]], v131);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v297 + 56))(v120, 0, 1, v68);
  }
  else
  {
    if (v123)
    {
      sub_23DBB2BB0((uint64_t)v120, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
      v124 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_72;
    }
    v133 = *(void (**)(char *, char *, uint64_t))(v308 + 24);
    v133(v120, v121, v35);
    v134 = v68[5];
    v135 = &v120[v134];
    v136 = &v121[v134];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v138 = v137;
    v139 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 24);
    v139(v135, v136, v137);
    v133(&v120[v68[6]], &v121[v68[6]], v35);
    v139(&v120[v68[7]], &v121[v68[7]], v138);
  }
LABEL_78:
  v140 = v310[10];
  v141 = v316 + v140;
  v142 = v315 + v140;
  v309(v316 + v140, v315 + v140, v312);
  ((void (*)(uint64_t, uint64_t, uint64_t))v305)(v141 + v26[5], v142 + v26[5], v306);
  v143 = v26[6];
  v144 = (void *)(v141 + v143);
  v145 = (const void *)(v142 + v143);
  v146 = v304(v141 + v143, 1, v35);
  v147 = v304((uint64_t)v145, 1, v35);
  if (v146)
  {
    if (!v147)
    {
      (*(void (**)(void *, const void *, uint64_t))(v308 + 16))(v144, v145, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v308 + 56))(v144, 0, 1, v35);
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  if (v147)
  {
    (*(void (**)(void *, uint64_t))(v308 + 8))(v144, v35);
LABEL_83:
    sub_23DBB29B8();
    memcpy(v144, v145, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
    goto LABEL_84;
  }
  (*(void (**)(void *, const void *, uint64_t))(v308 + 24))(v144, v145, v35);
LABEL_84:
  v149 = v26[7];
  v150 = (void *)(v141 + v149);
  v151 = (const void *)(v142 + v149);
  v152 = v303(v141 + v149, 1, v313);
  v153 = v303((uint64_t)v151, 1, v313);
  if (v152)
  {
    if (!v153)
    {
      (*(void (**)(void *, const void *, uint64_t))(v300 + 16))(v150, v151, v313);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v300 + 56))(v150, 0, 1, v313);
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  if (v153)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v150, v313);
LABEL_89:
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v150, v151, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
    goto LABEL_90;
  }
  (*(void (**)(void *, const void *, uint64_t))(v300 + 24))(v150, v151, v313);
LABEL_90:
  v155 = v26[8];
  v156 = (void *)(v141 + v155);
  v157 = (const void *)(v142 + v155);
  v158 = v311(v141 + v155, 1, v314);
  v159 = v311((uint64_t)v157, 1, v314);
  if (v158)
  {
    v160 = v307;
    if (!v159)
    {
      (*(void (**)(void *, const void *, uint64_t))(v301 + 16))(v156, v157, v314);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v156, 0, 1, v314);
      goto LABEL_96;
    }
    goto LABEL_95;
  }
  v160 = v307;
  if (v159)
  {
    (*(void (**)(void *, uint64_t))(v301 + 8))(v156, v314);
LABEL_95:
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
    goto LABEL_96;
  }
  (*(void (**)(void *, const void *, uint64_t))(v301 + 24))(v156, v157, v314);
LABEL_96:
  *(_BYTE *)(v141 + v26[9]) = *(_BYTE *)(v142 + v26[9]);
  if (v316 != v315)
  {
    v162 = *(int *)(v160 + 20);
    v163 = (char *)(v141 + v162);
    v164 = (char *)(v142 + v162);
    sub_23DBB2BB0(v141 + v162, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v165 = type metadata accessor for SleepingSampleBaselineAvailability();
    v166 = swift_getEnumCaseMultiPayload();
    if (v166 == 2)
    {
      v169 = *(void (**)(char *, char *, uint64_t))(v299 + 16);
      v169(v163, v164, v312);
      v169(&v163[*(int *)(v298 + 36)], &v164[*(int *)(v298 + 36)], v312);
      sub_23DBBFAFC();
      *(_QWORD *)&v163[*(int *)(v170 + 48)] = *(_QWORD *)&v164[*(int *)(v170 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v166 == 1)
    {
      v167 = *(void (**)(char *, char *, uint64_t))(v299 + 16);
      v167(v163, v164, v312);
      v167(&v163[*(int *)(v298 + 36)], &v164[*(int *)(v298 + 36)], v312);
      sub_23DBBFA90();
      *(_QWORD *)&v163[*(int *)(v168 + 48)] = *(_QWORD *)&v164[*(int *)(v168 + 48)];
      *(_QWORD *)&v163[*(int *)(v168 + 64)] = *(_QWORD *)&v164[*(int *)(v168 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
    }
  }
  v171 = *(int *)(v160 + 24);
  v172 = (char *)(v141 + v171);
  v173 = (char *)(v142 + v171);
  v174 = v302(v172, 1, v68);
  v175 = v302(v173, 1, v68);
  if (v174)
  {
    if (v175)
    {
      v176 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_107:
      sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, v176);
      memcpy(v172, v173, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
      goto LABEL_113;
    }
    v178 = *(void (**)(char *, char *, uint64_t))(v308 + 16);
    v178(v172, v173, v35);
    v179 = v68[5];
    v180 = &v172[v179];
    v181 = &v173[v179];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v183 = v182;
    v184 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v182 - 8) + 16);
    v184(v180, v181, v182);
    v178(&v172[v68[6]], &v173[v68[6]], v35);
    v184(&v172[v68[7]], &v173[v68[7]], v183);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v297 + 56))(v172, 0, 1, v68);
  }
  else
  {
    if (v175)
    {
      sub_23DBB2BB0((uint64_t)v172, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
      v176 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_107;
    }
    v185 = *(void (**)(char *, char *, uint64_t))(v308 + 24);
    v185(v172, v173, v35);
    v186 = v68[5];
    v187 = &v172[v186];
    v188 = &v173[v186];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v190 = v189;
    v191 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v189 - 8) + 24);
    v191(v187, v188, v189);
    v185(&v172[v68[6]], &v173[v68[6]], v35);
    v191(&v172[v68[7]], &v173[v68[7]], v190);
  }
LABEL_113:
  v192 = v310[11];
  v193 = v316 + v192;
  v194 = v315 + v192;
  v309(v316 + v192, v315 + v192, v312);
  ((void (*)(uint64_t, uint64_t, uint64_t))v305)(v193 + v26[5], v194 + v26[5], v306);
  v195 = v26[6];
  v196 = (void *)(v193 + v195);
  v197 = (const void *)(v194 + v195);
  v198 = v304(v193 + v195, 1, v35);
  v199 = v304((uint64_t)v197, 1, v35);
  if (v198)
  {
    if (!v199)
    {
      (*(void (**)(void *, const void *, uint64_t))(v308 + 16))(v196, v197, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v308 + 56))(v196, 0, 1, v35);
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  if (v199)
  {
    (*(void (**)(void *, uint64_t))(v308 + 8))(v196, v35);
LABEL_118:
    sub_23DBB29B8();
    memcpy(v196, v197, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
    goto LABEL_119;
  }
  (*(void (**)(void *, const void *, uint64_t))(v308 + 24))(v196, v197, v35);
LABEL_119:
  v201 = v26[7];
  v202 = (void *)(v193 + v201);
  v203 = (const void *)(v194 + v201);
  v204 = v303(v193 + v201, 1, v313);
  v205 = v303((uint64_t)v203, 1, v313);
  if (v204)
  {
    if (!v205)
    {
      (*(void (**)(void *, const void *, uint64_t))(v300 + 16))(v202, v203, v313);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v300 + 56))(v202, 0, 1, v313);
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  if (v205)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v202, v313);
LABEL_124:
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
    goto LABEL_125;
  }
  (*(void (**)(void *, const void *, uint64_t))(v300 + 24))(v202, v203, v313);
LABEL_125:
  v207 = v26[8];
  v208 = (void *)(v193 + v207);
  v209 = (const void *)(v194 + v207);
  v210 = v311(v193 + v207, 1, v314);
  v211 = v311((uint64_t)v209, 1, v314);
  if (v210)
  {
    v212 = v307;
    if (!v211)
    {
      (*(void (**)(void *, const void *, uint64_t))(v301 + 16))(v208, v209, v314);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v208, 0, 1, v314);
      goto LABEL_131;
    }
    goto LABEL_130;
  }
  v212 = v307;
  if (v211)
  {
    (*(void (**)(void *, uint64_t))(v301 + 8))(v208, v314);
LABEL_130:
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v208, v209, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
    goto LABEL_131;
  }
  (*(void (**)(void *, const void *, uint64_t))(v301 + 24))(v208, v209, v314);
LABEL_131:
  *(_BYTE *)(v193 + v26[9]) = *(_BYTE *)(v194 + v26[9]);
  if (v316 != v315)
  {
    v214 = *(int *)(v212 + 20);
    v215 = (char *)(v193 + v214);
    v216 = (char *)(v194 + v214);
    sub_23DBB2BB0(v193 + v214, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v217 = type metadata accessor for SleepingSampleBaselineAvailability();
    v218 = swift_getEnumCaseMultiPayload();
    if (v218 == 2)
    {
      v221 = *(void (**)(char *, char *, uint64_t))(v299 + 16);
      v221(v215, v216, v312);
      v221(&v215[*(int *)(v298 + 36)], &v216[*(int *)(v298 + 36)], v312);
      sub_23DBBFAFC();
      *(_QWORD *)&v215[*(int *)(v222 + 48)] = *(_QWORD *)&v216[*(int *)(v222 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v218 == 1)
    {
      v219 = *(void (**)(char *, char *, uint64_t))(v299 + 16);
      v219(v215, v216, v312);
      v219(&v215[*(int *)(v298 + 36)], &v216[*(int *)(v298 + 36)], v312);
      sub_23DBBFA90();
      *(_QWORD *)&v215[*(int *)(v220 + 48)] = *(_QWORD *)&v216[*(int *)(v220 + 48)];
      *(_QWORD *)&v215[*(int *)(v220 + 64)] = *(_QWORD *)&v216[*(int *)(v220 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v215, v216, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
    }
  }
  v223 = *(int *)(v212 + 24);
  v224 = (char *)(v193 + v223);
  v225 = (char *)(v194 + v223);
  v226 = v302(v224, 1, v68);
  v227 = v302(v225, 1, v68);
  if (v226)
  {
    if (v227)
    {
      v228 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_142:
      sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, v228);
      memcpy(v224, v225, *(_QWORD *)(*(_QWORD *)(v229 - 8) + 64));
      goto LABEL_148;
    }
    v230 = *(void (**)(char *, char *, uint64_t))(v308 + 16);
    v230(v224, v225, v35);
    v231 = v68[5];
    v232 = &v224[v231];
    v233 = &v225[v231];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v235 = v234;
    v236 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v234 - 8) + 16);
    v236(v232, v233, v234);
    v230(&v224[v68[6]], &v225[v68[6]], v35);
    v236(&v224[v68[7]], &v225[v68[7]], v235);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v297 + 56))(v224, 0, 1, v68);
  }
  else
  {
    if (v227)
    {
      sub_23DBB2BB0((uint64_t)v224, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
      v228 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_142;
    }
    v237 = *(void (**)(char *, char *, uint64_t))(v308 + 24);
    v237(v224, v225, v35);
    v238 = v68[5];
    v239 = &v224[v238];
    v240 = &v225[v238];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v242 = v241;
    v243 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v241 - 8) + 24);
    v243(v239, v240, v241);
    v237(&v224[v68[6]], &v225[v68[6]], v35);
    v243(&v224[v68[7]], &v225[v68[7]], v242);
  }
LABEL_148:
  v244 = v310[12];
  v245 = v316 + v244;
  v246 = v315 + v244;
  v309(v316 + v244, v315 + v244, v312);
  ((void (*)(uint64_t, uint64_t, uint64_t))v305)(v245 + v26[5], v246 + v26[5], v306);
  v247 = v26[6];
  v248 = (void *)(v245 + v247);
  v249 = (const void *)(v246 + v247);
  v250 = v304(v245 + v247, 1, v35);
  v251 = v304((uint64_t)v249, 1, v35);
  if (v250)
  {
    if (!v251)
    {
      (*(void (**)(void *, const void *, uint64_t))(v308 + 16))(v248, v249, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v308 + 56))(v248, 0, 1, v35);
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  if (v251)
  {
    (*(void (**)(void *, uint64_t))(v308 + 8))(v248, v35);
LABEL_153:
    sub_23DBB29B8();
    memcpy(v248, v249, *(_QWORD *)(*(_QWORD *)(v252 - 8) + 64));
    goto LABEL_154;
  }
  (*(void (**)(void *, const void *, uint64_t))(v308 + 24))(v248, v249, v35);
LABEL_154:
  v253 = v26[7];
  v254 = (void *)(v245 + v253);
  v255 = (const void *)(v246 + v253);
  v256 = v303(v245 + v253, 1, v313);
  v257 = v303((uint64_t)v255, 1, v313);
  if (v256)
  {
    if (!v257)
    {
      (*(void (**)(void *, const void *, uint64_t))(v300 + 16))(v254, v255, v313);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v300 + 56))(v254, 0, 1, v313);
      goto LABEL_160;
    }
    goto LABEL_159;
  }
  if (v257)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v254, v313);
LABEL_159:
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v254, v255, *(_QWORD *)(*(_QWORD *)(v258 - 8) + 64));
    goto LABEL_160;
  }
  (*(void (**)(void *, const void *, uint64_t))(v300 + 24))(v254, v255, v313);
LABEL_160:
  v259 = v26[8];
  v260 = (void *)(v245 + v259);
  v261 = (const void *)(v246 + v259);
  v262 = v311(v245 + v259, 1, v314);
  v263 = v311((uint64_t)v261, 1, v314);
  if (v262)
  {
    v264 = v307;
    if (!v263)
    {
      (*(void (**)(void *, const void *, uint64_t))(v301 + 16))(v260, v261, v314);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v301 + 56))(v260, 0, 1, v314);
      goto LABEL_166;
    }
    goto LABEL_165;
  }
  v264 = v307;
  if (v263)
  {
    (*(void (**)(void *, uint64_t))(v301 + 8))(v260, v314);
LABEL_165:
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v260, v261, *(_QWORD *)(*(_QWORD *)(v265 - 8) + 64));
    goto LABEL_166;
  }
  (*(void (**)(void *, const void *, uint64_t))(v301 + 24))(v260, v261, v314);
LABEL_166:
  *(_BYTE *)(v245 + v26[9]) = *(_BYTE *)(v246 + v26[9]);
  if (v316 != v315)
  {
    v266 = *(int *)(v264 + 20);
    v267 = (char *)(v245 + v266);
    v268 = (char *)(v246 + v266);
    sub_23DBB2BB0(v245 + v266, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v269 = type metadata accessor for SleepingSampleBaselineAvailability();
    v270 = swift_getEnumCaseMultiPayload();
    if (v270 == 2)
    {
      v273 = *(void (**)(char *, char *, uint64_t))(v299 + 16);
      v273(v267, v268, v312);
      v273(&v267[*(int *)(v298 + 36)], &v268[*(int *)(v298 + 36)], v312);
      sub_23DBBFAFC();
      *(_QWORD *)&v267[*(int *)(v274 + 48)] = *(_QWORD *)&v268[*(int *)(v274 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v270 == 1)
    {
      v271 = *(void (**)(char *, char *, uint64_t))(v299 + 16);
      v271(v267, v268, v312);
      v271(&v267[*(int *)(v298 + 36)], &v268[*(int *)(v298 + 36)], v312);
      sub_23DBBFA90();
      *(_QWORD *)&v267[*(int *)(v272 + 48)] = *(_QWORD *)&v268[*(int *)(v272 + 48)];
      *(_QWORD *)&v267[*(int *)(v272 + 64)] = *(_QWORD *)&v268[*(int *)(v272 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v267, v268, *(_QWORD *)(*(_QWORD *)(v269 - 8) + 64));
    }
  }
  v275 = *(int *)(v264 + 24);
  v276 = (char *)(v245 + v275);
  v277 = (char *)(v246 + v275);
  v278 = v302((char *)(v245 + v275), 1, v68);
  v279 = v302(v277, 1, v68);
  if (v278)
  {
    if (!v279)
    {
      v282 = *(void (**)(char *, char *, uint64_t))(v308 + 16);
      v282(v276, v277, v35);
      v283 = v68[5];
      v284 = &v276[v283];
      v285 = &v277[v283];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v287 = v286;
      v288 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v286 - 8) + 16);
      v288(v284, v285, v286);
      v282(&v276[v68[6]], &v277[v68[6]], v35);
      v288(&v276[v68[7]], &v277[v68[7]], v287);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v297 + 56))(v276, 0, 1, v68);
      return v316;
    }
    v280 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  else
  {
    if (!v279)
    {
      v289 = *(void (**)(char *, char *, uint64_t))(v308 + 24);
      v289(v276, v277, v35);
      v290 = v68[5];
      v291 = &v276[v290];
      v292 = &v277[v290];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v294 = v293;
      v295 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v293 - 8) + 24);
      v295(v291, v292, v293);
      v289(&v276[v68[6]], &v277[v68[6]], v35);
      v295(&v276[v68[7]], &v277[v68[7]], v294);
      return v316;
    }
    sub_23DBB2BB0((uint64_t)v276, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
    v280 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, v280);
  memcpy(v276, v277, *(_QWORD *)(*(_QWORD *)(v281 - 8) + 64));
  return v316;
}

uint64_t initializeWithTake for SleepingSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  int EnumCaseMultiPayload;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  void (*v68)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const void *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const void *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const void *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  const void *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  const void *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  void (*v128)(char *, char *, uint64_t);
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, char *, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const void *v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  const void *v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const void *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  void (*v162)(char *, char *, uint64_t);
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(char *, char *, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  const void *v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  const void *v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  const void *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  void (*v196)(char *, char *, uint64_t);
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  void (*v203)(char *, char *, uint64_t);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void (*v208)(uint64_t, uint64_t, uint64_t);
  uint64_t v209;
  uint64_t v210;
  unsigned int (*v211)(char *, uint64_t);
  unsigned int (*v212)(const void *, uint64_t, uint64_t);
  unsigned int (*v213)(const void *, uint64_t, uint64_t);
  void (*v214)(uint64_t, uint64_t);
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int *v219;
  uint64_t v220;
  unsigned int (*v221)(const void *, uint64_t, uint64_t);
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;

  v6 = sub_23DC2A154();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v210 = v11;
  v224 = v6;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v219 = a3;
  v12 = a3[6];
  v223 = a1;
  v13 = (void *)(a1 + v12);
  v220 = a2;
  v14 = (const void *)(a2 + v12);
  v15 = sub_23DC29E48();
  v16 = *(_QWORD *)(v15 - 8);
  v221 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  v207 = v16;
  if (v221(v14, 1, v15))
  {
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = v223 + v18;
  v21 = a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = v223 + v19;
  v23 = a2 + v19;
  v7(v223 + v19, a2 + v19, v6);
  v24 = (int *)type metadata accessor for SleepingSampleAggregate();
  v25 = v24[5];
  v26 = v22 + v25;
  v27 = v23 + v25;
  v28 = sub_23DC29F80();
  v214 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32);
  v215 = v28;
  v214(v26, v27);
  v29 = v24[6];
  v30 = (void *)(v22 + v29);
  v31 = (const void *)(v23 + v29);
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v33 = v32;
  v34 = *(_QWORD *)(v32 - 8);
  v213 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48);
  v216 = v34;
  if (v213(v31, 1, v32))
  {
    sub_23DBB29B8();
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v34 + 32))(v30, v31, v33);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v30, 0, 1, v33);
  }
  v36 = v24[7];
  v37 = (void *)(v22 + v36);
  v38 = (const void *)(v23 + v36);
  v39 = sub_23DC29BF0();
  v40 = *(_QWORD *)(v39 - 8);
  v212 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48);
  if (v212(v38, 1, v39))
  {
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v40 + 32))(v37, v38, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  v205 = v40;
  v42 = v24[8];
  v43 = (void *)(v22 + v42);
  v44 = (const void *)(v23 + v42);
  if (v221((const void *)(v23 + v42), 1, v15))
  {
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v207 + 32))(v43, v44, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v43, 0, 1, v15);
  }
  *(_BYTE *)(v22 + v24[9]) = *(_BYTE *)(v23 + v24[9]);
  v226 = type metadata accessor for SleepingSampleBaselineComparison();
  v46 = *(int *)(v226 + 20);
  v47 = (char *)(v22 + v46);
  v48 = (char *)(v23 + v46);
  v225 = type metadata accessor for SleepingSampleBaselineAvailability();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v217 = v39;
  if (EnumCaseMultiPayload == 2)
  {
    v7((uint64_t)v47, (uint64_t)v48, v224);
    v7((uint64_t)&v47[*(int *)(v210 + 36)], (uint64_t)&v48[*(int *)(v210 + 36)], v224);
    sub_23DBBFAFC();
    *(_QWORD *)&v47[*(int *)(v51 + 48)] = *(_QWORD *)&v48[*(int *)(v51 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7((uint64_t)v47, (uint64_t)v48, v224);
    v7((uint64_t)&v47[*(int *)(v210 + 36)], (uint64_t)&v48[*(int *)(v210 + 36)], v224);
    sub_23DBBFA90();
    *(_QWORD *)&v47[*(int *)(v50 + 48)] = *(_QWORD *)&v48[*(int *)(v50 + 48)];
    *(_QWORD *)&v47[*(int *)(v50 + 64)] = *(_QWORD *)&v48[*(int *)(v50 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
  }
  v52 = *(int *)(v226 + 24);
  v53 = (char *)(v22 + v52);
  v54 = (char *)(v23 + v52);
  v55 = type metadata accessor for SleepingSampleBaseline();
  v56 = *(_QWORD *)(v55 - 8);
  v222 = v55;
  v211 = *(unsigned int (**)(char *, uint64_t))(v56 + 48);
  v208 = v7;
  v209 = v15;
  v218 = v33;
  v206 = v56;
  if (v211(v54, 1))
  {
    sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    v58 = *(void (**)(char *, char *, uint64_t))(v216 + 32);
    v58(v53, v54, v33);
    v59 = v222;
    v60 = *(int *)(v222 + 20);
    v61 = v56;
    v62 = &v53[v60];
    v63 = &v54[v60];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v65 = v64;
    v66 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v64 - 8) + 32);
    v66(v62, v63, v64);
    v58(&v53[*(int *)(v59 + 24)], &v54[*(int *)(v59 + 24)], v218);
    v67 = v65;
    v7 = v208;
    v15 = v209;
    v66(&v53[*(int *)(v59 + 28)], &v54[*(int *)(v59 + 28)], v67);
    v68 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56);
    v39 = v217;
    v33 = v218;
    v68(v53, 0, 1, v222);
  }
  v69 = v219[9];
  v70 = v223 + v69;
  v71 = v220 + v69;
  v7(v223 + v69, v220 + v69, v224);
  ((void (*)(uint64_t, uint64_t, uint64_t))v214)(v70 + v24[5], v71 + v24[5], v215);
  v72 = v24[6];
  v73 = (void *)(v70 + v72);
  v74 = (const void *)(v71 + v72);
  if (v213((const void *)(v71 + v72), 1, v33))
  {
    sub_23DBB29B8();
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v216 + 32))(v73, v74, v33);
    v15 = v209;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v73, 0, 1, v33);
  }
  v76 = v24[7];
  v77 = (void *)(v70 + v76);
  v78 = (const void *)(v71 + v76);
  if (v212((const void *)(v71 + v76), 1, v39))
  {
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v205 + 32))(v77, v78, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v205 + 56))(v77, 0, 1, v39);
  }
  v80 = v24[8];
  v81 = (void *)(v70 + v80);
  v82 = (const void *)(v71 + v80);
  if (v221((const void *)(v71 + v80), 1, v15))
  {
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v81, v82, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v207 + 32))(v81, v82, v15);
    v39 = v217;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v81, 0, 1, v15);
  }
  *(_BYTE *)(v70 + v24[9]) = *(_BYTE *)(v71 + v24[9]);
  v84 = *(int *)(v226 + 20);
  v85 = (char *)(v70 + v84);
  v86 = (char *)(v71 + v84);
  v87 = swift_getEnumCaseMultiPayload();
  if (v87 == 2)
  {
    v7((uint64_t)v85, (uint64_t)v86, v224);
    v39 = v217;
    v7((uint64_t)&v85[*(int *)(v210 + 36)], (uint64_t)&v86[*(int *)(v210 + 36)], v224);
    sub_23DBBFAFC();
    *(_QWORD *)&v85[*(int *)(v89 + 48)] = *(_QWORD *)&v86[*(int *)(v89 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v87 == 1)
  {
    v7((uint64_t)v85, (uint64_t)v86, v224);
    v39 = v217;
    v7((uint64_t)&v85[*(int *)(v210 + 36)], (uint64_t)&v86[*(int *)(v210 + 36)], v224);
    sub_23DBBFA90();
    *(_QWORD *)&v85[*(int *)(v88 + 48)] = *(_QWORD *)&v86[*(int *)(v88 + 48)];
    *(_QWORD *)&v85[*(int *)(v88 + 64)] = *(_QWORD *)&v86[*(int *)(v88 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
  }
  v90 = *(int *)(v226 + 24);
  v91 = (char *)(v70 + v90);
  v92 = (char *)(v71 + v90);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v211)(v92, 1, v222))
  {
    sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
  }
  else
  {
    v94 = *(void (**)(char *, char *, uint64_t))(v216 + 32);
    v94(v91, v92, v218);
    v95 = v222;
    v96 = *(int *)(v222 + 20);
    v97 = &v91[v96];
    v98 = &v92[v96];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v100 = v99;
    v101 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v99 - 8) + 32);
    v101(v97, v98, v99);
    v94(&v91[*(int *)(v95 + 24)], &v92[*(int *)(v95 + 24)], v218);
    v33 = v218;
    v102 = v100;
    v15 = v209;
    v101(&v91[*(int *)(v95 + 28)], &v92[*(int *)(v95 + 28)], v102);
    v7 = v208;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v91, 0, 1, v222);
  }
  v103 = v219[10];
  v104 = v223 + v103;
  v105 = v220 + v103;
  v7(v223 + v103, v220 + v103, v224);
  ((void (*)(uint64_t, uint64_t, uint64_t))v214)(v104 + v24[5], v105 + v24[5], v215);
  v106 = v24[6];
  v107 = (void *)(v104 + v106);
  v108 = (const void *)(v105 + v106);
  if (v213((const void *)(v105 + v106), 1, v33))
  {
    sub_23DBB29B8();
    memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v216 + 32))(v107, v108, v33);
    v15 = v209;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v107, 0, 1, v33);
  }
  v110 = v24[7];
  v111 = (void *)(v104 + v110);
  v112 = (const void *)(v105 + v110);
  if (v212((const void *)(v105 + v110), 1, v39))
  {
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v205 + 32))(v111, v112, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v205 + 56))(v111, 0, 1, v39);
  }
  v114 = v24[8];
  v115 = (void *)(v104 + v114);
  v116 = (const void *)(v105 + v114);
  if (v221((const void *)(v105 + v114), 1, v15))
  {
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v207 + 32))(v115, v116, v15);
    v39 = v217;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v115, 0, 1, v15);
  }
  *(_BYTE *)(v104 + v24[9]) = *(_BYTE *)(v105 + v24[9]);
  v118 = *(int *)(v226 + 20);
  v119 = (char *)(v104 + v118);
  v120 = (char *)(v105 + v118);
  v121 = swift_getEnumCaseMultiPayload();
  if (v121 == 2)
  {
    v7((uint64_t)v119, (uint64_t)v120, v224);
    v39 = v217;
    v7((uint64_t)&v119[*(int *)(v210 + 36)], (uint64_t)&v120[*(int *)(v210 + 36)], v224);
    sub_23DBBFAFC();
    *(_QWORD *)&v119[*(int *)(v123 + 48)] = *(_QWORD *)&v120[*(int *)(v123 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v121 == 1)
  {
    v7((uint64_t)v119, (uint64_t)v120, v224);
    v39 = v217;
    v7((uint64_t)&v119[*(int *)(v210 + 36)], (uint64_t)&v120[*(int *)(v210 + 36)], v224);
    sub_23DBBFA90();
    *(_QWORD *)&v119[*(int *)(v122 + 48)] = *(_QWORD *)&v120[*(int *)(v122 + 48)];
    *(_QWORD *)&v119[*(int *)(v122 + 64)] = *(_QWORD *)&v120[*(int *)(v122 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
  }
  v124 = *(int *)(v226 + 24);
  v125 = (char *)(v104 + v124);
  v126 = (char *)(v105 + v124);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v211)(v126, 1, v222))
  {
    sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v127 - 8) + 64));
  }
  else
  {
    v128 = *(void (**)(char *, char *, uint64_t))(v216 + 32);
    v128(v125, v126, v218);
    v129 = v222;
    v130 = *(int *)(v222 + 20);
    v131 = &v125[v130];
    v132 = &v126[v130];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v134 = v133;
    v135 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 32);
    v135(v131, v132, v133);
    v128(&v125[*(int *)(v129 + 24)], &v126[*(int *)(v129 + 24)], v218);
    v33 = v218;
    v136 = v134;
    v15 = v209;
    v135(&v125[*(int *)(v129 + 28)], &v126[*(int *)(v129 + 28)], v136);
    v7 = v208;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v125, 0, 1, v222);
  }
  v137 = v219[11];
  v138 = v223 + v137;
  v139 = v220 + v137;
  v7(v223 + v137, v220 + v137, v224);
  ((void (*)(uint64_t, uint64_t, uint64_t))v214)(v138 + v24[5], v139 + v24[5], v215);
  v140 = v24[6];
  v141 = (void *)(v138 + v140);
  v142 = (const void *)(v139 + v140);
  if (v213((const void *)(v139 + v140), 1, v33))
  {
    sub_23DBB29B8();
    memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v143 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v216 + 32))(v141, v142, v33);
    v15 = v209;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v141, 0, 1, v33);
  }
  v144 = v24[7];
  v145 = (void *)(v138 + v144);
  v146 = (const void *)(v139 + v144);
  if (v212((const void *)(v139 + v144), 1, v39))
  {
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v145, v146, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v205 + 32))(v145, v146, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v205 + 56))(v145, 0, 1, v39);
  }
  v148 = v24[8];
  v149 = (void *)(v138 + v148);
  v150 = (const void *)(v139 + v148);
  if (v221((const void *)(v139 + v148), 1, v15))
  {
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v151 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v207 + 32))(v149, v150, v15);
    v39 = v217;
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v149, 0, 1, v15);
  }
  *(_BYTE *)(v138 + v24[9]) = *(_BYTE *)(v139 + v24[9]);
  v152 = *(int *)(v226 + 20);
  v153 = (char *)(v138 + v152);
  v154 = (char *)(v139 + v152);
  v155 = swift_getEnumCaseMultiPayload();
  if (v155 == 2)
  {
    v7((uint64_t)v153, (uint64_t)v154, v224);
    v39 = v217;
    v7((uint64_t)&v153[*(int *)(v210 + 36)], (uint64_t)&v154[*(int *)(v210 + 36)], v224);
    sub_23DBBFAFC();
    *(_QWORD *)&v153[*(int *)(v157 + 48)] = *(_QWORD *)&v154[*(int *)(v157 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v155 == 1)
  {
    v7((uint64_t)v153, (uint64_t)v154, v224);
    v39 = v217;
    v7((uint64_t)&v153[*(int *)(v210 + 36)], (uint64_t)&v154[*(int *)(v210 + 36)], v224);
    sub_23DBBFA90();
    *(_QWORD *)&v153[*(int *)(v156 + 48)] = *(_QWORD *)&v154[*(int *)(v156 + 48)];
    *(_QWORD *)&v153[*(int *)(v156 + 64)] = *(_QWORD *)&v154[*(int *)(v156 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
  }
  v158 = *(int *)(v226 + 24);
  v159 = (char *)(v138 + v158);
  v160 = (char *)(v139 + v158);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v211)(v160, 1, v222))
  {
    sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v159, v160, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
  }
  else
  {
    v162 = *(void (**)(char *, char *, uint64_t))(v216 + 32);
    v162(v159, v160, v218);
    v163 = v222;
    v164 = *(int *)(v222 + 20);
    v165 = &v159[v164];
    v166 = &v160[v164];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v168 = v167;
    v169 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v167 - 8) + 32);
    v169(v165, v166, v167);
    v162(&v159[*(int *)(v163 + 24)], &v160[*(int *)(v163 + 24)], v218);
    v33 = v218;
    v170 = v168;
    v15 = v209;
    v169(&v159[*(int *)(v163 + 28)], &v160[*(int *)(v163 + 28)], v170);
    v7 = v208;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v159, 0, 1, v222);
  }
  v171 = v219[12];
  v172 = v223 + v171;
  v173 = v220 + v171;
  v7(v223 + v171, v220 + v171, v224);
  ((void (*)(uint64_t, uint64_t, uint64_t))v214)(v172 + v24[5], v173 + v24[5], v215);
  v174 = v24[6];
  v175 = (void *)(v172 + v174);
  v176 = (const void *)(v173 + v174);
  if (v213((const void *)(v173 + v174), 1, v33))
  {
    sub_23DBB29B8();
    memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v216 + 32))(v175, v176, v33);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v175, 0, 1, v33);
  }
  v178 = v24[7];
  v179 = (void *)(v172 + v178);
  v180 = (const void *)(v173 + v178);
  if (v212((const void *)(v173 + v178), 1, v39))
  {
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v179, v180, *(_QWORD *)(*(_QWORD *)(v181 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v205 + 32))(v179, v180, v39);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v205 + 56))(v179, 0, 1, v39);
  }
  v182 = v24[8];
  v183 = (void *)(v172 + v182);
  v184 = (const void *)(v173 + v182);
  if (v221((const void *)(v173 + v182), 1, v15))
  {
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v183, v184, *(_QWORD *)(*(_QWORD *)(v185 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v207 + 32))(v183, v184, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v207 + 56))(v183, 0, 1, v15);
  }
  *(_BYTE *)(v172 + v24[9]) = *(_BYTE *)(v173 + v24[9]);
  v186 = *(int *)(v226 + 20);
  v187 = (char *)(v172 + v186);
  v188 = (char *)(v173 + v186);
  v189 = swift_getEnumCaseMultiPayload();
  if (v189 == 2)
  {
    v208((uint64_t)v187, (uint64_t)v188, v224);
    v208((uint64_t)&v187[*(int *)(v210 + 36)], (uint64_t)&v188[*(int *)(v210 + 36)], v224);
    sub_23DBBFAFC();
    *(_QWORD *)&v187[*(int *)(v191 + 48)] = *(_QWORD *)&v188[*(int *)(v191 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else if (v189 == 1)
  {
    v208((uint64_t)v187, (uint64_t)v188, v224);
    v208((uint64_t)&v187[*(int *)(v210 + 36)], (uint64_t)&v188[*(int *)(v210 + 36)], v224);
    sub_23DBBFA90();
    *(_QWORD *)&v187[*(int *)(v190 + 48)] = *(_QWORD *)&v188[*(int *)(v190 + 48)];
    *(_QWORD *)&v187[*(int *)(v190 + 64)] = *(_QWORD *)&v188[*(int *)(v190 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v187, v188, *(_QWORD *)(*(_QWORD *)(v225 - 8) + 64));
  }
  v192 = *(int *)(v226 + 24);
  v193 = (char *)(v172 + v192);
  v194 = (char *)(v173 + v192);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v211)(v194, 1, v222))
  {
    sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v193, v194, *(_QWORD *)(*(_QWORD *)(v195 - 8) + 64));
  }
  else
  {
    v196 = *(void (**)(char *, char *, uint64_t))(v216 + 32);
    v196(v193, v194, v218);
    v197 = v222;
    v198 = *(int *)(v222 + 20);
    v199 = &v193[v198];
    v200 = &v194[v198];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v202 = v201;
    v203 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v201 - 8) + 32);
    v203(v199, v200, v201);
    v196(&v193[*(int *)(v197 + 24)], &v194[*(int *)(v197 + 24)], v218);
    v203(&v193[*(int *)(v197 + 28)], &v194[*(int *)(v197 + 28)], v202);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v193, 0, 1, v222);
  }
  return v223;
}

uint64_t assignWithTake for SleepingSampleDaySummary(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t (*v43)(void *, uint64_t, uint64_t);
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  int EnumCaseMultiPayload;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  int *v67;
  uint64_t (*v68)(char *, uint64_t, int *);
  int v69;
  int v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, char *, uint64_t);
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const void *v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const void *v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const void *v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  int v113;
  void (*v114)(char *, char *, uint64_t);
  uint64_t v115;
  void (*v116)(char *, char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  int v121;
  int v122;
  uint64_t (*v123)(uint64_t, uint64_t);
  uint64_t v124;
  void (*v125)(char *, char *, uint64_t);
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, char *, uint64_t);
  void (*v132)(char *, char *, uint64_t);
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const void *v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  const void *v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  const void *v156;
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  int v165;
  void (*v166)(char *, char *, uint64_t);
  uint64_t v167;
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  int v173;
  int v174;
  uint64_t (*v175)(uint64_t, uint64_t);
  uint64_t v176;
  void (*v177)(char *, char *, uint64_t);
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(char *, char *, uint64_t);
  void (*v184)(char *, char *, uint64_t);
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(char *, char *, uint64_t);
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  const void *v196;
  int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  void *v201;
  const void *v202;
  int v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  const void *v208;
  int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  int v217;
  void (*v218)(char *, char *, uint64_t);
  uint64_t v219;
  void (*v220)(char *, char *, uint64_t);
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  int v225;
  int v226;
  uint64_t (*v227)(uint64_t, uint64_t);
  uint64_t v228;
  void (*v229)(char *, char *, uint64_t);
  uint64_t v230;
  char *v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  void (*v235)(char *, char *, uint64_t);
  void (*v236)(char *, char *, uint64_t);
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  void (*v242)(char *, char *, uint64_t);
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  const void *v248;
  int v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  const void *v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  const void *v260;
  int v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char *v267;
  uint64_t v268;
  int v269;
  void (*v270)(char *, char *, uint64_t);
  uint64_t v271;
  void (*v272)(char *, char *, uint64_t);
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  int v277;
  int v278;
  uint64_t (*v279)(uint64_t, uint64_t);
  uint64_t v280;
  void (*v281)(char *, char *, uint64_t);
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  void (*v287)(char *, char *, uint64_t);
  void (*v288)(char *, char *, uint64_t);
  uint64_t v289;
  char *v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  void (*v294)(char *, char *, uint64_t);
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t (*v301)(char *, uint64_t, int *);
  uint64_t (*v302)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v303)(uint64_t, uint64_t, uint64_t);
  void (*v304)(uint64_t, uint64_t);
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  void (*v308)(uint64_t, uint64_t, uint64_t);
  int *v309;
  uint64_t (*v310)(uint64_t, uint64_t, uint64_t);
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;

  v6 = sub_23DC2A154();
  v298 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v298 + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
  v297 = v11;
  v311 = v6;
  v308 = v7;
  v7(v9 + *(int *)(v11 + 36), v10 + *(int *)(v11 + 36), v6);
  v309 = a3;
  v12 = a3[6];
  v314 = a2;
  v315 = a1;
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = sub_23DC29E48();
  v300 = *(_QWORD *)(v15 - 8);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v300 + 48);
  LODWORD(v6) = v16(v13, 1, v15);
  v313 = v15;
  v310 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
  v17 = v16(v14, 1, v15);
  if ((_DWORD)v6)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v300 + 32))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v300 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v13, v15);
LABEL_6:
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v300 + 40))(v13, v14, v15);
LABEL_7:
  v19 = a3[7];
  v20 = a3[8];
  v21 = v315 + v19;
  v22 = v314 + v19;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  v23 = v315 + v20;
  v24 = v314 + v20;
  v7(v315 + v20, v314 + v20, v311);
  v25 = (int *)type metadata accessor for SleepingSampleAggregate();
  v26 = v25[5];
  v27 = v23 + v26;
  v28 = v24 + v26;
  v29 = sub_23DC29F80();
  v304 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 40);
  v305 = v29;
  v304(v27, v28);
  v30 = v25[6];
  v31 = (void *)(v23 + v30);
  v32 = (void *)(v24 + v30);
  sub_23DBBA2D4(0, &qword_25431FAD0, (unint64_t *)&qword_25431FAD8);
  v34 = v33;
  v307 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v307 + 48);
  v36 = v35(v31, 1, v33);
  v303 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35;
  v37 = v35(v32, 1, v34);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(void *, void *, uint64_t))(v307 + 32))(v31, v32, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v31, 0, 1, v34);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v37)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v31, v34);
LABEL_12:
    sub_23DBB29B8();
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v307 + 40))(v31, v32, v34);
LABEL_13:
  v39 = v25[7];
  v40 = (void *)(v23 + v39);
  v41 = (void *)(v24 + v39);
  v42 = sub_23DC29BF0();
  v299 = *(_QWORD *)(v42 - 8);
  v43 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v299 + 48);
  v44 = v43(v40, 1, v42);
  v312 = v42;
  v302 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v43;
  v45 = v43(v41, 1, v42);
  if (v44)
  {
    if (!v45)
    {
      (*(void (**)(void *, void *, uint64_t))(v299 + 32))(v40, v41, v42);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v299 + 56))(v40, 0, 1, v42);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v45)
  {
    (*(void (**)(void *, uint64_t))(v299 + 8))(v40, v42);
LABEL_18:
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v299 + 40))(v40, v41, v42);
LABEL_19:
  v47 = v25[8];
  v48 = (void *)(v23 + v47);
  v49 = (const void *)(v24 + v47);
  v50 = v310(v23 + v47, 1, v313);
  v51 = v310((uint64_t)v49, 1, v313);
  if (v50)
  {
    if (!v51)
    {
      (*(void (**)(void *, const void *, uint64_t))(v300 + 32))(v48, v49, v313);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v300 + 56))(v48, 0, 1, v313);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v51)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v48, v313);
LABEL_24:
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, const void *, uint64_t))(v300 + 40))(v48, v49, v313);
LABEL_25:
  *(_BYTE *)(v23 + v25[9]) = *(_BYTE *)(v24 + v25[9]);
  v53 = type metadata accessor for SleepingSampleBaselineComparison();
  v54 = v53;
  if (v315 != v314)
  {
    v55 = *(int *)(v53 + 20);
    v56 = (char *)(v23 + v55);
    v57 = (char *)(v24 + v55);
    sub_23DBB2BB0(v23 + v55, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v58 = type metadata accessor for SleepingSampleBaselineAvailability();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v62 = *(void (**)(char *, char *, uint64_t))(v298 + 32);
      v62(v56, v57, v311);
      v62(&v56[*(int *)(v297 + 36)], &v57[*(int *)(v297 + 36)], v311);
      sub_23DBBFAFC();
      *(_QWORD *)&v56[*(int *)(v63 + 48)] = *(_QWORD *)&v57[*(int *)(v63 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v60 = *(void (**)(char *, char *, uint64_t))(v298 + 32);
      v60(v56, v57, v311);
      v60(&v56[*(int *)(v297 + 36)], &v57[*(int *)(v297 + 36)], v311);
      sub_23DBBFA90();
      *(_QWORD *)&v56[*(int *)(v61 + 48)] = *(_QWORD *)&v57[*(int *)(v61 + 48)];
      *(_QWORD *)&v56[*(int *)(v61 + 64)] = *(_QWORD *)&v57[*(int *)(v61 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
  }
  v64 = *(int *)(v54 + 24);
  v65 = (char *)(v23 + v64);
  v66 = (char *)(v24 + v64);
  v67 = (int *)type metadata accessor for SleepingSampleBaseline();
  v296 = *((_QWORD *)v67 - 1);
  v68 = *(uint64_t (**)(char *, uint64_t, int *))(v296 + 48);
  v69 = v68(v65, 1, v67);
  v301 = v68;
  v70 = v68(v66, 1, v67);
  v306 = v54;
  if (v69)
  {
    if (v70)
    {
      v71 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_36:
      sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, v71);
      memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      goto LABEL_43;
    }
    v73 = *(void (**)(char *, char *, uint64_t))(v307 + 32);
    v73(v65, v66, v34);
    v74 = v67[5];
    v75 = &v65[v74];
    v76 = &v66[v74];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v78 = v77;
    v79 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v77 - 8) + 32);
    v79(v75, v76, v77);
    v73(&v65[v67[6]], &v66[v67[6]], v34);
    v79(&v65[v67[7]], &v66[v67[7]], v78);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v296 + 56))(v65, 0, 1, v67);
  }
  else
  {
    if (v70)
    {
      sub_23DBB2BB0((uint64_t)v65, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
      v71 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_36;
    }
    v80 = *(void (**)(char *, char *, uint64_t))(v307 + 40);
    v80(v65, v66, v34);
    v81 = v67[5];
    v82 = &v65[v81];
    v83 = &v66[v81];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v85 = v84;
    v86 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 40);
    v86(v82, v83, v84);
    v80(&v65[v67[6]], &v66[v67[6]], v34);
    v86(&v65[v67[7]], &v66[v67[7]], v85);
  }
LABEL_43:
  v87 = v309[9];
  v88 = v315 + v87;
  v89 = v314 + v87;
  v308(v315 + v87, v314 + v87, v311);
  ((void (*)(uint64_t, uint64_t, uint64_t))v304)(v88 + v25[5], v89 + v25[5], v305);
  v90 = v25[6];
  v91 = (void *)(v88 + v90);
  v92 = (const void *)(v89 + v90);
  v93 = v303(v88 + v90, 1, v34);
  v94 = v303((uint64_t)v92, 1, v34);
  if (v93)
  {
    if (!v94)
    {
      (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v91, v92, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v91, 0, 1, v34);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v94)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v91, v34);
LABEL_48:
    sub_23DBB29B8();
    memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 40))(v91, v92, v34);
LABEL_49:
  v96 = v25[7];
  v97 = (void *)(v88 + v96);
  v98 = (const void *)(v89 + v96);
  v99 = v302(v88 + v96, 1, v312);
  v100 = v302((uint64_t)v98, 1, v312);
  if (v99)
  {
    if (!v100)
    {
      (*(void (**)(void *, const void *, uint64_t))(v299 + 32))(v97, v98, v312);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v299 + 56))(v97, 0, 1, v312);
      goto LABEL_55;
    }
    goto LABEL_54;
  }
  if (v100)
  {
    (*(void (**)(void *, uint64_t))(v299 + 8))(v97, v312);
LABEL_54:
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v97, v98, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    goto LABEL_55;
  }
  (*(void (**)(void *, const void *, uint64_t))(v299 + 40))(v97, v98, v312);
LABEL_55:
  v102 = v25[8];
  v103 = (void *)(v88 + v102);
  v104 = (const void *)(v89 + v102);
  v105 = v310(v88 + v102, 1, v313);
  v106 = v310((uint64_t)v104, 1, v313);
  if (v105)
  {
    v107 = v306;
    if (!v106)
    {
      (*(void (**)(void *, const void *, uint64_t))(v300 + 32))(v103, v104, v313);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v300 + 56))(v103, 0, 1, v313);
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  v107 = v306;
  if (v106)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v103, v313);
LABEL_60:
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    goto LABEL_61;
  }
  (*(void (**)(void *, const void *, uint64_t))(v300 + 40))(v103, v104, v313);
LABEL_61:
  *(_BYTE *)(v88 + v25[9]) = *(_BYTE *)(v89 + v25[9]);
  if (v315 != v314)
  {
    v109 = *(int *)(v107 + 20);
    v110 = (char *)(v88 + v109);
    v111 = (char *)(v89 + v109);
    sub_23DBB2BB0(v88 + v109, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v112 = type metadata accessor for SleepingSampleBaselineAvailability();
    v113 = swift_getEnumCaseMultiPayload();
    if (v113 == 2)
    {
      v116 = *(void (**)(char *, char *, uint64_t))(v298 + 32);
      v116(v110, v111, v311);
      v116(&v110[*(int *)(v297 + 36)], &v111[*(int *)(v297 + 36)], v311);
      sub_23DBBFAFC();
      *(_QWORD *)&v110[*(int *)(v117 + 48)] = *(_QWORD *)&v111[*(int *)(v117 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v113 == 1)
    {
      v114 = *(void (**)(char *, char *, uint64_t))(v298 + 32);
      v114(v110, v111, v311);
      v114(&v110[*(int *)(v297 + 36)], &v111[*(int *)(v297 + 36)], v311);
      sub_23DBBFA90();
      *(_QWORD *)&v110[*(int *)(v115 + 48)] = *(_QWORD *)&v111[*(int *)(v115 + 48)];
      *(_QWORD *)&v110[*(int *)(v115 + 64)] = *(_QWORD *)&v111[*(int *)(v115 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
    }
  }
  v118 = *(int *)(v107 + 24);
  v119 = (char *)(v88 + v118);
  v120 = (char *)(v89 + v118);
  v121 = v301(v119, 1, v67);
  v122 = v301(v120, 1, v67);
  if (v121)
  {
    if (v122)
    {
      v123 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_72:
      sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, v123);
      memcpy(v119, v120, *(_QWORD *)(*(_QWORD *)(v124 - 8) + 64));
      goto LABEL_78;
    }
    v125 = *(void (**)(char *, char *, uint64_t))(v307 + 32);
    v125(v119, v120, v34);
    v126 = v67[5];
    v127 = &v119[v126];
    v128 = &v120[v126];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v130 = v129;
    v131 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v129 - 8) + 32);
    v131(v127, v128, v129);
    v125(&v119[v67[6]], &v120[v67[6]], v34);
    v131(&v119[v67[7]], &v120[v67[7]], v130);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v296 + 56))(v119, 0, 1, v67);
  }
  else
  {
    if (v122)
    {
      sub_23DBB2BB0((uint64_t)v119, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
      v123 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_72;
    }
    v132 = *(void (**)(char *, char *, uint64_t))(v307 + 40);
    v132(v119, v120, v34);
    v133 = v67[5];
    v134 = &v119[v133];
    v135 = &v120[v133];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v137 = v136;
    v138 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v136 - 8) + 40);
    v138(v134, v135, v136);
    v132(&v119[v67[6]], &v120[v67[6]], v34);
    v138(&v119[v67[7]], &v120[v67[7]], v137);
  }
LABEL_78:
  v139 = v309[10];
  v140 = v315 + v139;
  v141 = v314 + v139;
  v308(v315 + v139, v314 + v139, v311);
  ((void (*)(uint64_t, uint64_t, uint64_t))v304)(v140 + v25[5], v141 + v25[5], v305);
  v142 = v25[6];
  v143 = (void *)(v140 + v142);
  v144 = (const void *)(v141 + v142);
  v145 = v303(v140 + v142, 1, v34);
  v146 = v303((uint64_t)v144, 1, v34);
  if (v145)
  {
    if (!v146)
    {
      (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v143, v144, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v143, 0, 1, v34);
      goto LABEL_84;
    }
    goto LABEL_83;
  }
  if (v146)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v143, v34);
LABEL_83:
    sub_23DBB29B8();
    memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v147 - 8) + 64));
    goto LABEL_84;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 40))(v143, v144, v34);
LABEL_84:
  v148 = v25[7];
  v149 = (void *)(v140 + v148);
  v150 = (const void *)(v141 + v148);
  v151 = v302(v140 + v148, 1, v312);
  v152 = v302((uint64_t)v150, 1, v312);
  if (v151)
  {
    if (!v152)
    {
      (*(void (**)(void *, const void *, uint64_t))(v299 + 32))(v149, v150, v312);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v299 + 56))(v149, 0, 1, v312);
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  if (v152)
  {
    (*(void (**)(void *, uint64_t))(v299 + 8))(v149, v312);
LABEL_89:
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v149, v150, *(_QWORD *)(*(_QWORD *)(v153 - 8) + 64));
    goto LABEL_90;
  }
  (*(void (**)(void *, const void *, uint64_t))(v299 + 40))(v149, v150, v312);
LABEL_90:
  v154 = v25[8];
  v155 = (void *)(v140 + v154);
  v156 = (const void *)(v141 + v154);
  v157 = v310(v140 + v154, 1, v313);
  v158 = v310((uint64_t)v156, 1, v313);
  if (v157)
  {
    v159 = v306;
    if (!v158)
    {
      (*(void (**)(void *, const void *, uint64_t))(v300 + 32))(v155, v156, v313);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v300 + 56))(v155, 0, 1, v313);
      goto LABEL_96;
    }
    goto LABEL_95;
  }
  v159 = v306;
  if (v158)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v155, v313);
LABEL_95:
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
    goto LABEL_96;
  }
  (*(void (**)(void *, const void *, uint64_t))(v300 + 40))(v155, v156, v313);
LABEL_96:
  *(_BYTE *)(v140 + v25[9]) = *(_BYTE *)(v141 + v25[9]);
  if (v315 != v314)
  {
    v161 = *(int *)(v159 + 20);
    v162 = (char *)(v140 + v161);
    v163 = (char *)(v141 + v161);
    sub_23DBB2BB0(v140 + v161, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v164 = type metadata accessor for SleepingSampleBaselineAvailability();
    v165 = swift_getEnumCaseMultiPayload();
    if (v165 == 2)
    {
      v168 = *(void (**)(char *, char *, uint64_t))(v298 + 32);
      v168(v162, v163, v311);
      v168(&v162[*(int *)(v297 + 36)], &v163[*(int *)(v297 + 36)], v311);
      sub_23DBBFAFC();
      *(_QWORD *)&v162[*(int *)(v169 + 48)] = *(_QWORD *)&v163[*(int *)(v169 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v165 == 1)
    {
      v166 = *(void (**)(char *, char *, uint64_t))(v298 + 32);
      v166(v162, v163, v311);
      v166(&v162[*(int *)(v297 + 36)], &v163[*(int *)(v297 + 36)], v311);
      sub_23DBBFA90();
      *(_QWORD *)&v162[*(int *)(v167 + 48)] = *(_QWORD *)&v163[*(int *)(v167 + 48)];
      *(_QWORD *)&v162[*(int *)(v167 + 64)] = *(_QWORD *)&v163[*(int *)(v167 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v162, v163, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
    }
  }
  v170 = *(int *)(v159 + 24);
  v171 = (char *)(v140 + v170);
  v172 = (char *)(v141 + v170);
  v173 = v301(v171, 1, v67);
  v174 = v301(v172, 1, v67);
  if (v173)
  {
    if (v174)
    {
      v175 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_107:
      sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, v175);
      memcpy(v171, v172, *(_QWORD *)(*(_QWORD *)(v176 - 8) + 64));
      goto LABEL_113;
    }
    v177 = *(void (**)(char *, char *, uint64_t))(v307 + 32);
    v177(v171, v172, v34);
    v178 = v67[5];
    v179 = &v171[v178];
    v180 = &v172[v178];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v182 = v181;
    v183 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 32);
    v183(v179, v180, v181);
    v177(&v171[v67[6]], &v172[v67[6]], v34);
    v183(&v171[v67[7]], &v172[v67[7]], v182);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v296 + 56))(v171, 0, 1, v67);
  }
  else
  {
    if (v174)
    {
      sub_23DBB2BB0((uint64_t)v171, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
      v175 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_107;
    }
    v184 = *(void (**)(char *, char *, uint64_t))(v307 + 40);
    v184(v171, v172, v34);
    v185 = v67[5];
    v186 = &v171[v185];
    v187 = &v172[v185];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v189 = v188;
    v190 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v188 - 8) + 40);
    v190(v186, v187, v188);
    v184(&v171[v67[6]], &v172[v67[6]], v34);
    v190(&v171[v67[7]], &v172[v67[7]], v189);
  }
LABEL_113:
  v191 = v309[11];
  v192 = v315 + v191;
  v193 = v314 + v191;
  v308(v315 + v191, v314 + v191, v311);
  ((void (*)(uint64_t, uint64_t, uint64_t))v304)(v192 + v25[5], v193 + v25[5], v305);
  v194 = v25[6];
  v195 = (void *)(v192 + v194);
  v196 = (const void *)(v193 + v194);
  v197 = v303(v192 + v194, 1, v34);
  v198 = v303((uint64_t)v196, 1, v34);
  if (v197)
  {
    if (!v198)
    {
      (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v195, v196, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v195, 0, 1, v34);
      goto LABEL_119;
    }
    goto LABEL_118;
  }
  if (v198)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v195, v34);
LABEL_118:
    sub_23DBB29B8();
    memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v199 - 8) + 64));
    goto LABEL_119;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 40))(v195, v196, v34);
LABEL_119:
  v200 = v25[7];
  v201 = (void *)(v192 + v200);
  v202 = (const void *)(v193 + v200);
  v203 = v302(v192 + v200, 1, v312);
  v204 = v302((uint64_t)v202, 1, v312);
  if (v203)
  {
    if (!v204)
    {
      (*(void (**)(void *, const void *, uint64_t))(v299 + 32))(v201, v202, v312);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v299 + 56))(v201, 0, 1, v312);
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  if (v204)
  {
    (*(void (**)(void *, uint64_t))(v299 + 8))(v201, v312);
LABEL_124:
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v205 - 8) + 64));
    goto LABEL_125;
  }
  (*(void (**)(void *, const void *, uint64_t))(v299 + 40))(v201, v202, v312);
LABEL_125:
  v206 = v25[8];
  v207 = (void *)(v192 + v206);
  v208 = (const void *)(v193 + v206);
  v209 = v310(v192 + v206, 1, v313);
  v210 = v310((uint64_t)v208, 1, v313);
  if (v209)
  {
    v211 = v306;
    if (!v210)
    {
      (*(void (**)(void *, const void *, uint64_t))(v300 + 32))(v207, v208, v313);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v300 + 56))(v207, 0, 1, v313);
      goto LABEL_131;
    }
    goto LABEL_130;
  }
  v211 = v306;
  if (v210)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v207, v313);
LABEL_130:
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v207, v208, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
    goto LABEL_131;
  }
  (*(void (**)(void *, const void *, uint64_t))(v300 + 40))(v207, v208, v313);
LABEL_131:
  *(_BYTE *)(v192 + v25[9]) = *(_BYTE *)(v193 + v25[9]);
  if (v315 != v314)
  {
    v213 = *(int *)(v211 + 20);
    v214 = (char *)(v192 + v213);
    v215 = (char *)(v193 + v213);
    sub_23DBB2BB0(v192 + v213, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v216 = type metadata accessor for SleepingSampleBaselineAvailability();
    v217 = swift_getEnumCaseMultiPayload();
    if (v217 == 2)
    {
      v220 = *(void (**)(char *, char *, uint64_t))(v298 + 32);
      v220(v214, v215, v311);
      v220(&v214[*(int *)(v297 + 36)], &v215[*(int *)(v297 + 36)], v311);
      sub_23DBBFAFC();
      *(_QWORD *)&v214[*(int *)(v221 + 48)] = *(_QWORD *)&v215[*(int *)(v221 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v217 == 1)
    {
      v218 = *(void (**)(char *, char *, uint64_t))(v298 + 32);
      v218(v214, v215, v311);
      v218(&v214[*(int *)(v297 + 36)], &v215[*(int *)(v297 + 36)], v311);
      sub_23DBBFA90();
      *(_QWORD *)&v214[*(int *)(v219 + 48)] = *(_QWORD *)&v215[*(int *)(v219 + 48)];
      *(_QWORD *)&v214[*(int *)(v219 + 64)] = *(_QWORD *)&v215[*(int *)(v219 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
    }
  }
  v222 = *(int *)(v211 + 24);
  v223 = (char *)(v192 + v222);
  v224 = (char *)(v193 + v222);
  v225 = v301(v223, 1, v67);
  v226 = v301(v224, 1, v67);
  if (v225)
  {
    if (v226)
    {
      v227 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
LABEL_142:
      sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, v227);
      memcpy(v223, v224, *(_QWORD *)(*(_QWORD *)(v228 - 8) + 64));
      goto LABEL_148;
    }
    v229 = *(void (**)(char *, char *, uint64_t))(v307 + 32);
    v229(v223, v224, v34);
    v230 = v67[5];
    v231 = &v223[v230];
    v232 = &v224[v230];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v234 = v233;
    v235 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v233 - 8) + 32);
    v235(v231, v232, v233);
    v229(&v223[v67[6]], &v224[v67[6]], v34);
    v235(&v223[v67[7]], &v224[v67[7]], v234);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v296 + 56))(v223, 0, 1, v67);
  }
  else
  {
    if (v226)
    {
      sub_23DBB2BB0((uint64_t)v223, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
      v227 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
      goto LABEL_142;
    }
    v236 = *(void (**)(char *, char *, uint64_t))(v307 + 40);
    v236(v223, v224, v34);
    v237 = v67[5];
    v238 = &v223[v237];
    v239 = &v224[v237];
    sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
    v241 = v240;
    v242 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 40);
    v242(v238, v239, v240);
    v236(&v223[v67[6]], &v224[v67[6]], v34);
    v242(&v223[v67[7]], &v224[v67[7]], v241);
  }
LABEL_148:
  v243 = v309[12];
  v244 = v315 + v243;
  v245 = v314 + v243;
  v308(v315 + v243, v314 + v243, v311);
  ((void (*)(uint64_t, uint64_t, uint64_t))v304)(v244 + v25[5], v245 + v25[5], v305);
  v246 = v25[6];
  v247 = (void *)(v244 + v246);
  v248 = (const void *)(v245 + v246);
  v249 = v303(v244 + v246, 1, v34);
  v250 = v303((uint64_t)v248, 1, v34);
  if (v249)
  {
    if (!v250)
    {
      (*(void (**)(void *, const void *, uint64_t))(v307 + 32))(v247, v248, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v307 + 56))(v247, 0, 1, v34);
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  if (v250)
  {
    (*(void (**)(void *, uint64_t))(v307 + 8))(v247, v34);
LABEL_153:
    sub_23DBB29B8();
    memcpy(v247, v248, *(_QWORD *)(*(_QWORD *)(v251 - 8) + 64));
    goto LABEL_154;
  }
  (*(void (**)(void *, const void *, uint64_t))(v307 + 40))(v247, v248, v34);
LABEL_154:
  v252 = v25[7];
  v253 = (void *)(v244 + v252);
  v254 = (const void *)(v245 + v252);
  v255 = v302(v244 + v252, 1, v312);
  v256 = v302((uint64_t)v254, 1, v312);
  if (v255)
  {
    if (!v256)
    {
      (*(void (**)(void *, const void *, uint64_t))(v299 + 32))(v253, v254, v312);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v299 + 56))(v253, 0, 1, v312);
      goto LABEL_160;
    }
    goto LABEL_159;
  }
  if (v256)
  {
    (*(void (**)(void *, uint64_t))(v299 + 8))(v253, v312);
LABEL_159:
    sub_23DBB89B8(0, &qword_25431F880, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB878], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v253, v254, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
    goto LABEL_160;
  }
  (*(void (**)(void *, const void *, uint64_t))(v299 + 40))(v253, v254, v312);
LABEL_160:
  v258 = v25[8];
  v259 = (void *)(v244 + v258);
  v260 = (const void *)(v245 + v258);
  v261 = v310(v244 + v258, 1, v313);
  v262 = v310((uint64_t)v260, 1, v313);
  if (v261)
  {
    v263 = v306;
    if (!v262)
    {
      (*(void (**)(void *, const void *, uint64_t))(v300 + 32))(v259, v260, v313);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v300 + 56))(v259, 0, 1, v313);
      goto LABEL_166;
    }
    goto LABEL_165;
  }
  v263 = v306;
  if (v262)
  {
    (*(void (**)(void *, uint64_t))(v300 + 8))(v259, v313);
LABEL_165:
    sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
    memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v264 - 8) + 64));
    goto LABEL_166;
  }
  (*(void (**)(void *, const void *, uint64_t))(v300 + 40))(v259, v260, v313);
LABEL_166:
  *(_BYTE *)(v244 + v25[9]) = *(_BYTE *)(v245 + v25[9]);
  if (v315 != v314)
  {
    v265 = *(int *)(v263 + 20);
    v266 = (char *)(v244 + v265);
    v267 = (char *)(v245 + v265);
    sub_23DBB2BB0(v244 + v265, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaselineAvailability);
    v268 = type metadata accessor for SleepingSampleBaselineAvailability();
    v269 = swift_getEnumCaseMultiPayload();
    if (v269 == 2)
    {
      v272 = *(void (**)(char *, char *, uint64_t))(v298 + 32);
      v272(v266, v267, v311);
      v272(&v266[*(int *)(v297 + 36)], &v267[*(int *)(v297 + 36)], v311);
      sub_23DBBFAFC();
      *(_QWORD *)&v266[*(int *)(v273 + 48)] = *(_QWORD *)&v267[*(int *)(v273 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else if (v269 == 1)
    {
      v270 = *(void (**)(char *, char *, uint64_t))(v298 + 32);
      v270(v266, v267, v311);
      v270(&v266[*(int *)(v297 + 36)], &v267[*(int *)(v297 + 36)], v311);
      sub_23DBBFA90();
      *(_QWORD *)&v266[*(int *)(v271 + 48)] = *(_QWORD *)&v267[*(int *)(v271 + 48)];
      *(_QWORD *)&v266[*(int *)(v271 + 64)] = *(_QWORD *)&v267[*(int *)(v271 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v266, v267, *(_QWORD *)(*(_QWORD *)(v268 - 8) + 64));
    }
  }
  v274 = *(int *)(v263 + 24);
  v275 = (char *)(v244 + v274);
  v276 = (char *)(v245 + v274);
  v277 = v301((char *)(v244 + v274), 1, v67);
  v278 = v301(v276, 1, v67);
  if (v277)
  {
    if (!v278)
    {
      v281 = *(void (**)(char *, char *, uint64_t))(v307 + 32);
      v281(v275, v276, v34);
      v282 = v67[5];
      v283 = &v275[v282];
      v284 = &v276[v282];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v286 = v285;
      v287 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v285 - 8) + 32);
      v287(v283, v284, v285);
      v281(&v275[v67[6]], &v276[v67[6]], v34);
      v287(&v275[v67[7]], &v276[v67[7]], v286);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v296 + 56))(v275, 0, 1, v67);
      return v315;
    }
    v279 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  else
  {
    if (!v278)
    {
      v288 = *(void (**)(char *, char *, uint64_t))(v307 + 40);
      v288(v275, v276, v34);
      v289 = v67[5];
      v290 = &v275[v289];
      v291 = &v276[v289];
      sub_23DBBA2D4(0, &qword_25431F3C0, (unint64_t *)&qword_25431F878);
      v293 = v292;
      v294 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v292 - 8) + 40);
      v294(v290, v291, v292);
      v288(&v275[v67[6]], &v276[v67[6]], v34);
      v294(&v275[v67[7]], &v276[v67[7]], v293);
      return v315;
    }
    sub_23DBB2BB0((uint64_t)v275, (uint64_t (*)(_QWORD))type metadata accessor for SleepingSampleBaseline);
    v279 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68];
  }
  sub_23DBB89B8(0, &qword_25431F760, (uint64_t (*)(uint64_t))type metadata accessor for SleepingSampleBaseline, v279);
  memcpy(v275, v276, *(_QWORD *)(*(_QWORD *)(v280 - 8) + 64));
  return v315;
}

uint64_t getEnumTagSinglePayload for SleepingSampleDaySummary()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DC22FDC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23DC2A154();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = a3[5];
    }
    else
    {
      sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v12 = *(_QWORD *)(v14 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v14;
        v13 = a3[6];
      }
      else
      {
        v8 = type metadata accessor for SleepingSampleBaselineComparison();
        v12 = *(_QWORD *)(v8 - 8);
        v13 = a3[8];
      }
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleDaySummary()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DC230CC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_23DC2A154();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_23DBE69A0(0, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      sub_23DBB89B8(0, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      v14 = *(_QWORD *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = v16;
        v15 = a4[6];
      }
      else
      {
        v10 = type metadata accessor for SleepingSampleBaselineComparison();
        v14 = *(_QWORD *)(v10 - 8);
        v15 = a4[8];
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23DC231B8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_23DC2A154();
  if (v0 <= 0x3F)
  {
    sub_23DBE69A0(319, (unint64_t *)&qword_25431FB50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x24BEE1B68]);
    if (v1 <= 0x3F)
    {
      sub_23DBB89B8(319, &qword_25431F748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for SleepingSampleBaselineComparison();
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

ValueMetadata *type metadata accessor for SleepingSampleDaySummary.OutlierContext()
{
  return &type metadata for SleepingSampleDaySummary.OutlierContext;
}

uint64_t getEnumTagSinglePayload for SleepingSampleDaySummary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleDaySummary.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23DC23398 + 4 * byte_23DC30F4E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23DC233CC + 4 * byte_23DC30F49[v4]))();
}

uint64_t sub_23DC233CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DC233D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DC233DCLL);
  return result;
}

uint64_t sub_23DC233E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DC233F0);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23DC233F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DC233FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleDaySummary.CodingKeys()
{
  return &type metadata for SleepingSampleDaySummary.CodingKeys;
}

unint64_t sub_23DC2341C()
{
  unint64_t result;

  result = qword_256CEA808;
  if (!qword_256CEA808)
  {
    result = MEMORY[0x24263E440](&unk_23DC313B4, &type metadata for SleepingSampleDaySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA808);
  }
  return result;
}

unint64_t sub_23DC23464()
{
  unint64_t result;

  result = qword_25431F888;
  if (!qword_25431F888)
  {
    result = MEMORY[0x24263E440](&unk_23DC31324, &type metadata for SleepingSampleDaySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F888);
  }
  return result;
}

unint64_t sub_23DC234AC()
{
  unint64_t result;

  result = qword_25431F9C0;
  if (!qword_25431F9C0)
  {
    result = MEMORY[0x24263E440](&unk_23DC3134C, &type metadata for SleepingSampleDaySummary.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_25431F9C0);
  }
  return result;
}

uint64_t sub_23DC234F0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x49676E696E726F6DLL && a2 == 0xEC0000007865646ELL;
  if (v2 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E696C65736162 && a2 == 0xED000065676E6152 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023DC33430 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x437265696C74756FLL && a2 == 0xEE00747865746E6FLL || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7461527472616568 && a2 == 0xE900000000000065 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x79784F646F6F6C62 && a2 == 0xEB000000006E6567 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7461726970736572 && a2 == 0xEF6574615279726FLL || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023DC330C0 || (sub_23DC2A7FC() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x656C7341656D6974 && a2 == 0xEA00000000007065)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t SleepingSampleAnalysisFeatureStatus.init(featureStatusByFeatureIdentifier:)()
{
  type metadata accessor for HKFeatureIdentifier(0);
  sub_23DBF27BC();
  sub_23DBB2CB0(&qword_25431F0A8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2610]);
  sub_23DBB2CB0(&qword_25431F090, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2608]);
  sub_23DBB2CB0(&qword_25431F098, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DC2B5C0);
  return sub_23DC2A0C4();
}

void (*SleepingSampleAnalysisFeatureStatus.featureStatusByFeatureIdentifier.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  sub_23DBF27F8();
  v2[4] = sub_23DC2A088();
  return sub_23DC23A58;
}

void sub_23DC23A58(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t SleepingSampleAnalysisFeatureStatus.featureStatusByFeatureIdentifier.getter()
{
  sub_23DBF27F8();
  return sub_23DC2A094();
}

uint64_t SleepingSampleAnalysisFeatureStatus.featureStatusByFeatureIdentifier.setter()
{
  sub_23DBF27F8();
  return sub_23DC2A0A0();
}

void SleepingSampleAnalysisFeatureStatus.dataTypeStatus(for:)(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_23DC23B04()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  char v5;
  id v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  char v13;

  v1 = (void *)sub_23DC2A220();
  sub_23DBF27F8();
  v2 = sub_23DC2A094();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_6;
  v3 = (id)*MEMORY[0x24BDD2E80];
  v4 = sub_23DBF0D48((uint64_t)v3);
  if ((v5 & 1) == 0)
  {

LABEL_6:
    swift_bridgeObjectRelease();

    v7 = 0;
    v8 = 0;
    v9 = -1;
    goto LABEL_4;
  }
  v6 = *(id *)(*(_QWORD *)(v2 + 56) + 8 * v4);

  swift_bridgeObjectRelease();
  v10 = 0;
  sub_23DBDB178(objc_msgSend(v6, sel_objectForKeyedSubscript_, v1), &v10, (uint64_t)&v11);

  v7 = v11;
  v8 = v12;
  v9 = v13;
LABEL_4:
  *(_QWORD *)v0 = v7;
  *(_QWORD *)(v0 + 8) = v8;
  *(_BYTE *)(v0 + 16) = v9;
}

void *SleepingSampleAnalysisFeatureStatus.subscript.getter(void *a1)
{
  uint64_t v2;
  id v3;
  unint64_t v4;
  char v5;
  void *v6;
  id v7;

  sub_23DBF27F8();
  v2 = sub_23DC2A094();
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = a1;
    v4 = sub_23DBF0D48((uint64_t)v3);
    if ((v5 & 1) != 0)
    {
      v6 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v4);
      v7 = v6;
    }
    else
    {
      v6 = 0;
    }

  }
  else
  {
    v6 = 0;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t static SleepingSampleAnalysisFeatureStatus.== infix(_:_:)()
{
  type metadata accessor for HKFeatureIdentifier(0);
  sub_23DBF27BC();
  sub_23DBB2CB0(&qword_25431F0A8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2610]);
  sub_23DBB2CB0(&qword_25431F090, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2608]);
  sub_23DBB2CB0(&qword_25431F098, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DC2B5C0);
  sub_23DBB2CB0(&qword_256CEA810, (uint64_t (*)(uint64_t))sub_23DBF27BC, MEMORY[0x24BEE5BE0]);
  return sub_23DC2A0AC();
}

unint64_t sub_23DC23FA4()
{
  return 0xD000000000000020;
}

uint64_t sub_23DC23FC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23DC24ACC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23DC23FE8()
{
  sub_23DC24548();
  return sub_23DC2A964();
}

uint64_t sub_23DC24010()
{
  sub_23DC24548();
  return sub_23DC2A970();
}

uint64_t SleepingSampleAnalysisFeatureStatus.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_23DC2458C(0, &qword_256CEA818, MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DC24548();
  sub_23DC2A8C8();
  sub_23DBF27F8();
  sub_23DBB2CB0(&qword_256CEA828, (uint64_t (*)(uint64_t))sub_23DBF27F8, MEMORY[0x24BDD21E8]);
  sub_23DC2A7C0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t SleepingSampleAnalysisFeatureStatus.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;

  v19 = a2;
  sub_23DBF27F8();
  v21 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v22 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC2458C(0, &qword_256CEA830, MEMORY[0x24BEE33E0]);
  v20 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v18 - v9;
  v11 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DC24548();
  sub_23DC2A8BC();
  if (!v2)
  {
    v14 = (uint64_t)v13;
    sub_23DBB2CB0(qword_256CEA838, (uint64_t (*)(uint64_t))sub_23DBF27F8, MEMORY[0x24BDD21F8]);
    v16 = v20;
    v15 = v21;
    sub_23DC2A760();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v16);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v14, v22, v15);
    sub_23DC24624(v14, v19);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23DC24330()
{
  type metadata accessor for HKFeatureIdentifier(0);
  sub_23DBF27BC();
  sub_23DBB2CB0(&qword_25431F0A8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2610]);
  sub_23DBB2CB0(&qword_25431F090, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, MEMORY[0x24BDD2608]);
  sub_23DBB2CB0(&qword_25431F098, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_23DC2B5C0);
  sub_23DBB2CB0(&qword_256CEA810, (uint64_t (*)(uint64_t))sub_23DBF27BC, MEMORY[0x24BEE5BE0]);
  return sub_23DC2A0AC();
}

uint64_t sub_23DC2441C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepingSampleAnalysisFeatureStatus.init(from:)(a1, a2);
}

uint64_t sub_23DC24430(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_23DC2458C(0, &qword_256CEA818, MEMORY[0x24BEE3520]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23DC24548();
  sub_23DC2A8C8();
  sub_23DBF27F8();
  sub_23DBB2CB0(&qword_256CEA828, (uint64_t (*)(uint64_t))sub_23DBF27F8, MEMORY[0x24BDD21E8]);
  sub_23DC2A7C0();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23DC24548()
{
  unint64_t result;

  result = qword_256CEA820;
  if (!qword_256CEA820)
  {
    result = MEMORY[0x24263E440](&unk_23DC315D8, &type metadata for SleepingSampleAnalysisFeatureStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA820);
  }
  return result;
}

void sub_23DC2458C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DC24548();
    v7 = a3(a1, &type metadata for SleepingSampleAnalysisFeatureStatus.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t type metadata accessor for SleepingSampleAnalysisFeatureStatus()
{
  uint64_t result;

  result = qword_25431F058;
  if (!qword_25431F058)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23DC24624(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SleepingSampleAnalysisFeatureStatus();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23DC24668@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  sub_23DBF27F8();
  result = sub_23DC2A094();
  *a1 = result;
  return result;
}

uint64_t sub_23DC24698()
{
  sub_23DBF27F8();
  swift_bridgeObjectRetain();
  return sub_23DC2A0A0();
}

uint64_t initializeBufferWithCopyOfBuffer for SleepingSampleAnalysisFeatureStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBF27F8();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for SleepingSampleAnalysisFeatureStatus(uint64_t a1)
{
  uint64_t v2;

  sub_23DBF27F8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for SleepingSampleAnalysisFeatureStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBF27F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for SleepingSampleAnalysisFeatureStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBF27F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for SleepingSampleAnalysisFeatureStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBF27F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for SleepingSampleAnalysisFeatureStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBF27F8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SleepingSampleAnalysisFeatureStatus()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DC24868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBF27F8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SleepingSampleAnalysisFeatureStatus()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DC248B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBF27F8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_23DC248F0()
{
  unint64_t v0;

  sub_23DBF27F8();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for SleepingSampleAnalysisFeatureStatus.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23DC24998 + 4 * byte_23DC31460[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23DC249B8 + 4 * byte_23DC31465[v4]))();
}

_BYTE *sub_23DC24998(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23DC249B8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DC249C0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DC249C8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23DC249D0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23DC249D8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SleepingSampleAnalysisFeatureStatus.CodingKeys()
{
  return &type metadata for SleepingSampleAnalysisFeatureStatus.CodingKeys;
}

unint64_t sub_23DC249F8()
{
  unint64_t result;

  result = qword_256CEA868;
  if (!qword_256CEA868)
  {
    result = MEMORY[0x24263E440](&unk_23DC315B0, &type metadata for SleepingSampleAnalysisFeatureStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA868);
  }
  return result;
}

unint64_t sub_23DC24A40()
{
  unint64_t result;

  result = qword_256CEA870;
  if (!qword_256CEA870)
  {
    result = MEMORY[0x24263E440](&unk_23DC31520, &type metadata for SleepingSampleAnalysisFeatureStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA870);
  }
  return result;
}

unint64_t sub_23DC24A88()
{
  unint64_t result;

  result = qword_256CEA878;
  if (!qword_256CEA878)
  {
    result = MEMORY[0x24263E440](&unk_23DC31548, &type metadata for SleepingSampleAnalysisFeatureStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256CEA878);
  }
  return result;
}

uint64_t sub_23DC24ACC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000020 && a2 == 0x800000023DC33450)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_23DC2A7FC();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.__allocating_init(notificationContent:action:outOfRangeNotificationLastSentDate:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  char v8;

  v6 = swift_allocObject();
  v7 = *(_BYTE *)(a1 + 8);
  v8 = *a2;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)a1;
  *(_BYTE *)(v6 + 24) = v7;
  *(_BYTE *)(v6 + 25) = v8;
  sub_23DC0E8E0(a3, v6 + OBJC_IVAR____TtC13HealthBalance40HealthBalanceNotificationsAnalyticsEvent_outOfRangeNotificationLastSentDate);
  return v6;
}

HealthBalance::HealthBalanceNotificationsAnalyticsEvent::NotificationAction_optional __swiftcall HealthBalanceNotificationsAnalyticsEvent.NotificationAction.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthBalance::HealthBalanceNotificationsAnalyticsEvent::NotificationAction_optional result;
  char v5;

  v2 = v1;
  v3 = sub_23DC2A700();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.NotificationAction.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1852141679;
  if (*v0 != 1)
    v1 = 0x7373696D736964;
  if (*v0)
    return v1;
  else
    return 1684956531;
}

uint64_t sub_23DC24C64(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23DBC5464(*a1, *a2);
}

uint64_t sub_23DC24C70()
{
  sub_23DC2A880();
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

uint64_t sub_23DC24D00()
{
  sub_23DC2A28C();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23DC24D6C()
{
  sub_23DC2A880();
  sub_23DC2A28C();
  swift_bridgeObjectRelease();
  return sub_23DC2A8B0();
}

HealthBalance::HealthBalanceNotificationsAnalyticsEvent::NotificationAction_optional sub_23DC24DF8(Swift::String *a1)
{
  return HealthBalanceNotificationsAnalyticsEvent.NotificationAction.init(rawValue:)(*a1);
}

void sub_23DC24E04(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE400000000000000;
  v5 = 1852141679;
  if (v2 != 1)
  {
    v5 = 0x7373696D736964;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1684956531;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void HealthBalanceNotificationsAnalyticsEvent.notificationContent.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
}

void HealthBalanceNotificationsAnalyticsEvent.action.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 25);
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.outOfRangeNotificationLastSentDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23DC24EC8(v1+ OBJC_IVAR____TtC13HealthBalance40HealthBalanceNotificationsAnalyticsEvent_outOfRangeNotificationLastSentDate, a1);
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.init(notificationContent:action:outOfRangeNotificationLastSentDate:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  char v5;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *a2;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)a1;
  *(_BYTE *)(v3 + 24) = v4;
  *(_BYTE *)(v3 + 25) = v5;
  sub_23DC0E8E0(a3, v3 + OBJC_IVAR____TtC13HealthBalance40HealthBalanceNotificationsAnalyticsEvent_outOfRangeNotificationLastSentDate);
  return v3;
}

uint64_t sub_23DC24EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23DBBF348(0, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.isEventSubmissionIHAGated.getter()
{
  return 1;
}

unint64_t HealthBalanceNotificationsAnalyticsEvent.eventName.getter()
{
  return 0xD000000000000026;
}

unint64_t HealthBalanceNotificationsAnalyticsEvent.makeUnrestrictedEventPayload(with:)()
{
  return sub_23DBEDDB8(MEMORY[0x24BEE4AF8]);
}

void HealthBalanceNotificationsAnalyticsEvent.makeIHAGatedEventPayload(with:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  id v6;
  char v7;
  id v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char v12;

  v4 = objc_msgSend(a1, sel_healthDataSource);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(a1, sel_environmentDataSource);
    v7 = *(_BYTE *)(v1 + 24);
    v11 = *(_QWORD *)(v1 + 16);
    v12 = v7;
    v10 = *(_BYTE *)(v1 + 25);
    v8 = sub_23DC25D1C(v6, v5, (uint64_t)&v11, &v10, v1+ OBJC_IVAR____TtC13HealthBalance40HealthBalanceNotificationsAnalyticsEvent_outOfRangeNotificationLastSentDate);
    if (v2)
    {
      swift_unknownObjectRelease();

    }
    else
    {
      v9 = (uint64_t)v8;

      sub_23DBF7FC4(v9);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_23DBF7F80();
    swift_allocError();
    swift_willThrow();
  }
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.deinit()
{
  uint64_t v0;

  sub_23DC26AA8(v0 + OBJC_IVAR____TtC13HealthBalance40HealthBalanceNotificationsAnalyticsEvent_outOfRangeNotificationLastSentDate, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  return v0;
}

uint64_t HealthBalanceNotificationsAnalyticsEvent.__deallocating_deinit()
{
  uint64_t v0;

  sub_23DC26AA8(v0 + OBJC_IVAR____TtC13HealthBalance40HealthBalanceNotificationsAnalyticsEvent_outOfRangeNotificationLastSentDate, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  return swift_deallocClassInstance();
}

uint64_t sub_23DC25258()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *v0;
  v2 = *v0 & 0x18;
  if ((*v0 & 6) != 0)
  {
    if (v2)
    {
      result = 3;
      if ((v1 & 0x180) != 0)
        goto LABEL_4;
      goto LABEL_11;
    }
    result = 1;
    if ((v1 & 0x180) == 0)
    {
LABEL_11:
      if ((v1 & 0x20) == 0)
        goto LABEL_12;
      goto LABEL_5;
    }
LABEL_4:
    result |= 0x10uLL;
    if ((v1 & 0x20) != 0)
      goto LABEL_5;
LABEL_12:
    if ((v1 & 0x40) == 0)
      return result;
    return result | 4;
  }
  if (v2)
  {
    result = 2;
    if ((v1 & 0x180) == 0)
      goto LABEL_11;
    goto LABEL_4;
  }
  if ((v1 & 0x180) != 0)
  {
    result = 16;
    if ((v1 & 0x20) == 0)
      goto LABEL_12;
  }
  else
  {
    result = 0;
    if ((v1 & 0x20) == 0)
      goto LABEL_12;
  }
LABEL_5:
  result |= 8uLL;
  if ((v1 & 0x40) == 0)
    return result;
  return result | 4;
}

uint64_t sub_23DC252E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *v0;
  v2 = *v0 & 0x18;
  if ((*v0 & 6) != 0)
  {
    if (v2)
    {
      result = 2;
      if ((v1 & 0x180) != 0)
        goto LABEL_4;
LABEL_9:
      if ((v1 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_5;
    }
LABEL_8:
    result = 1;
    if ((v1 & 0x180) != 0)
    {
LABEL_4:
      ++result;
      if ((v1 & 0x20) != 0)
        goto LABEL_5;
LABEL_10:
      if ((v1 & 0x40) == 0)
        return result;
      return ++result;
    }
    goto LABEL_9;
  }
  if (v2)
    goto LABEL_8;
  if ((v1 & 0x180) != 0)
  {
    result = 1;
    if ((v1 & 0x20) == 0)
      goto LABEL_10;
  }
  else
  {
    result = 0;
    if ((v1 & 0x20) == 0)
      goto LABEL_10;
  }
LABEL_5:
  ++result;
  if ((v1 & 0x40) == 0)
    return result;
  return ++result;
}

double sub_23DC25358@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  double result;
  uint64_t v13;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = sub_23DBF0DC8(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v4;
    v13 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_23DBF201C();
      v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_23DBF3444((__int128 *)(*(_QWORD *)(v11 + 56) + 40 * v8), a3);
    sub_23DC25450(v8, v11);
    *v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

unint64_t sub_23DC25450(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = sub_23DC2A544();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        sub_23DC2A880();
        swift_bridgeObjectRetain();
        sub_23DC2A28C();
        v11 = sub_23DC2A8B0();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = v16 + 40 * v3;
          v18 = (__int128 *)(v16 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            v9 = *v18;
            v10 = v18[1];
            *(_QWORD *)(v17 + 32) = *((_QWORD *)v18 + 4);
            *(_OWORD *)v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_23DC25638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  uint64_t v10;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v10 = MEMORY[0x24BEE0D00];
  v30 = MEMORY[0x24BEE0D00];
  v31 = MEMORY[0x24BEE0D28];
  *(_QWORD *)&v29 = a1;
  *((_QWORD *)&v29 + 1) = a2;
  v11 = (_QWORD *)*a6;
  v13 = sub_23DBF0DC8(a3, a4);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_14;
  }
  v17 = v12;
  v18 = v11[3];
  if (v18 >= v16 && (a5 & 1) != 0)
  {
LABEL_7:
    v19 = (_QWORD *)*a6;
    if ((v17 & 1) != 0)
    {
LABEL_8:
      v20 = v19[7] + 40 * v13;
      __swift_destroy_boxed_opaque_existential_1(v20);
      return sub_23DBF3444(&v29, v20);
    }
    goto LABEL_11;
  }
  if (v18 >= v16 && (a5 & 1) == 0)
  {
    sub_23DBF201C();
    goto LABEL_7;
  }
  sub_23DBF1850(v16, a5 & 1);
  v22 = sub_23DBF0DC8(a3, a4);
  if ((v17 & 1) != (v23 & 1))
  {
LABEL_14:
    result = sub_23DC2A844();
    __break(1u);
    return result;
  }
  v13 = v22;
  v19 = (_QWORD *)*a6;
  if ((v17 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v24 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v29, v10);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (uint64_t *)((char *)&v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  sub_23DC25BD8(v13, a3, a4, *v26, v26[1], v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DC257DC(char a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  LOBYTE(v28) = a1;
  v9 = MEMORY[0x24BEE1328];
  v29 = MEMORY[0x24BEE1328];
  v30 = MEMORY[0x24BEE1340];
  v10 = (_QWORD *)*a5;
  v12 = sub_23DBF0DC8(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  v16 = v11;
  v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    v18 = (_QWORD *)*a5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7] + 40 * v12;
      __swift_destroy_boxed_opaque_existential_1(v19);
      return sub_23DBF3444(&v28, v19);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_23DBF201C();
    goto LABEL_7;
  }
  sub_23DBF1850(v15, a4 & 1);
  v21 = sub_23DBF0DC8(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_14:
    result = sub_23DC2A844();
    __break(1u);
    return result;
  }
  v12 = v21;
  v18 = (_QWORD *)*a5;
  if ((v16 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v28, v9);
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v26 + 16))(v25);
  sub_23DC25B4C(v12, a2, a3, *v25, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DC25980(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a6;
  v35 = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v33);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a1, a6);
  v15 = (_QWORD *)*a5;
  v17 = sub_23DBF0DC8(a2, a3);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  v21 = v16;
  v22 = v15[3];
  if (v22 >= v20 && (a4 & 1) != 0)
  {
LABEL_7:
    v23 = (_QWORD *)*a5;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      v24 = v23[7] + 40 * v17;
      __swift_destroy_boxed_opaque_existential_1(v24);
      return sub_23DBF3444(&v33, v24);
    }
    goto LABEL_11;
  }
  if (v22 >= v20 && (a4 & 1) == 0)
  {
    sub_23DBF201C();
    goto LABEL_7;
  }
  sub_23DBF1850(v20, a4 & 1);
  v26 = sub_23DBF0DC8(a2, a3);
  if ((v21 & 1) != (v27 & 1))
  {
LABEL_14:
    result = sub_23DC2A844();
    __break(1u);
    return result;
  }
  v17 = v26;
  v23 = (_QWORD *)*a5;
  if ((v21 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v28 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v33, v34);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v32 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v31 + 16))(v30);
  sub_23DC25C64(v17, a2, a3, (uint64_t)v30, v23, a6, a7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23DC25B4C(unint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  LOBYTE(v11) = a4;
  v12 = MEMORY[0x24BEE1328];
  v13 = MEMORY[0x24BEE1340];
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_23DBF3444(&v11, a5[7] + 40 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_23DC25BD8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = MEMORY[0x24BEE0D00];
  v14 = MEMORY[0x24BEE0D28];
  *(_QWORD *)&v12 = a4;
  *((_QWORD *)&v12 + 1) = a5;
  a6[(a1 >> 6) + 8] |= 1 << a1;
  v7 = (_QWORD *)(a6[6] + 16 * a1);
  *v7 = a2;
  v7[1] = a3;
  result = sub_23DBF3444(&v12, a6[7] + 40 * a1);
  v9 = a6[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a6[2] = v11;
  return result;
}

uint64_t sub_23DC25C64(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a6;
  v21 = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 32))(boxed_opaque_existential_1, a4, a6);
  a5[(a1 >> 6) + 8] |= 1 << a1;
  v14 = (_QWORD *)(a5[6] + 16 * a1);
  *v14 = a2;
  v14[1] = a3;
  result = sub_23DBF3444(&v19, a5[7] + 40 * a1);
  v16 = a5[2];
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    a5[2] = v18;
  return result;
}

id sub_23DC25D1C(void *a1, void *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  id v35;
  void *v36;
  void (*v37)(char *, uint64_t);
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  void *v63;
  id v64;
  unsigned __int8 v65;
  void *v66;
  id v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v103;
  void *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  id v109;
  void *v110;
  unint64_t v111;
  id v112[3];
  uint64_t v113;
  __int128 v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;

  v108 = a2;
  v109 = a1;
  v117 = *MEMORY[0x24BDAC8D0];
  sub_23DBBF348(0, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v103 - v9;
  v11 = sub_23DC29E48();
  v107 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a4;
  v103 = a5;
  if (v14)
  {
    if (v14 == 1)
    {
      v15 = 0xE400000000000000;
      v16 = 1852141679;
    }
    else
    {
      v15 = 0xE700000000000000;
      v16 = 0x7373696D736964;
    }
  }
  else
  {
    v15 = 0xE400000000000000;
    v16 = 1684956531;
  }
  v104 = *(void **)a3;
  v105 = *(unsigned __int8 *)(a3 + 8);
  v17 = MEMORY[0x24BEE0D00];
  v18 = MEMORY[0x24BEE0D28];
  v115 = MEMORY[0x24BEE0D00];
  v116 = MEMORY[0x24BEE0D28];
  *(_QWORD *)&v114 = v16;
  *((_QWORD *)&v114 + 1) = v15;
  sub_23DBF3444(&v114, (uint64_t)v112);
  v19 = (void *)MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v110 = v19;
  v21 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v112, v113);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (uint64_t *)((char *)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  sub_23DC25638(*v23, v23[1], 0x6E6F69746361, 0xE600000000000000, isUniquelyReferenced_nonNull_native, &v110);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
  v25 = v110;
  v111 = (unint64_t)v110;
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v109, sel_activePairedDeviceProductType);
  if (v26)
  {
    v27 = v26;
    v28 = sub_23DC2A244();
    v30 = v29;

    v115 = v17;
    v116 = v18;
    *(_QWORD *)&v114 = v28;
    *((_QWORD *)&v114 + 1) = v30;
    sub_23DBF3444(&v114, (uint64_t)v112);
    LOBYTE(v30) = swift_isUniquelyReferenced_nonNull_native();
    v110 = v25;
    v31 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v112, v113);
    MEMORY[0x24BDAC7A8](v31);
    v33 = (char *)&v103 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v34 + 16))(v33);
    sub_23DC25980((uint64_t)v33, 0xD000000000000016, 0x800000023DC32E60, v30, &v110, v17, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
    v111 = (unint64_t)v110;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_23DC25358(0xD000000000000016, 0x800000023DC32E60, (uint64_t)&v114);
    sub_23DC26AA8((uint64_t)&v114, (unint64_t *)&qword_256CEA458, (void (*)(uint64_t))sub_23DBF9D48);
  }
  v35 = objc_msgSend(v109, sel_currentDate, v103);
  sub_23DC29E24();

  v36 = (void *)sub_23DC29E0C();
  v37 = *(void (**)(char *, uint64_t))(v107 + 8);
  v37(v13, v11);
  *(_QWORD *)&v114 = 0;
  v38 = objc_msgSend(v108, sel_ageWithCurrentDate_error_, v36, &v114);

  v39 = (id)v114;
  if (v38)
  {
    v40 = objc_msgSend(v38, sel_integerValue);

    v41 = MEMORY[0x24BEE1768];
    v42 = MEMORY[0x24BEE1788];
    v115 = MEMORY[0x24BEE1768];
    v116 = MEMORY[0x24BEE1788];
    *(_QWORD *)&v114 = v40;
    sub_23DBF3444(&v114, (uint64_t)v112);
    v43 = v111;
    v44 = swift_isUniquelyReferenced_nonNull_native();
    v110 = (void *)v43;
    v45 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v112, v113);
    MEMORY[0x24BDAC7A8](v45);
    v47 = (char *)&v103 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v48 + 16))(v47);
    sub_23DC25980((uint64_t)v47, 6645601, 0xE300000000000000, v44, &v110, v41, v42);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
    v17 = MEMORY[0x24BEE0D00];
    v111 = (unint64_t)v110;
    swift_bridgeObjectRelease();
  }
  else
  {
    v49 = v39;
    v50 = (void *)sub_23DC29D04();

    swift_willThrow();
    sub_23DC25358(6645601, 0xE300000000000000, (uint64_t)&v114);
    sub_23DC26AA8((uint64_t)&v114, (unint64_t *)&qword_256CEA458, (void (*)(uint64_t))sub_23DBF9D48);
    v106 = 0;
  }
  v112[0] = 0;
  v51 = objc_msgSend(v108, sel_biologicalSexWithError_, v112);
  if (!v51)
  {
    v64 = v112[0];
    swift_bridgeObjectRelease();
    sub_23DC29D04();

    swift_willThrow();
    return v64;
  }
  v52 = v51;
  v53 = v112[0];
  v54 = (id)HKAnalyticsPropertyValueForBiologicalSex();

  v55 = sub_23DC2A244();
  v57 = v56;

  v115 = v17;
  v116 = MEMORY[0x24BEE0D28];
  *(_QWORD *)&v114 = v55;
  *((_QWORD *)&v114 + 1) = v57;
  sub_23DBF3444(&v114, (uint64_t)v112);
  v58 = v111;
  LOBYTE(v55) = swift_isUniquelyReferenced_nonNull_native();
  v110 = (void *)v58;
  v59 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v112, v113);
  MEMORY[0x24BDAC7A8](v59);
  v61 = (uint64_t *)((char *)&v103 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v62 + 16))(v61);
  sub_23DC25638(*v61, v61[1], 0x6369676F6C6F6962, 0xED00007865536C61, v55, &v110);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
  v111 = (unint64_t)v110;
  swift_bridgeObjectRelease();
  sub_23DC24EC8(v103, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v10, 1, v11) == 1)
  {
    v63 = 0;
  }
  else
  {
    v63 = (void *)sub_23DC29E0C();
    v37(v10, v11);
  }
  v65 = v105;
  v66 = v104;
  v67 = objc_msgSend(v109, sel_bucketedNumberOfDaysSinceDate_, v63);

  v68 = MEMORY[0x24BEE0D28];
  if (!v67)
  {
    sub_23DC25358(0xD000000000000019, 0x800000023DC334F0, (uint64_t)&v114);
    sub_23DC26AA8((uint64_t)&v114, (unint64_t *)&qword_256CEA458, (void (*)(uint64_t))sub_23DBF9D48);
    if ((v65 & 1) != 0)
      goto LABEL_19;
LABEL_21:
    v112[0] = v66;
    v79 = sub_23DC252E0();
    v80 = MEMORY[0x24BEE1768];
    v81 = MEMORY[0x24BEE1788];
    v115 = MEMORY[0x24BEE1768];
    v116 = MEMORY[0x24BEE1788];
    *(_QWORD *)&v114 = v79;
    sub_23DBF3444(&v114, (uint64_t)v112);
    v82 = v111;
    v83 = swift_isUniquelyReferenced_nonNull_native();
    v110 = (void *)v82;
    v84 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v112, v113);
    MEMORY[0x24BDAC7A8](v84);
    v86 = (char *)&v103 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v87 + 16))(v86);
    sub_23DC25980((uint64_t)v86, 0x6F69746169766564, 0xEE00746E756F436ELL, v83, &v110, v80, v81);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
    v88 = v110;
    swift_bridgeObjectRelease();
    v112[0] = v66;
    v89 = sub_23DC25258();
    if ((unint64_t)(v89 - 1) <= 0xE)
      v89 = qword_23DC31798[v89 - 1];
    v115 = v80;
    v116 = v81;
    *(_QWORD *)&v114 = v89;
    sub_23DBF3444(&v114, (uint64_t)v112);
    v90 = swift_isUniquelyReferenced_nonNull_native();
    v110 = v88;
    v91 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v112, v113);
    MEMORY[0x24BDAC7A8](v91);
    v93 = (char *)&v103 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v94 + 16))(v93);
    sub_23DC25980((uint64_t)v93, 0xD000000000000010, 0x800000023DC33510, v90, &v110, v80, v81);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
    v78 = (unint64_t)v110;
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x24BEE0D00];
    goto LABEL_24;
  }
  v69 = sub_23DC26AE4();
  v115 = v69;
  v70 = sub_23DC26B20();
  v116 = v70;
  *(_QWORD *)&v114 = v67;
  sub_23DBF3444(&v114, (uint64_t)v112);
  v71 = v111;
  v72 = swift_isUniquelyReferenced_nonNull_native();
  v110 = (void *)v71;
  v111 = 0x8000000000000000;
  v73 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v112, v113);
  MEMORY[0x24BDAC7A8](v73);
  v75 = (char *)&v103 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v76 + 16))(v75);
  v77 = (uint64_t)v75;
  v17 = MEMORY[0x24BEE0D00];
  sub_23DC25980(v77, 0xD000000000000019, 0x800000023DC334F0, v72, &v110, v69, v70);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
  v111 = (unint64_t)v110;
  swift_bridgeObjectRelease();
  if ((v65 & 1) == 0)
    goto LABEL_21;
LABEL_19:
  sub_23DC25358(0x6F69746169766564, 0xEE00746E756F436ELL, (uint64_t)v112);
  sub_23DC26AA8((uint64_t)v112, (unint64_t *)&qword_256CEA458, (void (*)(uint64_t))sub_23DBF9D48);
  sub_23DC25358(0xD000000000000010, 0x800000023DC33510, (uint64_t)v112);
  sub_23DC26AA8((uint64_t)v112, (unint64_t *)&qword_256CEA458, (void (*)(uint64_t))sub_23DBF9D48);
  v78 = v111;
LABEL_24:
  v95 = 0x7365676E616863;
  if ((v65 & (v66 != 0)) != 0)
    v95 = 0x6F4370756D726177;
  v96 = 0xE700000000000000;
  v115 = v17;
  v116 = v68;
  if ((v65 & (v66 != 0)) != 0)
    v96 = 0xEE006574656C706DLL;
  *(_QWORD *)&v114 = v95;
  *((_QWORD *)&v114 + 1) = v96;
  sub_23DBF3444(&v114, (uint64_t)v112);
  v97 = swift_isUniquelyReferenced_nonNull_native();
  v110 = (void *)v78;
  v98 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v112, v113);
  MEMORY[0x24BDAC7A8](v98);
  v100 = (uint64_t *)((char *)&v103 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v101 + 16))(v100);
  sub_23DC25638(*v100, v100[1], 1701869940, 0xE400000000000000, v97, &v110);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
  v64 = v110;
  swift_bridgeObjectRelease();
  return v64;
}

unint64_t sub_23DC268B0()
{
  unint64_t result;

  result = qword_256CEA880;
  if (!qword_256CEA880)
  {
    result = MEMORY[0x24263E440](&protocol conformance descriptor for HealthBalanceNotificationsAnalyticsEvent.NotificationAction, &type metadata for HealthBalanceNotificationsAnalyticsEvent.NotificationAction);
    atomic_store(result, (unint64_t *)&qword_256CEA880);
  }
  return result;
}

uint64_t sub_23DC268F4()
{
  return type metadata accessor for HealthBalanceNotificationsAnalyticsEvent();
}

uint64_t type metadata accessor for HealthBalanceNotificationsAnalyticsEvent()
{
  uint64_t result;

  result = qword_256CEA8B0;
  if (!qword_256CEA8B0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_23DC26938()
{
  unint64_t v0;

  sub_23DBBF348(319, &qword_25431F748, (void (*)(uint64_t))MEMORY[0x24BDCE900]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for HealthBalanceNotificationsAnalyticsEvent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HealthBalanceNotificationsAnalyticsEvent.__allocating_init(notificationContent:action:outOfRangeNotificationLastSentDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t storeEnumTagSinglePayload for HealthBalanceNotificationsAnalyticsEvent.NotificationAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23DC26A28 + 4 * byte_23DC31635[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23DC26A5C + 4 * byte_23DC31630[v4]))();
}

uint64_t sub_23DC26A5C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DC26A64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23DC26A6CLL);
  return result;
}

uint64_t sub_23DC26A78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23DC26A80);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23DC26A84(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23DC26A8C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HealthBalanceNotificationsAnalyticsEvent.NotificationAction()
{
  return &type metadata for HealthBalanceNotificationsAnalyticsEvent.NotificationAction;
}

uint64_t sub_23DC26AA8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_23DBBF348(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_23DC26AE4()
{
  unint64_t result;

  result = qword_256CEA948;
  if (!qword_256CEA948)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_256CEA948);
  }
  return result;
}

unint64_t sub_23DC26B20()
{
  unint64_t result;
  unint64_t v1;

  result = qword_256CEA950;
  if (!qword_256CEA950)
  {
    v1 = sub_23DC26AE4();
    result = MEMORY[0x24263E440](MEMORY[0x24BEE5BE0], v1);
    atomic_store(result, (unint64_t *)&qword_256CEA950);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void SleepingSampleBaseline.init(s:_:_:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;

  sub_23DBD9904(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (void *)objc_opt_self();
  v12 = (void *)objc_opt_self();
  v13 = objc_msgSend(v12, sel_secondUnit);
  v14 = objc_msgSend(v11, sel_quantityWithUnit_doubleValue_, v13, a3);

  if (a2 > a4)
  {
    __break(1u);
  }
  else
  {
    v36 = a1;
    v15 = objc_allocWithZone(MEMORY[0x24BDD3E60]);
    v16 = objc_msgSend(v12, sel_secondUnit);
    v17 = objc_msgSend(v11, sel_quantityWithUnit_doubleValue_, v16, a2);
    v35 = v14;
    v18 = v17;

    v19 = objc_msgSend(v12, sel_secondUnit);
    v20 = objc_msgSend(v11, sel_quantityWithUnit_doubleValue_, v19, a4);

    v21 = objc_msgSend(v15, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v18, v20, 1, 1);
    v22 = objc_msgSend(v12, sel_secondUnit);
    v23 = objc_msgSend(v11, sel_quantityWithUnit_doubleValue_, v22, (a4 - a2) * 0.25);

    v24 = objc_allocWithZone(MEMORY[0x24BDD3E60]);
    v25 = objc_msgSend(v12, sel_secondUnit);
    v26 = objc_msgSend(v11, sel_quantityWithUnit_doubleValue_, v25, a2);

    v27 = objc_msgSend(v12, sel_secondUnit);
    v28 = objc_msgSend(v11, sel_quantityWithUnit_doubleValue_, v27, a4);

    v29 = objc_msgSend(v24, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v26, v28, 1, 1);
    SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)(v35, v21, v23, v29, (uint64_t)v10);
    v30 = type metadata accessor for SleepingSampleBaseline();
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v10, 1, v30))
    {
      sub_23DBBCD88((uint64_t)v10);
      v32 = 1;
      v33 = v36;
    }
    else
    {
      v34 = (uint64_t)v10;
      v33 = v36;
      sub_23DBBA574(v34, v36);
      v32 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v33, v32, 1, v30);
  }
}

void SleepingSampleBaseline.init(perMinute:_:_:iqr:)(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  sub_23DC2725C(a1, a2, (SEL *)&selRef__countPerMinuteUnit, a3, a4, a5, a6);
}

void SleepingSampleBaseline.init(percent:_:_:iqr:)(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  double v24;
  id v25;
  id v26;
  double v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;

  sub_23DBD9904(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (void *)objc_opt_self();
  v16 = (void *)objc_opt_self();
  v17 = objc_msgSend(v16, sel_percentUnit);
  v18 = objc_msgSend(v15, sel_quantityWithUnit_doubleValue_, v17, a5 / 100.0);

  if (a4 > a6)
  {
    __break(1u);
  }
  else
  {
    v42 = a3;
    v19 = objc_allocWithZone(MEMORY[0x24BDD3E60]);
    v20 = objc_msgSend(v16, sel_percentUnit);
    v21 = objc_msgSend(v15, sel_quantityWithUnit_doubleValue_, v20, a4 / 100.0);
    v41 = v18;
    v22 = v21;

    v23 = objc_msgSend(v16, (SEL)&selRef_setDebugIdentifier_ + 4);
    v24 = a6 / 100.0;
    v25 = objc_msgSend(v15, sel_quantityWithUnit_doubleValue_, v23, a6 / 100.0);

    v26 = objc_msgSend(v19, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v22, v25, 1, 1);
    if ((a2 & 1) != 0)
      v27 = (a6 - a4) * 0.25;
    else
      v27 = a1;
    v28 = objc_msgSend(v16, sel_percentUnit);
    v29 = objc_msgSend(v15, sel_quantityWithUnit_doubleValue_, v28, v27 / 100.0);

    v30 = objc_allocWithZone(MEMORY[0x24BDD3E60]);
    v31 = objc_msgSend(v16, sel_percentUnit);
    v32 = objc_msgSend(v15, sel_quantityWithUnit_doubleValue_, v31, a4 / 100.0);

    v33 = objc_msgSend(v16, sel_percentUnit);
    v34 = objc_msgSend(v15, sel_quantityWithUnit_doubleValue_, v33, v24);

    v35 = objc_msgSend(v30, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v32, v34, 1, 1);
    SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)(v41, v26, v29, v35, (uint64_t)v14);
    v36 = type metadata accessor for SleepingSampleBaseline();
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v14, 1, v36))
    {
      sub_23DBBCD88((uint64_t)v14);
      v38 = 1;
      v39 = v42;
    }
    else
    {
      v40 = (uint64_t)v14;
      v39 = v42;
      sub_23DBBA574(v40, v42);
      v38 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v39, v38, 1, v36);
  }
}

void SleepingSampleBaseline.init(celsiusChange:_:_:iqr:)(double a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  sub_23DC2725C(a1, a2, (SEL *)&selRef__changeInDegreeCelsiusUnit, a3, a4, a5, a6);
}

void sub_23DC2725C(double a1@<X0>, char a2@<W1>, SEL *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  double v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  uint64_t v47;

  sub_23DBD9904(0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (void *)objc_opt_self();
  v18 = (void *)objc_opt_self();
  v19 = objc_msgSend(v18, *a3);
  v20 = objc_msgSend(v17, sel_quantityWithUnit_doubleValue_, v19, a6);

  if (a5 > a7)
  {
    __break(1u);
  }
  else
  {
    v47 = a4;
    v21 = objc_allocWithZone(MEMORY[0x24BDD3E60]);
    v22 = objc_msgSend(v18, *a3);
    v46 = v16;
    v23 = v22;
    v24 = objc_msgSend(v17, sel_quantityWithUnit_doubleValue_, v22, a5);

    v25 = objc_msgSend(v18, *a3);
    v26 = objc_msgSend(v17, sel_quantityWithUnit_doubleValue_, v25, a7);
    v45 = v20;
    v27 = v26;

    v28 = objc_msgSend(v21, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v24, v27, 1, 1);
    if ((a2 & 1) != 0)
      v29 = (a7 - a5) * 0.25;
    else
      v29 = a1;
    v30 = objc_msgSend(v18, *a3);
    v31 = objc_msgSend(v17, sel_quantityWithUnit_doubleValue_, v30, v29);

    v32 = objc_allocWithZone(MEMORY[0x24BDD3E60]);
    v33 = objc_msgSend(v18, *a3);
    v34 = objc_msgSend(v17, sel_quantityWithUnit_doubleValue_, v33, a5);

    v35 = objc_msgSend(v18, *a3);
    v36 = objc_msgSend(v17, sel_quantityWithUnit_doubleValue_, v35, a7);

    v37 = (uint64_t)v46;
    v38 = objc_msgSend(v32, sel_initWithMinimum_maximum_isMinimumInclusive_isMaximumInclusive_, v34, v36, 1, 1);

    SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)(v45, v28, v31, v38, v37);
    v39 = type metadata accessor for SleepingSampleBaseline();
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v37, 1, v39))
    {
      sub_23DBBCD88(v37);
      v41 = 1;
      v42 = v47;
    }
    else
    {
      v43 = v37;
      v42 = v47;
      sub_23DBBA574(v43, v47);
      v41 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v42, v41, 1, v39);
  }
}

id SleepingSampleBaseline.init(duration:_:_:iqr:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  void *v23;
  id result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  id v33;
  double v34;
  double v35;
  id v36;
  double v37;
  double v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;

  v47 = a9;
  sub_23DBD9904(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC27858();
  v21 = HKQuantityRange.init(durationBetween:and:)(a1, a2, a5, a6);
  v22 = (void *)objc_opt_self();
  v23 = (void *)objc_opt_self();
  result = objc_msgSend(v23, sel_minuteUnit);
  v25 = 60 * a3;
  if ((unsigned __int128)(a3 * (__int128)60) >> 64 != (60 * a3) >> 63)
  {
    __break(1u);
    goto LABEL_13;
  }
  v26 = __OFADD__(v25, a4);
  v27 = v25 + a4;
  if (v26)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v28 = result;
  v46 = objc_msgSend(v22, sel_quantityWithUnit_doubleValue_, result, (double)v27);

  result = objc_msgSend(v23, sel_minuteUnit);
  v29 = result;
  if ((a10 & 1) != 0)
  {
    v33 = objc_msgSend(v21, sel_maximum);
    objc_msgSend(v33, sel__value);
    v35 = v34;

    v36 = objc_msgSend(v21, sel_minimum);
    objc_msgSend(v36, sel__value);
    v38 = v37;

    v32 = (v35 - v38) * 0.25;
    goto LABEL_8;
  }
  v30 = 60 * a7;
  if ((unsigned __int128)(a7 * (__int128)60) >> 64 != (60 * a7) >> 63)
    goto LABEL_14;
  v26 = __OFADD__(v30, a8);
  v31 = v30 + a8;
  if (v26)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v32 = (double)v31;
LABEL_8:
  v39 = objc_msgSend(v22, sel_quantityWithUnit_doubleValue_, v29, v32);

  v40 = v21;
  SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)(v46, v40, v39, v40, (uint64_t)v20);
  v41 = type metadata accessor for SleepingSampleBaseline();
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v20, 1, v41))
  {
    sub_23DBBCD88((uint64_t)v20);
    v43 = 1;
    v44 = v47;
  }
  else
  {
    v45 = (uint64_t)v20;
    v44 = v47;
    sub_23DBBA574(v45, v47);
    v43 = 0;
  }
  return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v44, v43, 1, v41);
}

unint64_t sub_23DC27858()
{
  unint64_t result;

  result = qword_25431F878;
  if (!qword_25431F878)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25431F878);
  }
  return result;
}

id SleepingSampleBaseline.init(duration:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  void *v23;
  id result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  double v31;
  double v32;
  id v33;
  double v34;
  double v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  sub_23DBD9904(0);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC27858();
  v21 = HKQuantityRange.init(durationBetween:and:)(a1, a2, a3, a6, a7, a8);
  v22 = (void *)objc_opt_self();
  v23 = (void *)objc_opt_self();
  result = objc_msgSend(v23, sel_minuteUnit);
  v25 = 60 * a4;
  if ((unsigned __int128)(a4 * (__int128)60) >> 64 != (60 * a4) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  v26 = __OFADD__(v25, a5);
  v27 = v25 + a5;
  if (v26)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v28 = result;
  v29 = objc_msgSend(v22, sel_quantityWithUnit_doubleValue_, result, (double)v27);

  v30 = objc_msgSend(v21, sel_maximum);
  objc_msgSend(v30, sel__value);
  v32 = v31;

  v33 = objc_msgSend(v21, sel_minimum);
  objc_msgSend(v33, sel__value);
  v35 = v34;

  v36 = objc_msgSend(v23, sel_secondUnit);
  v37 = objc_msgSend(v22, sel_quantityWithUnit_doubleValue_, v36, (v32 - v35) * 0.25);

  v38 = v21;
  SleepingSampleBaseline.init(middle:medialRange:iqr:iqrMedialRange:)(v29, v38, v37, v38, (uint64_t)v20);
  v39 = type metadata accessor for SleepingSampleBaseline();
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v20, 1, v39))
  {
    sub_23DBBCD88((uint64_t)v20);
    v41 = 1;
  }
  else
  {
    sub_23DBBA574((uint64_t)v20, a9);
    v41 = 0;
  }
  return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(a9, v41, 1, v39);
}

Swift::String __swiftcall HKQuantity.formattedValue(for:unit:)(HealthBalance::SleepingSampleDataType a1, HKUnit unit)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String result;
  uint64_t v10;

  v10 = a1;
  v2 = sub_23DC2A940();
  MEMORY[0x24BDAC7A8](v2);
  sub_23DC288D8(0, &qword_256CE9500, MEMORY[0x24BDCB508]);
  MEMORY[0x24BDAC7A8](v3);
  sub_23DC288D8(0, &qword_256CE9510, MEMORY[0x24BDCB588]);
  MEMORY[0x24BDAC7A8](v4);
  v5 = sub_23DC29D88();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v6);
  sub_23DC291CC(0, &qword_256CE9518, MEMORY[0x24BDCD4A8]);
  v8 = MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  __asm { BR              X10 }
  return result;
}

uint64_t sub_23DC27CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v6 = v0;
  v7 = v1;
  objc_msgSend(*(id *)(v5 - 112), sel_doubleValueForUnit_, *(_QWORD *)(v5 - 128));
  *(_QWORD *)(v5 - 104) = v8;
  sub_23DC29ED8();
  sub_23DBB2974();
  sub_23DC29D1C();
  sub_23DC29D70();
  MEMORY[0x24263D390](v3, v2);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 144) + 8))(v3, *(_QWORD *)(v5 - 136));
  v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v9(v4, v2);
  sub_23DBB2CF0();
  sub_23DC2A160();
  v9(v6, v2);
  return *(_QWORD *)(v5 - 96);
}

uint64_t sub_23DC27F70()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  char v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  char v22;
  id v23;
  char v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v1 = v0;
  v2 = sub_23DC2A940();
  v32 = *(_QWORD *)(v2 - 8);
  v33 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v31 = (uint64_t)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v4);
  sub_23DC291CC(0, &qword_256CE9518, MEMORY[0x24BDCD4A8]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v31 - v8;
  v10 = objc_msgSend(v0, sel__unit);
  v11 = (void *)objc_opt_self();
  v12 = v10;
  v13 = objc_msgSend(v11, sel__countPerSecondUnit);
  sub_23DBB2A2C(0, &qword_256CEA968);
  v14 = sub_23DC2A4A8();

  if ((v14 & 1) != 0)
  {

    v37 = 0;
    v38 = 0xE000000000000000;
    v15 = objc_msgSend(v11, sel__countPerMinuteUnit);
    objc_msgSend(v1, sel_doubleValueForUnit_, v15);
    v17 = v16;

    v34 = v17;
    sub_23DC29ED8();
    sub_23DBB2974();
    sub_23DC29D1C();
    sub_23DBB2CF0();
    sub_23DC2A160();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v18 = v35;
    v19 = v36;
    swift_bridgeObjectRelease();
    v37 = v18;
    v38 = v19;
    sub_23DC2A2A4();
  }
  else
  {
    v20 = v12;
    v21 = objc_msgSend(v11, sel_secondUnit);
    v22 = sub_23DC2A4A8();

    if ((v22 & 1) != 0)
    {

    }
    else
    {
      v23 = objc_msgSend(v11, sel_minuteUnit);
      v24 = sub_23DC2A4A8();

      if ((v24 & 1) == 0)
      {
        v30 = objc_msgSend(v1, sel_description);
        v28 = sub_23DC2A244();

        return v28;
      }
    }
    v25 = objc_msgSend(v11, sel_secondUnit);
    objc_msgSend(v1, sel_doubleValueForUnit_, v25);

    sub_23DC2A958();
    v26 = v31;
    static FormatStyle<>.sleepDuration.getter(v31);
    sub_23DBB2CB0(&qword_256CE9540, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0AF0], MEMORY[0x24BDD0AE8]);
    v27 = v33;
    sub_23DC2A94C();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v26, v27);
  }
  return v37;
}

uint64_t static FormatStyle<>.heartRate.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v0 = sub_23DC29D88();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v4);
  sub_23DC291CC(0, &qword_256CE9518, MEMORY[0x24BDCD4A8]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v11 - v8;
  sub_23DC29ED8();
  sub_23DBB2974();
  sub_23DC29D1C();
  sub_23DC29D70();
  MEMORY[0x24263D390](v3, v6);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t static FormatStyle<>.respiratoryRate.getter()
{
  return sub_23DC284BC(&qword_256CE9518, MEMORY[0x24BDCD4A8], (void (*)(char *, _QWORD, unint64_t))MEMORY[0x24BDCD420], (void (*)(char *, uint64_t))MEMORY[0x24BDCD4A0]);
}

uint64_t static FormatStyle<>.bloodOxygen.getter()
{
  return sub_23DC284BC(&qword_256CE9518, MEMORY[0x24BDCD4A8], (void (*)(char *, _QWORD, unint64_t))MEMORY[0x24BDCD420], (void (*)(char *, uint64_t))MEMORY[0x24BDCD4A0]);
}

uint64_t sub_23DC284BC(unint64_t *a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t), void (*a3)(char *, _QWORD, unint64_t), void (*a4)(char *, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  _QWORD v22[2];

  v8 = sub_23DC29D88();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC291CC(0, a1, a2);
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v22 - v18;
  sub_23DC29ED8();
  v20 = sub_23DBB2974();
  a3(v14, MEMORY[0x24BEE13C8], v20);
  v22[1] = 1;
  sub_23DBB2C54();
  sub_23DBB2CB0(&qword_256CE9558, (uint64_t (*)(uint64_t))sub_23DBB2C54, MEMORY[0x24BEE30C8]);
  sub_23DC29D7C();
  a4(v11, v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v16);
}

uint64_t static FormatStyle<>.wristTemperature.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t);
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;

  v19[1] = a1;
  v20 = sub_23DC29D88();
  v1 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_23DC29D4C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v8);
  sub_23DC291CC(0, &qword_256CE9518, MEMORY[0x24BDCD4A8]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v19 - v15;
  sub_23DC29ED8();
  sub_23DBB2974();
  sub_23DC29D1C();
  sub_23DC29D40();
  MEMORY[0x24263D378](v7, v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v14, v10);
  v21 = 2;
  sub_23DBB2C54();
  sub_23DBB2CB0(&qword_256CE9558, (uint64_t (*)(uint64_t))sub_23DBB2C54, MEMORY[0x24BEE30C8]);
  sub_23DC29D7C();
  MEMORY[0x24263D390](v3, v10);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v20);
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v10);
}

uint64_t static FormatStyle<>.bloodOxygenPercentage.getter()
{
  return sub_23DC284BC(&qword_256CEA958, MEMORY[0x24BDCD460], MEMORY[0x24BDCD438], MEMORY[0x24BDCD450]);
}

uint64_t Duration.init(sleepDurationForFormatting:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_23DC29098(a1);
  v3 = v2;

  return v3;
}

void sub_23DC288D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DBB2A2C(255, &qword_256CE9508);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t static FormatStyle<>.sleepDuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v13 = a1;
  v1 = sub_23DC2A8F8();
  v15 = *(_QWORD *)(v1 - 8);
  v16 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23DC2A8E0();
  v4 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23DC2A934();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBB89B8(0, &qword_256CEA960, (uint64_t (*)(uint64_t))MEMORY[0x24BDD0A50], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE3598]);
  sub_23DC2A91C();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23DC2FAC0;
  sub_23DC2A904();
  sub_23DC2A910();
  sub_23DC130E8(v11);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_23DC2A928();
  sub_23DC2A8D4();
  sub_23DC2A8EC();
  sub_23DC29B84();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v3, v16);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void Measurement<>.init(wristTemperatureForFormatting:unit:)(void *a1, void *a2)
{
  void *v4;
  id v5;
  char v6;
  char **v7;
  id v8;
  id v9;
  char v10;
  id v11;
  id v12;

  v4 = (void *)objc_opt_self();
  v12 = a2;
  v5 = objc_msgSend(v4, sel__changeInDegreeCelsiusUnit);
  sub_23DBB2A2C(0, &qword_256CEA968);
  v6 = sub_23DC2A4A8();

  if ((v6 & 1) != 0)
  {
    v7 = &selRef_celsius;
LABEL_5:
    v11 = objc_msgSend((id)objc_opt_self(), *v7);
    objc_msgSend(a1, sel_doubleValueForUnit_, v12);
    sub_23DBB2A2C(0, &qword_256CE9508);
    sub_23DC29B90();

    return;
  }
  v8 = v12;
  v9 = objc_msgSend(v4, sel__changeInDegreeFahrenheitUnit);
  v10 = sub_23DC2A4A8();

  if ((v10 & 1) != 0)
  {
    v7 = &selRef_fahrenheit;
    goto LABEL_5;
  }
  sub_23DC2A694("Fatal error", 11, 2, 0xD000000000000018, 0x800000023DC33560, "HealthBalance/HKQuantity+Formatting.swift", 41, 2, 67, 0);
  __break(1u);
}

uint64_t static FormatStyle<>.wristTemperature(unit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v32 = a1;
  v35 = a2;
  sub_23DBB89B8(0, &qword_256CEA970, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEC38], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x24BEE1C68]);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v30 - v3;
  v5 = sub_23DC29EF0();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_23DC29E9C();
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v31 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v30 - v9;
  sub_23DC29228();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DC288D8(0, &qword_256CEA980, MEMORY[0x24BDCD580]);
  v15 = v14;
  v16 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v30 - v17;
  sub_23DC288D8(0, &qword_256CEA988, MEMORY[0x24BDCB4E0]);
  v20 = v19;
  v21 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v30 - v22;
  sub_23DBB2A2C(0, &qword_256CE9508);
  sub_23DC29BA8();
  sub_23DC29D34();
  static FormatStyle<>.wristTemperature.getter((uint64_t)v13);
  sub_23DC291CC(0, &qword_256CE9518, MEMORY[0x24BDCD4A8]);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v13, 0, 1, v24);
  sub_23DC29B78();
  sub_23DC2928C((uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  sub_23DC29EE4();
  sub_23DC29E90();
  sub_23DBB2A2C(0, &qword_256CEA968);
  v25 = objc_msgSend((id)objc_opt_self(), sel__changeInDegreeFahrenheitUnit);
  LOBYTE(v20) = sub_23DC2A4A8();

  if ((v20 & 1) != 0)
    sub_23DC29EB4();
  else
    sub_23DC29EC0();
  v26 = sub_23DC29ECC();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v4, 0, 1, v26);
  sub_23DC29E84();
  v28 = v33;
  v27 = v34;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v31, v10, v34);
  sub_23DC29EA8();
  sub_23DC288D8(0, &qword_256CE9500, MEMORY[0x24BDCB508]);
  sub_23DC29B9C();
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v10, v27);
}

void sub_23DC29098(void *a1)
{
  void *v2;
  id v3;
  unsigned int v4;
  id v5;
  double v6;
  double v7;
  double v8;

  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_secondUnit);
  v4 = objc_msgSend(a1, sel_isCompatibleWithUnit_, v3);

  if (!v4)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = objc_msgSend(v2, sel_secondUnit);
  objc_msgSend(a1, sel_doubleValueForUnit_, v5);
  v7 = v6;

  v8 = round(v7 / 60.0) * 60.0;
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v8 >= 9.22337204e18)
LABEL_9:
    __break(1u);
}

void sub_23DC291CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_23DBB2974();
    v7 = a3(a1, MEMORY[0x24BEE13C8], v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_23DC29228()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256CEA978)
  {
    sub_23DC291CC(255, &qword_256CE9518, MEMORY[0x24BDCD4A8]);
    v0 = sub_23DC2A4C0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256CEA978);
  }
}

uint64_t sub_23DC2928C(uint64_t a1)
{
  uint64_t v2;

  sub_23DC29228();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23DC292C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v20[3];
  __int128 v21;
  _OWORD v22[2];
  _QWORD v23[2];

  v23[1] = a2;
  v23[0] = a1;
  v5 = a3 + 64;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * i);
    v19 = *v17;
    v18 = v17[1];
    sub_23DBB8948(*(_QWORD *)(a3 + 56) + 32 * i, (uint64_t)v22);
    *(_QWORD *)&v21 = v19;
    *((_QWORD *)&v21 + 1) = v18;
    v20[0] = v21;
    v20[1] = v22[0];
    v20[2] = v22[1];
    swift_bridgeObjectRetain();
    sub_23DC2959C((uint64_t)v23, (uint64_t *)v20);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23DC29840((uint64_t)v20);
      return swift_release();
    }
    result = sub_23DC29840((uint64_t)v20);
    if (v8)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v9)
      goto LABEL_26;
    v15 = *(_QWORD *)(v5 + 8 * v11);
    if (!v15)
      break;
LABEL_17:
    v8 = (v15 - 1) & v15;
  }
  v16 = v11 + 1;
  if (v11 + 1 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 2;
  if (v11 + 2 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 3;
  if (v11 + 3 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 4;
  if (v11 + 4 >= v9)
  {
LABEL_26:
    swift_release();
    return v23[0];
  }
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
LABEL_16:
    v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v9)
      goto LABEL_26;
    v15 = *(_QWORD *)(v5 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

id HKTableFormatter.init(keyValueDomainDictionary:)(uint64_t a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;

  sub_23DC292C8(MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4AF8], a1);
  swift_bridgeObjectRelease();
  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  swift_bridgeObjectRetain();
  v2 = (void *)sub_23DC2A340();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, sel_initWithColumnTitles_, v2);

  v4 = v3;
  swift_bridgeObjectRelease();
  v5 = (void *)sub_23DC2A340();
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_appendHeterogenousRow_, v5);

  return v4;
}

_OWORD *sub_23DC2959C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *result;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  _OWORD v21[2];

  v5 = *a2;
  v4 = a2[1];
  v6 = (uint64_t)(a2 + 2);
  *(_QWORD *)&v20 = *a2;
  *((_QWORD *)&v20 + 1) = v4;
  sub_23DBB8948((uint64_t)(a2 + 2), (uint64_t)v21);
  v7 = *(_QWORD **)a1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = sub_23DBDEF0C(0, v7[2] + 1, 1, v7);
  v9 = v7[2];
  v8 = v7[3];
  if (v9 >= v8 >> 1)
    v7 = sub_23DBDEF0C((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
  v7[2] = v9 + 1;
  v10 = &v7[2 * v9];
  v10[4] = v5;
  v10[5] = v4;
  *(_QWORD *)a1 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  v11 = *a2;
  v12 = a2[1];
  *(_QWORD *)&v20 = *a2;
  *((_QWORD *)&v20 + 1) = v12;
  sub_23DC298E8();
  if ((sub_23DC2A4FC() & 1) != 0
    && (*(_QWORD *)&v20 = v11,
        *((_QWORD *)&v20 + 1) = v12,
        sub_23DBB8948(v6, (uint64_t)v21),
        (swift_dynamicCast() & 1) != 0))
  {
    *((_QWORD *)&v21[0] + 1) = sub_23DC29E48();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v20);
    sub_23DC29DA0();
    v13 = *(_QWORD **)(a1 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_23DBDF280(0, v13[2] + 1, 1, v13);
    v15 = v13[2];
    v14 = v13[3];
    if (v15 >= v14 >> 1)
      v13 = sub_23DBDF280((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
    v13[2] = v15 + 1;
    result = sub_23DBF345C(&v20, &v13[4 * v15 + 4]);
    *(_QWORD *)(a1 + 8) = v13;
  }
  else
  {
    sub_23DBB8948(v6, (uint64_t)v21);
    v17 = *(_QWORD **)(a1 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = sub_23DBDF280(0, v17[2] + 1, 1, v17);
    v19 = v17[2];
    v18 = v17[3];
    if (v19 >= v18 >> 1)
      v17 = sub_23DBDF280((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
    v17[2] = v19 + 1;
    result = sub_23DBF345C(v21, &v17[4 * v19 + 4]);
    *(_QWORD *)(a1 + 8) = v17;
  }
  return result;
}

uint64_t sub_23DC29840(uint64_t a1)
{
  uint64_t v2;

  sub_23DC2987C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23DC2987C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_256CEA990)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_256CEA990);
  }
}

unint64_t sub_23DC298E8()
{
  unint64_t result;

  result = qword_256CEA998;
  if (!qword_256CEA998)
  {
    result = MEMORY[0x24263E440](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256CEA998);
  }
  return result;
}

uint64_t static SleepingSampleBaselineAvailability.available(on:count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  void (*v27)(char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_23DBC2A3C();
  v7 = v6;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v31 - v11;
  sub_23DBBFA18();
  v34 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23DC2A154();
  v17 = *(_QWORD **)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23DBBFAFC();
  v33 = *(int *)(v20 + 48);
  sub_23DC2A100();
  sub_23DBD9920();
  if ((sub_23DC2A1C0() & 1) != 0)
  {
    v21 = *(int *)(v7 + 48);
    v31 = a3;
    v32 = a2;
    v22 = &v12[v21];
    v23 = (uint64_t)v15;
    v24 = (void (*)(char *, char *, uint64_t))v17[4];
    v24(v12, v19, v16);
    v25 = (void (*)(char *, uint64_t, uint64_t))v17[2];
    v25(v22, a1, v16);
    v26 = &v10[*(int *)(v7 + 48)];
    v25(v10, (uint64_t)v12, v16);
    v25(v26, (uint64_t)v22, v16);
    v24((char *)v23, v10, v16);
    v27 = (void (*)(char *, uint64_t))v17[1];
    v27(v26, v16);
    v28 = &v10[*(int *)(v7 + 48)];
    v24(v10, v12, v16);
    v24(v28, v22, v16);
    v24((char *)(v23 + *(int *)(v34 + 36)), v28, v16);
    v27(v10, v16);
    v29 = v31;
    sub_23DBEA250(v23, v31);
    *(_QWORD *)(v29 + v33) = v32;
    type metadata accessor for SleepingSampleBaselineAvailability();
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    __break(1u);
    return sub_23DC29B78();
  }
}

uint64_t sub_23DC29B78()
{
  return MEMORY[0x24BDCB160]();
}

uint64_t sub_23DC29B84()
{
  return MEMORY[0x24BDCB188]();
}

uint64_t sub_23DC29B90()
{
  return MEMORY[0x24BDCB488]();
}

uint64_t sub_23DC29B9C()
{
  return MEMORY[0x24BDCB4B8]();
}

uint64_t sub_23DC29BA8()
{
  return MEMORY[0x24BDCB4C8]();
}

uint64_t sub_23DC29BB4()
{
  return MEMORY[0x24BDCB580]();
}

uint64_t sub_23DC29BC0()
{
  return MEMORY[0x24BDCB830]();
}

uint64_t sub_23DC29BCC()
{
  return MEMORY[0x24BDCB838]();
}

uint64_t sub_23DC29BD8()
{
  return MEMORY[0x24BDCB840]();
}

uint64_t sub_23DC29BE4()
{
  return MEMORY[0x24BDCB848]();
}

uint64_t sub_23DC29BF0()
{
  return MEMORY[0x24BDCB878]();
}

uint64_t sub_23DC29BFC()
{
  return MEMORY[0x24BDCB958]();
}

uint64_t sub_23DC29C08()
{
  return MEMORY[0x24BDCB960]();
}

uint64_t sub_23DC29C14()
{
  return MEMORY[0x24BDCB980]();
}

uint64_t sub_23DC29C20()
{
  return MEMORY[0x24BDCB988]();
}

uint64_t sub_23DC29C2C()
{
  return MEMORY[0x24BDCBA58]();
}

uint64_t sub_23DC29C38()
{
  return MEMORY[0x24BDCBA60]();
}

uint64_t sub_23DC29C44()
{
  return MEMORY[0x24BDCBAB0]();
}

uint64_t sub_23DC29C50()
{
  return MEMORY[0x24BDCBAC0]();
}

uint64_t sub_23DC29C5C()
{
  return MEMORY[0x24BDCBAD0]();
}

uint64_t sub_23DC29C68()
{
  return MEMORY[0x24BDCBAE0]();
}

uint64_t sub_23DC29C74()
{
  return MEMORY[0x24BDCBAE8]();
}

uint64_t sub_23DC29C80()
{
  return MEMORY[0x24BDCBB08]();
}

uint64_t sub_23DC29C8C()
{
  return MEMORY[0x24BDCBB10]();
}

uint64_t sub_23DC29C98()
{
  return MEMORY[0x24BDCBB28]();
}

uint64_t sub_23DC29CA4()
{
  return MEMORY[0x24BDCBB68]();
}

uint64_t sub_23DC29CB0()
{
  return MEMORY[0x24BDCBB78]();
}

uint64_t sub_23DC29CBC()
{
  return MEMORY[0x24BDCBDA8]();
}

uint64_t sub_23DC29CC8()
{
  return MEMORY[0x24BDCBDE0]();
}

uint64_t sub_23DC29CD4()
{
  return MEMORY[0x24BDCC8D0]();
}

uint64_t sub_23DC29CE0()
{
  return MEMORY[0x24BDCC8F8]();
}

uint64_t sub_23DC29CEC()
{
  return MEMORY[0x24BDCC908]();
}

uint64_t sub_23DC29CF8()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t sub_23DC29D04()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t sub_23DC29D10()
{
  return MEMORY[0x24BDCD408]();
}

uint64_t sub_23DC29D1C()
{
  return MEMORY[0x24BDCD420]();
}

uint64_t sub_23DC29D28()
{
  return MEMORY[0x24BDCD4A0]();
}

uint64_t sub_23DC29D34()
{
  return MEMORY[0x24BDCD568]();
}

uint64_t sub_23DC29D40()
{
  return MEMORY[0x24BDCD5E8]();
}

uint64_t sub_23DC29D4C()
{
  return MEMORY[0x24BDCD5F8]();
}

uint64_t sub_23DC29D58()
{
  return MEMORY[0x24BDCD628]();
}

uint64_t sub_23DC29D64()
{
  return MEMORY[0x24BDCD630]();
}

uint64_t sub_23DC29D70()
{
  return MEMORY[0x24BDCD650]();
}

uint64_t sub_23DC29D7C()
{
  return MEMORY[0x24BDCD660]();
}

uint64_t sub_23DC29D88()
{
  return MEMORY[0x24BDCD678]();
}

uint64_t sub_23DC29D94()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_23DC29DA0()
{
  return MEMORY[0x24BDCDE78]();
}

uint64_t sub_23DC29DAC()
{
  return MEMORY[0x24BDCDE90]();
}

uint64_t sub_23DC29DB8()
{
  return MEMORY[0x24BDCDEB0]();
}

uint64_t sub_23DC29DC4()
{
  return MEMORY[0x24BDCDED0]();
}

uint64_t sub_23DC29DD0()
{
  return MEMORY[0x24BDCDEE8]();
}

uint64_t sub_23DC29DDC()
{
  return MEMORY[0x24BDCDF10]();
}

uint64_t sub_23DC29DE8()
{
  return MEMORY[0x24BDCDF18]();
}

uint64_t sub_23DC29DF4()
{
  return MEMORY[0x24BDCDF30]();
}

uint64_t sub_23DC29E00()
{
  return MEMORY[0x24BDCE468]();
}

uint64_t sub_23DC29E0C()
{
  return MEMORY[0x24BDCE5D8]();
}

uint64_t sub_23DC29E18()
{
  return MEMORY[0x24BDCE610]();
}

uint64_t sub_23DC29E24()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t sub_23DC29E30()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t sub_23DC29E3C()
{
  return MEMORY[0x24BDCE8C0]();
}

uint64_t sub_23DC29E48()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t sub_23DC29E54()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t sub_23DC29E60()
{
  return MEMORY[0x24BDCE9D0]();
}

uint64_t sub_23DC29E6C()
{
  return MEMORY[0x24BDCE9F8]();
}

uint64_t sub_23DC29E78()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t sub_23DC29E84()
{
  return MEMORY[0x24BDCEAE8]();
}

uint64_t sub_23DC29E90()
{
  return MEMORY[0x24BDCEAF0]();
}

uint64_t sub_23DC29E9C()
{
  return MEMORY[0x24BDCEAF8]();
}

uint64_t sub_23DC29EA8()
{
  return MEMORY[0x24BDCEB00]();
}

uint64_t sub_23DC29EB4()
{
  return MEMORY[0x24BDCEC18]();
}

uint64_t sub_23DC29EC0()
{
  return MEMORY[0x24BDCEC28]();
}

uint64_t sub_23DC29ECC()
{
  return MEMORY[0x24BDCEC38]();
}

uint64_t sub_23DC29ED8()
{
  return MEMORY[0x24BDCECA0]();
}

uint64_t sub_23DC29EE4()
{
  return MEMORY[0x24BDCED58]();
}

uint64_t sub_23DC29EF0()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_23DC29EFC()
{
  return MEMORY[0x24BDCEF80]();
}

uint64_t sub_23DC29F08()
{
  return MEMORY[0x24BDCEFA0]();
}

uint64_t sub_23DC29F14()
{
  return MEMORY[0x24BDCF028]();
}

uint64_t sub_23DC29F20()
{
  return MEMORY[0x24BDCF078]();
}

uint64_t sub_23DC29F2C()
{
  return MEMORY[0x24BDCF0B8]();
}

uint64_t sub_23DC29F38()
{
  return MEMORY[0x24BDCF0C0]();
}

uint64_t sub_23DC29F44()
{
  return MEMORY[0x24BDCF118]();
}

uint64_t sub_23DC29F50()
{
  return MEMORY[0x24BDCF128]();
}

uint64_t sub_23DC29F5C()
{
  return MEMORY[0x24BDCF1C0]();
}

uint64_t sub_23DC29F68()
{
  return MEMORY[0x24BDCF1C8]();
}

uint64_t sub_23DC29F74()
{
  return MEMORY[0x24BDCF1D0]();
}

uint64_t sub_23DC29F80()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t sub_23DC29F8C()
{
  return MEMORY[0x24BDCF490]();
}

uint64_t sub_23DC29F98()
{
  return MEMORY[0x24BDCF4A0]();
}

uint64_t sub_23DC29FA4()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t sub_23DC29FB0()
{
  return MEMORY[0x24BEE5C38]();
}

uint64_t sub_23DC29FBC()
{
  return MEMORY[0x24BEE5C40]();
}

uint64_t sub_23DC29FC8()
{
  return MEMORY[0x24BEE5C58]();
}

uint64_t sub_23DC29FD4()
{
  return MEMORY[0x24BEE5C60]();
}

uint64_t sub_23DC29FE0()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t sub_23DC29FEC()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t sub_23DC29FF8()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t sub_23DC2A004()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t sub_23DC2A010()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t sub_23DC2A01C()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t sub_23DC2A028()
{
  return MEMORY[0x24BEE5618]();
}

uint64_t sub_23DC2A034()
{
  return MEMORY[0x24BEE5648]();
}

uint64_t sub_23DC2A040()
{
  return MEMORY[0x24BDD2030]();
}

uint64_t sub_23DC2A04C()
{
  return MEMORY[0x24BDD2040]();
}

uint64_t sub_23DC2A058()
{
  return MEMORY[0x24BDD2048]();
}

uint64_t sub_23DC2A064()
{
  return MEMORY[0x24BDD2058]();
}

uint64_t sub_23DC2A070()
{
  return MEMORY[0x24BDD2198]();
}

uint64_t sub_23DC2A07C()
{
  return MEMORY[0x24BDD21A0]();
}

uint64_t sub_23DC2A088()
{
  return MEMORY[0x24BDD21B0]();
}

uint64_t sub_23DC2A094()
{
  return MEMORY[0x24BDD21B8]();
}

uint64_t sub_23DC2A0A0()
{
  return MEMORY[0x24BDD21C0]();
}

uint64_t sub_23DC2A0AC()
{
  return MEMORY[0x24BDD21C8]();
}

uint64_t sub_23DC2A0B8()
{
  return MEMORY[0x24BDD21D0]();
}

uint64_t sub_23DC2A0C4()
{
  return MEMORY[0x24BDD21E0]();
}

uint64_t sub_23DC2A0D0()
{
  return MEMORY[0x24BDD2408]();
}

uint64_t sub_23DC2A0DC()
{
  return MEMORY[0x24BDD2420]();
}

uint64_t sub_23DC2A0E8()
{
  return MEMORY[0x24BDD2438]();
}

uint64_t sub_23DC2A0F4()
{
  return MEMORY[0x24BDD2440]();
}

uint64_t sub_23DC2A100()
{
  return MEMORY[0x24BDD2448]();
}

uint64_t sub_23DC2A10C()
{
  return MEMORY[0x24BDD2458]();
}

uint64_t sub_23DC2A118()
{
  return MEMORY[0x24BDD2460]();
}

uint64_t sub_23DC2A124()
{
  return MEMORY[0x24BDD2468]();
}

uint64_t sub_23DC2A130()
{
  return MEMORY[0x24BDD2470]();
}

uint64_t sub_23DC2A13C()
{
  return MEMORY[0x24BDD2478]();
}

uint64_t sub_23DC2A148()
{
  return MEMORY[0x24BDD2480]();
}

uint64_t sub_23DC2A154()
{
  return MEMORY[0x24BDD2488]();
}

uint64_t sub_23DC2A160()
{
  return MEMORY[0x24BDCF7F0]();
}

uint64_t sub_23DC2A16C()
{
  return MEMORY[0x24BDCF808]();
}

uint64_t sub_23DC2A178()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t sub_23DC2A184()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t sub_23DC2A190()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_23DC2A19C()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t sub_23DC2A1A8()
{
  return MEMORY[0x24BEE07E0]();
}

uint64_t sub_23DC2A1B4()
{
  return MEMORY[0x24BEE07E8]();
}

uint64_t sub_23DC2A1C0()
{
  return MEMORY[0x24BEE07F0]();
}

uint64_t sub_23DC2A1CC()
{
  return MEMORY[0x24BDD24D8]();
}

uint64_t sub_23DC2A1D8()
{
  return MEMORY[0x24BEE08B8]();
}

uint64_t sub_23DC2A1E4()
{
  return MEMORY[0x24BEE08D0]();
}

uint64_t sub_23DC2A1F0()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_23DC2A1FC()
{
  return MEMORY[0x24BDCF8D8]();
}

uint64_t sub_23DC2A208()
{
  return MEMORY[0x24BDCF978]();
}

uint64_t sub_23DC2A214()
{
  return MEMORY[0x24BDCF990]();
}

uint64_t sub_23DC2A220()
{
  return MEMORY[0x24BDCF9E0]();
}

uint64_t sub_23DC2A22C()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t sub_23DC2A238()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t sub_23DC2A244()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t sub_23DC2A250()
{
  return MEMORY[0x24BDCFB20]();
}

uint64_t sub_23DC2A25C()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t sub_23DC2A268()
{
  return MEMORY[0x24BEE0A10]();
}

uint64_t sub_23DC2A274()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t sub_23DC2A280()
{
  return MEMORY[0x24BEE0AD8]();
}

uint64_t sub_23DC2A28C()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_23DC2A298()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t sub_23DC2A2A4()
{
  return MEMORY[0x24BEE0BC0]();
}

uint64_t sub_23DC2A2B0()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t sub_23DC2A2BC()
{
  return MEMORY[0x24BEE0C18]();
}

uint64_t sub_23DC2A2C8()
{
  return MEMORY[0x24BEE0C30]();
}

uint64_t sub_23DC2A2D4()
{
  return MEMORY[0x24BEE0C38]();
}

uint64_t sub_23DC2A2E0()
{
  return MEMORY[0x24BEE0C40]();
}

uint64_t sub_23DC2A2EC()
{
  return MEMORY[0x24BEE0CA0]();
}

uint64_t sub_23DC2A2F8()
{
  return MEMORY[0x24BEE0D98]();
}

uint64_t sub_23DC2A304()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t sub_23DC2A310()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_23DC2A31C()
{
  return MEMORY[0x24BEE1018]();
}

uint64_t sub_23DC2A328()
{
  return MEMORY[0x24BEE1098]();
}

uint64_t sub_23DC2A334()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t sub_23DC2A340()
{
  return MEMORY[0x24BDCFBA8]();
}

uint64_t sub_23DC2A34C()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t sub_23DC2A358()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t sub_23DC2A364()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t sub_23DC2A370()
{
  return MEMORY[0x24BEE1180]();
}

uint64_t sub_23DC2A37C()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_23DC2A388()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t sub_23DC2A394()
{
  return MEMORY[0x24BEE11F0]();
}

uint64_t sub_23DC2A3A0()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_23DC2A3AC()
{
  return MEMORY[0x24BDCFC08]();
}

uint64_t sub_23DC2A3B8()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t sub_23DC2A3C4()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t sub_23DC2A3D0()
{
  return MEMORY[0x24BEE6C50]();
}

uint64_t sub_23DC2A3DC()
{
  return MEMORY[0x24BEE6C90]();
}

uint64_t sub_23DC2A3E8()
{
  return MEMORY[0x24BEE6CB8]();
}

uint64_t sub_23DC2A3F4()
{
  return MEMORY[0x24BDCFCC0]();
}

uint64_t sub_23DC2A400()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_23DC2A40C()
{
  return MEMORY[0x24BDCFD28]();
}

uint64_t sub_23DC2A418()
{
  return MEMORY[0x24BEE18A0]();
}

uint64_t sub_23DC2A424()
{
  return MEMORY[0x24BEE18D0]();
}

uint64_t sub_23DC2A430()
{
  return MEMORY[0x24BEE1918]();
}

uint64_t sub_23DC2A43C()
{
  return MEMORY[0x24BEE1A28]();
}

uint64_t sub_23DC2A448()
{
  return MEMORY[0x24BDCFD60]();
}

uint64_t sub_23DC2A454()
{
  return MEMORY[0x24BEE1B68]();
}

uint64_t sub_23DC2A460()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t sub_23DC2A46C()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t sub_23DC2A478()
{
  return MEMORY[0x24BDD2520]();
}

uint64_t sub_23DC2A484()
{
  return MEMORY[0x24BDD2530]();
}

uint64_t sub_23DC2A490()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t sub_23DC2A49C()
{
  return MEMORY[0x24BDD0178]();
}

uint64_t sub_23DC2A4A8()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t sub_23DC2A4B4()
{
  return MEMORY[0x24BEE79A0]();
}

uint64_t sub_23DC2A4C0()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_23DC2A4CC()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t sub_23DC2A4D8()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t sub_23DC2A4E4()
{
  return MEMORY[0x24BEE1F68]();
}

uint64_t sub_23DC2A4F0()
{
  return MEMORY[0x24BEE1F70]();
}

uint64_t sub_23DC2A4FC()
{
  return MEMORY[0x24BDD05D0]();
}

uint64_t sub_23DC2A508()
{
  return MEMORY[0x24BDD0660]();
}

uint64_t sub_23DC2A514()
{
  return MEMORY[0x24BDD0668]();
}

uint64_t sub_23DC2A520()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t sub_23DC2A52C()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t sub_23DC2A538()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_23DC2A544()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_23DC2A550()
{
  return MEMORY[0x24BEE23A0]();
}

uint64_t sub_23DC2A55C()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t sub_23DC2A568()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_23DC2A574()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_23DC2A580()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_23DC2A58C()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_23DC2A598()
{
  return MEMORY[0x24BEE24D8]();
}

uint64_t sub_23DC2A5A4()
{
  return MEMORY[0x24BEE2510]();
}

uint64_t sub_23DC2A5B0()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t sub_23DC2A5BC()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t sub_23DC2A5C8()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_23DC2A5D4()
{
  return MEMORY[0x24BEE2700]();
}

uint64_t sub_23DC2A5E0()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_23DC2A5EC()
{
  return MEMORY[0x24BEE2798]();
}

uint64_t sub_23DC2A5F8()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t sub_23DC2A604()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t sub_23DC2A610()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t sub_23DC2A61C()
{
  return MEMORY[0x24BEE2950]();
}

uint64_t sub_23DC2A628()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t sub_23DC2A634()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t sub_23DC2A640()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t sub_23DC2A64C()
{
  return MEMORY[0x24BEE29C0]();
}

uint64_t sub_23DC2A658()
{
  return MEMORY[0x24BEE2A00]();
}

uint64_t sub_23DC2A664()
{
  return MEMORY[0x24BEE2A08]();
}

uint64_t sub_23DC2A670()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t sub_23DC2A67C()
{
  return MEMORY[0x24BEE2C00]();
}

uint64_t sub_23DC2A688()
{
  return MEMORY[0x24BEE2F40]();
}

uint64_t sub_23DC2A694(_QWORD a1, _QWORD a2, _QWORD a3, _QWORD a4, _QWORD a5, _QWORD a6, _QWORD a7, _QWORD a8, uint64_t a9, int a10)
{
  return MEMORY[0x24BEE2F48]();
}

uint64_t sub_23DC2A6A0()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t sub_23DC2A6AC()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_23DC2A6B8()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_23DC2A6C4()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_23DC2A6D0()
{
  return MEMORY[0x24BEE30A0]();
}

uint64_t sub_23DC2A6DC()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t sub_23DC2A6E8()
{
  return MEMORY[0x24BEE30B8]();
}

uint64_t sub_23DC2A6F4()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t sub_23DC2A700()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_23DC2A70C()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_23DC2A718()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_23DC2A724()
{
  return MEMORY[0x24BEE32E8]();
}

uint64_t sub_23DC2A730()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_23DC2A73C()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_23DC2A748()
{
  return MEMORY[0x24BEE3360]();
}

uint64_t sub_23DC2A754()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_23DC2A760()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_23DC2A76C()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_23DC2A778()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_23DC2A784()
{
  return MEMORY[0x24BEE3438]();
}

uint64_t sub_23DC2A790()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_23DC2A79C()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_23DC2A7A8()
{
  return MEMORY[0x24BEE34B0]();
}

uint64_t sub_23DC2A7B4()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_23DC2A7C0()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_23DC2A7CC()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_23DC2A7D8()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_23DC2A7E4()
{
  return MEMORY[0x24BEE3598]();
}

uint64_t sub_23DC2A7F0()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t sub_23DC2A7FC()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_23DC2A808()
{
  return MEMORY[0x24BEE3B98]();
}

uint64_t sub_23DC2A814()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t sub_23DC2A820()
{
  return MEMORY[0x24BEE3D98]();
}

uint64_t sub_23DC2A82C()
{
  return MEMORY[0x24BEE3DE0]();
}

uint64_t sub_23DC2A838()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_23DC2A844()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_23DC2A850()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t sub_23DC2A85C()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t sub_23DC2A868()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t sub_23DC2A874()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t sub_23DC2A880()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_23DC2A88C()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_23DC2A898()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_23DC2A8A4()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_23DC2A8B0()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_23DC2A8BC()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_23DC2A8C8()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_23DC2A8D4()
{
  return MEMORY[0x24BDD0900]();
}

uint64_t sub_23DC2A8E0()
{
  return MEMORY[0x24BDD0910]();
}

uint64_t sub_23DC2A8EC()
{
  return MEMORY[0x24BDD09E8]();
}

uint64_t sub_23DC2A8F8()
{
  return MEMORY[0x24BDD09F0]();
}

uint64_t sub_23DC2A904()
{
  return MEMORY[0x24BDD0A30]();
}

uint64_t sub_23DC2A910()
{
  return MEMORY[0x24BDD0A40]();
}

uint64_t sub_23DC2A91C()
{
  return MEMORY[0x24BDD0A50]();
}

uint64_t sub_23DC2A928()
{
  return MEMORY[0x24BDD0AB0]();
}

uint64_t sub_23DC2A934()
{
  return MEMORY[0x24BDD0AB8]();
}

uint64_t sub_23DC2A940()
{
  return MEMORY[0x24BDD0AF0]();
}

uint64_t sub_23DC2A94C()
{
  return MEMORY[0x24BDD0B20]();
}

uint64_t sub_23DC2A958()
{
  return MEMORY[0x24BEE48A0]();
}

uint64_t sub_23DC2A964()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_23DC2A970()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_23DC2A97C()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t HKAnalyticsPropertyValueForBiologicalSex()
{
  return MEMORY[0x24BDD27F0]();
}

uint64_t HKSensitiveLogItem()
{
  return MEMORY[0x24BDD3730]();
}

uint64_t HKSynchronizeNanoPreferencesUserDefaults()
{
  return MEMORY[0x24BDD3800]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x24BEE71B8]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x24BEE71C0]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x24BEE71D0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x24BEE71D8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getExistentialMetatypeMetadata()
{
  return MEMORY[0x24BEE4D20]();
}

uint64_t swift_getExistentialTypeMetadata()
{
  return MEMORY[0x24BEE4D28]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x24BEE4D98]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x24BEE4DE8]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x24BEE4E00]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x24BEE4F88]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

